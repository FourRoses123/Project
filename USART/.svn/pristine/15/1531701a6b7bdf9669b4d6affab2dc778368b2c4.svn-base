#include "user_usart.h"
#include "user_spi.h"
#include "usart.h"
#include "sdconfig.h"
#include "tim.h"

volatile uint16_t checksum;
volatile uint16_t tail;
volatile uint32_t rxcode = 0x10001;
volatile uint8_t frequency = 60;
volatile uint16_t SUM;
volatile uint8_t confidence;
uint16_t cmd[cmd_number] = {0x0001, 0x0005, 0x0003, 0x0004, 0x0002};
PACKAGE_TypeDef *package;
PACKAGE_TypeDef *txpackage;
volatile uint16_t sampling_ready = 0;
volatile uint16_t heartcount = 0;
volatile uint16_t firmware = 0x0100;
volatile uint64_t high_counter = 0;
uint64_t base_timestamp = 0x62A93056F4000;
uint64_t base_systick = 0;

uint8_t daysInMonth(uint8_t month, uint16_t year);
void incrementDate(void);
void Parameterset_query(void);
void Sendheart(void);
uint64_t get_current_systick(void);
void set_base_time(uint64_t timestamp);
uint64_t get_current_timestamp(void);
void Send_time(void);

uint16_t read_be16(const uint8_t *data)
{
    return (data[0] << 8) | data[1];
}
uint16_t exchange(uint16_t *data) // 改为小端字节序
{
	uint8_t front = (*data) & 0xFF;
	uint8_t back = (*data) >> 8;
	uint16_t sum = (front << 8) | back;
	return sum;
}

uint16_t Checksum(uint8_t *data, int16_t length) //逐字节校检和
{
	uint16_t sum;
    if(length <= 1)
    {
    	sum = (uint16_t)data[0];
    	return sum;
    }
    else
    {
    	sum = (uint16_t)data[length-1]+Checksum(data, length - 1);
    	return sum;
    }
}

int16_t write_sum_tail(uint8_t *data, int16_t length)
{
	int16_t checklength = length - 2;
    uint16_t sum = Checksum(&data[2], checklength);
    uint16_t check = exchange(&sum);
    uint16_t tailheart = 0xFE7E;
    memcpy(&data[length], &check, 2);
    memcpy(&data[length + 2], &tailheart, 2);
    length += 4;
    return length;
}

void Receive_Data(uint8_t *rxdata, uint16_t rxlen) //将接收数据填入结构体
{
	package = (PACKAGE_TypeDef *)malloc(rxlen - 4);
	package->head = read_be16(rxdata);
	package->version = rxdata[2];
	package->code = read_be16(&rxdata[3]);
	package->command = read_be16(&rxdata[5]);
	package->datalength = rxdata[7];
	memcpy(package->data, &rxdata[8], package->datalength);
	checksum = read_be16(&rxdata[8 + package->datalength]);
	tail = read_be16(&rxdata[8 + package->datalength + 2]);
	int16_t checklength = (int16_t)rxlen - 6; // 必须改为有符号16位，否则初始化时rxlength = 0导致checklength变为0xfffa，checksum函数运行错误
	SUM = Checksum(&rxdata[2], checklength);
}

void Sampling(uint8_t *rxdata, uint16_t length) //发送采样相关的应答命令
{
	for(uint16_t i = 0;i < length;i++)
	{
		if(i == 5)
			tx_buffer[i] = 0x01;
		else if(i == length - 3)
			tx_buffer[i] = SUM & 0xFF;
		else if(i == length - 4)
		{
			SUM = Checksum(&tx_buffer[2], i - 2);
			tx_buffer[i] = (SUM >> 8) & 0xFF;
		}
		else
			tx_buffer[i] = rxdata[i];
	}
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
}

CMD_Status CMD_Judge(uint8_t *rxdata, uint16_t rxlen) //判断发送数据格式正确与否，错误舍弃
{
	uint16_t i;
	for(i = 0;i < cmd_number;i++)
	{
		if(package->command == cmd[i])
		break;
	}
	uint8_t length = rxlen - sizeof(PACKAGE_TypeDef) - sizeof(SUM) - sizeof(tail);
	if(package->command == HEAD) //包头不对，舍弃
	{
		printf("head error\n");
		data_ready = 0;
		free(package);
		return CMD_FORMAT_ERROR;
	}
	else if(i == cmd_number) //命令格式不对，舍弃
	{
		printf("not supported\n");
		data_ready = 0;
		free(package);
		return CMD_NOT_SUPPORTED;
	}
	else if(package->datalength != length) //数据长度不匹配，舍弃
	{
		printf("invalid\n");
		data_ready = 0;
		free(package);
		return CMD_INVALID_DATA;
	}
	else if(checksum != SUM) //校检不对，舍弃
	{
		printf("check error\n");
		data_ready = 0;
		free(package);
		return CMD_CHECK_ERROR;
	}
	else if(tail != TAIL) //包尾不对，舍弃
	{
		printf("tail error\n");
		data_ready = 0;
		free(package);
		return CMD_FORMAT_ERROR;
	}
	else
		return CMD_OK;
}

CMD_Status CMD_Execute(uint8_t *rxdata, uint16_t rxlen) //根据命令部分数据实现对应内容
{
	uint32_t receivercode = (package->version << 16) | package->code;
	if(receivercode != rxcode)
	{
		printf("receivercode error\n");
		data_ready = 0;
		free(package);
		return CMD_INVALID_DATA;
	}
	else
	{
		if(package->command == cmd1)
		{
			if(package->datalength == 0x01 && package->data[0] == 0x01)
			{
				Sampling(rxdata, rxlen);
				sampling_ready = 0;
				data_ready = 0;
				free(package);
				return CMD_OK;
			}
			else if(package->datalength == 0x01 && package->data[0] == 0)
			{
				Sampling(rxdata, rxlen);
				HAL_Delay(100);
				data_ready = 0;
				sampling_ready = 1;
				free(package);
				return CMD_OK;
			}
			else
			{
				printf("invalid\n");
				free(package);
				data_ready = 0;
				return CMD_INVALID_DATA;
			}
		}
		else if(package->command == cmd5)
		{
			Send_time();
			data_ready = 0;
			free(package);
			return CMD_OK;
		}
		else if(package->command == cmd3)
		{
			Parameterset_query();
			data_ready = 0;
			free(package);
			return CMD_OK;
		}
		else if(package->command == cmd4)
		{
			if(package->datalength != 0x01 || package->data[0] != 0)
			{
				printf("invalid\n");
				data_ready = 0;
				free(package);
				return CMD_INVALID_DATA;
			}
			else
			{
				Parameterset_query();
				data_ready = 0;
				free(package);
				return CMD_OK;
			}
		}
	}
}

/*void update_config_value(char *config_buf, const char *key, int new_value) //更新配置文件内容，目前存在最后一行的转行问题，待修改
{
    char *ptr = strstr(config_buf, key);
    if (ptr == NULL)
    {
        return;
    }
    char *value_start = ptr + strlen(key);
    char *line_end = value_start;
    while (*line_end != '\0' && *line_end != '\n')
    {
        line_end++;
    }
    char new_line[256];
    snprintf(new_line, sizeof(new_line), "%s%d", key, new_value);
    size_t new_line_len = strlen(new_line);
    size_t tail_len = strlen(line_end);
    memmove(ptr + new_line_len, line_end, tail_len);
    memcpy(ptr, new_line, new_line_len);
}*/

void Parameterset_query(void) //参数设置查询函数
{
	size_t txlen;
	if(package->command == cmd3)
	{
		txlen = sizeof(PACKAGE_TypeDef) + 6;
		txpackage = (PACKAGE_TypeDef *)malloc(txlen);
		uint8_t version = package->data[0];
		uint16_t code = read_be16(&(package->data[1]));
		rxcode = (version << 16) | code;
		PEAKTH = read_be16(&(package->data[3]));
		ALMSTTH = read_be16(&(package->data[5]));
		PKWND = read_be16(&(package->data[7]));
		txpackage->version = version;
		txpackage->code = exchange(&code);
		txpackage->command = 0x0301;
		txpackage->datalength = 0x06;
		ASIC_CMD(0x01, PEAKTH);
		ASIC_CMD(0x02, ALMSTTH);
		ASIC_CMD(0x04, PKWND);
		/*char config_buf[256];
		FIL fil;
		UINT bytes_written;
		if(read_config(config_buf, sizeof(config_buf)) == FR_OK)
		{
			update_config_value(config_buf, "Receivercode=", rxcode);
			update_config_value(config_buf, "Frequency=", frequency);
			update_config_value(config_buf, "PEAKTH=", PEAKTH);
			update_config_value(config_buf, "ALMSTTH=", ALMSTTH);
			update_config_value(config_buf, "PKWND=", PKWND);
		}
		f_open(&fil, CONFIG_FILE, FA_OPEN_ALWAYS | FA_WRITE);
		f_write(&fil, config_buf, strlen(config_buf), &bytes_written);
		f_close(&fil);*/
	}
	else
	{
		ReadResult();
		txlen = sizeof(PACKAGE_TypeDef) + 8;
		txpackage = (PACKAGE_TypeDef *)malloc(txlen);
		txpackage->version = package->version;
		txpackage->code = exchange(&(package->code));
		txpackage->command = 0x0401;
		txpackage->datalength = 0x08;
		uint16_t fm = exchange(&firmware);
		memcpy(&(txpackage->data[6]), &fm, sizeof(fm));
	}
	txpackage->head = exchange(&(package->head));
	uint16_t PEAKTHS = exchange(&PEAKTH);
	uint16_t ALMSTTHS = exchange(&ALMSTTH);
	uint16_t PKWNDS = exchange(&PKWND);
	size_t length = 0;
	memcpy(txpackage->data, &PEAKTHS, sizeof(PEAKTH));
	length += sizeof(PEAKTH);
	memcpy(&(txpackage->data[length]), &ALMSTTHS, sizeof(ALMSTTH));
	length += sizeof(ALMSTTH);
	memcpy(&(txpackage->data[length]), &PKWNDS, sizeof(PKWND));
	length += sizeof(PKWND);
	if(package->command == cmd4)
		length += 2;
	if(length != txpackage->datalength)
	{
		printf("handle error\n");
		return CMD_FORMAT_ERROR;
	}
	memcpy(tx_buffer, txpackage, txlen);
	txlen = write_sum_tail(tx_buffer, (int16_t)txlen);
	free(txpackage);
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, txlen);
}

uint64_t get_current_systick(void) //获取当前系统计时 (µs)
{
  uint32_t high1, low;
  do
  {
    high1 = (uint32_t)(high_counter >> 32);
    low = TIM2->CNT;
  } while (high1 != (uint32_t)(high_counter >> 32));
  return high_counter + low;
}

void set_base_time(uint64_t timestamp) // 设置时间基准
{
  base_timestamp = timestamp;
  base_systick = get_current_systick();
}

uint64_t get_current_timestamp(void) //获取当前时间戳 (µs)
{
  uint64_t current_systick = get_current_systick();
  return base_timestamp + (current_systick - base_systick);
}

void Send_time(void) // 校时
{
	size_t length = sizeof(PACKAGE_TypeDef) + 8;
	txpackage = (PACKAGE_TypeDef *)malloc(length);
	txpackage->head = exchange(&package->head);
	txpackage->version = package->version;
	txpackage->code = exchange(&package->code);
	txpackage->command = 0x0501;
	txpackage->datalength = 0x08;
	uint64_t timestamp = 0;
	for(uint16_t i = 0; i < 8;i++)
	timestamp = (timestamp << 8) | package->data[i];
	set_base_time(timestamp);
	uint64_t current_timestamp = get_current_timestamp();
	for(uint16_t i = 0; i < 8;i++)
	txpackage->data[i] = (current_timestamp >> (56 - 8 * i)) & 0xFF;
	memcpy(tx_buffer, txpackage, length);
	length = write_sum_tail(tx_buffer, (int16_t)length);
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
	free(txpackage);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM6)
	  heartcount++;
  if(heartcount >= 2) //之后改成6，为30s一次
  {
	  Sendheart();
	  heartcount = 0;
  }
}

void Sendheart(void) //发送心跳
{
	  static uint8_t hearttx[14];
	  PACKAGE_TypeDef *heartpackage;
	  uint32_t receivercode = rxcode;
	  size_t length = sizeof(PACKAGE_TypeDef) + 2;
	  heartpackage = (PACKAGE_TypeDef *)malloc(length);
	  heartpackage->head = 0x55AA;
	  heartpackage->version = (receivercode >> 16) & 0xFF;
	  uint16_t code = receivercode & 0xFFFF;
	  heartpackage->code = exchange(&code);
	  heartpackage->command = 0x0001;
	  heartpackage->datalength = 0x02;
	  heartpackage->data[0] = 0;
	  heartpackage->data[1] = sampling_ready;
	  memcpy(hearttx,heartpackage,length);
	  length = write_sum_tail(hearttx, (int16_t)length);
	  HAL_UART_Transmit_DMA(&huart1, hearttx, length);
	  free(heartpackage);
}

void Send_Data(void) // 数据上送
{
	  ReadResult();
	  static uint8_t datatx[18];
	  PACKAGE_TypeDef *samplingpackage;
	  uint32_t receivercode = rxcode;
	  size_t length = sizeof(PACKAGE_TypeDef) + 6;
	  samplingpackage = (PACKAGE_TypeDef *)malloc(length);
	  samplingpackage->head = 0x55AA;
	  samplingpackage->version = (receivercode >> 16) & 0xFF;
	  uint16_t code = receivercode & 0xFFFF;
	  samplingpackage->code = exchange(&code);
	  samplingpackage->command = 0x0201;
	  samplingpackage->datalength = 0x06;
	  for(uint16_t i = 0;i < 6;i++)
		  samplingpackage->data[i] = result[i];
	  memcpy(datatx,samplingpackage,length);
	  length = write_sum_tail(datatx, (int16_t)length);
	  if(sampling_ready == 1)
	  {
		  HAL_UART_Transmit_DMA(&huart1, datatx, length);
		  HAL_Delay(1500);
	  }
	  free(samplingpackage);
}

