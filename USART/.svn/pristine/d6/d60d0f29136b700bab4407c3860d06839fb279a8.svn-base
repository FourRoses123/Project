
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800bd00  0800bd00  0000cd00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c218  0800c218  0000e208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c218  0800c218  0000d218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c220  0800c220  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c220  0800c220  0000d220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c224  0800c224  0000d224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800c228  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  20000208  0800c430  0000e208  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  200008cc  0800c430  0000e8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136ab  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003510  00000000  00000000  000218e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00024df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b59  00000000  00000000  00025cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026adb  00000000  00000000  00026851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017519  00000000  00000000  0004d32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2465  00000000  00000000  00064845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  00136cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0013bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bce4 	.word	0x0800bce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800bce4 	.word	0x0800bce4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001026:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_DMA_Init+0xa0>)
 8001028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102a:	4a25      	ldr	r2, [pc, #148]	@ (80010c0 <MX_DMA_Init+0xa0>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6493      	str	r3, [r2, #72]	@ 0x48
 8001032:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <MX_DMA_Init+0xa0>)
 8001034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103e:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <MX_DMA_Init+0xa0>)
 8001040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001042:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <MX_DMA_Init+0xa0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6493      	str	r3, [r2, #72]	@ 0x48
 800104a:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <MX_DMA_Init+0xa0>)
 800104c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	200c      	movs	r0, #12
 800105c:	f002 f97b 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001060:	200c      	movs	r0, #12
 8001062:	f002 f994 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	200d      	movs	r0, #13
 800106c:	f002 f973 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001070:	200d      	movs	r0, #13
 8001072:	f002 f98c 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200e      	movs	r0, #14
 800107c:	f002 f96b 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001080:	200e      	movs	r0, #14
 8001082:	f002 f984 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200f      	movs	r0, #15
 800108c:	f002 f963 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001090:	200f      	movs	r0, #15
 8001092:	f002 f97c 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2044      	movs	r0, #68	@ 0x44
 800109c:	f002 f95b 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80010a0:	2044      	movs	r0, #68	@ 0x44
 80010a2:	f002 f974 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2045      	movs	r0, #69	@ 0x45
 80010ac:	f002 f953 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80010b0:	2045      	movs	r0, #69	@ 0x45
 80010b2:	f002 f96c 	bl	800338e <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	4b38      	ldr	r3, [pc, #224]	@ (80011bc <MX_GPIO_Init+0xf8>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a37      	ldr	r2, [pc, #220]	@ (80011bc <MX_GPIO_Init+0xf8>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b35      	ldr	r3, [pc, #212]	@ (80011bc <MX_GPIO_Init+0xf8>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <MX_GPIO_Init+0xf8>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a31      	ldr	r2, [pc, #196]	@ (80011bc <MX_GPIO_Init+0xf8>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b2f      	ldr	r3, [pc, #188]	@ (80011bc <MX_GPIO_Init+0xf8>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b2c      	ldr	r3, [pc, #176]	@ (80011bc <MX_GPIO_Init+0xf8>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a2b      	ldr	r2, [pc, #172]	@ (80011bc <MX_GPIO_Init+0xf8>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b29      	ldr	r3, [pc, #164]	@ (80011bc <MX_GPIO_Init+0xf8>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2103      	movs	r1, #3
 8001126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112a:	f002 fd4d 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2110      	movs	r1, #16
 8001132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001136:	f002 fd47 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f241 0101 	movw	r1, #4097	@ 0x1001
 8001140:	481f      	ldr	r0, [pc, #124]	@ (80011c0 <MX_GPIO_Init+0xfc>)
 8001142:	f002 fd41 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin ASIC_RST_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|ASIC_RST_Pin;
 8001146:	2313      	movs	r3, #19
 8001148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001160:	f002 fbb8 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8001164:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	@ (80011c0 <MX_GPIO_Init+0xfc>)
 800117e:	f002 fba9 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AFULL_Pin EMPTY_Pin */
  GPIO_InitStruct.Pin = AFULL_Pin|EMPTY_Pin;
 8001182:	2306      	movs	r3, #6
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118a:	2302      	movs	r3, #2
 800118c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	480a      	ldr	r0, [pc, #40]	@ (80011c0 <MX_GPIO_Init+0xfc>)
 8001196:	f002 fb9d 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S3_Pin|S4_Pin;
 800119a:	f640 4318 	movw	r3, #3096	@ 0xc18
 800119e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_GPIO_Init+0xfc>)
 80011b0:	f002 fb90 	bl	80038d4 <HAL_GPIO_Init>

}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400

080011c4 <main>:
uint8_t res = 0;
uint8_t open = 0;
SD_Config current_config;

int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  HAL_Init();
 80011c8:	f001 ff51 	bl	800306e <HAL_Init>
  SystemClock_Config();
 80011cc:	f000 f85a 	bl	8001284 <SystemClock_Config>
  MX_GPIO_Init();
 80011d0:	f7ff ff78 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d4:	f7ff ff24 	bl	8001020 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011d8:	f000 ff46 	bl	8002068 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80011dc:	f000 fc16 	bl	8001a0c <MX_SPI2_Init>
  MX_FATFS_Init();
 80011e0:	f006 f874 	bl	80072cc <MX_FATFS_Init>
  MX_SPI1_Init();
 80011e4:	f000 fbd4 	bl	8001990 <MX_SPI1_Init>
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <main+0xa4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1f      	ldr	r2, [pc, #124]	@ (800126c <main+0xa8>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	099b      	lsrs	r3, r3, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 f8d8 	bl	80033aa <HAL_SYSTICK_Config>
  if(f_open(&fil, current_log_file, FA_OPEN_APPEND | FA_WRITE) == FR_OK)
  {
	  open = 1;
  }
  current_config = load_and_apply_config();*/
  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 80011fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011fe:	491c      	ldr	r1, [pc, #112]	@ (8001270 <main+0xac>)
 8001200:	481c      	ldr	r0, [pc, #112]	@ (8001274 <main+0xb0>)
 8001202:	f004 fd6b 	bl	8005cdc <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001206:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <main+0xb0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <main+0xb0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0210 	orr.w	r2, r2, #16
 8001214:	601a      	str	r2, [r3, #0]
  ON_R();
 8001216:	2201      	movs	r2, #1
 8001218:	2101      	movs	r1, #1
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f002 fcd3 	bl	8003bc8 <HAL_GPIO_WritePin>
  if(CMD_Judge(test, length) == CMD_OK)
	  CMD_Execute(test, length);*/

  while (1)
  {
	  if(data_ready)
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <main+0xb4>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0fa      	beq.n	8001222 <main+0x5e>
	  {
		  Receive_Data(rx_buffer, rx_length);
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <main+0xb8>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	480e      	ldr	r0, [pc, #56]	@ (8001270 <main+0xac>)
 8001236:	f001 f8e9 	bl	800240c <Receive_Data>
		  if(CMD_Judge(rx_buffer, rx_length) == CMD_OK)
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <main+0xb8>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	480b      	ldr	r0, [pc, #44]	@ (8001270 <main+0xac>)
 8001244:	f001 f9ca 	bl	80025dc <CMD_Judge>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d107      	bne.n	800125e <main+0x9a>
			   CMD_Execute(rx_buffer, rx_length);
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <main+0xb8>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <main+0xac>)
 8001258:	f001 fa42 	bl	80026e0 <CMD_Execute>
 800125c:	e7e1      	b.n	8001222 <main+0x5e>
		  else
			  printf("retry\n");
 800125e:	4808      	ldr	r0, [pc, #32]	@ (8001280 <main+0xbc>)
 8001260:	f007 fa28 	bl	80086b4 <puts>
	  if(data_ready)
 8001264:	e7dd      	b.n	8001222 <main+0x5e>
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000
 800126c:	10624dd3 	.word	0x10624dd3
 8001270:	20000224 	.word	0x20000224
 8001274:	20000618 	.word	0x20000618
 8001278:	20000426 	.word	0x20000426
 800127c:	20000424 	.word	0x20000424
 8001280:	0800bd00 	.word	0x0800bd00

08001284 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	@ 0x58
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2244      	movs	r2, #68	@ 0x44
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f007 fb10 	bl	80088b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012aa:	f002 fcb3 	bl	8003c14 <HAL_PWREx_ControlVoltageScaling>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012b4:	f000 f836 	bl	8001324 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	2301      	movs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	2303      	movs	r3, #3
 80012c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80012ce:	2314      	movs	r3, #20
 80012d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012d2:	2307      	movs	r3, #7
 80012d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012da:	2302      	movs	r3, #2
 80012dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fcec 	bl	8003cc0 <HAL_RCC_OscConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ee:	f000 f819 	bl	8001324 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f2:	230f      	movs	r3, #15
 80012f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f6:	2303      	movs	r3, #3
 80012f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	2104      	movs	r1, #4
 800130a:	4618      	mov	r0, r3
 800130c:	f003 f8ec 	bl	80044e8 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001316:	f000 f805 	bl	8001324 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3758      	adds	r7, #88	@ 0x58
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <Error_Handler>:

void Error_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  printf("Error\n");
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <Error_Handler+0x1c>)
 800132e:	f007 f9c1 	bl	80086b4 <puts>
	  HAL_Delay(1000);
 8001332:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001336:	f001 ff0f 	bl	8003158 <HAL_Delay>
	  printf("Error\n");
 800133a:	bf00      	nop
 800133c:	e7f6      	b.n	800132c <Error_Handler+0x8>
 800133e:	bf00      	nop
 8001340:	0800bd08 	.word	0x0800bd08

08001344 <SPI_TransmitReceive>:
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}

uint8_t SPI_TransmitReceive(uint8_t data) //发送接收函数封装
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1 ,100);
 800134e:	f107 020f 	add.w	r2, r7, #15
 8001352:	1df9      	adds	r1, r7, #7
 8001354:	2364      	movs	r3, #100	@ 0x64
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	4804      	ldr	r0, [pc, #16]	@ (800136c <SPI_TransmitReceive+0x28>)
 800135c:	f003 fec7 	bl	80050ee <HAL_SPI_TransmitReceive>
    return rx_data;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000490 	.word	0x20000490

08001370 <SD_PowerOnSeq>:

void SD_PowerOnSeq(void) //80个时钟周期
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800137c:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <SD_PowerOnSeq+0x34>)
 800137e:	f002 fc23 	bl	8003bc8 <HAL_GPIO_WritePin>
    for(uint8_t i=0; i<10; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	e005      	b.n	8001394 <SD_PowerOnSeq+0x24>
    {
        SPI_TransmitReceive(0xFF);
 8001388:	20ff      	movs	r0, #255	@ 0xff
 800138a:	f7ff ffdb 	bl	8001344 <SPI_TransmitReceive>
    for(uint8_t i=0; i<10; i++)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	3301      	adds	r3, #1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b09      	cmp	r3, #9
 8001398:	d9f6      	bls.n	8001388 <SD_PowerOnSeq+0x18>
    }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	48000400 	.word	0x48000400

080013a8 <SD_SendCmd>:

uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)  //发送cmd命令，arg参数及crc校准
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	4613      	mov	r3, r2
 80013b6:	71bb      	strb	r3, [r7, #6]
	uint8_t retry = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
	uint8_t response;
	do{
		retry=SPI_TransmitReceive(0xFF);
 80013bc:	20ff      	movs	r0, #255	@ 0xff
 80013be:	f7ff ffc1 	bl	8001344 <SPI_TransmitReceive>
 80013c2:	4603      	mov	r3, r0
 80013c4:	73fb      	strb	r3, [r7, #15]
	}while(retry!=0xFF);  //这段如果不加，发送CMD8返回值会错误
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2bff      	cmp	r3, #255	@ 0xff
 80013ca:	d1f7      	bne.n	80013bc <SD_SendCmd+0x14>

    SPI_TransmitReceive(0x40 | cmd);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ffb5 	bl	8001344 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 24) & 0xFF);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	0e1b      	lsrs	r3, r3, #24
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ffaf 	bl	8001344 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 16) & 0xFF);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffa9 	bl	8001344 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 8)  & 0xFF);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ffa3 	bl	8001344 <SPI_TransmitReceive>
    SPI_TransmitReceive(arg & 0xFF);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff9e 	bl	8001344 <SPI_TransmitReceive>
    SPI_TransmitReceive(crc | 0x01);
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff97 	bl	8001344 <SPI_TransmitReceive>
    retry = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]

	do {
	response = SPI_TransmitReceive(0xFF);
 800141a:	20ff      	movs	r0, #255	@ 0xff
 800141c:	f7ff ff92 	bl	8001344 <SPI_TransmitReceive>
 8001420:	4603      	mov	r3, r0
 8001422:	73bb      	strb	r3, [r7, #14]
	retry++;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3301      	adds	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
	} while ((response & 0x80) && (retry < 0xFF));
 800142a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800142e:	2b00      	cmp	r3, #0
 8001430:	da02      	bge.n	8001438 <SD_SendCmd+0x90>
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2bff      	cmp	r3, #255	@ 0xff
 8001436:	d1f0      	bne.n	800141a <SD_SendCmd+0x72>
	return response;
 8001438:	7bbb      	ldrb	r3, [r7, #14]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <SD_Init>:

SD_Status SD_Init(void) //SD卡初始化
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
	uint8_t r1;
	uint8_t buff[6] = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	809a      	strh	r2, [r3, #4]
	uint16_t retry;
	uint8_t i;

	SD_PowerOnSeq();
 8001452:	f7ff ff8d 	bl	8001370 <SD_PowerOnSeq>
	SD_CS_LOW();
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800145c:	486f      	ldr	r0, [pc, #444]	@ (800161c <SD_Init+0x1d8>)
 800145e:	f002 fbb3 	bl	8003bc8 <HAL_GPIO_WritePin>

	do{
		r1 = SD_SendCmd(CMD0 ,0, 0x95);
 8001462:	2295      	movs	r2, #149	@ 0x95
 8001464:	2100      	movs	r1, #0
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff ff9e 	bl	80013a8 <SD_SendCmd>
 800146c:	4603      	mov	r3, r0
 800146e:	733b      	strb	r3, [r7, #12]
	}while(r1!=0x01);
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d1f5      	bne.n	8001462 <SD_Init+0x1e>

	SD_TYPE=0;
 8001476:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <SD_Init+0x1dc>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
	r1 = SD_SendCmd(CMD8, 0x1AA, 0x87);
 800147c:	2287      	movs	r2, #135	@ 0x87
 800147e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001482:	2008      	movs	r0, #8
 8001484:	f7ff ff90 	bl	80013a8 <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	733b      	strb	r3, [r7, #12]
	if(r1==0x01)
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d161      	bne.n	8001556 <SD_Init+0x112>
	{
		for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0xFF);
 8001492:	2300      	movs	r3, #0
 8001494:	737b      	strb	r3, [r7, #13]
 8001496:	e00d      	b.n	80014b4 <SD_Init+0x70>
 8001498:	7b7c      	ldrb	r4, [r7, #13]
 800149a:	20ff      	movs	r0, #255	@ 0xff
 800149c:	f7ff ff52 	bl	8001344 <SPI_TransmitReceive>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	f104 0310 	add.w	r3, r4, #16
 80014a8:	443b      	add	r3, r7
 80014aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
 80014b0:	3301      	adds	r3, #1
 80014b2:	737b      	strb	r3, [r7, #13]
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d9ee      	bls.n	8001498 <SD_Init+0x54>
		if(buff[2]==0X01&&buff[3]==0XAA)
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	f040 8098 	bne.w	80015f2 <SD_Init+0x1ae>
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2baa      	cmp	r3, #170	@ 0xaa
 80014c6:	f040 8094 	bne.w	80015f2 <SD_Init+0x1ae>
		{
			retry=0XFFFE;
 80014ca:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80014ce:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2037      	movs	r0, #55	@ 0x37
 80014d6:	f7ff ff67 	bl	80013a8 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0x40000000,0);
 80014da:	2200      	movs	r2, #0
 80014dc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80014e0:	2029      	movs	r0, #41	@ 0x29
 80014e2:	f7ff ff61 	bl	80013a8 <SD_SendCmd>
 80014e6:	4603      	mov	r3, r0
 80014e8:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 80014ea:	7b3b      	ldrb	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d004      	beq.n	80014fa <SD_Init+0xb6>
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	1e5a      	subs	r2, r3, #1
 80014f4:	81fa      	strh	r2, [r7, #14]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1ea      	bne.n	80014d0 <SD_Init+0x8c>
			r1=SD_SendCmd(CMD58,0,0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	203a      	movs	r0, #58	@ 0x3a
 8001500:	f7ff ff52 	bl	80013a8 <SD_SendCmd>
 8001504:	4603      	mov	r3, r0
 8001506:	733b      	strb	r3, [r7, #12]
			if(retry&&r1==0)
 8001508:	89fb      	ldrh	r3, [r7, #14]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d071      	beq.n	80015f2 <SD_Init+0x1ae>
 800150e:	7b3b      	ldrb	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d16e      	bne.n	80015f2 <SD_Init+0x1ae>
			{
				for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0XFF);
 8001514:	2300      	movs	r3, #0
 8001516:	737b      	strb	r3, [r7, #13]
 8001518:	e00d      	b.n	8001536 <SD_Init+0xf2>
 800151a:	7b7c      	ldrb	r4, [r7, #13]
 800151c:	20ff      	movs	r0, #255	@ 0xff
 800151e:	f7ff ff11 	bl	8001344 <SPI_TransmitReceive>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	f104 0310 	add.w	r3, r4, #16
 800152a:	443b      	add	r3, r7
 800152c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001530:	7b7b      	ldrb	r3, [r7, #13]
 8001532:	3301      	adds	r3, #1
 8001534:	737b      	strb	r3, [r7, #13]
 8001536:	7b7b      	ldrb	r3, [r7, #13]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d9ee      	bls.n	800151a <SD_Init+0xd6>
				if(buff[0]&0x40){
 800153c:	793b      	ldrb	r3, [r7, #4]
 800153e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <SD_Init+0x10a>
					SD_TYPE=V2HC;
 8001546:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <SD_Init+0x1dc>)
 8001548:	2206      	movs	r2, #6
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e051      	b.n	80015f2 <SD_Init+0x1ae>
				}else {
					SD_TYPE=V2;
 800154e:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <SD_Init+0x1dc>)
 8001550:	2204      	movs	r2, #4
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e04d      	b.n	80015f2 <SD_Init+0x1ae>
			}
		}
	}
	else
	{
		SD_SendCmd(CMD55,0,0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2037      	movs	r0, #55	@ 0x37
 800155c:	f7ff ff24 	bl	80013a8 <SD_SendCmd>
		r1=SD_SendCmd(ACMD41,0,0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2029      	movs	r0, #41	@ 0x29
 8001566:	f7ff ff1f 	bl	80013a8 <SD_SendCmd>
 800156a:	4603      	mov	r3, r0
 800156c:	733b      	strb	r3, [r7, #12]
		if(r1<=1)
 800156e:	7b3b      	ldrb	r3, [r7, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d81a      	bhi.n	80015aa <SD_Init+0x166>
		{
			SD_TYPE=V1;
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <SD_Init+0x1dc>)
 8001576:	2202      	movs	r2, #2
 8001578:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 800157a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800157e:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2037      	movs	r0, #55	@ 0x37
 8001586:	f7ff ff0f 	bl	80013a8 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0,0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2029      	movs	r0, #41	@ 0x29
 8001590:	f7ff ff0a 	bl	80013a8 <SD_SendCmd>
 8001594:	4603      	mov	r3, r0
 8001596:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 8001598:	7b3b      	ldrb	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01a      	beq.n	80015d4 <SD_Init+0x190>
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	1e5a      	subs	r2, r3, #1
 80015a2:	81fa      	strh	r2, [r7, #14]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1eb      	bne.n	8001580 <SD_Init+0x13c>
 80015a8:	e014      	b.n	80015d4 <SD_Init+0x190>
		}else
		{
			SD_TYPE=MMC;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <SD_Init+0x1dc>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 80015b0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80015b4:	81fb      	strh	r3, [r7, #14]
			do
			{
				r1=SD_SendCmd(CMD1,0,0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fef4 	bl	80013a8 <SD_SendCmd>
 80015c0:	4603      	mov	r3, r0
 80015c2:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 80015c4:	7b3b      	ldrb	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <SD_Init+0x190>
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	81fa      	strh	r2, [r7, #14]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <SD_Init+0x172>
		}
		if(retry==0||SD_SendCmd(CMD16,512,0)!=0)SD_TYPE=ERR;
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <SD_Init+0x1a8>
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015e0:	2010      	movs	r0, #16
 80015e2:	f7ff fee1 	bl	80013a8 <SD_SendCmd>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <SD_Init+0x1ae>
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <SD_Init+0x1dc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
	}
	SD_CS_HIGH();
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015f8:	4808      	ldr	r0, [pc, #32]	@ (800161c <SD_Init+0x1d8>)
 80015fa:	f002 fae5 	bl	8003bc8 <HAL_GPIO_WritePin>
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <SD_Init+0x1e0>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]

    if(SD_TYPE != ERR)
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <SD_Init+0x1dc>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SD_Init+0x1cc>
    	return SD_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	e000      	b.n	8001612 <SD_Init+0x1ce>
    else
    	return SD_ERROR;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	48000400 	.word	0x48000400
 8001620:	20000428 	.word	0x20000428
 8001624:	20000490 	.word	0x20000490

08001628 <SD_ReceiveData>:

uint8_t SD_ReceiveData(uint8_t *data, uint16_t len) //从SD卡读取指定长度的数据块，len为512时为单块大小
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
   uint8_t r1;
   SD_CS_LOW();
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800163a:	4817      	ldr	r0, [pc, #92]	@ (8001698 <SD_ReceiveData+0x70>)
 800163c:	f002 fac4 	bl	8003bc8 <HAL_GPIO_WritePin>
   do
   {
      r1 = SPI_TransmitReceive(0xFF);
 8001640:	20ff      	movs	r0, #255	@ 0xff
 8001642:	f7ff fe7f 	bl	8001344 <SPI_TransmitReceive>
 8001646:	4603      	mov	r3, r0
 8001648:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(100);
 800164a:	2064      	movs	r0, #100	@ 0x64
 800164c:	f001 fd84 	bl	8003158 <HAL_Delay>
		}while(r1 != 0xFE); // sd卡spi模式单块读取的起始令牌是0xFE
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2bfe      	cmp	r3, #254	@ 0xfe
 8001654:	d1f4      	bne.n	8001640 <SD_ReceiveData+0x18>
  while(len--)
 8001656:	e009      	b.n	800166c <SD_ReceiveData+0x44>
  {
   *data = SPI_TransmitReceive(0xFF);
 8001658:	20ff      	movs	r0, #255	@ 0xff
 800165a:	f7ff fe73 	bl	8001344 <SPI_TransmitReceive>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	701a      	strb	r2, [r3, #0]
   data++;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	607b      	str	r3, [r7, #4]
  while(len--)
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	1e5a      	subs	r2, r3, #1
 8001670:	807a      	strh	r2, [r7, #2]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <SD_ReceiveData+0x30>
  }
  SPI_TransmitReceive(0xFF);
 8001676:	20ff      	movs	r0, #255	@ 0xff
 8001678:	f7ff fe64 	bl	8001344 <SPI_TransmitReceive>
  SPI_TransmitReceive(0xFF);
 800167c:	20ff      	movs	r0, #255	@ 0xff
 800167e:	f7ff fe61 	bl	8001344 <SPI_TransmitReceive>
  SD_CS_HIGH();
 8001682:	2201      	movs	r2, #1
 8001684:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001688:	4803      	ldr	r0, [pc, #12]	@ (8001698 <SD_ReceiveData+0x70>)
 800168a:	f002 fa9d 	bl	8003bc8 <HAL_GPIO_WritePin>
  return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	48000400 	.word	0x48000400

0800169c <SD_SendBlock>:

uint8_t SD_SendBlock(uint8_t*buf,uint8_t cmd) //写入扇区内容，512字节
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint8_t r1;
	do{
		r1=SPI_TransmitReceive(0xFF);
 80016a8:	20ff      	movs	r0, #255	@ 0xff
 80016aa:	f7ff fe4b 	bl	8001344 <SPI_TransmitReceive>
 80016ae:	4603      	mov	r3, r0
 80016b0:	737b      	strb	r3, [r7, #13]
	}while(r1!=0xFF);
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	2bff      	cmp	r3, #255	@ 0xff
 80016b6:	d1f7      	bne.n	80016a8 <SD_SendBlock+0xc>

	SPI_TransmitReceive(cmd);
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe42 	bl	8001344 <SPI_TransmitReceive>
	if(cmd!=0xFD) //0xFD为多块写入停止令牌
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	2bfd      	cmp	r3, #253	@ 0xfd
 80016c4:	d022      	beq.n	800170c <SD_SendBlock+0x70>
	{
		for(i = 0;i < 512;i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	81fb      	strh	r3, [r7, #14]
 80016ca:	e009      	b.n	80016e0 <SD_SendBlock+0x44>
			SPI_TransmitReceive(buf[i]);
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fe35 	bl	8001344 <SPI_TransmitReceive>
		for(i = 0;i < 512;i++)
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	3301      	adds	r3, #1
 80016de:	81fb      	strh	r3, [r7, #14]
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016e6:	d3f1      	bcc.n	80016cc <SD_SendBlock+0x30>
		SPI_TransmitReceive(0xFF);
 80016e8:	20ff      	movs	r0, #255	@ 0xff
 80016ea:	f7ff fe2b 	bl	8001344 <SPI_TransmitReceive>
		SPI_TransmitReceive(0xFF);
 80016ee:	20ff      	movs	r0, #255	@ 0xff
 80016f0:	f7ff fe28 	bl	8001344 <SPI_TransmitReceive>
		i=SPI_TransmitReceive(0xFF);
 80016f4:	20ff      	movs	r0, #255	@ 0xff
 80016f6:	f7ff fe25 	bl	8001344 <SPI_TransmitReceive>
 80016fa:	4603      	mov	r3, r0
 80016fc:	81fb      	strh	r3, [r7, #14]
		if((i&0x1F)!=0x05) //低5位为状态码，高3位为保留，应舍弃，0x05表示接收正确
 80016fe:	89fb      	ldrh	r3, [r7, #14]
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2b05      	cmp	r3, #5
 8001706:	d001      	beq.n	800170c <SD_SendBlock+0x70>
			return 2;
 8001708:	2302      	movs	r3, #2
 800170a:	e000      	b.n	800170e <SD_SendBlock+0x72>
	}
    return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <SD_ReadDisk>:

uint8_t SD_ReadDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //读SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800172c:	4824      	ldr	r0, [pc, #144]	@ (80017c0 <SD_ReadDisk+0xa8>)
 800172e:	f002 fa4b 	bl	8003bc8 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 8001732:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <SD_ReadDisk+0xac>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b06      	cmp	r3, #6
 8001738:	d002      	beq.n	8001740 <SD_ReadDisk+0x28>
		sector *= 512;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	025b      	lsls	r3, r3, #9
 800173e:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d111      	bne.n	800176a <SD_ReadDisk+0x52>
	{
		r1=SD_SendCmd(CMD17,sector,0);
 8001746:	2200      	movs	r2, #0
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	2011      	movs	r0, #17
 800174c:	f7ff fe2c 	bl	80013a8 <SD_SendCmd>
 8001750:	4603      	mov	r3, r0
 8001752:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d127      	bne.n	80017aa <SD_ReadDisk+0x92>
			r1=SD_ReceiveData(buf,512);
 800175a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff ff62 	bl	8001628 <SD_ReceiveData>
 8001764:	4603      	mov	r3, r0
 8001766:	75fb      	strb	r3, [r7, #23]
 8001768:	e01f      	b.n	80017aa <SD_ReadDisk+0x92>
	}
	else
	{
		r1=SD_SendCmd(CMD18,sector,0);
 800176a:	2200      	movs	r2, #0
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	2012      	movs	r0, #18
 8001770:	f7ff fe1a 	bl	80013a8 <SD_SendCmd>
 8001774:	4603      	mov	r3, r0
 8001776:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_ReceiveData(buf,512);
 8001778:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff ff53 	bl	8001628 <SD_ReceiveData>
 8001782:	4603      	mov	r3, r0
 8001784:	75fb      	strb	r3, [r7, #23]
			buf+=512;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800178c:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	3b01      	subs	r3, #1
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <SD_ReadDisk+0x88>
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0eb      	beq.n	8001778 <SD_ReadDisk+0x60>
		SD_SendCmd(CMD12,0,0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	200c      	movs	r0, #12
 80017a6:	f7ff fdff 	bl	80013a8 <SD_SendCmd>
	}
	SD_CS_HIGH();
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b0:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <SD_ReadDisk+0xa8>)
 80017b2:	f002 fa09 	bl	8003bc8 <HAL_GPIO_WritePin>
	return r1;
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	48000400 	.word	0x48000400
 80017c4:	20000428 	.word	0x20000428

080017c8 <SD_WriteDisk>:

uint8_t SD_WriteDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //写SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	4613      	mov	r3, r2
 80017d4:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017dc:	482d      	ldr	r0, [pc, #180]	@ (8001894 <SD_WriteDisk+0xcc>)
 80017de:	f002 f9f3 	bl	8003bc8 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 80017e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <SD_WriteDisk+0xd0>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d002      	beq.n	80017f0 <SD_WriteDisk+0x28>
		sector *= 512;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d110      	bne.n	8001818 <SD_WriteDisk+0x50>
	{
		r1=SD_SendCmd(CMD24,sector,0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	2018      	movs	r0, #24
 80017fc:	f7ff fdd4 	bl	80013a8 <SD_SendCmd>
 8001800:	4603      	mov	r3, r0
 8001802:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d138      	bne.n	800187c <SD_WriteDisk+0xb4>
		{
			r1=SD_SendBlock(buf,0xFE);
 800180a:	21fe      	movs	r1, #254	@ 0xfe
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff ff45 	bl	800169c <SD_SendBlock>
 8001812:	4603      	mov	r3, r0
 8001814:	75fb      	strb	r3, [r7, #23]
 8001816:	e031      	b.n	800187c <SD_WriteDisk+0xb4>
		}
	}
	else
	{
		if(SD_TYPE!=MMC)
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <SD_WriteDisk+0xd0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d00a      	beq.n	8001836 <SD_WriteDisk+0x6e>
		{
			SD_SendCmd(CMD55,0,0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2037      	movs	r0, #55	@ 0x37
 8001826:	f7ff fdbf 	bl	80013a8 <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	2017      	movs	r0, #23
 8001832:	f7ff fdb9 	bl	80013a8 <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0);
 8001836:	2200      	movs	r2, #0
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	2019      	movs	r0, #25
 800183c:	f7ff fdb4 	bl	80013a8 <SD_SendCmd>
 8001840:	4603      	mov	r3, r0
 8001842:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <SD_WriteDisk+0xb4>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); //0xFC为多块写入起始令牌
 800184a:	21fc      	movs	r1, #252	@ 0xfc
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff ff25 	bl	800169c <SD_SendBlock>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
				buf+=512;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800185c:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	3b01      	subs	r3, #1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <SD_WriteDisk+0xa8>
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ec      	beq.n	800184a <SD_WriteDisk+0x82>
			r1=SD_SendBlock(0,0xFD);
 8001870:	21fd      	movs	r1, #253	@ 0xfd
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff ff12 	bl	800169c <SD_SendBlock>
 8001878:	4603      	mov	r3, r0
 800187a:	75fb      	strb	r3, [r7, #23]
		}
	}
	SD_CS_HIGH();
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001882:	4804      	ldr	r0, [pc, #16]	@ (8001894 <SD_WriteDisk+0xcc>)
 8001884:	f002 f9a0 	bl	8003bc8 <HAL_GPIO_WritePin>
	return r1;
 8001888:	7dfb      	ldrb	r3, [r7, #23]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	48000400 	.word	0x48000400
 8001898:	20000428 	.word	0x20000428

0800189c <SD_GETCSD>:

uint8_t SD_GETCSD(uint8_t *csd_data) //获取CSD数据
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	SD_CS_LOW();
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018aa:	4810      	ldr	r0, [pc, #64]	@ (80018ec <SD_GETCSD+0x50>)
 80018ac:	f002 f98c 	bl	8003bc8 <HAL_GPIO_WritePin>
	uint8_t r1;
    if(SD_SendCmd(CMD9,0,0) == 0)
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	2009      	movs	r0, #9
 80018b6:	f7ff fd77 	bl	80013a8 <SD_SendCmd>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <SD_GETCSD+0x30>
    {
    	r1=SD_ReceiveData(csd_data, 16);
 80018c0:	2110      	movs	r1, #16
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff feb0 	bl	8001628 <SD_ReceiveData>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]
    }
	SD_CS_HIGH();
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d2:	4806      	ldr	r0, [pc, #24]	@ (80018ec <SD_GETCSD+0x50>)
 80018d4:	f002 f978 	bl	8003bc8 <HAL_GPIO_WritePin>
	if(r1)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SD_GETCSD+0x46>
		return 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <SD_GETCSD+0x48>
	else
		return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	48000400 	.word	0x48000400

080018f0 <SD_GetSectorCount>:

uint32_t SD_GetSectorCount(void) //获取SD卡总扇区数
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
    uint8_t csd[16];
    uint32_t Capacity;
    uint8_t n;
	uint16_t csize;
    if(SD_GETCSD(csd)!=0)
 80018f6:	463b      	mov	r3, r7
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ffcf 	bl	800189c <SD_GETCSD>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SD_GetSectorCount+0x18>
    	return 0;
 8001904:	2300      	movs	r3, #0
 8001906:	e03e      	b.n	8001986 <SD_GetSectorCount+0x96>
    if((csd[0]&0xC0)==0x40)
 8001908:	783b      	ldrb	r3, [r7, #0]
 800190a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800190e:	2b40      	cmp	r3, #64	@ 0x40
 8001910:	d10c      	bne.n	800192c <SD_GetSectorCount+0x3c>
    {
		csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
 8001912:	7a7b      	ldrb	r3, [r7, #9]
 8001914:	461a      	mov	r2, r3
 8001916:	7a3b      	ldrb	r3, [r7, #8]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b29b      	uxth	r3, r3
 800191c:	4413      	add	r3, r2
 800191e:	b29b      	uxth	r3, r3
 8001920:	3301      	adds	r3, #1
 8001922:	823b      	strh	r3, [r7, #16]
		Capacity = (uint32_t)csize << 10;
 8001924:	8a3b      	ldrh	r3, [r7, #16]
 8001926:	029b      	lsls	r3, r3, #10
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e02b      	b.n	8001984 <SD_GetSectorCount+0x94>
    }
    else
    {
		n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800192c:	797b      	ldrb	r3, [r7, #5]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	b2da      	uxtb	r2, r3
 8001934:	7abb      	ldrb	r3, [r7, #10]
 8001936:	09db      	lsrs	r3, r3, #7
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4413      	add	r3, r2
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7a7b      	ldrb	r3, [r7, #9]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f003 0306 	and.w	r3, r3, #6
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4413      	add	r3, r2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3302      	adds	r3, #2
 8001950:	74fb      	strb	r3, [r7, #19]
		csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8001952:	7a3b      	ldrb	r3, [r7, #8]
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	b29b      	uxth	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	b29a      	uxth	r2, r3
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	b29b      	uxth	r3, r3
 800196a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	b29b      	uxth	r3, r3
 8001974:	3301      	adds	r3, #1
 8001976:	823b      	strh	r3, [r7, #16]
		Capacity= (uint32_t)csize << (n - 9);
 8001978:	8a3a      	ldrh	r2, [r7, #16]
 800197a:	7cfb      	ldrb	r3, [r7, #19]
 800197c:	3b09      	subs	r3, #9
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
    }
    return Capacity;
 8001984:	697b      	ldr	r3, [r7, #20]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <MX_SPI1_Init+0x74>)
 8001996:	4a1c      	ldr	r2, [pc, #112]	@ (8001a08 <MX_SPI1_Init+0x78>)
 8001998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800199a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <MX_SPI1_Init+0x74>)
 800199c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019a2:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019c6:	2228      	movs	r2, #40	@ 0x28
 80019c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019de:	2207      	movs	r2, #7
 80019e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019ea:	2208      	movs	r2, #8
 80019ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019f0:	f003 fada 	bl	8004fa8 <HAL_SPI_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019fa:	f7ff fc93 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000042c 	.word	0x2000042c
 8001a08:	40013000 	.word	0x40013000

08001a0c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <MX_SPI2_Init+0x78>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a26:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a42:	2238      	movs	r2, #56	@ 0x38
 8001a44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a5a:	2207      	movs	r2, #7
 8001a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a66:	2208      	movs	r2, #8
 8001a68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <MX_SPI2_Init+0x74>)
 8001a6c:	f003 fa9c 	bl	8004fa8 <HAL_SPI_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a76:	f7ff fc55 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000490 	.word	0x20000490
 8001a84:	40003800 	.word	0x40003800

08001a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	@ 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a9b      	ldr	r2, [pc, #620]	@ (8001d14 <HAL_SPI_MspInit+0x28c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	f040 8095 	bne.w	8001bd6 <HAL_SPI_MspInit+0x14e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aac:	4b9a      	ldr	r3, [pc, #616]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab0:	4a99      	ldr	r2, [pc, #612]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001ab2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ab6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ab8:	4b97      	ldr	r3, [pc, #604]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b94      	ldr	r3, [pc, #592]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac8:	4a93      	ldr	r2, [pc, #588]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad0:	4b91      	ldr	r3, [pc, #580]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001adc:	23a0      	movs	r3, #160	@ 0xa0
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aec:	2305      	movs	r3, #5
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afa:	f001 feeb 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001afe:	2340      	movs	r3, #64	@ 0x40
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b0e:	2305      	movs	r3, #5
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1c:	f001 feda 	bl	80038d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001b20:	4b7e      	ldr	r3, [pc, #504]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b22:	4a7f      	ldr	r2, [pc, #508]	@ (8001d20 <HAL_SPI_MspInit+0x298>)
 8001b24:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001b26:	4b7d      	ldr	r3, [pc, #500]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b32:	4b7a      	ldr	r3, [pc, #488]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b38:	4b78      	ldr	r3, [pc, #480]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3e:	4b77      	ldr	r3, [pc, #476]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b44:	4b75      	ldr	r3, [pc, #468]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001b4a:	4b74      	ldr	r3, [pc, #464]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b50:	4b72      	ldr	r3, [pc, #456]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001b56:	4871      	ldr	r0, [pc, #452]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b58:	f001 fc3a 	bl	80033d0 <HAL_DMA_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8001b62:	f7ff fbdf 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a6c      	ldr	r2, [pc, #432]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8001d1c <HAL_SPI_MspInit+0x294>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001b72:	4b6c      	ldr	r3, [pc, #432]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001b74:	4a6c      	ldr	r2, [pc, #432]	@ (8001d28 <HAL_SPI_MspInit+0x2a0>)
 8001b76:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001b78:	4b6a      	ldr	r3, [pc, #424]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7e:	4b69      	ldr	r3, [pc, #420]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001b80:	2210      	movs	r2, #16
 8001b82:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b84:	4b67      	ldr	r3, [pc, #412]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8a:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b90:	4b64      	ldr	r3, [pc, #400]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b96:	4b63      	ldr	r3, [pc, #396]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b9c:	4b61      	ldr	r3, [pc, #388]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba2:	4b60      	ldr	r3, [pc, #384]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ba8:	485e      	ldr	r0, [pc, #376]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001baa:	f001 fc11 	bl	80033d0 <HAL_DMA_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8001bb4:	f7ff fbb6 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a5a      	ldr	r2, [pc, #360]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001bbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bbe:	4a59      	ldr	r2, [pc, #356]	@ (8001d24 <HAL_SPI_MspInit+0x29c>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2023      	movs	r0, #35	@ 0x23
 8001bca:	f001 fbc4 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bce:	2023      	movs	r0, #35	@ 0x23
 8001bd0:	f001 fbdd 	bl	800338e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bd4:	e099      	b.n	8001d0a <HAL_SPI_MspInit+0x282>
  else if(spiHandle->Instance==SPI2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a54      	ldr	r2, [pc, #336]	@ (8001d2c <HAL_SPI_MspInit+0x2a4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f040 8094 	bne.w	8001d0a <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001be2:	4b4d      	ldr	r3, [pc, #308]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	4a4c      	ldr	r2, [pc, #304]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bee:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	4a46      	ldr	r2, [pc, #280]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c06:	4b44      	ldr	r3, [pc, #272]	@ (8001d18 <HAL_SPI_MspInit+0x290>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c12:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c24:	2305      	movs	r3, #5
 8001c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4840      	ldr	r0, [pc, #256]	@ (8001d30 <HAL_SPI_MspInit+0x2a8>)
 8001c30:	f001 fe50 	bl	80038d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c46:	2305      	movs	r3, #5
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4837      	ldr	r0, [pc, #220]	@ (8001d30 <HAL_SPI_MspInit+0x2a8>)
 8001c52:	f001 fe3f 	bl	80038d4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001c56:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c58:	4a37      	ldr	r2, [pc, #220]	@ (8001d38 <HAL_SPI_MspInit+0x2b0>)
 8001c5a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8001c5c:	4b35      	ldr	r3, [pc, #212]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c62:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c68:	4b32      	ldr	r3, [pc, #200]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6e:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c74:	4b2f      	ldr	r3, [pc, #188]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001c80:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c86:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001c8c:	4829      	ldr	r0, [pc, #164]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001c8e:	f001 fb9f 	bl	80033d0 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001c98:	f7ff fb44 	bl	8001324 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a25      	ldr	r2, [pc, #148]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001ca0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ca2:	4a24      	ldr	r2, [pc, #144]	@ (8001d34 <HAL_SPI_MspInit+0x2ac>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001ca8:	4b24      	ldr	r3, [pc, #144]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001caa:	4a25      	ldr	r2, [pc, #148]	@ (8001d40 <HAL_SPI_MspInit+0x2b8>)
 8001cac:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001cae:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cb4:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cc2:	2280      	movs	r2, #128	@ 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001cde:	4817      	ldr	r0, [pc, #92]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001ce0:	f001 fb76 	bl	80033d0 <HAL_DMA_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_SPI_MspInit+0x266>
      Error_Handler();
 8001cea:	f7ff fb1b 	bl	8001324 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cf2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cf4:	4a11      	ldr	r2, [pc, #68]	@ (8001d3c <HAL_SPI_MspInit+0x2b4>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2024      	movs	r0, #36	@ 0x24
 8001d00:	f001 fb29 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d04:	2024      	movs	r0, #36	@ 0x24
 8001d06:	f001 fb42 	bl	800338e <HAL_NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3730      	adds	r7, #48	@ 0x30
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40013000 	.word	0x40013000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	200004f4 	.word	0x200004f4
 8001d20:	4002001c 	.word	0x4002001c
 8001d24:	2000053c 	.word	0x2000053c
 8001d28:	40020030 	.word	0x40020030
 8001d2c:	40003800 	.word	0x40003800
 8001d30:	48000400 	.word	0x48000400
 8001d34:	20000584 	.word	0x20000584
 8001d38:	40020044 	.word	0x40020044
 8001d3c:	200005cc 	.word	0x200005cc
 8001d40:	40020058 	.word	0x40020058

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <HAL_MspInit+0x44>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <HAL_MspInit+0x44>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <HAL_MspInit+0x44>)
 8001d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_MspInit+0x44>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <HAL_MspInit+0x44>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_MspInit+0x44>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <NMI_Handler+0x4>

08001d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <MemManage_Handler+0x4>

08001da4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001de2:	f001 f999 	bl	8003118 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001de6:	f001 faec 	bl	80033c2 <HAL_SYSTICK_IRQHandler>
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <DMA1_Channel2_IRQHandler+0x10>)
 8001df6:	f001 fc82 	bl	80036fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200004f4 	.word	0x200004f4

08001e04 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <DMA1_Channel3_IRQHandler+0x10>)
 8001e0a:	f001 fc78 	bl	80036fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000053c 	.word	0x2000053c

08001e18 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <DMA1_Channel4_IRQHandler+0x10>)
 8001e1e:	f001 fc6e 	bl	80036fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000584 	.word	0x20000584

08001e2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <DMA1_Channel5_IRQHandler+0x10>)
 8001e32:	f001 fc64 	bl	80036fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200005cc 	.word	0x200005cc

08001e40 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <SPI1_IRQHandler+0x10>)
 8001e46:	f003 fb71 	bl	800552c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000042c 	.word	0x2000042c

08001e54 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <SPI2_IRQHandler+0x10>)
 8001e5a:	f003 fb67 	bl	800552c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000490 	.word	0x20000490

08001e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8001e6c:	4812      	ldr	r0, [pc, #72]	@ (8001eb8 <USART1_IRQHandler+0x50>)
 8001e6e:	f004 f813 	bl	8005e98 <HAL_UART_IRQHandler>
	  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <USART1_IRQHandler+0x50>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d119      	bne.n	8001eb4 <USART1_IRQHandler+0x4c>
	  {
		  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001e80:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <USART1_IRQHandler+0x50>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2210      	movs	r2, #16
 8001e86:	621a      	str	r2, [r3, #32]
		  HAL_UART_DMAStop(&huart1);
 8001e88:	480b      	ldr	r0, [pc, #44]	@ (8001eb8 <USART1_IRQHandler+0x50>)
 8001e8a:	f003 ff73 	bl	8005d74 <HAL_UART_DMAStop>
		  rx_length = sizeof(rx_buffer) - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <USART1_IRQHandler+0x50>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <USART1_IRQHandler+0x54>)
 8001ea0:	801a      	strh	r2, [r3, #0]
		  data_ready = 1; // 标记数据就绪
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <USART1_IRQHandler+0x58>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	801a      	strh	r2, [r3, #0]
	      HAL_UART_Receive_DMA(&huart1, (uint8_t *)rx_buffer, sizeof(rx_buffer));
 8001ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eac:	4905      	ldr	r1, [pc, #20]	@ (8001ec4 <USART1_IRQHandler+0x5c>)
 8001eae:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <USART1_IRQHandler+0x50>)
 8001eb0:	f003 ff14 	bl	8005cdc <HAL_UART_Receive_DMA>
	  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000618 	.word	0x20000618
 8001ebc:	20000424 	.word	0x20000424
 8001ec0:	20000426 	.word	0x20000426
 8001ec4:	20000224 	.word	0x20000224

08001ec8 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <DMA2_Channel6_IRQHandler+0x10>)
 8001ece:	f001 fc16 	bl	80036fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200006e8 	.word	0x200006e8

08001edc <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <DMA2_Channel7_IRQHandler+0x10>)
 8001ee2:	f001 fc0c 	bl	80036fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200006a0 	.word	0x200006a0

08001ef0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return 1;
 8001ef4:	2301      	movs	r3, #1
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_kill>:

int _kill(int pid, int sig)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f0a:	f006 fd49 	bl	80089a0 <__errno>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2216      	movs	r2, #22
 8001f12:	601a      	str	r2, [r3, #0]
  return -1;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_exit>:

void _exit (int status)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ffe7 	bl	8001f00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f32:	bf00      	nop
 8001f34:	e7fd      	b.n	8001f32 <_exit+0x12>

08001f36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e00a      	b.n	8001f5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f48:	f3af 8000 	nop.w
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	60ba      	str	r2, [r7, #8]
 8001f54:	b2ca      	uxtb	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	dbf0      	blt.n	8001f48 <_read+0x12>
  }

  return len;
 8001f66:	687b      	ldr	r3, [r7, #4]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f98:	605a      	str	r2, [r3, #4]
  return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_isatty>:

int _isatty(int file)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb0:	2301      	movs	r3, #1
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	@ (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	@ (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f006 fcca 	bl	80089a0 <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000c000 	.word	0x2000c000
 8002038:	00000400 	.word	0x00000400
 800203c:	20000614 	.word	0x20000614
 8002040:	200008d0 	.word	0x200008d0

08002044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800206c:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 800206e:	4a15      	ldr	r2, [pc, #84]	@ (80020c4 <MX_USART1_UART_Init+0x5c>)
 8002070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002072:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 8002074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002078:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 800208e:	220c      	movs	r2, #12
 8002090:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209e:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <MX_USART1_UART_Init+0x58>)
 80020ac:	f003 fcc2 	bl	8005a34 <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80020b6:	f7ff f935 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000618 	.word	0x20000618
 80020c4:	40013800 	.word	0x40013800

080020c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0a2      	sub	sp, #136	@ 0x88
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2260      	movs	r2, #96	@ 0x60
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f006 fbe5 	bl	80088b8 <memset>
  if(uartHandle->Instance==USART1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4f      	ldr	r2, [pc, #316]	@ (8002230 <HAL_UART_MspInit+0x168>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	f040 8096 	bne.w	8002226 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020fe:	2300      	movs	r3, #0
 8002100:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4618      	mov	r0, r3
 8002108:	f002 fc12 	bl	8004930 <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002112:	f7ff f907 	bl	8001324 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002116:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <HAL_UART_MspInit+0x16c>)
 8002118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211a:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <HAL_UART_MspInit+0x16c>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002120:	6613      	str	r3, [r2, #96]	@ 0x60
 8002122:	4b44      	ldr	r3, [pc, #272]	@ (8002234 <HAL_UART_MspInit+0x16c>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b41      	ldr	r3, [pc, #260]	@ (8002234 <HAL_UART_MspInit+0x16c>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	4a40      	ldr	r2, [pc, #256]	@ (8002234 <HAL_UART_MspInit+0x16c>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213a:	4b3e      	ldr	r3, [pc, #248]	@ (8002234 <HAL_UART_MspInit+0x16c>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002146:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800214a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002150:	2301      	movs	r3, #1
 8002152:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800215a:	2307      	movs	r3, #7
 800215c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002164:	4619      	mov	r1, r3
 8002166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216a:	f001 fbb3 	bl	80038d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 800216e:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <HAL_UART_MspInit+0x170>)
 8002170:	4a32      	ldr	r2, [pc, #200]	@ (800223c <HAL_UART_MspInit+0x174>)
 8002172:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002174:	4b30      	ldr	r3, [pc, #192]	@ (8002238 <HAL_UART_MspInit+0x170>)
 8002176:	2202      	movs	r2, #2
 8002178:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800217a:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_UART_MspInit+0x170>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002180:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <HAL_UART_MspInit+0x170>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002186:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <HAL_UART_MspInit+0x170>)
 8002188:	2280      	movs	r2, #128	@ 0x80
 800218a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <HAL_UART_MspInit+0x170>)
 800218e:	2200      	movs	r2, #0
 8002190:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002192:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <HAL_UART_MspInit+0x170>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <HAL_UART_MspInit+0x170>)
 800219a:	2220      	movs	r2, #32
 800219c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800219e:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <HAL_UART_MspInit+0x170>)
 80021a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021a6:	4824      	ldr	r0, [pc, #144]	@ (8002238 <HAL_UART_MspInit+0x170>)
 80021a8:	f001 f912 	bl	80033d0 <HAL_DMA_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80021b2:	f7ff f8b7 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002238 <HAL_UART_MspInit+0x170>)
 80021ba:	675a      	str	r2, [r3, #116]	@ 0x74
 80021bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002238 <HAL_UART_MspInit+0x170>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 80021c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002244 <HAL_UART_MspInit+0x17c>)
 80021c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021ca:	2202      	movs	r2, #2
 80021cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021d0:	2210      	movs	r2, #16
 80021d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021dc:	2280      	movs	r2, #128	@ 0x80
 80021de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021fa:	4811      	ldr	r0, [pc, #68]	@ (8002240 <HAL_UART_MspInit+0x178>)
 80021fc:	f001 f8e8 	bl	80033d0 <HAL_DMA_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002206:	f7ff f88d 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <HAL_UART_MspInit+0x178>)
 800220e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002210:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <HAL_UART_MspInit+0x178>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	2025      	movs	r0, #37	@ 0x25
 800221c:	f001 f89b 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002220:	2025      	movs	r0, #37	@ 0x25
 8002222:	f001 f8b4 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002226:	bf00      	nop
 8002228:	3788      	adds	r7, #136	@ 0x88
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40013800 	.word	0x40013800
 8002234:	40021000 	.word	0x40021000
 8002238:	200006a0 	.word	0x200006a0
 800223c:	40020480 	.word	0x40020480
 8002240:	200006e8 	.word	0x200006e8
 8002244:	4002046c 	.word	0x4002046c

08002248 <ASIC_TransmitReceive>:
uint16_t peaklevel = 200;
uint64_t peaktime = 0;
uint8_t result[6];

uint8_t ASIC_TransmitReceive(uint8_t data) //发送接收函数封装
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1 ,100);
 8002252:	f107 020f 	add.w	r2, r7, #15
 8002256:	1df9      	adds	r1, r7, #7
 8002258:	2364      	movs	r3, #100	@ 0x64
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2301      	movs	r3, #1
 800225e:	4804      	ldr	r0, [pc, #16]	@ (8002270 <ASIC_TransmitReceive+0x28>)
 8002260:	f002 ff45 	bl	80050ee <HAL_SPI_TransmitReceive>
    return rx_data;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000042c 	.word	0x2000042c

08002274 <ReadResult>:
	ASIC_CS_HIGH();
	return HAL_OK;
}

HAL_StatusTypeDef ReadResult(void) //读取相关结果
{
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
	//if(HAL_GPIO_ReadPin(EMPTY_GPIO_Port, EMPTY_Pin) == GPIO_PIN_SET)
		//return HAL_ERROR;
	//else
	{
		ASIC_CS_LOW();
 800227a:	2200      	movs	r2, #0
 800227c:	2101      	movs	r1, #1
 800227e:	4828      	ldr	r0, [pc, #160]	@ (8002320 <ReadResult+0xac>)
 8002280:	f001 fca2 	bl	8003bc8 <HAL_GPIO_WritePin>
		uint16_t i;
		uint8_t address = 0x80;
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	717b      	strb	r3, [r7, #5]
		ASIC_TransmitReceive(address);
 8002288:	797b      	ldrb	r3, [r7, #5]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ffdc 	bl	8002248 <ASIC_TransmitReceive>
		for(i = 0;i < 6;i++)
 8002290:	2300      	movs	r3, #0
 8002292:	80fb      	strh	r3, [r7, #6]
 8002294:	e00a      	b.n	80022ac <ReadResult+0x38>
			result[i] = ASIC_TransmitReceive(0x00);
 8002296:	88fe      	ldrh	r6, [r7, #6]
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff ffd5 	bl	8002248 <ASIC_TransmitReceive>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <ReadResult+0xb0>)
 80022a4:	559a      	strb	r2, [r3, r6]
		for(i = 0;i < 6;i++)
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	3301      	adds	r3, #1
 80022aa:	80fb      	strh	r3, [r7, #6]
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d9f1      	bls.n	8002296 <ReadResult+0x22>
		codeid = result[0] >> 3;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <ReadResult+0xb0>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	08db      	lsrs	r3, r3, #3
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <ReadResult+0xb4>)
 80022bc:	701a      	strb	r2, [r3, #0]
		peaklevel = (result[1] >> 1) | ((result[0] & 0x07 ) << 7);
 80022be:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <ReadResult+0xb0>)
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <ReadResult+0xb0>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	01db      	lsls	r3, r3, #7
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	f403 7360 	and.w	r3, r3, #896	@ 0x380
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b21b      	sxth	r3, r3
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <ReadResult+0xb8>)
 80022e0:	801a      	strh	r2, [r3, #0]
		peaktime = ((result[1] & 0x01) << 32) | (result[2] << 24) | (result[3] << 16) | (result[4] << 8) | result[5];
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <ReadResult+0xb0>)
 80022e4:	789b      	ldrb	r3, [r3, #2]
 80022e6:	061a      	lsls	r2, r3, #24
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <ReadResult+0xb0>)
 80022ea:	78db      	ldrb	r3, [r3, #3]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <ReadResult+0xb0>)
 80022f2:	791b      	ldrb	r3, [r3, #4]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	4313      	orrs	r3, r2
 80022f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <ReadResult+0xb0>)
 80022fa:	7952      	ldrb	r2, [r2, #5]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	17da      	asrs	r2, r3, #31
 8002300:	461c      	mov	r4, r3
 8002302:	4615      	mov	r5, r2
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <ReadResult+0xbc>)
 8002306:	e9c3 4500 	strd	r4, r5, [r3]
		ASIC_CS_HIGH();
 800230a:	2201      	movs	r2, #1
 800230c:	2101      	movs	r1, #1
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <ReadResult+0xac>)
 8002310:	f001 fc5a 	bl	8003bc8 <HAL_GPIO_WritePin>
		return HAL_OK;
 8002314:	2300      	movs	r3, #0
	}
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800231e:	bf00      	nop
 8002320:	48000400 	.word	0x48000400
 8002324:	20000740 	.word	0x20000740
 8002328:	20000730 	.word	0x20000730
 800232c:	2000000a 	.word	0x2000000a
 8002330:	20000738 	.word	0x20000738

08002334 <_write>:
	HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}

int _write(int file, char *ptr, int len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	b29a      	uxth	r2, r3
 8002344:	2364      	movs	r3, #100	@ 0x64
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	4803      	ldr	r0, [pc, #12]	@ (8002358 <_write+0x24>)
 800234a:	f003 fbc1 	bl	8005ad0 <HAL_UART_Transmit>
    return len;
 800234e:	687b      	ldr	r3, [r7, #4]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000618 	.word	0x20000618

0800235c <read_be16>:
void setTime(void);
void sendCurrentTime(void);
void Parameterset_query(void);

uint16_t read_be16(const uint8_t *data)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    return (data[0] << 8) | data[1];
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b21b      	sxth	r3, r3
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	b21a      	sxth	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3301      	adds	r3, #1
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b21b      	sxth	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	b21b      	sxth	r3, r3
 800237a:	b29b      	uxth	r3, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <exchange>:
uint16_t exchange(uint16_t *data) // 改为小端字节序
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	uint8_t front = (*data) & 0xFF;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	73fb      	strb	r3, [r7, #15]
	uint8_t back = (*data) >> 8;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b29b      	uxth	r3, r3
 800239e:	73bb      	strb	r3, [r7, #14]
	uint16_t sum = (front << 8) | back;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	7bbb      	ldrb	r3, [r7, #14]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	81bb      	strh	r3, [r7, #12]
	return sum;
 80023b2:	89bb      	ldrh	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <Checksum>:

uint16_t Checksum(uint8_t *data, int16_t length) //逐字节校检和
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
	uint16_t sum;
    if(length <= 1)
 80023cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	dc04      	bgt.n	80023de <Checksum+0x1e>
    {
    	sum = (uint16_t)data[0];
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	81fb      	strh	r3, [r7, #14]
    	return sum;
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	e012      	b.n	8002404 <Checksum+0x44>
    }
    else
    {
    	sum = (uint16_t)data[length-1]+Checksum(data, length - 1);
 80023de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461c      	mov	r4, r3
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffe2 	bl	80023c0 <Checksum>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4423      	add	r3, r4
 8002400:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002402:	89fb      	ldrh	r3, [r7, #14]
    }
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <Receive_Data>:

void Receive_Data(uint8_t *rxdata, uint16_t rxlen) //将接收数据填入结构体
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
	package = (PACKAGE_TypeDef *)malloc(rxlen - 4);
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	3b04      	subs	r3, #4
 800241c:	4618      	mov	r0, r3
 800241e:	f005 f893 	bl	8007548 <malloc>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <Receive_Data+0x108>)
 8002428:	601a      	str	r2, [r3, #0]
	package->head = read_be16(rxdata);
 800242a:	4b3a      	ldr	r3, [pc, #232]	@ (8002514 <Receive_Data+0x108>)
 800242c:	681c      	ldr	r4, [r3, #0]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ff94 	bl	800235c <read_be16>
 8002434:	4603      	mov	r3, r0
 8002436:	8023      	strh	r3, [r4, #0]
	package->version = read_be16(&rxdata[2]);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3302      	adds	r3, #2
 800243c:	4a35      	ldr	r2, [pc, #212]	@ (8002514 <Receive_Data+0x108>)
 800243e:	6814      	ldr	r4, [r2, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff8b 	bl	800235c <read_be16>
 8002446:	4603      	mov	r3, r0
 8002448:	8063      	strh	r3, [r4, #2]
	package->code = read_be16(&rxdata[4]);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	4a31      	ldr	r2, [pc, #196]	@ (8002514 <Receive_Data+0x108>)
 8002450:	6814      	ldr	r4, [r2, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff82 	bl	800235c <read_be16>
 8002458:	4603      	mov	r3, r0
 800245a:	80a3      	strh	r3, [r4, #4]
	package->command = read_be16(&rxdata[6]);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3306      	adds	r3, #6
 8002460:	4a2c      	ldr	r2, [pc, #176]	@ (8002514 <Receive_Data+0x108>)
 8002462:	6814      	ldr	r4, [r2, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff79 	bl	800235c <read_be16>
 800246a:	4603      	mov	r3, r0
 800246c:	80e3      	strh	r3, [r4, #6]
	package->datalength = rxdata[8];
 800246e:	4b29      	ldr	r3, [pc, #164]	@ (8002514 <Receive_Data+0x108>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	7a12      	ldrb	r2, [r2, #8]
 8002476:	721a      	strb	r2, [r3, #8]
	memcpy(package->data, &rxdata[9], package->datalength);
 8002478:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <Receive_Data+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f103 0009 	add.w	r0, r3, #9
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f103 0109 	add.w	r1, r3, #9
 8002486:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <Receive_Data+0x108>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	7a1b      	ldrb	r3, [r3, #8]
 800248c:	461a      	mov	r2, r3
 800248e:	f006 fab4 	bl	80089fa <memcpy>
	checksum = read_be16(&rxdata[9 + package->datalength]);
 8002492:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <Receive_Data+0x108>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	7a1b      	ldrb	r3, [r3, #8]
 8002498:	3309      	adds	r3, #9
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5b 	bl	800235c <read_be16>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <Receive_Data+0x10c>)
 80024ac:	801a      	strh	r2, [r3, #0]
	tail = read_be16(&rxdata[9 + package->datalength + 2]);
 80024ae:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <Receive_Data+0x108>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	7a1b      	ldrb	r3, [r3, #8]
 80024b4:	330b      	adds	r3, #11
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff4e 	bl	800235c <read_be16>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <Receive_Data+0x110>)
 80024c6:	801a      	strh	r2, [r3, #0]
	int16_t checklength = (int16_t)rxlen - 6; // 必须改为有符号16位，否则初始化时rxlength = 0导致checklength变为0xfffa，checksum函数运行错误
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	3b06      	subs	r3, #6
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	81fb      	strh	r3, [r7, #14]
	SUM = Checksum(&rxdata[2], checklength);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3302      	adds	r3, #2
 80024d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff70 	bl	80023c0 <Checksum>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <Receive_Data+0x114>)
 80024e6:	801a      	strh	r2, [r3, #0]
	receivercode = (package->version << 16) | package->code;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <Receive_Data+0x108>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	885b      	ldrh	r3, [r3, #2]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	4a08      	ldr	r2, [pc, #32]	@ (8002514 <Receive_Data+0x108>)
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	8892      	ldrh	r2, [r2, #4]
 80024f8:	b292      	uxth	r2, r2
 80024fa:	4313      	orrs	r3, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <Receive_Data+0x118>)
 8002500:	601a      	str	r2, [r3, #0]
	free(package);
 8002502:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <Receive_Data+0x108>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f005 f826 	bl	8007558 <free>
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bd90      	pop	{r4, r7, pc}
 8002514:	20000750 	.word	0x20000750
 8002518:	20000746 	.word	0x20000746
 800251c:	20000748 	.word	0x20000748
 8002520:	2000074a 	.word	0x2000074a
 8002524:	20000758 	.word	0x20000758

08002528 <Send_Data>:

void Send_Data(uint8_t *rxdata, uint16_t length) //发送心跳和采样相关的应答命令
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0;i < length;i++)
 8002534:	2300      	movs	r3, #0
 8002536:	81fb      	strh	r3, [r7, #14]
 8002538:	e039      	b.n	80025ae <Send_Data+0x86>
	{
		if(i == 6)
 800253a:	89fb      	ldrh	r3, [r7, #14]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d104      	bne.n	800254a <Send_Data+0x22>
			tx_buffer[i] = 0x01;
 8002540:	89fb      	ldrh	r3, [r7, #14]
 8002542:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <Send_Data+0xa4>)
 8002544:	2101      	movs	r1, #1
 8002546:	54d1      	strb	r1, [r2, r3]
 8002548:	e02e      	b.n	80025a8 <Send_Data+0x80>
		else if(i == length - 3)
 800254a:	89fa      	ldrh	r2, [r7, #14]
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	3b03      	subs	r3, #3
 8002550:	429a      	cmp	r2, r3
 8002552:	d107      	bne.n	8002564 <Send_Data+0x3c>
			tx_buffer[i] = SUM & 0xFF;
 8002554:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <Send_Data+0xa8>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29a      	uxth	r2, r3
 800255a:	89fb      	ldrh	r3, [r7, #14]
 800255c:	b2d1      	uxtb	r1, r2
 800255e:	4a1b      	ldr	r2, [pc, #108]	@ (80025cc <Send_Data+0xa4>)
 8002560:	54d1      	strb	r1, [r2, r3]
 8002562:	e021      	b.n	80025a8 <Send_Data+0x80>
		else if(i == length - 4)
 8002564:	89fa      	ldrh	r2, [r7, #14]
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	3b04      	subs	r3, #4
 800256a:	429a      	cmp	r2, r3
 800256c:	d115      	bne.n	800259a <Send_Data+0x72>
		{
			SUM = Checksum(&tx_buffer[2], i - 2);
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	3b02      	subs	r3, #2
 8002572:	b29b      	uxth	r3, r3
 8002574:	b21b      	sxth	r3, r3
 8002576:	4619      	mov	r1, r3
 8002578:	4816      	ldr	r0, [pc, #88]	@ (80025d4 <Send_Data+0xac>)
 800257a:	f7ff ff21 	bl	80023c0 <Checksum>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <Send_Data+0xa8>)
 8002584:	801a      	strh	r2, [r3, #0]
			tx_buffer[i] = (SUM >> 8) & 0xFF;
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <Send_Data+0xa8>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b29a      	uxth	r2, r3
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	b2d1      	uxtb	r1, r2
 8002594:	4a0d      	ldr	r2, [pc, #52]	@ (80025cc <Send_Data+0xa4>)
 8002596:	54d1      	strb	r1, [r2, r3]
 8002598:	e006      	b.n	80025a8 <Send_Data+0x80>
		}
		else
			tx_buffer[i] = rxdata[i];
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	441a      	add	r2, r3
 80025a0:	89fb      	ldrh	r3, [r7, #14]
 80025a2:	7811      	ldrb	r1, [r2, #0]
 80025a4:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <Send_Data+0xa4>)
 80025a6:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i < length;i++)
 80025a8:	89fb      	ldrh	r3, [r7, #14]
 80025aa:	3301      	adds	r3, #1
 80025ac:	81fb      	strh	r3, [r7, #14]
 80025ae:	89fa      	ldrh	r2, [r7, #14]
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d3c1      	bcc.n	800253a <Send_Data+0x12>
	}
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4904      	ldr	r1, [pc, #16]	@ (80025cc <Send_Data+0xa4>)
 80025bc:	4806      	ldr	r0, [pc, #24]	@ (80025d8 <Send_Data+0xb0>)
 80025be:	f003 fb11 	bl	8005be4 <HAL_UART_Transmit_DMA>
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000324 	.word	0x20000324
 80025d0:	2000074a 	.word	0x2000074a
 80025d4:	20000326 	.word	0x20000326
 80025d8:	20000618 	.word	0x20000618

080025dc <CMD_Judge>:

CMD_Status CMD_Judge(uint8_t *rxdata, uint16_t rxlen) //判断发送数据格式正确与否，错误舍弃
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	for(i = 0;i < cmd_number;i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	81fb      	strh	r3, [r7, #14]
 80025ec:	e00c      	b.n	8002608 <CMD_Judge+0x2c>
	{
		if(package->command == cmd[i])
 80025ee:	4b31      	ldr	r3, [pc, #196]	@ (80026b4 <CMD_Judge+0xd8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	88db      	ldrh	r3, [r3, #6]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	492f      	ldr	r1, [pc, #188]	@ (80026b8 <CMD_Judge+0xdc>)
 80025fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d006      	beq.n	8002610 <CMD_Judge+0x34>
	for(i = 0;i < cmd_number;i++)
 8002602:	89fb      	ldrh	r3, [r7, #14]
 8002604:	3301      	adds	r3, #1
 8002606:	81fb      	strh	r3, [r7, #14]
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	2b05      	cmp	r3, #5
 800260c:	d9ef      	bls.n	80025ee <CMD_Judge+0x12>
 800260e:	e000      	b.n	8002612 <CMD_Judge+0x36>
		break;
 8002610:	bf00      	nop
	}
	uint8_t length = rxlen - 13;
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3b0d      	subs	r3, #13
 8002618:	737b      	strb	r3, [r7, #13]
	if(package->command == HEAD) //包头不对，舍弃
 800261a:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <CMD_Judge+0xd8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	88db      	ldrh	r3, [r3, #6]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8002626:	4293      	cmp	r3, r2
 8002628:	d107      	bne.n	800263a <CMD_Judge+0x5e>
	{
		printf("head error\n");
 800262a:	4824      	ldr	r0, [pc, #144]	@ (80026bc <CMD_Judge+0xe0>)
 800262c:	f006 f842 	bl	80086b4 <puts>
		data_ready = 0;
 8002630:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <CMD_Judge+0xe4>)
 8002632:	2200      	movs	r2, #0
 8002634:	801a      	strh	r2, [r3, #0]
		return CMD_FORMAT_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e038      	b.n	80026ac <CMD_Judge+0xd0>
	}
	else if(i == cmd_number) //命令格式不对，舍弃
 800263a:	89fb      	ldrh	r3, [r7, #14]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d107      	bne.n	8002650 <CMD_Judge+0x74>
	{
		printf("not supported\n");
 8002640:	4820      	ldr	r0, [pc, #128]	@ (80026c4 <CMD_Judge+0xe8>)
 8002642:	f006 f837 	bl	80086b4 <puts>
		data_ready = 0;
 8002646:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <CMD_Judge+0xe4>)
 8002648:	2200      	movs	r2, #0
 800264a:	801a      	strh	r2, [r3, #0]
		return CMD_NOT_SUPPORTED;
 800264c:	2302      	movs	r3, #2
 800264e:	e02d      	b.n	80026ac <CMD_Judge+0xd0>
	}
	else if(package->datalength != length) //数据长度不匹配，舍弃
 8002650:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <CMD_Judge+0xd8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	7a1b      	ldrb	r3, [r3, #8]
 8002656:	7b7a      	ldrb	r2, [r7, #13]
 8002658:	429a      	cmp	r2, r3
 800265a:	d007      	beq.n	800266c <CMD_Judge+0x90>
	{
		printf("invalid\n");
 800265c:	481a      	ldr	r0, [pc, #104]	@ (80026c8 <CMD_Judge+0xec>)
 800265e:	f006 f829 	bl	80086b4 <puts>
		data_ready = 0;
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <CMD_Judge+0xe4>)
 8002664:	2200      	movs	r2, #0
 8002666:	801a      	strh	r2, [r3, #0]
		return CMD_INVALID_DATA;
 8002668:	2304      	movs	r3, #4
 800266a:	e01f      	b.n	80026ac <CMD_Judge+0xd0>
	}
	else if(checksum != SUM) //校检不对，舍弃
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <CMD_Judge+0xf0>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b17      	ldr	r3, [pc, #92]	@ (80026d0 <CMD_Judge+0xf4>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	429a      	cmp	r2, r3
 800267a:	d007      	beq.n	800268c <CMD_Judge+0xb0>
	{
		printf("check error\n");
 800267c:	4815      	ldr	r0, [pc, #84]	@ (80026d4 <CMD_Judge+0xf8>)
 800267e:	f006 f819 	bl	80086b4 <puts>
		data_ready = 0;
 8002682:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <CMD_Judge+0xe4>)
 8002684:	2200      	movs	r2, #0
 8002686:	801a      	strh	r2, [r3, #0]
		return CMD_CHECK_ERROR;
 8002688:	2306      	movs	r3, #6
 800268a:	e00f      	b.n	80026ac <CMD_Judge+0xd0>
	}
	else if(tail != TAIL) //包尾不对，舍弃
 800268c:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <CMD_Judge+0xfc>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	f647 62fe 	movw	r2, #32510	@ 0x7efe
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <CMD_Judge+0xce>
	{
		printf("tail error\n");
 800269a:	4810      	ldr	r0, [pc, #64]	@ (80026dc <CMD_Judge+0x100>)
 800269c:	f006 f80a 	bl	80086b4 <puts>
		data_ready = 0;
 80026a0:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <CMD_Judge+0xe4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]
		return CMD_FORMAT_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <CMD_Judge+0xd0>
	}
	else
		return CMD_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000750 	.word	0x20000750
 80026b8:	20000018 	.word	0x20000018
 80026bc:	0800bd10 	.word	0x0800bd10
 80026c0:	20000426 	.word	0x20000426
 80026c4:	0800bd1c 	.word	0x0800bd1c
 80026c8:	0800bd2c 	.word	0x0800bd2c
 80026cc:	20000746 	.word	0x20000746
 80026d0:	2000074a 	.word	0x2000074a
 80026d4:	0800bd34 	.word	0x0800bd34
 80026d8:	20000748 	.word	0x20000748
 80026dc:	0800bd40 	.word	0x0800bd40

080026e0 <CMD_Execute>:

CMD_Status CMD_Execute(uint8_t *rxdata, uint16_t rxlen) //根据命令部分数据实现对应内容
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
	if(receivercode != rxcode)
 80026ec:	4b92      	ldr	r3, [pc, #584]	@ (8002938 <CMD_Execute+0x258>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b92      	ldr	r3, [pc, #584]	@ (800293c <CMD_Execute+0x25c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d007      	beq.n	8002708 <CMD_Execute+0x28>
	{
		printf("receivercode error\n");
 80026f8:	4891      	ldr	r0, [pc, #580]	@ (8002940 <CMD_Execute+0x260>)
 80026fa:	f005 ffdb 	bl	80086b4 <puts>
		data_ready = 0;
 80026fe:	4b91      	ldr	r3, [pc, #580]	@ (8002944 <CMD_Execute+0x264>)
 8002700:	2200      	movs	r2, #0
 8002702:	801a      	strh	r2, [r3, #0]
		return CMD_INVALID_DATA;
 8002704:	2304      	movs	r3, #4
 8002706:	e10c      	b.n	8002922 <CMD_Execute+0x242>
	}
	else
	{
		if(package->command == cmd0)
 8002708:	4b8f      	ldr	r3, [pc, #572]	@ (8002948 <CMD_Execute+0x268>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	88db      	ldrh	r3, [r3, #6]
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11b      	bne.n	800274c <CMD_Execute+0x6c>
		{
			if(package->datalength != 0x01 || package->data[0] != 0)
 8002714:	4b8c      	ldr	r3, [pc, #560]	@ (8002948 <CMD_Execute+0x268>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	7a1b      	ldrb	r3, [r3, #8]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d104      	bne.n	8002728 <CMD_Execute+0x48>
 800271e:	4b8a      	ldr	r3, [pc, #552]	@ (8002948 <CMD_Execute+0x268>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	7a5b      	ldrb	r3, [r3, #9]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <CMD_Execute+0x58>
			{
				printf("invalid\n");
 8002728:	4888      	ldr	r0, [pc, #544]	@ (800294c <CMD_Execute+0x26c>)
 800272a:	f005 ffc3 	bl	80086b4 <puts>
				data_ready = 0;
 800272e:	4b85      	ldr	r3, [pc, #532]	@ (8002944 <CMD_Execute+0x264>)
 8002730:	2200      	movs	r2, #0
 8002732:	801a      	strh	r2, [r3, #0]
				return CMD_INVALID_DATA;
 8002734:	2304      	movs	r3, #4
 8002736:	e0f4      	b.n	8002922 <CMD_Execute+0x242>
			}
			else
			{
				Send_Data(rxdata, rxlen);
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fef3 	bl	8002528 <Send_Data>
				data_ready = 0;
 8002742:	4b80      	ldr	r3, [pc, #512]	@ (8002944 <CMD_Execute+0x264>)
 8002744:	2200      	movs	r2, #0
 8002746:	801a      	strh	r2, [r3, #0]
				return CMD_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e0ea      	b.n	8002922 <CMD_Execute+0x242>
			}
		}
		else if(package->command == cmd1)
 800274c:	4b7e      	ldr	r3, [pc, #504]	@ (8002948 <CMD_Execute+0x268>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	88db      	ldrh	r3, [r3, #6]
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 80a5 	bne.w	80028a4 <CMD_Execute+0x1c4>
		{
			if(package->datalength == 0x01 && package->data[0] == 0x01)
 800275a:	4b7b      	ldr	r3, [pc, #492]	@ (8002948 <CMD_Execute+0x268>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	7a1b      	ldrb	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10e      	bne.n	8002782 <CMD_Execute+0xa2>
 8002764:	4b78      	ldr	r3, [pc, #480]	@ (8002948 <CMD_Execute+0x268>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	7a5b      	ldrb	r3, [r3, #9]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d109      	bne.n	8002782 <CMD_Execute+0xa2>
			{
				Send_Data(rxdata, rxlen);
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	4619      	mov	r1, r3
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fed8 	bl	8002528 <Send_Data>
				data_ready = 0;
 8002778:	4b72      	ldr	r3, [pc, #456]	@ (8002944 <CMD_Execute+0x264>)
 800277a:	2200      	movs	r2, #0
 800277c:	801a      	strh	r2, [r3, #0]
				return CMD_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e0cf      	b.n	8002922 <CMD_Execute+0x242>
			}
			else if(package->datalength == 0x01 && package->data[0] == 0)
 8002782:	4b71      	ldr	r3, [pc, #452]	@ (8002948 <CMD_Execute+0x268>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	7a1b      	ldrb	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	f040 8083 	bne.w	8002894 <CMD_Execute+0x1b4>
 800278e:	4b6e      	ldr	r3, [pc, #440]	@ (8002948 <CMD_Execute+0x268>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	7a5b      	ldrb	r3, [r3, #9]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d17d      	bne.n	8002894 <CMD_Execute+0x1b4>
			{
				if(ready)
 8002798:	4b6d      	ldr	r3, [pc, #436]	@ (8002950 <CMD_Execute+0x270>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <CMD_Execute+0xd6>
				{
					Send_Data(rxdata, rxlen);
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	4619      	mov	r1, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff febf 	bl	8002528 <Send_Data>
					HAL_Delay(100);
 80027aa:	2064      	movs	r0, #100	@ 0x64
 80027ac:	f000 fcd4 	bl	8003158 <HAL_Delay>
					ready = 0;
 80027b0:	4b67      	ldr	r3, [pc, #412]	@ (8002950 <CMD_Execute+0x270>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	801a      	strh	r2, [r3, #0]
				}
				codeid = 28;
 80027b6:	4b67      	ldr	r3, [pc, #412]	@ (8002954 <CMD_Execute+0x274>)
 80027b8:	221c      	movs	r2, #28
 80027ba:	701a      	strb	r2, [r3, #0]
				peaktime = 1014438;
 80027bc:	4966      	ldr	r1, [pc, #408]	@ (8002958 <CMD_Execute+0x278>)
 80027be:	4a67      	ldr	r2, [pc, #412]	@ (800295c <CMD_Execute+0x27c>)
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9c1 2300 	strd	r2, r3, [r1]
				peaklevel = 218;
 80027c8:	4b65      	ldr	r3, [pc, #404]	@ (8002960 <CMD_Execute+0x280>)
 80027ca:	22da      	movs	r2, #218	@ 0xda
 80027cc:	801a      	strh	r2, [r3, #0]
				confidence = peaklevel;
 80027ce:	4b64      	ldr	r3, [pc, #400]	@ (8002960 <CMD_Execute+0x280>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b63      	ldr	r3, [pc, #396]	@ (8002964 <CMD_Execute+0x284>)
 80027d6:	701a      	strb	r2, [r3, #0]
				double time = ((double)peaktime)/1000000;
 80027d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002958 <CMD_Execute+0x278>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7fd fed3 	bl	800058c <__aeabi_ul2d>
 80027e6:	a352      	add	r3, pc, #328	@ (adr r3, 8002930 <CMD_Execute+0x250>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fe f82e 	bl	800084c <__aeabi_ddiv>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
				uint8_t *ptr = tx_buffer;
 80027f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002968 <CMD_Execute+0x288>)
 80027fa:	60fb      	str	r3, [r7, #12]
				ptr += sprintf(ptr, "%u,", codeid);
 80027fc:	4b55      	ldr	r3, [pc, #340]	@ (8002954 <CMD_Execute+0x274>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	495a      	ldr	r1, [pc, #360]	@ (800296c <CMD_Execute+0x28c>)
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f005 ff5d 	bl	80086c4 <siprintf>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
				ptr += sprintf(ptr, "%u,", rxcode);
 8002814:	4b49      	ldr	r3, [pc, #292]	@ (800293c <CMD_Execute+0x25c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4954      	ldr	r1, [pc, #336]	@ (800296c <CMD_Execute+0x28c>)
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f005 ff51 	bl	80086c4 <siprintf>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
				ptr += sprintf(ptr, "%u,", frequency);
 800282c:	4b50      	ldr	r3, [pc, #320]	@ (8002970 <CMD_Execute+0x290>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	494d      	ldr	r1, [pc, #308]	@ (800296c <CMD_Execute+0x28c>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f005 ff44 	bl	80086c4 <siprintf>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
				ptr += sprintf(ptr, "%06f,", time);
 8002846:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800284a:	494a      	ldr	r1, [pc, #296]	@ (8002974 <CMD_Execute+0x294>)
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f005 ff39 	bl	80086c4 <siprintf>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
				ptr += sprintf(ptr, "%u\r\n", confidence);
 800285c:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <CMD_Execute+0x284>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	4944      	ldr	r1, [pc, #272]	@ (8002978 <CMD_Execute+0x298>)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f005 ff2c 	bl	80086c4 <siprintf>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
				HAL_UART_Transmit_DMA(&huart1, tx_buffer, ptr - tx_buffer);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a3b      	ldr	r2, [pc, #236]	@ (8002968 <CMD_Execute+0x288>)
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	4939      	ldr	r1, [pc, #228]	@ (8002968 <CMD_Execute+0x288>)
 8002882:	483e      	ldr	r0, [pc, #248]	@ (800297c <CMD_Execute+0x29c>)
 8002884:	f003 f9ae 	bl	8005be4 <HAL_UART_Transmit_DMA>
				HAL_Delay(1000);
 8002888:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800288c:	f000 fc64 	bl	8003158 <HAL_Delay>
				return CMD_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e046      	b.n	8002922 <CMD_Execute+0x242>
			}
			else
			{
				printf("invalid\n");
 8002894:	482d      	ldr	r0, [pc, #180]	@ (800294c <CMD_Execute+0x26c>)
 8002896:	f005 ff0d 	bl	80086b4 <puts>
				data_ready = 0;
 800289a:	4b2a      	ldr	r3, [pc, #168]	@ (8002944 <CMD_Execute+0x264>)
 800289c:	2200      	movs	r2, #0
 800289e:	801a      	strh	r2, [r3, #0]
				return CMD_INVALID_DATA;
 80028a0:	2304      	movs	r3, #4
 80028a2:	e03e      	b.n	8002922 <CMD_Execute+0x242>
			}
		}
		else if(package->command == cmd5)
 80028a4:	4b28      	ldr	r3, [pc, #160]	@ (8002948 <CMD_Execute+0x268>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	88db      	ldrh	r3, [r3, #6]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b05      	cmp	r3, #5
 80028ae:	d106      	bne.n	80028be <CMD_Execute+0x1de>
		{
			setTime();
 80028b0:	f000 fa54 	bl	8002d5c <setTime>
			data_ready = 0;
 80028b4:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <CMD_Execute+0x264>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e031      	b.n	8002922 <CMD_Execute+0x242>
		}
		else if(package->command == cmd3)
 80028be:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <CMD_Execute+0x268>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	88db      	ldrh	r3, [r3, #6]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d106      	bne.n	80028d8 <CMD_Execute+0x1f8>
		{
			Parameterset_query();
 80028ca:	f000 f859 	bl	8002980 <Parameterset_query>
			data_ready = 0;
 80028ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002944 <CMD_Execute+0x264>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e024      	b.n	8002922 <CMD_Execute+0x242>
		}
		else if(package->command == cmd4)
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <CMD_Execute+0x268>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	88db      	ldrh	r3, [r3, #6]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d118      	bne.n	8002916 <CMD_Execute+0x236>
		{
			if(package->datalength != 0x01 || package->data[0] != 0)
 80028e4:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <CMD_Execute+0x268>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	7a1b      	ldrb	r3, [r3, #8]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d104      	bne.n	80028f8 <CMD_Execute+0x218>
 80028ee:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <CMD_Execute+0x268>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	7a5b      	ldrb	r3, [r3, #9]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <CMD_Execute+0x228>
			{
				printf("invalid\n");
 80028f8:	4814      	ldr	r0, [pc, #80]	@ (800294c <CMD_Execute+0x26c>)
 80028fa:	f005 fedb 	bl	80086b4 <puts>
				data_ready = 0;
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <CMD_Execute+0x264>)
 8002900:	2200      	movs	r2, #0
 8002902:	801a      	strh	r2, [r3, #0]
				return CMD_INVALID_DATA;
 8002904:	2304      	movs	r3, #4
 8002906:	e00c      	b.n	8002922 <CMD_Execute+0x242>
			}
			else
			{
				Parameterset_query();
 8002908:	f000 f83a 	bl	8002980 <Parameterset_query>
				data_ready = 0;
 800290c:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <CMD_Execute+0x264>)
 800290e:	2200      	movs	r2, #0
 8002910:	801a      	strh	r2, [r3, #0]
				return CMD_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e005      	b.n	8002922 <CMD_Execute+0x242>
			}
		}
		else
		{
			sendCurrentTime();
 8002916:	f000 faeb 	bl	8002ef0 <sendCurrentTime>
			data_ready = 0;
 800291a:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <CMD_Execute+0x264>)
 800291c:	2200      	movs	r2, #0
 800291e:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 8002920:	2300      	movs	r3, #0
		}
	}
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	f3af 8000 	nop.w
 8002930:	00000000 	.word	0x00000000
 8002934:	412e8480 	.word	0x412e8480
 8002938:	20000758 	.word	0x20000758
 800293c:	20000010 	.word	0x20000010
 8002940:	0800bd4c 	.word	0x0800bd4c
 8002944:	20000426 	.word	0x20000426
 8002948:	20000750 	.word	0x20000750
 800294c:	0800bd2c 	.word	0x0800bd2c
 8002950:	2000000c 	.word	0x2000000c
 8002954:	20000730 	.word	0x20000730
 8002958:	20000738 	.word	0x20000738
 800295c:	000f7aa6 	.word	0x000f7aa6
 8002960:	2000000a 	.word	0x2000000a
 8002964:	2000074c 	.word	0x2000074c
 8002968:	20000324 	.word	0x20000324
 800296c:	0800bd60 	.word	0x0800bd60
 8002970:	20000014 	.word	0x20000014
 8002974:	0800bd64 	.word	0x0800bd64
 8002978:	0800bd6c 	.word	0x0800bd6c
 800297c:	20000618 	.word	0x20000618

08002980 <Parameterset_query>:
    memmove(ptr + new_line_len, line_end, tail_len);
    memcpy(ptr, new_line, new_line_len);
}*/

void Parameterset_query(void) //参数设置查询函数
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
	size_t txlen = sizeof(PACKAGE_TypeDef) + 6;
 8002986:	230f      	movs	r3, #15
 8002988:	617b      	str	r3, [r7, #20]
	txpackage = (PACKAGE_TypeDef *)malloc(txlen);
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f004 fddc 	bl	8007548 <malloc>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	4b82      	ldr	r3, [pc, #520]	@ (8002ba0 <Parameterset_query+0x220>)
 8002996:	601a      	str	r2, [r3, #0]
	if(package->command == cmd3)
 8002998:	4b82      	ldr	r3, [pc, #520]	@ (8002ba4 <Parameterset_query+0x224>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	88db      	ldrh	r3, [r3, #6]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d14f      	bne.n	8002a44 <Parameterset_query+0xc4>
	{
		uint16_t version = read_be16(package->data);
 80029a4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba4 <Parameterset_query+0x224>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3309      	adds	r3, #9
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fcd6 	bl	800235c <read_be16>
 80029b0:	4603      	mov	r3, r0
 80029b2:	80fb      	strh	r3, [r7, #6]
		uint16_t code = read_be16(&(package->data[2]));
 80029b4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ba4 <Parameterset_query+0x224>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330b      	adds	r3, #11
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fcce 	bl	800235c <read_be16>
 80029c0:	4603      	mov	r3, r0
 80029c2:	80bb      	strh	r3, [r7, #4]
		rxcode = (version << 16) | code;
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	88ba      	ldrh	r2, [r7, #4]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b76      	ldr	r3, [pc, #472]	@ (8002ba8 <Parameterset_query+0x228>)
 80029d0:	601a      	str	r2, [r3, #0]
		PEAKTH = read_be16(&(package->data[4]));
 80029d2:	4b74      	ldr	r3, [pc, #464]	@ (8002ba4 <Parameterset_query+0x224>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330d      	adds	r3, #13
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fcbf 	bl	800235c <read_be16>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b72      	ldr	r3, [pc, #456]	@ (8002bac <Parameterset_query+0x22c>)
 80029e4:	801a      	strh	r2, [r3, #0]
		ALMSTTH = read_be16(&(package->data[6]));
 80029e6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba4 <Parameterset_query+0x224>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330f      	adds	r3, #15
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fcb5 	bl	800235c <read_be16>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb0 <Parameterset_query+0x230>)
 80029f8:	801a      	strh	r2, [r3, #0]
		PKWND = read_be16(&(package->data[8]));
 80029fa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <Parameterset_query+0x224>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3311      	adds	r3, #17
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fcab 	bl	800235c <read_be16>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <Parameterset_query+0x234>)
 8002a0c:	801a      	strh	r2, [r3, #0]
		txpackage->version = exchange(&version);
 8002a0e:	4b64      	ldr	r3, [pc, #400]	@ (8002ba0 <Parameterset_query+0x220>)
 8002a10:	681c      	ldr	r4, [r3, #0]
 8002a12:	1dbb      	adds	r3, r7, #6
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fcb7 	bl	8002388 <exchange>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	8063      	strh	r3, [r4, #2]
		txpackage->code = exchange(&code);
 8002a1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ba0 <Parameterset_query+0x220>)
 8002a20:	681c      	ldr	r4, [r3, #0]
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fcaf 	bl	8002388 <exchange>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	80a3      	strh	r3, [r4, #4]
		txpackage->command = 0x0301;
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba0 <Parameterset_query+0x220>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	719a      	strb	r2, [r3, #6]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f042 0203 	orr.w	r2, r2, #3
 8002a40:	71da      	strb	r2, [r3, #7]
 8002a42:	e01f      	b.n	8002a84 <Parameterset_query+0x104>
		f_write(&fil, config_buf, strlen(config_buf), &bytes_written);
		f_close(&fil);*/
	}
	else
	{
		ReadResult();
 8002a44:	f7ff fc16 	bl	8002274 <ReadResult>
		txpackage->version = exchange(&(package->version));
 8002a48:	4b56      	ldr	r3, [pc, #344]	@ (8002ba4 <Parameterset_query+0x224>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	4a54      	ldr	r2, [pc, #336]	@ (8002ba0 <Parameterset_query+0x220>)
 8002a50:	6814      	ldr	r4, [r2, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fc98 	bl	8002388 <exchange>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	8063      	strh	r3, [r4, #2]
		txpackage->code = exchange(&(package->code));
 8002a5c:	4b51      	ldr	r3, [pc, #324]	@ (8002ba4 <Parameterset_query+0x224>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3304      	adds	r3, #4
 8002a62:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba0 <Parameterset_query+0x220>)
 8002a64:	6814      	ldr	r4, [r2, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fc8e 	bl	8002388 <exchange>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	80a3      	strh	r3, [r4, #4]
		txpackage->command = 0x0401;
 8002a70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba0 <Parameterset_query+0x220>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	719a      	strb	r2, [r3, #6]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f042 0204 	orr.w	r2, r2, #4
 8002a82:	71da      	strb	r2, [r3, #7]
	}
	txpackage->datalength = 0x06;
 8002a84:	4b46      	ldr	r3, [pc, #280]	@ (8002ba0 <Parameterset_query+0x220>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2206      	movs	r2, #6
 8002a8a:	721a      	strb	r2, [r3, #8]
	txpackage->head = exchange(&(package->head));
 8002a8c:	4b45      	ldr	r3, [pc, #276]	@ (8002ba4 <Parameterset_query+0x224>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b43      	ldr	r3, [pc, #268]	@ (8002ba0 <Parameterset_query+0x220>)
 8002a94:	681c      	ldr	r4, [r3, #0]
 8002a96:	4610      	mov	r0, r2
 8002a98:	f7ff fc76 	bl	8002388 <exchange>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	8023      	strh	r3, [r4, #0]
	uint16_t PEAKTHS = exchange(&PEAKTH);
 8002aa0:	4842      	ldr	r0, [pc, #264]	@ (8002bac <Parameterset_query+0x22c>)
 8002aa2:	f7ff fc71 	bl	8002388 <exchange>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	81bb      	strh	r3, [r7, #12]
	uint16_t ALMSTTHS = exchange(&ALMSTTH);
 8002aaa:	4841      	ldr	r0, [pc, #260]	@ (8002bb0 <Parameterset_query+0x230>)
 8002aac:	f7ff fc6c 	bl	8002388 <exchange>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	817b      	strh	r3, [r7, #10]
	uint16_t PKWNDS = exchange(&PKWND);
 8002ab4:	483f      	ldr	r0, [pc, #252]	@ (8002bb4 <Parameterset_query+0x234>)
 8002ab6:	f7ff fc67 	bl	8002388 <exchange>
 8002aba:	4603      	mov	r3, r0
 8002abc:	813b      	strh	r3, [r7, #8]
	size_t length = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
	memcpy(txpackage->data, &PEAKTHS, sizeof(PEAKTH));
 8002ac2:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <Parameterset_query+0x220>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3309      	adds	r3, #9
 8002ac8:	89ba      	ldrh	r2, [r7, #12]
 8002aca:	801a      	strh	r2, [r3, #0]
	length += sizeof(PEAKTH);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	613b      	str	r3, [r7, #16]
	memcpy(&(txpackage->data[length]), &ALMSTTHS, sizeof(ALMSTTH));
 8002ad2:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <Parameterset_query+0x220>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	3308      	adds	r3, #8
 8002ada:	4413      	add	r3, r2
 8002adc:	3301      	adds	r3, #1
 8002ade:	897a      	ldrh	r2, [r7, #10]
 8002ae0:	801a      	strh	r2, [r3, #0]
	length += sizeof(ALMSTTH);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	613b      	str	r3, [r7, #16]
	memcpy(&(txpackage->data[length]), &PKWNDS, sizeof(PKWND));
 8002ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba0 <Parameterset_query+0x220>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	3308      	adds	r3, #8
 8002af0:	4413      	add	r3, r2
 8002af2:	3301      	adds	r3, #1
 8002af4:	893a      	ldrh	r2, [r7, #8]
 8002af6:	801a      	strh	r2, [r3, #0]
	length += sizeof(PKWND);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	3302      	adds	r3, #2
 8002afc:	613b      	str	r3, [r7, #16]
	if(length != txpackage->datalength)
 8002afe:	4b28      	ldr	r3, [pc, #160]	@ (8002ba0 <Parameterset_query+0x220>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	7a1b      	ldrb	r3, [r3, #8]
 8002b04:	461a      	mov	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <Parameterset_query+0x194>
	{
		printf("handle error\n");
 8002b0c:	482a      	ldr	r0, [pc, #168]	@ (8002bb8 <Parameterset_query+0x238>)
 8002b0e:	f005 fdd1 	bl	80086b4 <puts>
 8002b12:	e041      	b.n	8002b98 <Parameterset_query+0x218>
		return CMD_FORMAT_ERROR;
	}
	memcpy(tx_buffer, txpackage, txlen);
 8002b14:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <Parameterset_query+0x220>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4827      	ldr	r0, [pc, #156]	@ (8002bbc <Parameterset_query+0x23c>)
 8002b1e:	f005 ff6c 	bl	80089fa <memcpy>
	int16_t checklength = (int16_t)txlen - 2;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b02      	subs	r3, #2
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	81fb      	strh	r3, [r7, #14]
	SUM = Checksum(&tx_buffer[2], checklength);
 8002b2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4823      	ldr	r0, [pc, #140]	@ (8002bc0 <Parameterset_query+0x240>)
 8002b34:	f7ff fc44 	bl	80023c0 <Checksum>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4b21      	ldr	r3, [pc, #132]	@ (8002bc4 <Parameterset_query+0x244>)
 8002b3e:	801a      	strh	r2, [r3, #0]
	checksum = exchange(&SUM);
 8002b40:	4820      	ldr	r0, [pc, #128]	@ (8002bc4 <Parameterset_query+0x244>)
 8002b42:	f7ff fc21 	bl	8002388 <exchange>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <Parameterset_query+0x248>)
 8002b4c:	801a      	strh	r2, [r3, #0]
	tail = exchange(&tail);
 8002b4e:	481f      	ldr	r0, [pc, #124]	@ (8002bcc <Parameterset_query+0x24c>)
 8002b50:	f7ff fc1a 	bl	8002388 <exchange>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b1c      	ldr	r3, [pc, #112]	@ (8002bcc <Parameterset_query+0x24c>)
 8002b5a:	801a      	strh	r2, [r3, #0]
	memcpy(&tx_buffer[txlen], &checksum, 2);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <Parameterset_query+0x23c>)
 8002b60:	4413      	add	r3, r2
 8002b62:	4a19      	ldr	r2, [pc, #100]	@ (8002bc8 <Parameterset_query+0x248>)
 8002b64:	8812      	ldrh	r2, [r2, #0]
 8002b66:	b292      	uxth	r2, r2
 8002b68:	801a      	strh	r2, [r3, #0]
	memcpy(&tx_buffer[txlen + 2], &tail, 2);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <Parameterset_query+0x23c>)
 8002b70:	4413      	add	r3, r2
 8002b72:	4a16      	ldr	r2, [pc, #88]	@ (8002bcc <Parameterset_query+0x24c>)
 8002b74:	8812      	ldrh	r2, [r2, #0]
 8002b76:	b292      	uxth	r2, r2
 8002b78:	801a      	strh	r2, [r3, #0]
	txlen += 4;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	617b      	str	r3, [r7, #20]
	free(txpackage);
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <Parameterset_query+0x220>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fce7 	bl	8007558 <free>
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, txlen);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <Parameterset_query+0x23c>)
 8002b92:	480f      	ldr	r0, [pc, #60]	@ (8002bd0 <Parameterset_query+0x250>)
 8002b94:	f003 f826 	bl	8005be4 <HAL_UART_Transmit_DMA>
}
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000754 	.word	0x20000754
 8002ba4:	20000750 	.word	0x20000750
 8002ba8:	20000010 	.word	0x20000010
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	20000006 	.word	0x20000006
 8002bb4:	20000008 	.word	0x20000008
 8002bb8:	0800bd74 	.word	0x0800bd74
 8002bbc:	20000324 	.word	0x20000324
 8002bc0:	20000326 	.word	0x20000326
 8002bc4:	2000074a 	.word	0x2000074a
 8002bc8:	20000746 	.word	0x20000746
 8002bcc:	20000748 	.word	0x20000748
 8002bd0:	20000618 	.word	0x20000618

08002bd4 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void) // 计时器中断函数，每1ms进一次中断
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    sysTime.millis++;
 8002bd8:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002bda:	891b      	ldrh	r3, [r3, #8]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002be4:	811a      	strh	r2, [r3, #8]
    if (sysTime.millis >= 1000)
 8002be6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002be8:	891b      	ldrh	r3, [r3, #8]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bf0:	d331      	bcc.n	8002c56 <HAL_SYSTICK_Callback+0x82>
    {
        sysTime.millis = 0;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	811a      	strh	r2, [r3, #8]
        sysTime.second++;
 8002bf8:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002bfa:	799b      	ldrb	r3, [r3, #6]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b16      	ldr	r3, [pc, #88]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c04:	719a      	strb	r2, [r3, #6]
        if (sysTime.second >= 60)
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c08:	799b      	ldrb	r3, [r3, #6]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c0e:	d922      	bls.n	8002c56 <HAL_SYSTICK_Callback+0x82>
        {
            sysTime.second = 0;
 8002c10:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	719a      	strb	r2, [r3, #6]
            sysTime.minute++;
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c18:	795b      	ldrb	r3, [r3, #5]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c22:	715a      	strb	r2, [r3, #5]
            if (sysTime.minute >= 60)
 8002c24:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c26:	795b      	ldrb	r3, [r3, #5]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c2c:	d913      	bls.n	8002c56 <HAL_SYSTICK_Callback+0x82>
            {
                sysTime.minute = 0;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	715a      	strb	r2, [r3, #5]
                sysTime.hour++;
 8002c34:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c36:	791b      	ldrb	r3, [r3, #4]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c40:	711a      	strb	r2, [r3, #4]
                if (sysTime.hour >= 24)
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c44:	791b      	ldrb	r3, [r3, #4]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b17      	cmp	r3, #23
 8002c4a:	d904      	bls.n	8002c56 <HAL_SYSTICK_Callback+0x82>
                {
                    sysTime.hour = 0;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_SYSTICK_Callback+0x88>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	711a      	strb	r2, [r3, #4]
                    incrementDate();
 8002c52:	f000 f805 	bl	8002c60 <incrementDate>
                }
            }
        }
    }
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000075c 	.word	0x2000075c

08002c60 <incrementDate>:

void incrementDate(void) //计算年月
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
    uint8_t days_Month = daysInMonth(sysTime.month, sysTime.year);
 8002c66:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <incrementDate+0x88>)
 8002c68:	789b      	ldrb	r3, [r3, #2]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce8 <incrementDate+0x88>)
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	b292      	uxth	r2, r2
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f83b 	bl	8002cf0 <daysInMonth>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
    sysTime.day++;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <incrementDate+0x88>)
 8002c80:	78db      	ldrb	r3, [r3, #3]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <incrementDate+0x88>)
 8002c8a:	70da      	strb	r2, [r3, #3]
    if (sysTime.day > days_Month)
 8002c8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ce8 <incrementDate+0x88>)
 8002c8e:	78db      	ldrb	r3, [r3, #3]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d222      	bcs.n	8002cde <incrementDate+0x7e>
    {
        sysTime.day = 1;
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <incrementDate+0x88>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	70da      	strb	r2, [r3, #3]
        sysTime.month++;
 8002c9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <incrementDate+0x88>)
 8002ca0:	789b      	ldrb	r3, [r3, #2]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <incrementDate+0x88>)
 8002caa:	709a      	strb	r2, [r3, #2]
        if (sysTime.month > 12)
 8002cac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <incrementDate+0x88>)
 8002cae:	789b      	ldrb	r3, [r3, #2]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d913      	bls.n	8002cde <incrementDate+0x7e>
        {
            sysTime.month = 1;
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <incrementDate+0x88>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	709a      	strb	r2, [r3, #2]
            sysTime.year = (sysTime.year + 1) % 100;
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <incrementDate+0x88>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4a09      	ldr	r2, [pc, #36]	@ (8002cec <incrementDate+0x8c>)
 8002cc6:	fb82 1203 	smull	r1, r2, r2, r3
 8002cca:	1151      	asrs	r1, r2, #5
 8002ccc:	17da      	asrs	r2, r3, #31
 8002cce:	1a8a      	subs	r2, r1, r2
 8002cd0:	2164      	movs	r1, #100	@ 0x64
 8002cd2:	fb01 f202 	mul.w	r2, r1, r2
 8002cd6:	1a9a      	subs	r2, r3, r2
 8002cd8:	b292      	uxth	r2, r2
 8002cda:	4b03      	ldr	r3, [pc, #12]	@ (8002ce8 <incrementDate+0x88>)
 8002cdc:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000075c 	.word	0x2000075c
 8002cec:	51eb851f 	.word	0x51eb851f

08002cf0 <daysInMonth>:

uint8_t daysInMonth(uint8_t month, uint16_t year) //计算天数，已考虑闰年
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	71fb      	strb	r3, [r7, #7]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	80bb      	strh	r3, [r7, #4]
    const uint8_t days[] = {31,28,31,30,31,30,31,31,30,31,30,31};
 8002d00:	4a14      	ldr	r2, [pc, #80]	@ (8002d54 <daysInMonth+0x64>)
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (month == 2 && (year % 4 == 0 && year % 1000 != 0))
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d114      	bne.n	8002d3c <daysInMonth+0x4c>
 8002d12:	88bb      	ldrh	r3, [r7, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10e      	bne.n	8002d3c <daysInMonth+0x4c>
 8002d1e:	88bb      	ldrh	r3, [r7, #4]
 8002d20:	4a0d      	ldr	r2, [pc, #52]	@ (8002d58 <daysInMonth+0x68>)
 8002d22:	fba2 1203 	umull	r1, r2, r2, r3
 8002d26:	0992      	lsrs	r2, r2, #6
 8002d28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d2c:	fb01 f202 	mul.w	r2, r1, r2
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <daysInMonth+0x4c>
    {
        return 29;
 8002d38:	231d      	movs	r3, #29
 8002d3a:	e005      	b.n	8002d48 <daysInMonth+0x58>
    }
    return days[month-1];
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	3318      	adds	r3, #24
 8002d42:	443b      	add	r3, r7
 8002d44:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	0800bd84 	.word	0x0800bd84
 8002d58:	10624dd3 	.word	0x10624dd3

08002d5c <setTime>:

void setTime(void)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
	if(package->datalength != 0x07)
 8002d62:	4b59      	ldr	r3, [pc, #356]	@ (8002ec8 <setTime+0x16c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	7a1b      	ldrb	r3, [r3, #8]
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	d003      	beq.n	8002d74 <setTime+0x18>
		printf("invalid\n");
 8002d6c:	4857      	ldr	r0, [pc, #348]	@ (8002ecc <setTime+0x170>)
 8002d6e:	f005 fca1 	bl	80086b4 <puts>
		memcpy(&tx_buffer[length + 2], &tail, 2);
		length += 4;
		HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
		free(txpackage);
	}
}
 8002d72:	e0a4      	b.n	8002ebe <setTime+0x162>
		size_t length = sizeof(PACKAGE_TypeDef) + 1;
 8002d74:	230a      	movs	r3, #10
 8002d76:	607b      	str	r3, [r7, #4]
		txpackage = (PACKAGE_TypeDef *)malloc(length);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f004 fbe5 	bl	8007548 <malloc>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b53      	ldr	r3, [pc, #332]	@ (8002ed0 <setTime+0x174>)
 8002d84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d86:	b672      	cpsid	i
}
 8002d88:	bf00      	nop
		sysTime.year = read_be16(package->data);
 8002d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec8 <setTime+0x16c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3309      	adds	r3, #9
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fae3 	bl	800235c <read_be16>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed4 <setTime+0x178>)
 8002d9c:	801a      	strh	r2, [r3, #0]
		sysTime.month = package->data[2];
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec8 <setTime+0x16c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	7ada      	ldrb	r2, [r3, #11]
 8002da4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed4 <setTime+0x178>)
 8002da6:	709a      	strb	r2, [r3, #2]
		sysTime.day = package->data[3];
 8002da8:	4b47      	ldr	r3, [pc, #284]	@ (8002ec8 <setTime+0x16c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	7b1a      	ldrb	r2, [r3, #12]
 8002dae:	4b49      	ldr	r3, [pc, #292]	@ (8002ed4 <setTime+0x178>)
 8002db0:	70da      	strb	r2, [r3, #3]
		sysTime.hour = package->data[4];
 8002db2:	4b45      	ldr	r3, [pc, #276]	@ (8002ec8 <setTime+0x16c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	7b5a      	ldrb	r2, [r3, #13]
 8002db8:	4b46      	ldr	r3, [pc, #280]	@ (8002ed4 <setTime+0x178>)
 8002dba:	711a      	strb	r2, [r3, #4]
		sysTime.minute = package->data[5];
 8002dbc:	4b42      	ldr	r3, [pc, #264]	@ (8002ec8 <setTime+0x16c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	7b9a      	ldrb	r2, [r3, #14]
 8002dc2:	4b44      	ldr	r3, [pc, #272]	@ (8002ed4 <setTime+0x178>)
 8002dc4:	715a      	strb	r2, [r3, #5]
		sysTime.second = package->data[6];
 8002dc6:	4b40      	ldr	r3, [pc, #256]	@ (8002ec8 <setTime+0x16c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	7bda      	ldrb	r2, [r3, #15]
 8002dcc:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <setTime+0x178>)
 8002dce:	719a      	strb	r2, [r3, #6]
		sysTime.millis = 0;
 8002dd0:	4b40      	ldr	r3, [pc, #256]	@ (8002ed4 <setTime+0x178>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002dd6:	b662      	cpsie	i
}
 8002dd8:	bf00      	nop
		txpackage->head = exchange(&(package->head));
 8002dda:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec8 <setTime+0x16c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed0 <setTime+0x174>)
 8002de2:	681c      	ldr	r4, [r3, #0]
 8002de4:	4610      	mov	r0, r2
 8002de6:	f7ff facf 	bl	8002388 <exchange>
 8002dea:	4603      	mov	r3, r0
 8002dec:	8023      	strh	r3, [r4, #0]
		txpackage->version = exchange(&package->version);
 8002dee:	4b36      	ldr	r3, [pc, #216]	@ (8002ec8 <setTime+0x16c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3302      	adds	r3, #2
 8002df4:	4a36      	ldr	r2, [pc, #216]	@ (8002ed0 <setTime+0x174>)
 8002df6:	6814      	ldr	r4, [r2, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fac5 	bl	8002388 <exchange>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	8063      	strh	r3, [r4, #2]
		txpackage->code = exchange(&(package->code));
 8002e02:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <setTime+0x16c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4a31      	ldr	r2, [pc, #196]	@ (8002ed0 <setTime+0x174>)
 8002e0a:	6814      	ldr	r4, [r2, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fabb 	bl	8002388 <exchange>
 8002e12:	4603      	mov	r3, r0
 8002e14:	80a3      	strh	r3, [r4, #4]
		txpackage->command = 0x501;
 8002e16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed0 <setTime+0x174>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	719a      	strb	r2, [r3, #6]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f042 0205 	orr.w	r2, r2, #5
 8002e28:	71da      	strb	r2, [r3, #7]
		txpackage->datalength = 0x01;
 8002e2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <setTime+0x174>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	721a      	strb	r2, [r3, #8]
		txpackage->data[0] = 0;
 8002e32:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <setTime+0x174>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	725a      	strb	r2, [r3, #9]
		memcpy(tx_buffer,txpackage,length);
 8002e3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <setTime+0x174>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4619      	mov	r1, r3
 8002e42:	4825      	ldr	r0, [pc, #148]	@ (8002ed8 <setTime+0x17c>)
 8002e44:	f005 fdd9 	bl	80089fa <memcpy>
		int16_t checklength = (int16_t)length - 2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b02      	subs	r3, #2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	807b      	strh	r3, [r7, #2]
		SUM = Checksum(&tx_buffer[2], checklength);
 8002e52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4820      	ldr	r0, [pc, #128]	@ (8002edc <setTime+0x180>)
 8002e5a:	f7ff fab1 	bl	80023c0 <Checksum>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <setTime+0x184>)
 8002e64:	801a      	strh	r2, [r3, #0]
		checksum = exchange(&SUM);
 8002e66:	481e      	ldr	r0, [pc, #120]	@ (8002ee0 <setTime+0x184>)
 8002e68:	f7ff fa8e 	bl	8002388 <exchange>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <setTime+0x188>)
 8002e72:	801a      	strh	r2, [r3, #0]
		tail = exchange(&tail);
 8002e74:	481c      	ldr	r0, [pc, #112]	@ (8002ee8 <setTime+0x18c>)
 8002e76:	f7ff fa87 	bl	8002388 <exchange>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <setTime+0x18c>)
 8002e80:	801a      	strh	r2, [r3, #0]
		memcpy(&tx_buffer[length], &checksum, 2);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a14      	ldr	r2, [pc, #80]	@ (8002ed8 <setTime+0x17c>)
 8002e86:	4413      	add	r3, r2
 8002e88:	4a16      	ldr	r2, [pc, #88]	@ (8002ee4 <setTime+0x188>)
 8002e8a:	8812      	ldrh	r2, [r2, #0]
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	801a      	strh	r2, [r3, #0]
		memcpy(&tx_buffer[length + 2], &tail, 2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3302      	adds	r3, #2
 8002e94:	4a10      	ldr	r2, [pc, #64]	@ (8002ed8 <setTime+0x17c>)
 8002e96:	4413      	add	r3, r2
 8002e98:	4a13      	ldr	r2, [pc, #76]	@ (8002ee8 <setTime+0x18c>)
 8002e9a:	8812      	ldrh	r2, [r2, #0]
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	801a      	strh	r2, [r3, #0]
		length += 4;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	490a      	ldr	r1, [pc, #40]	@ (8002ed8 <setTime+0x17c>)
 8002eae:	480f      	ldr	r0, [pc, #60]	@ (8002eec <setTime+0x190>)
 8002eb0:	f002 fe98 	bl	8005be4 <HAL_UART_Transmit_DMA>
		free(txpackage);
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <setTime+0x174>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 fb4d 	bl	8007558 <free>
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000750 	.word	0x20000750
 8002ecc:	0800bd2c 	.word	0x0800bd2c
 8002ed0:	20000754 	.word	0x20000754
 8002ed4:	2000075c 	.word	0x2000075c
 8002ed8:	20000324 	.word	0x20000324
 8002edc:	20000326 	.word	0x20000326
 8002ee0:	2000074a 	.word	0x2000074a
 8002ee4:	20000746 	.word	0x20000746
 8002ee8:	20000748 	.word	0x20000748
 8002eec:	20000618 	.word	0x20000618

08002ef0 <sendCurrentTime>:

void sendCurrentTime(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef6:	b672      	cpsid	i
}
 8002ef8:	bf00      	nop
    volatile SystemTime_t currentTime;
    __disable_irq();
    currentTime = sysTime;
 8002efa:	4a40      	ldr	r2, [pc, #256]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002efc:	463b      	mov	r3, r7
 8002efe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f00:	c303      	stmia	r3!, {r0, r1}
 8002f02:	801a      	strh	r2, [r3, #0]
    currentTime.year = exchange(&(sysTime.year));
 8002f04:	483d      	ldr	r0, [pc, #244]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002f06:	f7ff fa3f 	bl	8002388 <exchange>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	803b      	strh	r3, [r7, #0]
    currentTime.millis = exchange(&(sysTime.millis));
 8002f0e:	483c      	ldr	r0, [pc, #240]	@ (8003000 <sendCurrentTime+0x110>)
 8002f10:	f7ff fa3a 	bl	8002388 <exchange>
 8002f14:	4603      	mov	r3, r0
 8002f16:	813b      	strh	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f18:	b662      	cpsie	i
}
 8002f1a:	bf00      	nop
	checksum = exchange(&SUM);
	tail = exchange(&tail);
	memcpy(&tx_buffer[length], &checksum, 2);
	memcpy(&tx_buffer[length + 2], &tail, 2);
	length += 4;*/
	uint8_t *ptr = tx_buffer;
 8002f1c:	4b39      	ldr	r3, [pc, #228]	@ (8003004 <sendCurrentTime+0x114>)
 8002f1e:	60fb      	str	r3, [r7, #12]
	ptr += sprintf(ptr, "%04hu", sysTime.year);
 8002f20:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	4937      	ldr	r1, [pc, #220]	@ (8003008 <sendCurrentTime+0x118>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f005 fbca 	bl	80086c4 <siprintf>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
	ptr += sprintf(ptr, "%02u",sysTime.month);
 8002f3a:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002f3c:	789b      	ldrb	r3, [r3, #2]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	4932      	ldr	r1, [pc, #200]	@ (800300c <sendCurrentTime+0x11c>)
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f005 fbbd 	bl	80086c4 <siprintf>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
	ptr += sprintf(ptr, "%02u", sysTime.day);
 8002f54:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002f56:	78db      	ldrb	r3, [r3, #3]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	492b      	ldr	r1, [pc, #172]	@ (800300c <sendCurrentTime+0x11c>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f005 fbb0 	bl	80086c4 <siprintf>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
	ptr += sprintf(ptr, "%02u", sysTime.hour);
 8002f6e:	4b23      	ldr	r3, [pc, #140]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002f70:	791b      	ldrb	r3, [r3, #4]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	4925      	ldr	r1, [pc, #148]	@ (800300c <sendCurrentTime+0x11c>)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f005 fba3 	bl	80086c4 <siprintf>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4413      	add	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
	ptr += sprintf(ptr, "%02u", sysTime.minute);
 8002f88:	4b1c      	ldr	r3, [pc, #112]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002f8a:	795b      	ldrb	r3, [r3, #5]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	491e      	ldr	r1, [pc, #120]	@ (800300c <sendCurrentTime+0x11c>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f005 fb96 	bl	80086c4 <siprintf>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
	ptr += sprintf(ptr, "%02u", sysTime.second);
 8002fa2:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002fa4:	799b      	ldrb	r3, [r3, #6]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4918      	ldr	r1, [pc, #96]	@ (800300c <sendCurrentTime+0x11c>)
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f005 fb89 	bl	80086c4 <siprintf>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
	ptr += sprintf(ptr, "%03hu\r\n", sysTime.millis);
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <sendCurrentTime+0x10c>)
 8002fbe:	891b      	ldrh	r3, [r3, #8]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4912      	ldr	r1, [pc, #72]	@ (8003010 <sendCurrentTime+0x120>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f005 fb7c 	bl	80086c4 <siprintf>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, ptr - tx_buffer);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <sendCurrentTime+0x114>)
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4908      	ldr	r1, [pc, #32]	@ (8003004 <sendCurrentTime+0x114>)
 8002fe2:	480c      	ldr	r0, [pc, #48]	@ (8003014 <sendCurrentTime+0x124>)
 8002fe4:	f002 fdfe 	bl	8005be4 <HAL_UART_Transmit_DMA>
    free(txpackage);
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <sendCurrentTime+0x128>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fab3 	bl	8007558 <free>
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000075c 	.word	0x2000075c
 8003000:	20000764 	.word	0x20000764
 8003004:	20000324 	.word	0x20000324
 8003008:	0800bd90 	.word	0x0800bd90
 800300c:	0800bd98 	.word	0x0800bd98
 8003010:	0800bda0 	.word	0x0800bda0
 8003014:	20000618 	.word	0x20000618
 8003018:	20000754 	.word	0x20000754

0800301c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800301c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003020:	f7ff f810 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003024:	480c      	ldr	r0, [pc, #48]	@ (8003058 <LoopForever+0x6>)
  ldr r1, =_edata
 8003026:	490d      	ldr	r1, [pc, #52]	@ (800305c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003028:	4a0d      	ldr	r2, [pc, #52]	@ (8003060 <LoopForever+0xe>)
  movs r3, #0
 800302a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800302c:	e002      	b.n	8003034 <LoopCopyDataInit>

0800302e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003032:	3304      	adds	r3, #4

08003034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003038:	d3f9      	bcc.n	800302e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303a:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800303c:	4c0a      	ldr	r4, [pc, #40]	@ (8003068 <LoopForever+0x16>)
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003040:	e001      	b.n	8003046 <LoopFillZerobss>

08003042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003044:	3204      	adds	r2, #4

08003046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003048:	d3fb      	bcc.n	8003042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800304a:	f005 fcaf 	bl	80089ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800304e:	f7fe f8b9 	bl	80011c4 <main>

08003052 <LoopForever>:

LoopForever:
    b LoopForever
 8003052:	e7fe      	b.n	8003052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003054:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800305c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003060:	0800c228 	.word	0x0800c228
  ldr r2, =_sbss
 8003064:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003068:	200008cc 	.word	0x200008cc

0800306c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800306c:	e7fe      	b.n	800306c <ADC1_IRQHandler>

0800306e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003078:	2003      	movs	r0, #3
 800307a:	f000 f961 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307e:	200f      	movs	r0, #15
 8003080:	f000 f80e 	bl	80030a0 <HAL_InitTick>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	71fb      	strb	r3, [r7, #7]
 800308e:	e001      	b.n	8003094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003090:	f7fe fe58 	bl	8001d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003094:	79fb      	ldrb	r3, [r7, #7]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80030ac:	4b17      	ldr	r3, [pc, #92]	@ (800310c <HAL_InitTick+0x6c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d023      	beq.n	80030fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030b4:	4b16      	ldr	r3, [pc, #88]	@ (8003110 <HAL_InitTick+0x70>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b14      	ldr	r3, [pc, #80]	@ (800310c <HAL_InitTick+0x6c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f96d 	bl	80033aa <HAL_SYSTICK_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b0f      	cmp	r3, #15
 80030da:	d809      	bhi.n	80030f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030dc:	2200      	movs	r2, #0
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	f000 f937 	bl	8003356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <HAL_InitTick+0x74>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e007      	b.n	8003100 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e004      	b.n	8003100 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	e001      	b.n	8003100 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000028 	.word	0x20000028
 8003110:	20000000 	.word	0x20000000
 8003114:	20000024 	.word	0x20000024

08003118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_IncTick+0x20>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_IncTick+0x24>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4413      	add	r3, r2
 8003128:	4a04      	ldr	r2, [pc, #16]	@ (800313c <HAL_IncTick+0x24>)
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000028 	.word	0x20000028
 800313c:	20000768 	.word	0x20000768

08003140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <HAL_GetTick+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000768 	.word	0x20000768

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff ffee 	bl	8003140 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_Delay+0x44>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800317e:	bf00      	nop
 8003180:	f7ff ffde 	bl	8003140 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
  {
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000028 	.word	0x20000028

080031a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	@ (800323c <__NVIC_EnableIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	@ (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	@ (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	@ 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff8e 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	@ (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff29 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff ff3e 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff8e 	bl	8003294 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5d 	bl	8003240 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff31 	bl	8003204 <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffa2 	bl	80032fc <SysTick_Config>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80033c6:	f7ff fc05 	bl	8002bd4 <HAL_SYSTICK_Callback>
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e098      	b.n	8003514 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003520 <HAL_DMA_Init+0x150>)
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d80f      	bhi.n	800340e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003524 <HAL_DMA_Init+0x154>)
 80033f6:	4413      	add	r3, r2
 80033f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003528 <HAL_DMA_Init+0x158>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	009a      	lsls	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a48      	ldr	r2, [pc, #288]	@ (800352c <HAL_DMA_Init+0x15c>)
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
 800340c:	e00e      	b.n	800342c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b46      	ldr	r3, [pc, #280]	@ (8003530 <HAL_DMA_Init+0x160>)
 8003416:	4413      	add	r3, r2
 8003418:	4a43      	ldr	r2, [pc, #268]	@ (8003528 <HAL_DMA_Init+0x158>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a42      	ldr	r2, [pc, #264]	@ (8003534 <HAL_DMA_Init+0x164>)
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003486:	d039      	beq.n	80034fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_DMA_Init+0x15c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d11a      	bne.n	80034c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003492:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <HAL_DMA_Init+0x168>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f003 031c 	and.w	r3, r3, #28
 800349e:	210f      	movs	r1, #15
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	4924      	ldr	r1, [pc, #144]	@ (8003538 <HAL_DMA_Init+0x168>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034ac:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <HAL_DMA_Init+0x168>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b8:	f003 031c 	and.w	r3, r3, #28
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	491d      	ldr	r1, [pc, #116]	@ (8003538 <HAL_DMA_Init+0x168>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
 80034c6:	e019      	b.n	80034fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034c8:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <HAL_DMA_Init+0x16c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d0:	f003 031c 	and.w	r3, r3, #28
 80034d4:	210f      	movs	r1, #15
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	4917      	ldr	r1, [pc, #92]	@ (800353c <HAL_DMA_Init+0x16c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034e2:	4b16      	ldr	r3, [pc, #88]	@ (800353c <HAL_DMA_Init+0x16c>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	f003 031c 	and.w	r3, r3, #28
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	4911      	ldr	r1, [pc, #68]	@ (800353c <HAL_DMA_Init+0x16c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40020407 	.word	0x40020407
 8003524:	bffdfff8 	.word	0xbffdfff8
 8003528:	cccccccd 	.word	0xcccccccd
 800352c:	40020000 	.word	0x40020000
 8003530:	bffdfbf8 	.word	0xbffdfbf8
 8003534:	40020400 	.word	0x40020400
 8003538:	400200a8 	.word	0x400200a8
 800353c:	400204a8 	.word	0x400204a8

08003540 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_DMA_Start_IT+0x20>
 800355c:	2302      	movs	r3, #2
 800355e:	e04b      	b.n	80035f8 <HAL_DMA_Start_IT+0xb8>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d13a      	bne.n	80035ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f96b 	bl	8003874 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 020e 	orr.w	r2, r2, #14
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e00f      	b.n	80035d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0204 	bic.w	r2, r2, #4
 80035c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 020a 	orr.w	r2, r2, #10
 80035d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e005      	b.n	80035f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d008      	beq.n	800362a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2204      	movs	r2, #4
 800361c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e022      	b.n	8003670 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 020e 	bic.w	r2, r2, #14
 8003638:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f003 021c 	and.w	r2, r3, #28
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800366e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d005      	beq.n	80036a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2204      	movs	r2, #4
 8003698:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e029      	b.n	80036f4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 020e 	bic.w	r2, r2, #14
 80036ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c4:	f003 021c 	and.w	r2, r3, #28
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f202 	lsl.w	r2, r1, r2
 80036d2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
    }
  }
  return status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f003 031c 	and.w	r3, r3, #28
 800371e:	2204      	movs	r2, #4
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d026      	beq.n	8003778 <HAL_DMA_IRQHandler+0x7a>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d021      	beq.n	8003778 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d107      	bne.n	8003752 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0204 	bic.w	r2, r2, #4
 8003750:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f003 021c 	and.w	r2, r3, #28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2104      	movs	r1, #4
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376a:	2b00      	cmp	r3, #0
 800376c:	d071      	beq.n	8003852 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003776:	e06c      	b.n	8003852 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377c:	f003 031c 	and.w	r3, r3, #28
 8003780:	2202      	movs	r2, #2
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02e      	beq.n	80037ea <HAL_DMA_IRQHandler+0xec>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d029      	beq.n	80037ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10b      	bne.n	80037bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 020a 	bic.w	r2, r2, #10
 80037b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	f003 021c 	and.w	r2, r3, #28
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	2102      	movs	r1, #2
 80037ca:	fa01 f202 	lsl.w	r2, r1, r2
 80037ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d038      	beq.n	8003852 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037e8:	e033      	b.n	8003852 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f003 031c 	and.w	r3, r3, #28
 80037f2:	2208      	movs	r2, #8
 80037f4:	409a      	lsls	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d02a      	beq.n	8003854 <HAL_DMA_IRQHandler+0x156>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d025      	beq.n	8003854 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 020e 	bic.w	r2, r2, #14
 8003816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381c:	f003 021c 	and.w	r2, r3, #28
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003852:	bf00      	nop
 8003854:	bf00      	nop
}
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	f003 021c 	and.w	r2, r3, #28
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d108      	bne.n	80038b8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038b6:	e007      	b.n	80038c8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e2:	e154      	b.n	8003b8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8146 	beq.w	8003b88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d005      	beq.n	8003914 <HAL_GPIO_Init+0x40>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d130      	bne.n	8003976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800394a:	2201      	movs	r2, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 0201 	and.w	r2, r3, #1
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b03      	cmp	r3, #3
 8003980:	d017      	beq.n	80039b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2203      	movs	r2, #3
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d123      	bne.n	8003a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	220f      	movs	r2, #15
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	6939      	ldr	r1, [r7, #16]
 8003a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	2203      	movs	r2, #3
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0203 	and.w	r2, r3, #3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80a0 	beq.w	8003b88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a48:	4b58      	ldr	r3, [pc, #352]	@ (8003bac <HAL_GPIO_Init+0x2d8>)
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4c:	4a57      	ldr	r2, [pc, #348]	@ (8003bac <HAL_GPIO_Init+0x2d8>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a54:	4b55      	ldr	r3, [pc, #340]	@ (8003bac <HAL_GPIO_Init+0x2d8>)
 8003a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a60:	4a53      	ldr	r2, [pc, #332]	@ (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a8a:	d019      	beq.n	8003ac0 <HAL_GPIO_Init+0x1ec>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a49      	ldr	r2, [pc, #292]	@ (8003bb4 <HAL_GPIO_Init+0x2e0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <HAL_GPIO_Init+0x1e8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a48      	ldr	r2, [pc, #288]	@ (8003bb8 <HAL_GPIO_Init+0x2e4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_GPIO_Init+0x1e4>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a47      	ldr	r2, [pc, #284]	@ (8003bbc <HAL_GPIO_Init+0x2e8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <HAL_GPIO_Init+0x1e0>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a46      	ldr	r2, [pc, #280]	@ (8003bc0 <HAL_GPIO_Init+0x2ec>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_GPIO_Init+0x1dc>
 8003aac:	2304      	movs	r3, #4
 8003aae:	e008      	b.n	8003ac2 <HAL_GPIO_Init+0x1ee>
 8003ab0:	2307      	movs	r3, #7
 8003ab2:	e006      	b.n	8003ac2 <HAL_GPIO_Init+0x1ee>
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e004      	b.n	8003ac2 <HAL_GPIO_Init+0x1ee>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e002      	b.n	8003ac2 <HAL_GPIO_Init+0x1ee>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_GPIO_Init+0x1ee>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	f002 0203 	and.w	r2, r2, #3
 8003ac8:	0092      	lsls	r2, r2, #2
 8003aca:	4093      	lsls	r3, r2
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ad2:	4937      	ldr	r1, [pc, #220]	@ (8003bb0 <HAL_GPIO_Init+0x2dc>)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	3302      	adds	r3, #2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae0:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b04:	4a2f      	ldr	r2, [pc, #188]	@ (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b2e:	4a25      	ldr	r2, [pc, #148]	@ (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b34:	4b23      	ldr	r3, [pc, #140]	@ (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b58:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b5e:	4b19      	ldr	r3, [pc, #100]	@ (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b82:	4a10      	ldr	r2, [pc, #64]	@ (8003bc4 <HAL_GPIO_Init+0x2f0>)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f47f aea3 	bne.w	80038e4 <HAL_GPIO_Init+0x10>
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	48000400 	.word	0x48000400
 8003bb8:	48000800 	.word	0x48000800
 8003bbc:	48000c00 	.word	0x48000c00
 8003bc0:	48001000 	.word	0x48001000
 8003bc4:	40010400 	.word	0x40010400

08003bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd8:	787b      	ldrb	r3, [r7, #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bfc:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40007000 	.word	0x40007000

08003c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c22:	d130      	bne.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c24:	4b23      	ldr	r3, [pc, #140]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c30:	d038      	beq.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c32:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c42:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2232      	movs	r2, #50	@ 0x32
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	0c9b      	lsrs	r3, r3, #18
 8003c54:	3301      	adds	r3, #1
 8003c56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c58:	e002      	b.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c60:	4b14      	ldr	r3, [pc, #80]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6c:	d102      	bne.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f2      	bne.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c74:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c80:	d110      	bne.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00f      	b.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c86:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c92:	d007      	beq.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c94:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c9c:	4a05      	ldr	r2, [pc, #20]	@ (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ca2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	431bde83 	.word	0x431bde83

08003cc0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f000 bc02 	b.w	80044d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd4:	4b96      	ldr	r3, [pc, #600]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cde:	4b94      	ldr	r3, [pc, #592]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80e4 	beq.w	8003ebe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_RCC_OscConfig+0x4c>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	f040 808b 	bne.w	8003e1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f040 8087 	bne.w	8003e1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d0c:	4b88      	ldr	r3, [pc, #544]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_OscConfig+0x64>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e3d9      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	4b81      	ldr	r3, [pc, #516]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <HAL_RCC_OscConfig+0x7e>
 8003d34:	4b7e      	ldr	r3, [pc, #504]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d3c:	e005      	b.n	8003d4a <HAL_RCC_OscConfig+0x8a>
 8003d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d223      	bcs.n	8003d96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fd8c 	bl	8004870 <RCC_SetFlashLatencyFromMSIRange>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e3ba      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d62:	4b73      	ldr	r3, [pc, #460]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a72      	ldr	r2, [pc, #456]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d68:	f043 0308 	orr.w	r3, r3, #8
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b70      	ldr	r3, [pc, #448]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	496d      	ldr	r1, [pc, #436]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d80:	4b6b      	ldr	r3, [pc, #428]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	4968      	ldr	r1, [pc, #416]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
 8003d94:	e025      	b.n	8003de2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d96:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a65      	ldr	r2, [pc, #404]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b63      	ldr	r3, [pc, #396]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4960      	ldr	r1, [pc, #384]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db4:	4b5e      	ldr	r3, [pc, #376]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	495b      	ldr	r1, [pc, #364]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fd4c 	bl	8004870 <RCC_SetFlashLatencyFromMSIRange>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e37a      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003de2:	f000 fc81 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b51      	ldr	r3, [pc, #324]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4950      	ldr	r1, [pc, #320]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003df4:	5ccb      	ldrb	r3, [r1, r3]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	4a4e      	ldr	r2, [pc, #312]	@ (8003f38 <HAL_RCC_OscConfig+0x278>)
 8003e00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e02:	4b4e      	ldr	r3, [pc, #312]	@ (8003f3c <HAL_RCC_OscConfig+0x27c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff f94a 	bl	80030a0 <HAL_InitTick>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d052      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	e35e      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d032      	beq.n	8003e88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e22:	4b43      	ldr	r3, [pc, #268]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a42      	ldr	r2, [pc, #264]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e2e:	f7ff f987 	bl	8003140 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e36:	f7ff f983 	bl	8003140 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e347      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e48:	4b39      	ldr	r3, [pc, #228]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e54:	4b36      	ldr	r3, [pc, #216]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a35      	ldr	r2, [pc, #212]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	f043 0308 	orr.w	r3, r3, #8
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	4b33      	ldr	r3, [pc, #204]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4930      	ldr	r1, [pc, #192]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e72:	4b2f      	ldr	r3, [pc, #188]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	492b      	ldr	r1, [pc, #172]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
 8003e86:	e01a      	b.n	8003ebe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e88:	4b29      	ldr	r3, [pc, #164]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e94:	f7ff f954 	bl	8003140 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e9c:	f7ff f950 	bl	8003140 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e314      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003eae:	4b20      	ldr	r3, [pc, #128]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x1dc>
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ebc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d073      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_OscConfig+0x21c>
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d063      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x2f0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d15f      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e2f1      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003efc:	d106      	bne.n	8003f0c <HAL_RCC_OscConfig+0x24c>
 8003efe:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a0b      	ldr	r2, [pc, #44]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e025      	b.n	8003f58 <HAL_RCC_OscConfig+0x298>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f14:	d114      	bne.n	8003f40 <HAL_RCC_OscConfig+0x280>
 8003f16:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a05      	ldr	r2, [pc, #20]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b03      	ldr	r3, [pc, #12]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a02      	ldr	r2, [pc, #8]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e013      	b.n	8003f58 <HAL_RCC_OscConfig+0x298>
 8003f30:	40021000 	.word	0x40021000
 8003f34:	0800bda8 	.word	0x0800bda8
 8003f38:	20000000 	.word	0x20000000
 8003f3c:	20000024 	.word	0x20000024
 8003f40:	4ba0      	ldr	r3, [pc, #640]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a9f      	ldr	r2, [pc, #636]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	4b9d      	ldr	r3, [pc, #628]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a9c      	ldr	r2, [pc, #624]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d013      	beq.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7ff f8ee 	bl	8003140 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7ff f8ea 	bl	8003140 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e2ae      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f7a:	4b92      	ldr	r3, [pc, #584]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x2a8>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7ff f8da 	bl	8003140 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f90:	f7ff f8d6 	bl	8003140 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	@ 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e29a      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fa2:	4b88      	ldr	r3, [pc, #544]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x2d0>
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d060      	beq.n	8004080 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x310>
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d119      	bne.n	8003ffe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d116      	bne.n	8003ffe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd0:	4b7c      	ldr	r3, [pc, #496]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x328>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e277      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe8:	4b76      	ldr	r3, [pc, #472]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	4973      	ldr	r1, [pc, #460]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffc:	e040      	b.n	8004080 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d023      	beq.n	800404e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004006:	4b6f      	ldr	r3, [pc, #444]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6e      	ldr	r2, [pc, #440]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7ff f895 	bl	8003140 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401a:	f7ff f891 	bl	8003140 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e255      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402c:	4b65      	ldr	r3, [pc, #404]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004038:	4b62      	ldr	r3, [pc, #392]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	495f      	ldr	r1, [pc, #380]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
 800404c:	e018      	b.n	8004080 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404e:	4b5d      	ldr	r3, [pc, #372]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a5c      	ldr	r2, [pc, #368]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7ff f871 	bl	8003140 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004062:	f7ff f86d 	bl	8003140 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e231      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004074:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03c      	beq.n	8004106 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01c      	beq.n	80040ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004094:	4b4b      	ldr	r3, [pc, #300]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800409a:	4a4a      	ldr	r2, [pc, #296]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7ff f84c 	bl	8003140 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ac:	f7ff f848 	bl	8003140 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e20c      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040be:	4b41      	ldr	r3, [pc, #260]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 80040c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ef      	beq.n	80040ac <HAL_RCC_OscConfig+0x3ec>
 80040cc:	e01b      	b.n	8004106 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ce:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d4:	4a3b      	ldr	r2, [pc, #236]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7ff f82f 	bl	8003140 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e6:	f7ff f82b 	bl	8003140 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1ef      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f8:	4b32      	ldr	r3, [pc, #200]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 80040fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1ef      	bne.n	80040e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80a6 	beq.w	8004260 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004114:	2300      	movs	r3, #0
 8004116:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004118:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 800411a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004124:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	4a26      	ldr	r2, [pc, #152]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004130:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413c:	2301      	movs	r3, #1
 800413e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004140:	4b21      	ldr	r3, [pc, #132]	@ (80041c8 <HAL_RCC_OscConfig+0x508>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d118      	bne.n	800417e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800414c:	4b1e      	ldr	r3, [pc, #120]	@ (80041c8 <HAL_RCC_OscConfig+0x508>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1d      	ldr	r2, [pc, #116]	@ (80041c8 <HAL_RCC_OscConfig+0x508>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004158:	f7fe fff2 	bl	8003140 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fe ffee 	bl	8003140 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1b2      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004172:	4b15      	ldr	r3, [pc, #84]	@ (80041c8 <HAL_RCC_OscConfig+0x508>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d108      	bne.n	8004198 <HAL_RCC_OscConfig+0x4d8>
 8004186:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418c:	4a0d      	ldr	r2, [pc, #52]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004196:	e029      	b.n	80041ec <HAL_RCC_OscConfig+0x52c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b05      	cmp	r3, #5
 800419e:	d115      	bne.n	80041cc <HAL_RCC_OscConfig+0x50c>
 80041a0:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	4a07      	ldr	r2, [pc, #28]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 80041a8:	f043 0304 	orr.w	r3, r3, #4
 80041ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041b0:	4b04      	ldr	r3, [pc, #16]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	4a03      	ldr	r2, [pc, #12]	@ (80041c4 <HAL_RCC_OscConfig+0x504>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041c0:	e014      	b.n	80041ec <HAL_RCC_OscConfig+0x52c>
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40007000 	.word	0x40007000
 80041cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d2:	4a99      	ldr	r2, [pc, #612]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041dc:	4b96      	ldr	r3, [pc, #600]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	4a95      	ldr	r2, [pc, #596]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d016      	beq.n	8004222 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fe ffa4 	bl	8003140 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fe ffa0 	bl	8003140 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e162      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004212:	4b89      	ldr	r3, [pc, #548]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0ed      	beq.n	80041fc <HAL_RCC_OscConfig+0x53c>
 8004220:	e015      	b.n	800424e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fe ff8d 	bl	8003140 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fe ff89 	bl	8003140 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e14b      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004240:	4b7d      	ldr	r3, [pc, #500]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1ed      	bne.n	800422a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424e:	7ffb      	ldrb	r3, [r7, #31]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d105      	bne.n	8004260 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004254:	4b78      	ldr	r3, [pc, #480]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004258:	4a77      	ldr	r2, [pc, #476]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 800425a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800425e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d03c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01c      	beq.n	80042ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004274:	4b70      	ldr	r3, [pc, #448]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800427a:	4a6f      	ldr	r2, [pc, #444]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe ff5c 	bl	8003140 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800428c:	f7fe ff58 	bl	8003140 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e11c      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800429e:	4b66      	ldr	r3, [pc, #408]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80042a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ef      	beq.n	800428c <HAL_RCC_OscConfig+0x5cc>
 80042ac:	e01b      	b.n	80042e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042ae:	4b62      	ldr	r3, [pc, #392]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80042b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042b4:	4a60      	ldr	r2, [pc, #384]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042be:	f7fe ff3f 	bl	8003140 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c6:	f7fe ff3b 	bl	8003140 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0ff      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042d8:	4b57      	ldr	r3, [pc, #348]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80042da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ef      	bne.n	80042c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80f3 	beq.w	80044d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	f040 80c9 	bne.w	800448c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	429a      	cmp	r2, r3
 800430c:	d12c      	bne.n	8004368 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004318:	3b01      	subs	r3, #1
 800431a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d123      	bne.n	8004368 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d11b      	bne.n	8004368 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d113      	bne.n	8004368 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	3b01      	subs	r3, #1
 800434e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d109      	bne.n	8004368 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	3b01      	subs	r3, #1
 8004362:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d06b      	beq.n	8004440 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d062      	beq.n	8004434 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800436e:	4b32      	ldr	r3, [pc, #200]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0ac      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800437e:	4b2e      	ldr	r3, [pc, #184]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2d      	ldr	r2, [pc, #180]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004384:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004388:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800438a:	f7fe fed9 	bl	8003140 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004392:	f7fe fed5 	bl	8003140 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e099      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a4:	4b24      	ldr	r3, [pc, #144]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b0:	4b21      	ldr	r3, [pc, #132]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	4b21      	ldr	r3, [pc, #132]	@ (800443c <HAL_RCC_OscConfig+0x77c>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043c0:	3a01      	subs	r2, #1
 80043c2:	0112      	lsls	r2, r2, #4
 80043c4:	4311      	orrs	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043ca:	0212      	lsls	r2, r2, #8
 80043cc:	4311      	orrs	r1, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043d2:	0852      	lsrs	r2, r2, #1
 80043d4:	3a01      	subs	r2, #1
 80043d6:	0552      	lsls	r2, r2, #21
 80043d8:	4311      	orrs	r1, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80043de:	0852      	lsrs	r2, r2, #1
 80043e0:	3a01      	subs	r2, #1
 80043e2:	0652      	lsls	r2, r2, #25
 80043e4:	4311      	orrs	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043ea:	06d2      	lsls	r2, r2, #27
 80043ec:	430a      	orrs	r2, r1
 80043ee:	4912      	ldr	r1, [pc, #72]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043f4:	4b10      	ldr	r3, [pc, #64]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 80043fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004400:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a0c      	ldr	r2, [pc, #48]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800440a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800440c:	f7fe fe98 	bl	8003140 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe fe94 	bl	8003140 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e058      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004426:	4b04      	ldr	r3, [pc, #16]	@ (8004438 <HAL_RCC_OscConfig+0x778>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004432:	e050      	b.n	80044d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e04f      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
 8004438:	40021000 	.word	0x40021000
 800443c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004440:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d144      	bne.n	80044d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800444c:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a23      	ldr	r2, [pc, #140]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004458:	4b21      	ldr	r3, [pc, #132]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a20      	ldr	r2, [pc, #128]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 800445e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004464:	f7fe fe6c 	bl	8003140 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fe fe68 	bl	8003140 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e02c      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447e:	4b18      	ldr	r3, [pc, #96]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x7ac>
 800448a:	e024      	b.n	80044d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d01f      	beq.n	80044d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b13      	ldr	r3, [pc, #76]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a12      	ldr	r2, [pc, #72]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 8004498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fe fe4f 	bl	8003140 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fe fe4b 	bl	8003140 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e00f      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044c4:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	4905      	ldr	r1, [pc, #20]	@ (80044e0 <HAL_RCC_OscConfig+0x820>)
 80044ca:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <HAL_RCC_OscConfig+0x824>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	60cb      	str	r3, [r1, #12]
 80044d0:	e001      	b.n	80044d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000
 80044e4:	feeefffc 	.word	0xfeeefffc

080044e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0e7      	b.n	80046cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b75      	ldr	r3, [pc, #468]	@ (80046d4 <HAL_RCC_ClockConfig+0x1ec>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d910      	bls.n	800452c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b72      	ldr	r3, [pc, #456]	@ (80046d4 <HAL_RCC_ClockConfig+0x1ec>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 0207 	bic.w	r2, r3, #7
 8004512:	4970      	ldr	r1, [pc, #448]	@ (80046d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b6e      	ldr	r3, [pc, #440]	@ (80046d4 <HAL_RCC_ClockConfig+0x1ec>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0cf      	b.n	80046cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d010      	beq.n	800455a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	4b66      	ldr	r3, [pc, #408]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004544:	429a      	cmp	r2, r3
 8004546:	d908      	bls.n	800455a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004548:	4b63      	ldr	r3, [pc, #396]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4960      	ldr	r1, [pc, #384]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d04c      	beq.n	8004600 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	4b5a      	ldr	r3, [pc, #360]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d121      	bne.n	80045be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0a6      	b.n	80046cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	4b54      	ldr	r3, [pc, #336]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d115      	bne.n	80045be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e09a      	b.n	80046cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800459e:	4b4e      	ldr	r3, [pc, #312]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e08e      	b.n	80046cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ae:	4b4a      	ldr	r3, [pc, #296]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e086      	b.n	80046cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045be:	4b46      	ldr	r3, [pc, #280]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f023 0203 	bic.w	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4943      	ldr	r1, [pc, #268]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d0:	f7fe fdb6 	bl	8003140 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d8:	f7fe fdb2 	bl	8003140 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e06e      	b.n	80046cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ee:	4b3a      	ldr	r3, [pc, #232]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 020c 	and.w	r2, r3, #12
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d1eb      	bne.n	80045d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	4b31      	ldr	r3, [pc, #196]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004618:	429a      	cmp	r2, r3
 800461a:	d208      	bcs.n	800462e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800461c:	4b2e      	ldr	r3, [pc, #184]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	492b      	ldr	r1, [pc, #172]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462e:	4b29      	ldr	r3, [pc, #164]	@ (80046d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d210      	bcs.n	800465e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463c:	4b25      	ldr	r3, [pc, #148]	@ (80046d4 <HAL_RCC_ClockConfig+0x1ec>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 0207 	bic.w	r2, r3, #7
 8004644:	4923      	ldr	r1, [pc, #140]	@ (80046d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800464c:	4b21      	ldr	r3, [pc, #132]	@ (80046d4 <HAL_RCC_ClockConfig+0x1ec>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d001      	beq.n	800465e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e036      	b.n	80046cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800466a:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	4918      	ldr	r1, [pc, #96]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004688:	4b13      	ldr	r3, [pc, #76]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4910      	ldr	r1, [pc, #64]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800469c:	f000 f824 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f0>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	490b      	ldr	r1, [pc, #44]	@ (80046dc <HAL_RCC_ClockConfig+0x1f4>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <HAL_RCC_ClockConfig+0x1f8>)
 80046ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046bc:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <HAL_RCC_ClockConfig+0x1fc>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fced 	bl	80030a0 <HAL_InitTick>
 80046c6:	4603      	mov	r3, r0
 80046c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80046ca:	7afb      	ldrb	r3, [r7, #11]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40022000 	.word	0x40022000
 80046d8:	40021000 	.word	0x40021000
 80046dc:	0800bda8 	.word	0x0800bda8
 80046e0:	20000000 	.word	0x20000000
 80046e4:	20000024 	.word	0x20000024

080046e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	@ 0x24
 80046ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f6:	4b3e      	ldr	r3, [pc, #248]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004700:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x34>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d121      	bne.n	800475a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d11e      	bne.n	800475a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800471c:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004728:	4b31      	ldr	r3, [pc, #196]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800472a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e005      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004738:	4b2d      	ldr	r3, [pc, #180]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004744:	4a2b      	ldr	r2, [pc, #172]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10d      	bne.n	8004770 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004758:	e00a      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d102      	bne.n	8004766 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004760:	4b25      	ldr	r3, [pc, #148]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	e004      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d101      	bne.n	8004770 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800476c:	4b23      	ldr	r3, [pc, #140]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x114>)
 800476e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d134      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004776:	4b1e      	ldr	r3, [pc, #120]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d003      	beq.n	800478e <HAL_RCC_GetSysClockFreq+0xa6>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d003      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0xac>
 800478c:	e005      	b.n	800479a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800478e:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004790:	617b      	str	r3, [r7, #20]
      break;
 8004792:	e005      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004794:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004796:	617b      	str	r3, [r7, #20]
      break;
 8004798:	e002      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	617b      	str	r3, [r7, #20]
      break;
 800479e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047a0:	4b13      	ldr	r3, [pc, #76]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	3301      	adds	r3, #1
 80047ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047ae:	4b10      	ldr	r3, [pc, #64]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	fb03 f202 	mul.w	r2, r3, r2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047c6:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	0e5b      	lsrs	r3, r3, #25
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	3301      	adds	r3, #1
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	fbb2 f3f3 	udiv	r3, r2, r3
 80047de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047e0:	69bb      	ldr	r3, [r7, #24]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3724      	adds	r7, #36	@ 0x24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000
 80047f4:	0800bdc0 	.word	0x0800bdc0
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	007a1200 	.word	0x007a1200

08004800 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004804:	4b03      	ldr	r3, [pc, #12]	@ (8004814 <HAL_RCC_GetHCLKFreq+0x14>)
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000000 	.word	0x20000000

08004818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800481c:	f7ff fff0 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4904      	ldr	r1, [pc, #16]	@ (8004840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	0800bdb8 	.word	0x0800bdb8

08004844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004848:	f7ff ffda 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0adb      	lsrs	r3, r3, #11
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4904      	ldr	r1, [pc, #16]	@ (800486c <HAL_RCC_GetPCLK2Freq+0x28>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	0800bdb8 	.word	0x0800bdb8

08004870 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800487c:	4b2a      	ldr	r3, [pc, #168]	@ (8004928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004888:	f7ff f9b6 	bl	8003bf8 <HAL_PWREx_GetVoltageRange>
 800488c:	6178      	str	r0, [r7, #20]
 800488e:	e014      	b.n	80048ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004890:	4b25      	ldr	r3, [pc, #148]	@ (8004928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	4a24      	ldr	r2, [pc, #144]	@ (8004928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489a:	6593      	str	r3, [r2, #88]	@ 0x58
 800489c:	4b22      	ldr	r3, [pc, #136]	@ (8004928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048a8:	f7ff f9a6 	bl	8003bf8 <HAL_PWREx_GetVoltageRange>
 80048ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048c0:	d10b      	bne.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b80      	cmp	r3, #128	@ 0x80
 80048c6:	d919      	bls.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80048cc:	d902      	bls.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ce:	2302      	movs	r3, #2
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e013      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048d4:	2301      	movs	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	e010      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b80      	cmp	r3, #128	@ 0x80
 80048de:	d902      	bls.n	80048e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048e0:	2303      	movs	r3, #3
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	e00a      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b80      	cmp	r3, #128	@ 0x80
 80048ea:	d102      	bne.n	80048f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ec:	2302      	movs	r3, #2
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e004      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b70      	cmp	r3, #112	@ 0x70
 80048f6:	d101      	bne.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048f8:	2301      	movs	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 0207 	bic.w	r2, r3, #7
 8004904:	4909      	ldr	r1, [pc, #36]	@ (800492c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800490c:	4b07      	ldr	r3, [pc, #28]	@ (800492c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	429a      	cmp	r2, r3
 8004918:	d001      	beq.n	800491e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40021000 	.word	0x40021000
 800492c:	40022000 	.word	0x40022000

08004930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004938:	2300      	movs	r3, #0
 800493a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800493c:	2300      	movs	r3, #0
 800493e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004948:	2b00      	cmp	r3, #0
 800494a:	d031      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004950:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004954:	d01a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004956:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800495a:	d814      	bhi.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004960:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004964:	d10f      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004966:	4b5d      	ldr	r3, [pc, #372]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	4a5c      	ldr	r2, [pc, #368]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004970:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004972:	e00c      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fa22 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004984:	e003      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	74fb      	strb	r3, [r7, #19]
      break;
 800498a:	e000      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800498c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004994:	4b51      	ldr	r3, [pc, #324]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	494e      	ldr	r1, [pc, #312]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80049aa:	e001      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 809e 	beq.w	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049c2:	4b46      	ldr	r3, [pc, #280]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d8:	4b40      	ldr	r3, [pc, #256]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049dc:	4a3f      	ldr	r2, [pc, #252]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80049e4:	4b3d      	ldr	r3, [pc, #244]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f0:	2301      	movs	r3, #1
 80049f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049f4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a39      	ldr	r2, [pc, #228]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a00:	f7fe fb9e 	bl	8003140 <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a06:	e009      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a08:	f7fe fb9a 	bl	8003140 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d902      	bls.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	74fb      	strb	r3, [r7, #19]
        break;
 8004a1a:	e005      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a1c:	4b30      	ldr	r3, [pc, #192]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ef      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d15a      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01e      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d019      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a4a:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a56:	4b21      	ldr	r3, [pc, #132]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a66:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a76:	4a19      	ldr	r2, [pc, #100]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d016      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fe fb5a 	bl	8003140 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a90:	f7fe fb56 	bl	8003140 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d902      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	74fb      	strb	r3, [r7, #19]
            break;
 8004aa6:	e006      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ec      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004abc:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aca:	4904      	ldr	r1, [pc, #16]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ad2:	e009      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	74bb      	strb	r3, [r7, #18]
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ae8:	7c7b      	ldrb	r3, [r7, #17]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aee:	4b8d      	ldr	r3, [pc, #564]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af2:	4a8c      	ldr	r2, [pc, #560]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004af8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b06:	4b87      	ldr	r3, [pc, #540]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f023 0203 	bic.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4983      	ldr	r1, [pc, #524]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b28:	4b7e      	ldr	r3, [pc, #504]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f023 020c 	bic.w	r2, r3, #12
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	497b      	ldr	r1, [pc, #492]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b4a:	4b76      	ldr	r3, [pc, #472]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	4972      	ldr	r1, [pc, #456]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6c:	4b6d      	ldr	r3, [pc, #436]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	496a      	ldr	r1, [pc, #424]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8e:	4b65      	ldr	r3, [pc, #404]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	4961      	ldr	r1, [pc, #388]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bb0:	4b5c      	ldr	r3, [pc, #368]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	4959      	ldr	r1, [pc, #356]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd2:	4b54      	ldr	r3, [pc, #336]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	4950      	ldr	r1, [pc, #320]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c02:	4948      	ldr	r1, [pc, #288]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c16:	4b43      	ldr	r3, [pc, #268]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	493f      	ldr	r1, [pc, #252]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d028      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c38:	4b3a      	ldr	r3, [pc, #232]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c46:	4937      	ldr	r1, [pc, #220]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c56:	d106      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c58:	4b32      	ldr	r3, [pc, #200]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4a31      	ldr	r2, [pc, #196]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c62:	60d3      	str	r3, [r2, #12]
 8004c64:	e011      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c6e:	d10c      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f8a4 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d028      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c96:	4b23      	ldr	r3, [pc, #140]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca4:	491f      	ldr	r1, [pc, #124]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb4:	d106      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cc0:	60d3      	str	r3, [r2, #12]
 8004cc2:	e011      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 f875 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02b      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d02:	4908      	ldr	r1, [pc, #32]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d12:	d109      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d14:	4b03      	ldr	r3, [pc, #12]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a02      	ldr	r2, [pc, #8]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d1e:	60d3      	str	r3, [r2, #12]
 8004d20:	e014      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	2101      	movs	r1, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f843 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01c      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d58:	4b19      	ldr	r3, [pc, #100]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	4916      	ldr	r1, [pc, #88]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d76:	d10c      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f820 	bl	8004dc4 <RCCEx_PLLSAI1_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d9e:	4b08      	ldr	r3, [pc, #32]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dac:	4904      	ldr	r1, [pc, #16]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004db4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000

08004dc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dd2:	4b74      	ldr	r3, [pc, #464]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dde:	4b71      	ldr	r3, [pc, #452]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0203 	and.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d10d      	bne.n	8004e0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
       ||
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004df6:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
       ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d047      	beq.n	8004e9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
 8004e0e:	e044      	b.n	8004e9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d018      	beq.n	8004e4a <RCCEx_PLLSAI1_Config+0x86>
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d825      	bhi.n	8004e68 <RCCEx_PLLSAI1_Config+0xa4>
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d002      	beq.n	8004e26 <RCCEx_PLLSAI1_Config+0x62>
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d009      	beq.n	8004e38 <RCCEx_PLLSAI1_Config+0x74>
 8004e24:	e020      	b.n	8004e68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e26:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d11d      	bne.n	8004e6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e36:	e01a      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e38:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d116      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e48:	e013      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e4a:	4b56      	ldr	r3, [pc, #344]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10f      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e56:	4b53      	ldr	r3, [pc, #332]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e66:	e006      	b.n	8004e76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6c:	e004      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e002      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e72:	bf00      	nop
 8004e74:	e000      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e7e:	4b49      	ldr	r3, [pc, #292]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	430b      	orrs	r3, r1
 8004e94:	4943      	ldr	r1, [pc, #268]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d17c      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ea0:	4b40      	ldr	r3, [pc, #256]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eac:	f7fe f948 	bl	8003140 <HAL_GetTick>
 8004eb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb2:	e009      	b.n	8004ec8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eb4:	f7fe f944 	bl	8003140 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec6:	e005      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ec8:	4b36      	ldr	r3, [pc, #216]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ef      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d15f      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d110      	bne.n	8004f02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee0:	4b30      	ldr	r3, [pc, #192]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004ee8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6892      	ldr	r2, [r2, #8]
 8004ef0:	0211      	lsls	r1, r2, #8
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68d2      	ldr	r2, [r2, #12]
 8004ef6:	06d2      	lsls	r2, r2, #27
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	492a      	ldr	r1, [pc, #168]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	610b      	str	r3, [r1, #16]
 8004f00:	e027      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d112      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f08:	4b26      	ldr	r3, [pc, #152]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	0211      	lsls	r1, r2, #8
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6912      	ldr	r2, [r2, #16]
 8004f1e:	0852      	lsrs	r2, r2, #1
 8004f20:	3a01      	subs	r2, #1
 8004f22:	0552      	lsls	r2, r2, #21
 8004f24:	430a      	orrs	r2, r1
 8004f26:	491f      	ldr	r1, [pc, #124]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	610b      	str	r3, [r1, #16]
 8004f2c:	e011      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f36:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6892      	ldr	r2, [r2, #8]
 8004f3e:	0211      	lsls	r1, r2, #8
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6952      	ldr	r2, [r2, #20]
 8004f44:	0852      	lsrs	r2, r2, #1
 8004f46:	3a01      	subs	r2, #1
 8004f48:	0652      	lsls	r2, r2, #25
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	4915      	ldr	r1, [pc, #84]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f52:	4b14      	ldr	r3, [pc, #80]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a13      	ldr	r2, [pc, #76]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5e:	f7fe f8ef 	bl	8003140 <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f64:	e009      	b.n	8004f7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f66:	f7fe f8eb 	bl	8003140 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d902      	bls.n	8004f7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	73fb      	strb	r3, [r7, #15]
          break;
 8004f78:	e005      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ef      	beq.n	8004f66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f8c:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	4903      	ldr	r1, [pc, #12]	@ (8004fa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e095      	b.n	80050e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d108      	bne.n	8004fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fca:	d009      	beq.n	8004fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	61da      	str	r2, [r3, #28]
 8004fd2:	e005      	b.n	8004fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc fd44 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005020:	d902      	bls.n	8005028 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e002      	b.n	800502e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800502c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005036:	d007      	beq.n	8005048 <HAL_SPI_Init+0xa0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005040:	d002      	beq.n	8005048 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	ea42 0103 	orr.w	r1, r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005092:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	f003 0204 	and.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050c4:	ea42 0103 	orr.w	r1, r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b08a      	sub	sp, #40	@ 0x28
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050fc:	2301      	movs	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005100:	f7fe f81e 	bl	8003140 <HAL_GetTick>
 8005104:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800510c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005118:	887b      	ldrh	r3, [r7, #2]
 800511a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800511c:	7ffb      	ldrb	r3, [r7, #31]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d00c      	beq.n	800513c <HAL_SPI_TransmitReceive+0x4e>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005128:	d106      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x4a>
 8005132:	7ffb      	ldrb	r3, [r7, #31]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d001      	beq.n	800513c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
 800513a:	e1f3      	b.n	8005524 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_SPI_TransmitReceive+0x60>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_SPI_TransmitReceive+0x60>
 8005148:	887b      	ldrh	r3, [r7, #2]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e1e8      	b.n	8005524 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_SPI_TransmitReceive+0x72>
 800515c:	2302      	movs	r3, #2
 800515e:	e1e1      	b.n	8005524 <HAL_SPI_TransmitReceive+0x436>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b04      	cmp	r3, #4
 8005172:	d003      	beq.n	800517c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2205      	movs	r2, #5
 8005178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	887a      	ldrh	r2, [r7, #2]
 800518c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	887a      	ldrh	r2, [r7, #2]
 8005194:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	887a      	ldrh	r2, [r7, #2]
 80051a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051be:	d802      	bhi.n	80051c6 <HAL_SPI_TransmitReceive+0xd8>
 80051c0:	8abb      	ldrh	r3, [r7, #20]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d908      	bls.n	80051d8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	e007      	b.n	80051e8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f2:	2b40      	cmp	r3, #64	@ 0x40
 80051f4:	d007      	beq.n	8005206 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005204:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800520e:	f240 8083 	bls.w	8005318 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_SPI_TransmitReceive+0x132>
 800521a:	8afb      	ldrh	r3, [r7, #22]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d16f      	bne.n	8005300 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	881a      	ldrh	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	1c9a      	adds	r2, r3, #2
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005244:	e05c      	b.n	8005300 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b02      	cmp	r3, #2
 8005252:	d11b      	bne.n	800528c <HAL_SPI_TransmitReceive+0x19e>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <HAL_SPI_TransmitReceive+0x19e>
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	2b01      	cmp	r3, #1
 8005262:	d113      	bne.n	800528c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	881a      	ldrh	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b01      	cmp	r3, #1
 8005298:	d11c      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x1e6>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	b292      	uxth	r2, r2
 80052b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	1c9a      	adds	r2, r3, #2
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052d0:	2301      	movs	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052d4:	f7fd ff34 	bl	8003140 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d80d      	bhi.n	8005300 <HAL_SPI_TransmitReceive+0x212>
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d009      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e111      	b.n	8005524 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d19d      	bne.n	8005246 <HAL_SPI_TransmitReceive+0x158>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d197      	bne.n	8005246 <HAL_SPI_TransmitReceive+0x158>
 8005316:	e0e5      	b.n	80054e4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_SPI_TransmitReceive+0x23a>
 8005320:	8afb      	ldrh	r3, [r7, #22]
 8005322:	2b01      	cmp	r3, #1
 8005324:	f040 80d1 	bne.w	80054ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	d912      	bls.n	8005358 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b02      	subs	r3, #2
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005356:	e0b8      	b.n	80054ca <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800537e:	e0a4      	b.n	80054ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b02      	cmp	r3, #2
 800538c:	d134      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x30a>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02f      	beq.n	80053f8 <HAL_SPI_TransmitReceive+0x30a>
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	2b01      	cmp	r3, #1
 800539c:	d12c      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d912      	bls.n	80053ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	881a      	ldrh	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	1c9a      	adds	r2, r3, #2
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b02      	subs	r3, #2
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053cc:	e012      	b.n	80053f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d148      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x3aa>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d042      	beq.n	8005498 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	d923      	bls.n	8005466 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	b292      	uxth	r2, r2
 800542a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b02      	subs	r3, #2
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d81f      	bhi.n	8005494 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	e016      	b.n	8005494 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f103 020c 	add.w	r2, r3, #12
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	7812      	ldrb	r2, [r2, #0]
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005494:	2301      	movs	r3, #1
 8005496:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005498:	f7fd fe52 	bl	8003140 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d803      	bhi.n	80054b0 <HAL_SPI_TransmitReceive+0x3c2>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d102      	bne.n	80054b6 <HAL_SPI_TransmitReceive+0x3c8>
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e02c      	b.n	8005524 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f af55 	bne.w	8005380 <HAL_SPI_TransmitReceive+0x292>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f47f af4e 	bne.w	8005380 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054e4:	6a3a      	ldr	r2, [r7, #32]
 80054e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fa5d 	bl	80059a8 <SPI_EndRxTxTransaction>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e00e      	b.n	8005524 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005522:	2300      	movs	r3, #0
  }
}
 8005524:	4618      	mov	r0, r3
 8005526:	3728      	adds	r7, #40	@ 0x28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10f      	bne.n	8005570 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
    return;
 800556e:	e0d7      	b.n	8005720 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_SPI_IRQHandler+0x66>
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	09db      	lsrs	r3, r3, #7
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
    return;
 8005590:	e0c6      	b.n	8005720 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10c      	bne.n	80055b8 <HAL_SPI_IRQHandler+0x8c>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	099b      	lsrs	r3, r3, #6
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80b4 	beq.w	8005720 <HAL_SPI_IRQHandler+0x1f4>
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80ad 	beq.w	8005720 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d023      	beq.n	800561a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d011      	beq.n	8005602 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e2:	f043 0204 	orr.w	r2, r3, #4
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	e00b      	b.n	800561a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	693b      	ldr	r3, [r7, #16]
        return;
 8005618:	e082      	b.n	8005720 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d014      	beq.n	8005650 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800562a:	f043 0201 	orr.w	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00c      	beq.n	8005676 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005660:	f043 0208 	orr.w	r2, r3, #8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800567a:	2b00      	cmp	r3, #0
 800567c:	d04f      	beq.n	800571e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800568c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <HAL_SPI_IRQHandler+0x17e>
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d034      	beq.n	8005714 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0203 	bic.w	r2, r2, #3
 80056b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c6:	4a18      	ldr	r2, [pc, #96]	@ (8005728 <HAL_SPI_IRQHandler+0x1fc>)
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fd ffd4 	bl	800367c <HAL_DMA_Abort_IT>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005728 <HAL_SPI_IRQHandler+0x1fc>)
 80056f4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fd ffbe 	bl	800367c <HAL_DMA_Abort_IT>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800570a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005712:	e003      	b.n	800571c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f809 	bl	800572c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800571a:	e000      	b.n	800571e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800571c:	bf00      	nop
    return;
 800571e:	bf00      	nop
  }
}
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	08005741 	.word	0x08005741

0800572c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7ff ffe5 	bl	800572c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800577c:	f7fd fce0 	bl	8003140 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	4413      	add	r3, r2
 800578a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800578c:	f7fd fcd8 	bl	8003140 <HAL_GetTick>
 8005790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005792:	4b39      	ldr	r3, [pc, #228]	@ (8005878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	015b      	lsls	r3, r3, #5
 8005798:	0d1b      	lsrs	r3, r3, #20
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	fb02 f303 	mul.w	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057a2:	e054      	b.n	800584e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d050      	beq.n	800584e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057ac:	f7fd fcc8 	bl	8003140 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d902      	bls.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d13d      	bne.n	800583e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057da:	d111      	bne.n	8005800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e4:	d004      	beq.n	80057f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ee:	d107      	bne.n	8005800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005808:	d10f      	bne.n	800582a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e017      	b.n	800586e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	3b01      	subs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	429a      	cmp	r2, r3
 800585c:	bf0c      	ite	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	2300      	movne	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	429a      	cmp	r2, r3
 800586a:	d19b      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000000 	.word	0x20000000

0800587c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	@ 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800588e:	f7fd fc57 	bl	8003140 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	4413      	add	r3, r2
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800589e:	f7fd fc4f 	bl	8003140 <HAL_GetTick>
 80058a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058ac:	4b3d      	ldr	r3, [pc, #244]	@ (80059a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	00da      	lsls	r2, r3, #3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	0d1b      	lsrs	r3, r3, #20
 80058bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80058c4:	e060      	b.n	8005988 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80058cc:	d107      	bne.n	80058de <SPI_WaitFifoStateUntilTimeout+0x62>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d050      	beq.n	8005988 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058e6:	f7fd fc2b 	bl	8003140 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d902      	bls.n	80058fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d13d      	bne.n	8005978 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800590a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005914:	d111      	bne.n	800593a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800591e:	d004      	beq.n	800592a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005928:	d107      	bne.n	800593a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005938:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005942:	d10f      	bne.n	8005964 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005962:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e010      	b.n	800599a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	3b01      	subs	r3, #1
 8005986:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4013      	ands	r3, r2
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	429a      	cmp	r2, r3
 8005996:	d196      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3728      	adds	r7, #40	@ 0x28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000000 	.word	0x20000000

080059a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff ff5b 	bl	800587c <SPI_WaitFifoStateUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e027      	b.n	8005a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	2180      	movs	r1, #128	@ 0x80
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fec0 	bl	800576c <SPI_WaitFlagStateUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e014      	b.n	8005a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff ff34 	bl	800587c <SPI_WaitFifoStateUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e000      	b.n	8005a2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e040      	b.n	8005ac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fc fb36 	bl	80020c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2224      	movs	r2, #36	@ 0x24
 8005a60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 ffaa 	bl	80069d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fd4d 	bl	8006520 <UART_SetConfig>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e01b      	b.n	8005ac8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 f829 	bl	8006b18 <UART_CheckIdleState>
 8005ac6:	4603      	mov	r3, r0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	@ 0x28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d177      	bne.n	8005bd8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_UART_Transmit+0x24>
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e070      	b.n	8005bda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2221      	movs	r2, #33	@ 0x21
 8005b04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b06:	f7fd fb1b 	bl	8003140 <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b24:	d108      	bne.n	8005b38 <HAL_UART_Transmit+0x68>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e003      	b.n	8005b40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b40:	e02f      	b.n	8005ba2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	@ 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f001 f88b 	bl	8006c68 <UART_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e03b      	b.n	8005bda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10b      	bne.n	8005b80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b74:	b292      	uxth	r2, r2
 8005b76:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e007      	b.n	8005b90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1c9      	bne.n	8005b42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2140      	movs	r1, #64	@ 0x40
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f001 f855 	bl	8006c68 <UART_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d004      	beq.n	8005bce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e005      	b.n	8005bda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	@ 0x28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d165      	bne.n	8005cc6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_UART_Transmit_DMA+0x22>
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e05e      	b.n	8005cc8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2221      	movs	r2, #33	@ 0x21
 8005c2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d027      	beq.n	8005c86 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3a:	4a25      	ldr	r2, [pc, #148]	@ (8005cd0 <HAL_UART_Transmit_DMA+0xec>)
 8005c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c42:	4a24      	ldr	r2, [pc, #144]	@ (8005cd4 <HAL_UART_Transmit_DMA+0xf0>)
 8005c44:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4a:	4a23      	ldr	r2, [pc, #140]	@ (8005cd8 <HAL_UART_Transmit_DMA+0xf4>)
 8005c4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c52:	2200      	movs	r2, #0
 8005c54:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c5e:	4619      	mov	r1, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3328      	adds	r3, #40	@ 0x28
 8005c66:	461a      	mov	r2, r3
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	f7fd fc69 	bl	8003540 <HAL_DMA_Start_IT>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2210      	movs	r2, #16
 8005c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e020      	b.n	8005cc8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2240      	movs	r2, #64	@ 0x40
 8005c8c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3308      	adds	r3, #8
 8005c94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cae:	623a      	str	r2, [r7, #32]
 8005cb0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	69f9      	ldr	r1, [r7, #28]
 8005cb4:	6a3a      	ldr	r2, [r7, #32]
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e5      	bne.n	8005c8e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e000      	b.n	8005cc8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
  }
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3728      	adds	r7, #40	@ 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08006f99 	.word	0x08006f99
 8005cd4:	08007033 	.word	0x08007033
 8005cd8:	080071b9 	.word	0x080071b9

08005cdc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	@ 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d137      	bne.n	8005d64 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_UART_Receive_DMA+0x24>
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e030      	b.n	8005d66 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <HAL_UART_Receive_DMA+0x94>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d01f      	beq.n	8005d54 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d018      	beq.n	8005d54 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	623b      	str	r3, [r7, #32]
 8005d42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	69f9      	ldr	r1, [r7, #28]
 8005d46:	6a3a      	ldr	r2, [r7, #32]
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e6      	bne.n	8005d22 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	461a      	mov	r2, r3
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fff2 	bl	8006d44 <UART_Start_Receive_DMA>
 8005d60:	4603      	mov	r3, r0
 8005d62:	e000      	b.n	8005d66 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3728      	adds	r7, #40	@ 0x28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40008000 	.word	0x40008000

08005d74 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b090      	sub	sp, #64	@ 0x40
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d88:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	2b80      	cmp	r3, #128	@ 0x80
 8005d96:	d139      	bne.n	8005e0c <HAL_UART_DMAStop+0x98>
 8005d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9a:	2b21      	cmp	r3, #33	@ 0x21
 8005d9c:	d136      	bne.n	8005e0c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d015      	beq.n	8005e06 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fd fc0e 	bl	8003600 <HAL_DMA_Abort>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fd fd34 	bl	800385c <HAL_DMA_GetError>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d105      	bne.n	8005e06 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2210      	movs	r2, #16
 8005dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e044      	b.n	8005e90 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 f83c 	bl	8006e84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d139      	bne.n	8005e8e <HAL_UART_DMAStop+0x11a>
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	2b22      	cmp	r3, #34	@ 0x22
 8005e1e:	d136      	bne.n	8005e8e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e40:	61ba      	str	r2, [r7, #24]
 8005e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6979      	ldr	r1, [r7, #20]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e5      	bne.n	8005e20 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d015      	beq.n	8005e88 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fd fbcd 	bl	8003600 <HAL_DMA_Abort>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00d      	beq.n	8005e88 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fd fcf3 	bl	800385c <HAL_DMA_GetError>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d105      	bne.n	8005e88 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e003      	b.n	8005e90 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 f821 	bl	8006ed0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3740      	adds	r7, #64	@ 0x40
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ebe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ec2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d115      	bne.n	8005f00 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00f      	beq.n	8005f00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 82ca 	beq.w	800648a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4798      	blx	r3
      }
      return;
 8005efe:	e2c4      	b.n	800648a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 8117 	beq.w	8006138 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f1a:	4b85      	ldr	r3, [pc, #532]	@ (8006130 <HAL_UART_IRQHandler+0x298>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 810a 	beq.w	8006138 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d011      	beq.n	8005f54 <HAL_UART_IRQHandler+0xbc>
 8005f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d011      	beq.n	8005f84 <HAL_UART_IRQHandler+0xec>
 8005f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2202      	movs	r2, #2
 8005f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f7a:	f043 0204 	orr.w	r2, r3, #4
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d011      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x11c>
 8005f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005faa:	f043 0202 	orr.w	r2, r3, #2
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d017      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fd0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe6:	f043 0208 	orr.w	r2, r3, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d012      	beq.n	8006022 <HAL_UART_IRQHandler+0x18a>
 8005ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00c      	beq.n	8006022 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8230 	beq.w	800648e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00d      	beq.n	8006056 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800603a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800605c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606a:	2b40      	cmp	r3, #64	@ 0x40
 800606c:	d005      	beq.n	800607a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800606e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04f      	beq.n	800611a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 ff28 	bl	8006ed0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608a:	2b40      	cmp	r3, #64	@ 0x40
 800608c:	d141      	bne.n	8006112 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1d9      	bne.n	800608e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d013      	beq.n	800610a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060e6:	4a13      	ldr	r2, [pc, #76]	@ (8006134 <HAL_UART_IRQHandler+0x29c>)
 80060e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fd fac4 	bl	800367c <HAL_DMA_Abort_IT>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d017      	beq.n	800612a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006104:	4610      	mov	r0, r2
 8006106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	e00f      	b.n	800612a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9f2 	bl	80064f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	e00b      	b.n	800612a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9ee 	bl	80064f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	e007      	b.n	800612a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f9ea 	bl	80064f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006128:	e1b1      	b.n	800648e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612a:	bf00      	nop
    return;
 800612c:	e1af      	b.n	800648e <HAL_UART_IRQHandler+0x5f6>
 800612e:	bf00      	nop
 8006130:	04000120 	.word	0x04000120
 8006134:	08007237 	.word	0x08007237

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800613c:	2b01      	cmp	r3, #1
 800613e:	f040 816a 	bne.w	8006416 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 8163 	beq.w	8006416 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 815c 	beq.w	8006416 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2210      	movs	r2, #16
 8006164:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006170:	2b40      	cmp	r3, #64	@ 0x40
 8006172:	f040 80d4 	bne.w	800631e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006182:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80ad 	beq.w	80062e6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006196:	429a      	cmp	r2, r3
 8006198:	f080 80a5 	bcs.w	80062e6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f040 8086 	bne.w	80062c4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1da      	bne.n	80061b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006212:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006226:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800622a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800622e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e1      	bne.n	8006202 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800624e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3308      	adds	r3, #8
 800625e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006262:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006264:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006268:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e3      	bne.n	800623e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006294:	f023 0310 	bic.w	r3, r3, #16
 8006298:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e4      	bne.n	8006284 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fd f99e 	bl	8003600 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f912 	bl	8006508 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80062e4:	e0d5      	b.n	8006492 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062f0:	429a      	cmp	r2, r3
 80062f2:	f040 80ce 	bne.w	8006492 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b20      	cmp	r3, #32
 8006304:	f040 80c5 	bne.w	8006492 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f8f6 	bl	8006508 <HAL_UARTEx_RxEventCallback>
      return;
 800631c:	e0b9      	b.n	8006492 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800632a:	b29b      	uxth	r3, r3
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 80ab 	beq.w	8006496 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80a6 	beq.w	8006496 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800635e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800636c:	647b      	str	r3, [r7, #68]	@ 0x44
 800636e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800637a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e4      	bne.n	800634a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3308      	adds	r3, #8
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	623b      	str	r3, [r7, #32]
   return(result);
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3308      	adds	r3, #8
 80063a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80063a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e3      	bne.n	8006380 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f023 0310 	bic.w	r3, r3, #16
 80063e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	617b      	str	r3, [r7, #20]
   return(result);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e4      	bne.n	80063cc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f87a 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006414:	e03f      	b.n	8006496 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800641a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <HAL_UART_IRQHandler+0x5a8>
 8006422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006436:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 ff3c 	bl	80072b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800643e:	e02d      	b.n	800649c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01c      	beq.n	800649a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
    }
    return;
 8006468:	e017      	b.n	800649a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800646a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d012      	beq.n	800649c <HAL_UART_IRQHandler+0x604>
 8006476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 feed 	bl	8007262 <UART_EndTransmit_IT>
    return;
 8006488:	e008      	b.n	800649c <HAL_UART_IRQHandler+0x604>
      return;
 800648a:	bf00      	nop
 800648c:	e006      	b.n	800649c <HAL_UART_IRQHandler+0x604>
    return;
 800648e:	bf00      	nop
 8006490:	e004      	b.n	800649c <HAL_UART_IRQHandler+0x604>
      return;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <HAL_UART_IRQHandler+0x604>
      return;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <HAL_UART_IRQHandler+0x604>
    return;
 800649a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800649c:	37e8      	adds	r7, #232	@ 0xe8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop

080064a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006524:	b08a      	sub	sp, #40	@ 0x28
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	431a      	orrs	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	431a      	orrs	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	4313      	orrs	r3, r2
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b9e      	ldr	r3, [pc, #632]	@ (80067c8 <UART_SetConfig+0x2a8>)
 8006550:	4013      	ands	r3, r2
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006558:	430b      	orrs	r3, r1
 800655a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a93      	ldr	r2, [pc, #588]	@ (80067cc <UART_SetConfig+0x2ac>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006588:	4313      	orrs	r3, r2
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659c:	430a      	orrs	r2, r1
 800659e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a8a      	ldr	r2, [pc, #552]	@ (80067d0 <UART_SetConfig+0x2b0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d126      	bne.n	80065f8 <UART_SetConfig+0xd8>
 80065aa:	4b8a      	ldr	r3, [pc, #552]	@ (80067d4 <UART_SetConfig+0x2b4>)
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d81b      	bhi.n	80065f0 <UART_SetConfig+0xd0>
 80065b8:	a201      	add	r2, pc, #4	@ (adr r2, 80065c0 <UART_SetConfig+0xa0>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065e1 	.word	0x080065e1
 80065c8:	080065d9 	.word	0x080065d9
 80065cc:	080065e9 	.word	0x080065e9
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d6:	e0ab      	b.n	8006730 <UART_SetConfig+0x210>
 80065d8:	2302      	movs	r3, #2
 80065da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065de:	e0a7      	b.n	8006730 <UART_SetConfig+0x210>
 80065e0:	2304      	movs	r3, #4
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e6:	e0a3      	b.n	8006730 <UART_SetConfig+0x210>
 80065e8:	2308      	movs	r3, #8
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ee:	e09f      	b.n	8006730 <UART_SetConfig+0x210>
 80065f0:	2310      	movs	r3, #16
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f6:	e09b      	b.n	8006730 <UART_SetConfig+0x210>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a76      	ldr	r2, [pc, #472]	@ (80067d8 <UART_SetConfig+0x2b8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d138      	bne.n	8006674 <UART_SetConfig+0x154>
 8006602:	4b74      	ldr	r3, [pc, #464]	@ (80067d4 <UART_SetConfig+0x2b4>)
 8006604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006608:	f003 030c 	and.w	r3, r3, #12
 800660c:	2b0c      	cmp	r3, #12
 800660e:	d82d      	bhi.n	800666c <UART_SetConfig+0x14c>
 8006610:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <UART_SetConfig+0xf8>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	0800664d 	.word	0x0800664d
 800661c:	0800666d 	.word	0x0800666d
 8006620:	0800666d 	.word	0x0800666d
 8006624:	0800666d 	.word	0x0800666d
 8006628:	0800665d 	.word	0x0800665d
 800662c:	0800666d 	.word	0x0800666d
 8006630:	0800666d 	.word	0x0800666d
 8006634:	0800666d 	.word	0x0800666d
 8006638:	08006655 	.word	0x08006655
 800663c:	0800666d 	.word	0x0800666d
 8006640:	0800666d 	.word	0x0800666d
 8006644:	0800666d 	.word	0x0800666d
 8006648:	08006665 	.word	0x08006665
 800664c:	2300      	movs	r3, #0
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006652:	e06d      	b.n	8006730 <UART_SetConfig+0x210>
 8006654:	2302      	movs	r3, #2
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665a:	e069      	b.n	8006730 <UART_SetConfig+0x210>
 800665c:	2304      	movs	r3, #4
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e065      	b.n	8006730 <UART_SetConfig+0x210>
 8006664:	2308      	movs	r3, #8
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e061      	b.n	8006730 <UART_SetConfig+0x210>
 800666c:	2310      	movs	r3, #16
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006672:	e05d      	b.n	8006730 <UART_SetConfig+0x210>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a58      	ldr	r2, [pc, #352]	@ (80067dc <UART_SetConfig+0x2bc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d125      	bne.n	80066ca <UART_SetConfig+0x1aa>
 800667e:	4b55      	ldr	r3, [pc, #340]	@ (80067d4 <UART_SetConfig+0x2b4>)
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006684:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006688:	2b30      	cmp	r3, #48	@ 0x30
 800668a:	d016      	beq.n	80066ba <UART_SetConfig+0x19a>
 800668c:	2b30      	cmp	r3, #48	@ 0x30
 800668e:	d818      	bhi.n	80066c2 <UART_SetConfig+0x1a2>
 8006690:	2b20      	cmp	r3, #32
 8006692:	d00a      	beq.n	80066aa <UART_SetConfig+0x18a>
 8006694:	2b20      	cmp	r3, #32
 8006696:	d814      	bhi.n	80066c2 <UART_SetConfig+0x1a2>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <UART_SetConfig+0x182>
 800669c:	2b10      	cmp	r3, #16
 800669e:	d008      	beq.n	80066b2 <UART_SetConfig+0x192>
 80066a0:	e00f      	b.n	80066c2 <UART_SetConfig+0x1a2>
 80066a2:	2300      	movs	r3, #0
 80066a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a8:	e042      	b.n	8006730 <UART_SetConfig+0x210>
 80066aa:	2302      	movs	r3, #2
 80066ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b0:	e03e      	b.n	8006730 <UART_SetConfig+0x210>
 80066b2:	2304      	movs	r3, #4
 80066b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b8:	e03a      	b.n	8006730 <UART_SetConfig+0x210>
 80066ba:	2308      	movs	r3, #8
 80066bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c0:	e036      	b.n	8006730 <UART_SetConfig+0x210>
 80066c2:	2310      	movs	r3, #16
 80066c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c8:	e032      	b.n	8006730 <UART_SetConfig+0x210>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a3f      	ldr	r2, [pc, #252]	@ (80067cc <UART_SetConfig+0x2ac>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d12a      	bne.n	800672a <UART_SetConfig+0x20a>
 80066d4:	4b3f      	ldr	r3, [pc, #252]	@ (80067d4 <UART_SetConfig+0x2b4>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e2:	d01a      	beq.n	800671a <UART_SetConfig+0x1fa>
 80066e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e8:	d81b      	bhi.n	8006722 <UART_SetConfig+0x202>
 80066ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ee:	d00c      	beq.n	800670a <UART_SetConfig+0x1ea>
 80066f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f4:	d815      	bhi.n	8006722 <UART_SetConfig+0x202>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <UART_SetConfig+0x1e2>
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fe:	d008      	beq.n	8006712 <UART_SetConfig+0x1f2>
 8006700:	e00f      	b.n	8006722 <UART_SetConfig+0x202>
 8006702:	2300      	movs	r3, #0
 8006704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006708:	e012      	b.n	8006730 <UART_SetConfig+0x210>
 800670a:	2302      	movs	r3, #2
 800670c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006710:	e00e      	b.n	8006730 <UART_SetConfig+0x210>
 8006712:	2304      	movs	r3, #4
 8006714:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006718:	e00a      	b.n	8006730 <UART_SetConfig+0x210>
 800671a:	2308      	movs	r3, #8
 800671c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006720:	e006      	b.n	8006730 <UART_SetConfig+0x210>
 8006722:	2310      	movs	r3, #16
 8006724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006728:	e002      	b.n	8006730 <UART_SetConfig+0x210>
 800672a:	2310      	movs	r3, #16
 800672c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a25      	ldr	r2, [pc, #148]	@ (80067cc <UART_SetConfig+0x2ac>)
 8006736:	4293      	cmp	r3, r2
 8006738:	f040 808a 	bne.w	8006850 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800673c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006740:	2b08      	cmp	r3, #8
 8006742:	d824      	bhi.n	800678e <UART_SetConfig+0x26e>
 8006744:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <UART_SetConfig+0x22c>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	08006771 	.word	0x08006771
 8006750:	0800678f 	.word	0x0800678f
 8006754:	08006779 	.word	0x08006779
 8006758:	0800678f 	.word	0x0800678f
 800675c:	0800677f 	.word	0x0800677f
 8006760:	0800678f 	.word	0x0800678f
 8006764:	0800678f 	.word	0x0800678f
 8006768:	0800678f 	.word	0x0800678f
 800676c:	08006787 	.word	0x08006787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006770:	f7fe f852 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 8006774:	61f8      	str	r0, [r7, #28]
        break;
 8006776:	e010      	b.n	800679a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006778:	4b19      	ldr	r3, [pc, #100]	@ (80067e0 <UART_SetConfig+0x2c0>)
 800677a:	61fb      	str	r3, [r7, #28]
        break;
 800677c:	e00d      	b.n	800679a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677e:	f7fd ffb3 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 8006782:	61f8      	str	r0, [r7, #28]
        break;
 8006784:	e009      	b.n	800679a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800678a:	61fb      	str	r3, [r7, #28]
        break;
 800678c:	e005      	b.n	800679a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8109 	beq.w	80069b4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4413      	add	r3, r2
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d305      	bcc.n	80067be <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d912      	bls.n	80067e4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067c4:	e0f6      	b.n	80069b4 <UART_SetConfig+0x494>
 80067c6:	bf00      	nop
 80067c8:	efff69f3 	.word	0xefff69f3
 80067cc:	40008000 	.word	0x40008000
 80067d0:	40013800 	.word	0x40013800
 80067d4:	40021000 	.word	0x40021000
 80067d8:	40004400 	.word	0x40004400
 80067dc:	40004800 	.word	0x40004800
 80067e0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	2200      	movs	r2, #0
 80067e8:	461c      	mov	r4, r3
 80067ea:	4615      	mov	r5, r2
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	022b      	lsls	r3, r5, #8
 80067f6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067fa:	0222      	lsls	r2, r4, #8
 80067fc:	68f9      	ldr	r1, [r7, #12]
 80067fe:	6849      	ldr	r1, [r1, #4]
 8006800:	0849      	lsrs	r1, r1, #1
 8006802:	2000      	movs	r0, #0
 8006804:	4688      	mov	r8, r1
 8006806:	4681      	mov	r9, r0
 8006808:	eb12 0a08 	adds.w	sl, r2, r8
 800680c:	eb43 0b09 	adc.w	fp, r3, r9
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800681e:	4650      	mov	r0, sl
 8006820:	4659      	mov	r1, fp
 8006822:	f7fa fa31 	bl	8000c88 <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4613      	mov	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006834:	d308      	bcc.n	8006848 <UART_SetConfig+0x328>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800683c:	d204      	bcs.n	8006848 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	e0b5      	b.n	80069b4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800684e:	e0b1      	b.n	80069b4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006858:	d15d      	bne.n	8006916 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800685a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800685e:	2b08      	cmp	r3, #8
 8006860:	d827      	bhi.n	80068b2 <UART_SetConfig+0x392>
 8006862:	a201      	add	r2, pc, #4	@ (adr r2, 8006868 <UART_SetConfig+0x348>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	0800688d 	.word	0x0800688d
 800686c:	08006895 	.word	0x08006895
 8006870:	0800689d 	.word	0x0800689d
 8006874:	080068b3 	.word	0x080068b3
 8006878:	080068a3 	.word	0x080068a3
 800687c:	080068b3 	.word	0x080068b3
 8006880:	080068b3 	.word	0x080068b3
 8006884:	080068b3 	.word	0x080068b3
 8006888:	080068ab 	.word	0x080068ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800688c:	f7fd ffc4 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 8006890:	61f8      	str	r0, [r7, #28]
        break;
 8006892:	e014      	b.n	80068be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006894:	f7fd ffd6 	bl	8004844 <HAL_RCC_GetPCLK2Freq>
 8006898:	61f8      	str	r0, [r7, #28]
        break;
 800689a:	e010      	b.n	80068be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800689c:	4b4c      	ldr	r3, [pc, #304]	@ (80069d0 <UART_SetConfig+0x4b0>)
 800689e:	61fb      	str	r3, [r7, #28]
        break;
 80068a0:	e00d      	b.n	80068be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a2:	f7fd ff21 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80068a6:	61f8      	str	r0, [r7, #28]
        break;
 80068a8:	e009      	b.n	80068be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ae:	61fb      	str	r3, [r7, #28]
        break;
 80068b0:	e005      	b.n	80068be <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d077      	beq.n	80069b4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	005a      	lsls	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	085b      	lsrs	r3, r3, #1
 80068ce:	441a      	add	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b0f      	cmp	r3, #15
 80068de:	d916      	bls.n	800690e <UART_SetConfig+0x3ee>
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e6:	d212      	bcs.n	800690e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f023 030f 	bic.w	r3, r3, #15
 80068f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	8afb      	ldrh	r3, [r7, #22]
 8006900:	4313      	orrs	r3, r2
 8006902:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	8afa      	ldrh	r2, [r7, #22]
 800690a:	60da      	str	r2, [r3, #12]
 800690c:	e052      	b.n	80069b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006914:	e04e      	b.n	80069b4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006916:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800691a:	2b08      	cmp	r3, #8
 800691c:	d827      	bhi.n	800696e <UART_SetConfig+0x44e>
 800691e:	a201      	add	r2, pc, #4	@ (adr r2, 8006924 <UART_SetConfig+0x404>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006949 	.word	0x08006949
 8006928:	08006951 	.word	0x08006951
 800692c:	08006959 	.word	0x08006959
 8006930:	0800696f 	.word	0x0800696f
 8006934:	0800695f 	.word	0x0800695f
 8006938:	0800696f 	.word	0x0800696f
 800693c:	0800696f 	.word	0x0800696f
 8006940:	0800696f 	.word	0x0800696f
 8006944:	08006967 	.word	0x08006967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006948:	f7fd ff66 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 800694c:	61f8      	str	r0, [r7, #28]
        break;
 800694e:	e014      	b.n	800697a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006950:	f7fd ff78 	bl	8004844 <HAL_RCC_GetPCLK2Freq>
 8006954:	61f8      	str	r0, [r7, #28]
        break;
 8006956:	e010      	b.n	800697a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006958:	4b1d      	ldr	r3, [pc, #116]	@ (80069d0 <UART_SetConfig+0x4b0>)
 800695a:	61fb      	str	r3, [r7, #28]
        break;
 800695c:	e00d      	b.n	800697a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800695e:	f7fd fec3 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 8006962:	61f8      	str	r0, [r7, #28]
        break;
 8006964:	e009      	b.n	800697a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696a:	61fb      	str	r3, [r7, #28]
        break;
 800696c:	e005      	b.n	800697a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006978:	bf00      	nop
    }

    if (pclk != 0U)
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d019      	beq.n	80069b4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	085a      	lsrs	r2, r3, #1
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	441a      	add	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006992:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	2b0f      	cmp	r3, #15
 8006998:	d909      	bls.n	80069ae <UART_SetConfig+0x48e>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a0:	d205      	bcs.n	80069ae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60da      	str	r2, [r3, #12]
 80069ac:	e002      	b.n	80069b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3728      	adds	r7, #40	@ 0x28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ce:	bf00      	nop
 80069d0:	00f42400 	.word	0x00f42400

080069d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01a      	beq.n	8006aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ad2:	d10a      	bne.n	8006aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b098      	sub	sp, #96	@ 0x60
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b28:	f7fc fb0a 	bl	8003140 <HAL_GetTick>
 8006b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d12e      	bne.n	8006b9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b44:	2200      	movs	r2, #0
 8006b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f88c 	bl	8006c68 <UART_WaitOnFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d021      	beq.n	8006b9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e6      	bne.n	8006b56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e062      	b.n	8006c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d149      	bne.n	8006c3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f856 	bl	8006c68 <UART_WaitOnFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d03c      	beq.n	8006c3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e6      	bne.n	8006bc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0301 	bic.w	r3, r3, #1
 8006c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c14:	61fa      	str	r2, [r7, #28]
 8006c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	69b9      	ldr	r1, [r7, #24]
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	617b      	str	r3, [r7, #20]
   return(result);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e5      	bne.n	8006bf4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e011      	b.n	8006c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3758      	adds	r7, #88	@ 0x58
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	4613      	mov	r3, r2
 8006c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c78:	e04f      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c80:	d04b      	beq.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c82:	f7fc fa5d 	bl	8003140 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d302      	bcc.n	8006c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e04e      	b.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d037      	beq.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b80      	cmp	r3, #128	@ 0x80
 8006cae:	d034      	beq.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b40      	cmp	r3, #64	@ 0x40
 8006cb4:	d031      	beq.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d110      	bne.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f8ff 	bl	8006ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e029      	b.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf4:	d111      	bne.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f8e5 	bl	8006ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e00f      	b.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4013      	ands	r3, r2
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	bf0c      	ite	eq
 8006d2a:	2301      	moveq	r3, #1
 8006d2c:	2300      	movne	r3, #0
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d0a0      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b096      	sub	sp, #88	@ 0x58
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	88fa      	ldrh	r2, [r7, #6]
 8006d5c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2222      	movs	r2, #34	@ 0x22
 8006d6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d028      	beq.n	8006dca <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e78 <UART_Start_Receive_DMA+0x134>)
 8006d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d84:	4a3d      	ldr	r2, [pc, #244]	@ (8006e7c <UART_Start_Receive_DMA+0x138>)
 8006d86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e80 <UART_Start_Receive_DMA+0x13c>)
 8006d8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d94:	2200      	movs	r2, #0
 8006d96:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3324      	adds	r3, #36	@ 0x24
 8006da2:	4619      	mov	r1, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da8:	461a      	mov	r2, r3
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	f7fc fbc8 	bl	8003540 <HAL_DMA_Start_IT>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2210      	movs	r2, #16
 8006dba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e051      	b.n	8006e6e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d018      	beq.n	8006e04 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006de6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006df2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006df6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e24:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e26:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	613b      	str	r3, [r7, #16]
   return(result);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3308      	adds	r3, #8
 8006e56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e58:	623a      	str	r2, [r7, #32]
 8006e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e5      	bne.n	8006e38 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3758      	adds	r7, #88	@ 0x58
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	0800704f 	.word	0x0800704f
 8006e7c:	0800717b 	.word	0x0800717b
 8006e80:	080071b9 	.word	0x080071b9

08006e84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b089      	sub	sp, #36	@ 0x24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6979      	ldr	r1, [r7, #20]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e6      	bne.n	8006e8c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006ec4:	bf00      	nop
 8006ec6:	3724      	adds	r7, #36	@ 0x24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b095      	sub	sp, #84	@ 0x54
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ef8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006efc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e6      	bne.n	8006ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d118      	bne.n	8006f78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f023 0310 	bic.w	r3, r3, #16
 8006f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6979      	ldr	r1, [r7, #20]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	613b      	str	r3, [r7, #16]
   return(result);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f8c:	bf00      	nop
 8006f8e:	3754      	adds	r7, #84	@ 0x54
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b090      	sub	sp, #64	@ 0x40
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d137      	bne.n	8007024 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	623b      	str	r3, [r7, #32]
   return(result);
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e5      	bne.n	8006fbc <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
 8007006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	69b9      	ldr	r1, [r7, #24]
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	617b      	str	r3, [r7, #20]
   return(result);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e6      	bne.n	8006ff0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007022:	e002      	b.n	800702a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007024:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007026:	f7ff fa3d 	bl	80064a4 <HAL_UART_TxCpltCallback>
}
 800702a:	bf00      	nop
 800702c:	3740      	adds	r7, #64	@ 0x40
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7ff fa39 	bl	80064b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b09c      	sub	sp, #112	@ 0x70
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d171      	bne.n	800714e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800706a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706c:	2200      	movs	r2, #0
 800706e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007082:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007086:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007090:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007092:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007096:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800709e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e6      	bne.n	8007072 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3308      	adds	r3, #8
 80070aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80070bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3308      	adds	r3, #8
 80070c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80070c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80070c6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e5      	bne.n	80070a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3308      	adds	r3, #8
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	623b      	str	r3, [r7, #32]
   return(result);
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80070f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3308      	adds	r3, #8
 80070f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80070fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e5      	bne.n	80070d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800710c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800710e:	2220      	movs	r2, #32
 8007110:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007118:	2b01      	cmp	r3, #1
 800711a:	d118      	bne.n	800714e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	60fb      	str	r3, [r7, #12]
   return(result);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f023 0310 	bic.w	r3, r3, #16
 8007130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800713a:	61fb      	str	r3, [r7, #28]
 800713c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	69b9      	ldr	r1, [r7, #24]
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	617b      	str	r3, [r7, #20]
   return(result);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e6      	bne.n	800711c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800714e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007150:	2200      	movs	r2, #0
 8007152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007158:	2b01      	cmp	r3, #1
 800715a:	d107      	bne.n	800716c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800715c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800715e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007162:	4619      	mov	r1, r3
 8007164:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007166:	f7ff f9cf 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800716a:	e002      	b.n	8007172 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800716c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800716e:	f7ff f9ad 	bl	80064cc <HAL_UART_RxCpltCallback>
}
 8007172:	bf00      	nop
 8007174:	3770      	adds	r7, #112	@ 0x70
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007186:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007192:	2b01      	cmp	r3, #1
 8007194:	d109      	bne.n	80071aa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800719c:	085b      	lsrs	r3, r3, #1
 800719e:	b29b      	uxth	r3, r3
 80071a0:	4619      	mov	r1, r3
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f7ff f9b0 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071a8:	e002      	b.n	80071b0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff f998 	bl	80064e0 <HAL_UART_RxHalfCpltCallback>
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071de:	2b80      	cmp	r3, #128	@ 0x80
 80071e0:	d109      	bne.n	80071f6 <UART_DMAError+0x3e>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b21      	cmp	r3, #33	@ 0x21
 80071e6:	d106      	bne.n	80071f6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80071f0:	6978      	ldr	r0, [r7, #20]
 80071f2:	f7ff fe47 	bl	8006e84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007200:	2b40      	cmp	r3, #64	@ 0x40
 8007202:	d109      	bne.n	8007218 <UART_DMAError+0x60>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b22      	cmp	r3, #34	@ 0x22
 8007208:	d106      	bne.n	8007218 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2200      	movs	r2, #0
 800720e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	f7ff fe5c 	bl	8006ed0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800721e:	f043 0210 	orr.w	r2, r3, #16
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007228:	6978      	ldr	r0, [r7, #20]
 800722a:	f7ff f963 	bl	80064f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007242:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff f94d 	bl	80064f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b088      	sub	sp, #32
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	60bb      	str	r3, [r7, #8]
   return(result);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	613b      	str	r3, [r7, #16]
   return(result);
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e6      	bne.n	800726a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2220      	movs	r2, #32
 80072a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff f8fb 	bl	80064a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ae:	bf00      	nop
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80072d0:	4904      	ldr	r1, [pc, #16]	@ (80072e4 <MX_FATFS_Init+0x18>)
 80072d2:	4805      	ldr	r0, [pc, #20]	@ (80072e8 <MX_FATFS_Init+0x1c>)
 80072d4:	f000 f928 	bl	8007528 <FATFS_LinkDriver>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	4b03      	ldr	r3, [pc, #12]	@ (80072ec <MX_FATFS_Init+0x20>)
 80072de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80072e0:	bf00      	nop
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000770 	.word	0x20000770
 80072e8:	2000002c 	.word	0x2000002c
 80072ec:	2000076c 	.word	0x2000076c

080072f0 <USER_initialize>:
};

DSTATUS USER_initialize (
	BYTE pdrv
)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
	res = SD_Init();
 80072fa:	f7fa f8a3 	bl	8001444 <SD_Init>
 80072fe:	4603      	mov	r3, r0
 8007300:	73fb      	strb	r3, [r7, #15]
	if(res)
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <USER_initialize+0x2a>
	{
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8007308:	4b09      	ldr	r3, [pc, #36]	@ (8007330 <USER_initialize+0x40>)
 800730a:	2238      	movs	r2, #56	@ 0x38
 800730c:	61da      	str	r2, [r3, #28]
		SPI_TransmitReceive(0xFF);
 800730e:	20ff      	movs	r0, #255	@ 0xff
 8007310:	f7fa f818 	bl	8001344 <SPI_TransmitReceive>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <USER_initialize+0x40>)
 8007316:	2200      	movs	r2, #0
 8007318:	61da      	str	r2, [r3, #28]
	}
	if(res)
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <USER_initialize+0x34>
		return  STA_NOINIT;
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <USER_initialize+0x36>
	else
		return RES_OK;
 8007324:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000490 	.word	0x20000490

08007334 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv
)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
	switch (pdrv)
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <USER_status+0x16>
 8007344:	2b01      	cmp	r3, #1
 8007346:	d002      	beq.n	800734e <USER_status+0x1a>
 8007348:	e003      	b.n	8007352 <USER_status+0x1e>
	{
		case 0 :
			return RES_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e002      	b.n	8007354 <USER_status+0x20>
		case 1 :
			return RES_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	e000      	b.n	8007354 <USER_status+0x20>
		default:
			return STA_NOINIT;
 8007352:	2301      	movs	r3, #1
	}
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USER_read>:
	BYTE pdrv,
	BYTE *buff,
	DWORD sector,
	UINT count
)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
	uint8_t res;
  if(count == 0)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <USER_read+0x1a>
	  return RES_PARERR;
 8007376:	2304      	movs	r3, #4
 8007378:	e013      	b.n	80073a2 <USER_read+0x42>
  switch (pdrv)
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10f      	bne.n	80073a0 <USER_read+0x40>
  	{
	case 0:
	{
		res=SD_ReadDisk(buff,sector,count);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	68b8      	ldr	r0, [r7, #8]
 800738a:	f7fa f9c5 	bl	8001718 <SD_ReadDisk>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]
		if(res == 0)
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <USER_read+0x3c>
			return RES_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	e002      	b.n	80073a2 <USER_read+0x42>
		else
			return RES_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <USER_read+0x42>
	}
	default:
		return RES_ERROR;
 80073a0:	2301      	movs	r3, #1
  	}
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USER_write>:
	BYTE pdrv,
	const BYTE *buff,
	DWORD sector,
	UINT count
)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b086      	sub	sp, #24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]
	uint8_t  res;
	if( !count )
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <USER_write+0x1a>
	{
		return RES_PARERR;
 80073c0:	2304      	movs	r3, #4
 80073c2:	e013      	b.n	80073ec <USER_write+0x42>
	}
	switch (pdrv)
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10f      	bne.n	80073ea <USER_write+0x40>
	{
		case 0:
			res=SD_WriteDisk((uint8_t *)buff,sector,count);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	68b8      	ldr	r0, [r7, #8]
 80073d4:	f7fa f9f8 	bl	80017c8 <SD_WriteDisk>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
				if(res == 0)
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <USER_write+0x3c>
					return RES_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	e002      	b.n	80073ec <USER_write+0x42>
				else
					return RES_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <USER_write+0x42>
		default:return RES_ERROR;
 80073ea:	2301      	movs	r3, #1
	}
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,
	BYTE cmd,
	void *buff
)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	603a      	str	r2, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
 8007400:	460b      	mov	r3, r1
 8007402:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
		 switch(cmd)
 8007404:	79bb      	ldrb	r3, [r7, #6]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d837      	bhi.n	800747a <USER_ioctl+0x86>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <USER_ioctl+0x1c>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007421 	.word	0x08007421
 8007414:	0800746b 	.word	0x0800746b
 8007418:	08007451 	.word	0x08007451
 800741c:	0800745f 	.word	0x0800745f
		    {
			    case CTRL_SYNC:
					SD_CS_LOW();
 8007420:	2200      	movs	r2, #0
 8007422:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007426:	4819      	ldr	r0, [pc, #100]	@ (800748c <USER_ioctl+0x98>)
 8007428:	f7fc fbce 	bl	8003bc8 <HAL_GPIO_WritePin>
					do{
						HAL_Delay(20);
 800742c:	2014      	movs	r0, #20
 800742e:	f7fb fe93 	bl	8003158 <HAL_Delay>
					}while(SPI_TransmitReceive(0xFF)!=0xFF);
 8007432:	20ff      	movs	r0, #255	@ 0xff
 8007434:	f7f9 ff86 	bl	8001344 <SPI_TransmitReceive>
 8007438:	4603      	mov	r3, r0
 800743a:	2bff      	cmp	r3, #255	@ 0xff
 800743c:	d1f6      	bne.n	800742c <USER_ioctl+0x38>
					res=RES_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
					SD_CS_HIGH();
 8007442:	2201      	movs	r2, #1
 8007444:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007448:	4810      	ldr	r0, [pc, #64]	@ (800748c <USER_ioctl+0x98>)
 800744a:	f7fc fbbd 	bl	8003bc8 <HAL_GPIO_WritePin>
			        break;
 800744e:	e017      	b.n	8007480 <USER_ioctl+0x8c>
			    case GET_SECTOR_SIZE:
			        *(WORD*)buff = 512;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007456:	801a      	strh	r2, [r3, #0]
			        res = RES_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
			        break;
 800745c:	e010      	b.n	8007480 <USER_ioctl+0x8c>
			    case GET_BLOCK_SIZE:
			        *(WORD*)buff = 8;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2208      	movs	r2, #8
 8007462:	801a      	strh	r2, [r3, #0]
			        res = RES_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]
			        break;
 8007468:	e00a      	b.n	8007480 <USER_ioctl+0x8c>
			    case GET_SECTOR_COUNT:
			        *(DWORD*)buff = SD_GetSectorCount();
 800746a:	f7fa fa41 	bl	80018f0 <SD_GetSectorCount>
 800746e:	4602      	mov	r2, r0
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	601a      	str	r2, [r3, #0]
			        res = RES_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
			        break;
 8007478:	e002      	b.n	8007480 <USER_ioctl+0x8c>
			    default:
			        res = RES_PARERR;
 800747a:	2304      	movs	r3, #4
 800747c:	73fb      	strb	r3, [r7, #15]
			        break;
 800747e:	bf00      	nop
		    }
			return res;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	48000400 	.word	0x48000400

08007490 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800749e:	2301      	movs	r3, #1
 80074a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80074a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074a8:	7a5b      	ldrb	r3, [r3, #9]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d131      	bne.n	8007514 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80074b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074b2:	7a5b      	ldrb	r3, [r3, #9]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	461a      	mov	r2, r3
 80074b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074ba:	2100      	movs	r1, #0
 80074bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80074be:	4b19      	ldr	r3, [pc, #100]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074c0:	7a5b      	ldrb	r3, [r3, #9]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	4a17      	ldr	r2, [pc, #92]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80074ce:	4b15      	ldr	r3, [pc, #84]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074d0:	7a5b      	ldrb	r3, [r3, #9]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	4b13      	ldr	r3, [pc, #76]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074d8:	4413      	add	r3, r2
 80074da:	79fa      	ldrb	r2, [r7, #7]
 80074dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80074de:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074e0:	7a5b      	ldrb	r3, [r3, #9]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	b2d1      	uxtb	r1, r2
 80074e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007524 <FATFS_LinkDriverEx+0x94>)
 80074ea:	7251      	strb	r1, [r2, #9]
 80074ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80074ee:	7dbb      	ldrb	r3, [r7, #22]
 80074f0:	3330      	adds	r3, #48	@ 0x30
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3301      	adds	r3, #1
 80074fc:	223a      	movs	r2, #58	@ 0x3a
 80074fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	3302      	adds	r3, #2
 8007504:	222f      	movs	r2, #47	@ 0x2f
 8007506:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	3303      	adds	r3, #3
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
}
 8007516:	4618      	mov	r0, r3
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20000774 	.word	0x20000774

08007528 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007532:	2200      	movs	r2, #0
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff ffaa 	bl	8007490 <FATFS_LinkDriverEx>
 800753c:	4603      	mov	r3, r0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <malloc>:
 8007548:	4b02      	ldr	r3, [pc, #8]	@ (8007554 <malloc+0xc>)
 800754a:	4601      	mov	r1, r0
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	f000 b82d 	b.w	80075ac <_malloc_r>
 8007552:	bf00      	nop
 8007554:	2000004c 	.word	0x2000004c

08007558 <free>:
 8007558:	4b02      	ldr	r3, [pc, #8]	@ (8007564 <free+0xc>)
 800755a:	4601      	mov	r1, r0
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	f002 b8bb 	b.w	80096d8 <_free_r>
 8007562:	bf00      	nop
 8007564:	2000004c 	.word	0x2000004c

08007568 <sbrk_aligned>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4e0f      	ldr	r6, [pc, #60]	@ (80075a8 <sbrk_aligned+0x40>)
 800756c:	460c      	mov	r4, r1
 800756e:	6831      	ldr	r1, [r6, #0]
 8007570:	4605      	mov	r5, r0
 8007572:	b911      	cbnz	r1, 800757a <sbrk_aligned+0x12>
 8007574:	f001 f9f2 	bl	800895c <_sbrk_r>
 8007578:	6030      	str	r0, [r6, #0]
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f001 f9ed 	bl	800895c <_sbrk_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d103      	bne.n	800758e <sbrk_aligned+0x26>
 8007586:	f04f 34ff 	mov.w	r4, #4294967295
 800758a:	4620      	mov	r0, r4
 800758c:	bd70      	pop	{r4, r5, r6, pc}
 800758e:	1cc4      	adds	r4, r0, #3
 8007590:	f024 0403 	bic.w	r4, r4, #3
 8007594:	42a0      	cmp	r0, r4
 8007596:	d0f8      	beq.n	800758a <sbrk_aligned+0x22>
 8007598:	1a21      	subs	r1, r4, r0
 800759a:	4628      	mov	r0, r5
 800759c:	f001 f9de 	bl	800895c <_sbrk_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d1f2      	bne.n	800758a <sbrk_aligned+0x22>
 80075a4:	e7ef      	b.n	8007586 <sbrk_aligned+0x1e>
 80075a6:	bf00      	nop
 80075a8:	20000780 	.word	0x20000780

080075ac <_malloc_r>:
 80075ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b0:	1ccd      	adds	r5, r1, #3
 80075b2:	f025 0503 	bic.w	r5, r5, #3
 80075b6:	3508      	adds	r5, #8
 80075b8:	2d0c      	cmp	r5, #12
 80075ba:	bf38      	it	cc
 80075bc:	250c      	movcc	r5, #12
 80075be:	2d00      	cmp	r5, #0
 80075c0:	4606      	mov	r6, r0
 80075c2:	db01      	blt.n	80075c8 <_malloc_r+0x1c>
 80075c4:	42a9      	cmp	r1, r5
 80075c6:	d904      	bls.n	80075d2 <_malloc_r+0x26>
 80075c8:	230c      	movs	r3, #12
 80075ca:	6033      	str	r3, [r6, #0]
 80075cc:	2000      	movs	r0, #0
 80075ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076a8 <_malloc_r+0xfc>
 80075d6:	f000 f869 	bl	80076ac <__malloc_lock>
 80075da:	f8d8 3000 	ldr.w	r3, [r8]
 80075de:	461c      	mov	r4, r3
 80075e0:	bb44      	cbnz	r4, 8007634 <_malloc_r+0x88>
 80075e2:	4629      	mov	r1, r5
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff ffbf 	bl	8007568 <sbrk_aligned>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	4604      	mov	r4, r0
 80075ee:	d158      	bne.n	80076a2 <_malloc_r+0xf6>
 80075f0:	f8d8 4000 	ldr.w	r4, [r8]
 80075f4:	4627      	mov	r7, r4
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	d143      	bne.n	8007682 <_malloc_r+0xd6>
 80075fa:	2c00      	cmp	r4, #0
 80075fc:	d04b      	beq.n	8007696 <_malloc_r+0xea>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	4639      	mov	r1, r7
 8007602:	4630      	mov	r0, r6
 8007604:	eb04 0903 	add.w	r9, r4, r3
 8007608:	f001 f9a8 	bl	800895c <_sbrk_r>
 800760c:	4581      	cmp	r9, r0
 800760e:	d142      	bne.n	8007696 <_malloc_r+0xea>
 8007610:	6821      	ldr	r1, [r4, #0]
 8007612:	1a6d      	subs	r5, r5, r1
 8007614:	4629      	mov	r1, r5
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff ffa6 	bl	8007568 <sbrk_aligned>
 800761c:	3001      	adds	r0, #1
 800761e:	d03a      	beq.n	8007696 <_malloc_r+0xea>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	442b      	add	r3, r5
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	f8d8 3000 	ldr.w	r3, [r8]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	bb62      	cbnz	r2, 8007688 <_malloc_r+0xdc>
 800762e:	f8c8 7000 	str.w	r7, [r8]
 8007632:	e00f      	b.n	8007654 <_malloc_r+0xa8>
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	1b52      	subs	r2, r2, r5
 8007638:	d420      	bmi.n	800767c <_malloc_r+0xd0>
 800763a:	2a0b      	cmp	r2, #11
 800763c:	d917      	bls.n	800766e <_malloc_r+0xc2>
 800763e:	1961      	adds	r1, r4, r5
 8007640:	42a3      	cmp	r3, r4
 8007642:	6025      	str	r5, [r4, #0]
 8007644:	bf18      	it	ne
 8007646:	6059      	strne	r1, [r3, #4]
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	bf08      	it	eq
 800764c:	f8c8 1000 	streq.w	r1, [r8]
 8007650:	5162      	str	r2, [r4, r5]
 8007652:	604b      	str	r3, [r1, #4]
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f82f 	bl	80076b8 <__malloc_unlock>
 800765a:	f104 000b 	add.w	r0, r4, #11
 800765e:	1d23      	adds	r3, r4, #4
 8007660:	f020 0007 	bic.w	r0, r0, #7
 8007664:	1ac2      	subs	r2, r0, r3
 8007666:	bf1c      	itt	ne
 8007668:	1a1b      	subne	r3, r3, r0
 800766a:	50a3      	strne	r3, [r4, r2]
 800766c:	e7af      	b.n	80075ce <_malloc_r+0x22>
 800766e:	6862      	ldr	r2, [r4, #4]
 8007670:	42a3      	cmp	r3, r4
 8007672:	bf0c      	ite	eq
 8007674:	f8c8 2000 	streq.w	r2, [r8]
 8007678:	605a      	strne	r2, [r3, #4]
 800767a:	e7eb      	b.n	8007654 <_malloc_r+0xa8>
 800767c:	4623      	mov	r3, r4
 800767e:	6864      	ldr	r4, [r4, #4]
 8007680:	e7ae      	b.n	80075e0 <_malloc_r+0x34>
 8007682:	463c      	mov	r4, r7
 8007684:	687f      	ldr	r7, [r7, #4]
 8007686:	e7b6      	b.n	80075f6 <_malloc_r+0x4a>
 8007688:	461a      	mov	r2, r3
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	42a3      	cmp	r3, r4
 800768e:	d1fb      	bne.n	8007688 <_malloc_r+0xdc>
 8007690:	2300      	movs	r3, #0
 8007692:	6053      	str	r3, [r2, #4]
 8007694:	e7de      	b.n	8007654 <_malloc_r+0xa8>
 8007696:	230c      	movs	r3, #12
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	4630      	mov	r0, r6
 800769c:	f000 f80c 	bl	80076b8 <__malloc_unlock>
 80076a0:	e794      	b.n	80075cc <_malloc_r+0x20>
 80076a2:	6005      	str	r5, [r0, #0]
 80076a4:	e7d6      	b.n	8007654 <_malloc_r+0xa8>
 80076a6:	bf00      	nop
 80076a8:	20000784 	.word	0x20000784

080076ac <__malloc_lock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	@ (80076b4 <__malloc_lock+0x8>)
 80076ae:	f001 b9a2 	b.w	80089f6 <__retarget_lock_acquire_recursive>
 80076b2:	bf00      	nop
 80076b4:	200008c8 	.word	0x200008c8

080076b8 <__malloc_unlock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	@ (80076c0 <__malloc_unlock+0x8>)
 80076ba:	f001 b99d 	b.w	80089f8 <__retarget_lock_release_recursive>
 80076be:	bf00      	nop
 80076c0:	200008c8 	.word	0x200008c8

080076c4 <_strtol_l.isra.0>:
 80076c4:	2b24      	cmp	r3, #36	@ 0x24
 80076c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ca:	4686      	mov	lr, r0
 80076cc:	4690      	mov	r8, r2
 80076ce:	d801      	bhi.n	80076d4 <_strtol_l.isra.0+0x10>
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d106      	bne.n	80076e2 <_strtol_l.isra.0+0x1e>
 80076d4:	f001 f964 	bl	80089a0 <__errno>
 80076d8:	2316      	movs	r3, #22
 80076da:	6003      	str	r3, [r0, #0]
 80076dc:	2000      	movs	r0, #0
 80076de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e2:	4834      	ldr	r0, [pc, #208]	@ (80077b4 <_strtol_l.isra.0+0xf0>)
 80076e4:	460d      	mov	r5, r1
 80076e6:	462a      	mov	r2, r5
 80076e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076ec:	5d06      	ldrb	r6, [r0, r4]
 80076ee:	f016 0608 	ands.w	r6, r6, #8
 80076f2:	d1f8      	bne.n	80076e6 <_strtol_l.isra.0+0x22>
 80076f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80076f6:	d110      	bne.n	800771a <_strtol_l.isra.0+0x56>
 80076f8:	782c      	ldrb	r4, [r5, #0]
 80076fa:	2601      	movs	r6, #1
 80076fc:	1c95      	adds	r5, r2, #2
 80076fe:	f033 0210 	bics.w	r2, r3, #16
 8007702:	d115      	bne.n	8007730 <_strtol_l.isra.0+0x6c>
 8007704:	2c30      	cmp	r4, #48	@ 0x30
 8007706:	d10d      	bne.n	8007724 <_strtol_l.isra.0+0x60>
 8007708:	782a      	ldrb	r2, [r5, #0]
 800770a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800770e:	2a58      	cmp	r2, #88	@ 0x58
 8007710:	d108      	bne.n	8007724 <_strtol_l.isra.0+0x60>
 8007712:	786c      	ldrb	r4, [r5, #1]
 8007714:	3502      	adds	r5, #2
 8007716:	2310      	movs	r3, #16
 8007718:	e00a      	b.n	8007730 <_strtol_l.isra.0+0x6c>
 800771a:	2c2b      	cmp	r4, #43	@ 0x2b
 800771c:	bf04      	itt	eq
 800771e:	782c      	ldrbeq	r4, [r5, #0]
 8007720:	1c95      	addeq	r5, r2, #2
 8007722:	e7ec      	b.n	80076fe <_strtol_l.isra.0+0x3a>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f6      	bne.n	8007716 <_strtol_l.isra.0+0x52>
 8007728:	2c30      	cmp	r4, #48	@ 0x30
 800772a:	bf14      	ite	ne
 800772c:	230a      	movne	r3, #10
 800772e:	2308      	moveq	r3, #8
 8007730:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007734:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007738:	2200      	movs	r2, #0
 800773a:	fbbc f9f3 	udiv	r9, ip, r3
 800773e:	4610      	mov	r0, r2
 8007740:	fb03 ca19 	mls	sl, r3, r9, ip
 8007744:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007748:	2f09      	cmp	r7, #9
 800774a:	d80f      	bhi.n	800776c <_strtol_l.isra.0+0xa8>
 800774c:	463c      	mov	r4, r7
 800774e:	42a3      	cmp	r3, r4
 8007750:	dd1b      	ble.n	800778a <_strtol_l.isra.0+0xc6>
 8007752:	1c57      	adds	r7, r2, #1
 8007754:	d007      	beq.n	8007766 <_strtol_l.isra.0+0xa2>
 8007756:	4581      	cmp	r9, r0
 8007758:	d314      	bcc.n	8007784 <_strtol_l.isra.0+0xc0>
 800775a:	d101      	bne.n	8007760 <_strtol_l.isra.0+0x9c>
 800775c:	45a2      	cmp	sl, r4
 800775e:	db11      	blt.n	8007784 <_strtol_l.isra.0+0xc0>
 8007760:	fb00 4003 	mla	r0, r0, r3, r4
 8007764:	2201      	movs	r2, #1
 8007766:	f815 4b01 	ldrb.w	r4, [r5], #1
 800776a:	e7eb      	b.n	8007744 <_strtol_l.isra.0+0x80>
 800776c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007770:	2f19      	cmp	r7, #25
 8007772:	d801      	bhi.n	8007778 <_strtol_l.isra.0+0xb4>
 8007774:	3c37      	subs	r4, #55	@ 0x37
 8007776:	e7ea      	b.n	800774e <_strtol_l.isra.0+0x8a>
 8007778:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800777c:	2f19      	cmp	r7, #25
 800777e:	d804      	bhi.n	800778a <_strtol_l.isra.0+0xc6>
 8007780:	3c57      	subs	r4, #87	@ 0x57
 8007782:	e7e4      	b.n	800774e <_strtol_l.isra.0+0x8a>
 8007784:	f04f 32ff 	mov.w	r2, #4294967295
 8007788:	e7ed      	b.n	8007766 <_strtol_l.isra.0+0xa2>
 800778a:	1c53      	adds	r3, r2, #1
 800778c:	d108      	bne.n	80077a0 <_strtol_l.isra.0+0xdc>
 800778e:	2322      	movs	r3, #34	@ 0x22
 8007790:	f8ce 3000 	str.w	r3, [lr]
 8007794:	4660      	mov	r0, ip
 8007796:	f1b8 0f00 	cmp.w	r8, #0
 800779a:	d0a0      	beq.n	80076de <_strtol_l.isra.0+0x1a>
 800779c:	1e69      	subs	r1, r5, #1
 800779e:	e006      	b.n	80077ae <_strtol_l.isra.0+0xea>
 80077a0:	b106      	cbz	r6, 80077a4 <_strtol_l.isra.0+0xe0>
 80077a2:	4240      	negs	r0, r0
 80077a4:	f1b8 0f00 	cmp.w	r8, #0
 80077a8:	d099      	beq.n	80076de <_strtol_l.isra.0+0x1a>
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	d1f6      	bne.n	800779c <_strtol_l.isra.0+0xd8>
 80077ae:	f8c8 1000 	str.w	r1, [r8]
 80077b2:	e794      	b.n	80076de <_strtol_l.isra.0+0x1a>
 80077b4:	0800bdf1 	.word	0x0800bdf1

080077b8 <_strtol_r>:
 80077b8:	f7ff bf84 	b.w	80076c4 <_strtol_l.isra.0>

080077bc <__cvt>:
 80077bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	ec57 6b10 	vmov	r6, r7, d0
 80077c4:	2f00      	cmp	r7, #0
 80077c6:	460c      	mov	r4, r1
 80077c8:	4619      	mov	r1, r3
 80077ca:	463b      	mov	r3, r7
 80077cc:	bfbb      	ittet	lt
 80077ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077d2:	461f      	movlt	r7, r3
 80077d4:	2300      	movge	r3, #0
 80077d6:	232d      	movlt	r3, #45	@ 0x2d
 80077d8:	700b      	strb	r3, [r1, #0]
 80077da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077e0:	4691      	mov	r9, r2
 80077e2:	f023 0820 	bic.w	r8, r3, #32
 80077e6:	bfbc      	itt	lt
 80077e8:	4632      	movlt	r2, r6
 80077ea:	4616      	movlt	r6, r2
 80077ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077f0:	d005      	beq.n	80077fe <__cvt+0x42>
 80077f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80077f6:	d100      	bne.n	80077fa <__cvt+0x3e>
 80077f8:	3401      	adds	r4, #1
 80077fa:	2102      	movs	r1, #2
 80077fc:	e000      	b.n	8007800 <__cvt+0x44>
 80077fe:	2103      	movs	r1, #3
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	ab02      	add	r3, sp, #8
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	ec47 6b10 	vmov	d0, r6, r7
 800780c:	4653      	mov	r3, sl
 800780e:	4622      	mov	r2, r4
 8007810:	f001 f992 	bl	8008b38 <_dtoa_r>
 8007814:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007818:	4605      	mov	r5, r0
 800781a:	d119      	bne.n	8007850 <__cvt+0x94>
 800781c:	f019 0f01 	tst.w	r9, #1
 8007820:	d00e      	beq.n	8007840 <__cvt+0x84>
 8007822:	eb00 0904 	add.w	r9, r0, r4
 8007826:	2200      	movs	r2, #0
 8007828:	2300      	movs	r3, #0
 800782a:	4630      	mov	r0, r6
 800782c:	4639      	mov	r1, r7
 800782e:	f7f9 f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007832:	b108      	cbz	r0, 8007838 <__cvt+0x7c>
 8007834:	f8cd 900c 	str.w	r9, [sp, #12]
 8007838:	2230      	movs	r2, #48	@ 0x30
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	454b      	cmp	r3, r9
 800783e:	d31e      	bcc.n	800787e <__cvt+0xc2>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007844:	1b5b      	subs	r3, r3, r5
 8007846:	4628      	mov	r0, r5
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	b004      	add	sp, #16
 800784c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007850:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007854:	eb00 0904 	add.w	r9, r0, r4
 8007858:	d1e5      	bne.n	8007826 <__cvt+0x6a>
 800785a:	7803      	ldrb	r3, [r0, #0]
 800785c:	2b30      	cmp	r3, #48	@ 0x30
 800785e:	d10a      	bne.n	8007876 <__cvt+0xba>
 8007860:	2200      	movs	r2, #0
 8007862:	2300      	movs	r3, #0
 8007864:	4630      	mov	r0, r6
 8007866:	4639      	mov	r1, r7
 8007868:	f7f9 f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 800786c:	b918      	cbnz	r0, 8007876 <__cvt+0xba>
 800786e:	f1c4 0401 	rsb	r4, r4, #1
 8007872:	f8ca 4000 	str.w	r4, [sl]
 8007876:	f8da 3000 	ldr.w	r3, [sl]
 800787a:	4499      	add	r9, r3
 800787c:	e7d3      	b.n	8007826 <__cvt+0x6a>
 800787e:	1c59      	adds	r1, r3, #1
 8007880:	9103      	str	r1, [sp, #12]
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	e7d9      	b.n	800783a <__cvt+0x7e>

08007886 <__exponent>:
 8007886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007888:	2900      	cmp	r1, #0
 800788a:	bfba      	itte	lt
 800788c:	4249      	neglt	r1, r1
 800788e:	232d      	movlt	r3, #45	@ 0x2d
 8007890:	232b      	movge	r3, #43	@ 0x2b
 8007892:	2909      	cmp	r1, #9
 8007894:	7002      	strb	r2, [r0, #0]
 8007896:	7043      	strb	r3, [r0, #1]
 8007898:	dd29      	ble.n	80078ee <__exponent+0x68>
 800789a:	f10d 0307 	add.w	r3, sp, #7
 800789e:	461d      	mov	r5, r3
 80078a0:	270a      	movs	r7, #10
 80078a2:	461a      	mov	r2, r3
 80078a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80078a8:	fb07 1416 	mls	r4, r7, r6, r1
 80078ac:	3430      	adds	r4, #48	@ 0x30
 80078ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078b2:	460c      	mov	r4, r1
 80078b4:	2c63      	cmp	r4, #99	@ 0x63
 80078b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ba:	4631      	mov	r1, r6
 80078bc:	dcf1      	bgt.n	80078a2 <__exponent+0x1c>
 80078be:	3130      	adds	r1, #48	@ 0x30
 80078c0:	1e94      	subs	r4, r2, #2
 80078c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078c6:	1c41      	adds	r1, r0, #1
 80078c8:	4623      	mov	r3, r4
 80078ca:	42ab      	cmp	r3, r5
 80078cc:	d30a      	bcc.n	80078e4 <__exponent+0x5e>
 80078ce:	f10d 0309 	add.w	r3, sp, #9
 80078d2:	1a9b      	subs	r3, r3, r2
 80078d4:	42ac      	cmp	r4, r5
 80078d6:	bf88      	it	hi
 80078d8:	2300      	movhi	r3, #0
 80078da:	3302      	adds	r3, #2
 80078dc:	4403      	add	r3, r0
 80078de:	1a18      	subs	r0, r3, r0
 80078e0:	b003      	add	sp, #12
 80078e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078ec:	e7ed      	b.n	80078ca <__exponent+0x44>
 80078ee:	2330      	movs	r3, #48	@ 0x30
 80078f0:	3130      	adds	r1, #48	@ 0x30
 80078f2:	7083      	strb	r3, [r0, #2]
 80078f4:	70c1      	strb	r1, [r0, #3]
 80078f6:	1d03      	adds	r3, r0, #4
 80078f8:	e7f1      	b.n	80078de <__exponent+0x58>
	...

080078fc <_printf_float>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	b08d      	sub	sp, #52	@ 0x34
 8007902:	460c      	mov	r4, r1
 8007904:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007908:	4616      	mov	r6, r2
 800790a:	461f      	mov	r7, r3
 800790c:	4605      	mov	r5, r0
 800790e:	f000 ffed 	bl	80088ec <_localeconv_r>
 8007912:	6803      	ldr	r3, [r0, #0]
 8007914:	9304      	str	r3, [sp, #16]
 8007916:	4618      	mov	r0, r3
 8007918:	f7f8 fcaa 	bl	8000270 <strlen>
 800791c:	2300      	movs	r3, #0
 800791e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007920:	f8d8 3000 	ldr.w	r3, [r8]
 8007924:	9005      	str	r0, [sp, #20]
 8007926:	3307      	adds	r3, #7
 8007928:	f023 0307 	bic.w	r3, r3, #7
 800792c:	f103 0208 	add.w	r2, r3, #8
 8007930:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007934:	f8d4 b000 	ldr.w	fp, [r4]
 8007938:	f8c8 2000 	str.w	r2, [r8]
 800793c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007940:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007944:	9307      	str	r3, [sp, #28]
 8007946:	f8cd 8018 	str.w	r8, [sp, #24]
 800794a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800794e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007952:	4b9c      	ldr	r3, [pc, #624]	@ (8007bc4 <_printf_float+0x2c8>)
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	f7f9 f8e8 	bl	8000b2c <__aeabi_dcmpun>
 800795c:	bb70      	cbnz	r0, 80079bc <_printf_float+0xc0>
 800795e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007962:	4b98      	ldr	r3, [pc, #608]	@ (8007bc4 <_printf_float+0x2c8>)
 8007964:	f04f 32ff 	mov.w	r2, #4294967295
 8007968:	f7f9 f8c2 	bl	8000af0 <__aeabi_dcmple>
 800796c:	bb30      	cbnz	r0, 80079bc <_printf_float+0xc0>
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	f7f9 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800797a:	b110      	cbz	r0, 8007982 <_printf_float+0x86>
 800797c:	232d      	movs	r3, #45	@ 0x2d
 800797e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007982:	4a91      	ldr	r2, [pc, #580]	@ (8007bc8 <_printf_float+0x2cc>)
 8007984:	4b91      	ldr	r3, [pc, #580]	@ (8007bcc <_printf_float+0x2d0>)
 8007986:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800798a:	bf8c      	ite	hi
 800798c:	4690      	movhi	r8, r2
 800798e:	4698      	movls	r8, r3
 8007990:	2303      	movs	r3, #3
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	f02b 0304 	bic.w	r3, fp, #4
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	f04f 0900 	mov.w	r9, #0
 800799e:	9700      	str	r7, [sp, #0]
 80079a0:	4633      	mov	r3, r6
 80079a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079a4:	4621      	mov	r1, r4
 80079a6:	4628      	mov	r0, r5
 80079a8:	f000 f9d2 	bl	8007d50 <_printf_common>
 80079ac:	3001      	adds	r0, #1
 80079ae:	f040 808d 	bne.w	8007acc <_printf_float+0x1d0>
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	b00d      	add	sp, #52	@ 0x34
 80079b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	4649      	mov	r1, r9
 80079c4:	f7f9 f8b2 	bl	8000b2c <__aeabi_dcmpun>
 80079c8:	b140      	cbz	r0, 80079dc <_printf_float+0xe0>
 80079ca:	464b      	mov	r3, r9
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bfbc      	itt	lt
 80079d0:	232d      	movlt	r3, #45	@ 0x2d
 80079d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079d6:	4a7e      	ldr	r2, [pc, #504]	@ (8007bd0 <_printf_float+0x2d4>)
 80079d8:	4b7e      	ldr	r3, [pc, #504]	@ (8007bd4 <_printf_float+0x2d8>)
 80079da:	e7d4      	b.n	8007986 <_printf_float+0x8a>
 80079dc:	6863      	ldr	r3, [r4, #4]
 80079de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079e2:	9206      	str	r2, [sp, #24]
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	d13b      	bne.n	8007a60 <_printf_float+0x164>
 80079e8:	2306      	movs	r3, #6
 80079ea:	6063      	str	r3, [r4, #4]
 80079ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80079f0:	2300      	movs	r3, #0
 80079f2:	6022      	str	r2, [r4, #0]
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80079f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80079fc:	ab09      	add	r3, sp, #36	@ 0x24
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	6861      	ldr	r1, [r4, #4]
 8007a02:	ec49 8b10 	vmov	d0, r8, r9
 8007a06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f7ff fed6 	bl	80077bc <__cvt>
 8007a10:	9b06      	ldr	r3, [sp, #24]
 8007a12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a14:	2b47      	cmp	r3, #71	@ 0x47
 8007a16:	4680      	mov	r8, r0
 8007a18:	d129      	bne.n	8007a6e <_printf_float+0x172>
 8007a1a:	1cc8      	adds	r0, r1, #3
 8007a1c:	db02      	blt.n	8007a24 <_printf_float+0x128>
 8007a1e:	6863      	ldr	r3, [r4, #4]
 8007a20:	4299      	cmp	r1, r3
 8007a22:	dd41      	ble.n	8007aa8 <_printf_float+0x1ac>
 8007a24:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a28:	fa5f fa8a 	uxtb.w	sl, sl
 8007a2c:	3901      	subs	r1, #1
 8007a2e:	4652      	mov	r2, sl
 8007a30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a34:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a36:	f7ff ff26 	bl	8007886 <__exponent>
 8007a3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a3c:	1813      	adds	r3, r2, r0
 8007a3e:	2a01      	cmp	r2, #1
 8007a40:	4681      	mov	r9, r0
 8007a42:	6123      	str	r3, [r4, #16]
 8007a44:	dc02      	bgt.n	8007a4c <_printf_float+0x150>
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	07d2      	lsls	r2, r2, #31
 8007a4a:	d501      	bpl.n	8007a50 <_printf_float+0x154>
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	6123      	str	r3, [r4, #16]
 8007a50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0a2      	beq.n	800799e <_printf_float+0xa2>
 8007a58:	232d      	movs	r3, #45	@ 0x2d
 8007a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a5e:	e79e      	b.n	800799e <_printf_float+0xa2>
 8007a60:	9a06      	ldr	r2, [sp, #24]
 8007a62:	2a47      	cmp	r2, #71	@ 0x47
 8007a64:	d1c2      	bne.n	80079ec <_printf_float+0xf0>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1c0      	bne.n	80079ec <_printf_float+0xf0>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e7bd      	b.n	80079ea <_printf_float+0xee>
 8007a6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a72:	d9db      	bls.n	8007a2c <_printf_float+0x130>
 8007a74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a78:	d118      	bne.n	8007aac <_printf_float+0x1b0>
 8007a7a:	2900      	cmp	r1, #0
 8007a7c:	6863      	ldr	r3, [r4, #4]
 8007a7e:	dd0b      	ble.n	8007a98 <_printf_float+0x19c>
 8007a80:	6121      	str	r1, [r4, #16]
 8007a82:	b913      	cbnz	r3, 8007a8a <_printf_float+0x18e>
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	07d0      	lsls	r0, r2, #31
 8007a88:	d502      	bpl.n	8007a90 <_printf_float+0x194>
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	440b      	add	r3, r1
 8007a8e:	6123      	str	r3, [r4, #16]
 8007a90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a92:	f04f 0900 	mov.w	r9, #0
 8007a96:	e7db      	b.n	8007a50 <_printf_float+0x154>
 8007a98:	b913      	cbnz	r3, 8007aa0 <_printf_float+0x1a4>
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	07d2      	lsls	r2, r2, #31
 8007a9e:	d501      	bpl.n	8007aa4 <_printf_float+0x1a8>
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	e7f4      	b.n	8007a8e <_printf_float+0x192>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e7f2      	b.n	8007a8e <_printf_float+0x192>
 8007aa8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aae:	4299      	cmp	r1, r3
 8007ab0:	db05      	blt.n	8007abe <_printf_float+0x1c2>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	6121      	str	r1, [r4, #16]
 8007ab6:	07d8      	lsls	r0, r3, #31
 8007ab8:	d5ea      	bpl.n	8007a90 <_printf_float+0x194>
 8007aba:	1c4b      	adds	r3, r1, #1
 8007abc:	e7e7      	b.n	8007a8e <_printf_float+0x192>
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	bfd4      	ite	le
 8007ac2:	f1c1 0202 	rsble	r2, r1, #2
 8007ac6:	2201      	movgt	r2, #1
 8007ac8:	4413      	add	r3, r2
 8007aca:	e7e0      	b.n	8007a8e <_printf_float+0x192>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	055a      	lsls	r2, r3, #21
 8007ad0:	d407      	bmi.n	8007ae2 <_printf_float+0x1e6>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	d12b      	bne.n	8007b38 <_printf_float+0x23c>
 8007ae0:	e767      	b.n	80079b2 <_printf_float+0xb6>
 8007ae2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ae6:	f240 80dd 	bls.w	8007ca4 <_printf_float+0x3a8>
 8007aea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007aee:	2200      	movs	r2, #0
 8007af0:	2300      	movs	r3, #0
 8007af2:	f7f8 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d033      	beq.n	8007b62 <_printf_float+0x266>
 8007afa:	4a37      	ldr	r2, [pc, #220]	@ (8007bd8 <_printf_float+0x2dc>)
 8007afc:	2301      	movs	r3, #1
 8007afe:	4631      	mov	r1, r6
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b8      	blx	r7
 8007b04:	3001      	adds	r0, #1
 8007b06:	f43f af54 	beq.w	80079b2 <_printf_float+0xb6>
 8007b0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b0e:	4543      	cmp	r3, r8
 8007b10:	db02      	blt.n	8007b18 <_printf_float+0x21c>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	07d8      	lsls	r0, r3, #31
 8007b16:	d50f      	bpl.n	8007b38 <_printf_float+0x23c>
 8007b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f af45 	beq.w	80079b2 <_printf_float+0xb6>
 8007b28:	f04f 0900 	mov.w	r9, #0
 8007b2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b30:	f104 0a1a 	add.w	sl, r4, #26
 8007b34:	45c8      	cmp	r8, r9
 8007b36:	dc09      	bgt.n	8007b4c <_printf_float+0x250>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	079b      	lsls	r3, r3, #30
 8007b3c:	f100 8103 	bmi.w	8007d46 <_printf_float+0x44a>
 8007b40:	68e0      	ldr	r0, [r4, #12]
 8007b42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b44:	4298      	cmp	r0, r3
 8007b46:	bfb8      	it	lt
 8007b48:	4618      	movlt	r0, r3
 8007b4a:	e734      	b.n	80079b6 <_printf_float+0xba>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af2b 	beq.w	80079b2 <_printf_float+0xb6>
 8007b5c:	f109 0901 	add.w	r9, r9, #1
 8007b60:	e7e8      	b.n	8007b34 <_printf_float+0x238>
 8007b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dc39      	bgt.n	8007bdc <_printf_float+0x2e0>
 8007b68:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd8 <_printf_float+0x2dc>)
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	f43f af1d 	beq.w	80079b2 <_printf_float+0xb6>
 8007b78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b7c:	ea59 0303 	orrs.w	r3, r9, r3
 8007b80:	d102      	bne.n	8007b88 <_printf_float+0x28c>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	07d9      	lsls	r1, r3, #31
 8007b86:	d5d7      	bpl.n	8007b38 <_printf_float+0x23c>
 8007b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f af0d 	beq.w	80079b2 <_printf_float+0xb6>
 8007b98:	f04f 0a00 	mov.w	sl, #0
 8007b9c:	f104 0b1a 	add.w	fp, r4, #26
 8007ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba2:	425b      	negs	r3, r3
 8007ba4:	4553      	cmp	r3, sl
 8007ba6:	dc01      	bgt.n	8007bac <_printf_float+0x2b0>
 8007ba8:	464b      	mov	r3, r9
 8007baa:	e793      	b.n	8007ad4 <_printf_float+0x1d8>
 8007bac:	2301      	movs	r3, #1
 8007bae:	465a      	mov	r2, fp
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f aefb 	beq.w	80079b2 <_printf_float+0xb6>
 8007bbc:	f10a 0a01 	add.w	sl, sl, #1
 8007bc0:	e7ee      	b.n	8007ba0 <_printf_float+0x2a4>
 8007bc2:	bf00      	nop
 8007bc4:	7fefffff 	.word	0x7fefffff
 8007bc8:	0800bef5 	.word	0x0800bef5
 8007bcc:	0800bef1 	.word	0x0800bef1
 8007bd0:	0800befd 	.word	0x0800befd
 8007bd4:	0800bef9 	.word	0x0800bef9
 8007bd8:	0800bf01 	.word	0x0800bf01
 8007bdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007be2:	4553      	cmp	r3, sl
 8007be4:	bfa8      	it	ge
 8007be6:	4653      	movge	r3, sl
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	4699      	mov	r9, r3
 8007bec:	dc36      	bgt.n	8007c5c <_printf_float+0x360>
 8007bee:	f04f 0b00 	mov.w	fp, #0
 8007bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bf6:	f104 021a 	add.w	r2, r4, #26
 8007bfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bfc:	9306      	str	r3, [sp, #24]
 8007bfe:	eba3 0309 	sub.w	r3, r3, r9
 8007c02:	455b      	cmp	r3, fp
 8007c04:	dc31      	bgt.n	8007c6a <_printf_float+0x36e>
 8007c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c08:	459a      	cmp	sl, r3
 8007c0a:	dc3a      	bgt.n	8007c82 <_printf_float+0x386>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	07da      	lsls	r2, r3, #31
 8007c10:	d437      	bmi.n	8007c82 <_printf_float+0x386>
 8007c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c14:	ebaa 0903 	sub.w	r9, sl, r3
 8007c18:	9b06      	ldr	r3, [sp, #24]
 8007c1a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c1e:	4599      	cmp	r9, r3
 8007c20:	bfa8      	it	ge
 8007c22:	4699      	movge	r9, r3
 8007c24:	f1b9 0f00 	cmp.w	r9, #0
 8007c28:	dc33      	bgt.n	8007c92 <_printf_float+0x396>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c32:	f104 0b1a 	add.w	fp, r4, #26
 8007c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c38:	ebaa 0303 	sub.w	r3, sl, r3
 8007c3c:	eba3 0309 	sub.w	r3, r3, r9
 8007c40:	4543      	cmp	r3, r8
 8007c42:	f77f af79 	ble.w	8007b38 <_printf_float+0x23c>
 8007c46:	2301      	movs	r3, #1
 8007c48:	465a      	mov	r2, fp
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f aeae 	beq.w	80079b2 <_printf_float+0xb6>
 8007c56:	f108 0801 	add.w	r8, r8, #1
 8007c5a:	e7ec      	b.n	8007c36 <_printf_float+0x33a>
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b8      	blx	r7
 8007c64:	3001      	adds	r0, #1
 8007c66:	d1c2      	bne.n	8007bee <_printf_float+0x2f2>
 8007c68:	e6a3      	b.n	80079b2 <_printf_float+0xb6>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4628      	mov	r0, r5
 8007c70:	9206      	str	r2, [sp, #24]
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f ae9c 	beq.w	80079b2 <_printf_float+0xb6>
 8007c7a:	9a06      	ldr	r2, [sp, #24]
 8007c7c:	f10b 0b01 	add.w	fp, fp, #1
 8007c80:	e7bb      	b.n	8007bfa <_printf_float+0x2fe>
 8007c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c86:	4631      	mov	r1, r6
 8007c88:	4628      	mov	r0, r5
 8007c8a:	47b8      	blx	r7
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d1c0      	bne.n	8007c12 <_printf_float+0x316>
 8007c90:	e68f      	b.n	80079b2 <_printf_float+0xb6>
 8007c92:	9a06      	ldr	r2, [sp, #24]
 8007c94:	464b      	mov	r3, r9
 8007c96:	4442      	add	r2, r8
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d1c3      	bne.n	8007c2a <_printf_float+0x32e>
 8007ca2:	e686      	b.n	80079b2 <_printf_float+0xb6>
 8007ca4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ca8:	f1ba 0f01 	cmp.w	sl, #1
 8007cac:	dc01      	bgt.n	8007cb2 <_printf_float+0x3b6>
 8007cae:	07db      	lsls	r3, r3, #31
 8007cb0:	d536      	bpl.n	8007d20 <_printf_float+0x424>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f43f ae78 	beq.w	80079b2 <_printf_float+0xb6>
 8007cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f43f ae70 	beq.w	80079b2 <_printf_float+0xb6>
 8007cd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cde:	f7f8 fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ce2:	b9c0      	cbnz	r0, 8007d16 <_printf_float+0x41a>
 8007ce4:	4653      	mov	r3, sl
 8007ce6:	f108 0201 	add.w	r2, r8, #1
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d10c      	bne.n	8007d0e <_printf_float+0x412>
 8007cf4:	e65d      	b.n	80079b2 <_printf_float+0xb6>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	465a      	mov	r2, fp
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	f43f ae56 	beq.w	80079b2 <_printf_float+0xb6>
 8007d06:	f108 0801 	add.w	r8, r8, #1
 8007d0a:	45d0      	cmp	r8, sl
 8007d0c:	dbf3      	blt.n	8007cf6 <_printf_float+0x3fa>
 8007d0e:	464b      	mov	r3, r9
 8007d10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d14:	e6df      	b.n	8007ad6 <_printf_float+0x1da>
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	f104 0b1a 	add.w	fp, r4, #26
 8007d1e:	e7f4      	b.n	8007d0a <_printf_float+0x40e>
 8007d20:	2301      	movs	r3, #1
 8007d22:	4642      	mov	r2, r8
 8007d24:	e7e1      	b.n	8007cea <_printf_float+0x3ee>
 8007d26:	2301      	movs	r3, #1
 8007d28:	464a      	mov	r2, r9
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b8      	blx	r7
 8007d30:	3001      	adds	r0, #1
 8007d32:	f43f ae3e 	beq.w	80079b2 <_printf_float+0xb6>
 8007d36:	f108 0801 	add.w	r8, r8, #1
 8007d3a:	68e3      	ldr	r3, [r4, #12]
 8007d3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d3e:	1a5b      	subs	r3, r3, r1
 8007d40:	4543      	cmp	r3, r8
 8007d42:	dcf0      	bgt.n	8007d26 <_printf_float+0x42a>
 8007d44:	e6fc      	b.n	8007b40 <_printf_float+0x244>
 8007d46:	f04f 0800 	mov.w	r8, #0
 8007d4a:	f104 0919 	add.w	r9, r4, #25
 8007d4e:	e7f4      	b.n	8007d3a <_printf_float+0x43e>

08007d50 <_printf_common>:
 8007d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	4616      	mov	r6, r2
 8007d56:	4698      	mov	r8, r3
 8007d58:	688a      	ldr	r2, [r1, #8]
 8007d5a:	690b      	ldr	r3, [r1, #16]
 8007d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d60:	4293      	cmp	r3, r2
 8007d62:	bfb8      	it	lt
 8007d64:	4613      	movlt	r3, r2
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	460c      	mov	r4, r1
 8007d70:	b10a      	cbz	r2, 8007d76 <_printf_common+0x26>
 8007d72:	3301      	adds	r3, #1
 8007d74:	6033      	str	r3, [r6, #0]
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	0699      	lsls	r1, r3, #26
 8007d7a:	bf42      	ittt	mi
 8007d7c:	6833      	ldrmi	r3, [r6, #0]
 8007d7e:	3302      	addmi	r3, #2
 8007d80:	6033      	strmi	r3, [r6, #0]
 8007d82:	6825      	ldr	r5, [r4, #0]
 8007d84:	f015 0506 	ands.w	r5, r5, #6
 8007d88:	d106      	bne.n	8007d98 <_printf_common+0x48>
 8007d8a:	f104 0a19 	add.w	sl, r4, #25
 8007d8e:	68e3      	ldr	r3, [r4, #12]
 8007d90:	6832      	ldr	r2, [r6, #0]
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	42ab      	cmp	r3, r5
 8007d96:	dc26      	bgt.n	8007de6 <_printf_common+0x96>
 8007d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d9c:	6822      	ldr	r2, [r4, #0]
 8007d9e:	3b00      	subs	r3, #0
 8007da0:	bf18      	it	ne
 8007da2:	2301      	movne	r3, #1
 8007da4:	0692      	lsls	r2, r2, #26
 8007da6:	d42b      	bmi.n	8007e00 <_printf_common+0xb0>
 8007da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dac:	4641      	mov	r1, r8
 8007dae:	4638      	mov	r0, r7
 8007db0:	47c8      	blx	r9
 8007db2:	3001      	adds	r0, #1
 8007db4:	d01e      	beq.n	8007df4 <_printf_common+0xa4>
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	6922      	ldr	r2, [r4, #16]
 8007dba:	f003 0306 	and.w	r3, r3, #6
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	bf02      	ittt	eq
 8007dc2:	68e5      	ldreq	r5, [r4, #12]
 8007dc4:	6833      	ldreq	r3, [r6, #0]
 8007dc6:	1aed      	subeq	r5, r5, r3
 8007dc8:	68a3      	ldr	r3, [r4, #8]
 8007dca:	bf0c      	ite	eq
 8007dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dd0:	2500      	movne	r5, #0
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	bfc4      	itt	gt
 8007dd6:	1a9b      	subgt	r3, r3, r2
 8007dd8:	18ed      	addgt	r5, r5, r3
 8007dda:	2600      	movs	r6, #0
 8007ddc:	341a      	adds	r4, #26
 8007dde:	42b5      	cmp	r5, r6
 8007de0:	d11a      	bne.n	8007e18 <_printf_common+0xc8>
 8007de2:	2000      	movs	r0, #0
 8007de4:	e008      	b.n	8007df8 <_printf_common+0xa8>
 8007de6:	2301      	movs	r3, #1
 8007de8:	4652      	mov	r2, sl
 8007dea:	4641      	mov	r1, r8
 8007dec:	4638      	mov	r0, r7
 8007dee:	47c8      	blx	r9
 8007df0:	3001      	adds	r0, #1
 8007df2:	d103      	bne.n	8007dfc <_printf_common+0xac>
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
 8007df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	e7c6      	b.n	8007d8e <_printf_common+0x3e>
 8007e00:	18e1      	adds	r1, r4, r3
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	2030      	movs	r0, #48	@ 0x30
 8007e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e0a:	4422      	add	r2, r4
 8007e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e14:	3302      	adds	r3, #2
 8007e16:	e7c7      	b.n	8007da8 <_printf_common+0x58>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	4638      	mov	r0, r7
 8007e20:	47c8      	blx	r9
 8007e22:	3001      	adds	r0, #1
 8007e24:	d0e6      	beq.n	8007df4 <_printf_common+0xa4>
 8007e26:	3601      	adds	r6, #1
 8007e28:	e7d9      	b.n	8007dde <_printf_common+0x8e>
	...

08007e2c <_printf_i>:
 8007e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	7e0f      	ldrb	r7, [r1, #24]
 8007e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e34:	2f78      	cmp	r7, #120	@ 0x78
 8007e36:	4691      	mov	r9, r2
 8007e38:	4680      	mov	r8, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	469a      	mov	sl, r3
 8007e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e42:	d807      	bhi.n	8007e54 <_printf_i+0x28>
 8007e44:	2f62      	cmp	r7, #98	@ 0x62
 8007e46:	d80a      	bhi.n	8007e5e <_printf_i+0x32>
 8007e48:	2f00      	cmp	r7, #0
 8007e4a:	f000 80d1 	beq.w	8007ff0 <_printf_i+0x1c4>
 8007e4e:	2f58      	cmp	r7, #88	@ 0x58
 8007e50:	f000 80b8 	beq.w	8007fc4 <_printf_i+0x198>
 8007e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e5c:	e03a      	b.n	8007ed4 <_printf_i+0xa8>
 8007e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e62:	2b15      	cmp	r3, #21
 8007e64:	d8f6      	bhi.n	8007e54 <_printf_i+0x28>
 8007e66:	a101      	add	r1, pc, #4	@ (adr r1, 8007e6c <_printf_i+0x40>)
 8007e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e6c:	08007ec5 	.word	0x08007ec5
 8007e70:	08007ed9 	.word	0x08007ed9
 8007e74:	08007e55 	.word	0x08007e55
 8007e78:	08007e55 	.word	0x08007e55
 8007e7c:	08007e55 	.word	0x08007e55
 8007e80:	08007e55 	.word	0x08007e55
 8007e84:	08007ed9 	.word	0x08007ed9
 8007e88:	08007e55 	.word	0x08007e55
 8007e8c:	08007e55 	.word	0x08007e55
 8007e90:	08007e55 	.word	0x08007e55
 8007e94:	08007e55 	.word	0x08007e55
 8007e98:	08007fd7 	.word	0x08007fd7
 8007e9c:	08007f03 	.word	0x08007f03
 8007ea0:	08007f91 	.word	0x08007f91
 8007ea4:	08007e55 	.word	0x08007e55
 8007ea8:	08007e55 	.word	0x08007e55
 8007eac:	08007ff9 	.word	0x08007ff9
 8007eb0:	08007e55 	.word	0x08007e55
 8007eb4:	08007f03 	.word	0x08007f03
 8007eb8:	08007e55 	.word	0x08007e55
 8007ebc:	08007e55 	.word	0x08007e55
 8007ec0:	08007f99 	.word	0x08007f99
 8007ec4:	6833      	ldr	r3, [r6, #0]
 8007ec6:	1d1a      	adds	r2, r3, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6032      	str	r2, [r6, #0]
 8007ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e09c      	b.n	8008012 <_printf_i+0x1e6>
 8007ed8:	6833      	ldr	r3, [r6, #0]
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	1d19      	adds	r1, r3, #4
 8007ede:	6031      	str	r1, [r6, #0]
 8007ee0:	0606      	lsls	r6, r0, #24
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_i+0xbc>
 8007ee4:	681d      	ldr	r5, [r3, #0]
 8007ee6:	e003      	b.n	8007ef0 <_printf_i+0xc4>
 8007ee8:	0645      	lsls	r5, r0, #25
 8007eea:	d5fb      	bpl.n	8007ee4 <_printf_i+0xb8>
 8007eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	da03      	bge.n	8007efc <_printf_i+0xd0>
 8007ef4:	232d      	movs	r3, #45	@ 0x2d
 8007ef6:	426d      	negs	r5, r5
 8007ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007efc:	4858      	ldr	r0, [pc, #352]	@ (8008060 <_printf_i+0x234>)
 8007efe:	230a      	movs	r3, #10
 8007f00:	e011      	b.n	8007f26 <_printf_i+0xfa>
 8007f02:	6821      	ldr	r1, [r4, #0]
 8007f04:	6833      	ldr	r3, [r6, #0]
 8007f06:	0608      	lsls	r0, r1, #24
 8007f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f0c:	d402      	bmi.n	8007f14 <_printf_i+0xe8>
 8007f0e:	0649      	lsls	r1, r1, #25
 8007f10:	bf48      	it	mi
 8007f12:	b2ad      	uxthmi	r5, r5
 8007f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f16:	4852      	ldr	r0, [pc, #328]	@ (8008060 <_printf_i+0x234>)
 8007f18:	6033      	str	r3, [r6, #0]
 8007f1a:	bf14      	ite	ne
 8007f1c:	230a      	movne	r3, #10
 8007f1e:	2308      	moveq	r3, #8
 8007f20:	2100      	movs	r1, #0
 8007f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f26:	6866      	ldr	r6, [r4, #4]
 8007f28:	60a6      	str	r6, [r4, #8]
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	db05      	blt.n	8007f3a <_printf_i+0x10e>
 8007f2e:	6821      	ldr	r1, [r4, #0]
 8007f30:	432e      	orrs	r6, r5
 8007f32:	f021 0104 	bic.w	r1, r1, #4
 8007f36:	6021      	str	r1, [r4, #0]
 8007f38:	d04b      	beq.n	8007fd2 <_printf_i+0x1a6>
 8007f3a:	4616      	mov	r6, r2
 8007f3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f40:	fb03 5711 	mls	r7, r3, r1, r5
 8007f44:	5dc7      	ldrb	r7, [r0, r7]
 8007f46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f4a:	462f      	mov	r7, r5
 8007f4c:	42bb      	cmp	r3, r7
 8007f4e:	460d      	mov	r5, r1
 8007f50:	d9f4      	bls.n	8007f3c <_printf_i+0x110>
 8007f52:	2b08      	cmp	r3, #8
 8007f54:	d10b      	bne.n	8007f6e <_printf_i+0x142>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	07df      	lsls	r7, r3, #31
 8007f5a:	d508      	bpl.n	8007f6e <_printf_i+0x142>
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	6861      	ldr	r1, [r4, #4]
 8007f60:	4299      	cmp	r1, r3
 8007f62:	bfde      	ittt	le
 8007f64:	2330      	movle	r3, #48	@ 0x30
 8007f66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f6e:	1b92      	subs	r2, r2, r6
 8007f70:	6122      	str	r2, [r4, #16]
 8007f72:	f8cd a000 	str.w	sl, [sp]
 8007f76:	464b      	mov	r3, r9
 8007f78:	aa03      	add	r2, sp, #12
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	f7ff fee7 	bl	8007d50 <_printf_common>
 8007f82:	3001      	adds	r0, #1
 8007f84:	d14a      	bne.n	800801c <_printf_i+0x1f0>
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8a:	b004      	add	sp, #16
 8007f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	f043 0320 	orr.w	r3, r3, #32
 8007f96:	6023      	str	r3, [r4, #0]
 8007f98:	4832      	ldr	r0, [pc, #200]	@ (8008064 <_printf_i+0x238>)
 8007f9a:	2778      	movs	r7, #120	@ 0x78
 8007f9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	6831      	ldr	r1, [r6, #0]
 8007fa4:	061f      	lsls	r7, r3, #24
 8007fa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007faa:	d402      	bmi.n	8007fb2 <_printf_i+0x186>
 8007fac:	065f      	lsls	r7, r3, #25
 8007fae:	bf48      	it	mi
 8007fb0:	b2ad      	uxthmi	r5, r5
 8007fb2:	6031      	str	r1, [r6, #0]
 8007fb4:	07d9      	lsls	r1, r3, #31
 8007fb6:	bf44      	itt	mi
 8007fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8007fbc:	6023      	strmi	r3, [r4, #0]
 8007fbe:	b11d      	cbz	r5, 8007fc8 <_printf_i+0x19c>
 8007fc0:	2310      	movs	r3, #16
 8007fc2:	e7ad      	b.n	8007f20 <_printf_i+0xf4>
 8007fc4:	4826      	ldr	r0, [pc, #152]	@ (8008060 <_printf_i+0x234>)
 8007fc6:	e7e9      	b.n	8007f9c <_printf_i+0x170>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	f023 0320 	bic.w	r3, r3, #32
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	e7f6      	b.n	8007fc0 <_printf_i+0x194>
 8007fd2:	4616      	mov	r6, r2
 8007fd4:	e7bd      	b.n	8007f52 <_printf_i+0x126>
 8007fd6:	6833      	ldr	r3, [r6, #0]
 8007fd8:	6825      	ldr	r5, [r4, #0]
 8007fda:	6961      	ldr	r1, [r4, #20]
 8007fdc:	1d18      	adds	r0, r3, #4
 8007fde:	6030      	str	r0, [r6, #0]
 8007fe0:	062e      	lsls	r6, r5, #24
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	d501      	bpl.n	8007fea <_printf_i+0x1be>
 8007fe6:	6019      	str	r1, [r3, #0]
 8007fe8:	e002      	b.n	8007ff0 <_printf_i+0x1c4>
 8007fea:	0668      	lsls	r0, r5, #25
 8007fec:	d5fb      	bpl.n	8007fe6 <_printf_i+0x1ba>
 8007fee:	8019      	strh	r1, [r3, #0]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6123      	str	r3, [r4, #16]
 8007ff4:	4616      	mov	r6, r2
 8007ff6:	e7bc      	b.n	8007f72 <_printf_i+0x146>
 8007ff8:	6833      	ldr	r3, [r6, #0]
 8007ffa:	1d1a      	adds	r2, r3, #4
 8007ffc:	6032      	str	r2, [r6, #0]
 8007ffe:	681e      	ldr	r6, [r3, #0]
 8008000:	6862      	ldr	r2, [r4, #4]
 8008002:	2100      	movs	r1, #0
 8008004:	4630      	mov	r0, r6
 8008006:	f7f8 f8e3 	bl	80001d0 <memchr>
 800800a:	b108      	cbz	r0, 8008010 <_printf_i+0x1e4>
 800800c:	1b80      	subs	r0, r0, r6
 800800e:	6060      	str	r0, [r4, #4]
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	2300      	movs	r3, #0
 8008016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800801a:	e7aa      	b.n	8007f72 <_printf_i+0x146>
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	4632      	mov	r2, r6
 8008020:	4649      	mov	r1, r9
 8008022:	4640      	mov	r0, r8
 8008024:	47d0      	blx	sl
 8008026:	3001      	adds	r0, #1
 8008028:	d0ad      	beq.n	8007f86 <_printf_i+0x15a>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	079b      	lsls	r3, r3, #30
 800802e:	d413      	bmi.n	8008058 <_printf_i+0x22c>
 8008030:	68e0      	ldr	r0, [r4, #12]
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	4298      	cmp	r0, r3
 8008036:	bfb8      	it	lt
 8008038:	4618      	movlt	r0, r3
 800803a:	e7a6      	b.n	8007f8a <_printf_i+0x15e>
 800803c:	2301      	movs	r3, #1
 800803e:	4632      	mov	r2, r6
 8008040:	4649      	mov	r1, r9
 8008042:	4640      	mov	r0, r8
 8008044:	47d0      	blx	sl
 8008046:	3001      	adds	r0, #1
 8008048:	d09d      	beq.n	8007f86 <_printf_i+0x15a>
 800804a:	3501      	adds	r5, #1
 800804c:	68e3      	ldr	r3, [r4, #12]
 800804e:	9903      	ldr	r1, [sp, #12]
 8008050:	1a5b      	subs	r3, r3, r1
 8008052:	42ab      	cmp	r3, r5
 8008054:	dcf2      	bgt.n	800803c <_printf_i+0x210>
 8008056:	e7eb      	b.n	8008030 <_printf_i+0x204>
 8008058:	2500      	movs	r5, #0
 800805a:	f104 0619 	add.w	r6, r4, #25
 800805e:	e7f5      	b.n	800804c <_printf_i+0x220>
 8008060:	0800bf03 	.word	0x0800bf03
 8008064:	0800bf14 	.word	0x0800bf14

08008068 <_scanf_float>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	b087      	sub	sp, #28
 800806e:	4691      	mov	r9, r2
 8008070:	9303      	str	r3, [sp, #12]
 8008072:	688b      	ldr	r3, [r1, #8]
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800807a:	bf81      	itttt	hi
 800807c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008080:	eb03 0b05 	addhi.w	fp, r3, r5
 8008084:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008088:	608b      	strhi	r3, [r1, #8]
 800808a:	680b      	ldr	r3, [r1, #0]
 800808c:	460a      	mov	r2, r1
 800808e:	f04f 0500 	mov.w	r5, #0
 8008092:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008096:	f842 3b1c 	str.w	r3, [r2], #28
 800809a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800809e:	4680      	mov	r8, r0
 80080a0:	460c      	mov	r4, r1
 80080a2:	bf98      	it	ls
 80080a4:	f04f 0b00 	movls.w	fp, #0
 80080a8:	9201      	str	r2, [sp, #4]
 80080aa:	4616      	mov	r6, r2
 80080ac:	46aa      	mov	sl, r5
 80080ae:	462f      	mov	r7, r5
 80080b0:	9502      	str	r5, [sp, #8]
 80080b2:	68a2      	ldr	r2, [r4, #8]
 80080b4:	b15a      	cbz	r2, 80080ce <_scanf_float+0x66>
 80080b6:	f8d9 3000 	ldr.w	r3, [r9]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80080be:	d863      	bhi.n	8008188 <_scanf_float+0x120>
 80080c0:	2b40      	cmp	r3, #64	@ 0x40
 80080c2:	d83b      	bhi.n	800813c <_scanf_float+0xd4>
 80080c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80080c8:	b2c8      	uxtb	r0, r1
 80080ca:	280e      	cmp	r0, #14
 80080cc:	d939      	bls.n	8008142 <_scanf_float+0xda>
 80080ce:	b11f      	cbz	r7, 80080d8 <_scanf_float+0x70>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080dc:	f1ba 0f01 	cmp.w	sl, #1
 80080e0:	f200 8114 	bhi.w	800830c <_scanf_float+0x2a4>
 80080e4:	9b01      	ldr	r3, [sp, #4]
 80080e6:	429e      	cmp	r6, r3
 80080e8:	f200 8105 	bhi.w	80082f6 <_scanf_float+0x28e>
 80080ec:	2001      	movs	r0, #1
 80080ee:	b007      	add	sp, #28
 80080f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80080f8:	2a0d      	cmp	r2, #13
 80080fa:	d8e8      	bhi.n	80080ce <_scanf_float+0x66>
 80080fc:	a101      	add	r1, pc, #4	@ (adr r1, 8008104 <_scanf_float+0x9c>)
 80080fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008102:	bf00      	nop
 8008104:	0800824d 	.word	0x0800824d
 8008108:	080080cf 	.word	0x080080cf
 800810c:	080080cf 	.word	0x080080cf
 8008110:	080080cf 	.word	0x080080cf
 8008114:	080082a9 	.word	0x080082a9
 8008118:	08008283 	.word	0x08008283
 800811c:	080080cf 	.word	0x080080cf
 8008120:	080080cf 	.word	0x080080cf
 8008124:	0800825b 	.word	0x0800825b
 8008128:	080080cf 	.word	0x080080cf
 800812c:	080080cf 	.word	0x080080cf
 8008130:	080080cf 	.word	0x080080cf
 8008134:	080080cf 	.word	0x080080cf
 8008138:	08008217 	.word	0x08008217
 800813c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008140:	e7da      	b.n	80080f8 <_scanf_float+0x90>
 8008142:	290e      	cmp	r1, #14
 8008144:	d8c3      	bhi.n	80080ce <_scanf_float+0x66>
 8008146:	a001      	add	r0, pc, #4	@ (adr r0, 800814c <_scanf_float+0xe4>)
 8008148:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800814c:	08008207 	.word	0x08008207
 8008150:	080080cf 	.word	0x080080cf
 8008154:	08008207 	.word	0x08008207
 8008158:	08008297 	.word	0x08008297
 800815c:	080080cf 	.word	0x080080cf
 8008160:	080081a9 	.word	0x080081a9
 8008164:	080081ed 	.word	0x080081ed
 8008168:	080081ed 	.word	0x080081ed
 800816c:	080081ed 	.word	0x080081ed
 8008170:	080081ed 	.word	0x080081ed
 8008174:	080081ed 	.word	0x080081ed
 8008178:	080081ed 	.word	0x080081ed
 800817c:	080081ed 	.word	0x080081ed
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080081ed 	.word	0x080081ed
 8008188:	2b6e      	cmp	r3, #110	@ 0x6e
 800818a:	d809      	bhi.n	80081a0 <_scanf_float+0x138>
 800818c:	2b60      	cmp	r3, #96	@ 0x60
 800818e:	d8b1      	bhi.n	80080f4 <_scanf_float+0x8c>
 8008190:	2b54      	cmp	r3, #84	@ 0x54
 8008192:	d07b      	beq.n	800828c <_scanf_float+0x224>
 8008194:	2b59      	cmp	r3, #89	@ 0x59
 8008196:	d19a      	bne.n	80080ce <_scanf_float+0x66>
 8008198:	2d07      	cmp	r5, #7
 800819a:	d198      	bne.n	80080ce <_scanf_float+0x66>
 800819c:	2508      	movs	r5, #8
 800819e:	e02f      	b.n	8008200 <_scanf_float+0x198>
 80081a0:	2b74      	cmp	r3, #116	@ 0x74
 80081a2:	d073      	beq.n	800828c <_scanf_float+0x224>
 80081a4:	2b79      	cmp	r3, #121	@ 0x79
 80081a6:	e7f6      	b.n	8008196 <_scanf_float+0x12e>
 80081a8:	6821      	ldr	r1, [r4, #0]
 80081aa:	05c8      	lsls	r0, r1, #23
 80081ac:	d51e      	bpl.n	80081ec <_scanf_float+0x184>
 80081ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80081b2:	6021      	str	r1, [r4, #0]
 80081b4:	3701      	adds	r7, #1
 80081b6:	f1bb 0f00 	cmp.w	fp, #0
 80081ba:	d003      	beq.n	80081c4 <_scanf_float+0x15c>
 80081bc:	3201      	adds	r2, #1
 80081be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081c2:	60a2      	str	r2, [r4, #8]
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	60a3      	str	r3, [r4, #8]
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	3301      	adds	r3, #1
 80081ce:	6123      	str	r3, [r4, #16]
 80081d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80081dc:	f340 8082 	ble.w	80082e4 <_scanf_float+0x27c>
 80081e0:	f8d9 3000 	ldr.w	r3, [r9]
 80081e4:	3301      	adds	r3, #1
 80081e6:	f8c9 3000 	str.w	r3, [r9]
 80081ea:	e762      	b.n	80080b2 <_scanf_float+0x4a>
 80081ec:	eb1a 0105 	adds.w	r1, sl, r5
 80081f0:	f47f af6d 	bne.w	80080ce <_scanf_float+0x66>
 80081f4:	6822      	ldr	r2, [r4, #0]
 80081f6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80081fa:	6022      	str	r2, [r4, #0]
 80081fc:	460d      	mov	r5, r1
 80081fe:	468a      	mov	sl, r1
 8008200:	f806 3b01 	strb.w	r3, [r6], #1
 8008204:	e7de      	b.n	80081c4 <_scanf_float+0x15c>
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	0610      	lsls	r0, r2, #24
 800820a:	f57f af60 	bpl.w	80080ce <_scanf_float+0x66>
 800820e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008212:	6022      	str	r2, [r4, #0]
 8008214:	e7f4      	b.n	8008200 <_scanf_float+0x198>
 8008216:	f1ba 0f00 	cmp.w	sl, #0
 800821a:	d10c      	bne.n	8008236 <_scanf_float+0x1ce>
 800821c:	b977      	cbnz	r7, 800823c <_scanf_float+0x1d4>
 800821e:	6822      	ldr	r2, [r4, #0]
 8008220:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008224:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008228:	d108      	bne.n	800823c <_scanf_float+0x1d4>
 800822a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800822e:	6022      	str	r2, [r4, #0]
 8008230:	f04f 0a01 	mov.w	sl, #1
 8008234:	e7e4      	b.n	8008200 <_scanf_float+0x198>
 8008236:	f1ba 0f02 	cmp.w	sl, #2
 800823a:	d050      	beq.n	80082de <_scanf_float+0x276>
 800823c:	2d01      	cmp	r5, #1
 800823e:	d002      	beq.n	8008246 <_scanf_float+0x1de>
 8008240:	2d04      	cmp	r5, #4
 8008242:	f47f af44 	bne.w	80080ce <_scanf_float+0x66>
 8008246:	3501      	adds	r5, #1
 8008248:	b2ed      	uxtb	r5, r5
 800824a:	e7d9      	b.n	8008200 <_scanf_float+0x198>
 800824c:	f1ba 0f01 	cmp.w	sl, #1
 8008250:	f47f af3d 	bne.w	80080ce <_scanf_float+0x66>
 8008254:	f04f 0a02 	mov.w	sl, #2
 8008258:	e7d2      	b.n	8008200 <_scanf_float+0x198>
 800825a:	b975      	cbnz	r5, 800827a <_scanf_float+0x212>
 800825c:	2f00      	cmp	r7, #0
 800825e:	f47f af37 	bne.w	80080d0 <_scanf_float+0x68>
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008268:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800826c:	f040 8103 	bne.w	8008476 <_scanf_float+0x40e>
 8008270:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008274:	6022      	str	r2, [r4, #0]
 8008276:	2501      	movs	r5, #1
 8008278:	e7c2      	b.n	8008200 <_scanf_float+0x198>
 800827a:	2d03      	cmp	r5, #3
 800827c:	d0e3      	beq.n	8008246 <_scanf_float+0x1de>
 800827e:	2d05      	cmp	r5, #5
 8008280:	e7df      	b.n	8008242 <_scanf_float+0x1da>
 8008282:	2d02      	cmp	r5, #2
 8008284:	f47f af23 	bne.w	80080ce <_scanf_float+0x66>
 8008288:	2503      	movs	r5, #3
 800828a:	e7b9      	b.n	8008200 <_scanf_float+0x198>
 800828c:	2d06      	cmp	r5, #6
 800828e:	f47f af1e 	bne.w	80080ce <_scanf_float+0x66>
 8008292:	2507      	movs	r5, #7
 8008294:	e7b4      	b.n	8008200 <_scanf_float+0x198>
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	0591      	lsls	r1, r2, #22
 800829a:	f57f af18 	bpl.w	80080ce <_scanf_float+0x66>
 800829e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80082a2:	6022      	str	r2, [r4, #0]
 80082a4:	9702      	str	r7, [sp, #8]
 80082a6:	e7ab      	b.n	8008200 <_scanf_float+0x198>
 80082a8:	6822      	ldr	r2, [r4, #0]
 80082aa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80082ae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80082b2:	d005      	beq.n	80082c0 <_scanf_float+0x258>
 80082b4:	0550      	lsls	r0, r2, #21
 80082b6:	f57f af0a 	bpl.w	80080ce <_scanf_float+0x66>
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	f000 80db 	beq.w	8008476 <_scanf_float+0x40e>
 80082c0:	0591      	lsls	r1, r2, #22
 80082c2:	bf58      	it	pl
 80082c4:	9902      	ldrpl	r1, [sp, #8]
 80082c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082ca:	bf58      	it	pl
 80082cc:	1a79      	subpl	r1, r7, r1
 80082ce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80082d2:	bf58      	it	pl
 80082d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	2700      	movs	r7, #0
 80082dc:	e790      	b.n	8008200 <_scanf_float+0x198>
 80082de:	f04f 0a03 	mov.w	sl, #3
 80082e2:	e78d      	b.n	8008200 <_scanf_float+0x198>
 80082e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80082e8:	4649      	mov	r1, r9
 80082ea:	4640      	mov	r0, r8
 80082ec:	4798      	blx	r3
 80082ee:	2800      	cmp	r0, #0
 80082f0:	f43f aedf 	beq.w	80080b2 <_scanf_float+0x4a>
 80082f4:	e6eb      	b.n	80080ce <_scanf_float+0x66>
 80082f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082fe:	464a      	mov	r2, r9
 8008300:	4640      	mov	r0, r8
 8008302:	4798      	blx	r3
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	3b01      	subs	r3, #1
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	e6eb      	b.n	80080e4 <_scanf_float+0x7c>
 800830c:	1e6b      	subs	r3, r5, #1
 800830e:	2b06      	cmp	r3, #6
 8008310:	d824      	bhi.n	800835c <_scanf_float+0x2f4>
 8008312:	2d02      	cmp	r5, #2
 8008314:	d836      	bhi.n	8008384 <_scanf_float+0x31c>
 8008316:	9b01      	ldr	r3, [sp, #4]
 8008318:	429e      	cmp	r6, r3
 800831a:	f67f aee7 	bls.w	80080ec <_scanf_float+0x84>
 800831e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008326:	464a      	mov	r2, r9
 8008328:	4640      	mov	r0, r8
 800832a:	4798      	blx	r3
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	3b01      	subs	r3, #1
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	e7f0      	b.n	8008316 <_scanf_float+0x2ae>
 8008334:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008338:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800833c:	464a      	mov	r2, r9
 800833e:	4640      	mov	r0, r8
 8008340:	4798      	blx	r3
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	3b01      	subs	r3, #1
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	f10a 3aff 	add.w	sl, sl, #4294967295
 800834c:	fa5f fa8a 	uxtb.w	sl, sl
 8008350:	f1ba 0f02 	cmp.w	sl, #2
 8008354:	d1ee      	bne.n	8008334 <_scanf_float+0x2cc>
 8008356:	3d03      	subs	r5, #3
 8008358:	b2ed      	uxtb	r5, r5
 800835a:	1b76      	subs	r6, r6, r5
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	05da      	lsls	r2, r3, #23
 8008360:	d530      	bpl.n	80083c4 <_scanf_float+0x35c>
 8008362:	055b      	lsls	r3, r3, #21
 8008364:	d511      	bpl.n	800838a <_scanf_float+0x322>
 8008366:	9b01      	ldr	r3, [sp, #4]
 8008368:	429e      	cmp	r6, r3
 800836a:	f67f aebf 	bls.w	80080ec <_scanf_float+0x84>
 800836e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008372:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008376:	464a      	mov	r2, r9
 8008378:	4640      	mov	r0, r8
 800837a:	4798      	blx	r3
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	3b01      	subs	r3, #1
 8008380:	6123      	str	r3, [r4, #16]
 8008382:	e7f0      	b.n	8008366 <_scanf_float+0x2fe>
 8008384:	46aa      	mov	sl, r5
 8008386:	46b3      	mov	fp, r6
 8008388:	e7de      	b.n	8008348 <_scanf_float+0x2e0>
 800838a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800838e:	6923      	ldr	r3, [r4, #16]
 8008390:	2965      	cmp	r1, #101	@ 0x65
 8008392:	f103 33ff 	add.w	r3, r3, #4294967295
 8008396:	f106 35ff 	add.w	r5, r6, #4294967295
 800839a:	6123      	str	r3, [r4, #16]
 800839c:	d00c      	beq.n	80083b8 <_scanf_float+0x350>
 800839e:	2945      	cmp	r1, #69	@ 0x45
 80083a0:	d00a      	beq.n	80083b8 <_scanf_float+0x350>
 80083a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083a6:	464a      	mov	r2, r9
 80083a8:	4640      	mov	r0, r8
 80083aa:	4798      	blx	r3
 80083ac:	6923      	ldr	r3, [r4, #16]
 80083ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80083b2:	3b01      	subs	r3, #1
 80083b4:	1eb5      	subs	r5, r6, #2
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083bc:	464a      	mov	r2, r9
 80083be:	4640      	mov	r0, r8
 80083c0:	4798      	blx	r3
 80083c2:	462e      	mov	r6, r5
 80083c4:	6822      	ldr	r2, [r4, #0]
 80083c6:	f012 0210 	ands.w	r2, r2, #16
 80083ca:	d001      	beq.n	80083d0 <_scanf_float+0x368>
 80083cc:	2000      	movs	r0, #0
 80083ce:	e68e      	b.n	80080ee <_scanf_float+0x86>
 80083d0:	7032      	strb	r2, [r6, #0]
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083dc:	d125      	bne.n	800842a <_scanf_float+0x3c2>
 80083de:	9b02      	ldr	r3, [sp, #8]
 80083e0:	429f      	cmp	r7, r3
 80083e2:	d00a      	beq.n	80083fa <_scanf_float+0x392>
 80083e4:	1bda      	subs	r2, r3, r7
 80083e6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80083ea:	429e      	cmp	r6, r3
 80083ec:	bf28      	it	cs
 80083ee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80083f2:	4922      	ldr	r1, [pc, #136]	@ (800847c <_scanf_float+0x414>)
 80083f4:	4630      	mov	r0, r6
 80083f6:	f000 f965 	bl	80086c4 <siprintf>
 80083fa:	9901      	ldr	r1, [sp, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	4640      	mov	r0, r8
 8008400:	f002 fc62 	bl	800acc8 <_strtod_r>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	6821      	ldr	r1, [r4, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f011 0f02 	tst.w	r1, #2
 800840e:	ec57 6b10 	vmov	r6, r7, d0
 8008412:	f103 0204 	add.w	r2, r3, #4
 8008416:	d015      	beq.n	8008444 <_scanf_float+0x3dc>
 8008418:	9903      	ldr	r1, [sp, #12]
 800841a:	600a      	str	r2, [r1, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	e9c3 6700 	strd	r6, r7, [r3]
 8008422:	68e3      	ldr	r3, [r4, #12]
 8008424:	3301      	adds	r3, #1
 8008426:	60e3      	str	r3, [r4, #12]
 8008428:	e7d0      	b.n	80083cc <_scanf_float+0x364>
 800842a:	9b04      	ldr	r3, [sp, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0e4      	beq.n	80083fa <_scanf_float+0x392>
 8008430:	9905      	ldr	r1, [sp, #20]
 8008432:	230a      	movs	r3, #10
 8008434:	3101      	adds	r1, #1
 8008436:	4640      	mov	r0, r8
 8008438:	f7ff f9be 	bl	80077b8 <_strtol_r>
 800843c:	9b04      	ldr	r3, [sp, #16]
 800843e:	9e05      	ldr	r6, [sp, #20]
 8008440:	1ac2      	subs	r2, r0, r3
 8008442:	e7d0      	b.n	80083e6 <_scanf_float+0x37e>
 8008444:	f011 0f04 	tst.w	r1, #4
 8008448:	9903      	ldr	r1, [sp, #12]
 800844a:	600a      	str	r2, [r1, #0]
 800844c:	d1e6      	bne.n	800841c <_scanf_float+0x3b4>
 800844e:	681d      	ldr	r5, [r3, #0]
 8008450:	4632      	mov	r2, r6
 8008452:	463b      	mov	r3, r7
 8008454:	4630      	mov	r0, r6
 8008456:	4639      	mov	r1, r7
 8008458:	f7f8 fb68 	bl	8000b2c <__aeabi_dcmpun>
 800845c:	b128      	cbz	r0, 800846a <_scanf_float+0x402>
 800845e:	4808      	ldr	r0, [pc, #32]	@ (8008480 <_scanf_float+0x418>)
 8008460:	f000 fada 	bl	8008a18 <nanf>
 8008464:	ed85 0a00 	vstr	s0, [r5]
 8008468:	e7db      	b.n	8008422 <_scanf_float+0x3ba>
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f8 fbbb 	bl	8000be8 <__aeabi_d2f>
 8008472:	6028      	str	r0, [r5, #0]
 8008474:	e7d5      	b.n	8008422 <_scanf_float+0x3ba>
 8008476:	2700      	movs	r7, #0
 8008478:	e62e      	b.n	80080d8 <_scanf_float+0x70>
 800847a:	bf00      	nop
 800847c:	0800bf25 	.word	0x0800bf25
 8008480:	0800c066 	.word	0x0800c066

08008484 <std>:
 8008484:	2300      	movs	r3, #0
 8008486:	b510      	push	{r4, lr}
 8008488:	4604      	mov	r4, r0
 800848a:	e9c0 3300 	strd	r3, r3, [r0]
 800848e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008492:	6083      	str	r3, [r0, #8]
 8008494:	8181      	strh	r1, [r0, #12]
 8008496:	6643      	str	r3, [r0, #100]	@ 0x64
 8008498:	81c2      	strh	r2, [r0, #14]
 800849a:	6183      	str	r3, [r0, #24]
 800849c:	4619      	mov	r1, r3
 800849e:	2208      	movs	r2, #8
 80084a0:	305c      	adds	r0, #92	@ 0x5c
 80084a2:	f000 fa09 	bl	80088b8 <memset>
 80084a6:	4b0d      	ldr	r3, [pc, #52]	@ (80084dc <std+0x58>)
 80084a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80084aa:	4b0d      	ldr	r3, [pc, #52]	@ (80084e0 <std+0x5c>)
 80084ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084ae:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <std+0x60>)
 80084b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084b2:	4b0d      	ldr	r3, [pc, #52]	@ (80084e8 <std+0x64>)
 80084b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80084b6:	4b0d      	ldr	r3, [pc, #52]	@ (80084ec <std+0x68>)
 80084b8:	6224      	str	r4, [r4, #32]
 80084ba:	429c      	cmp	r4, r3
 80084bc:	d006      	beq.n	80084cc <std+0x48>
 80084be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084c2:	4294      	cmp	r4, r2
 80084c4:	d002      	beq.n	80084cc <std+0x48>
 80084c6:	33d0      	adds	r3, #208	@ 0xd0
 80084c8:	429c      	cmp	r4, r3
 80084ca:	d105      	bne.n	80084d8 <std+0x54>
 80084cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d4:	f000 ba8e 	b.w	80089f4 <__retarget_lock_init_recursive>
 80084d8:	bd10      	pop	{r4, pc}
 80084da:	bf00      	nop
 80084dc:	08008709 	.word	0x08008709
 80084e0:	0800872b 	.word	0x0800872b
 80084e4:	08008763 	.word	0x08008763
 80084e8:	08008787 	.word	0x08008787
 80084ec:	20000788 	.word	0x20000788

080084f0 <stdio_exit_handler>:
 80084f0:	4a02      	ldr	r2, [pc, #8]	@ (80084fc <stdio_exit_handler+0xc>)
 80084f2:	4903      	ldr	r1, [pc, #12]	@ (8008500 <stdio_exit_handler+0x10>)
 80084f4:	4803      	ldr	r0, [pc, #12]	@ (8008504 <stdio_exit_handler+0x14>)
 80084f6:	f000 b869 	b.w	80085cc <_fwalk_sglue>
 80084fa:	bf00      	nop
 80084fc:	20000040 	.word	0x20000040
 8008500:	0800b08d 	.word	0x0800b08d
 8008504:	20000050 	.word	0x20000050

08008508 <cleanup_stdio>:
 8008508:	6841      	ldr	r1, [r0, #4]
 800850a:	4b0c      	ldr	r3, [pc, #48]	@ (800853c <cleanup_stdio+0x34>)
 800850c:	4299      	cmp	r1, r3
 800850e:	b510      	push	{r4, lr}
 8008510:	4604      	mov	r4, r0
 8008512:	d001      	beq.n	8008518 <cleanup_stdio+0x10>
 8008514:	f002 fdba 	bl	800b08c <_fflush_r>
 8008518:	68a1      	ldr	r1, [r4, #8]
 800851a:	4b09      	ldr	r3, [pc, #36]	@ (8008540 <cleanup_stdio+0x38>)
 800851c:	4299      	cmp	r1, r3
 800851e:	d002      	beq.n	8008526 <cleanup_stdio+0x1e>
 8008520:	4620      	mov	r0, r4
 8008522:	f002 fdb3 	bl	800b08c <_fflush_r>
 8008526:	68e1      	ldr	r1, [r4, #12]
 8008528:	4b06      	ldr	r3, [pc, #24]	@ (8008544 <cleanup_stdio+0x3c>)
 800852a:	4299      	cmp	r1, r3
 800852c:	d004      	beq.n	8008538 <cleanup_stdio+0x30>
 800852e:	4620      	mov	r0, r4
 8008530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008534:	f002 bdaa 	b.w	800b08c <_fflush_r>
 8008538:	bd10      	pop	{r4, pc}
 800853a:	bf00      	nop
 800853c:	20000788 	.word	0x20000788
 8008540:	200007f0 	.word	0x200007f0
 8008544:	20000858 	.word	0x20000858

08008548 <global_stdio_init.part.0>:
 8008548:	b510      	push	{r4, lr}
 800854a:	4b0b      	ldr	r3, [pc, #44]	@ (8008578 <global_stdio_init.part.0+0x30>)
 800854c:	4c0b      	ldr	r4, [pc, #44]	@ (800857c <global_stdio_init.part.0+0x34>)
 800854e:	4a0c      	ldr	r2, [pc, #48]	@ (8008580 <global_stdio_init.part.0+0x38>)
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	4620      	mov	r0, r4
 8008554:	2200      	movs	r2, #0
 8008556:	2104      	movs	r1, #4
 8008558:	f7ff ff94 	bl	8008484 <std>
 800855c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008560:	2201      	movs	r2, #1
 8008562:	2109      	movs	r1, #9
 8008564:	f7ff ff8e 	bl	8008484 <std>
 8008568:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800856c:	2202      	movs	r2, #2
 800856e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008572:	2112      	movs	r1, #18
 8008574:	f7ff bf86 	b.w	8008484 <std>
 8008578:	200008c0 	.word	0x200008c0
 800857c:	20000788 	.word	0x20000788
 8008580:	080084f1 	.word	0x080084f1

08008584 <__sfp_lock_acquire>:
 8008584:	4801      	ldr	r0, [pc, #4]	@ (800858c <__sfp_lock_acquire+0x8>)
 8008586:	f000 ba36 	b.w	80089f6 <__retarget_lock_acquire_recursive>
 800858a:	bf00      	nop
 800858c:	200008c9 	.word	0x200008c9

08008590 <__sfp_lock_release>:
 8008590:	4801      	ldr	r0, [pc, #4]	@ (8008598 <__sfp_lock_release+0x8>)
 8008592:	f000 ba31 	b.w	80089f8 <__retarget_lock_release_recursive>
 8008596:	bf00      	nop
 8008598:	200008c9 	.word	0x200008c9

0800859c <__sinit>:
 800859c:	b510      	push	{r4, lr}
 800859e:	4604      	mov	r4, r0
 80085a0:	f7ff fff0 	bl	8008584 <__sfp_lock_acquire>
 80085a4:	6a23      	ldr	r3, [r4, #32]
 80085a6:	b11b      	cbz	r3, 80085b0 <__sinit+0x14>
 80085a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ac:	f7ff bff0 	b.w	8008590 <__sfp_lock_release>
 80085b0:	4b04      	ldr	r3, [pc, #16]	@ (80085c4 <__sinit+0x28>)
 80085b2:	6223      	str	r3, [r4, #32]
 80085b4:	4b04      	ldr	r3, [pc, #16]	@ (80085c8 <__sinit+0x2c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1f5      	bne.n	80085a8 <__sinit+0xc>
 80085bc:	f7ff ffc4 	bl	8008548 <global_stdio_init.part.0>
 80085c0:	e7f2      	b.n	80085a8 <__sinit+0xc>
 80085c2:	bf00      	nop
 80085c4:	08008509 	.word	0x08008509
 80085c8:	200008c0 	.word	0x200008c0

080085cc <_fwalk_sglue>:
 80085cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d0:	4607      	mov	r7, r0
 80085d2:	4688      	mov	r8, r1
 80085d4:	4614      	mov	r4, r2
 80085d6:	2600      	movs	r6, #0
 80085d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085dc:	f1b9 0901 	subs.w	r9, r9, #1
 80085e0:	d505      	bpl.n	80085ee <_fwalk_sglue+0x22>
 80085e2:	6824      	ldr	r4, [r4, #0]
 80085e4:	2c00      	cmp	r4, #0
 80085e6:	d1f7      	bne.n	80085d8 <_fwalk_sglue+0xc>
 80085e8:	4630      	mov	r0, r6
 80085ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d907      	bls.n	8008604 <_fwalk_sglue+0x38>
 80085f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085f8:	3301      	adds	r3, #1
 80085fa:	d003      	beq.n	8008604 <_fwalk_sglue+0x38>
 80085fc:	4629      	mov	r1, r5
 80085fe:	4638      	mov	r0, r7
 8008600:	47c0      	blx	r8
 8008602:	4306      	orrs	r6, r0
 8008604:	3568      	adds	r5, #104	@ 0x68
 8008606:	e7e9      	b.n	80085dc <_fwalk_sglue+0x10>

08008608 <_puts_r>:
 8008608:	6a03      	ldr	r3, [r0, #32]
 800860a:	b570      	push	{r4, r5, r6, lr}
 800860c:	6884      	ldr	r4, [r0, #8]
 800860e:	4605      	mov	r5, r0
 8008610:	460e      	mov	r6, r1
 8008612:	b90b      	cbnz	r3, 8008618 <_puts_r+0x10>
 8008614:	f7ff ffc2 	bl	800859c <__sinit>
 8008618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800861a:	07db      	lsls	r3, r3, #31
 800861c:	d405      	bmi.n	800862a <_puts_r+0x22>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	0598      	lsls	r0, r3, #22
 8008622:	d402      	bmi.n	800862a <_puts_r+0x22>
 8008624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008626:	f000 f9e6 	bl	80089f6 <__retarget_lock_acquire_recursive>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	0719      	lsls	r1, r3, #28
 800862e:	d502      	bpl.n	8008636 <_puts_r+0x2e>
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d135      	bne.n	80086a2 <_puts_r+0x9a>
 8008636:	4621      	mov	r1, r4
 8008638:	4628      	mov	r0, r5
 800863a:	f000 f8e7 	bl	800880c <__swsetup_r>
 800863e:	b380      	cbz	r0, 80086a2 <_puts_r+0x9a>
 8008640:	f04f 35ff 	mov.w	r5, #4294967295
 8008644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008646:	07da      	lsls	r2, r3, #31
 8008648:	d405      	bmi.n	8008656 <_puts_r+0x4e>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	059b      	lsls	r3, r3, #22
 800864e:	d402      	bmi.n	8008656 <_puts_r+0x4e>
 8008650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008652:	f000 f9d1 	bl	80089f8 <__retarget_lock_release_recursive>
 8008656:	4628      	mov	r0, r5
 8008658:	bd70      	pop	{r4, r5, r6, pc}
 800865a:	2b00      	cmp	r3, #0
 800865c:	da04      	bge.n	8008668 <_puts_r+0x60>
 800865e:	69a2      	ldr	r2, [r4, #24]
 8008660:	429a      	cmp	r2, r3
 8008662:	dc17      	bgt.n	8008694 <_puts_r+0x8c>
 8008664:	290a      	cmp	r1, #10
 8008666:	d015      	beq.n	8008694 <_puts_r+0x8c>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	6022      	str	r2, [r4, #0]
 800866e:	7019      	strb	r1, [r3, #0]
 8008670:	68a3      	ldr	r3, [r4, #8]
 8008672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008676:	3b01      	subs	r3, #1
 8008678:	60a3      	str	r3, [r4, #8]
 800867a:	2900      	cmp	r1, #0
 800867c:	d1ed      	bne.n	800865a <_puts_r+0x52>
 800867e:	2b00      	cmp	r3, #0
 8008680:	da11      	bge.n	80086a6 <_puts_r+0x9e>
 8008682:	4622      	mov	r2, r4
 8008684:	210a      	movs	r1, #10
 8008686:	4628      	mov	r0, r5
 8008688:	f000 f881 	bl	800878e <__swbuf_r>
 800868c:	3001      	adds	r0, #1
 800868e:	d0d7      	beq.n	8008640 <_puts_r+0x38>
 8008690:	250a      	movs	r5, #10
 8008692:	e7d7      	b.n	8008644 <_puts_r+0x3c>
 8008694:	4622      	mov	r2, r4
 8008696:	4628      	mov	r0, r5
 8008698:	f000 f879 	bl	800878e <__swbuf_r>
 800869c:	3001      	adds	r0, #1
 800869e:	d1e7      	bne.n	8008670 <_puts_r+0x68>
 80086a0:	e7ce      	b.n	8008640 <_puts_r+0x38>
 80086a2:	3e01      	subs	r6, #1
 80086a4:	e7e4      	b.n	8008670 <_puts_r+0x68>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	6022      	str	r2, [r4, #0]
 80086ac:	220a      	movs	r2, #10
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e7ee      	b.n	8008690 <_puts_r+0x88>
	...

080086b4 <puts>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	@ (80086c0 <puts+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f7ff bfa5 	b.w	8008608 <_puts_r>
 80086be:	bf00      	nop
 80086c0:	2000004c 	.word	0x2000004c

080086c4 <siprintf>:
 80086c4:	b40e      	push	{r1, r2, r3}
 80086c6:	b510      	push	{r4, lr}
 80086c8:	b09d      	sub	sp, #116	@ 0x74
 80086ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80086cc:	9002      	str	r0, [sp, #8]
 80086ce:	9006      	str	r0, [sp, #24]
 80086d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80086d4:	480a      	ldr	r0, [pc, #40]	@ (8008700 <siprintf+0x3c>)
 80086d6:	9107      	str	r1, [sp, #28]
 80086d8:	9104      	str	r1, [sp, #16]
 80086da:	490a      	ldr	r1, [pc, #40]	@ (8008704 <siprintf+0x40>)
 80086dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e0:	9105      	str	r1, [sp, #20]
 80086e2:	2400      	movs	r4, #0
 80086e4:	a902      	add	r1, sp, #8
 80086e6:	6800      	ldr	r0, [r0, #0]
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80086ec:	f002 fb4e 	bl	800ad8c <_svfiprintf_r>
 80086f0:	9b02      	ldr	r3, [sp, #8]
 80086f2:	701c      	strb	r4, [r3, #0]
 80086f4:	b01d      	add	sp, #116	@ 0x74
 80086f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086fa:	b003      	add	sp, #12
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	2000004c 	.word	0x2000004c
 8008704:	ffff0208 	.word	0xffff0208

08008708 <__sread>:
 8008708:	b510      	push	{r4, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	f000 f912 	bl	8008938 <_read_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	bfab      	itete	ge
 8008718:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800871a:	89a3      	ldrhlt	r3, [r4, #12]
 800871c:	181b      	addge	r3, r3, r0
 800871e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008722:	bfac      	ite	ge
 8008724:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008726:	81a3      	strhlt	r3, [r4, #12]
 8008728:	bd10      	pop	{r4, pc}

0800872a <__swrite>:
 800872a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872e:	461f      	mov	r7, r3
 8008730:	898b      	ldrh	r3, [r1, #12]
 8008732:	05db      	lsls	r3, r3, #23
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	4616      	mov	r6, r2
 800873a:	d505      	bpl.n	8008748 <__swrite+0x1e>
 800873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008740:	2302      	movs	r3, #2
 8008742:	2200      	movs	r2, #0
 8008744:	f000 f8e6 	bl	8008914 <_lseek_r>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800874e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800875e:	f000 b90d 	b.w	800897c <_write_r>

08008762 <__sseek>:
 8008762:	b510      	push	{r4, lr}
 8008764:	460c      	mov	r4, r1
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 f8d3 	bl	8008914 <_lseek_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	bf15      	itete	ne
 8008774:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008776:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800877a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800877e:	81a3      	strheq	r3, [r4, #12]
 8008780:	bf18      	it	ne
 8008782:	81a3      	strhne	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__sclose>:
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 b8b3 	b.w	80088f4 <_close_r>

0800878e <__swbuf_r>:
 800878e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008790:	460e      	mov	r6, r1
 8008792:	4614      	mov	r4, r2
 8008794:	4605      	mov	r5, r0
 8008796:	b118      	cbz	r0, 80087a0 <__swbuf_r+0x12>
 8008798:	6a03      	ldr	r3, [r0, #32]
 800879a:	b90b      	cbnz	r3, 80087a0 <__swbuf_r+0x12>
 800879c:	f7ff fefe 	bl	800859c <__sinit>
 80087a0:	69a3      	ldr	r3, [r4, #24]
 80087a2:	60a3      	str	r3, [r4, #8]
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	071a      	lsls	r2, r3, #28
 80087a8:	d501      	bpl.n	80087ae <__swbuf_r+0x20>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	b943      	cbnz	r3, 80087c0 <__swbuf_r+0x32>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4628      	mov	r0, r5
 80087b2:	f000 f82b 	bl	800880c <__swsetup_r>
 80087b6:	b118      	cbz	r0, 80087c0 <__swbuf_r+0x32>
 80087b8:	f04f 37ff 	mov.w	r7, #4294967295
 80087bc:	4638      	mov	r0, r7
 80087be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	6922      	ldr	r2, [r4, #16]
 80087c4:	1a98      	subs	r0, r3, r2
 80087c6:	6963      	ldr	r3, [r4, #20]
 80087c8:	b2f6      	uxtb	r6, r6
 80087ca:	4283      	cmp	r3, r0
 80087cc:	4637      	mov	r7, r6
 80087ce:	dc05      	bgt.n	80087dc <__swbuf_r+0x4e>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4628      	mov	r0, r5
 80087d4:	f002 fc5a 	bl	800b08c <_fflush_r>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1ed      	bne.n	80087b8 <__swbuf_r+0x2a>
 80087dc:	68a3      	ldr	r3, [r4, #8]
 80087de:	3b01      	subs	r3, #1
 80087e0:	60a3      	str	r3, [r4, #8]
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	6022      	str	r2, [r4, #0]
 80087e8:	701e      	strb	r6, [r3, #0]
 80087ea:	6962      	ldr	r2, [r4, #20]
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d004      	beq.n	80087fc <__swbuf_r+0x6e>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	07db      	lsls	r3, r3, #31
 80087f6:	d5e1      	bpl.n	80087bc <__swbuf_r+0x2e>
 80087f8:	2e0a      	cmp	r6, #10
 80087fa:	d1df      	bne.n	80087bc <__swbuf_r+0x2e>
 80087fc:	4621      	mov	r1, r4
 80087fe:	4628      	mov	r0, r5
 8008800:	f002 fc44 	bl	800b08c <_fflush_r>
 8008804:	2800      	cmp	r0, #0
 8008806:	d0d9      	beq.n	80087bc <__swbuf_r+0x2e>
 8008808:	e7d6      	b.n	80087b8 <__swbuf_r+0x2a>
	...

0800880c <__swsetup_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4b29      	ldr	r3, [pc, #164]	@ (80088b4 <__swsetup_r+0xa8>)
 8008810:	4605      	mov	r5, r0
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	460c      	mov	r4, r1
 8008816:	b118      	cbz	r0, 8008820 <__swsetup_r+0x14>
 8008818:	6a03      	ldr	r3, [r0, #32]
 800881a:	b90b      	cbnz	r3, 8008820 <__swsetup_r+0x14>
 800881c:	f7ff febe 	bl	800859c <__sinit>
 8008820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008824:	0719      	lsls	r1, r3, #28
 8008826:	d422      	bmi.n	800886e <__swsetup_r+0x62>
 8008828:	06da      	lsls	r2, r3, #27
 800882a:	d407      	bmi.n	800883c <__swsetup_r+0x30>
 800882c:	2209      	movs	r2, #9
 800882e:	602a      	str	r2, [r5, #0]
 8008830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	e033      	b.n	80088a4 <__swsetup_r+0x98>
 800883c:	0758      	lsls	r0, r3, #29
 800883e:	d512      	bpl.n	8008866 <__swsetup_r+0x5a>
 8008840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008842:	b141      	cbz	r1, 8008856 <__swsetup_r+0x4a>
 8008844:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008848:	4299      	cmp	r1, r3
 800884a:	d002      	beq.n	8008852 <__swsetup_r+0x46>
 800884c:	4628      	mov	r0, r5
 800884e:	f000 ff43 	bl	80096d8 <_free_r>
 8008852:	2300      	movs	r3, #0
 8008854:	6363      	str	r3, [r4, #52]	@ 0x34
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	2300      	movs	r3, #0
 8008860:	6063      	str	r3, [r4, #4]
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f043 0308 	orr.w	r3, r3, #8
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	b94b      	cbnz	r3, 8008886 <__swsetup_r+0x7a>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800887c:	d003      	beq.n	8008886 <__swsetup_r+0x7a>
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f002 fc51 	bl	800b128 <__smakebuf_r>
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	f013 0201 	ands.w	r2, r3, #1
 800888e:	d00a      	beq.n	80088a6 <__swsetup_r+0x9a>
 8008890:	2200      	movs	r2, #0
 8008892:	60a2      	str	r2, [r4, #8]
 8008894:	6962      	ldr	r2, [r4, #20]
 8008896:	4252      	negs	r2, r2
 8008898:	61a2      	str	r2, [r4, #24]
 800889a:	6922      	ldr	r2, [r4, #16]
 800889c:	b942      	cbnz	r2, 80088b0 <__swsetup_r+0xa4>
 800889e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088a2:	d1c5      	bne.n	8008830 <__swsetup_r+0x24>
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	0799      	lsls	r1, r3, #30
 80088a8:	bf58      	it	pl
 80088aa:	6962      	ldrpl	r2, [r4, #20]
 80088ac:	60a2      	str	r2, [r4, #8]
 80088ae:	e7f4      	b.n	800889a <__swsetup_r+0x8e>
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7f7      	b.n	80088a4 <__swsetup_r+0x98>
 80088b4:	2000004c 	.word	0x2000004c

080088b8 <memset>:
 80088b8:	4402      	add	r2, r0
 80088ba:	4603      	mov	r3, r0
 80088bc:	4293      	cmp	r3, r2
 80088be:	d100      	bne.n	80088c2 <memset+0xa>
 80088c0:	4770      	bx	lr
 80088c2:	f803 1b01 	strb.w	r1, [r3], #1
 80088c6:	e7f9      	b.n	80088bc <memset+0x4>

080088c8 <strncmp>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	b16a      	cbz	r2, 80088e8 <strncmp+0x20>
 80088cc:	3901      	subs	r1, #1
 80088ce:	1884      	adds	r4, r0, r2
 80088d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088d8:	429a      	cmp	r2, r3
 80088da:	d103      	bne.n	80088e4 <strncmp+0x1c>
 80088dc:	42a0      	cmp	r0, r4
 80088de:	d001      	beq.n	80088e4 <strncmp+0x1c>
 80088e0:	2a00      	cmp	r2, #0
 80088e2:	d1f5      	bne.n	80088d0 <strncmp+0x8>
 80088e4:	1ad0      	subs	r0, r2, r3
 80088e6:	bd10      	pop	{r4, pc}
 80088e8:	4610      	mov	r0, r2
 80088ea:	e7fc      	b.n	80088e6 <strncmp+0x1e>

080088ec <_localeconv_r>:
 80088ec:	4800      	ldr	r0, [pc, #0]	@ (80088f0 <_localeconv_r+0x4>)
 80088ee:	4770      	bx	lr
 80088f0:	2000018c 	.word	0x2000018c

080088f4 <_close_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d06      	ldr	r5, [pc, #24]	@ (8008910 <_close_r+0x1c>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	602b      	str	r3, [r5, #0]
 8008900:	f7f9 fb36 	bl	8001f70 <_close>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_close_r+0x1a>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_close_r+0x1a>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	200008c4 	.word	0x200008c4

08008914 <_lseek_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	@ (8008934 <_lseek_r+0x20>)
 8008918:	4604      	mov	r4, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f9 fb4b 	bl	8001fbe <_lseek>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_lseek_r+0x1e>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_lseek_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	200008c4 	.word	0x200008c4

08008938 <_read_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	@ (8008958 <_read_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f9 faf5 	bl	8001f36 <_read>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_read_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_read_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	200008c4 	.word	0x200008c4

0800895c <_sbrk_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d06      	ldr	r5, [pc, #24]	@ (8008978 <_sbrk_r+0x1c>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	f7f9 fb36 	bl	8001fd8 <_sbrk>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_sbrk_r+0x1a>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_sbrk_r+0x1a>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	200008c4 	.word	0x200008c4

0800897c <_write_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d07      	ldr	r5, [pc, #28]	@ (800899c <_write_r+0x20>)
 8008980:	4604      	mov	r4, r0
 8008982:	4608      	mov	r0, r1
 8008984:	4611      	mov	r1, r2
 8008986:	2200      	movs	r2, #0
 8008988:	602a      	str	r2, [r5, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	f7f9 fcd2 	bl	8002334 <_write>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_write_r+0x1e>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_write_r+0x1e>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	200008c4 	.word	0x200008c4

080089a0 <__errno>:
 80089a0:	4b01      	ldr	r3, [pc, #4]	@ (80089a8 <__errno+0x8>)
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	2000004c 	.word	0x2000004c

080089ac <__libc_init_array>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	4d0d      	ldr	r5, [pc, #52]	@ (80089e4 <__libc_init_array+0x38>)
 80089b0:	4c0d      	ldr	r4, [pc, #52]	@ (80089e8 <__libc_init_array+0x3c>)
 80089b2:	1b64      	subs	r4, r4, r5
 80089b4:	10a4      	asrs	r4, r4, #2
 80089b6:	2600      	movs	r6, #0
 80089b8:	42a6      	cmp	r6, r4
 80089ba:	d109      	bne.n	80089d0 <__libc_init_array+0x24>
 80089bc:	4d0b      	ldr	r5, [pc, #44]	@ (80089ec <__libc_init_array+0x40>)
 80089be:	4c0c      	ldr	r4, [pc, #48]	@ (80089f0 <__libc_init_array+0x44>)
 80089c0:	f003 f990 	bl	800bce4 <_init>
 80089c4:	1b64      	subs	r4, r4, r5
 80089c6:	10a4      	asrs	r4, r4, #2
 80089c8:	2600      	movs	r6, #0
 80089ca:	42a6      	cmp	r6, r4
 80089cc:	d105      	bne.n	80089da <__libc_init_array+0x2e>
 80089ce:	bd70      	pop	{r4, r5, r6, pc}
 80089d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d4:	4798      	blx	r3
 80089d6:	3601      	adds	r6, #1
 80089d8:	e7ee      	b.n	80089b8 <__libc_init_array+0xc>
 80089da:	f855 3b04 	ldr.w	r3, [r5], #4
 80089de:	4798      	blx	r3
 80089e0:	3601      	adds	r6, #1
 80089e2:	e7f2      	b.n	80089ca <__libc_init_array+0x1e>
 80089e4:	0800c220 	.word	0x0800c220
 80089e8:	0800c220 	.word	0x0800c220
 80089ec:	0800c220 	.word	0x0800c220
 80089f0:	0800c224 	.word	0x0800c224

080089f4 <__retarget_lock_init_recursive>:
 80089f4:	4770      	bx	lr

080089f6 <__retarget_lock_acquire_recursive>:
 80089f6:	4770      	bx	lr

080089f8 <__retarget_lock_release_recursive>:
 80089f8:	4770      	bx	lr

080089fa <memcpy>:
 80089fa:	440a      	add	r2, r1
 80089fc:	4291      	cmp	r1, r2
 80089fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a02:	d100      	bne.n	8008a06 <memcpy+0xc>
 8008a04:	4770      	bx	lr
 8008a06:	b510      	push	{r4, lr}
 8008a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a10:	4291      	cmp	r1, r2
 8008a12:	d1f9      	bne.n	8008a08 <memcpy+0xe>
 8008a14:	bd10      	pop	{r4, pc}
	...

08008a18 <nanf>:
 8008a18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008a20 <nanf+0x8>
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	7fc00000 	.word	0x7fc00000

08008a24 <quorem>:
 8008a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	6903      	ldr	r3, [r0, #16]
 8008a2a:	690c      	ldr	r4, [r1, #16]
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	4607      	mov	r7, r0
 8008a30:	db7e      	blt.n	8008b30 <quorem+0x10c>
 8008a32:	3c01      	subs	r4, #1
 8008a34:	f101 0814 	add.w	r8, r1, #20
 8008a38:	00a3      	lsls	r3, r4, #2
 8008a3a:	f100 0514 	add.w	r5, r0, #20
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	429a      	cmp	r2, r3
 8008a52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a56:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a5a:	d32e      	bcc.n	8008aba <quorem+0x96>
 8008a5c:	f04f 0a00 	mov.w	sl, #0
 8008a60:	46c4      	mov	ip, r8
 8008a62:	46ae      	mov	lr, r5
 8008a64:	46d3      	mov	fp, sl
 8008a66:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a6a:	b298      	uxth	r0, r3
 8008a6c:	fb06 a000 	mla	r0, r6, r0, sl
 8008a70:	0c02      	lsrs	r2, r0, #16
 8008a72:	0c1b      	lsrs	r3, r3, #16
 8008a74:	fb06 2303 	mla	r3, r6, r3, r2
 8008a78:	f8de 2000 	ldr.w	r2, [lr]
 8008a7c:	b280      	uxth	r0, r0
 8008a7e:	b292      	uxth	r2, r2
 8008a80:	1a12      	subs	r2, r2, r0
 8008a82:	445a      	add	r2, fp
 8008a84:	f8de 0000 	ldr.w	r0, [lr]
 8008a88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a96:	b292      	uxth	r2, r2
 8008a98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a9c:	45e1      	cmp	r9, ip
 8008a9e:	f84e 2b04 	str.w	r2, [lr], #4
 8008aa2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008aa6:	d2de      	bcs.n	8008a66 <quorem+0x42>
 8008aa8:	9b00      	ldr	r3, [sp, #0]
 8008aaa:	58eb      	ldr	r3, [r5, r3]
 8008aac:	b92b      	cbnz	r3, 8008aba <quorem+0x96>
 8008aae:	9b01      	ldr	r3, [sp, #4]
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	429d      	cmp	r5, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	d32f      	bcc.n	8008b18 <quorem+0xf4>
 8008ab8:	613c      	str	r4, [r7, #16]
 8008aba:	4638      	mov	r0, r7
 8008abc:	f001 f912 	bl	8009ce4 <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	db25      	blt.n	8008b10 <quorem+0xec>
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008acc:	f8d1 c000 	ldr.w	ip, [r1]
 8008ad0:	fa1f fe82 	uxth.w	lr, r2
 8008ad4:	fa1f f38c 	uxth.w	r3, ip
 8008ad8:	eba3 030e 	sub.w	r3, r3, lr
 8008adc:	4403      	add	r3, r0
 8008ade:	0c12      	lsrs	r2, r2, #16
 8008ae0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ae4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aee:	45c1      	cmp	r9, r8
 8008af0:	f841 3b04 	str.w	r3, [r1], #4
 8008af4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008af8:	d2e6      	bcs.n	8008ac8 <quorem+0xa4>
 8008afa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b02:	b922      	cbnz	r2, 8008b0e <quorem+0xea>
 8008b04:	3b04      	subs	r3, #4
 8008b06:	429d      	cmp	r5, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	d30b      	bcc.n	8008b24 <quorem+0x100>
 8008b0c:	613c      	str	r4, [r7, #16]
 8008b0e:	3601      	adds	r6, #1
 8008b10:	4630      	mov	r0, r6
 8008b12:	b003      	add	sp, #12
 8008b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	3b04      	subs	r3, #4
 8008b1c:	2a00      	cmp	r2, #0
 8008b1e:	d1cb      	bne.n	8008ab8 <quorem+0x94>
 8008b20:	3c01      	subs	r4, #1
 8008b22:	e7c6      	b.n	8008ab2 <quorem+0x8e>
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	3b04      	subs	r3, #4
 8008b28:	2a00      	cmp	r2, #0
 8008b2a:	d1ef      	bne.n	8008b0c <quorem+0xe8>
 8008b2c:	3c01      	subs	r4, #1
 8008b2e:	e7ea      	b.n	8008b06 <quorem+0xe2>
 8008b30:	2000      	movs	r0, #0
 8008b32:	e7ee      	b.n	8008b12 <quorem+0xee>
 8008b34:	0000      	movs	r0, r0
	...

08008b38 <_dtoa_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	69c7      	ldr	r7, [r0, #28]
 8008b3e:	b097      	sub	sp, #92	@ 0x5c
 8008b40:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008b44:	ec55 4b10 	vmov	r4, r5, d0
 8008b48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008b4a:	9107      	str	r1, [sp, #28]
 8008b4c:	4681      	mov	r9, r0
 8008b4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b50:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b52:	b97f      	cbnz	r7, 8008b74 <_dtoa_r+0x3c>
 8008b54:	2010      	movs	r0, #16
 8008b56:	f7fe fcf7 	bl	8007548 <malloc>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008b60:	b920      	cbnz	r0, 8008b6c <_dtoa_r+0x34>
 8008b62:	4ba9      	ldr	r3, [pc, #676]	@ (8008e08 <_dtoa_r+0x2d0>)
 8008b64:	21ef      	movs	r1, #239	@ 0xef
 8008b66:	48a9      	ldr	r0, [pc, #676]	@ (8008e0c <_dtoa_r+0x2d4>)
 8008b68:	f002 fb5e 	bl	800b228 <__assert_func>
 8008b6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b70:	6007      	str	r7, [r0, #0]
 8008b72:	60c7      	str	r7, [r0, #12]
 8008b74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	b159      	cbz	r1, 8008b94 <_dtoa_r+0x5c>
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	604a      	str	r2, [r1, #4]
 8008b80:	2301      	movs	r3, #1
 8008b82:	4093      	lsls	r3, r2
 8008b84:	608b      	str	r3, [r1, #8]
 8008b86:	4648      	mov	r0, r9
 8008b88:	f000 fe30 	bl	80097ec <_Bfree>
 8008b8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	1e2b      	subs	r3, r5, #0
 8008b96:	bfb9      	ittee	lt
 8008b98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b9c:	9305      	strlt	r3, [sp, #20]
 8008b9e:	2300      	movge	r3, #0
 8008ba0:	6033      	strge	r3, [r6, #0]
 8008ba2:	9f05      	ldr	r7, [sp, #20]
 8008ba4:	4b9a      	ldr	r3, [pc, #616]	@ (8008e10 <_dtoa_r+0x2d8>)
 8008ba6:	bfbc      	itt	lt
 8008ba8:	2201      	movlt	r2, #1
 8008baa:	6032      	strlt	r2, [r6, #0]
 8008bac:	43bb      	bics	r3, r7
 8008bae:	d112      	bne.n	8008bd6 <_dtoa_r+0x9e>
 8008bb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008bb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bbc:	4323      	orrs	r3, r4
 8008bbe:	f000 855a 	beq.w	8009676 <_dtoa_r+0xb3e>
 8008bc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bc4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008e24 <_dtoa_r+0x2ec>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 855c 	beq.w	8009686 <_dtoa_r+0xb4e>
 8008bce:	f10a 0303 	add.w	r3, sl, #3
 8008bd2:	f000 bd56 	b.w	8009682 <_dtoa_r+0xb4a>
 8008bd6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	ec51 0b17 	vmov	r0, r1, d7
 8008be0:	2300      	movs	r3, #0
 8008be2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008be6:	f7f7 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bea:	4680      	mov	r8, r0
 8008bec:	b158      	cbz	r0, 8008c06 <_dtoa_r+0xce>
 8008bee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bf6:	b113      	cbz	r3, 8008bfe <_dtoa_r+0xc6>
 8008bf8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008bfa:	4b86      	ldr	r3, [pc, #536]	@ (8008e14 <_dtoa_r+0x2dc>)
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008e28 <_dtoa_r+0x2f0>
 8008c02:	f000 bd40 	b.w	8009686 <_dtoa_r+0xb4e>
 8008c06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008c0a:	aa14      	add	r2, sp, #80	@ 0x50
 8008c0c:	a915      	add	r1, sp, #84	@ 0x54
 8008c0e:	4648      	mov	r0, r9
 8008c10:	f001 f988 	bl	8009f24 <__d2b>
 8008c14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c18:	9002      	str	r0, [sp, #8]
 8008c1a:	2e00      	cmp	r6, #0
 8008c1c:	d078      	beq.n	8008d10 <_dtoa_r+0x1d8>
 8008c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c38:	4619      	mov	r1, r3
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4b76      	ldr	r3, [pc, #472]	@ (8008e18 <_dtoa_r+0x2e0>)
 8008c3e:	f7f7 fb23 	bl	8000288 <__aeabi_dsub>
 8008c42:	a36b      	add	r3, pc, #428	@ (adr r3, 8008df0 <_dtoa_r+0x2b8>)
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f7f7 fcd6 	bl	80005f8 <__aeabi_dmul>
 8008c4c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008df8 <_dtoa_r+0x2c0>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	f7f7 fb1b 	bl	800028c <__adddf3>
 8008c56:	4604      	mov	r4, r0
 8008c58:	4630      	mov	r0, r6
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	f7f7 fc62 	bl	8000524 <__aeabi_i2d>
 8008c60:	a367      	add	r3, pc, #412	@ (adr r3, 8008e00 <_dtoa_r+0x2c8>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fcc7 	bl	80005f8 <__aeabi_dmul>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4620      	mov	r0, r4
 8008c70:	4629      	mov	r1, r5
 8008c72:	f7f7 fb0b 	bl	800028c <__adddf3>
 8008c76:	4604      	mov	r4, r0
 8008c78:	460d      	mov	r5, r1
 8008c7a:	f7f7 ff6d 	bl	8000b58 <__aeabi_d2iz>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4607      	mov	r7, r0
 8008c82:	2300      	movs	r3, #0
 8008c84:	4620      	mov	r0, r4
 8008c86:	4629      	mov	r1, r5
 8008c88:	f7f7 ff28 	bl	8000adc <__aeabi_dcmplt>
 8008c8c:	b140      	cbz	r0, 8008ca0 <_dtoa_r+0x168>
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f7f7 fc48 	bl	8000524 <__aeabi_i2d>
 8008c94:	4622      	mov	r2, r4
 8008c96:	462b      	mov	r3, r5
 8008c98:	f7f7 ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c9c:	b900      	cbnz	r0, 8008ca0 <_dtoa_r+0x168>
 8008c9e:	3f01      	subs	r7, #1
 8008ca0:	2f16      	cmp	r7, #22
 8008ca2:	d852      	bhi.n	8008d4a <_dtoa_r+0x212>
 8008ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8008e1c <_dtoa_r+0x2e4>)
 8008ca6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cb2:	f7f7 ff13 	bl	8000adc <__aeabi_dcmplt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d049      	beq.n	8008d4e <_dtoa_r+0x216>
 8008cba:	3f01      	subs	r7, #1
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008cc2:	1b9b      	subs	r3, r3, r6
 8008cc4:	1e5a      	subs	r2, r3, #1
 8008cc6:	bf45      	ittet	mi
 8008cc8:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ccc:	9300      	strmi	r3, [sp, #0]
 8008cce:	2300      	movpl	r3, #0
 8008cd0:	2300      	movmi	r3, #0
 8008cd2:	9206      	str	r2, [sp, #24]
 8008cd4:	bf54      	ite	pl
 8008cd6:	9300      	strpl	r3, [sp, #0]
 8008cd8:	9306      	strmi	r3, [sp, #24]
 8008cda:	2f00      	cmp	r7, #0
 8008cdc:	db39      	blt.n	8008d52 <_dtoa_r+0x21a>
 8008cde:	9b06      	ldr	r3, [sp, #24]
 8008ce0:	970d      	str	r7, [sp, #52]	@ 0x34
 8008ce2:	443b      	add	r3, r7
 8008ce4:	9306      	str	r3, [sp, #24]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9308      	str	r3, [sp, #32]
 8008cea:	9b07      	ldr	r3, [sp, #28]
 8008cec:	2b09      	cmp	r3, #9
 8008cee:	d863      	bhi.n	8008db8 <_dtoa_r+0x280>
 8008cf0:	2b05      	cmp	r3, #5
 8008cf2:	bfc4      	itt	gt
 8008cf4:	3b04      	subgt	r3, #4
 8008cf6:	9307      	strgt	r3, [sp, #28]
 8008cf8:	9b07      	ldr	r3, [sp, #28]
 8008cfa:	f1a3 0302 	sub.w	r3, r3, #2
 8008cfe:	bfcc      	ite	gt
 8008d00:	2400      	movgt	r4, #0
 8008d02:	2401      	movle	r4, #1
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d863      	bhi.n	8008dd0 <_dtoa_r+0x298>
 8008d08:	e8df f003 	tbb	[pc, r3]
 8008d0c:	2b375452 	.word	0x2b375452
 8008d10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008d14:	441e      	add	r6, r3
 8008d16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	bfc1      	itttt	gt
 8008d1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d22:	409f      	lslgt	r7, r3
 8008d24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d2c:	bfd6      	itet	le
 8008d2e:	f1c3 0320 	rsble	r3, r3, #32
 8008d32:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d36:	fa04 f003 	lslle.w	r0, r4, r3
 8008d3a:	f7f7 fbe3 	bl	8000504 <__aeabi_ui2d>
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d44:	3e01      	subs	r6, #1
 8008d46:	9212      	str	r2, [sp, #72]	@ 0x48
 8008d48:	e776      	b.n	8008c38 <_dtoa_r+0x100>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e7b7      	b.n	8008cbe <_dtoa_r+0x186>
 8008d4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008d50:	e7b6      	b.n	8008cc0 <_dtoa_r+0x188>
 8008d52:	9b00      	ldr	r3, [sp, #0]
 8008d54:	1bdb      	subs	r3, r3, r7
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	427b      	negs	r3, r7
 8008d5a:	9308      	str	r3, [sp, #32]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d60:	e7c3      	b.n	8008cea <_dtoa_r+0x1b2>
 8008d62:	2301      	movs	r3, #1
 8008d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d68:	eb07 0b03 	add.w	fp, r7, r3
 8008d6c:	f10b 0301 	add.w	r3, fp, #1
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	9303      	str	r3, [sp, #12]
 8008d74:	bfb8      	it	lt
 8008d76:	2301      	movlt	r3, #1
 8008d78:	e006      	b.n	8008d88 <_dtoa_r+0x250>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dd28      	ble.n	8008dd6 <_dtoa_r+0x29e>
 8008d84:	469b      	mov	fp, r3
 8008d86:	9303      	str	r3, [sp, #12]
 8008d88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	2204      	movs	r2, #4
 8008d90:	f102 0514 	add.w	r5, r2, #20
 8008d94:	429d      	cmp	r5, r3
 8008d96:	d926      	bls.n	8008de6 <_dtoa_r+0x2ae>
 8008d98:	6041      	str	r1, [r0, #4]
 8008d9a:	4648      	mov	r0, r9
 8008d9c:	f000 fce6 	bl	800976c <_Balloc>
 8008da0:	4682      	mov	sl, r0
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d142      	bne.n	8008e2c <_dtoa_r+0x2f4>
 8008da6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e20 <_dtoa_r+0x2e8>)
 8008da8:	4602      	mov	r2, r0
 8008daa:	f240 11af 	movw	r1, #431	@ 0x1af
 8008dae:	e6da      	b.n	8008b66 <_dtoa_r+0x2e>
 8008db0:	2300      	movs	r3, #0
 8008db2:	e7e3      	b.n	8008d7c <_dtoa_r+0x244>
 8008db4:	2300      	movs	r3, #0
 8008db6:	e7d5      	b.n	8008d64 <_dtoa_r+0x22c>
 8008db8:	2401      	movs	r4, #1
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9307      	str	r3, [sp, #28]
 8008dbe:	9409      	str	r4, [sp, #36]	@ 0x24
 8008dc0:	f04f 3bff 	mov.w	fp, #4294967295
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8008dca:	2312      	movs	r3, #18
 8008dcc:	920c      	str	r2, [sp, #48]	@ 0x30
 8008dce:	e7db      	b.n	8008d88 <_dtoa_r+0x250>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dd4:	e7f4      	b.n	8008dc0 <_dtoa_r+0x288>
 8008dd6:	f04f 0b01 	mov.w	fp, #1
 8008dda:	f8cd b00c 	str.w	fp, [sp, #12]
 8008dde:	465b      	mov	r3, fp
 8008de0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008de4:	e7d0      	b.n	8008d88 <_dtoa_r+0x250>
 8008de6:	3101      	adds	r1, #1
 8008de8:	0052      	lsls	r2, r2, #1
 8008dea:	e7d1      	b.n	8008d90 <_dtoa_r+0x258>
 8008dec:	f3af 8000 	nop.w
 8008df0:	636f4361 	.word	0x636f4361
 8008df4:	3fd287a7 	.word	0x3fd287a7
 8008df8:	8b60c8b3 	.word	0x8b60c8b3
 8008dfc:	3fc68a28 	.word	0x3fc68a28
 8008e00:	509f79fb 	.word	0x509f79fb
 8008e04:	3fd34413 	.word	0x3fd34413
 8008e08:	0800bf37 	.word	0x0800bf37
 8008e0c:	0800bf4e 	.word	0x0800bf4e
 8008e10:	7ff00000 	.word	0x7ff00000
 8008e14:	0800bf02 	.word	0x0800bf02
 8008e18:	3ff80000 	.word	0x3ff80000
 8008e1c:	0800c100 	.word	0x0800c100
 8008e20:	0800bfa6 	.word	0x0800bfa6
 8008e24:	0800bf33 	.word	0x0800bf33
 8008e28:	0800bf01 	.word	0x0800bf01
 8008e2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e30:	6018      	str	r0, [r3, #0]
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	2b0e      	cmp	r3, #14
 8008e36:	f200 80a1 	bhi.w	8008f7c <_dtoa_r+0x444>
 8008e3a:	2c00      	cmp	r4, #0
 8008e3c:	f000 809e 	beq.w	8008f7c <_dtoa_r+0x444>
 8008e40:	2f00      	cmp	r7, #0
 8008e42:	dd33      	ble.n	8008eac <_dtoa_r+0x374>
 8008e44:	4b9c      	ldr	r3, [pc, #624]	@ (80090b8 <_dtoa_r+0x580>)
 8008e46:	f007 020f 	and.w	r2, r7, #15
 8008e4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e4e:	ed93 7b00 	vldr	d7, [r3]
 8008e52:	05f8      	lsls	r0, r7, #23
 8008e54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008e58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e5c:	d516      	bpl.n	8008e8c <_dtoa_r+0x354>
 8008e5e:	4b97      	ldr	r3, [pc, #604]	@ (80090bc <_dtoa_r+0x584>)
 8008e60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e68:	f7f7 fcf0 	bl	800084c <__aeabi_ddiv>
 8008e6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e70:	f004 040f 	and.w	r4, r4, #15
 8008e74:	2603      	movs	r6, #3
 8008e76:	4d91      	ldr	r5, [pc, #580]	@ (80090bc <_dtoa_r+0x584>)
 8008e78:	b954      	cbnz	r4, 8008e90 <_dtoa_r+0x358>
 8008e7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e82:	f7f7 fce3 	bl	800084c <__aeabi_ddiv>
 8008e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e8a:	e028      	b.n	8008ede <_dtoa_r+0x3a6>
 8008e8c:	2602      	movs	r6, #2
 8008e8e:	e7f2      	b.n	8008e76 <_dtoa_r+0x33e>
 8008e90:	07e1      	lsls	r1, r4, #31
 8008e92:	d508      	bpl.n	8008ea6 <_dtoa_r+0x36e>
 8008e94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e9c:	f7f7 fbac 	bl	80005f8 <__aeabi_dmul>
 8008ea0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	1064      	asrs	r4, r4, #1
 8008ea8:	3508      	adds	r5, #8
 8008eaa:	e7e5      	b.n	8008e78 <_dtoa_r+0x340>
 8008eac:	f000 80af 	beq.w	800900e <_dtoa_r+0x4d6>
 8008eb0:	427c      	negs	r4, r7
 8008eb2:	4b81      	ldr	r3, [pc, #516]	@ (80090b8 <_dtoa_r+0x580>)
 8008eb4:	4d81      	ldr	r5, [pc, #516]	@ (80090bc <_dtoa_r+0x584>)
 8008eb6:	f004 020f 	and.w	r2, r4, #15
 8008eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ec6:	f7f7 fb97 	bl	80005f8 <__aeabi_dmul>
 8008eca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ece:	1124      	asrs	r4, r4, #4
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	2602      	movs	r6, #2
 8008ed4:	2c00      	cmp	r4, #0
 8008ed6:	f040 808f 	bne.w	8008ff8 <_dtoa_r+0x4c0>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1d3      	bne.n	8008e86 <_dtoa_r+0x34e>
 8008ede:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ee0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8094 	beq.w	8009012 <_dtoa_r+0x4da>
 8008eea:	4b75      	ldr	r3, [pc, #468]	@ (80090c0 <_dtoa_r+0x588>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 fdf3 	bl	8000adc <__aeabi_dcmplt>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f000 808b 	beq.w	8009012 <_dtoa_r+0x4da>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 8087 	beq.w	8009012 <_dtoa_r+0x4da>
 8008f04:	f1bb 0f00 	cmp.w	fp, #0
 8008f08:	dd34      	ble.n	8008f74 <_dtoa_r+0x43c>
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80090c4 <_dtoa_r+0x58c>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4629      	mov	r1, r5
 8008f12:	f7f7 fb71 	bl	80005f8 <__aeabi_dmul>
 8008f16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f1a:	f107 38ff 	add.w	r8, r7, #4294967295
 8008f1e:	3601      	adds	r6, #1
 8008f20:	465c      	mov	r4, fp
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7f7 fafe 	bl	8000524 <__aeabi_i2d>
 8008f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f2c:	f7f7 fb64 	bl	80005f8 <__aeabi_dmul>
 8008f30:	4b65      	ldr	r3, [pc, #404]	@ (80090c8 <_dtoa_r+0x590>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	f7f7 f9aa 	bl	800028c <__adddf3>
 8008f38:	4605      	mov	r5, r0
 8008f3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f3e:	2c00      	cmp	r4, #0
 8008f40:	d16a      	bne.n	8009018 <_dtoa_r+0x4e0>
 8008f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f46:	4b61      	ldr	r3, [pc, #388]	@ (80090cc <_dtoa_r+0x594>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f7f7 f99d 	bl	8000288 <__aeabi_dsub>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f56:	462a      	mov	r2, r5
 8008f58:	4633      	mov	r3, r6
 8008f5a:	f7f7 fddd 	bl	8000b18 <__aeabi_dcmpgt>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f040 8298 	bne.w	8009494 <_dtoa_r+0x95c>
 8008f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f68:	462a      	mov	r2, r5
 8008f6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f6e:	f7f7 fdb5 	bl	8000adc <__aeabi_dcmplt>
 8008f72:	bb38      	cbnz	r0, 8008fc4 <_dtoa_r+0x48c>
 8008f74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008f78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f2c0 8157 	blt.w	8009232 <_dtoa_r+0x6fa>
 8008f84:	2f0e      	cmp	r7, #14
 8008f86:	f300 8154 	bgt.w	8009232 <_dtoa_r+0x6fa>
 8008f8a:	4b4b      	ldr	r3, [pc, #300]	@ (80090b8 <_dtoa_r+0x580>)
 8008f8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f90:	ed93 7b00 	vldr	d7, [r3]
 8008f94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	ed8d 7b00 	vstr	d7, [sp]
 8008f9c:	f280 80e5 	bge.w	800916a <_dtoa_r+0x632>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f300 80e1 	bgt.w	800916a <_dtoa_r+0x632>
 8008fa8:	d10c      	bne.n	8008fc4 <_dtoa_r+0x48c>
 8008faa:	4b48      	ldr	r3, [pc, #288]	@ (80090cc <_dtoa_r+0x594>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	ec51 0b17 	vmov	r0, r1, d7
 8008fb2:	f7f7 fb21 	bl	80005f8 <__aeabi_dmul>
 8008fb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fba:	f7f7 fda3 	bl	8000b04 <__aeabi_dcmpge>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f000 8266 	beq.w	8009490 <_dtoa_r+0x958>
 8008fc4:	2400      	movs	r4, #0
 8008fc6:	4625      	mov	r5, r4
 8008fc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fca:	4656      	mov	r6, sl
 8008fcc:	ea6f 0803 	mvn.w	r8, r3
 8008fd0:	2700      	movs	r7, #0
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4648      	mov	r0, r9
 8008fd6:	f000 fc09 	bl	80097ec <_Bfree>
 8008fda:	2d00      	cmp	r5, #0
 8008fdc:	f000 80bd 	beq.w	800915a <_dtoa_r+0x622>
 8008fe0:	b12f      	cbz	r7, 8008fee <_dtoa_r+0x4b6>
 8008fe2:	42af      	cmp	r7, r5
 8008fe4:	d003      	beq.n	8008fee <_dtoa_r+0x4b6>
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	4648      	mov	r0, r9
 8008fea:	f000 fbff 	bl	80097ec <_Bfree>
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4648      	mov	r0, r9
 8008ff2:	f000 fbfb 	bl	80097ec <_Bfree>
 8008ff6:	e0b0      	b.n	800915a <_dtoa_r+0x622>
 8008ff8:	07e2      	lsls	r2, r4, #31
 8008ffa:	d505      	bpl.n	8009008 <_dtoa_r+0x4d0>
 8008ffc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009000:	f7f7 fafa 	bl	80005f8 <__aeabi_dmul>
 8009004:	3601      	adds	r6, #1
 8009006:	2301      	movs	r3, #1
 8009008:	1064      	asrs	r4, r4, #1
 800900a:	3508      	adds	r5, #8
 800900c:	e762      	b.n	8008ed4 <_dtoa_r+0x39c>
 800900e:	2602      	movs	r6, #2
 8009010:	e765      	b.n	8008ede <_dtoa_r+0x3a6>
 8009012:	9c03      	ldr	r4, [sp, #12]
 8009014:	46b8      	mov	r8, r7
 8009016:	e784      	b.n	8008f22 <_dtoa_r+0x3ea>
 8009018:	4b27      	ldr	r3, [pc, #156]	@ (80090b8 <_dtoa_r+0x580>)
 800901a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800901c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009020:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009024:	4454      	add	r4, sl
 8009026:	2900      	cmp	r1, #0
 8009028:	d054      	beq.n	80090d4 <_dtoa_r+0x59c>
 800902a:	4929      	ldr	r1, [pc, #164]	@ (80090d0 <_dtoa_r+0x598>)
 800902c:	2000      	movs	r0, #0
 800902e:	f7f7 fc0d 	bl	800084c <__aeabi_ddiv>
 8009032:	4633      	mov	r3, r6
 8009034:	462a      	mov	r2, r5
 8009036:	f7f7 f927 	bl	8000288 <__aeabi_dsub>
 800903a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800903e:	4656      	mov	r6, sl
 8009040:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009044:	f7f7 fd88 	bl	8000b58 <__aeabi_d2iz>
 8009048:	4605      	mov	r5, r0
 800904a:	f7f7 fa6b 	bl	8000524 <__aeabi_i2d>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009056:	f7f7 f917 	bl	8000288 <__aeabi_dsub>
 800905a:	3530      	adds	r5, #48	@ 0x30
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009064:	f806 5b01 	strb.w	r5, [r6], #1
 8009068:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800906c:	f7f7 fd36 	bl	8000adc <__aeabi_dcmplt>
 8009070:	2800      	cmp	r0, #0
 8009072:	d172      	bne.n	800915a <_dtoa_r+0x622>
 8009074:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009078:	4911      	ldr	r1, [pc, #68]	@ (80090c0 <_dtoa_r+0x588>)
 800907a:	2000      	movs	r0, #0
 800907c:	f7f7 f904 	bl	8000288 <__aeabi_dsub>
 8009080:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009084:	f7f7 fd2a 	bl	8000adc <__aeabi_dcmplt>
 8009088:	2800      	cmp	r0, #0
 800908a:	f040 80b4 	bne.w	80091f6 <_dtoa_r+0x6be>
 800908e:	42a6      	cmp	r6, r4
 8009090:	f43f af70 	beq.w	8008f74 <_dtoa_r+0x43c>
 8009094:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009098:	4b0a      	ldr	r3, [pc, #40]	@ (80090c4 <_dtoa_r+0x58c>)
 800909a:	2200      	movs	r2, #0
 800909c:	f7f7 faac 	bl	80005f8 <__aeabi_dmul>
 80090a0:	4b08      	ldr	r3, [pc, #32]	@ (80090c4 <_dtoa_r+0x58c>)
 80090a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090a6:	2200      	movs	r2, #0
 80090a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090ac:	f7f7 faa4 	bl	80005f8 <__aeabi_dmul>
 80090b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090b4:	e7c4      	b.n	8009040 <_dtoa_r+0x508>
 80090b6:	bf00      	nop
 80090b8:	0800c100 	.word	0x0800c100
 80090bc:	0800c0d8 	.word	0x0800c0d8
 80090c0:	3ff00000 	.word	0x3ff00000
 80090c4:	40240000 	.word	0x40240000
 80090c8:	401c0000 	.word	0x401c0000
 80090cc:	40140000 	.word	0x40140000
 80090d0:	3fe00000 	.word	0x3fe00000
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	f7f7 fa8e 	bl	80005f8 <__aeabi_dmul>
 80090dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80090e2:	4656      	mov	r6, sl
 80090e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090e8:	f7f7 fd36 	bl	8000b58 <__aeabi_d2iz>
 80090ec:	4605      	mov	r5, r0
 80090ee:	f7f7 fa19 	bl	8000524 <__aeabi_i2d>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090fa:	f7f7 f8c5 	bl	8000288 <__aeabi_dsub>
 80090fe:	3530      	adds	r5, #48	@ 0x30
 8009100:	f806 5b01 	strb.w	r5, [r6], #1
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	42a6      	cmp	r6, r4
 800910a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	d124      	bne.n	800915e <_dtoa_r+0x626>
 8009114:	4baf      	ldr	r3, [pc, #700]	@ (80093d4 <_dtoa_r+0x89c>)
 8009116:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800911a:	f7f7 f8b7 	bl	800028c <__adddf3>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009126:	f7f7 fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800912a:	2800      	cmp	r0, #0
 800912c:	d163      	bne.n	80091f6 <_dtoa_r+0x6be>
 800912e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009132:	49a8      	ldr	r1, [pc, #672]	@ (80093d4 <_dtoa_r+0x89c>)
 8009134:	2000      	movs	r0, #0
 8009136:	f7f7 f8a7 	bl	8000288 <__aeabi_dsub>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009142:	f7f7 fccb 	bl	8000adc <__aeabi_dcmplt>
 8009146:	2800      	cmp	r0, #0
 8009148:	f43f af14 	beq.w	8008f74 <_dtoa_r+0x43c>
 800914c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800914e:	1e73      	subs	r3, r6, #1
 8009150:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009152:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009156:	2b30      	cmp	r3, #48	@ 0x30
 8009158:	d0f8      	beq.n	800914c <_dtoa_r+0x614>
 800915a:	4647      	mov	r7, r8
 800915c:	e03b      	b.n	80091d6 <_dtoa_r+0x69e>
 800915e:	4b9e      	ldr	r3, [pc, #632]	@ (80093d8 <_dtoa_r+0x8a0>)
 8009160:	f7f7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8009164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009168:	e7bc      	b.n	80090e4 <_dtoa_r+0x5ac>
 800916a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800916e:	4656      	mov	r6, sl
 8009170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009174:	4620      	mov	r0, r4
 8009176:	4629      	mov	r1, r5
 8009178:	f7f7 fb68 	bl	800084c <__aeabi_ddiv>
 800917c:	f7f7 fcec 	bl	8000b58 <__aeabi_d2iz>
 8009180:	4680      	mov	r8, r0
 8009182:	f7f7 f9cf 	bl	8000524 <__aeabi_i2d>
 8009186:	e9dd 2300 	ldrd	r2, r3, [sp]
 800918a:	f7f7 fa35 	bl	80005f8 <__aeabi_dmul>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4620      	mov	r0, r4
 8009194:	4629      	mov	r1, r5
 8009196:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800919a:	f7f7 f875 	bl	8000288 <__aeabi_dsub>
 800919e:	f806 4b01 	strb.w	r4, [r6], #1
 80091a2:	9d03      	ldr	r5, [sp, #12]
 80091a4:	eba6 040a 	sub.w	r4, r6, sl
 80091a8:	42a5      	cmp	r5, r4
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	d133      	bne.n	8009218 <_dtoa_r+0x6e0>
 80091b0:	f7f7 f86c 	bl	800028c <__adddf3>
 80091b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091b8:	4604      	mov	r4, r0
 80091ba:	460d      	mov	r5, r1
 80091bc:	f7f7 fcac 	bl	8000b18 <__aeabi_dcmpgt>
 80091c0:	b9c0      	cbnz	r0, 80091f4 <_dtoa_r+0x6bc>
 80091c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 fc7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ce:	b110      	cbz	r0, 80091d6 <_dtoa_r+0x69e>
 80091d0:	f018 0f01 	tst.w	r8, #1
 80091d4:	d10e      	bne.n	80091f4 <_dtoa_r+0x6bc>
 80091d6:	9902      	ldr	r1, [sp, #8]
 80091d8:	4648      	mov	r0, r9
 80091da:	f000 fb07 	bl	80097ec <_Bfree>
 80091de:	2300      	movs	r3, #0
 80091e0:	7033      	strb	r3, [r6, #0]
 80091e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80091e4:	3701      	adds	r7, #1
 80091e6:	601f      	str	r7, [r3, #0]
 80091e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 824b 	beq.w	8009686 <_dtoa_r+0xb4e>
 80091f0:	601e      	str	r6, [r3, #0]
 80091f2:	e248      	b.n	8009686 <_dtoa_r+0xb4e>
 80091f4:	46b8      	mov	r8, r7
 80091f6:	4633      	mov	r3, r6
 80091f8:	461e      	mov	r6, r3
 80091fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091fe:	2a39      	cmp	r2, #57	@ 0x39
 8009200:	d106      	bne.n	8009210 <_dtoa_r+0x6d8>
 8009202:	459a      	cmp	sl, r3
 8009204:	d1f8      	bne.n	80091f8 <_dtoa_r+0x6c0>
 8009206:	2230      	movs	r2, #48	@ 0x30
 8009208:	f108 0801 	add.w	r8, r8, #1
 800920c:	f88a 2000 	strb.w	r2, [sl]
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	3201      	adds	r2, #1
 8009214:	701a      	strb	r2, [r3, #0]
 8009216:	e7a0      	b.n	800915a <_dtoa_r+0x622>
 8009218:	4b6f      	ldr	r3, [pc, #444]	@ (80093d8 <_dtoa_r+0x8a0>)
 800921a:	2200      	movs	r2, #0
 800921c:	f7f7 f9ec 	bl	80005f8 <__aeabi_dmul>
 8009220:	2200      	movs	r2, #0
 8009222:	2300      	movs	r3, #0
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	f7f7 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800922c:	2800      	cmp	r0, #0
 800922e:	d09f      	beq.n	8009170 <_dtoa_r+0x638>
 8009230:	e7d1      	b.n	80091d6 <_dtoa_r+0x69e>
 8009232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009234:	2a00      	cmp	r2, #0
 8009236:	f000 80ea 	beq.w	800940e <_dtoa_r+0x8d6>
 800923a:	9a07      	ldr	r2, [sp, #28]
 800923c:	2a01      	cmp	r2, #1
 800923e:	f300 80cd 	bgt.w	80093dc <_dtoa_r+0x8a4>
 8009242:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009244:	2a00      	cmp	r2, #0
 8009246:	f000 80c1 	beq.w	80093cc <_dtoa_r+0x894>
 800924a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800924e:	9c08      	ldr	r4, [sp, #32]
 8009250:	9e00      	ldr	r6, [sp, #0]
 8009252:	9a00      	ldr	r2, [sp, #0]
 8009254:	441a      	add	r2, r3
 8009256:	9200      	str	r2, [sp, #0]
 8009258:	9a06      	ldr	r2, [sp, #24]
 800925a:	2101      	movs	r1, #1
 800925c:	441a      	add	r2, r3
 800925e:	4648      	mov	r0, r9
 8009260:	9206      	str	r2, [sp, #24]
 8009262:	f000 fbc1 	bl	80099e8 <__i2b>
 8009266:	4605      	mov	r5, r0
 8009268:	b166      	cbz	r6, 8009284 <_dtoa_r+0x74c>
 800926a:	9b06      	ldr	r3, [sp, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	dd09      	ble.n	8009284 <_dtoa_r+0x74c>
 8009270:	42b3      	cmp	r3, r6
 8009272:	9a00      	ldr	r2, [sp, #0]
 8009274:	bfa8      	it	ge
 8009276:	4633      	movge	r3, r6
 8009278:	1ad2      	subs	r2, r2, r3
 800927a:	9200      	str	r2, [sp, #0]
 800927c:	9a06      	ldr	r2, [sp, #24]
 800927e:	1af6      	subs	r6, r6, r3
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	9306      	str	r3, [sp, #24]
 8009284:	9b08      	ldr	r3, [sp, #32]
 8009286:	b30b      	cbz	r3, 80092cc <_dtoa_r+0x794>
 8009288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 80c6 	beq.w	800941c <_dtoa_r+0x8e4>
 8009290:	2c00      	cmp	r4, #0
 8009292:	f000 80c0 	beq.w	8009416 <_dtoa_r+0x8de>
 8009296:	4629      	mov	r1, r5
 8009298:	4622      	mov	r2, r4
 800929a:	4648      	mov	r0, r9
 800929c:	f000 fc5c 	bl	8009b58 <__pow5mult>
 80092a0:	9a02      	ldr	r2, [sp, #8]
 80092a2:	4601      	mov	r1, r0
 80092a4:	4605      	mov	r5, r0
 80092a6:	4648      	mov	r0, r9
 80092a8:	f000 fbb4 	bl	8009a14 <__multiply>
 80092ac:	9902      	ldr	r1, [sp, #8]
 80092ae:	4680      	mov	r8, r0
 80092b0:	4648      	mov	r0, r9
 80092b2:	f000 fa9b 	bl	80097ec <_Bfree>
 80092b6:	9b08      	ldr	r3, [sp, #32]
 80092b8:	1b1b      	subs	r3, r3, r4
 80092ba:	9308      	str	r3, [sp, #32]
 80092bc:	f000 80b1 	beq.w	8009422 <_dtoa_r+0x8ea>
 80092c0:	9a08      	ldr	r2, [sp, #32]
 80092c2:	4641      	mov	r1, r8
 80092c4:	4648      	mov	r0, r9
 80092c6:	f000 fc47 	bl	8009b58 <__pow5mult>
 80092ca:	9002      	str	r0, [sp, #8]
 80092cc:	2101      	movs	r1, #1
 80092ce:	4648      	mov	r0, r9
 80092d0:	f000 fb8a 	bl	80099e8 <__i2b>
 80092d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092d6:	4604      	mov	r4, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 81d8 	beq.w	800968e <_dtoa_r+0xb56>
 80092de:	461a      	mov	r2, r3
 80092e0:	4601      	mov	r1, r0
 80092e2:	4648      	mov	r0, r9
 80092e4:	f000 fc38 	bl	8009b58 <__pow5mult>
 80092e8:	9b07      	ldr	r3, [sp, #28]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	4604      	mov	r4, r0
 80092ee:	f300 809f 	bgt.w	8009430 <_dtoa_r+0x8f8>
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f040 8097 	bne.w	8009428 <_dtoa_r+0x8f0>
 80092fa:	9b05      	ldr	r3, [sp, #20]
 80092fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009300:	2b00      	cmp	r3, #0
 8009302:	f040 8093 	bne.w	800942c <_dtoa_r+0x8f4>
 8009306:	9b05      	ldr	r3, [sp, #20]
 8009308:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800930c:	0d1b      	lsrs	r3, r3, #20
 800930e:	051b      	lsls	r3, r3, #20
 8009310:	b133      	cbz	r3, 8009320 <_dtoa_r+0x7e8>
 8009312:	9b00      	ldr	r3, [sp, #0]
 8009314:	3301      	adds	r3, #1
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	9b06      	ldr	r3, [sp, #24]
 800931a:	3301      	adds	r3, #1
 800931c:	9306      	str	r3, [sp, #24]
 800931e:	2301      	movs	r3, #1
 8009320:	9308      	str	r3, [sp, #32]
 8009322:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 81b8 	beq.w	800969a <_dtoa_r+0xb62>
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009330:	6918      	ldr	r0, [r3, #16]
 8009332:	f000 fb0d 	bl	8009950 <__hi0bits>
 8009336:	f1c0 0020 	rsb	r0, r0, #32
 800933a:	9b06      	ldr	r3, [sp, #24]
 800933c:	4418      	add	r0, r3
 800933e:	f010 001f 	ands.w	r0, r0, #31
 8009342:	f000 8082 	beq.w	800944a <_dtoa_r+0x912>
 8009346:	f1c0 0320 	rsb	r3, r0, #32
 800934a:	2b04      	cmp	r3, #4
 800934c:	dd73      	ble.n	8009436 <_dtoa_r+0x8fe>
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	f1c0 001c 	rsb	r0, r0, #28
 8009354:	4403      	add	r3, r0
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	9b06      	ldr	r3, [sp, #24]
 800935a:	4403      	add	r3, r0
 800935c:	4406      	add	r6, r0
 800935e:	9306      	str	r3, [sp, #24]
 8009360:	9b00      	ldr	r3, [sp, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	dd05      	ble.n	8009372 <_dtoa_r+0x83a>
 8009366:	9902      	ldr	r1, [sp, #8]
 8009368:	461a      	mov	r2, r3
 800936a:	4648      	mov	r0, r9
 800936c:	f000 fc4e 	bl	8009c0c <__lshift>
 8009370:	9002      	str	r0, [sp, #8]
 8009372:	9b06      	ldr	r3, [sp, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	dd05      	ble.n	8009384 <_dtoa_r+0x84c>
 8009378:	4621      	mov	r1, r4
 800937a:	461a      	mov	r2, r3
 800937c:	4648      	mov	r0, r9
 800937e:	f000 fc45 	bl	8009c0c <__lshift>
 8009382:	4604      	mov	r4, r0
 8009384:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d061      	beq.n	800944e <_dtoa_r+0x916>
 800938a:	9802      	ldr	r0, [sp, #8]
 800938c:	4621      	mov	r1, r4
 800938e:	f000 fca9 	bl	8009ce4 <__mcmp>
 8009392:	2800      	cmp	r0, #0
 8009394:	da5b      	bge.n	800944e <_dtoa_r+0x916>
 8009396:	2300      	movs	r3, #0
 8009398:	9902      	ldr	r1, [sp, #8]
 800939a:	220a      	movs	r2, #10
 800939c:	4648      	mov	r0, r9
 800939e:	f000 fa47 	bl	8009830 <__multadd>
 80093a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a4:	9002      	str	r0, [sp, #8]
 80093a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8177 	beq.w	800969e <_dtoa_r+0xb66>
 80093b0:	4629      	mov	r1, r5
 80093b2:	2300      	movs	r3, #0
 80093b4:	220a      	movs	r2, #10
 80093b6:	4648      	mov	r0, r9
 80093b8:	f000 fa3a 	bl	8009830 <__multadd>
 80093bc:	f1bb 0f00 	cmp.w	fp, #0
 80093c0:	4605      	mov	r5, r0
 80093c2:	dc6f      	bgt.n	80094a4 <_dtoa_r+0x96c>
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	dc49      	bgt.n	800945e <_dtoa_r+0x926>
 80093ca:	e06b      	b.n	80094a4 <_dtoa_r+0x96c>
 80093cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80093ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093d2:	e73c      	b.n	800924e <_dtoa_r+0x716>
 80093d4:	3fe00000 	.word	0x3fe00000
 80093d8:	40240000 	.word	0x40240000
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	1e5c      	subs	r4, r3, #1
 80093e0:	9b08      	ldr	r3, [sp, #32]
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	db09      	blt.n	80093fa <_dtoa_r+0x8c2>
 80093e6:	1b1c      	subs	r4, r3, r4
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f6bf af30 	bge.w	8009250 <_dtoa_r+0x718>
 80093f0:	9b00      	ldr	r3, [sp, #0]
 80093f2:	9a03      	ldr	r2, [sp, #12]
 80093f4:	1a9e      	subs	r6, r3, r2
 80093f6:	2300      	movs	r3, #0
 80093f8:	e72b      	b.n	8009252 <_dtoa_r+0x71a>
 80093fa:	9b08      	ldr	r3, [sp, #32]
 80093fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093fe:	9408      	str	r4, [sp, #32]
 8009400:	1ae3      	subs	r3, r4, r3
 8009402:	441a      	add	r2, r3
 8009404:	9e00      	ldr	r6, [sp, #0]
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	920d      	str	r2, [sp, #52]	@ 0x34
 800940a:	2400      	movs	r4, #0
 800940c:	e721      	b.n	8009252 <_dtoa_r+0x71a>
 800940e:	9c08      	ldr	r4, [sp, #32]
 8009410:	9e00      	ldr	r6, [sp, #0]
 8009412:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009414:	e728      	b.n	8009268 <_dtoa_r+0x730>
 8009416:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800941a:	e751      	b.n	80092c0 <_dtoa_r+0x788>
 800941c:	9a08      	ldr	r2, [sp, #32]
 800941e:	9902      	ldr	r1, [sp, #8]
 8009420:	e750      	b.n	80092c4 <_dtoa_r+0x78c>
 8009422:	f8cd 8008 	str.w	r8, [sp, #8]
 8009426:	e751      	b.n	80092cc <_dtoa_r+0x794>
 8009428:	2300      	movs	r3, #0
 800942a:	e779      	b.n	8009320 <_dtoa_r+0x7e8>
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	e777      	b.n	8009320 <_dtoa_r+0x7e8>
 8009430:	2300      	movs	r3, #0
 8009432:	9308      	str	r3, [sp, #32]
 8009434:	e779      	b.n	800932a <_dtoa_r+0x7f2>
 8009436:	d093      	beq.n	8009360 <_dtoa_r+0x828>
 8009438:	9a00      	ldr	r2, [sp, #0]
 800943a:	331c      	adds	r3, #28
 800943c:	441a      	add	r2, r3
 800943e:	9200      	str	r2, [sp, #0]
 8009440:	9a06      	ldr	r2, [sp, #24]
 8009442:	441a      	add	r2, r3
 8009444:	441e      	add	r6, r3
 8009446:	9206      	str	r2, [sp, #24]
 8009448:	e78a      	b.n	8009360 <_dtoa_r+0x828>
 800944a:	4603      	mov	r3, r0
 800944c:	e7f4      	b.n	8009438 <_dtoa_r+0x900>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	46b8      	mov	r8, r7
 8009454:	dc20      	bgt.n	8009498 <_dtoa_r+0x960>
 8009456:	469b      	mov	fp, r3
 8009458:	9b07      	ldr	r3, [sp, #28]
 800945a:	2b02      	cmp	r3, #2
 800945c:	dd1e      	ble.n	800949c <_dtoa_r+0x964>
 800945e:	f1bb 0f00 	cmp.w	fp, #0
 8009462:	f47f adb1 	bne.w	8008fc8 <_dtoa_r+0x490>
 8009466:	4621      	mov	r1, r4
 8009468:	465b      	mov	r3, fp
 800946a:	2205      	movs	r2, #5
 800946c:	4648      	mov	r0, r9
 800946e:	f000 f9df 	bl	8009830 <__multadd>
 8009472:	4601      	mov	r1, r0
 8009474:	4604      	mov	r4, r0
 8009476:	9802      	ldr	r0, [sp, #8]
 8009478:	f000 fc34 	bl	8009ce4 <__mcmp>
 800947c:	2800      	cmp	r0, #0
 800947e:	f77f ada3 	ble.w	8008fc8 <_dtoa_r+0x490>
 8009482:	4656      	mov	r6, sl
 8009484:	2331      	movs	r3, #49	@ 0x31
 8009486:	f806 3b01 	strb.w	r3, [r6], #1
 800948a:	f108 0801 	add.w	r8, r8, #1
 800948e:	e59f      	b.n	8008fd0 <_dtoa_r+0x498>
 8009490:	9c03      	ldr	r4, [sp, #12]
 8009492:	46b8      	mov	r8, r7
 8009494:	4625      	mov	r5, r4
 8009496:	e7f4      	b.n	8009482 <_dtoa_r+0x94a>
 8009498:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800949c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 8101 	beq.w	80096a6 <_dtoa_r+0xb6e>
 80094a4:	2e00      	cmp	r6, #0
 80094a6:	dd05      	ble.n	80094b4 <_dtoa_r+0x97c>
 80094a8:	4629      	mov	r1, r5
 80094aa:	4632      	mov	r2, r6
 80094ac:	4648      	mov	r0, r9
 80094ae:	f000 fbad 	bl	8009c0c <__lshift>
 80094b2:	4605      	mov	r5, r0
 80094b4:	9b08      	ldr	r3, [sp, #32]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d05c      	beq.n	8009574 <_dtoa_r+0xa3c>
 80094ba:	6869      	ldr	r1, [r5, #4]
 80094bc:	4648      	mov	r0, r9
 80094be:	f000 f955 	bl	800976c <_Balloc>
 80094c2:	4606      	mov	r6, r0
 80094c4:	b928      	cbnz	r0, 80094d2 <_dtoa_r+0x99a>
 80094c6:	4b82      	ldr	r3, [pc, #520]	@ (80096d0 <_dtoa_r+0xb98>)
 80094c8:	4602      	mov	r2, r0
 80094ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80094ce:	f7ff bb4a 	b.w	8008b66 <_dtoa_r+0x2e>
 80094d2:	692a      	ldr	r2, [r5, #16]
 80094d4:	3202      	adds	r2, #2
 80094d6:	0092      	lsls	r2, r2, #2
 80094d8:	f105 010c 	add.w	r1, r5, #12
 80094dc:	300c      	adds	r0, #12
 80094de:	f7ff fa8c 	bl	80089fa <memcpy>
 80094e2:	2201      	movs	r2, #1
 80094e4:	4631      	mov	r1, r6
 80094e6:	4648      	mov	r0, r9
 80094e8:	f000 fb90 	bl	8009c0c <__lshift>
 80094ec:	f10a 0301 	add.w	r3, sl, #1
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	eb0a 030b 	add.w	r3, sl, fp
 80094f6:	9308      	str	r3, [sp, #32]
 80094f8:	9b04      	ldr	r3, [sp, #16]
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	462f      	mov	r7, r5
 8009500:	9306      	str	r3, [sp, #24]
 8009502:	4605      	mov	r5, r0
 8009504:	9b00      	ldr	r3, [sp, #0]
 8009506:	9802      	ldr	r0, [sp, #8]
 8009508:	4621      	mov	r1, r4
 800950a:	f103 3bff 	add.w	fp, r3, #4294967295
 800950e:	f7ff fa89 	bl	8008a24 <quorem>
 8009512:	4603      	mov	r3, r0
 8009514:	3330      	adds	r3, #48	@ 0x30
 8009516:	9003      	str	r0, [sp, #12]
 8009518:	4639      	mov	r1, r7
 800951a:	9802      	ldr	r0, [sp, #8]
 800951c:	9309      	str	r3, [sp, #36]	@ 0x24
 800951e:	f000 fbe1 	bl	8009ce4 <__mcmp>
 8009522:	462a      	mov	r2, r5
 8009524:	9004      	str	r0, [sp, #16]
 8009526:	4621      	mov	r1, r4
 8009528:	4648      	mov	r0, r9
 800952a:	f000 fbf7 	bl	8009d1c <__mdiff>
 800952e:	68c2      	ldr	r2, [r0, #12]
 8009530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009532:	4606      	mov	r6, r0
 8009534:	bb02      	cbnz	r2, 8009578 <_dtoa_r+0xa40>
 8009536:	4601      	mov	r1, r0
 8009538:	9802      	ldr	r0, [sp, #8]
 800953a:	f000 fbd3 	bl	8009ce4 <__mcmp>
 800953e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009540:	4602      	mov	r2, r0
 8009542:	4631      	mov	r1, r6
 8009544:	4648      	mov	r0, r9
 8009546:	920c      	str	r2, [sp, #48]	@ 0x30
 8009548:	9309      	str	r3, [sp, #36]	@ 0x24
 800954a:	f000 f94f 	bl	80097ec <_Bfree>
 800954e:	9b07      	ldr	r3, [sp, #28]
 8009550:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009552:	9e00      	ldr	r6, [sp, #0]
 8009554:	ea42 0103 	orr.w	r1, r2, r3
 8009558:	9b06      	ldr	r3, [sp, #24]
 800955a:	4319      	orrs	r1, r3
 800955c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800955e:	d10d      	bne.n	800957c <_dtoa_r+0xa44>
 8009560:	2b39      	cmp	r3, #57	@ 0x39
 8009562:	d027      	beq.n	80095b4 <_dtoa_r+0xa7c>
 8009564:	9a04      	ldr	r2, [sp, #16]
 8009566:	2a00      	cmp	r2, #0
 8009568:	dd01      	ble.n	800956e <_dtoa_r+0xa36>
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	3331      	adds	r3, #49	@ 0x31
 800956e:	f88b 3000 	strb.w	r3, [fp]
 8009572:	e52e      	b.n	8008fd2 <_dtoa_r+0x49a>
 8009574:	4628      	mov	r0, r5
 8009576:	e7b9      	b.n	80094ec <_dtoa_r+0x9b4>
 8009578:	2201      	movs	r2, #1
 800957a:	e7e2      	b.n	8009542 <_dtoa_r+0xa0a>
 800957c:	9904      	ldr	r1, [sp, #16]
 800957e:	2900      	cmp	r1, #0
 8009580:	db04      	blt.n	800958c <_dtoa_r+0xa54>
 8009582:	9807      	ldr	r0, [sp, #28]
 8009584:	4301      	orrs	r1, r0
 8009586:	9806      	ldr	r0, [sp, #24]
 8009588:	4301      	orrs	r1, r0
 800958a:	d120      	bne.n	80095ce <_dtoa_r+0xa96>
 800958c:	2a00      	cmp	r2, #0
 800958e:	ddee      	ble.n	800956e <_dtoa_r+0xa36>
 8009590:	9902      	ldr	r1, [sp, #8]
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	2201      	movs	r2, #1
 8009596:	4648      	mov	r0, r9
 8009598:	f000 fb38 	bl	8009c0c <__lshift>
 800959c:	4621      	mov	r1, r4
 800959e:	9002      	str	r0, [sp, #8]
 80095a0:	f000 fba0 	bl	8009ce4 <__mcmp>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	9b00      	ldr	r3, [sp, #0]
 80095a8:	dc02      	bgt.n	80095b0 <_dtoa_r+0xa78>
 80095aa:	d1e0      	bne.n	800956e <_dtoa_r+0xa36>
 80095ac:	07da      	lsls	r2, r3, #31
 80095ae:	d5de      	bpl.n	800956e <_dtoa_r+0xa36>
 80095b0:	2b39      	cmp	r3, #57	@ 0x39
 80095b2:	d1da      	bne.n	800956a <_dtoa_r+0xa32>
 80095b4:	2339      	movs	r3, #57	@ 0x39
 80095b6:	f88b 3000 	strb.w	r3, [fp]
 80095ba:	4633      	mov	r3, r6
 80095bc:	461e      	mov	r6, r3
 80095be:	3b01      	subs	r3, #1
 80095c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80095c4:	2a39      	cmp	r2, #57	@ 0x39
 80095c6:	d04e      	beq.n	8009666 <_dtoa_r+0xb2e>
 80095c8:	3201      	adds	r2, #1
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	e501      	b.n	8008fd2 <_dtoa_r+0x49a>
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	dd03      	ble.n	80095da <_dtoa_r+0xaa2>
 80095d2:	2b39      	cmp	r3, #57	@ 0x39
 80095d4:	d0ee      	beq.n	80095b4 <_dtoa_r+0xa7c>
 80095d6:	3301      	adds	r3, #1
 80095d8:	e7c9      	b.n	800956e <_dtoa_r+0xa36>
 80095da:	9a00      	ldr	r2, [sp, #0]
 80095dc:	9908      	ldr	r1, [sp, #32]
 80095de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095e2:	428a      	cmp	r2, r1
 80095e4:	d028      	beq.n	8009638 <_dtoa_r+0xb00>
 80095e6:	9902      	ldr	r1, [sp, #8]
 80095e8:	2300      	movs	r3, #0
 80095ea:	220a      	movs	r2, #10
 80095ec:	4648      	mov	r0, r9
 80095ee:	f000 f91f 	bl	8009830 <__multadd>
 80095f2:	42af      	cmp	r7, r5
 80095f4:	9002      	str	r0, [sp, #8]
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	f04f 020a 	mov.w	r2, #10
 80095fe:	4639      	mov	r1, r7
 8009600:	4648      	mov	r0, r9
 8009602:	d107      	bne.n	8009614 <_dtoa_r+0xadc>
 8009604:	f000 f914 	bl	8009830 <__multadd>
 8009608:	4607      	mov	r7, r0
 800960a:	4605      	mov	r5, r0
 800960c:	9b00      	ldr	r3, [sp, #0]
 800960e:	3301      	adds	r3, #1
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	e777      	b.n	8009504 <_dtoa_r+0x9cc>
 8009614:	f000 f90c 	bl	8009830 <__multadd>
 8009618:	4629      	mov	r1, r5
 800961a:	4607      	mov	r7, r0
 800961c:	2300      	movs	r3, #0
 800961e:	220a      	movs	r2, #10
 8009620:	4648      	mov	r0, r9
 8009622:	f000 f905 	bl	8009830 <__multadd>
 8009626:	4605      	mov	r5, r0
 8009628:	e7f0      	b.n	800960c <_dtoa_r+0xad4>
 800962a:	f1bb 0f00 	cmp.w	fp, #0
 800962e:	bfcc      	ite	gt
 8009630:	465e      	movgt	r6, fp
 8009632:	2601      	movle	r6, #1
 8009634:	4456      	add	r6, sl
 8009636:	2700      	movs	r7, #0
 8009638:	9902      	ldr	r1, [sp, #8]
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	2201      	movs	r2, #1
 800963e:	4648      	mov	r0, r9
 8009640:	f000 fae4 	bl	8009c0c <__lshift>
 8009644:	4621      	mov	r1, r4
 8009646:	9002      	str	r0, [sp, #8]
 8009648:	f000 fb4c 	bl	8009ce4 <__mcmp>
 800964c:	2800      	cmp	r0, #0
 800964e:	dcb4      	bgt.n	80095ba <_dtoa_r+0xa82>
 8009650:	d102      	bne.n	8009658 <_dtoa_r+0xb20>
 8009652:	9b00      	ldr	r3, [sp, #0]
 8009654:	07db      	lsls	r3, r3, #31
 8009656:	d4b0      	bmi.n	80095ba <_dtoa_r+0xa82>
 8009658:	4633      	mov	r3, r6
 800965a:	461e      	mov	r6, r3
 800965c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009660:	2a30      	cmp	r2, #48	@ 0x30
 8009662:	d0fa      	beq.n	800965a <_dtoa_r+0xb22>
 8009664:	e4b5      	b.n	8008fd2 <_dtoa_r+0x49a>
 8009666:	459a      	cmp	sl, r3
 8009668:	d1a8      	bne.n	80095bc <_dtoa_r+0xa84>
 800966a:	2331      	movs	r3, #49	@ 0x31
 800966c:	f108 0801 	add.w	r8, r8, #1
 8009670:	f88a 3000 	strb.w	r3, [sl]
 8009674:	e4ad      	b.n	8008fd2 <_dtoa_r+0x49a>
 8009676:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009678:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80096d4 <_dtoa_r+0xb9c>
 800967c:	b11b      	cbz	r3, 8009686 <_dtoa_r+0xb4e>
 800967e:	f10a 0308 	add.w	r3, sl, #8
 8009682:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	4650      	mov	r0, sl
 8009688:	b017      	add	sp, #92	@ 0x5c
 800968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968e:	9b07      	ldr	r3, [sp, #28]
 8009690:	2b01      	cmp	r3, #1
 8009692:	f77f ae2e 	ble.w	80092f2 <_dtoa_r+0x7ba>
 8009696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	2001      	movs	r0, #1
 800969c:	e64d      	b.n	800933a <_dtoa_r+0x802>
 800969e:	f1bb 0f00 	cmp.w	fp, #0
 80096a2:	f77f aed9 	ble.w	8009458 <_dtoa_r+0x920>
 80096a6:	4656      	mov	r6, sl
 80096a8:	9802      	ldr	r0, [sp, #8]
 80096aa:	4621      	mov	r1, r4
 80096ac:	f7ff f9ba 	bl	8008a24 <quorem>
 80096b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80096b4:	f806 3b01 	strb.w	r3, [r6], #1
 80096b8:	eba6 020a 	sub.w	r2, r6, sl
 80096bc:	4593      	cmp	fp, r2
 80096be:	ddb4      	ble.n	800962a <_dtoa_r+0xaf2>
 80096c0:	9902      	ldr	r1, [sp, #8]
 80096c2:	2300      	movs	r3, #0
 80096c4:	220a      	movs	r2, #10
 80096c6:	4648      	mov	r0, r9
 80096c8:	f000 f8b2 	bl	8009830 <__multadd>
 80096cc:	9002      	str	r0, [sp, #8]
 80096ce:	e7eb      	b.n	80096a8 <_dtoa_r+0xb70>
 80096d0:	0800bfa6 	.word	0x0800bfa6
 80096d4:	0800bf2a 	.word	0x0800bf2a

080096d8 <_free_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4605      	mov	r5, r0
 80096dc:	2900      	cmp	r1, #0
 80096de:	d041      	beq.n	8009764 <_free_r+0x8c>
 80096e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e4:	1f0c      	subs	r4, r1, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfb8      	it	lt
 80096ea:	18e4      	addlt	r4, r4, r3
 80096ec:	f7fd ffde 	bl	80076ac <__malloc_lock>
 80096f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009768 <_free_r+0x90>)
 80096f2:	6813      	ldr	r3, [r2, #0]
 80096f4:	b933      	cbnz	r3, 8009704 <_free_r+0x2c>
 80096f6:	6063      	str	r3, [r4, #4]
 80096f8:	6014      	str	r4, [r2, #0]
 80096fa:	4628      	mov	r0, r5
 80096fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009700:	f7fd bfda 	b.w	80076b8 <__malloc_unlock>
 8009704:	42a3      	cmp	r3, r4
 8009706:	d908      	bls.n	800971a <_free_r+0x42>
 8009708:	6820      	ldr	r0, [r4, #0]
 800970a:	1821      	adds	r1, r4, r0
 800970c:	428b      	cmp	r3, r1
 800970e:	bf01      	itttt	eq
 8009710:	6819      	ldreq	r1, [r3, #0]
 8009712:	685b      	ldreq	r3, [r3, #4]
 8009714:	1809      	addeq	r1, r1, r0
 8009716:	6021      	streq	r1, [r4, #0]
 8009718:	e7ed      	b.n	80096f6 <_free_r+0x1e>
 800971a:	461a      	mov	r2, r3
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	b10b      	cbz	r3, 8009724 <_free_r+0x4c>
 8009720:	42a3      	cmp	r3, r4
 8009722:	d9fa      	bls.n	800971a <_free_r+0x42>
 8009724:	6811      	ldr	r1, [r2, #0]
 8009726:	1850      	adds	r0, r2, r1
 8009728:	42a0      	cmp	r0, r4
 800972a:	d10b      	bne.n	8009744 <_free_r+0x6c>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	4401      	add	r1, r0
 8009730:	1850      	adds	r0, r2, r1
 8009732:	4283      	cmp	r3, r0
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	d1e0      	bne.n	80096fa <_free_r+0x22>
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	6053      	str	r3, [r2, #4]
 800973e:	4408      	add	r0, r1
 8009740:	6010      	str	r0, [r2, #0]
 8009742:	e7da      	b.n	80096fa <_free_r+0x22>
 8009744:	d902      	bls.n	800974c <_free_r+0x74>
 8009746:	230c      	movs	r3, #12
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	e7d6      	b.n	80096fa <_free_r+0x22>
 800974c:	6820      	ldr	r0, [r4, #0]
 800974e:	1821      	adds	r1, r4, r0
 8009750:	428b      	cmp	r3, r1
 8009752:	bf04      	itt	eq
 8009754:	6819      	ldreq	r1, [r3, #0]
 8009756:	685b      	ldreq	r3, [r3, #4]
 8009758:	6063      	str	r3, [r4, #4]
 800975a:	bf04      	itt	eq
 800975c:	1809      	addeq	r1, r1, r0
 800975e:	6021      	streq	r1, [r4, #0]
 8009760:	6054      	str	r4, [r2, #4]
 8009762:	e7ca      	b.n	80096fa <_free_r+0x22>
 8009764:	bd38      	pop	{r3, r4, r5, pc}
 8009766:	bf00      	nop
 8009768:	20000784 	.word	0x20000784

0800976c <_Balloc>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	69c6      	ldr	r6, [r0, #28]
 8009770:	4604      	mov	r4, r0
 8009772:	460d      	mov	r5, r1
 8009774:	b976      	cbnz	r6, 8009794 <_Balloc+0x28>
 8009776:	2010      	movs	r0, #16
 8009778:	f7fd fee6 	bl	8007548 <malloc>
 800977c:	4602      	mov	r2, r0
 800977e:	61e0      	str	r0, [r4, #28]
 8009780:	b920      	cbnz	r0, 800978c <_Balloc+0x20>
 8009782:	4b18      	ldr	r3, [pc, #96]	@ (80097e4 <_Balloc+0x78>)
 8009784:	4818      	ldr	r0, [pc, #96]	@ (80097e8 <_Balloc+0x7c>)
 8009786:	216b      	movs	r1, #107	@ 0x6b
 8009788:	f001 fd4e 	bl	800b228 <__assert_func>
 800978c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009790:	6006      	str	r6, [r0, #0]
 8009792:	60c6      	str	r6, [r0, #12]
 8009794:	69e6      	ldr	r6, [r4, #28]
 8009796:	68f3      	ldr	r3, [r6, #12]
 8009798:	b183      	cbz	r3, 80097bc <_Balloc+0x50>
 800979a:	69e3      	ldr	r3, [r4, #28]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097a2:	b9b8      	cbnz	r0, 80097d4 <_Balloc+0x68>
 80097a4:	2101      	movs	r1, #1
 80097a6:	fa01 f605 	lsl.w	r6, r1, r5
 80097aa:	1d72      	adds	r2, r6, #5
 80097ac:	0092      	lsls	r2, r2, #2
 80097ae:	4620      	mov	r0, r4
 80097b0:	f001 fd58 	bl	800b264 <_calloc_r>
 80097b4:	b160      	cbz	r0, 80097d0 <_Balloc+0x64>
 80097b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097ba:	e00e      	b.n	80097da <_Balloc+0x6e>
 80097bc:	2221      	movs	r2, #33	@ 0x21
 80097be:	2104      	movs	r1, #4
 80097c0:	4620      	mov	r0, r4
 80097c2:	f001 fd4f 	bl	800b264 <_calloc_r>
 80097c6:	69e3      	ldr	r3, [r4, #28]
 80097c8:	60f0      	str	r0, [r6, #12]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e4      	bne.n	800979a <_Balloc+0x2e>
 80097d0:	2000      	movs	r0, #0
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	6802      	ldr	r2, [r0, #0]
 80097d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097da:	2300      	movs	r3, #0
 80097dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097e0:	e7f7      	b.n	80097d2 <_Balloc+0x66>
 80097e2:	bf00      	nop
 80097e4:	0800bf37 	.word	0x0800bf37
 80097e8:	0800bfb7 	.word	0x0800bfb7

080097ec <_Bfree>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	69c6      	ldr	r6, [r0, #28]
 80097f0:	4605      	mov	r5, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	b976      	cbnz	r6, 8009814 <_Bfree+0x28>
 80097f6:	2010      	movs	r0, #16
 80097f8:	f7fd fea6 	bl	8007548 <malloc>
 80097fc:	4602      	mov	r2, r0
 80097fe:	61e8      	str	r0, [r5, #28]
 8009800:	b920      	cbnz	r0, 800980c <_Bfree+0x20>
 8009802:	4b09      	ldr	r3, [pc, #36]	@ (8009828 <_Bfree+0x3c>)
 8009804:	4809      	ldr	r0, [pc, #36]	@ (800982c <_Bfree+0x40>)
 8009806:	218f      	movs	r1, #143	@ 0x8f
 8009808:	f001 fd0e 	bl	800b228 <__assert_func>
 800980c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009810:	6006      	str	r6, [r0, #0]
 8009812:	60c6      	str	r6, [r0, #12]
 8009814:	b13c      	cbz	r4, 8009826 <_Bfree+0x3a>
 8009816:	69eb      	ldr	r3, [r5, #28]
 8009818:	6862      	ldr	r2, [r4, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009820:	6021      	str	r1, [r4, #0]
 8009822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	0800bf37 	.word	0x0800bf37
 800982c:	0800bfb7 	.word	0x0800bfb7

08009830 <__multadd>:
 8009830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009834:	690d      	ldr	r5, [r1, #16]
 8009836:	4607      	mov	r7, r0
 8009838:	460c      	mov	r4, r1
 800983a:	461e      	mov	r6, r3
 800983c:	f101 0c14 	add.w	ip, r1, #20
 8009840:	2000      	movs	r0, #0
 8009842:	f8dc 3000 	ldr.w	r3, [ip]
 8009846:	b299      	uxth	r1, r3
 8009848:	fb02 6101 	mla	r1, r2, r1, r6
 800984c:	0c1e      	lsrs	r6, r3, #16
 800984e:	0c0b      	lsrs	r3, r1, #16
 8009850:	fb02 3306 	mla	r3, r2, r6, r3
 8009854:	b289      	uxth	r1, r1
 8009856:	3001      	adds	r0, #1
 8009858:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800985c:	4285      	cmp	r5, r0
 800985e:	f84c 1b04 	str.w	r1, [ip], #4
 8009862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009866:	dcec      	bgt.n	8009842 <__multadd+0x12>
 8009868:	b30e      	cbz	r6, 80098ae <__multadd+0x7e>
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	42ab      	cmp	r3, r5
 800986e:	dc19      	bgt.n	80098a4 <__multadd+0x74>
 8009870:	6861      	ldr	r1, [r4, #4]
 8009872:	4638      	mov	r0, r7
 8009874:	3101      	adds	r1, #1
 8009876:	f7ff ff79 	bl	800976c <_Balloc>
 800987a:	4680      	mov	r8, r0
 800987c:	b928      	cbnz	r0, 800988a <__multadd+0x5a>
 800987e:	4602      	mov	r2, r0
 8009880:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <__multadd+0x84>)
 8009882:	480d      	ldr	r0, [pc, #52]	@ (80098b8 <__multadd+0x88>)
 8009884:	21ba      	movs	r1, #186	@ 0xba
 8009886:	f001 fccf 	bl	800b228 <__assert_func>
 800988a:	6922      	ldr	r2, [r4, #16]
 800988c:	3202      	adds	r2, #2
 800988e:	f104 010c 	add.w	r1, r4, #12
 8009892:	0092      	lsls	r2, r2, #2
 8009894:	300c      	adds	r0, #12
 8009896:	f7ff f8b0 	bl	80089fa <memcpy>
 800989a:	4621      	mov	r1, r4
 800989c:	4638      	mov	r0, r7
 800989e:	f7ff ffa5 	bl	80097ec <_Bfree>
 80098a2:	4644      	mov	r4, r8
 80098a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098a8:	3501      	adds	r5, #1
 80098aa:	615e      	str	r6, [r3, #20]
 80098ac:	6125      	str	r5, [r4, #16]
 80098ae:	4620      	mov	r0, r4
 80098b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b4:	0800bfa6 	.word	0x0800bfa6
 80098b8:	0800bfb7 	.word	0x0800bfb7

080098bc <__s2b>:
 80098bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c0:	460c      	mov	r4, r1
 80098c2:	4615      	mov	r5, r2
 80098c4:	461f      	mov	r7, r3
 80098c6:	2209      	movs	r2, #9
 80098c8:	3308      	adds	r3, #8
 80098ca:	4606      	mov	r6, r0
 80098cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80098d0:	2100      	movs	r1, #0
 80098d2:	2201      	movs	r2, #1
 80098d4:	429a      	cmp	r2, r3
 80098d6:	db09      	blt.n	80098ec <__s2b+0x30>
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff ff47 	bl	800976c <_Balloc>
 80098de:	b940      	cbnz	r0, 80098f2 <__s2b+0x36>
 80098e0:	4602      	mov	r2, r0
 80098e2:	4b19      	ldr	r3, [pc, #100]	@ (8009948 <__s2b+0x8c>)
 80098e4:	4819      	ldr	r0, [pc, #100]	@ (800994c <__s2b+0x90>)
 80098e6:	21d3      	movs	r1, #211	@ 0xd3
 80098e8:	f001 fc9e 	bl	800b228 <__assert_func>
 80098ec:	0052      	lsls	r2, r2, #1
 80098ee:	3101      	adds	r1, #1
 80098f0:	e7f0      	b.n	80098d4 <__s2b+0x18>
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	6143      	str	r3, [r0, #20]
 80098f6:	2d09      	cmp	r5, #9
 80098f8:	f04f 0301 	mov.w	r3, #1
 80098fc:	6103      	str	r3, [r0, #16]
 80098fe:	dd16      	ble.n	800992e <__s2b+0x72>
 8009900:	f104 0909 	add.w	r9, r4, #9
 8009904:	46c8      	mov	r8, r9
 8009906:	442c      	add	r4, r5
 8009908:	f818 3b01 	ldrb.w	r3, [r8], #1
 800990c:	4601      	mov	r1, r0
 800990e:	3b30      	subs	r3, #48	@ 0x30
 8009910:	220a      	movs	r2, #10
 8009912:	4630      	mov	r0, r6
 8009914:	f7ff ff8c 	bl	8009830 <__multadd>
 8009918:	45a0      	cmp	r8, r4
 800991a:	d1f5      	bne.n	8009908 <__s2b+0x4c>
 800991c:	f1a5 0408 	sub.w	r4, r5, #8
 8009920:	444c      	add	r4, r9
 8009922:	1b2d      	subs	r5, r5, r4
 8009924:	1963      	adds	r3, r4, r5
 8009926:	42bb      	cmp	r3, r7
 8009928:	db04      	blt.n	8009934 <__s2b+0x78>
 800992a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992e:	340a      	adds	r4, #10
 8009930:	2509      	movs	r5, #9
 8009932:	e7f6      	b.n	8009922 <__s2b+0x66>
 8009934:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009938:	4601      	mov	r1, r0
 800993a:	3b30      	subs	r3, #48	@ 0x30
 800993c:	220a      	movs	r2, #10
 800993e:	4630      	mov	r0, r6
 8009940:	f7ff ff76 	bl	8009830 <__multadd>
 8009944:	e7ee      	b.n	8009924 <__s2b+0x68>
 8009946:	bf00      	nop
 8009948:	0800bfa6 	.word	0x0800bfa6
 800994c:	0800bfb7 	.word	0x0800bfb7

08009950 <__hi0bits>:
 8009950:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009954:	4603      	mov	r3, r0
 8009956:	bf36      	itet	cc
 8009958:	0403      	lslcc	r3, r0, #16
 800995a:	2000      	movcs	r0, #0
 800995c:	2010      	movcc	r0, #16
 800995e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009962:	bf3c      	itt	cc
 8009964:	021b      	lslcc	r3, r3, #8
 8009966:	3008      	addcc	r0, #8
 8009968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800996c:	bf3c      	itt	cc
 800996e:	011b      	lslcc	r3, r3, #4
 8009970:	3004      	addcc	r0, #4
 8009972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009976:	bf3c      	itt	cc
 8009978:	009b      	lslcc	r3, r3, #2
 800997a:	3002      	addcc	r0, #2
 800997c:	2b00      	cmp	r3, #0
 800997e:	db05      	blt.n	800998c <__hi0bits+0x3c>
 8009980:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009984:	f100 0001 	add.w	r0, r0, #1
 8009988:	bf08      	it	eq
 800998a:	2020      	moveq	r0, #32
 800998c:	4770      	bx	lr

0800998e <__lo0bits>:
 800998e:	6803      	ldr	r3, [r0, #0]
 8009990:	4602      	mov	r2, r0
 8009992:	f013 0007 	ands.w	r0, r3, #7
 8009996:	d00b      	beq.n	80099b0 <__lo0bits+0x22>
 8009998:	07d9      	lsls	r1, r3, #31
 800999a:	d421      	bmi.n	80099e0 <__lo0bits+0x52>
 800999c:	0798      	lsls	r0, r3, #30
 800999e:	bf49      	itett	mi
 80099a0:	085b      	lsrmi	r3, r3, #1
 80099a2:	089b      	lsrpl	r3, r3, #2
 80099a4:	2001      	movmi	r0, #1
 80099a6:	6013      	strmi	r3, [r2, #0]
 80099a8:	bf5c      	itt	pl
 80099aa:	6013      	strpl	r3, [r2, #0]
 80099ac:	2002      	movpl	r0, #2
 80099ae:	4770      	bx	lr
 80099b0:	b299      	uxth	r1, r3
 80099b2:	b909      	cbnz	r1, 80099b8 <__lo0bits+0x2a>
 80099b4:	0c1b      	lsrs	r3, r3, #16
 80099b6:	2010      	movs	r0, #16
 80099b8:	b2d9      	uxtb	r1, r3
 80099ba:	b909      	cbnz	r1, 80099c0 <__lo0bits+0x32>
 80099bc:	3008      	adds	r0, #8
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	0719      	lsls	r1, r3, #28
 80099c2:	bf04      	itt	eq
 80099c4:	091b      	lsreq	r3, r3, #4
 80099c6:	3004      	addeq	r0, #4
 80099c8:	0799      	lsls	r1, r3, #30
 80099ca:	bf04      	itt	eq
 80099cc:	089b      	lsreq	r3, r3, #2
 80099ce:	3002      	addeq	r0, #2
 80099d0:	07d9      	lsls	r1, r3, #31
 80099d2:	d403      	bmi.n	80099dc <__lo0bits+0x4e>
 80099d4:	085b      	lsrs	r3, r3, #1
 80099d6:	f100 0001 	add.w	r0, r0, #1
 80099da:	d003      	beq.n	80099e4 <__lo0bits+0x56>
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	4770      	bx	lr
 80099e0:	2000      	movs	r0, #0
 80099e2:	4770      	bx	lr
 80099e4:	2020      	movs	r0, #32
 80099e6:	4770      	bx	lr

080099e8 <__i2b>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	460c      	mov	r4, r1
 80099ec:	2101      	movs	r1, #1
 80099ee:	f7ff febd 	bl	800976c <_Balloc>
 80099f2:	4602      	mov	r2, r0
 80099f4:	b928      	cbnz	r0, 8009a02 <__i2b+0x1a>
 80099f6:	4b05      	ldr	r3, [pc, #20]	@ (8009a0c <__i2b+0x24>)
 80099f8:	4805      	ldr	r0, [pc, #20]	@ (8009a10 <__i2b+0x28>)
 80099fa:	f240 1145 	movw	r1, #325	@ 0x145
 80099fe:	f001 fc13 	bl	800b228 <__assert_func>
 8009a02:	2301      	movs	r3, #1
 8009a04:	6144      	str	r4, [r0, #20]
 8009a06:	6103      	str	r3, [r0, #16]
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800bfa6 	.word	0x0800bfa6
 8009a10:	0800bfb7 	.word	0x0800bfb7

08009a14 <__multiply>:
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	4617      	mov	r7, r2
 8009a1a:	690a      	ldr	r2, [r1, #16]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	bfa8      	it	ge
 8009a22:	463b      	movge	r3, r7
 8009a24:	4689      	mov	r9, r1
 8009a26:	bfa4      	itt	ge
 8009a28:	460f      	movge	r7, r1
 8009a2a:	4699      	movge	r9, r3
 8009a2c:	693d      	ldr	r5, [r7, #16]
 8009a2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6879      	ldr	r1, [r7, #4]
 8009a36:	eb05 060a 	add.w	r6, r5, sl
 8009a3a:	42b3      	cmp	r3, r6
 8009a3c:	b085      	sub	sp, #20
 8009a3e:	bfb8      	it	lt
 8009a40:	3101      	addlt	r1, #1
 8009a42:	f7ff fe93 	bl	800976c <_Balloc>
 8009a46:	b930      	cbnz	r0, 8009a56 <__multiply+0x42>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	4b41      	ldr	r3, [pc, #260]	@ (8009b50 <__multiply+0x13c>)
 8009a4c:	4841      	ldr	r0, [pc, #260]	@ (8009b54 <__multiply+0x140>)
 8009a4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a52:	f001 fbe9 	bl	800b228 <__assert_func>
 8009a56:	f100 0414 	add.w	r4, r0, #20
 8009a5a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009a5e:	4623      	mov	r3, r4
 8009a60:	2200      	movs	r2, #0
 8009a62:	4573      	cmp	r3, lr
 8009a64:	d320      	bcc.n	8009aa8 <__multiply+0x94>
 8009a66:	f107 0814 	add.w	r8, r7, #20
 8009a6a:	f109 0114 	add.w	r1, r9, #20
 8009a6e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009a72:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	1beb      	subs	r3, r5, r7
 8009a7a:	3b15      	subs	r3, #21
 8009a7c:	f023 0303 	bic.w	r3, r3, #3
 8009a80:	3304      	adds	r3, #4
 8009a82:	3715      	adds	r7, #21
 8009a84:	42bd      	cmp	r5, r7
 8009a86:	bf38      	it	cc
 8009a88:	2304      	movcc	r3, #4
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	9b02      	ldr	r3, [sp, #8]
 8009a8e:	9103      	str	r1, [sp, #12]
 8009a90:	428b      	cmp	r3, r1
 8009a92:	d80c      	bhi.n	8009aae <__multiply+0x9a>
 8009a94:	2e00      	cmp	r6, #0
 8009a96:	dd03      	ble.n	8009aa0 <__multiply+0x8c>
 8009a98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d055      	beq.n	8009b4c <__multiply+0x138>
 8009aa0:	6106      	str	r6, [r0, #16]
 8009aa2:	b005      	add	sp, #20
 8009aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa8:	f843 2b04 	str.w	r2, [r3], #4
 8009aac:	e7d9      	b.n	8009a62 <__multiply+0x4e>
 8009aae:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ab2:	f1ba 0f00 	cmp.w	sl, #0
 8009ab6:	d01f      	beq.n	8009af8 <__multiply+0xe4>
 8009ab8:	46c4      	mov	ip, r8
 8009aba:	46a1      	mov	r9, r4
 8009abc:	2700      	movs	r7, #0
 8009abe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ac2:	f8d9 3000 	ldr.w	r3, [r9]
 8009ac6:	fa1f fb82 	uxth.w	fp, r2
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ad0:	443b      	add	r3, r7
 8009ad2:	f8d9 7000 	ldr.w	r7, [r9]
 8009ad6:	0c12      	lsrs	r2, r2, #16
 8009ad8:	0c3f      	lsrs	r7, r7, #16
 8009ada:	fb0a 7202 	mla	r2, sl, r2, r7
 8009ade:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae8:	4565      	cmp	r5, ip
 8009aea:	f849 3b04 	str.w	r3, [r9], #4
 8009aee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009af2:	d8e4      	bhi.n	8009abe <__multiply+0xaa>
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	50e7      	str	r7, [r4, r3]
 8009af8:	9b03      	ldr	r3, [sp, #12]
 8009afa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009afe:	3104      	adds	r1, #4
 8009b00:	f1b9 0f00 	cmp.w	r9, #0
 8009b04:	d020      	beq.n	8009b48 <__multiply+0x134>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	4647      	mov	r7, r8
 8009b0a:	46a4      	mov	ip, r4
 8009b0c:	f04f 0a00 	mov.w	sl, #0
 8009b10:	f8b7 b000 	ldrh.w	fp, [r7]
 8009b14:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009b18:	fb09 220b 	mla	r2, r9, fp, r2
 8009b1c:	4452      	add	r2, sl
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b24:	f84c 3b04 	str.w	r3, [ip], #4
 8009b28:	f857 3b04 	ldr.w	r3, [r7], #4
 8009b2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b30:	f8bc 3000 	ldrh.w	r3, [ip]
 8009b34:	fb09 330a 	mla	r3, r9, sl, r3
 8009b38:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009b3c:	42bd      	cmp	r5, r7
 8009b3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b42:	d8e5      	bhi.n	8009b10 <__multiply+0xfc>
 8009b44:	9a01      	ldr	r2, [sp, #4]
 8009b46:	50a3      	str	r3, [r4, r2]
 8009b48:	3404      	adds	r4, #4
 8009b4a:	e79f      	b.n	8009a8c <__multiply+0x78>
 8009b4c:	3e01      	subs	r6, #1
 8009b4e:	e7a1      	b.n	8009a94 <__multiply+0x80>
 8009b50:	0800bfa6 	.word	0x0800bfa6
 8009b54:	0800bfb7 	.word	0x0800bfb7

08009b58 <__pow5mult>:
 8009b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	4615      	mov	r5, r2
 8009b5e:	f012 0203 	ands.w	r2, r2, #3
 8009b62:	4607      	mov	r7, r0
 8009b64:	460e      	mov	r6, r1
 8009b66:	d007      	beq.n	8009b78 <__pow5mult+0x20>
 8009b68:	4c25      	ldr	r4, [pc, #148]	@ (8009c00 <__pow5mult+0xa8>)
 8009b6a:	3a01      	subs	r2, #1
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b72:	f7ff fe5d 	bl	8009830 <__multadd>
 8009b76:	4606      	mov	r6, r0
 8009b78:	10ad      	asrs	r5, r5, #2
 8009b7a:	d03d      	beq.n	8009bf8 <__pow5mult+0xa0>
 8009b7c:	69fc      	ldr	r4, [r7, #28]
 8009b7e:	b97c      	cbnz	r4, 8009ba0 <__pow5mult+0x48>
 8009b80:	2010      	movs	r0, #16
 8009b82:	f7fd fce1 	bl	8007548 <malloc>
 8009b86:	4602      	mov	r2, r0
 8009b88:	61f8      	str	r0, [r7, #28]
 8009b8a:	b928      	cbnz	r0, 8009b98 <__pow5mult+0x40>
 8009b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c04 <__pow5mult+0xac>)
 8009b8e:	481e      	ldr	r0, [pc, #120]	@ (8009c08 <__pow5mult+0xb0>)
 8009b90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b94:	f001 fb48 	bl	800b228 <__assert_func>
 8009b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b9c:	6004      	str	r4, [r0, #0]
 8009b9e:	60c4      	str	r4, [r0, #12]
 8009ba0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ba8:	b94c      	cbnz	r4, 8009bbe <__pow5mult+0x66>
 8009baa:	f240 2171 	movw	r1, #625	@ 0x271
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f7ff ff1a 	bl	80099e8 <__i2b>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bba:	4604      	mov	r4, r0
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	f04f 0900 	mov.w	r9, #0
 8009bc2:	07eb      	lsls	r3, r5, #31
 8009bc4:	d50a      	bpl.n	8009bdc <__pow5mult+0x84>
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4638      	mov	r0, r7
 8009bcc:	f7ff ff22 	bl	8009a14 <__multiply>
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f7ff fe09 	bl	80097ec <_Bfree>
 8009bda:	4646      	mov	r6, r8
 8009bdc:	106d      	asrs	r5, r5, #1
 8009bde:	d00b      	beq.n	8009bf8 <__pow5mult+0xa0>
 8009be0:	6820      	ldr	r0, [r4, #0]
 8009be2:	b938      	cbnz	r0, 8009bf4 <__pow5mult+0x9c>
 8009be4:	4622      	mov	r2, r4
 8009be6:	4621      	mov	r1, r4
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff ff13 	bl	8009a14 <__multiply>
 8009bee:	6020      	str	r0, [r4, #0]
 8009bf0:	f8c0 9000 	str.w	r9, [r0]
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	e7e4      	b.n	8009bc2 <__pow5mult+0x6a>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bfe:	bf00      	nop
 8009c00:	0800c0c8 	.word	0x0800c0c8
 8009c04:	0800bf37 	.word	0x0800bf37
 8009c08:	0800bfb7 	.word	0x0800bfb7

08009c0c <__lshift>:
 8009c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	460c      	mov	r4, r1
 8009c12:	6849      	ldr	r1, [r1, #4]
 8009c14:	6923      	ldr	r3, [r4, #16]
 8009c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	4691      	mov	r9, r2
 8009c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c24:	f108 0601 	add.w	r6, r8, #1
 8009c28:	42b3      	cmp	r3, r6
 8009c2a:	db0b      	blt.n	8009c44 <__lshift+0x38>
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	f7ff fd9d 	bl	800976c <_Balloc>
 8009c32:	4605      	mov	r5, r0
 8009c34:	b948      	cbnz	r0, 8009c4a <__lshift+0x3e>
 8009c36:	4602      	mov	r2, r0
 8009c38:	4b28      	ldr	r3, [pc, #160]	@ (8009cdc <__lshift+0xd0>)
 8009c3a:	4829      	ldr	r0, [pc, #164]	@ (8009ce0 <__lshift+0xd4>)
 8009c3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c40:	f001 faf2 	bl	800b228 <__assert_func>
 8009c44:	3101      	adds	r1, #1
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	e7ee      	b.n	8009c28 <__lshift+0x1c>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f100 0114 	add.w	r1, r0, #20
 8009c50:	f100 0210 	add.w	r2, r0, #16
 8009c54:	4618      	mov	r0, r3
 8009c56:	4553      	cmp	r3, sl
 8009c58:	db33      	blt.n	8009cc2 <__lshift+0xb6>
 8009c5a:	6920      	ldr	r0, [r4, #16]
 8009c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c60:	f104 0314 	add.w	r3, r4, #20
 8009c64:	f019 091f 	ands.w	r9, r9, #31
 8009c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c70:	d02b      	beq.n	8009cca <__lshift+0xbe>
 8009c72:	f1c9 0e20 	rsb	lr, r9, #32
 8009c76:	468a      	mov	sl, r1
 8009c78:	2200      	movs	r2, #0
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009c80:	4310      	orrs	r0, r2
 8009c82:	f84a 0b04 	str.w	r0, [sl], #4
 8009c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c8a:	459c      	cmp	ip, r3
 8009c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c90:	d8f3      	bhi.n	8009c7a <__lshift+0x6e>
 8009c92:	ebac 0304 	sub.w	r3, ip, r4
 8009c96:	3b15      	subs	r3, #21
 8009c98:	f023 0303 	bic.w	r3, r3, #3
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	f104 0015 	add.w	r0, r4, #21
 8009ca2:	4560      	cmp	r0, ip
 8009ca4:	bf88      	it	hi
 8009ca6:	2304      	movhi	r3, #4
 8009ca8:	50ca      	str	r2, [r1, r3]
 8009caa:	b10a      	cbz	r2, 8009cb0 <__lshift+0xa4>
 8009cac:	f108 0602 	add.w	r6, r8, #2
 8009cb0:	3e01      	subs	r6, #1
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	612e      	str	r6, [r5, #16]
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	f7ff fd98 	bl	80097ec <_Bfree>
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	e7c5      	b.n	8009c56 <__lshift+0x4a>
 8009cca:	3904      	subs	r1, #4
 8009ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cd4:	459c      	cmp	ip, r3
 8009cd6:	d8f9      	bhi.n	8009ccc <__lshift+0xc0>
 8009cd8:	e7ea      	b.n	8009cb0 <__lshift+0xa4>
 8009cda:	bf00      	nop
 8009cdc:	0800bfa6 	.word	0x0800bfa6
 8009ce0:	0800bfb7 	.word	0x0800bfb7

08009ce4 <__mcmp>:
 8009ce4:	690a      	ldr	r2, [r1, #16]
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	6900      	ldr	r0, [r0, #16]
 8009cea:	1a80      	subs	r0, r0, r2
 8009cec:	b530      	push	{r4, r5, lr}
 8009cee:	d10e      	bne.n	8009d0e <__mcmp+0x2a>
 8009cf0:	3314      	adds	r3, #20
 8009cf2:	3114      	adds	r1, #20
 8009cf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009cfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d04:	4295      	cmp	r5, r2
 8009d06:	d003      	beq.n	8009d10 <__mcmp+0x2c>
 8009d08:	d205      	bcs.n	8009d16 <__mcmp+0x32>
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	bd30      	pop	{r4, r5, pc}
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	d3f3      	bcc.n	8009cfc <__mcmp+0x18>
 8009d14:	e7fb      	b.n	8009d0e <__mcmp+0x2a>
 8009d16:	2001      	movs	r0, #1
 8009d18:	e7f9      	b.n	8009d0e <__mcmp+0x2a>
	...

08009d1c <__mdiff>:
 8009d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d20:	4689      	mov	r9, r1
 8009d22:	4606      	mov	r6, r0
 8009d24:	4611      	mov	r1, r2
 8009d26:	4648      	mov	r0, r9
 8009d28:	4614      	mov	r4, r2
 8009d2a:	f7ff ffdb 	bl	8009ce4 <__mcmp>
 8009d2e:	1e05      	subs	r5, r0, #0
 8009d30:	d112      	bne.n	8009d58 <__mdiff+0x3c>
 8009d32:	4629      	mov	r1, r5
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff fd19 	bl	800976c <_Balloc>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	b928      	cbnz	r0, 8009d4a <__mdiff+0x2e>
 8009d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8009e3c <__mdiff+0x120>)
 8009d40:	f240 2137 	movw	r1, #567	@ 0x237
 8009d44:	483e      	ldr	r0, [pc, #248]	@ (8009e40 <__mdiff+0x124>)
 8009d46:	f001 fa6f 	bl	800b228 <__assert_func>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d50:	4610      	mov	r0, r2
 8009d52:	b003      	add	sp, #12
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	bfbc      	itt	lt
 8009d5a:	464b      	movlt	r3, r9
 8009d5c:	46a1      	movlt	r9, r4
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d64:	bfba      	itte	lt
 8009d66:	461c      	movlt	r4, r3
 8009d68:	2501      	movlt	r5, #1
 8009d6a:	2500      	movge	r5, #0
 8009d6c:	f7ff fcfe 	bl	800976c <_Balloc>
 8009d70:	4602      	mov	r2, r0
 8009d72:	b918      	cbnz	r0, 8009d7c <__mdiff+0x60>
 8009d74:	4b31      	ldr	r3, [pc, #196]	@ (8009e3c <__mdiff+0x120>)
 8009d76:	f240 2145 	movw	r1, #581	@ 0x245
 8009d7a:	e7e3      	b.n	8009d44 <__mdiff+0x28>
 8009d7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d80:	6926      	ldr	r6, [r4, #16]
 8009d82:	60c5      	str	r5, [r0, #12]
 8009d84:	f109 0310 	add.w	r3, r9, #16
 8009d88:	f109 0514 	add.w	r5, r9, #20
 8009d8c:	f104 0e14 	add.w	lr, r4, #20
 8009d90:	f100 0b14 	add.w	fp, r0, #20
 8009d94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	46d9      	mov	r9, fp
 8009da0:	f04f 0c00 	mov.w	ip, #0
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009daa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	fa1f f38a 	uxth.w	r3, sl
 8009db4:	4619      	mov	r1, r3
 8009db6:	b283      	uxth	r3, r0
 8009db8:	1acb      	subs	r3, r1, r3
 8009dba:	0c00      	lsrs	r0, r0, #16
 8009dbc:	4463      	add	r3, ip
 8009dbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009dc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009dcc:	4576      	cmp	r6, lr
 8009dce:	f849 3b04 	str.w	r3, [r9], #4
 8009dd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dd6:	d8e5      	bhi.n	8009da4 <__mdiff+0x88>
 8009dd8:	1b33      	subs	r3, r6, r4
 8009dda:	3b15      	subs	r3, #21
 8009ddc:	f023 0303 	bic.w	r3, r3, #3
 8009de0:	3415      	adds	r4, #21
 8009de2:	3304      	adds	r3, #4
 8009de4:	42a6      	cmp	r6, r4
 8009de6:	bf38      	it	cc
 8009de8:	2304      	movcc	r3, #4
 8009dea:	441d      	add	r5, r3
 8009dec:	445b      	add	r3, fp
 8009dee:	461e      	mov	r6, r3
 8009df0:	462c      	mov	r4, r5
 8009df2:	4544      	cmp	r4, r8
 8009df4:	d30e      	bcc.n	8009e14 <__mdiff+0xf8>
 8009df6:	f108 0103 	add.w	r1, r8, #3
 8009dfa:	1b49      	subs	r1, r1, r5
 8009dfc:	f021 0103 	bic.w	r1, r1, #3
 8009e00:	3d03      	subs	r5, #3
 8009e02:	45a8      	cmp	r8, r5
 8009e04:	bf38      	it	cc
 8009e06:	2100      	movcc	r1, #0
 8009e08:	440b      	add	r3, r1
 8009e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e0e:	b191      	cbz	r1, 8009e36 <__mdiff+0x11a>
 8009e10:	6117      	str	r7, [r2, #16]
 8009e12:	e79d      	b.n	8009d50 <__mdiff+0x34>
 8009e14:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e18:	46e6      	mov	lr, ip
 8009e1a:	0c08      	lsrs	r0, r1, #16
 8009e1c:	fa1c fc81 	uxtah	ip, ip, r1
 8009e20:	4471      	add	r1, lr
 8009e22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e26:	b289      	uxth	r1, r1
 8009e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e2c:	f846 1b04 	str.w	r1, [r6], #4
 8009e30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e34:	e7dd      	b.n	8009df2 <__mdiff+0xd6>
 8009e36:	3f01      	subs	r7, #1
 8009e38:	e7e7      	b.n	8009e0a <__mdiff+0xee>
 8009e3a:	bf00      	nop
 8009e3c:	0800bfa6 	.word	0x0800bfa6
 8009e40:	0800bfb7 	.word	0x0800bfb7

08009e44 <__ulp>:
 8009e44:	b082      	sub	sp, #8
 8009e46:	ed8d 0b00 	vstr	d0, [sp]
 8009e4a:	9a01      	ldr	r2, [sp, #4]
 8009e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e8c <__ulp+0x48>)
 8009e4e:	4013      	ands	r3, r2
 8009e50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dc08      	bgt.n	8009e6a <__ulp+0x26>
 8009e58:	425b      	negs	r3, r3
 8009e5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009e5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e62:	da04      	bge.n	8009e6e <__ulp+0x2a>
 8009e64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009e68:	4113      	asrs	r3, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	e008      	b.n	8009e80 <__ulp+0x3c>
 8009e6e:	f1a2 0314 	sub.w	r3, r2, #20
 8009e72:	2b1e      	cmp	r3, #30
 8009e74:	bfda      	itte	le
 8009e76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e7a:	40da      	lsrle	r2, r3
 8009e7c:	2201      	movgt	r2, #1
 8009e7e:	2300      	movs	r3, #0
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	ec41 0b10 	vmov	d0, r0, r1
 8009e88:	b002      	add	sp, #8
 8009e8a:	4770      	bx	lr
 8009e8c:	7ff00000 	.word	0x7ff00000

08009e90 <__b2d>:
 8009e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e94:	6906      	ldr	r6, [r0, #16]
 8009e96:	f100 0814 	add.w	r8, r0, #20
 8009e9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e9e:	1f37      	subs	r7, r6, #4
 8009ea0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	f7ff fd53 	bl	8009950 <__hi0bits>
 8009eaa:	f1c0 0320 	rsb	r3, r0, #32
 8009eae:	280a      	cmp	r0, #10
 8009eb0:	600b      	str	r3, [r1, #0]
 8009eb2:	491b      	ldr	r1, [pc, #108]	@ (8009f20 <__b2d+0x90>)
 8009eb4:	dc15      	bgt.n	8009ee2 <__b2d+0x52>
 8009eb6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009eba:	fa22 f30c 	lsr.w	r3, r2, ip
 8009ebe:	45b8      	cmp	r8, r7
 8009ec0:	ea43 0501 	orr.w	r5, r3, r1
 8009ec4:	bf34      	ite	cc
 8009ec6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009eca:	2300      	movcs	r3, #0
 8009ecc:	3015      	adds	r0, #21
 8009ece:	fa02 f000 	lsl.w	r0, r2, r0
 8009ed2:	fa23 f30c 	lsr.w	r3, r3, ip
 8009ed6:	4303      	orrs	r3, r0
 8009ed8:	461c      	mov	r4, r3
 8009eda:	ec45 4b10 	vmov	d0, r4, r5
 8009ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee2:	45b8      	cmp	r8, r7
 8009ee4:	bf3a      	itte	cc
 8009ee6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009eea:	f1a6 0708 	subcc.w	r7, r6, #8
 8009eee:	2300      	movcs	r3, #0
 8009ef0:	380b      	subs	r0, #11
 8009ef2:	d012      	beq.n	8009f1a <__b2d+0x8a>
 8009ef4:	f1c0 0120 	rsb	r1, r0, #32
 8009ef8:	fa23 f401 	lsr.w	r4, r3, r1
 8009efc:	4082      	lsls	r2, r0
 8009efe:	4322      	orrs	r2, r4
 8009f00:	4547      	cmp	r7, r8
 8009f02:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009f06:	bf8c      	ite	hi
 8009f08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f0c:	2200      	movls	r2, #0
 8009f0e:	4083      	lsls	r3, r0
 8009f10:	40ca      	lsrs	r2, r1
 8009f12:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f16:	4313      	orrs	r3, r2
 8009f18:	e7de      	b.n	8009ed8 <__b2d+0x48>
 8009f1a:	ea42 0501 	orr.w	r5, r2, r1
 8009f1e:	e7db      	b.n	8009ed8 <__b2d+0x48>
 8009f20:	3ff00000 	.word	0x3ff00000

08009f24 <__d2b>:
 8009f24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f28:	460f      	mov	r7, r1
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	ec59 8b10 	vmov	r8, r9, d0
 8009f30:	4616      	mov	r6, r2
 8009f32:	f7ff fc1b 	bl	800976c <_Balloc>
 8009f36:	4604      	mov	r4, r0
 8009f38:	b930      	cbnz	r0, 8009f48 <__d2b+0x24>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b23      	ldr	r3, [pc, #140]	@ (8009fcc <__d2b+0xa8>)
 8009f3e:	4824      	ldr	r0, [pc, #144]	@ (8009fd0 <__d2b+0xac>)
 8009f40:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f44:	f001 f970 	bl	800b228 <__assert_func>
 8009f48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f50:	b10d      	cbz	r5, 8009f56 <__d2b+0x32>
 8009f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f56:	9301      	str	r3, [sp, #4]
 8009f58:	f1b8 0300 	subs.w	r3, r8, #0
 8009f5c:	d023      	beq.n	8009fa6 <__d2b+0x82>
 8009f5e:	4668      	mov	r0, sp
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	f7ff fd14 	bl	800998e <__lo0bits>
 8009f66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f6a:	b1d0      	cbz	r0, 8009fa2 <__d2b+0x7e>
 8009f6c:	f1c0 0320 	rsb	r3, r0, #32
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	430b      	orrs	r3, r1
 8009f76:	40c2      	lsrs	r2, r0
 8009f78:	6163      	str	r3, [r4, #20]
 8009f7a:	9201      	str	r2, [sp, #4]
 8009f7c:	9b01      	ldr	r3, [sp, #4]
 8009f7e:	61a3      	str	r3, [r4, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bf0c      	ite	eq
 8009f84:	2201      	moveq	r2, #1
 8009f86:	2202      	movne	r2, #2
 8009f88:	6122      	str	r2, [r4, #16]
 8009f8a:	b1a5      	cbz	r5, 8009fb6 <__d2b+0x92>
 8009f8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f90:	4405      	add	r5, r0
 8009f92:	603d      	str	r5, [r7, #0]
 8009f94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f98:	6030      	str	r0, [r6, #0]
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	b003      	add	sp, #12
 8009f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fa2:	6161      	str	r1, [r4, #20]
 8009fa4:	e7ea      	b.n	8009f7c <__d2b+0x58>
 8009fa6:	a801      	add	r0, sp, #4
 8009fa8:	f7ff fcf1 	bl	800998e <__lo0bits>
 8009fac:	9b01      	ldr	r3, [sp, #4]
 8009fae:	6163      	str	r3, [r4, #20]
 8009fb0:	3020      	adds	r0, #32
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	e7e8      	b.n	8009f88 <__d2b+0x64>
 8009fb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009fbe:	6038      	str	r0, [r7, #0]
 8009fc0:	6918      	ldr	r0, [r3, #16]
 8009fc2:	f7ff fcc5 	bl	8009950 <__hi0bits>
 8009fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fca:	e7e5      	b.n	8009f98 <__d2b+0x74>
 8009fcc:	0800bfa6 	.word	0x0800bfa6
 8009fd0:	0800bfb7 	.word	0x0800bfb7

08009fd4 <__ratio>:
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	e9cd 1000 	strd	r1, r0, [sp]
 8009fde:	a902      	add	r1, sp, #8
 8009fe0:	f7ff ff56 	bl	8009e90 <__b2d>
 8009fe4:	9800      	ldr	r0, [sp, #0]
 8009fe6:	a903      	add	r1, sp, #12
 8009fe8:	ec55 4b10 	vmov	r4, r5, d0
 8009fec:	f7ff ff50 	bl	8009e90 <__b2d>
 8009ff0:	9b01      	ldr	r3, [sp, #4]
 8009ff2:	6919      	ldr	r1, [r3, #16]
 8009ff4:	9b00      	ldr	r3, [sp, #0]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	1ac9      	subs	r1, r1, r3
 8009ffa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	ec5b ab10 	vmov	sl, fp, d0
 800a004:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bfce      	itee	gt
 800a00c:	462a      	movgt	r2, r5
 800a00e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a012:	465a      	movle	r2, fp
 800a014:	462f      	mov	r7, r5
 800a016:	46d9      	mov	r9, fp
 800a018:	bfcc      	ite	gt
 800a01a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a01e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a022:	464b      	mov	r3, r9
 800a024:	4652      	mov	r2, sl
 800a026:	4620      	mov	r0, r4
 800a028:	4639      	mov	r1, r7
 800a02a:	f7f6 fc0f 	bl	800084c <__aeabi_ddiv>
 800a02e:	ec41 0b10 	vmov	d0, r0, r1
 800a032:	b005      	add	sp, #20
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a038 <__copybits>:
 800a038:	3901      	subs	r1, #1
 800a03a:	b570      	push	{r4, r5, r6, lr}
 800a03c:	1149      	asrs	r1, r1, #5
 800a03e:	6914      	ldr	r4, [r2, #16]
 800a040:	3101      	adds	r1, #1
 800a042:	f102 0314 	add.w	r3, r2, #20
 800a046:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a04a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a04e:	1f05      	subs	r5, r0, #4
 800a050:	42a3      	cmp	r3, r4
 800a052:	d30c      	bcc.n	800a06e <__copybits+0x36>
 800a054:	1aa3      	subs	r3, r4, r2
 800a056:	3b11      	subs	r3, #17
 800a058:	f023 0303 	bic.w	r3, r3, #3
 800a05c:	3211      	adds	r2, #17
 800a05e:	42a2      	cmp	r2, r4
 800a060:	bf88      	it	hi
 800a062:	2300      	movhi	r3, #0
 800a064:	4418      	add	r0, r3
 800a066:	2300      	movs	r3, #0
 800a068:	4288      	cmp	r0, r1
 800a06a:	d305      	bcc.n	800a078 <__copybits+0x40>
 800a06c:	bd70      	pop	{r4, r5, r6, pc}
 800a06e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a072:	f845 6f04 	str.w	r6, [r5, #4]!
 800a076:	e7eb      	b.n	800a050 <__copybits+0x18>
 800a078:	f840 3b04 	str.w	r3, [r0], #4
 800a07c:	e7f4      	b.n	800a068 <__copybits+0x30>

0800a07e <__any_on>:
 800a07e:	f100 0214 	add.w	r2, r0, #20
 800a082:	6900      	ldr	r0, [r0, #16]
 800a084:	114b      	asrs	r3, r1, #5
 800a086:	4298      	cmp	r0, r3
 800a088:	b510      	push	{r4, lr}
 800a08a:	db11      	blt.n	800a0b0 <__any_on+0x32>
 800a08c:	dd0a      	ble.n	800a0a4 <__any_on+0x26>
 800a08e:	f011 011f 	ands.w	r1, r1, #31
 800a092:	d007      	beq.n	800a0a4 <__any_on+0x26>
 800a094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a098:	fa24 f001 	lsr.w	r0, r4, r1
 800a09c:	fa00 f101 	lsl.w	r1, r0, r1
 800a0a0:	428c      	cmp	r4, r1
 800a0a2:	d10b      	bne.n	800a0bc <__any_on+0x3e>
 800a0a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d803      	bhi.n	800a0b4 <__any_on+0x36>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	bd10      	pop	{r4, pc}
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	e7f7      	b.n	800a0a4 <__any_on+0x26>
 800a0b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0b8:	2900      	cmp	r1, #0
 800a0ba:	d0f5      	beq.n	800a0a8 <__any_on+0x2a>
 800a0bc:	2001      	movs	r0, #1
 800a0be:	e7f6      	b.n	800a0ae <__any_on+0x30>

0800a0c0 <sulp>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	ec45 4b10 	vmov	d0, r4, r5
 800a0ca:	4616      	mov	r6, r2
 800a0cc:	f7ff feba 	bl	8009e44 <__ulp>
 800a0d0:	ec51 0b10 	vmov	r0, r1, d0
 800a0d4:	b17e      	cbz	r6, 800a0f6 <sulp+0x36>
 800a0d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a0da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	dd09      	ble.n	800a0f6 <sulp+0x36>
 800a0e2:	051b      	lsls	r3, r3, #20
 800a0e4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a0e8:	2400      	movs	r4, #0
 800a0ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	462b      	mov	r3, r5
 800a0f2:	f7f6 fa81 	bl	80005f8 <__aeabi_dmul>
 800a0f6:	ec41 0b10 	vmov	d0, r0, r1
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
 800a0fc:	0000      	movs	r0, r0
	...

0800a100 <_strtod_l>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	b09f      	sub	sp, #124	@ 0x7c
 800a106:	460c      	mov	r4, r1
 800a108:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a10a:	2200      	movs	r2, #0
 800a10c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a10e:	9005      	str	r0, [sp, #20]
 800a110:	f04f 0a00 	mov.w	sl, #0
 800a114:	f04f 0b00 	mov.w	fp, #0
 800a118:	460a      	mov	r2, r1
 800a11a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a11c:	7811      	ldrb	r1, [r2, #0]
 800a11e:	292b      	cmp	r1, #43	@ 0x2b
 800a120:	d04a      	beq.n	800a1b8 <_strtod_l+0xb8>
 800a122:	d838      	bhi.n	800a196 <_strtod_l+0x96>
 800a124:	290d      	cmp	r1, #13
 800a126:	d832      	bhi.n	800a18e <_strtod_l+0x8e>
 800a128:	2908      	cmp	r1, #8
 800a12a:	d832      	bhi.n	800a192 <_strtod_l+0x92>
 800a12c:	2900      	cmp	r1, #0
 800a12e:	d03b      	beq.n	800a1a8 <_strtod_l+0xa8>
 800a130:	2200      	movs	r2, #0
 800a132:	920e      	str	r2, [sp, #56]	@ 0x38
 800a134:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a136:	782a      	ldrb	r2, [r5, #0]
 800a138:	2a30      	cmp	r2, #48	@ 0x30
 800a13a:	f040 80b2 	bne.w	800a2a2 <_strtod_l+0x1a2>
 800a13e:	786a      	ldrb	r2, [r5, #1]
 800a140:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a144:	2a58      	cmp	r2, #88	@ 0x58
 800a146:	d16e      	bne.n	800a226 <_strtod_l+0x126>
 800a148:	9302      	str	r3, [sp, #8]
 800a14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	4a8f      	ldr	r2, [pc, #572]	@ (800a390 <_strtod_l+0x290>)
 800a154:	9805      	ldr	r0, [sp, #20]
 800a156:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a158:	a919      	add	r1, sp, #100	@ 0x64
 800a15a:	f001 f8ff 	bl	800b35c <__gethex>
 800a15e:	f010 060f 	ands.w	r6, r0, #15
 800a162:	4604      	mov	r4, r0
 800a164:	d005      	beq.n	800a172 <_strtod_l+0x72>
 800a166:	2e06      	cmp	r6, #6
 800a168:	d128      	bne.n	800a1bc <_strtod_l+0xbc>
 800a16a:	3501      	adds	r5, #1
 800a16c:	2300      	movs	r3, #0
 800a16e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a170:	930e      	str	r3, [sp, #56]	@ 0x38
 800a172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a174:	2b00      	cmp	r3, #0
 800a176:	f040 858e 	bne.w	800ac96 <_strtod_l+0xb96>
 800a17a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a17c:	b1cb      	cbz	r3, 800a1b2 <_strtod_l+0xb2>
 800a17e:	4652      	mov	r2, sl
 800a180:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a184:	ec43 2b10 	vmov	d0, r2, r3
 800a188:	b01f      	add	sp, #124	@ 0x7c
 800a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18e:	2920      	cmp	r1, #32
 800a190:	d1ce      	bne.n	800a130 <_strtod_l+0x30>
 800a192:	3201      	adds	r2, #1
 800a194:	e7c1      	b.n	800a11a <_strtod_l+0x1a>
 800a196:	292d      	cmp	r1, #45	@ 0x2d
 800a198:	d1ca      	bne.n	800a130 <_strtod_l+0x30>
 800a19a:	2101      	movs	r1, #1
 800a19c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a19e:	1c51      	adds	r1, r2, #1
 800a1a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1a2:	7852      	ldrb	r2, [r2, #1]
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	d1c5      	bne.n	800a134 <_strtod_l+0x34>
 800a1a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f040 8570 	bne.w	800ac92 <_strtod_l+0xb92>
 800a1b2:	4652      	mov	r2, sl
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	e7e5      	b.n	800a184 <_strtod_l+0x84>
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	e7ef      	b.n	800a19c <_strtod_l+0x9c>
 800a1bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1be:	b13a      	cbz	r2, 800a1d0 <_strtod_l+0xd0>
 800a1c0:	2135      	movs	r1, #53	@ 0x35
 800a1c2:	a81c      	add	r0, sp, #112	@ 0x70
 800a1c4:	f7ff ff38 	bl	800a038 <__copybits>
 800a1c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1ca:	9805      	ldr	r0, [sp, #20]
 800a1cc:	f7ff fb0e 	bl	80097ec <_Bfree>
 800a1d0:	3e01      	subs	r6, #1
 800a1d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a1d4:	2e04      	cmp	r6, #4
 800a1d6:	d806      	bhi.n	800a1e6 <_strtod_l+0xe6>
 800a1d8:	e8df f006 	tbb	[pc, r6]
 800a1dc:	201d0314 	.word	0x201d0314
 800a1e0:	14          	.byte	0x14
 800a1e1:	00          	.byte	0x00
 800a1e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a1e6:	05e1      	lsls	r1, r4, #23
 800a1e8:	bf48      	it	mi
 800a1ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a1ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1f2:	0d1b      	lsrs	r3, r3, #20
 800a1f4:	051b      	lsls	r3, r3, #20
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1bb      	bne.n	800a172 <_strtod_l+0x72>
 800a1fa:	f7fe fbd1 	bl	80089a0 <__errno>
 800a1fe:	2322      	movs	r3, #34	@ 0x22
 800a200:	6003      	str	r3, [r0, #0]
 800a202:	e7b6      	b.n	800a172 <_strtod_l+0x72>
 800a204:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a208:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a20c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a210:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a214:	e7e7      	b.n	800a1e6 <_strtod_l+0xe6>
 800a216:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a398 <_strtod_l+0x298>
 800a21a:	e7e4      	b.n	800a1e6 <_strtod_l+0xe6>
 800a21c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a220:	f04f 3aff 	mov.w	sl, #4294967295
 800a224:	e7df      	b.n	800a1e6 <_strtod_l+0xe6>
 800a226:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	2b30      	cmp	r3, #48	@ 0x30
 800a230:	d0f9      	beq.n	800a226 <_strtod_l+0x126>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d09d      	beq.n	800a172 <_strtod_l+0x72>
 800a236:	2301      	movs	r3, #1
 800a238:	2700      	movs	r7, #0
 800a23a:	9308      	str	r3, [sp, #32]
 800a23c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a23e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a240:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a242:	46b9      	mov	r9, r7
 800a244:	220a      	movs	r2, #10
 800a246:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a248:	7805      	ldrb	r5, [r0, #0]
 800a24a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a24e:	b2d9      	uxtb	r1, r3
 800a250:	2909      	cmp	r1, #9
 800a252:	d928      	bls.n	800a2a6 <_strtod_l+0x1a6>
 800a254:	494f      	ldr	r1, [pc, #316]	@ (800a394 <_strtod_l+0x294>)
 800a256:	2201      	movs	r2, #1
 800a258:	f7fe fb36 	bl	80088c8 <strncmp>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d032      	beq.n	800a2c6 <_strtod_l+0x1c6>
 800a260:	2000      	movs	r0, #0
 800a262:	462a      	mov	r2, r5
 800a264:	900a      	str	r0, [sp, #40]	@ 0x28
 800a266:	464d      	mov	r5, r9
 800a268:	4603      	mov	r3, r0
 800a26a:	2a65      	cmp	r2, #101	@ 0x65
 800a26c:	d001      	beq.n	800a272 <_strtod_l+0x172>
 800a26e:	2a45      	cmp	r2, #69	@ 0x45
 800a270:	d114      	bne.n	800a29c <_strtod_l+0x19c>
 800a272:	b91d      	cbnz	r5, 800a27c <_strtod_l+0x17c>
 800a274:	9a08      	ldr	r2, [sp, #32]
 800a276:	4302      	orrs	r2, r0
 800a278:	d096      	beq.n	800a1a8 <_strtod_l+0xa8>
 800a27a:	2500      	movs	r5, #0
 800a27c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a27e:	1c62      	adds	r2, r4, #1
 800a280:	9219      	str	r2, [sp, #100]	@ 0x64
 800a282:	7862      	ldrb	r2, [r4, #1]
 800a284:	2a2b      	cmp	r2, #43	@ 0x2b
 800a286:	d07a      	beq.n	800a37e <_strtod_l+0x27e>
 800a288:	2a2d      	cmp	r2, #45	@ 0x2d
 800a28a:	d07e      	beq.n	800a38a <_strtod_l+0x28a>
 800a28c:	f04f 0c00 	mov.w	ip, #0
 800a290:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a294:	2909      	cmp	r1, #9
 800a296:	f240 8085 	bls.w	800a3a4 <_strtod_l+0x2a4>
 800a29a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a29c:	f04f 0800 	mov.w	r8, #0
 800a2a0:	e0a5      	b.n	800a3ee <_strtod_l+0x2ee>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e7c8      	b.n	800a238 <_strtod_l+0x138>
 800a2a6:	f1b9 0f08 	cmp.w	r9, #8
 800a2aa:	bfd8      	it	le
 800a2ac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a2ae:	f100 0001 	add.w	r0, r0, #1
 800a2b2:	bfda      	itte	le
 800a2b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a2b8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a2ba:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a2be:	f109 0901 	add.w	r9, r9, #1
 800a2c2:	9019      	str	r0, [sp, #100]	@ 0x64
 800a2c4:	e7bf      	b.n	800a246 <_strtod_l+0x146>
 800a2c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2cc:	785a      	ldrb	r2, [r3, #1]
 800a2ce:	f1b9 0f00 	cmp.w	r9, #0
 800a2d2:	d03b      	beq.n	800a34c <_strtod_l+0x24c>
 800a2d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2d6:	464d      	mov	r5, r9
 800a2d8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a2dc:	2b09      	cmp	r3, #9
 800a2de:	d912      	bls.n	800a306 <_strtod_l+0x206>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e7c2      	b.n	800a26a <_strtod_l+0x16a>
 800a2e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2ea:	785a      	ldrb	r2, [r3, #1]
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	2a30      	cmp	r2, #48	@ 0x30
 800a2f0:	d0f8      	beq.n	800a2e4 <_strtod_l+0x1e4>
 800a2f2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a2f6:	2b08      	cmp	r3, #8
 800a2f8:	f200 84d2 	bhi.w	800aca0 <_strtod_l+0xba0>
 800a2fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800a300:	2000      	movs	r0, #0
 800a302:	930c      	str	r3, [sp, #48]	@ 0x30
 800a304:	4605      	mov	r5, r0
 800a306:	3a30      	subs	r2, #48	@ 0x30
 800a308:	f100 0301 	add.w	r3, r0, #1
 800a30c:	d018      	beq.n	800a340 <_strtod_l+0x240>
 800a30e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a310:	4419      	add	r1, r3
 800a312:	910a      	str	r1, [sp, #40]	@ 0x28
 800a314:	462e      	mov	r6, r5
 800a316:	f04f 0e0a 	mov.w	lr, #10
 800a31a:	1c71      	adds	r1, r6, #1
 800a31c:	eba1 0c05 	sub.w	ip, r1, r5
 800a320:	4563      	cmp	r3, ip
 800a322:	dc15      	bgt.n	800a350 <_strtod_l+0x250>
 800a324:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a328:	182b      	adds	r3, r5, r0
 800a32a:	2b08      	cmp	r3, #8
 800a32c:	f105 0501 	add.w	r5, r5, #1
 800a330:	4405      	add	r5, r0
 800a332:	dc1a      	bgt.n	800a36a <_strtod_l+0x26a>
 800a334:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a336:	230a      	movs	r3, #10
 800a338:	fb03 2301 	mla	r3, r3, r1, r2
 800a33c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a33e:	2300      	movs	r3, #0
 800a340:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a342:	1c51      	adds	r1, r2, #1
 800a344:	9119      	str	r1, [sp, #100]	@ 0x64
 800a346:	7852      	ldrb	r2, [r2, #1]
 800a348:	4618      	mov	r0, r3
 800a34a:	e7c5      	b.n	800a2d8 <_strtod_l+0x1d8>
 800a34c:	4648      	mov	r0, r9
 800a34e:	e7ce      	b.n	800a2ee <_strtod_l+0x1ee>
 800a350:	2e08      	cmp	r6, #8
 800a352:	dc05      	bgt.n	800a360 <_strtod_l+0x260>
 800a354:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a356:	fb0e f606 	mul.w	r6, lr, r6
 800a35a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a35c:	460e      	mov	r6, r1
 800a35e:	e7dc      	b.n	800a31a <_strtod_l+0x21a>
 800a360:	2910      	cmp	r1, #16
 800a362:	bfd8      	it	le
 800a364:	fb0e f707 	mulle.w	r7, lr, r7
 800a368:	e7f8      	b.n	800a35c <_strtod_l+0x25c>
 800a36a:	2b0f      	cmp	r3, #15
 800a36c:	bfdc      	itt	le
 800a36e:	230a      	movle	r3, #10
 800a370:	fb03 2707 	mlale	r7, r3, r7, r2
 800a374:	e7e3      	b.n	800a33e <_strtod_l+0x23e>
 800a376:	2300      	movs	r3, #0
 800a378:	930a      	str	r3, [sp, #40]	@ 0x28
 800a37a:	2301      	movs	r3, #1
 800a37c:	e77a      	b.n	800a274 <_strtod_l+0x174>
 800a37e:	f04f 0c00 	mov.w	ip, #0
 800a382:	1ca2      	adds	r2, r4, #2
 800a384:	9219      	str	r2, [sp, #100]	@ 0x64
 800a386:	78a2      	ldrb	r2, [r4, #2]
 800a388:	e782      	b.n	800a290 <_strtod_l+0x190>
 800a38a:	f04f 0c01 	mov.w	ip, #1
 800a38e:	e7f8      	b.n	800a382 <_strtod_l+0x282>
 800a390:	0800c1dc 	.word	0x0800c1dc
 800a394:	0800c010 	.word	0x0800c010
 800a398:	7ff00000 	.word	0x7ff00000
 800a39c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a39e:	1c51      	adds	r1, r2, #1
 800a3a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3a2:	7852      	ldrb	r2, [r2, #1]
 800a3a4:	2a30      	cmp	r2, #48	@ 0x30
 800a3a6:	d0f9      	beq.n	800a39c <_strtod_l+0x29c>
 800a3a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a3ac:	2908      	cmp	r1, #8
 800a3ae:	f63f af75 	bhi.w	800a29c <_strtod_l+0x19c>
 800a3b2:	3a30      	subs	r2, #48	@ 0x30
 800a3b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a3ba:	f04f 080a 	mov.w	r8, #10
 800a3be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3c0:	1c56      	adds	r6, r2, #1
 800a3c2:	9619      	str	r6, [sp, #100]	@ 0x64
 800a3c4:	7852      	ldrb	r2, [r2, #1]
 800a3c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a3ca:	f1be 0f09 	cmp.w	lr, #9
 800a3ce:	d939      	bls.n	800a444 <_strtod_l+0x344>
 800a3d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a3d2:	1a76      	subs	r6, r6, r1
 800a3d4:	2e08      	cmp	r6, #8
 800a3d6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a3da:	dc03      	bgt.n	800a3e4 <_strtod_l+0x2e4>
 800a3dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3de:	4588      	cmp	r8, r1
 800a3e0:	bfa8      	it	ge
 800a3e2:	4688      	movge	r8, r1
 800a3e4:	f1bc 0f00 	cmp.w	ip, #0
 800a3e8:	d001      	beq.n	800a3ee <_strtod_l+0x2ee>
 800a3ea:	f1c8 0800 	rsb	r8, r8, #0
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	d14e      	bne.n	800a490 <_strtod_l+0x390>
 800a3f2:	9908      	ldr	r1, [sp, #32]
 800a3f4:	4308      	orrs	r0, r1
 800a3f6:	f47f aebc 	bne.w	800a172 <_strtod_l+0x72>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f47f aed4 	bne.w	800a1a8 <_strtod_l+0xa8>
 800a400:	2a69      	cmp	r2, #105	@ 0x69
 800a402:	d028      	beq.n	800a456 <_strtod_l+0x356>
 800a404:	dc25      	bgt.n	800a452 <_strtod_l+0x352>
 800a406:	2a49      	cmp	r2, #73	@ 0x49
 800a408:	d025      	beq.n	800a456 <_strtod_l+0x356>
 800a40a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a40c:	f47f aecc 	bne.w	800a1a8 <_strtod_l+0xa8>
 800a410:	499a      	ldr	r1, [pc, #616]	@ (800a67c <_strtod_l+0x57c>)
 800a412:	a819      	add	r0, sp, #100	@ 0x64
 800a414:	f001 f9c4 	bl	800b7a0 <__match>
 800a418:	2800      	cmp	r0, #0
 800a41a:	f43f aec5 	beq.w	800a1a8 <_strtod_l+0xa8>
 800a41e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b28      	cmp	r3, #40	@ 0x28
 800a424:	d12e      	bne.n	800a484 <_strtod_l+0x384>
 800a426:	4996      	ldr	r1, [pc, #600]	@ (800a680 <_strtod_l+0x580>)
 800a428:	aa1c      	add	r2, sp, #112	@ 0x70
 800a42a:	a819      	add	r0, sp, #100	@ 0x64
 800a42c:	f001 f9cc 	bl	800b7c8 <__hexnan>
 800a430:	2805      	cmp	r0, #5
 800a432:	d127      	bne.n	800a484 <_strtod_l+0x384>
 800a434:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a436:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a43a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a43e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a442:	e696      	b.n	800a172 <_strtod_l+0x72>
 800a444:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a446:	fb08 2101 	mla	r1, r8, r1, r2
 800a44a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a44e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a450:	e7b5      	b.n	800a3be <_strtod_l+0x2be>
 800a452:	2a6e      	cmp	r2, #110	@ 0x6e
 800a454:	e7da      	b.n	800a40c <_strtod_l+0x30c>
 800a456:	498b      	ldr	r1, [pc, #556]	@ (800a684 <_strtod_l+0x584>)
 800a458:	a819      	add	r0, sp, #100	@ 0x64
 800a45a:	f001 f9a1 	bl	800b7a0 <__match>
 800a45e:	2800      	cmp	r0, #0
 800a460:	f43f aea2 	beq.w	800a1a8 <_strtod_l+0xa8>
 800a464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a466:	4988      	ldr	r1, [pc, #544]	@ (800a688 <_strtod_l+0x588>)
 800a468:	3b01      	subs	r3, #1
 800a46a:	a819      	add	r0, sp, #100	@ 0x64
 800a46c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a46e:	f001 f997 	bl	800b7a0 <__match>
 800a472:	b910      	cbnz	r0, 800a47a <_strtod_l+0x37a>
 800a474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a476:	3301      	adds	r3, #1
 800a478:	9319      	str	r3, [sp, #100]	@ 0x64
 800a47a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a698 <_strtod_l+0x598>
 800a47e:	f04f 0a00 	mov.w	sl, #0
 800a482:	e676      	b.n	800a172 <_strtod_l+0x72>
 800a484:	4881      	ldr	r0, [pc, #516]	@ (800a68c <_strtod_l+0x58c>)
 800a486:	f000 fec7 	bl	800b218 <nan>
 800a48a:	ec5b ab10 	vmov	sl, fp, d0
 800a48e:	e670      	b.n	800a172 <_strtod_l+0x72>
 800a490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a492:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a494:	eba8 0303 	sub.w	r3, r8, r3
 800a498:	f1b9 0f00 	cmp.w	r9, #0
 800a49c:	bf08      	it	eq
 800a49e:	46a9      	moveq	r9, r5
 800a4a0:	2d10      	cmp	r5, #16
 800a4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a4:	462c      	mov	r4, r5
 800a4a6:	bfa8      	it	ge
 800a4a8:	2410      	movge	r4, #16
 800a4aa:	f7f6 f82b 	bl	8000504 <__aeabi_ui2d>
 800a4ae:	2d09      	cmp	r5, #9
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	468b      	mov	fp, r1
 800a4b4:	dc13      	bgt.n	800a4de <_strtod_l+0x3de>
 800a4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f43f ae5a 	beq.w	800a172 <_strtod_l+0x72>
 800a4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c0:	dd78      	ble.n	800a5b4 <_strtod_l+0x4b4>
 800a4c2:	2b16      	cmp	r3, #22
 800a4c4:	dc5f      	bgt.n	800a586 <_strtod_l+0x486>
 800a4c6:	4972      	ldr	r1, [pc, #456]	@ (800a690 <_strtod_l+0x590>)
 800a4c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4d0:	4652      	mov	r2, sl
 800a4d2:	465b      	mov	r3, fp
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	4682      	mov	sl, r0
 800a4da:	468b      	mov	fp, r1
 800a4dc:	e649      	b.n	800a172 <_strtod_l+0x72>
 800a4de:	4b6c      	ldr	r3, [pc, #432]	@ (800a690 <_strtod_l+0x590>)
 800a4e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	468b      	mov	fp, r1
 800a4f2:	f7f6 f807 	bl	8000504 <__aeabi_ui2d>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	f7f5 fec5 	bl	800028c <__adddf3>
 800a502:	2d0f      	cmp	r5, #15
 800a504:	4682      	mov	sl, r0
 800a506:	468b      	mov	fp, r1
 800a508:	ddd5      	ble.n	800a4b6 <_strtod_l+0x3b6>
 800a50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50c:	1b2c      	subs	r4, r5, r4
 800a50e:	441c      	add	r4, r3
 800a510:	2c00      	cmp	r4, #0
 800a512:	f340 8093 	ble.w	800a63c <_strtod_l+0x53c>
 800a516:	f014 030f 	ands.w	r3, r4, #15
 800a51a:	d00a      	beq.n	800a532 <_strtod_l+0x432>
 800a51c:	495c      	ldr	r1, [pc, #368]	@ (800a690 <_strtod_l+0x590>)
 800a51e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a522:	4652      	mov	r2, sl
 800a524:	465b      	mov	r3, fp
 800a526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a52a:	f7f6 f865 	bl	80005f8 <__aeabi_dmul>
 800a52e:	4682      	mov	sl, r0
 800a530:	468b      	mov	fp, r1
 800a532:	f034 040f 	bics.w	r4, r4, #15
 800a536:	d073      	beq.n	800a620 <_strtod_l+0x520>
 800a538:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a53c:	dd49      	ble.n	800a5d2 <_strtod_l+0x4d2>
 800a53e:	2400      	movs	r4, #0
 800a540:	46a0      	mov	r8, r4
 800a542:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a544:	46a1      	mov	r9, r4
 800a546:	9a05      	ldr	r2, [sp, #20]
 800a548:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a698 <_strtod_l+0x598>
 800a54c:	2322      	movs	r3, #34	@ 0x22
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	f04f 0a00 	mov.w	sl, #0
 800a554:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a556:	2b00      	cmp	r3, #0
 800a558:	f43f ae0b 	beq.w	800a172 <_strtod_l+0x72>
 800a55c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a55e:	9805      	ldr	r0, [sp, #20]
 800a560:	f7ff f944 	bl	80097ec <_Bfree>
 800a564:	9805      	ldr	r0, [sp, #20]
 800a566:	4649      	mov	r1, r9
 800a568:	f7ff f940 	bl	80097ec <_Bfree>
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	4641      	mov	r1, r8
 800a570:	f7ff f93c 	bl	80097ec <_Bfree>
 800a574:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a576:	9805      	ldr	r0, [sp, #20]
 800a578:	f7ff f938 	bl	80097ec <_Bfree>
 800a57c:	9805      	ldr	r0, [sp, #20]
 800a57e:	4621      	mov	r1, r4
 800a580:	f7ff f934 	bl	80097ec <_Bfree>
 800a584:	e5f5      	b.n	800a172 <_strtod_l+0x72>
 800a586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a588:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a58c:	4293      	cmp	r3, r2
 800a58e:	dbbc      	blt.n	800a50a <_strtod_l+0x40a>
 800a590:	4c3f      	ldr	r4, [pc, #252]	@ (800a690 <_strtod_l+0x590>)
 800a592:	f1c5 050f 	rsb	r5, r5, #15
 800a596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a59a:	4652      	mov	r2, sl
 800a59c:	465b      	mov	r3, fp
 800a59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a2:	f7f6 f829 	bl	80005f8 <__aeabi_dmul>
 800a5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a8:	1b5d      	subs	r5, r3, r5
 800a5aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a5ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5b2:	e78f      	b.n	800a4d4 <_strtod_l+0x3d4>
 800a5b4:	3316      	adds	r3, #22
 800a5b6:	dba8      	blt.n	800a50a <_strtod_l+0x40a>
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ba:	eba3 0808 	sub.w	r8, r3, r8
 800a5be:	4b34      	ldr	r3, [pc, #208]	@ (800a690 <_strtod_l+0x590>)
 800a5c0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a5c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a5c8:	4650      	mov	r0, sl
 800a5ca:	4659      	mov	r1, fp
 800a5cc:	f7f6 f93e 	bl	800084c <__aeabi_ddiv>
 800a5d0:	e782      	b.n	800a4d8 <_strtod_l+0x3d8>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4f2f      	ldr	r7, [pc, #188]	@ (800a694 <_strtod_l+0x594>)
 800a5d6:	1124      	asrs	r4, r4, #4
 800a5d8:	4650      	mov	r0, sl
 800a5da:	4659      	mov	r1, fp
 800a5dc:	461e      	mov	r6, r3
 800a5de:	2c01      	cmp	r4, #1
 800a5e0:	dc21      	bgt.n	800a626 <_strtod_l+0x526>
 800a5e2:	b10b      	cbz	r3, 800a5e8 <_strtod_l+0x4e8>
 800a5e4:	4682      	mov	sl, r0
 800a5e6:	468b      	mov	fp, r1
 800a5e8:	492a      	ldr	r1, [pc, #168]	@ (800a694 <_strtod_l+0x594>)
 800a5ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a5ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a5f2:	4652      	mov	r2, sl
 800a5f4:	465b      	mov	r3, fp
 800a5f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5fa:	f7f5 fffd 	bl	80005f8 <__aeabi_dmul>
 800a5fe:	4b26      	ldr	r3, [pc, #152]	@ (800a698 <_strtod_l+0x598>)
 800a600:	460a      	mov	r2, r1
 800a602:	400b      	ands	r3, r1
 800a604:	4925      	ldr	r1, [pc, #148]	@ (800a69c <_strtod_l+0x59c>)
 800a606:	428b      	cmp	r3, r1
 800a608:	4682      	mov	sl, r0
 800a60a:	d898      	bhi.n	800a53e <_strtod_l+0x43e>
 800a60c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a610:	428b      	cmp	r3, r1
 800a612:	bf86      	itte	hi
 800a614:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a6a0 <_strtod_l+0x5a0>
 800a618:	f04f 3aff 	movhi.w	sl, #4294967295
 800a61c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a620:	2300      	movs	r3, #0
 800a622:	9308      	str	r3, [sp, #32]
 800a624:	e076      	b.n	800a714 <_strtod_l+0x614>
 800a626:	07e2      	lsls	r2, r4, #31
 800a628:	d504      	bpl.n	800a634 <_strtod_l+0x534>
 800a62a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a62e:	f7f5 ffe3 	bl	80005f8 <__aeabi_dmul>
 800a632:	2301      	movs	r3, #1
 800a634:	3601      	adds	r6, #1
 800a636:	1064      	asrs	r4, r4, #1
 800a638:	3708      	adds	r7, #8
 800a63a:	e7d0      	b.n	800a5de <_strtod_l+0x4de>
 800a63c:	d0f0      	beq.n	800a620 <_strtod_l+0x520>
 800a63e:	4264      	negs	r4, r4
 800a640:	f014 020f 	ands.w	r2, r4, #15
 800a644:	d00a      	beq.n	800a65c <_strtod_l+0x55c>
 800a646:	4b12      	ldr	r3, [pc, #72]	@ (800a690 <_strtod_l+0x590>)
 800a648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a64c:	4650      	mov	r0, sl
 800a64e:	4659      	mov	r1, fp
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	f7f6 f8fa 	bl	800084c <__aeabi_ddiv>
 800a658:	4682      	mov	sl, r0
 800a65a:	468b      	mov	fp, r1
 800a65c:	1124      	asrs	r4, r4, #4
 800a65e:	d0df      	beq.n	800a620 <_strtod_l+0x520>
 800a660:	2c1f      	cmp	r4, #31
 800a662:	dd1f      	ble.n	800a6a4 <_strtod_l+0x5a4>
 800a664:	2400      	movs	r4, #0
 800a666:	46a0      	mov	r8, r4
 800a668:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a66a:	46a1      	mov	r9, r4
 800a66c:	9a05      	ldr	r2, [sp, #20]
 800a66e:	2322      	movs	r3, #34	@ 0x22
 800a670:	f04f 0a00 	mov.w	sl, #0
 800a674:	f04f 0b00 	mov.w	fp, #0
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	e76b      	b.n	800a554 <_strtod_l+0x454>
 800a67c:	0800befe 	.word	0x0800befe
 800a680:	0800c1c8 	.word	0x0800c1c8
 800a684:	0800bef6 	.word	0x0800bef6
 800a688:	0800bf2d 	.word	0x0800bf2d
 800a68c:	0800c066 	.word	0x0800c066
 800a690:	0800c100 	.word	0x0800c100
 800a694:	0800c0d8 	.word	0x0800c0d8
 800a698:	7ff00000 	.word	0x7ff00000
 800a69c:	7ca00000 	.word	0x7ca00000
 800a6a0:	7fefffff 	.word	0x7fefffff
 800a6a4:	f014 0310 	ands.w	r3, r4, #16
 800a6a8:	bf18      	it	ne
 800a6aa:	236a      	movne	r3, #106	@ 0x6a
 800a6ac:	4ea9      	ldr	r6, [pc, #676]	@ (800a954 <_strtod_l+0x854>)
 800a6ae:	9308      	str	r3, [sp, #32]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	07e7      	lsls	r7, r4, #31
 800a6b8:	d504      	bpl.n	800a6c4 <_strtod_l+0x5c4>
 800a6ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6be:	f7f5 ff9b 	bl	80005f8 <__aeabi_dmul>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	1064      	asrs	r4, r4, #1
 800a6c6:	f106 0608 	add.w	r6, r6, #8
 800a6ca:	d1f4      	bne.n	800a6b6 <_strtod_l+0x5b6>
 800a6cc:	b10b      	cbz	r3, 800a6d2 <_strtod_l+0x5d2>
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	468b      	mov	fp, r1
 800a6d2:	9b08      	ldr	r3, [sp, #32]
 800a6d4:	b1b3      	cbz	r3, 800a704 <_strtod_l+0x604>
 800a6d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a6da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	4659      	mov	r1, fp
 800a6e2:	dd0f      	ble.n	800a704 <_strtod_l+0x604>
 800a6e4:	2b1f      	cmp	r3, #31
 800a6e6:	dd56      	ble.n	800a796 <_strtod_l+0x696>
 800a6e8:	2b34      	cmp	r3, #52	@ 0x34
 800a6ea:	bfde      	ittt	le
 800a6ec:	f04f 33ff 	movle.w	r3, #4294967295
 800a6f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a6f4:	4093      	lslle	r3, r2
 800a6f6:	f04f 0a00 	mov.w	sl, #0
 800a6fa:	bfcc      	ite	gt
 800a6fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a700:	ea03 0b01 	andle.w	fp, r3, r1
 800a704:	2200      	movs	r2, #0
 800a706:	2300      	movs	r3, #0
 800a708:	4650      	mov	r0, sl
 800a70a:	4659      	mov	r1, fp
 800a70c:	f7f6 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a710:	2800      	cmp	r0, #0
 800a712:	d1a7      	bne.n	800a664 <_strtod_l+0x564>
 800a714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a71a:	9805      	ldr	r0, [sp, #20]
 800a71c:	462b      	mov	r3, r5
 800a71e:	464a      	mov	r2, r9
 800a720:	f7ff f8cc 	bl	80098bc <__s2b>
 800a724:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a726:	2800      	cmp	r0, #0
 800a728:	f43f af09 	beq.w	800a53e <_strtod_l+0x43e>
 800a72c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a72e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a730:	2a00      	cmp	r2, #0
 800a732:	eba3 0308 	sub.w	r3, r3, r8
 800a736:	bfa8      	it	ge
 800a738:	2300      	movge	r3, #0
 800a73a:	9312      	str	r3, [sp, #72]	@ 0x48
 800a73c:	2400      	movs	r4, #0
 800a73e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a742:	9316      	str	r3, [sp, #88]	@ 0x58
 800a744:	46a0      	mov	r8, r4
 800a746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a748:	9805      	ldr	r0, [sp, #20]
 800a74a:	6859      	ldr	r1, [r3, #4]
 800a74c:	f7ff f80e 	bl	800976c <_Balloc>
 800a750:	4681      	mov	r9, r0
 800a752:	2800      	cmp	r0, #0
 800a754:	f43f aef7 	beq.w	800a546 <_strtod_l+0x446>
 800a758:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a75a:	691a      	ldr	r2, [r3, #16]
 800a75c:	3202      	adds	r2, #2
 800a75e:	f103 010c 	add.w	r1, r3, #12
 800a762:	0092      	lsls	r2, r2, #2
 800a764:	300c      	adds	r0, #12
 800a766:	f7fe f948 	bl	80089fa <memcpy>
 800a76a:	ec4b ab10 	vmov	d0, sl, fp
 800a76e:	9805      	ldr	r0, [sp, #20]
 800a770:	aa1c      	add	r2, sp, #112	@ 0x70
 800a772:	a91b      	add	r1, sp, #108	@ 0x6c
 800a774:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a778:	f7ff fbd4 	bl	8009f24 <__d2b>
 800a77c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a77e:	2800      	cmp	r0, #0
 800a780:	f43f aee1 	beq.w	800a546 <_strtod_l+0x446>
 800a784:	9805      	ldr	r0, [sp, #20]
 800a786:	2101      	movs	r1, #1
 800a788:	f7ff f92e 	bl	80099e8 <__i2b>
 800a78c:	4680      	mov	r8, r0
 800a78e:	b948      	cbnz	r0, 800a7a4 <_strtod_l+0x6a4>
 800a790:	f04f 0800 	mov.w	r8, #0
 800a794:	e6d7      	b.n	800a546 <_strtod_l+0x446>
 800a796:	f04f 32ff 	mov.w	r2, #4294967295
 800a79a:	fa02 f303 	lsl.w	r3, r2, r3
 800a79e:	ea03 0a0a 	and.w	sl, r3, sl
 800a7a2:	e7af      	b.n	800a704 <_strtod_l+0x604>
 800a7a4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a7a6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a7a8:	2d00      	cmp	r5, #0
 800a7aa:	bfab      	itete	ge
 800a7ac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a7ae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a7b0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a7b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a7b4:	bfac      	ite	ge
 800a7b6:	18ef      	addge	r7, r5, r3
 800a7b8:	1b5e      	sublt	r6, r3, r5
 800a7ba:	9b08      	ldr	r3, [sp, #32]
 800a7bc:	1aed      	subs	r5, r5, r3
 800a7be:	4415      	add	r5, r2
 800a7c0:	4b65      	ldr	r3, [pc, #404]	@ (800a958 <_strtod_l+0x858>)
 800a7c2:	3d01      	subs	r5, #1
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a7ca:	da50      	bge.n	800a86e <_strtod_l+0x76e>
 800a7cc:	1b5b      	subs	r3, r3, r5
 800a7ce:	2b1f      	cmp	r3, #31
 800a7d0:	eba2 0203 	sub.w	r2, r2, r3
 800a7d4:	f04f 0101 	mov.w	r1, #1
 800a7d8:	dc3d      	bgt.n	800a856 <_strtod_l+0x756>
 800a7da:	fa01 f303 	lsl.w	r3, r1, r3
 800a7de:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7e4:	18bd      	adds	r5, r7, r2
 800a7e6:	9b08      	ldr	r3, [sp, #32]
 800a7e8:	42af      	cmp	r7, r5
 800a7ea:	4416      	add	r6, r2
 800a7ec:	441e      	add	r6, r3
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	bfa8      	it	ge
 800a7f2:	462b      	movge	r3, r5
 800a7f4:	42b3      	cmp	r3, r6
 800a7f6:	bfa8      	it	ge
 800a7f8:	4633      	movge	r3, r6
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	bfc2      	ittt	gt
 800a7fe:	1aed      	subgt	r5, r5, r3
 800a800:	1af6      	subgt	r6, r6, r3
 800a802:	1aff      	subgt	r7, r7, r3
 800a804:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a806:	2b00      	cmp	r3, #0
 800a808:	dd16      	ble.n	800a838 <_strtod_l+0x738>
 800a80a:	4641      	mov	r1, r8
 800a80c:	9805      	ldr	r0, [sp, #20]
 800a80e:	461a      	mov	r2, r3
 800a810:	f7ff f9a2 	bl	8009b58 <__pow5mult>
 800a814:	4680      	mov	r8, r0
 800a816:	2800      	cmp	r0, #0
 800a818:	d0ba      	beq.n	800a790 <_strtod_l+0x690>
 800a81a:	4601      	mov	r1, r0
 800a81c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a81e:	9805      	ldr	r0, [sp, #20]
 800a820:	f7ff f8f8 	bl	8009a14 <__multiply>
 800a824:	900a      	str	r0, [sp, #40]	@ 0x28
 800a826:	2800      	cmp	r0, #0
 800a828:	f43f ae8d 	beq.w	800a546 <_strtod_l+0x446>
 800a82c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a82e:	9805      	ldr	r0, [sp, #20]
 800a830:	f7fe ffdc 	bl	80097ec <_Bfree>
 800a834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a836:	931a      	str	r3, [sp, #104]	@ 0x68
 800a838:	2d00      	cmp	r5, #0
 800a83a:	dc1d      	bgt.n	800a878 <_strtod_l+0x778>
 800a83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dd23      	ble.n	800a88a <_strtod_l+0x78a>
 800a842:	4649      	mov	r1, r9
 800a844:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a846:	9805      	ldr	r0, [sp, #20]
 800a848:	f7ff f986 	bl	8009b58 <__pow5mult>
 800a84c:	4681      	mov	r9, r0
 800a84e:	b9e0      	cbnz	r0, 800a88a <_strtod_l+0x78a>
 800a850:	f04f 0900 	mov.w	r9, #0
 800a854:	e677      	b.n	800a546 <_strtod_l+0x446>
 800a856:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a85a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a85e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a862:	35e2      	adds	r5, #226	@ 0xe2
 800a864:	fa01 f305 	lsl.w	r3, r1, r5
 800a868:	9310      	str	r3, [sp, #64]	@ 0x40
 800a86a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a86c:	e7ba      	b.n	800a7e4 <_strtod_l+0x6e4>
 800a86e:	2300      	movs	r3, #0
 800a870:	9310      	str	r3, [sp, #64]	@ 0x40
 800a872:	2301      	movs	r3, #1
 800a874:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a876:	e7b5      	b.n	800a7e4 <_strtod_l+0x6e4>
 800a878:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a87a:	9805      	ldr	r0, [sp, #20]
 800a87c:	462a      	mov	r2, r5
 800a87e:	f7ff f9c5 	bl	8009c0c <__lshift>
 800a882:	901a      	str	r0, [sp, #104]	@ 0x68
 800a884:	2800      	cmp	r0, #0
 800a886:	d1d9      	bne.n	800a83c <_strtod_l+0x73c>
 800a888:	e65d      	b.n	800a546 <_strtod_l+0x446>
 800a88a:	2e00      	cmp	r6, #0
 800a88c:	dd07      	ble.n	800a89e <_strtod_l+0x79e>
 800a88e:	4649      	mov	r1, r9
 800a890:	9805      	ldr	r0, [sp, #20]
 800a892:	4632      	mov	r2, r6
 800a894:	f7ff f9ba 	bl	8009c0c <__lshift>
 800a898:	4681      	mov	r9, r0
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d0d8      	beq.n	800a850 <_strtod_l+0x750>
 800a89e:	2f00      	cmp	r7, #0
 800a8a0:	dd08      	ble.n	800a8b4 <_strtod_l+0x7b4>
 800a8a2:	4641      	mov	r1, r8
 800a8a4:	9805      	ldr	r0, [sp, #20]
 800a8a6:	463a      	mov	r2, r7
 800a8a8:	f7ff f9b0 	bl	8009c0c <__lshift>
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f ae49 	beq.w	800a546 <_strtod_l+0x446>
 800a8b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8b6:	9805      	ldr	r0, [sp, #20]
 800a8b8:	464a      	mov	r2, r9
 800a8ba:	f7ff fa2f 	bl	8009d1c <__mdiff>
 800a8be:	4604      	mov	r4, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f43f ae40 	beq.w	800a546 <_strtod_l+0x446>
 800a8c6:	68c3      	ldr	r3, [r0, #12]
 800a8c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60c3      	str	r3, [r0, #12]
 800a8ce:	4641      	mov	r1, r8
 800a8d0:	f7ff fa08 	bl	8009ce4 <__mcmp>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	da45      	bge.n	800a964 <_strtod_l+0x864>
 800a8d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8da:	ea53 030a 	orrs.w	r3, r3, sl
 800a8de:	d16b      	bne.n	800a9b8 <_strtod_l+0x8b8>
 800a8e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d167      	bne.n	800a9b8 <_strtod_l+0x8b8>
 800a8e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8ec:	0d1b      	lsrs	r3, r3, #20
 800a8ee:	051b      	lsls	r3, r3, #20
 800a8f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8f4:	d960      	bls.n	800a9b8 <_strtod_l+0x8b8>
 800a8f6:	6963      	ldr	r3, [r4, #20]
 800a8f8:	b913      	cbnz	r3, 800a900 <_strtod_l+0x800>
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	dd5b      	ble.n	800a9b8 <_strtod_l+0x8b8>
 800a900:	4621      	mov	r1, r4
 800a902:	2201      	movs	r2, #1
 800a904:	9805      	ldr	r0, [sp, #20]
 800a906:	f7ff f981 	bl	8009c0c <__lshift>
 800a90a:	4641      	mov	r1, r8
 800a90c:	4604      	mov	r4, r0
 800a90e:	f7ff f9e9 	bl	8009ce4 <__mcmp>
 800a912:	2800      	cmp	r0, #0
 800a914:	dd50      	ble.n	800a9b8 <_strtod_l+0x8b8>
 800a916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a91a:	9a08      	ldr	r2, [sp, #32]
 800a91c:	0d1b      	lsrs	r3, r3, #20
 800a91e:	051b      	lsls	r3, r3, #20
 800a920:	2a00      	cmp	r2, #0
 800a922:	d06a      	beq.n	800a9fa <_strtod_l+0x8fa>
 800a924:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a928:	d867      	bhi.n	800a9fa <_strtod_l+0x8fa>
 800a92a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a92e:	f67f ae9d 	bls.w	800a66c <_strtod_l+0x56c>
 800a932:	4b0a      	ldr	r3, [pc, #40]	@ (800a95c <_strtod_l+0x85c>)
 800a934:	4650      	mov	r0, sl
 800a936:	4659      	mov	r1, fp
 800a938:	2200      	movs	r2, #0
 800a93a:	f7f5 fe5d 	bl	80005f8 <__aeabi_dmul>
 800a93e:	4b08      	ldr	r3, [pc, #32]	@ (800a960 <_strtod_l+0x860>)
 800a940:	400b      	ands	r3, r1
 800a942:	4682      	mov	sl, r0
 800a944:	468b      	mov	fp, r1
 800a946:	2b00      	cmp	r3, #0
 800a948:	f47f ae08 	bne.w	800a55c <_strtod_l+0x45c>
 800a94c:	9a05      	ldr	r2, [sp, #20]
 800a94e:	2322      	movs	r3, #34	@ 0x22
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	e603      	b.n	800a55c <_strtod_l+0x45c>
 800a954:	0800c1f0 	.word	0x0800c1f0
 800a958:	fffffc02 	.word	0xfffffc02
 800a95c:	39500000 	.word	0x39500000
 800a960:	7ff00000 	.word	0x7ff00000
 800a964:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a968:	d165      	bne.n	800aa36 <_strtod_l+0x936>
 800a96a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a96c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a970:	b35a      	cbz	r2, 800a9ca <_strtod_l+0x8ca>
 800a972:	4a9f      	ldr	r2, [pc, #636]	@ (800abf0 <_strtod_l+0xaf0>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d12b      	bne.n	800a9d0 <_strtod_l+0x8d0>
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	4651      	mov	r1, sl
 800a97c:	b303      	cbz	r3, 800a9c0 <_strtod_l+0x8c0>
 800a97e:	4b9d      	ldr	r3, [pc, #628]	@ (800abf4 <_strtod_l+0xaf4>)
 800a980:	465a      	mov	r2, fp
 800a982:	4013      	ands	r3, r2
 800a984:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a988:	f04f 32ff 	mov.w	r2, #4294967295
 800a98c:	d81b      	bhi.n	800a9c6 <_strtod_l+0x8c6>
 800a98e:	0d1b      	lsrs	r3, r3, #20
 800a990:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a994:	fa02 f303 	lsl.w	r3, r2, r3
 800a998:	4299      	cmp	r1, r3
 800a99a:	d119      	bne.n	800a9d0 <_strtod_l+0x8d0>
 800a99c:	4b96      	ldr	r3, [pc, #600]	@ (800abf8 <_strtod_l+0xaf8>)
 800a99e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d102      	bne.n	800a9aa <_strtod_l+0x8aa>
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	f43f adce 	beq.w	800a546 <_strtod_l+0x446>
 800a9aa:	4b92      	ldr	r3, [pc, #584]	@ (800abf4 <_strtod_l+0xaf4>)
 800a9ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9ae:	401a      	ands	r2, r3
 800a9b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a9b4:	f04f 0a00 	mov.w	sl, #0
 800a9b8:	9b08      	ldr	r3, [sp, #32]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1b9      	bne.n	800a932 <_strtod_l+0x832>
 800a9be:	e5cd      	b.n	800a55c <_strtod_l+0x45c>
 800a9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c4:	e7e8      	b.n	800a998 <_strtod_l+0x898>
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	e7e6      	b.n	800a998 <_strtod_l+0x898>
 800a9ca:	ea53 030a 	orrs.w	r3, r3, sl
 800a9ce:	d0a2      	beq.n	800a916 <_strtod_l+0x816>
 800a9d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a9d2:	b1db      	cbz	r3, 800aa0c <_strtod_l+0x90c>
 800a9d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9d6:	4213      	tst	r3, r2
 800a9d8:	d0ee      	beq.n	800a9b8 <_strtod_l+0x8b8>
 800a9da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9dc:	9a08      	ldr	r2, [sp, #32]
 800a9de:	4650      	mov	r0, sl
 800a9e0:	4659      	mov	r1, fp
 800a9e2:	b1bb      	cbz	r3, 800aa14 <_strtod_l+0x914>
 800a9e4:	f7ff fb6c 	bl	800a0c0 <sulp>
 800a9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ec:	ec53 2b10 	vmov	r2, r3, d0
 800a9f0:	f7f5 fc4c 	bl	800028c <__adddf3>
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	468b      	mov	fp, r1
 800a9f8:	e7de      	b.n	800a9b8 <_strtod_l+0x8b8>
 800a9fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a9fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa06:	f04f 3aff 	mov.w	sl, #4294967295
 800aa0a:	e7d5      	b.n	800a9b8 <_strtod_l+0x8b8>
 800aa0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa0e:	ea13 0f0a 	tst.w	r3, sl
 800aa12:	e7e1      	b.n	800a9d8 <_strtod_l+0x8d8>
 800aa14:	f7ff fb54 	bl	800a0c0 <sulp>
 800aa18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa1c:	ec53 2b10 	vmov	r2, r3, d0
 800aa20:	f7f5 fc32 	bl	8000288 <__aeabi_dsub>
 800aa24:	2200      	movs	r2, #0
 800aa26:	2300      	movs	r3, #0
 800aa28:	4682      	mov	sl, r0
 800aa2a:	468b      	mov	fp, r1
 800aa2c:	f7f6 f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d0c1      	beq.n	800a9b8 <_strtod_l+0x8b8>
 800aa34:	e61a      	b.n	800a66c <_strtod_l+0x56c>
 800aa36:	4641      	mov	r1, r8
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f7ff facb 	bl	8009fd4 <__ratio>
 800aa3e:	ec57 6b10 	vmov	r6, r7, d0
 800aa42:	2200      	movs	r2, #0
 800aa44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f6 f850 	bl	8000af0 <__aeabi_dcmple>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d06f      	beq.n	800ab34 <_strtod_l+0xa34>
 800aa54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d17a      	bne.n	800ab50 <_strtod_l+0xa50>
 800aa5a:	f1ba 0f00 	cmp.w	sl, #0
 800aa5e:	d158      	bne.n	800ab12 <_strtod_l+0xa12>
 800aa60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d15a      	bne.n	800ab20 <_strtod_l+0xa20>
 800aa6a:	4b64      	ldr	r3, [pc, #400]	@ (800abfc <_strtod_l+0xafc>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	f7f6 f833 	bl	8000adc <__aeabi_dcmplt>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d159      	bne.n	800ab2e <_strtod_l+0xa2e>
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	4b60      	ldr	r3, [pc, #384]	@ (800ac00 <_strtod_l+0xb00>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	f7f5 fdb9 	bl	80005f8 <__aeabi_dmul>
 800aa86:	4606      	mov	r6, r0
 800aa88:	460f      	mov	r7, r1
 800aa8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aa8e:	9606      	str	r6, [sp, #24]
 800aa90:	9307      	str	r3, [sp, #28]
 800aa92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa96:	4d57      	ldr	r5, [pc, #348]	@ (800abf4 <_strtod_l+0xaf4>)
 800aa98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa9e:	401d      	ands	r5, r3
 800aaa0:	4b58      	ldr	r3, [pc, #352]	@ (800ac04 <_strtod_l+0xb04>)
 800aaa2:	429d      	cmp	r5, r3
 800aaa4:	f040 80b2 	bne.w	800ac0c <_strtod_l+0xb0c>
 800aaa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aaae:	ec4b ab10 	vmov	d0, sl, fp
 800aab2:	f7ff f9c7 	bl	8009e44 <__ulp>
 800aab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaba:	ec51 0b10 	vmov	r0, r1, d0
 800aabe:	f7f5 fd9b 	bl	80005f8 <__aeabi_dmul>
 800aac2:	4652      	mov	r2, sl
 800aac4:	465b      	mov	r3, fp
 800aac6:	f7f5 fbe1 	bl	800028c <__adddf3>
 800aaca:	460b      	mov	r3, r1
 800aacc:	4949      	ldr	r1, [pc, #292]	@ (800abf4 <_strtod_l+0xaf4>)
 800aace:	4a4e      	ldr	r2, [pc, #312]	@ (800ac08 <_strtod_l+0xb08>)
 800aad0:	4019      	ands	r1, r3
 800aad2:	4291      	cmp	r1, r2
 800aad4:	4682      	mov	sl, r0
 800aad6:	d942      	bls.n	800ab5e <_strtod_l+0xa5e>
 800aad8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aada:	4b47      	ldr	r3, [pc, #284]	@ (800abf8 <_strtod_l+0xaf8>)
 800aadc:	429a      	cmp	r2, r3
 800aade:	d103      	bne.n	800aae8 <_strtod_l+0x9e8>
 800aae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aae2:	3301      	adds	r3, #1
 800aae4:	f43f ad2f 	beq.w	800a546 <_strtod_l+0x446>
 800aae8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800abf8 <_strtod_l+0xaf8>
 800aaec:	f04f 3aff 	mov.w	sl, #4294967295
 800aaf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaf2:	9805      	ldr	r0, [sp, #20]
 800aaf4:	f7fe fe7a 	bl	80097ec <_Bfree>
 800aaf8:	9805      	ldr	r0, [sp, #20]
 800aafa:	4649      	mov	r1, r9
 800aafc:	f7fe fe76 	bl	80097ec <_Bfree>
 800ab00:	9805      	ldr	r0, [sp, #20]
 800ab02:	4641      	mov	r1, r8
 800ab04:	f7fe fe72 	bl	80097ec <_Bfree>
 800ab08:	9805      	ldr	r0, [sp, #20]
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	f7fe fe6e 	bl	80097ec <_Bfree>
 800ab10:	e619      	b.n	800a746 <_strtod_l+0x646>
 800ab12:	f1ba 0f01 	cmp.w	sl, #1
 800ab16:	d103      	bne.n	800ab20 <_strtod_l+0xa20>
 800ab18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f43f ada6 	beq.w	800a66c <_strtod_l+0x56c>
 800ab20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800abd0 <_strtod_l+0xad0>
 800ab24:	4f35      	ldr	r7, [pc, #212]	@ (800abfc <_strtod_l+0xafc>)
 800ab26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	e7b1      	b.n	800aa92 <_strtod_l+0x992>
 800ab2e:	4f34      	ldr	r7, [pc, #208]	@ (800ac00 <_strtod_l+0xb00>)
 800ab30:	2600      	movs	r6, #0
 800ab32:	e7aa      	b.n	800aa8a <_strtod_l+0x98a>
 800ab34:	4b32      	ldr	r3, [pc, #200]	@ (800ac00 <_strtod_l+0xb00>)
 800ab36:	4630      	mov	r0, r6
 800ab38:	4639      	mov	r1, r7
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f7f5 fd5c 	bl	80005f8 <__aeabi_dmul>
 800ab40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab42:	4606      	mov	r6, r0
 800ab44:	460f      	mov	r7, r1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d09f      	beq.n	800aa8a <_strtod_l+0x98a>
 800ab4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab4e:	e7a0      	b.n	800aa92 <_strtod_l+0x992>
 800ab50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800abd8 <_strtod_l+0xad8>
 800ab54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab58:	ec57 6b17 	vmov	r6, r7, d7
 800ab5c:	e799      	b.n	800aa92 <_strtod_l+0x992>
 800ab5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1c1      	bne.n	800aaf0 <_strtod_l+0x9f0>
 800ab6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab70:	0d1b      	lsrs	r3, r3, #20
 800ab72:	051b      	lsls	r3, r3, #20
 800ab74:	429d      	cmp	r5, r3
 800ab76:	d1bb      	bne.n	800aaf0 <_strtod_l+0x9f0>
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f6 f89c 	bl	8000cb8 <__aeabi_d2lz>
 800ab80:	f7f5 fd0c 	bl	800059c <__aeabi_l2d>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4630      	mov	r0, r6
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	f7f5 fb7c 	bl	8000288 <__aeabi_dsub>
 800ab90:	460b      	mov	r3, r1
 800ab92:	4602      	mov	r2, r0
 800ab94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ab9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab9e:	ea46 060a 	orr.w	r6, r6, sl
 800aba2:	431e      	orrs	r6, r3
 800aba4:	d06f      	beq.n	800ac86 <_strtod_l+0xb86>
 800aba6:	a30e      	add	r3, pc, #56	@ (adr r3, 800abe0 <_strtod_l+0xae0>)
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f7f5 ff96 	bl	8000adc <__aeabi_dcmplt>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f47f acd3 	bne.w	800a55c <_strtod_l+0x45c>
 800abb6:	a30c      	add	r3, pc, #48	@ (adr r3, 800abe8 <_strtod_l+0xae8>)
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abc0:	f7f5 ffaa 	bl	8000b18 <__aeabi_dcmpgt>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d093      	beq.n	800aaf0 <_strtod_l+0x9f0>
 800abc8:	e4c8      	b.n	800a55c <_strtod_l+0x45c>
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w
 800abd0:	00000000 	.word	0x00000000
 800abd4:	bff00000 	.word	0xbff00000
 800abd8:	00000000 	.word	0x00000000
 800abdc:	3ff00000 	.word	0x3ff00000
 800abe0:	94a03595 	.word	0x94a03595
 800abe4:	3fdfffff 	.word	0x3fdfffff
 800abe8:	35afe535 	.word	0x35afe535
 800abec:	3fe00000 	.word	0x3fe00000
 800abf0:	000fffff 	.word	0x000fffff
 800abf4:	7ff00000 	.word	0x7ff00000
 800abf8:	7fefffff 	.word	0x7fefffff
 800abfc:	3ff00000 	.word	0x3ff00000
 800ac00:	3fe00000 	.word	0x3fe00000
 800ac04:	7fe00000 	.word	0x7fe00000
 800ac08:	7c9fffff 	.word	0x7c9fffff
 800ac0c:	9b08      	ldr	r3, [sp, #32]
 800ac0e:	b323      	cbz	r3, 800ac5a <_strtod_l+0xb5a>
 800ac10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ac14:	d821      	bhi.n	800ac5a <_strtod_l+0xb5a>
 800ac16:	a328      	add	r3, pc, #160	@ (adr r3, 800acb8 <_strtod_l+0xbb8>)
 800ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f7f5 ff66 	bl	8000af0 <__aeabi_dcmple>
 800ac24:	b1a0      	cbz	r0, 800ac50 <_strtod_l+0xb50>
 800ac26:	4639      	mov	r1, r7
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f7f5 ffbd 	bl	8000ba8 <__aeabi_d2uiz>
 800ac2e:	2801      	cmp	r0, #1
 800ac30:	bf38      	it	cc
 800ac32:	2001      	movcc	r0, #1
 800ac34:	f7f5 fc66 	bl	8000504 <__aeabi_ui2d>
 800ac38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	b9fb      	cbnz	r3, 800ac80 <_strtod_l+0xb80>
 800ac40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac44:	9014      	str	r0, [sp, #80]	@ 0x50
 800ac46:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ac4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ac56:	1b5b      	subs	r3, r3, r5
 800ac58:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ac5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ac62:	f7ff f8ef 	bl	8009e44 <__ulp>
 800ac66:	4650      	mov	r0, sl
 800ac68:	ec53 2b10 	vmov	r2, r3, d0
 800ac6c:	4659      	mov	r1, fp
 800ac6e:	f7f5 fcc3 	bl	80005f8 <__aeabi_dmul>
 800ac72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac76:	f7f5 fb09 	bl	800028c <__adddf3>
 800ac7a:	4682      	mov	sl, r0
 800ac7c:	468b      	mov	fp, r1
 800ac7e:	e770      	b.n	800ab62 <_strtod_l+0xa62>
 800ac80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ac84:	e7e0      	b.n	800ac48 <_strtod_l+0xb48>
 800ac86:	a30e      	add	r3, pc, #56	@ (adr r3, 800acc0 <_strtod_l+0xbc0>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 ff26 	bl	8000adc <__aeabi_dcmplt>
 800ac90:	e798      	b.n	800abc4 <_strtod_l+0xac4>
 800ac92:	2300      	movs	r3, #0
 800ac94:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ac98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	f7ff ba6d 	b.w	800a17a <_strtod_l+0x7a>
 800aca0:	2a65      	cmp	r2, #101	@ 0x65
 800aca2:	f43f ab68 	beq.w	800a376 <_strtod_l+0x276>
 800aca6:	2a45      	cmp	r2, #69	@ 0x45
 800aca8:	f43f ab65 	beq.w	800a376 <_strtod_l+0x276>
 800acac:	2301      	movs	r3, #1
 800acae:	f7ff bba0 	b.w	800a3f2 <_strtod_l+0x2f2>
 800acb2:	bf00      	nop
 800acb4:	f3af 8000 	nop.w
 800acb8:	ffc00000 	.word	0xffc00000
 800acbc:	41dfffff 	.word	0x41dfffff
 800acc0:	94a03595 	.word	0x94a03595
 800acc4:	3fcfffff 	.word	0x3fcfffff

0800acc8 <_strtod_r>:
 800acc8:	4b01      	ldr	r3, [pc, #4]	@ (800acd0 <_strtod_r+0x8>)
 800acca:	f7ff ba19 	b.w	800a100 <_strtod_l>
 800acce:	bf00      	nop
 800acd0:	2000009c 	.word	0x2000009c

0800acd4 <__ssputs_r>:
 800acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	688e      	ldr	r6, [r1, #8]
 800acda:	461f      	mov	r7, r3
 800acdc:	42be      	cmp	r6, r7
 800acde:	680b      	ldr	r3, [r1, #0]
 800ace0:	4682      	mov	sl, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	4690      	mov	r8, r2
 800ace6:	d82d      	bhi.n	800ad44 <__ssputs_r+0x70>
 800ace8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acf0:	d026      	beq.n	800ad40 <__ssputs_r+0x6c>
 800acf2:	6965      	ldr	r5, [r4, #20]
 800acf4:	6909      	ldr	r1, [r1, #16]
 800acf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acfa:	eba3 0901 	sub.w	r9, r3, r1
 800acfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad02:	1c7b      	adds	r3, r7, #1
 800ad04:	444b      	add	r3, r9
 800ad06:	106d      	asrs	r5, r5, #1
 800ad08:	429d      	cmp	r5, r3
 800ad0a:	bf38      	it	cc
 800ad0c:	461d      	movcc	r5, r3
 800ad0e:	0553      	lsls	r3, r2, #21
 800ad10:	d527      	bpl.n	800ad62 <__ssputs_r+0x8e>
 800ad12:	4629      	mov	r1, r5
 800ad14:	f7fc fc4a 	bl	80075ac <_malloc_r>
 800ad18:	4606      	mov	r6, r0
 800ad1a:	b360      	cbz	r0, 800ad76 <__ssputs_r+0xa2>
 800ad1c:	6921      	ldr	r1, [r4, #16]
 800ad1e:	464a      	mov	r2, r9
 800ad20:	f7fd fe6b 	bl	80089fa <memcpy>
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad2e:	81a3      	strh	r3, [r4, #12]
 800ad30:	6126      	str	r6, [r4, #16]
 800ad32:	6165      	str	r5, [r4, #20]
 800ad34:	444e      	add	r6, r9
 800ad36:	eba5 0509 	sub.w	r5, r5, r9
 800ad3a:	6026      	str	r6, [r4, #0]
 800ad3c:	60a5      	str	r5, [r4, #8]
 800ad3e:	463e      	mov	r6, r7
 800ad40:	42be      	cmp	r6, r7
 800ad42:	d900      	bls.n	800ad46 <__ssputs_r+0x72>
 800ad44:	463e      	mov	r6, r7
 800ad46:	6820      	ldr	r0, [r4, #0]
 800ad48:	4632      	mov	r2, r6
 800ad4a:	4641      	mov	r1, r8
 800ad4c:	f000 fa28 	bl	800b1a0 <memmove>
 800ad50:	68a3      	ldr	r3, [r4, #8]
 800ad52:	1b9b      	subs	r3, r3, r6
 800ad54:	60a3      	str	r3, [r4, #8]
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	4433      	add	r3, r6
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad62:	462a      	mov	r2, r5
 800ad64:	f000 fddd 	bl	800b922 <_realloc_r>
 800ad68:	4606      	mov	r6, r0
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d1e0      	bne.n	800ad30 <__ssputs_r+0x5c>
 800ad6e:	6921      	ldr	r1, [r4, #16]
 800ad70:	4650      	mov	r0, sl
 800ad72:	f7fe fcb1 	bl	80096d8 <_free_r>
 800ad76:	230c      	movs	r3, #12
 800ad78:	f8ca 3000 	str.w	r3, [sl]
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	f04f 30ff 	mov.w	r0, #4294967295
 800ad88:	e7e9      	b.n	800ad5e <__ssputs_r+0x8a>
	...

0800ad8c <_svfiprintf_r>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	4698      	mov	r8, r3
 800ad92:	898b      	ldrh	r3, [r1, #12]
 800ad94:	061b      	lsls	r3, r3, #24
 800ad96:	b09d      	sub	sp, #116	@ 0x74
 800ad98:	4607      	mov	r7, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	4614      	mov	r4, r2
 800ad9e:	d510      	bpl.n	800adc2 <_svfiprintf_r+0x36>
 800ada0:	690b      	ldr	r3, [r1, #16]
 800ada2:	b973      	cbnz	r3, 800adc2 <_svfiprintf_r+0x36>
 800ada4:	2140      	movs	r1, #64	@ 0x40
 800ada6:	f7fc fc01 	bl	80075ac <_malloc_r>
 800adaa:	6028      	str	r0, [r5, #0]
 800adac:	6128      	str	r0, [r5, #16]
 800adae:	b930      	cbnz	r0, 800adbe <_svfiprintf_r+0x32>
 800adb0:	230c      	movs	r3, #12
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	f04f 30ff 	mov.w	r0, #4294967295
 800adb8:	b01d      	add	sp, #116	@ 0x74
 800adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbe:	2340      	movs	r3, #64	@ 0x40
 800adc0:	616b      	str	r3, [r5, #20]
 800adc2:	2300      	movs	r3, #0
 800adc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800adc6:	2320      	movs	r3, #32
 800adc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800add0:	2330      	movs	r3, #48	@ 0x30
 800add2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af70 <_svfiprintf_r+0x1e4>
 800add6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adda:	f04f 0901 	mov.w	r9, #1
 800adde:	4623      	mov	r3, r4
 800ade0:	469a      	mov	sl, r3
 800ade2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade6:	b10a      	cbz	r2, 800adec <_svfiprintf_r+0x60>
 800ade8:	2a25      	cmp	r2, #37	@ 0x25
 800adea:	d1f9      	bne.n	800ade0 <_svfiprintf_r+0x54>
 800adec:	ebba 0b04 	subs.w	fp, sl, r4
 800adf0:	d00b      	beq.n	800ae0a <_svfiprintf_r+0x7e>
 800adf2:	465b      	mov	r3, fp
 800adf4:	4622      	mov	r2, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	4638      	mov	r0, r7
 800adfa:	f7ff ff6b 	bl	800acd4 <__ssputs_r>
 800adfe:	3001      	adds	r0, #1
 800ae00:	f000 80a7 	beq.w	800af52 <_svfiprintf_r+0x1c6>
 800ae04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae06:	445a      	add	r2, fp
 800ae08:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 809f 	beq.w	800af52 <_svfiprintf_r+0x1c6>
 800ae14:	2300      	movs	r3, #0
 800ae16:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae1e:	f10a 0a01 	add.w	sl, sl, #1
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	9307      	str	r3, [sp, #28]
 800ae26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae2c:	4654      	mov	r4, sl
 800ae2e:	2205      	movs	r2, #5
 800ae30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae34:	484e      	ldr	r0, [pc, #312]	@ (800af70 <_svfiprintf_r+0x1e4>)
 800ae36:	f7f5 f9cb 	bl	80001d0 <memchr>
 800ae3a:	9a04      	ldr	r2, [sp, #16]
 800ae3c:	b9d8      	cbnz	r0, 800ae76 <_svfiprintf_r+0xea>
 800ae3e:	06d0      	lsls	r0, r2, #27
 800ae40:	bf44      	itt	mi
 800ae42:	2320      	movmi	r3, #32
 800ae44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae48:	0711      	lsls	r1, r2, #28
 800ae4a:	bf44      	itt	mi
 800ae4c:	232b      	movmi	r3, #43	@ 0x2b
 800ae4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae52:	f89a 3000 	ldrb.w	r3, [sl]
 800ae56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae58:	d015      	beq.n	800ae86 <_svfiprintf_r+0xfa>
 800ae5a:	9a07      	ldr	r2, [sp, #28]
 800ae5c:	4654      	mov	r4, sl
 800ae5e:	2000      	movs	r0, #0
 800ae60:	f04f 0c0a 	mov.w	ip, #10
 800ae64:	4621      	mov	r1, r4
 800ae66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6a:	3b30      	subs	r3, #48	@ 0x30
 800ae6c:	2b09      	cmp	r3, #9
 800ae6e:	d94b      	bls.n	800af08 <_svfiprintf_r+0x17c>
 800ae70:	b1b0      	cbz	r0, 800aea0 <_svfiprintf_r+0x114>
 800ae72:	9207      	str	r2, [sp, #28]
 800ae74:	e014      	b.n	800aea0 <_svfiprintf_r+0x114>
 800ae76:	eba0 0308 	sub.w	r3, r0, r8
 800ae7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	46a2      	mov	sl, r4
 800ae84:	e7d2      	b.n	800ae2c <_svfiprintf_r+0xa0>
 800ae86:	9b03      	ldr	r3, [sp, #12]
 800ae88:	1d19      	adds	r1, r3, #4
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	9103      	str	r1, [sp, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	bfbb      	ittet	lt
 800ae92:	425b      	neglt	r3, r3
 800ae94:	f042 0202 	orrlt.w	r2, r2, #2
 800ae98:	9307      	strge	r3, [sp, #28]
 800ae9a:	9307      	strlt	r3, [sp, #28]
 800ae9c:	bfb8      	it	lt
 800ae9e:	9204      	strlt	r2, [sp, #16]
 800aea0:	7823      	ldrb	r3, [r4, #0]
 800aea2:	2b2e      	cmp	r3, #46	@ 0x2e
 800aea4:	d10a      	bne.n	800aebc <_svfiprintf_r+0x130>
 800aea6:	7863      	ldrb	r3, [r4, #1]
 800aea8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeaa:	d132      	bne.n	800af12 <_svfiprintf_r+0x186>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	1d1a      	adds	r2, r3, #4
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	9203      	str	r2, [sp, #12]
 800aeb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeb8:	3402      	adds	r4, #2
 800aeba:	9305      	str	r3, [sp, #20]
 800aebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af80 <_svfiprintf_r+0x1f4>
 800aec0:	7821      	ldrb	r1, [r4, #0]
 800aec2:	2203      	movs	r2, #3
 800aec4:	4650      	mov	r0, sl
 800aec6:	f7f5 f983 	bl	80001d0 <memchr>
 800aeca:	b138      	cbz	r0, 800aedc <_svfiprintf_r+0x150>
 800aecc:	9b04      	ldr	r3, [sp, #16]
 800aece:	eba0 000a 	sub.w	r0, r0, sl
 800aed2:	2240      	movs	r2, #64	@ 0x40
 800aed4:	4082      	lsls	r2, r0
 800aed6:	4313      	orrs	r3, r2
 800aed8:	3401      	adds	r4, #1
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee0:	4824      	ldr	r0, [pc, #144]	@ (800af74 <_svfiprintf_r+0x1e8>)
 800aee2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aee6:	2206      	movs	r2, #6
 800aee8:	f7f5 f972 	bl	80001d0 <memchr>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d036      	beq.n	800af5e <_svfiprintf_r+0x1d2>
 800aef0:	4b21      	ldr	r3, [pc, #132]	@ (800af78 <_svfiprintf_r+0x1ec>)
 800aef2:	bb1b      	cbnz	r3, 800af3c <_svfiprintf_r+0x1b0>
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	3307      	adds	r3, #7
 800aef8:	f023 0307 	bic.w	r3, r3, #7
 800aefc:	3308      	adds	r3, #8
 800aefe:	9303      	str	r3, [sp, #12]
 800af00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af02:	4433      	add	r3, r6
 800af04:	9309      	str	r3, [sp, #36]	@ 0x24
 800af06:	e76a      	b.n	800adde <_svfiprintf_r+0x52>
 800af08:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0c:	460c      	mov	r4, r1
 800af0e:	2001      	movs	r0, #1
 800af10:	e7a8      	b.n	800ae64 <_svfiprintf_r+0xd8>
 800af12:	2300      	movs	r3, #0
 800af14:	3401      	adds	r4, #1
 800af16:	9305      	str	r3, [sp, #20]
 800af18:	4619      	mov	r1, r3
 800af1a:	f04f 0c0a 	mov.w	ip, #10
 800af1e:	4620      	mov	r0, r4
 800af20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af24:	3a30      	subs	r2, #48	@ 0x30
 800af26:	2a09      	cmp	r2, #9
 800af28:	d903      	bls.n	800af32 <_svfiprintf_r+0x1a6>
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0c6      	beq.n	800aebc <_svfiprintf_r+0x130>
 800af2e:	9105      	str	r1, [sp, #20]
 800af30:	e7c4      	b.n	800aebc <_svfiprintf_r+0x130>
 800af32:	fb0c 2101 	mla	r1, ip, r1, r2
 800af36:	4604      	mov	r4, r0
 800af38:	2301      	movs	r3, #1
 800af3a:	e7f0      	b.n	800af1e <_svfiprintf_r+0x192>
 800af3c:	ab03      	add	r3, sp, #12
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	462a      	mov	r2, r5
 800af42:	4b0e      	ldr	r3, [pc, #56]	@ (800af7c <_svfiprintf_r+0x1f0>)
 800af44:	a904      	add	r1, sp, #16
 800af46:	4638      	mov	r0, r7
 800af48:	f7fc fcd8 	bl	80078fc <_printf_float>
 800af4c:	1c42      	adds	r2, r0, #1
 800af4e:	4606      	mov	r6, r0
 800af50:	d1d6      	bne.n	800af00 <_svfiprintf_r+0x174>
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	065b      	lsls	r3, r3, #25
 800af56:	f53f af2d 	bmi.w	800adb4 <_svfiprintf_r+0x28>
 800af5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af5c:	e72c      	b.n	800adb8 <_svfiprintf_r+0x2c>
 800af5e:	ab03      	add	r3, sp, #12
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	462a      	mov	r2, r5
 800af64:	4b05      	ldr	r3, [pc, #20]	@ (800af7c <_svfiprintf_r+0x1f0>)
 800af66:	a904      	add	r1, sp, #16
 800af68:	4638      	mov	r0, r7
 800af6a:	f7fc ff5f 	bl	8007e2c <_printf_i>
 800af6e:	e7ed      	b.n	800af4c <_svfiprintf_r+0x1c0>
 800af70:	0800c012 	.word	0x0800c012
 800af74:	0800c01c 	.word	0x0800c01c
 800af78:	080078fd 	.word	0x080078fd
 800af7c:	0800acd5 	.word	0x0800acd5
 800af80:	0800c018 	.word	0x0800c018

0800af84 <__sflush_r>:
 800af84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af8c:	0716      	lsls	r6, r2, #28
 800af8e:	4605      	mov	r5, r0
 800af90:	460c      	mov	r4, r1
 800af92:	d454      	bmi.n	800b03e <__sflush_r+0xba>
 800af94:	684b      	ldr	r3, [r1, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	dc02      	bgt.n	800afa0 <__sflush_r+0x1c>
 800af9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	dd48      	ble.n	800b032 <__sflush_r+0xae>
 800afa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d045      	beq.n	800b032 <__sflush_r+0xae>
 800afa6:	2300      	movs	r3, #0
 800afa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afac:	682f      	ldr	r7, [r5, #0]
 800afae:	6a21      	ldr	r1, [r4, #32]
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	d030      	beq.n	800b016 <__sflush_r+0x92>
 800afb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	0759      	lsls	r1, r3, #29
 800afba:	d505      	bpl.n	800afc8 <__sflush_r+0x44>
 800afbc:	6863      	ldr	r3, [r4, #4]
 800afbe:	1ad2      	subs	r2, r2, r3
 800afc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afc2:	b10b      	cbz	r3, 800afc8 <__sflush_r+0x44>
 800afc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afc6:	1ad2      	subs	r2, r2, r3
 800afc8:	2300      	movs	r3, #0
 800afca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afcc:	6a21      	ldr	r1, [r4, #32]
 800afce:	4628      	mov	r0, r5
 800afd0:	47b0      	blx	r6
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	d106      	bne.n	800afe6 <__sflush_r+0x62>
 800afd8:	6829      	ldr	r1, [r5, #0]
 800afda:	291d      	cmp	r1, #29
 800afdc:	d82b      	bhi.n	800b036 <__sflush_r+0xb2>
 800afde:	4a2a      	ldr	r2, [pc, #168]	@ (800b088 <__sflush_r+0x104>)
 800afe0:	40ca      	lsrs	r2, r1
 800afe2:	07d6      	lsls	r6, r2, #31
 800afe4:	d527      	bpl.n	800b036 <__sflush_r+0xb2>
 800afe6:	2200      	movs	r2, #0
 800afe8:	6062      	str	r2, [r4, #4]
 800afea:	04d9      	lsls	r1, r3, #19
 800afec:	6922      	ldr	r2, [r4, #16]
 800afee:	6022      	str	r2, [r4, #0]
 800aff0:	d504      	bpl.n	800affc <__sflush_r+0x78>
 800aff2:	1c42      	adds	r2, r0, #1
 800aff4:	d101      	bne.n	800affa <__sflush_r+0x76>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	b903      	cbnz	r3, 800affc <__sflush_r+0x78>
 800affa:	6560      	str	r0, [r4, #84]	@ 0x54
 800affc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800affe:	602f      	str	r7, [r5, #0]
 800b000:	b1b9      	cbz	r1, 800b032 <__sflush_r+0xae>
 800b002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b006:	4299      	cmp	r1, r3
 800b008:	d002      	beq.n	800b010 <__sflush_r+0x8c>
 800b00a:	4628      	mov	r0, r5
 800b00c:	f7fe fb64 	bl	80096d8 <_free_r>
 800b010:	2300      	movs	r3, #0
 800b012:	6363      	str	r3, [r4, #52]	@ 0x34
 800b014:	e00d      	b.n	800b032 <__sflush_r+0xae>
 800b016:	2301      	movs	r3, #1
 800b018:	4628      	mov	r0, r5
 800b01a:	47b0      	blx	r6
 800b01c:	4602      	mov	r2, r0
 800b01e:	1c50      	adds	r0, r2, #1
 800b020:	d1c9      	bne.n	800afb6 <__sflush_r+0x32>
 800b022:	682b      	ldr	r3, [r5, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0c6      	beq.n	800afb6 <__sflush_r+0x32>
 800b028:	2b1d      	cmp	r3, #29
 800b02a:	d001      	beq.n	800b030 <__sflush_r+0xac>
 800b02c:	2b16      	cmp	r3, #22
 800b02e:	d11e      	bne.n	800b06e <__sflush_r+0xea>
 800b030:	602f      	str	r7, [r5, #0]
 800b032:	2000      	movs	r0, #0
 800b034:	e022      	b.n	800b07c <__sflush_r+0xf8>
 800b036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b03a:	b21b      	sxth	r3, r3
 800b03c:	e01b      	b.n	800b076 <__sflush_r+0xf2>
 800b03e:	690f      	ldr	r7, [r1, #16]
 800b040:	2f00      	cmp	r7, #0
 800b042:	d0f6      	beq.n	800b032 <__sflush_r+0xae>
 800b044:	0793      	lsls	r3, r2, #30
 800b046:	680e      	ldr	r6, [r1, #0]
 800b048:	bf08      	it	eq
 800b04a:	694b      	ldreq	r3, [r1, #20]
 800b04c:	600f      	str	r7, [r1, #0]
 800b04e:	bf18      	it	ne
 800b050:	2300      	movne	r3, #0
 800b052:	eba6 0807 	sub.w	r8, r6, r7
 800b056:	608b      	str	r3, [r1, #8]
 800b058:	f1b8 0f00 	cmp.w	r8, #0
 800b05c:	dde9      	ble.n	800b032 <__sflush_r+0xae>
 800b05e:	6a21      	ldr	r1, [r4, #32]
 800b060:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b062:	4643      	mov	r3, r8
 800b064:	463a      	mov	r2, r7
 800b066:	4628      	mov	r0, r5
 800b068:	47b0      	blx	r6
 800b06a:	2800      	cmp	r0, #0
 800b06c:	dc08      	bgt.n	800b080 <__sflush_r+0xfc>
 800b06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b076:	81a3      	strh	r3, [r4, #12]
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b080:	4407      	add	r7, r0
 800b082:	eba8 0800 	sub.w	r8, r8, r0
 800b086:	e7e7      	b.n	800b058 <__sflush_r+0xd4>
 800b088:	20400001 	.word	0x20400001

0800b08c <_fflush_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	690b      	ldr	r3, [r1, #16]
 800b090:	4605      	mov	r5, r0
 800b092:	460c      	mov	r4, r1
 800b094:	b913      	cbnz	r3, 800b09c <_fflush_r+0x10>
 800b096:	2500      	movs	r5, #0
 800b098:	4628      	mov	r0, r5
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	b118      	cbz	r0, 800b0a6 <_fflush_r+0x1a>
 800b09e:	6a03      	ldr	r3, [r0, #32]
 800b0a0:	b90b      	cbnz	r3, 800b0a6 <_fflush_r+0x1a>
 800b0a2:	f7fd fa7b 	bl	800859c <__sinit>
 800b0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0f3      	beq.n	800b096 <_fflush_r+0xa>
 800b0ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0b0:	07d0      	lsls	r0, r2, #31
 800b0b2:	d404      	bmi.n	800b0be <_fflush_r+0x32>
 800b0b4:	0599      	lsls	r1, r3, #22
 800b0b6:	d402      	bmi.n	800b0be <_fflush_r+0x32>
 800b0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ba:	f7fd fc9c 	bl	80089f6 <__retarget_lock_acquire_recursive>
 800b0be:	4628      	mov	r0, r5
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	f7ff ff5f 	bl	800af84 <__sflush_r>
 800b0c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0c8:	07da      	lsls	r2, r3, #31
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	d4e4      	bmi.n	800b098 <_fflush_r+0xc>
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	059b      	lsls	r3, r3, #22
 800b0d2:	d4e1      	bmi.n	800b098 <_fflush_r+0xc>
 800b0d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0d6:	f7fd fc8f 	bl	80089f8 <__retarget_lock_release_recursive>
 800b0da:	e7dd      	b.n	800b098 <_fflush_r+0xc>

0800b0dc <__swhatbuf_r>:
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	460c      	mov	r4, r1
 800b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e4:	2900      	cmp	r1, #0
 800b0e6:	b096      	sub	sp, #88	@ 0x58
 800b0e8:	4615      	mov	r5, r2
 800b0ea:	461e      	mov	r6, r3
 800b0ec:	da0d      	bge.n	800b10a <__swhatbuf_r+0x2e>
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0f4:	f04f 0100 	mov.w	r1, #0
 800b0f8:	bf14      	ite	ne
 800b0fa:	2340      	movne	r3, #64	@ 0x40
 800b0fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b100:	2000      	movs	r0, #0
 800b102:	6031      	str	r1, [r6, #0]
 800b104:	602b      	str	r3, [r5, #0]
 800b106:	b016      	add	sp, #88	@ 0x58
 800b108:	bd70      	pop	{r4, r5, r6, pc}
 800b10a:	466a      	mov	r2, sp
 800b10c:	f000 f862 	bl	800b1d4 <_fstat_r>
 800b110:	2800      	cmp	r0, #0
 800b112:	dbec      	blt.n	800b0ee <__swhatbuf_r+0x12>
 800b114:	9901      	ldr	r1, [sp, #4]
 800b116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b11a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b11e:	4259      	negs	r1, r3
 800b120:	4159      	adcs	r1, r3
 800b122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b126:	e7eb      	b.n	800b100 <__swhatbuf_r+0x24>

0800b128 <__smakebuf_r>:
 800b128:	898b      	ldrh	r3, [r1, #12]
 800b12a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b12c:	079d      	lsls	r5, r3, #30
 800b12e:	4606      	mov	r6, r0
 800b130:	460c      	mov	r4, r1
 800b132:	d507      	bpl.n	800b144 <__smakebuf_r+0x1c>
 800b134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b138:	6023      	str	r3, [r4, #0]
 800b13a:	6123      	str	r3, [r4, #16]
 800b13c:	2301      	movs	r3, #1
 800b13e:	6163      	str	r3, [r4, #20]
 800b140:	b003      	add	sp, #12
 800b142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b144:	ab01      	add	r3, sp, #4
 800b146:	466a      	mov	r2, sp
 800b148:	f7ff ffc8 	bl	800b0dc <__swhatbuf_r>
 800b14c:	9f00      	ldr	r7, [sp, #0]
 800b14e:	4605      	mov	r5, r0
 800b150:	4639      	mov	r1, r7
 800b152:	4630      	mov	r0, r6
 800b154:	f7fc fa2a 	bl	80075ac <_malloc_r>
 800b158:	b948      	cbnz	r0, 800b16e <__smakebuf_r+0x46>
 800b15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b15e:	059a      	lsls	r2, r3, #22
 800b160:	d4ee      	bmi.n	800b140 <__smakebuf_r+0x18>
 800b162:	f023 0303 	bic.w	r3, r3, #3
 800b166:	f043 0302 	orr.w	r3, r3, #2
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	e7e2      	b.n	800b134 <__smakebuf_r+0xc>
 800b16e:	89a3      	ldrh	r3, [r4, #12]
 800b170:	6020      	str	r0, [r4, #0]
 800b172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b176:	81a3      	strh	r3, [r4, #12]
 800b178:	9b01      	ldr	r3, [sp, #4]
 800b17a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b17e:	b15b      	cbz	r3, 800b198 <__smakebuf_r+0x70>
 800b180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b184:	4630      	mov	r0, r6
 800b186:	f000 f837 	bl	800b1f8 <_isatty_r>
 800b18a:	b128      	cbz	r0, 800b198 <__smakebuf_r+0x70>
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	f023 0303 	bic.w	r3, r3, #3
 800b192:	f043 0301 	orr.w	r3, r3, #1
 800b196:	81a3      	strh	r3, [r4, #12]
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	431d      	orrs	r5, r3
 800b19c:	81a5      	strh	r5, [r4, #12]
 800b19e:	e7cf      	b.n	800b140 <__smakebuf_r+0x18>

0800b1a0 <memmove>:
 800b1a0:	4288      	cmp	r0, r1
 800b1a2:	b510      	push	{r4, lr}
 800b1a4:	eb01 0402 	add.w	r4, r1, r2
 800b1a8:	d902      	bls.n	800b1b0 <memmove+0x10>
 800b1aa:	4284      	cmp	r4, r0
 800b1ac:	4623      	mov	r3, r4
 800b1ae:	d807      	bhi.n	800b1c0 <memmove+0x20>
 800b1b0:	1e43      	subs	r3, r0, #1
 800b1b2:	42a1      	cmp	r1, r4
 800b1b4:	d008      	beq.n	800b1c8 <memmove+0x28>
 800b1b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1be:	e7f8      	b.n	800b1b2 <memmove+0x12>
 800b1c0:	4402      	add	r2, r0
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	428a      	cmp	r2, r1
 800b1c6:	d100      	bne.n	800b1ca <memmove+0x2a>
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1d2:	e7f7      	b.n	800b1c4 <memmove+0x24>

0800b1d4 <_fstat_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4d07      	ldr	r5, [pc, #28]	@ (800b1f4 <_fstat_r+0x20>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	4611      	mov	r1, r2
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	f7f6 fed1 	bl	8001f88 <_fstat>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	d102      	bne.n	800b1f0 <_fstat_r+0x1c>
 800b1ea:	682b      	ldr	r3, [r5, #0]
 800b1ec:	b103      	cbz	r3, 800b1f0 <_fstat_r+0x1c>
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	bd38      	pop	{r3, r4, r5, pc}
 800b1f2:	bf00      	nop
 800b1f4:	200008c4 	.word	0x200008c4

0800b1f8 <_isatty_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d06      	ldr	r5, [pc, #24]	@ (800b214 <_isatty_r+0x1c>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	f7f6 fed0 	bl	8001fa8 <_isatty>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_isatty_r+0x1a>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_isatty_r+0x1a>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	200008c4 	.word	0x200008c4

0800b218 <nan>:
 800b218:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b220 <nan+0x8>
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	00000000 	.word	0x00000000
 800b224:	7ff80000 	.word	0x7ff80000

0800b228 <__assert_func>:
 800b228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b22a:	4614      	mov	r4, r2
 800b22c:	461a      	mov	r2, r3
 800b22e:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <__assert_func+0x2c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4605      	mov	r5, r0
 800b234:	68d8      	ldr	r0, [r3, #12]
 800b236:	b14c      	cbz	r4, 800b24c <__assert_func+0x24>
 800b238:	4b07      	ldr	r3, [pc, #28]	@ (800b258 <__assert_func+0x30>)
 800b23a:	9100      	str	r1, [sp, #0]
 800b23c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b240:	4906      	ldr	r1, [pc, #24]	@ (800b25c <__assert_func+0x34>)
 800b242:	462b      	mov	r3, r5
 800b244:	f000 fba8 	bl	800b998 <fiprintf>
 800b248:	f000 fbb8 	bl	800b9bc <abort>
 800b24c:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <__assert_func+0x38>)
 800b24e:	461c      	mov	r4, r3
 800b250:	e7f3      	b.n	800b23a <__assert_func+0x12>
 800b252:	bf00      	nop
 800b254:	2000004c 	.word	0x2000004c
 800b258:	0800c02b 	.word	0x0800c02b
 800b25c:	0800c038 	.word	0x0800c038
 800b260:	0800c066 	.word	0x0800c066

0800b264 <_calloc_r>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	fba1 5402 	umull	r5, r4, r1, r2
 800b26a:	b934      	cbnz	r4, 800b27a <_calloc_r+0x16>
 800b26c:	4629      	mov	r1, r5
 800b26e:	f7fc f99d 	bl	80075ac <_malloc_r>
 800b272:	4606      	mov	r6, r0
 800b274:	b928      	cbnz	r0, 800b282 <_calloc_r+0x1e>
 800b276:	4630      	mov	r0, r6
 800b278:	bd70      	pop	{r4, r5, r6, pc}
 800b27a:	220c      	movs	r2, #12
 800b27c:	6002      	str	r2, [r0, #0]
 800b27e:	2600      	movs	r6, #0
 800b280:	e7f9      	b.n	800b276 <_calloc_r+0x12>
 800b282:	462a      	mov	r2, r5
 800b284:	4621      	mov	r1, r4
 800b286:	f7fd fb17 	bl	80088b8 <memset>
 800b28a:	e7f4      	b.n	800b276 <_calloc_r+0x12>

0800b28c <rshift>:
 800b28c:	6903      	ldr	r3, [r0, #16]
 800b28e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b296:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b29a:	f100 0414 	add.w	r4, r0, #20
 800b29e:	dd45      	ble.n	800b32c <rshift+0xa0>
 800b2a0:	f011 011f 	ands.w	r1, r1, #31
 800b2a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2ac:	d10c      	bne.n	800b2c8 <rshift+0x3c>
 800b2ae:	f100 0710 	add.w	r7, r0, #16
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	42b1      	cmp	r1, r6
 800b2b6:	d334      	bcc.n	800b322 <rshift+0x96>
 800b2b8:	1a9b      	subs	r3, r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	1eea      	subs	r2, r5, #3
 800b2be:	4296      	cmp	r6, r2
 800b2c0:	bf38      	it	cc
 800b2c2:	2300      	movcc	r3, #0
 800b2c4:	4423      	add	r3, r4
 800b2c6:	e015      	b.n	800b2f4 <rshift+0x68>
 800b2c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2cc:	f1c1 0820 	rsb	r8, r1, #32
 800b2d0:	40cf      	lsrs	r7, r1
 800b2d2:	f105 0e04 	add.w	lr, r5, #4
 800b2d6:	46a1      	mov	r9, r4
 800b2d8:	4576      	cmp	r6, lr
 800b2da:	46f4      	mov	ip, lr
 800b2dc:	d815      	bhi.n	800b30a <rshift+0x7e>
 800b2de:	1a9a      	subs	r2, r3, r2
 800b2e0:	0092      	lsls	r2, r2, #2
 800b2e2:	3a04      	subs	r2, #4
 800b2e4:	3501      	adds	r5, #1
 800b2e6:	42ae      	cmp	r6, r5
 800b2e8:	bf38      	it	cc
 800b2ea:	2200      	movcc	r2, #0
 800b2ec:	18a3      	adds	r3, r4, r2
 800b2ee:	50a7      	str	r7, [r4, r2]
 800b2f0:	b107      	cbz	r7, 800b2f4 <rshift+0x68>
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	1b1a      	subs	r2, r3, r4
 800b2f6:	42a3      	cmp	r3, r4
 800b2f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2fc:	bf08      	it	eq
 800b2fe:	2300      	moveq	r3, #0
 800b300:	6102      	str	r2, [r0, #16]
 800b302:	bf08      	it	eq
 800b304:	6143      	streq	r3, [r0, #20]
 800b306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b30a:	f8dc c000 	ldr.w	ip, [ip]
 800b30e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b312:	ea4c 0707 	orr.w	r7, ip, r7
 800b316:	f849 7b04 	str.w	r7, [r9], #4
 800b31a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b31e:	40cf      	lsrs	r7, r1
 800b320:	e7da      	b.n	800b2d8 <rshift+0x4c>
 800b322:	f851 cb04 	ldr.w	ip, [r1], #4
 800b326:	f847 cf04 	str.w	ip, [r7, #4]!
 800b32a:	e7c3      	b.n	800b2b4 <rshift+0x28>
 800b32c:	4623      	mov	r3, r4
 800b32e:	e7e1      	b.n	800b2f4 <rshift+0x68>

0800b330 <__hexdig_fun>:
 800b330:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b334:	2b09      	cmp	r3, #9
 800b336:	d802      	bhi.n	800b33e <__hexdig_fun+0xe>
 800b338:	3820      	subs	r0, #32
 800b33a:	b2c0      	uxtb	r0, r0
 800b33c:	4770      	bx	lr
 800b33e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b342:	2b05      	cmp	r3, #5
 800b344:	d801      	bhi.n	800b34a <__hexdig_fun+0x1a>
 800b346:	3847      	subs	r0, #71	@ 0x47
 800b348:	e7f7      	b.n	800b33a <__hexdig_fun+0xa>
 800b34a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b34e:	2b05      	cmp	r3, #5
 800b350:	d801      	bhi.n	800b356 <__hexdig_fun+0x26>
 800b352:	3827      	subs	r0, #39	@ 0x27
 800b354:	e7f1      	b.n	800b33a <__hexdig_fun+0xa>
 800b356:	2000      	movs	r0, #0
 800b358:	4770      	bx	lr
	...

0800b35c <__gethex>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	b085      	sub	sp, #20
 800b362:	468a      	mov	sl, r1
 800b364:	9302      	str	r3, [sp, #8]
 800b366:	680b      	ldr	r3, [r1, #0]
 800b368:	9001      	str	r0, [sp, #4]
 800b36a:	4690      	mov	r8, r2
 800b36c:	1c9c      	adds	r4, r3, #2
 800b36e:	46a1      	mov	r9, r4
 800b370:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b374:	2830      	cmp	r0, #48	@ 0x30
 800b376:	d0fa      	beq.n	800b36e <__gethex+0x12>
 800b378:	eba9 0303 	sub.w	r3, r9, r3
 800b37c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b380:	f7ff ffd6 	bl	800b330 <__hexdig_fun>
 800b384:	4605      	mov	r5, r0
 800b386:	2800      	cmp	r0, #0
 800b388:	d168      	bne.n	800b45c <__gethex+0x100>
 800b38a:	49a0      	ldr	r1, [pc, #640]	@ (800b60c <__gethex+0x2b0>)
 800b38c:	2201      	movs	r2, #1
 800b38e:	4648      	mov	r0, r9
 800b390:	f7fd fa9a 	bl	80088c8 <strncmp>
 800b394:	4607      	mov	r7, r0
 800b396:	2800      	cmp	r0, #0
 800b398:	d167      	bne.n	800b46a <__gethex+0x10e>
 800b39a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b39e:	4626      	mov	r6, r4
 800b3a0:	f7ff ffc6 	bl	800b330 <__hexdig_fun>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d062      	beq.n	800b46e <__gethex+0x112>
 800b3a8:	4623      	mov	r3, r4
 800b3aa:	7818      	ldrb	r0, [r3, #0]
 800b3ac:	2830      	cmp	r0, #48	@ 0x30
 800b3ae:	4699      	mov	r9, r3
 800b3b0:	f103 0301 	add.w	r3, r3, #1
 800b3b4:	d0f9      	beq.n	800b3aa <__gethex+0x4e>
 800b3b6:	f7ff ffbb 	bl	800b330 <__hexdig_fun>
 800b3ba:	fab0 f580 	clz	r5, r0
 800b3be:	096d      	lsrs	r5, r5, #5
 800b3c0:	f04f 0b01 	mov.w	fp, #1
 800b3c4:	464a      	mov	r2, r9
 800b3c6:	4616      	mov	r6, r2
 800b3c8:	3201      	adds	r2, #1
 800b3ca:	7830      	ldrb	r0, [r6, #0]
 800b3cc:	f7ff ffb0 	bl	800b330 <__hexdig_fun>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d1f8      	bne.n	800b3c6 <__gethex+0x6a>
 800b3d4:	498d      	ldr	r1, [pc, #564]	@ (800b60c <__gethex+0x2b0>)
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7fd fa75 	bl	80088c8 <strncmp>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d13f      	bne.n	800b462 <__gethex+0x106>
 800b3e2:	b944      	cbnz	r4, 800b3f6 <__gethex+0x9a>
 800b3e4:	1c74      	adds	r4, r6, #1
 800b3e6:	4622      	mov	r2, r4
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	3201      	adds	r2, #1
 800b3ec:	7830      	ldrb	r0, [r6, #0]
 800b3ee:	f7ff ff9f 	bl	800b330 <__hexdig_fun>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d1f8      	bne.n	800b3e8 <__gethex+0x8c>
 800b3f6:	1ba4      	subs	r4, r4, r6
 800b3f8:	00a7      	lsls	r7, r4, #2
 800b3fa:	7833      	ldrb	r3, [r6, #0]
 800b3fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b400:	2b50      	cmp	r3, #80	@ 0x50
 800b402:	d13e      	bne.n	800b482 <__gethex+0x126>
 800b404:	7873      	ldrb	r3, [r6, #1]
 800b406:	2b2b      	cmp	r3, #43	@ 0x2b
 800b408:	d033      	beq.n	800b472 <__gethex+0x116>
 800b40a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b40c:	d034      	beq.n	800b478 <__gethex+0x11c>
 800b40e:	1c71      	adds	r1, r6, #1
 800b410:	2400      	movs	r4, #0
 800b412:	7808      	ldrb	r0, [r1, #0]
 800b414:	f7ff ff8c 	bl	800b330 <__hexdig_fun>
 800b418:	1e43      	subs	r3, r0, #1
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	2b18      	cmp	r3, #24
 800b41e:	d830      	bhi.n	800b482 <__gethex+0x126>
 800b420:	f1a0 0210 	sub.w	r2, r0, #16
 800b424:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b428:	f7ff ff82 	bl	800b330 <__hexdig_fun>
 800b42c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b430:	fa5f fc8c 	uxtb.w	ip, ip
 800b434:	f1bc 0f18 	cmp.w	ip, #24
 800b438:	f04f 030a 	mov.w	r3, #10
 800b43c:	d91e      	bls.n	800b47c <__gethex+0x120>
 800b43e:	b104      	cbz	r4, 800b442 <__gethex+0xe6>
 800b440:	4252      	negs	r2, r2
 800b442:	4417      	add	r7, r2
 800b444:	f8ca 1000 	str.w	r1, [sl]
 800b448:	b1ed      	cbz	r5, 800b486 <__gethex+0x12a>
 800b44a:	f1bb 0f00 	cmp.w	fp, #0
 800b44e:	bf0c      	ite	eq
 800b450:	2506      	moveq	r5, #6
 800b452:	2500      	movne	r5, #0
 800b454:	4628      	mov	r0, r5
 800b456:	b005      	add	sp, #20
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	2500      	movs	r5, #0
 800b45e:	462c      	mov	r4, r5
 800b460:	e7b0      	b.n	800b3c4 <__gethex+0x68>
 800b462:	2c00      	cmp	r4, #0
 800b464:	d1c7      	bne.n	800b3f6 <__gethex+0x9a>
 800b466:	4627      	mov	r7, r4
 800b468:	e7c7      	b.n	800b3fa <__gethex+0x9e>
 800b46a:	464e      	mov	r6, r9
 800b46c:	462f      	mov	r7, r5
 800b46e:	2501      	movs	r5, #1
 800b470:	e7c3      	b.n	800b3fa <__gethex+0x9e>
 800b472:	2400      	movs	r4, #0
 800b474:	1cb1      	adds	r1, r6, #2
 800b476:	e7cc      	b.n	800b412 <__gethex+0xb6>
 800b478:	2401      	movs	r4, #1
 800b47a:	e7fb      	b.n	800b474 <__gethex+0x118>
 800b47c:	fb03 0002 	mla	r0, r3, r2, r0
 800b480:	e7ce      	b.n	800b420 <__gethex+0xc4>
 800b482:	4631      	mov	r1, r6
 800b484:	e7de      	b.n	800b444 <__gethex+0xe8>
 800b486:	eba6 0309 	sub.w	r3, r6, r9
 800b48a:	3b01      	subs	r3, #1
 800b48c:	4629      	mov	r1, r5
 800b48e:	2b07      	cmp	r3, #7
 800b490:	dc0a      	bgt.n	800b4a8 <__gethex+0x14c>
 800b492:	9801      	ldr	r0, [sp, #4]
 800b494:	f7fe f96a 	bl	800976c <_Balloc>
 800b498:	4604      	mov	r4, r0
 800b49a:	b940      	cbnz	r0, 800b4ae <__gethex+0x152>
 800b49c:	4b5c      	ldr	r3, [pc, #368]	@ (800b610 <__gethex+0x2b4>)
 800b49e:	4602      	mov	r2, r0
 800b4a0:	21e4      	movs	r1, #228	@ 0xe4
 800b4a2:	485c      	ldr	r0, [pc, #368]	@ (800b614 <__gethex+0x2b8>)
 800b4a4:	f7ff fec0 	bl	800b228 <__assert_func>
 800b4a8:	3101      	adds	r1, #1
 800b4aa:	105b      	asrs	r3, r3, #1
 800b4ac:	e7ef      	b.n	800b48e <__gethex+0x132>
 800b4ae:	f100 0a14 	add.w	sl, r0, #20
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	4655      	mov	r5, sl
 800b4b6:	469b      	mov	fp, r3
 800b4b8:	45b1      	cmp	r9, r6
 800b4ba:	d337      	bcc.n	800b52c <__gethex+0x1d0>
 800b4bc:	f845 bb04 	str.w	fp, [r5], #4
 800b4c0:	eba5 050a 	sub.w	r5, r5, sl
 800b4c4:	10ad      	asrs	r5, r5, #2
 800b4c6:	6125      	str	r5, [r4, #16]
 800b4c8:	4658      	mov	r0, fp
 800b4ca:	f7fe fa41 	bl	8009950 <__hi0bits>
 800b4ce:	016d      	lsls	r5, r5, #5
 800b4d0:	f8d8 6000 	ldr.w	r6, [r8]
 800b4d4:	1a2d      	subs	r5, r5, r0
 800b4d6:	42b5      	cmp	r5, r6
 800b4d8:	dd54      	ble.n	800b584 <__gethex+0x228>
 800b4da:	1bad      	subs	r5, r5, r6
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7fe fdcd 	bl	800a07e <__any_on>
 800b4e4:	4681      	mov	r9, r0
 800b4e6:	b178      	cbz	r0, 800b508 <__gethex+0x1ac>
 800b4e8:	1e6b      	subs	r3, r5, #1
 800b4ea:	1159      	asrs	r1, r3, #5
 800b4ec:	f003 021f 	and.w	r2, r3, #31
 800b4f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4f4:	f04f 0901 	mov.w	r9, #1
 800b4f8:	fa09 f202 	lsl.w	r2, r9, r2
 800b4fc:	420a      	tst	r2, r1
 800b4fe:	d003      	beq.n	800b508 <__gethex+0x1ac>
 800b500:	454b      	cmp	r3, r9
 800b502:	dc36      	bgt.n	800b572 <__gethex+0x216>
 800b504:	f04f 0902 	mov.w	r9, #2
 800b508:	4629      	mov	r1, r5
 800b50a:	4620      	mov	r0, r4
 800b50c:	f7ff febe 	bl	800b28c <rshift>
 800b510:	442f      	add	r7, r5
 800b512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b516:	42bb      	cmp	r3, r7
 800b518:	da42      	bge.n	800b5a0 <__gethex+0x244>
 800b51a:	9801      	ldr	r0, [sp, #4]
 800b51c:	4621      	mov	r1, r4
 800b51e:	f7fe f965 	bl	80097ec <_Bfree>
 800b522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b524:	2300      	movs	r3, #0
 800b526:	6013      	str	r3, [r2, #0]
 800b528:	25a3      	movs	r5, #163	@ 0xa3
 800b52a:	e793      	b.n	800b454 <__gethex+0xf8>
 800b52c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b530:	2a2e      	cmp	r2, #46	@ 0x2e
 800b532:	d012      	beq.n	800b55a <__gethex+0x1fe>
 800b534:	2b20      	cmp	r3, #32
 800b536:	d104      	bne.n	800b542 <__gethex+0x1e6>
 800b538:	f845 bb04 	str.w	fp, [r5], #4
 800b53c:	f04f 0b00 	mov.w	fp, #0
 800b540:	465b      	mov	r3, fp
 800b542:	7830      	ldrb	r0, [r6, #0]
 800b544:	9303      	str	r3, [sp, #12]
 800b546:	f7ff fef3 	bl	800b330 <__hexdig_fun>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	f000 000f 	and.w	r0, r0, #15
 800b550:	4098      	lsls	r0, r3
 800b552:	ea4b 0b00 	orr.w	fp, fp, r0
 800b556:	3304      	adds	r3, #4
 800b558:	e7ae      	b.n	800b4b8 <__gethex+0x15c>
 800b55a:	45b1      	cmp	r9, r6
 800b55c:	d8ea      	bhi.n	800b534 <__gethex+0x1d8>
 800b55e:	492b      	ldr	r1, [pc, #172]	@ (800b60c <__gethex+0x2b0>)
 800b560:	9303      	str	r3, [sp, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	4630      	mov	r0, r6
 800b566:	f7fd f9af 	bl	80088c8 <strncmp>
 800b56a:	9b03      	ldr	r3, [sp, #12]
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d1e1      	bne.n	800b534 <__gethex+0x1d8>
 800b570:	e7a2      	b.n	800b4b8 <__gethex+0x15c>
 800b572:	1ea9      	subs	r1, r5, #2
 800b574:	4620      	mov	r0, r4
 800b576:	f7fe fd82 	bl	800a07e <__any_on>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d0c2      	beq.n	800b504 <__gethex+0x1a8>
 800b57e:	f04f 0903 	mov.w	r9, #3
 800b582:	e7c1      	b.n	800b508 <__gethex+0x1ac>
 800b584:	da09      	bge.n	800b59a <__gethex+0x23e>
 800b586:	1b75      	subs	r5, r6, r5
 800b588:	4621      	mov	r1, r4
 800b58a:	9801      	ldr	r0, [sp, #4]
 800b58c:	462a      	mov	r2, r5
 800b58e:	f7fe fb3d 	bl	8009c0c <__lshift>
 800b592:	1b7f      	subs	r7, r7, r5
 800b594:	4604      	mov	r4, r0
 800b596:	f100 0a14 	add.w	sl, r0, #20
 800b59a:	f04f 0900 	mov.w	r9, #0
 800b59e:	e7b8      	b.n	800b512 <__gethex+0x1b6>
 800b5a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5a4:	42bd      	cmp	r5, r7
 800b5a6:	dd6f      	ble.n	800b688 <__gethex+0x32c>
 800b5a8:	1bed      	subs	r5, r5, r7
 800b5aa:	42ae      	cmp	r6, r5
 800b5ac:	dc34      	bgt.n	800b618 <__gethex+0x2bc>
 800b5ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d022      	beq.n	800b5fc <__gethex+0x2a0>
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d024      	beq.n	800b604 <__gethex+0x2a8>
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d115      	bne.n	800b5ea <__gethex+0x28e>
 800b5be:	42ae      	cmp	r6, r5
 800b5c0:	d113      	bne.n	800b5ea <__gethex+0x28e>
 800b5c2:	2e01      	cmp	r6, #1
 800b5c4:	d10b      	bne.n	800b5de <__gethex+0x282>
 800b5c6:	9a02      	ldr	r2, [sp, #8]
 800b5c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5cc:	6013      	str	r3, [r2, #0]
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	6123      	str	r3, [r4, #16]
 800b5d2:	f8ca 3000 	str.w	r3, [sl]
 800b5d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5d8:	2562      	movs	r5, #98	@ 0x62
 800b5da:	601c      	str	r4, [r3, #0]
 800b5dc:	e73a      	b.n	800b454 <__gethex+0xf8>
 800b5de:	1e71      	subs	r1, r6, #1
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f7fe fd4c 	bl	800a07e <__any_on>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d1ed      	bne.n	800b5c6 <__gethex+0x26a>
 800b5ea:	9801      	ldr	r0, [sp, #4]
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	f7fe f8fd 	bl	80097ec <_Bfree>
 800b5f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	6013      	str	r3, [r2, #0]
 800b5f8:	2550      	movs	r5, #80	@ 0x50
 800b5fa:	e72b      	b.n	800b454 <__gethex+0xf8>
 800b5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1f3      	bne.n	800b5ea <__gethex+0x28e>
 800b602:	e7e0      	b.n	800b5c6 <__gethex+0x26a>
 800b604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1dd      	bne.n	800b5c6 <__gethex+0x26a>
 800b60a:	e7ee      	b.n	800b5ea <__gethex+0x28e>
 800b60c:	0800c010 	.word	0x0800c010
 800b610:	0800bfa6 	.word	0x0800bfa6
 800b614:	0800c067 	.word	0x0800c067
 800b618:	1e6f      	subs	r7, r5, #1
 800b61a:	f1b9 0f00 	cmp.w	r9, #0
 800b61e:	d130      	bne.n	800b682 <__gethex+0x326>
 800b620:	b127      	cbz	r7, 800b62c <__gethex+0x2d0>
 800b622:	4639      	mov	r1, r7
 800b624:	4620      	mov	r0, r4
 800b626:	f7fe fd2a 	bl	800a07e <__any_on>
 800b62a:	4681      	mov	r9, r0
 800b62c:	117a      	asrs	r2, r7, #5
 800b62e:	2301      	movs	r3, #1
 800b630:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b634:	f007 071f 	and.w	r7, r7, #31
 800b638:	40bb      	lsls	r3, r7
 800b63a:	4213      	tst	r3, r2
 800b63c:	4629      	mov	r1, r5
 800b63e:	4620      	mov	r0, r4
 800b640:	bf18      	it	ne
 800b642:	f049 0902 	orrne.w	r9, r9, #2
 800b646:	f7ff fe21 	bl	800b28c <rshift>
 800b64a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b64e:	1b76      	subs	r6, r6, r5
 800b650:	2502      	movs	r5, #2
 800b652:	f1b9 0f00 	cmp.w	r9, #0
 800b656:	d047      	beq.n	800b6e8 <__gethex+0x38c>
 800b658:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d015      	beq.n	800b68c <__gethex+0x330>
 800b660:	2b03      	cmp	r3, #3
 800b662:	d017      	beq.n	800b694 <__gethex+0x338>
 800b664:	2b01      	cmp	r3, #1
 800b666:	d109      	bne.n	800b67c <__gethex+0x320>
 800b668:	f019 0f02 	tst.w	r9, #2
 800b66c:	d006      	beq.n	800b67c <__gethex+0x320>
 800b66e:	f8da 3000 	ldr.w	r3, [sl]
 800b672:	ea49 0903 	orr.w	r9, r9, r3
 800b676:	f019 0f01 	tst.w	r9, #1
 800b67a:	d10e      	bne.n	800b69a <__gethex+0x33e>
 800b67c:	f045 0510 	orr.w	r5, r5, #16
 800b680:	e032      	b.n	800b6e8 <__gethex+0x38c>
 800b682:	f04f 0901 	mov.w	r9, #1
 800b686:	e7d1      	b.n	800b62c <__gethex+0x2d0>
 800b688:	2501      	movs	r5, #1
 800b68a:	e7e2      	b.n	800b652 <__gethex+0x2f6>
 800b68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b68e:	f1c3 0301 	rsb	r3, r3, #1
 800b692:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b696:	2b00      	cmp	r3, #0
 800b698:	d0f0      	beq.n	800b67c <__gethex+0x320>
 800b69a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b69e:	f104 0314 	add.w	r3, r4, #20
 800b6a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b6a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b6aa:	f04f 0c00 	mov.w	ip, #0
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b6b8:	d01b      	beq.n	800b6f2 <__gethex+0x396>
 800b6ba:	3201      	adds	r2, #1
 800b6bc:	6002      	str	r2, [r0, #0]
 800b6be:	2d02      	cmp	r5, #2
 800b6c0:	f104 0314 	add.w	r3, r4, #20
 800b6c4:	d13c      	bne.n	800b740 <__gethex+0x3e4>
 800b6c6:	f8d8 2000 	ldr.w	r2, [r8]
 800b6ca:	3a01      	subs	r2, #1
 800b6cc:	42b2      	cmp	r2, r6
 800b6ce:	d109      	bne.n	800b6e4 <__gethex+0x388>
 800b6d0:	1171      	asrs	r1, r6, #5
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6d8:	f006 061f 	and.w	r6, r6, #31
 800b6dc:	fa02 f606 	lsl.w	r6, r2, r6
 800b6e0:	421e      	tst	r6, r3
 800b6e2:	d13a      	bne.n	800b75a <__gethex+0x3fe>
 800b6e4:	f045 0520 	orr.w	r5, r5, #32
 800b6e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ea:	601c      	str	r4, [r3, #0]
 800b6ec:	9b02      	ldr	r3, [sp, #8]
 800b6ee:	601f      	str	r7, [r3, #0]
 800b6f0:	e6b0      	b.n	800b454 <__gethex+0xf8>
 800b6f2:	4299      	cmp	r1, r3
 800b6f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6f8:	d8d9      	bhi.n	800b6ae <__gethex+0x352>
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	459b      	cmp	fp, r3
 800b6fe:	db17      	blt.n	800b730 <__gethex+0x3d4>
 800b700:	6861      	ldr	r1, [r4, #4]
 800b702:	9801      	ldr	r0, [sp, #4]
 800b704:	3101      	adds	r1, #1
 800b706:	f7fe f831 	bl	800976c <_Balloc>
 800b70a:	4681      	mov	r9, r0
 800b70c:	b918      	cbnz	r0, 800b716 <__gethex+0x3ba>
 800b70e:	4b1a      	ldr	r3, [pc, #104]	@ (800b778 <__gethex+0x41c>)
 800b710:	4602      	mov	r2, r0
 800b712:	2184      	movs	r1, #132	@ 0x84
 800b714:	e6c5      	b.n	800b4a2 <__gethex+0x146>
 800b716:	6922      	ldr	r2, [r4, #16]
 800b718:	3202      	adds	r2, #2
 800b71a:	f104 010c 	add.w	r1, r4, #12
 800b71e:	0092      	lsls	r2, r2, #2
 800b720:	300c      	adds	r0, #12
 800b722:	f7fd f96a 	bl	80089fa <memcpy>
 800b726:	4621      	mov	r1, r4
 800b728:	9801      	ldr	r0, [sp, #4]
 800b72a:	f7fe f85f 	bl	80097ec <_Bfree>
 800b72e:	464c      	mov	r4, r9
 800b730:	6923      	ldr	r3, [r4, #16]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b738:	6122      	str	r2, [r4, #16]
 800b73a:	2201      	movs	r2, #1
 800b73c:	615a      	str	r2, [r3, #20]
 800b73e:	e7be      	b.n	800b6be <__gethex+0x362>
 800b740:	6922      	ldr	r2, [r4, #16]
 800b742:	455a      	cmp	r2, fp
 800b744:	dd0b      	ble.n	800b75e <__gethex+0x402>
 800b746:	2101      	movs	r1, #1
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff fd9f 	bl	800b28c <rshift>
 800b74e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b752:	3701      	adds	r7, #1
 800b754:	42bb      	cmp	r3, r7
 800b756:	f6ff aee0 	blt.w	800b51a <__gethex+0x1be>
 800b75a:	2501      	movs	r5, #1
 800b75c:	e7c2      	b.n	800b6e4 <__gethex+0x388>
 800b75e:	f016 061f 	ands.w	r6, r6, #31
 800b762:	d0fa      	beq.n	800b75a <__gethex+0x3fe>
 800b764:	4453      	add	r3, sl
 800b766:	f1c6 0620 	rsb	r6, r6, #32
 800b76a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b76e:	f7fe f8ef 	bl	8009950 <__hi0bits>
 800b772:	42b0      	cmp	r0, r6
 800b774:	dbe7      	blt.n	800b746 <__gethex+0x3ea>
 800b776:	e7f0      	b.n	800b75a <__gethex+0x3fe>
 800b778:	0800bfa6 	.word	0x0800bfa6

0800b77c <L_shift>:
 800b77c:	f1c2 0208 	rsb	r2, r2, #8
 800b780:	0092      	lsls	r2, r2, #2
 800b782:	b570      	push	{r4, r5, r6, lr}
 800b784:	f1c2 0620 	rsb	r6, r2, #32
 800b788:	6843      	ldr	r3, [r0, #4]
 800b78a:	6804      	ldr	r4, [r0, #0]
 800b78c:	fa03 f506 	lsl.w	r5, r3, r6
 800b790:	432c      	orrs	r4, r5
 800b792:	40d3      	lsrs	r3, r2
 800b794:	6004      	str	r4, [r0, #0]
 800b796:	f840 3f04 	str.w	r3, [r0, #4]!
 800b79a:	4288      	cmp	r0, r1
 800b79c:	d3f4      	bcc.n	800b788 <L_shift+0xc>
 800b79e:	bd70      	pop	{r4, r5, r6, pc}

0800b7a0 <__match>:
 800b7a0:	b530      	push	{r4, r5, lr}
 800b7a2:	6803      	ldr	r3, [r0, #0]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7aa:	b914      	cbnz	r4, 800b7b2 <__match+0x12>
 800b7ac:	6003      	str	r3, [r0, #0]
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	bd30      	pop	{r4, r5, pc}
 800b7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b7ba:	2d19      	cmp	r5, #25
 800b7bc:	bf98      	it	ls
 800b7be:	3220      	addls	r2, #32
 800b7c0:	42a2      	cmp	r2, r4
 800b7c2:	d0f0      	beq.n	800b7a6 <__match+0x6>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	e7f3      	b.n	800b7b0 <__match+0x10>

0800b7c8 <__hexnan>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	680b      	ldr	r3, [r1, #0]
 800b7ce:	6801      	ldr	r1, [r0, #0]
 800b7d0:	115e      	asrs	r6, r3, #5
 800b7d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7d6:	f013 031f 	ands.w	r3, r3, #31
 800b7da:	b087      	sub	sp, #28
 800b7dc:	bf18      	it	ne
 800b7de:	3604      	addne	r6, #4
 800b7e0:	2500      	movs	r5, #0
 800b7e2:	1f37      	subs	r7, r6, #4
 800b7e4:	4682      	mov	sl, r0
 800b7e6:	4690      	mov	r8, r2
 800b7e8:	9301      	str	r3, [sp, #4]
 800b7ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7ee:	46b9      	mov	r9, r7
 800b7f0:	463c      	mov	r4, r7
 800b7f2:	9502      	str	r5, [sp, #8]
 800b7f4:	46ab      	mov	fp, r5
 800b7f6:	784a      	ldrb	r2, [r1, #1]
 800b7f8:	1c4b      	adds	r3, r1, #1
 800b7fa:	9303      	str	r3, [sp, #12]
 800b7fc:	b342      	cbz	r2, 800b850 <__hexnan+0x88>
 800b7fe:	4610      	mov	r0, r2
 800b800:	9105      	str	r1, [sp, #20]
 800b802:	9204      	str	r2, [sp, #16]
 800b804:	f7ff fd94 	bl	800b330 <__hexdig_fun>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d151      	bne.n	800b8b0 <__hexnan+0xe8>
 800b80c:	9a04      	ldr	r2, [sp, #16]
 800b80e:	9905      	ldr	r1, [sp, #20]
 800b810:	2a20      	cmp	r2, #32
 800b812:	d818      	bhi.n	800b846 <__hexnan+0x7e>
 800b814:	9b02      	ldr	r3, [sp, #8]
 800b816:	459b      	cmp	fp, r3
 800b818:	dd13      	ble.n	800b842 <__hexnan+0x7a>
 800b81a:	454c      	cmp	r4, r9
 800b81c:	d206      	bcs.n	800b82c <__hexnan+0x64>
 800b81e:	2d07      	cmp	r5, #7
 800b820:	dc04      	bgt.n	800b82c <__hexnan+0x64>
 800b822:	462a      	mov	r2, r5
 800b824:	4649      	mov	r1, r9
 800b826:	4620      	mov	r0, r4
 800b828:	f7ff ffa8 	bl	800b77c <L_shift>
 800b82c:	4544      	cmp	r4, r8
 800b82e:	d952      	bls.n	800b8d6 <__hexnan+0x10e>
 800b830:	2300      	movs	r3, #0
 800b832:	f1a4 0904 	sub.w	r9, r4, #4
 800b836:	f844 3c04 	str.w	r3, [r4, #-4]
 800b83a:	f8cd b008 	str.w	fp, [sp, #8]
 800b83e:	464c      	mov	r4, r9
 800b840:	461d      	mov	r5, r3
 800b842:	9903      	ldr	r1, [sp, #12]
 800b844:	e7d7      	b.n	800b7f6 <__hexnan+0x2e>
 800b846:	2a29      	cmp	r2, #41	@ 0x29
 800b848:	d157      	bne.n	800b8fa <__hexnan+0x132>
 800b84a:	3102      	adds	r1, #2
 800b84c:	f8ca 1000 	str.w	r1, [sl]
 800b850:	f1bb 0f00 	cmp.w	fp, #0
 800b854:	d051      	beq.n	800b8fa <__hexnan+0x132>
 800b856:	454c      	cmp	r4, r9
 800b858:	d206      	bcs.n	800b868 <__hexnan+0xa0>
 800b85a:	2d07      	cmp	r5, #7
 800b85c:	dc04      	bgt.n	800b868 <__hexnan+0xa0>
 800b85e:	462a      	mov	r2, r5
 800b860:	4649      	mov	r1, r9
 800b862:	4620      	mov	r0, r4
 800b864:	f7ff ff8a 	bl	800b77c <L_shift>
 800b868:	4544      	cmp	r4, r8
 800b86a:	d936      	bls.n	800b8da <__hexnan+0x112>
 800b86c:	f1a8 0204 	sub.w	r2, r8, #4
 800b870:	4623      	mov	r3, r4
 800b872:	f853 1b04 	ldr.w	r1, [r3], #4
 800b876:	f842 1f04 	str.w	r1, [r2, #4]!
 800b87a:	429f      	cmp	r7, r3
 800b87c:	d2f9      	bcs.n	800b872 <__hexnan+0xaa>
 800b87e:	1b3b      	subs	r3, r7, r4
 800b880:	f023 0303 	bic.w	r3, r3, #3
 800b884:	3304      	adds	r3, #4
 800b886:	3401      	adds	r4, #1
 800b888:	3e03      	subs	r6, #3
 800b88a:	42b4      	cmp	r4, r6
 800b88c:	bf88      	it	hi
 800b88e:	2304      	movhi	r3, #4
 800b890:	4443      	add	r3, r8
 800b892:	2200      	movs	r2, #0
 800b894:	f843 2b04 	str.w	r2, [r3], #4
 800b898:	429f      	cmp	r7, r3
 800b89a:	d2fb      	bcs.n	800b894 <__hexnan+0xcc>
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	b91b      	cbnz	r3, 800b8a8 <__hexnan+0xe0>
 800b8a0:	4547      	cmp	r7, r8
 800b8a2:	d128      	bne.n	800b8f6 <__hexnan+0x12e>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	2005      	movs	r0, #5
 800b8aa:	b007      	add	sp, #28
 800b8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b0:	3501      	adds	r5, #1
 800b8b2:	2d08      	cmp	r5, #8
 800b8b4:	f10b 0b01 	add.w	fp, fp, #1
 800b8b8:	dd06      	ble.n	800b8c8 <__hexnan+0x100>
 800b8ba:	4544      	cmp	r4, r8
 800b8bc:	d9c1      	bls.n	800b842 <__hexnan+0x7a>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8c4:	2501      	movs	r5, #1
 800b8c6:	3c04      	subs	r4, #4
 800b8c8:	6822      	ldr	r2, [r4, #0]
 800b8ca:	f000 000f 	and.w	r0, r0, #15
 800b8ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8d2:	6020      	str	r0, [r4, #0]
 800b8d4:	e7b5      	b.n	800b842 <__hexnan+0x7a>
 800b8d6:	2508      	movs	r5, #8
 800b8d8:	e7b3      	b.n	800b842 <__hexnan+0x7a>
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d0dd      	beq.n	800b89c <__hexnan+0xd4>
 800b8e0:	f1c3 0320 	rsb	r3, r3, #32
 800b8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e8:	40da      	lsrs	r2, r3
 800b8ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b8f4:	e7d2      	b.n	800b89c <__hexnan+0xd4>
 800b8f6:	3f04      	subs	r7, #4
 800b8f8:	e7d0      	b.n	800b89c <__hexnan+0xd4>
 800b8fa:	2004      	movs	r0, #4
 800b8fc:	e7d5      	b.n	800b8aa <__hexnan+0xe2>

0800b8fe <__ascii_mbtowc>:
 800b8fe:	b082      	sub	sp, #8
 800b900:	b901      	cbnz	r1, 800b904 <__ascii_mbtowc+0x6>
 800b902:	a901      	add	r1, sp, #4
 800b904:	b142      	cbz	r2, 800b918 <__ascii_mbtowc+0x1a>
 800b906:	b14b      	cbz	r3, 800b91c <__ascii_mbtowc+0x1e>
 800b908:	7813      	ldrb	r3, [r2, #0]
 800b90a:	600b      	str	r3, [r1, #0]
 800b90c:	7812      	ldrb	r2, [r2, #0]
 800b90e:	1e10      	subs	r0, r2, #0
 800b910:	bf18      	it	ne
 800b912:	2001      	movne	r0, #1
 800b914:	b002      	add	sp, #8
 800b916:	4770      	bx	lr
 800b918:	4610      	mov	r0, r2
 800b91a:	e7fb      	b.n	800b914 <__ascii_mbtowc+0x16>
 800b91c:	f06f 0001 	mvn.w	r0, #1
 800b920:	e7f8      	b.n	800b914 <__ascii_mbtowc+0x16>

0800b922 <_realloc_r>:
 800b922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	4607      	mov	r7, r0
 800b928:	4614      	mov	r4, r2
 800b92a:	460d      	mov	r5, r1
 800b92c:	b921      	cbnz	r1, 800b938 <_realloc_r+0x16>
 800b92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b932:	4611      	mov	r1, r2
 800b934:	f7fb be3a 	b.w	80075ac <_malloc_r>
 800b938:	b92a      	cbnz	r2, 800b946 <_realloc_r+0x24>
 800b93a:	f7fd fecd 	bl	80096d8 <_free_r>
 800b93e:	4625      	mov	r5, r4
 800b940:	4628      	mov	r0, r5
 800b942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b946:	f000 f840 	bl	800b9ca <_malloc_usable_size_r>
 800b94a:	4284      	cmp	r4, r0
 800b94c:	4606      	mov	r6, r0
 800b94e:	d802      	bhi.n	800b956 <_realloc_r+0x34>
 800b950:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b954:	d8f4      	bhi.n	800b940 <_realloc_r+0x1e>
 800b956:	4621      	mov	r1, r4
 800b958:	4638      	mov	r0, r7
 800b95a:	f7fb fe27 	bl	80075ac <_malloc_r>
 800b95e:	4680      	mov	r8, r0
 800b960:	b908      	cbnz	r0, 800b966 <_realloc_r+0x44>
 800b962:	4645      	mov	r5, r8
 800b964:	e7ec      	b.n	800b940 <_realloc_r+0x1e>
 800b966:	42b4      	cmp	r4, r6
 800b968:	4622      	mov	r2, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	bf28      	it	cs
 800b96e:	4632      	movcs	r2, r6
 800b970:	f7fd f843 	bl	80089fa <memcpy>
 800b974:	4629      	mov	r1, r5
 800b976:	4638      	mov	r0, r7
 800b978:	f7fd feae 	bl	80096d8 <_free_r>
 800b97c:	e7f1      	b.n	800b962 <_realloc_r+0x40>

0800b97e <__ascii_wctomb>:
 800b97e:	4603      	mov	r3, r0
 800b980:	4608      	mov	r0, r1
 800b982:	b141      	cbz	r1, 800b996 <__ascii_wctomb+0x18>
 800b984:	2aff      	cmp	r2, #255	@ 0xff
 800b986:	d904      	bls.n	800b992 <__ascii_wctomb+0x14>
 800b988:	228a      	movs	r2, #138	@ 0x8a
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	f04f 30ff 	mov.w	r0, #4294967295
 800b990:	4770      	bx	lr
 800b992:	700a      	strb	r2, [r1, #0]
 800b994:	2001      	movs	r0, #1
 800b996:	4770      	bx	lr

0800b998 <fiprintf>:
 800b998:	b40e      	push	{r1, r2, r3}
 800b99a:	b503      	push	{r0, r1, lr}
 800b99c:	4601      	mov	r1, r0
 800b99e:	ab03      	add	r3, sp, #12
 800b9a0:	4805      	ldr	r0, [pc, #20]	@ (800b9b8 <fiprintf+0x20>)
 800b9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a6:	6800      	ldr	r0, [r0, #0]
 800b9a8:	9301      	str	r3, [sp, #4]
 800b9aa:	f000 f83f 	bl	800ba2c <_vfiprintf_r>
 800b9ae:	b002      	add	sp, #8
 800b9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9b4:	b003      	add	sp, #12
 800b9b6:	4770      	bx	lr
 800b9b8:	2000004c 	.word	0x2000004c

0800b9bc <abort>:
 800b9bc:	b508      	push	{r3, lr}
 800b9be:	2006      	movs	r0, #6
 800b9c0:	f000 f974 	bl	800bcac <raise>
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	f7f6 faab 	bl	8001f20 <_exit>

0800b9ca <_malloc_usable_size_r>:
 800b9ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ce:	1f18      	subs	r0, r3, #4
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfbc      	itt	lt
 800b9d4:	580b      	ldrlt	r3, [r1, r0]
 800b9d6:	18c0      	addlt	r0, r0, r3
 800b9d8:	4770      	bx	lr

0800b9da <__sfputc_r>:
 800b9da:	6893      	ldr	r3, [r2, #8]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	b410      	push	{r4}
 800b9e2:	6093      	str	r3, [r2, #8]
 800b9e4:	da08      	bge.n	800b9f8 <__sfputc_r+0x1e>
 800b9e6:	6994      	ldr	r4, [r2, #24]
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	db01      	blt.n	800b9f0 <__sfputc_r+0x16>
 800b9ec:	290a      	cmp	r1, #10
 800b9ee:	d103      	bne.n	800b9f8 <__sfputc_r+0x1e>
 800b9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f4:	f7fc becb 	b.w	800878e <__swbuf_r>
 800b9f8:	6813      	ldr	r3, [r2, #0]
 800b9fa:	1c58      	adds	r0, r3, #1
 800b9fc:	6010      	str	r0, [r2, #0]
 800b9fe:	7019      	strb	r1, [r3, #0]
 800ba00:	4608      	mov	r0, r1
 800ba02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <__sfputs_r>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	4614      	mov	r4, r2
 800ba10:	18d5      	adds	r5, r2, r3
 800ba12:	42ac      	cmp	r4, r5
 800ba14:	d101      	bne.n	800ba1a <__sfputs_r+0x12>
 800ba16:	2000      	movs	r0, #0
 800ba18:	e007      	b.n	800ba2a <__sfputs_r+0x22>
 800ba1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1e:	463a      	mov	r2, r7
 800ba20:	4630      	mov	r0, r6
 800ba22:	f7ff ffda 	bl	800b9da <__sfputc_r>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d1f3      	bne.n	800ba12 <__sfputs_r+0xa>
 800ba2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba2c <_vfiprintf_r>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	460d      	mov	r5, r1
 800ba32:	b09d      	sub	sp, #116	@ 0x74
 800ba34:	4614      	mov	r4, r2
 800ba36:	4698      	mov	r8, r3
 800ba38:	4606      	mov	r6, r0
 800ba3a:	b118      	cbz	r0, 800ba44 <_vfiprintf_r+0x18>
 800ba3c:	6a03      	ldr	r3, [r0, #32]
 800ba3e:	b90b      	cbnz	r3, 800ba44 <_vfiprintf_r+0x18>
 800ba40:	f7fc fdac 	bl	800859c <__sinit>
 800ba44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba46:	07d9      	lsls	r1, r3, #31
 800ba48:	d405      	bmi.n	800ba56 <_vfiprintf_r+0x2a>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	059a      	lsls	r2, r3, #22
 800ba4e:	d402      	bmi.n	800ba56 <_vfiprintf_r+0x2a>
 800ba50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba52:	f7fc ffd0 	bl	80089f6 <__retarget_lock_acquire_recursive>
 800ba56:	89ab      	ldrh	r3, [r5, #12]
 800ba58:	071b      	lsls	r3, r3, #28
 800ba5a:	d501      	bpl.n	800ba60 <_vfiprintf_r+0x34>
 800ba5c:	692b      	ldr	r3, [r5, #16]
 800ba5e:	b99b      	cbnz	r3, 800ba88 <_vfiprintf_r+0x5c>
 800ba60:	4629      	mov	r1, r5
 800ba62:	4630      	mov	r0, r6
 800ba64:	f7fc fed2 	bl	800880c <__swsetup_r>
 800ba68:	b170      	cbz	r0, 800ba88 <_vfiprintf_r+0x5c>
 800ba6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba6c:	07dc      	lsls	r4, r3, #31
 800ba6e:	d504      	bpl.n	800ba7a <_vfiprintf_r+0x4e>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	b01d      	add	sp, #116	@ 0x74
 800ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	0598      	lsls	r0, r3, #22
 800ba7e:	d4f7      	bmi.n	800ba70 <_vfiprintf_r+0x44>
 800ba80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba82:	f7fc ffb9 	bl	80089f8 <__retarget_lock_release_recursive>
 800ba86:	e7f3      	b.n	800ba70 <_vfiprintf_r+0x44>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba8c:	2320      	movs	r3, #32
 800ba8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba96:	2330      	movs	r3, #48	@ 0x30
 800ba98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc48 <_vfiprintf_r+0x21c>
 800ba9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baa0:	f04f 0901 	mov.w	r9, #1
 800baa4:	4623      	mov	r3, r4
 800baa6:	469a      	mov	sl, r3
 800baa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baac:	b10a      	cbz	r2, 800bab2 <_vfiprintf_r+0x86>
 800baae:	2a25      	cmp	r2, #37	@ 0x25
 800bab0:	d1f9      	bne.n	800baa6 <_vfiprintf_r+0x7a>
 800bab2:	ebba 0b04 	subs.w	fp, sl, r4
 800bab6:	d00b      	beq.n	800bad0 <_vfiprintf_r+0xa4>
 800bab8:	465b      	mov	r3, fp
 800baba:	4622      	mov	r2, r4
 800babc:	4629      	mov	r1, r5
 800babe:	4630      	mov	r0, r6
 800bac0:	f7ff ffa2 	bl	800ba08 <__sfputs_r>
 800bac4:	3001      	adds	r0, #1
 800bac6:	f000 80a7 	beq.w	800bc18 <_vfiprintf_r+0x1ec>
 800baca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bacc:	445a      	add	r2, fp
 800bace:	9209      	str	r2, [sp, #36]	@ 0x24
 800bad0:	f89a 3000 	ldrb.w	r3, [sl]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 809f 	beq.w	800bc18 <_vfiprintf_r+0x1ec>
 800bada:	2300      	movs	r3, #0
 800badc:	f04f 32ff 	mov.w	r2, #4294967295
 800bae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae4:	f10a 0a01 	add.w	sl, sl, #1
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9307      	str	r3, [sp, #28]
 800baec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800baf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800baf2:	4654      	mov	r4, sl
 800baf4:	2205      	movs	r2, #5
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	4853      	ldr	r0, [pc, #332]	@ (800bc48 <_vfiprintf_r+0x21c>)
 800bafc:	f7f4 fb68 	bl	80001d0 <memchr>
 800bb00:	9a04      	ldr	r2, [sp, #16]
 800bb02:	b9d8      	cbnz	r0, 800bb3c <_vfiprintf_r+0x110>
 800bb04:	06d1      	lsls	r1, r2, #27
 800bb06:	bf44      	itt	mi
 800bb08:	2320      	movmi	r3, #32
 800bb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb0e:	0713      	lsls	r3, r2, #28
 800bb10:	bf44      	itt	mi
 800bb12:	232b      	movmi	r3, #43	@ 0x2b
 800bb14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb18:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb1e:	d015      	beq.n	800bb4c <_vfiprintf_r+0x120>
 800bb20:	9a07      	ldr	r2, [sp, #28]
 800bb22:	4654      	mov	r4, sl
 800bb24:	2000      	movs	r0, #0
 800bb26:	f04f 0c0a 	mov.w	ip, #10
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb30:	3b30      	subs	r3, #48	@ 0x30
 800bb32:	2b09      	cmp	r3, #9
 800bb34:	d94b      	bls.n	800bbce <_vfiprintf_r+0x1a2>
 800bb36:	b1b0      	cbz	r0, 800bb66 <_vfiprintf_r+0x13a>
 800bb38:	9207      	str	r2, [sp, #28]
 800bb3a:	e014      	b.n	800bb66 <_vfiprintf_r+0x13a>
 800bb3c:	eba0 0308 	sub.w	r3, r0, r8
 800bb40:	fa09 f303 	lsl.w	r3, r9, r3
 800bb44:	4313      	orrs	r3, r2
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	46a2      	mov	sl, r4
 800bb4a:	e7d2      	b.n	800baf2 <_vfiprintf_r+0xc6>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	1d19      	adds	r1, r3, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	9103      	str	r1, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	bfbb      	ittet	lt
 800bb58:	425b      	neglt	r3, r3
 800bb5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb5e:	9307      	strge	r3, [sp, #28]
 800bb60:	9307      	strlt	r3, [sp, #28]
 800bb62:	bfb8      	it	lt
 800bb64:	9204      	strlt	r2, [sp, #16]
 800bb66:	7823      	ldrb	r3, [r4, #0]
 800bb68:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb6a:	d10a      	bne.n	800bb82 <_vfiprintf_r+0x156>
 800bb6c:	7863      	ldrb	r3, [r4, #1]
 800bb6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb70:	d132      	bne.n	800bbd8 <_vfiprintf_r+0x1ac>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	1d1a      	adds	r2, r3, #4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	9203      	str	r2, [sp, #12]
 800bb7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb7e:	3402      	adds	r4, #2
 800bb80:	9305      	str	r3, [sp, #20]
 800bb82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc58 <_vfiprintf_r+0x22c>
 800bb86:	7821      	ldrb	r1, [r4, #0]
 800bb88:	2203      	movs	r2, #3
 800bb8a:	4650      	mov	r0, sl
 800bb8c:	f7f4 fb20 	bl	80001d0 <memchr>
 800bb90:	b138      	cbz	r0, 800bba2 <_vfiprintf_r+0x176>
 800bb92:	9b04      	ldr	r3, [sp, #16]
 800bb94:	eba0 000a 	sub.w	r0, r0, sl
 800bb98:	2240      	movs	r2, #64	@ 0x40
 800bb9a:	4082      	lsls	r2, r0
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	3401      	adds	r4, #1
 800bba0:	9304      	str	r3, [sp, #16]
 800bba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba6:	4829      	ldr	r0, [pc, #164]	@ (800bc4c <_vfiprintf_r+0x220>)
 800bba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbac:	2206      	movs	r2, #6
 800bbae:	f7f4 fb0f 	bl	80001d0 <memchr>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d03f      	beq.n	800bc36 <_vfiprintf_r+0x20a>
 800bbb6:	4b26      	ldr	r3, [pc, #152]	@ (800bc50 <_vfiprintf_r+0x224>)
 800bbb8:	bb1b      	cbnz	r3, 800bc02 <_vfiprintf_r+0x1d6>
 800bbba:	9b03      	ldr	r3, [sp, #12]
 800bbbc:	3307      	adds	r3, #7
 800bbbe:	f023 0307 	bic.w	r3, r3, #7
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	9303      	str	r3, [sp, #12]
 800bbc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc8:	443b      	add	r3, r7
 800bbca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbcc:	e76a      	b.n	800baa4 <_vfiprintf_r+0x78>
 800bbce:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	2001      	movs	r0, #1
 800bbd6:	e7a8      	b.n	800bb2a <_vfiprintf_r+0xfe>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	3401      	adds	r4, #1
 800bbdc:	9305      	str	r3, [sp, #20]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	f04f 0c0a 	mov.w	ip, #10
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbea:	3a30      	subs	r2, #48	@ 0x30
 800bbec:	2a09      	cmp	r2, #9
 800bbee:	d903      	bls.n	800bbf8 <_vfiprintf_r+0x1cc>
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d0c6      	beq.n	800bb82 <_vfiprintf_r+0x156>
 800bbf4:	9105      	str	r1, [sp, #20]
 800bbf6:	e7c4      	b.n	800bb82 <_vfiprintf_r+0x156>
 800bbf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e7f0      	b.n	800bbe4 <_vfiprintf_r+0x1b8>
 800bc02:	ab03      	add	r3, sp, #12
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	462a      	mov	r2, r5
 800bc08:	4b12      	ldr	r3, [pc, #72]	@ (800bc54 <_vfiprintf_r+0x228>)
 800bc0a:	a904      	add	r1, sp, #16
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7fb fe75 	bl	80078fc <_printf_float>
 800bc12:	4607      	mov	r7, r0
 800bc14:	1c78      	adds	r0, r7, #1
 800bc16:	d1d6      	bne.n	800bbc6 <_vfiprintf_r+0x19a>
 800bc18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc1a:	07d9      	lsls	r1, r3, #31
 800bc1c:	d405      	bmi.n	800bc2a <_vfiprintf_r+0x1fe>
 800bc1e:	89ab      	ldrh	r3, [r5, #12]
 800bc20:	059a      	lsls	r2, r3, #22
 800bc22:	d402      	bmi.n	800bc2a <_vfiprintf_r+0x1fe>
 800bc24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc26:	f7fc fee7 	bl	80089f8 <__retarget_lock_release_recursive>
 800bc2a:	89ab      	ldrh	r3, [r5, #12]
 800bc2c:	065b      	lsls	r3, r3, #25
 800bc2e:	f53f af1f 	bmi.w	800ba70 <_vfiprintf_r+0x44>
 800bc32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc34:	e71e      	b.n	800ba74 <_vfiprintf_r+0x48>
 800bc36:	ab03      	add	r3, sp, #12
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	462a      	mov	r2, r5
 800bc3c:	4b05      	ldr	r3, [pc, #20]	@ (800bc54 <_vfiprintf_r+0x228>)
 800bc3e:	a904      	add	r1, sp, #16
 800bc40:	4630      	mov	r0, r6
 800bc42:	f7fc f8f3 	bl	8007e2c <_printf_i>
 800bc46:	e7e4      	b.n	800bc12 <_vfiprintf_r+0x1e6>
 800bc48:	0800c012 	.word	0x0800c012
 800bc4c:	0800c01c 	.word	0x0800c01c
 800bc50:	080078fd 	.word	0x080078fd
 800bc54:	0800ba09 	.word	0x0800ba09
 800bc58:	0800c018 	.word	0x0800c018

0800bc5c <_raise_r>:
 800bc5c:	291f      	cmp	r1, #31
 800bc5e:	b538      	push	{r3, r4, r5, lr}
 800bc60:	4605      	mov	r5, r0
 800bc62:	460c      	mov	r4, r1
 800bc64:	d904      	bls.n	800bc70 <_raise_r+0x14>
 800bc66:	2316      	movs	r3, #22
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc72:	b112      	cbz	r2, 800bc7a <_raise_r+0x1e>
 800bc74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc78:	b94b      	cbnz	r3, 800bc8e <_raise_r+0x32>
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f000 f830 	bl	800bce0 <_getpid_r>
 800bc80:	4622      	mov	r2, r4
 800bc82:	4601      	mov	r1, r0
 800bc84:	4628      	mov	r0, r5
 800bc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc8a:	f000 b817 	b.w	800bcbc <_kill_r>
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d00a      	beq.n	800bca8 <_raise_r+0x4c>
 800bc92:	1c59      	adds	r1, r3, #1
 800bc94:	d103      	bne.n	800bc9e <_raise_r+0x42>
 800bc96:	2316      	movs	r3, #22
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	e7e7      	b.n	800bc6e <_raise_r+0x12>
 800bc9e:	2100      	movs	r1, #0
 800bca0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bca4:	4620      	mov	r0, r4
 800bca6:	4798      	blx	r3
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7e0      	b.n	800bc6e <_raise_r+0x12>

0800bcac <raise>:
 800bcac:	4b02      	ldr	r3, [pc, #8]	@ (800bcb8 <raise+0xc>)
 800bcae:	4601      	mov	r1, r0
 800bcb0:	6818      	ldr	r0, [r3, #0]
 800bcb2:	f7ff bfd3 	b.w	800bc5c <_raise_r>
 800bcb6:	bf00      	nop
 800bcb8:	2000004c 	.word	0x2000004c

0800bcbc <_kill_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d07      	ldr	r5, [pc, #28]	@ (800bcdc <_kill_r+0x20>)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	602b      	str	r3, [r5, #0]
 800bcca:	f7f6 f919 	bl	8001f00 <_kill>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	d102      	bne.n	800bcd8 <_kill_r+0x1c>
 800bcd2:	682b      	ldr	r3, [r5, #0]
 800bcd4:	b103      	cbz	r3, 800bcd8 <_kill_r+0x1c>
 800bcd6:	6023      	str	r3, [r4, #0]
 800bcd8:	bd38      	pop	{r3, r4, r5, pc}
 800bcda:	bf00      	nop
 800bcdc:	200008c4 	.word	0x200008c4

0800bce0 <_getpid_r>:
 800bce0:	f7f6 b906 	b.w	8001ef0 <_getpid>

0800bce4 <_init>:
 800bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce6:	bf00      	nop
 800bce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcea:	bc08      	pop	{r3}
 800bcec:	469e      	mov	lr, r3
 800bcee:	4770      	bx	lr

0800bcf0 <_fini>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	bf00      	nop
 800bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf6:	bc08      	pop	{r3}
 800bcf8:	469e      	mov	lr, r3
 800bcfa:	4770      	bx	lr
