
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001309c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b180  08013230  08013230  00014230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803e3b0  0803e3b0  0004021c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803e3b0  0803e3b0  0003f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803e3b8  0803e3b8  0004021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803e3b8  0803e3b8  0003f3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803e3bc  0803e3bc  0003f3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0803e3c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  20000220  0803e5dc  00040220  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  20001394  0803e5dc  00040394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d28d  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000459f  00000000  00000000  0005d4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00061a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f3  00000000  00000000  000632b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002997a  00000000  00000000  000645ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026388  00000000  00000000  0008df25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddd12  00000000  00000000  000b42ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191fbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079d8  00000000  00000000  00192004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  001999dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013214 	.word	0x08013214

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08013214 	.word	0x08013214

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a25      	ldr	r2, [pc, #148]	@ (80010e0 <MX_DMA_Init+0xa0>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6493      	str	r3, [r2, #72]	@ 0x48
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_DMA_Init+0xa0>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200c      	movs	r0, #12
 800107c:	f002 ffa3 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001080:	200c      	movs	r0, #12
 8001082:	f002 ffbc 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200d      	movs	r0, #13
 800108c:	f002 ff9b 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001090:	200d      	movs	r0, #13
 8001092:	f002 ffb4 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200e      	movs	r0, #14
 800109c:	f002 ff93 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f002 ffac 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200f      	movs	r0, #15
 80010ac:	f002 ff8b 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010b0:	200f      	movs	r0, #15
 80010b2:	f002 ffa4 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2044      	movs	r0, #68	@ 0x44
 80010bc:	f002 ff83 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80010c0:	2044      	movs	r0, #68	@ 0x44
 80010c2:	f002 ff9c 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2045      	movs	r0, #69	@ 0x45
 80010cc:	f002 ff7b 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80010d0:	2045      	movs	r0, #69	@ 0x45
 80010d2:	f002 ff94 	bl	8003ffe <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <MX_GPIO_Init+0xf8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a37      	ldr	r2, [pc, #220]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a31      	ldr	r2, [pc, #196]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <MX_GPIO_Init+0xf8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a2b      	ldr	r2, [pc, #172]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2103      	movs	r1, #3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f003 fb93 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2110      	movs	r1, #16
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f003 fb8d 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f241 0101 	movw	r1, #4097	@ 0x1001
 8001160:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 8001162:	f003 fb87 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin ASIC_RST_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|ASIC_RST_Pin;
 8001166:	2313      	movs	r3, #19
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f003 f9e6 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8001184:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4810      	ldr	r0, [pc, #64]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 800119e:	f003 f9d7 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pins : AFULL_Pin EMPTY_Pin */
  GPIO_InitStruct.Pin = AFULL_Pin|EMPTY_Pin;
 80011a2:	2306      	movs	r3, #6
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	480a      	ldr	r0, [pc, #40]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 80011b6:	f003 f9cb 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S3_Pin|S4_Pin;
 80011ba:	f640 4318 	movw	r3, #3096	@ 0xc18
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 80011d0:	f003 f9be 	bl	8004550 <HAL_GPIO_Init>

}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000400 	.word	0x48000400

080011e4 <main>:
uint8_t res = 0;
uint8_t open = 0;
SD_Config current_config;

int main(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af02      	add	r7, sp, #8
  HAL_Init();
 80011ea:	f002 fd78 	bl	8003cde <HAL_Init>
  SystemClock_Config();
 80011ee:	f000 f90b 	bl	8001408 <SystemClock_Config>
  MX_GPIO_Init();
 80011f2:	f7ff ff77 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f6:	f7ff ff23 	bl	8001040 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011fa:	f001 fbb1 	bl	8002960 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80011fe:	f000 ff6b 	bl	80020d8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001202:	f007 fb1b 	bl	800883c <MX_FATFS_Init>
  MX_SPI1_Init();
 8001206:	f000 ff29 	bl	800205c <MX_SPI1_Init>
  MX_TIM6_Init();
 800120a:	f001 fb31 	bl	8002870 <MX_TIM6_Init>
  MX_TIM2_Init();
 800120e:	f001 fae1 	bl	80027d4 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001212:	485e      	ldr	r0, [pc, #376]	@ (800138c <main+0x1a8>)
 8001214:	f005 fad6 	bl	80067c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001218:	485d      	ldr	r0, [pc, #372]	@ (8001390 <main+0x1ac>)
 800121a:	f005 fad3 	bl	80067c4 <HAL_TIM_Base_Start_IT>
  if(SD_Init() == SD_OK)
 800121e:	f000 f9e1 	bl	80015e4 <SD_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <main+0xf4>
  {
	res=f_mount(&fs,"0:",1);
 8001228:	2201      	movs	r2, #1
 800122a:	495a      	ldr	r1, [pc, #360]	@ (8001394 <main+0x1b0>)
 800122c:	485a      	ldr	r0, [pc, #360]	@ (8001398 <main+0x1b4>)
 800122e:	f00b f8bd 	bl	800c3ac <f_mount>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b59      	ldr	r3, [pc, #356]	@ (800139c <main+0x1b8>)
 8001238:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 800123a:	4b58      	ldr	r3, [pc, #352]	@ (800139c <main+0x1b8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d024      	beq.n	800128c <main+0xa8>
	{
		res = f_mkfs("", FM_FAT32, 0, work, sizeof(work));
 8001242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4b55      	ldr	r3, [pc, #340]	@ (80013a0 <main+0x1bc>)
 800124a:	2200      	movs	r2, #0
 800124c:	2102      	movs	r1, #2
 800124e:	4855      	ldr	r0, [pc, #340]	@ (80013a4 <main+0x1c0>)
 8001250:	f00c f9d8 	bl	800d604 <f_mkfs>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b50      	ldr	r3, [pc, #320]	@ (800139c <main+0x1b8>)
 800125a:	701a      	strb	r2, [r3, #0]
		res = f_mount(NULL,"0:",1);
 800125c:	2201      	movs	r2, #1
 800125e:	494d      	ldr	r1, [pc, #308]	@ (8001394 <main+0x1b0>)
 8001260:	2000      	movs	r0, #0
 8001262:	f00b f8a3 	bl	800c3ac <f_mount>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b4c      	ldr	r3, [pc, #304]	@ (800139c <main+0x1b8>)
 800126c:	701a      	strb	r2, [r3, #0]
		res = f_mount(&fs,"0:",1);
 800126e:	2201      	movs	r2, #1
 8001270:	4948      	ldr	r1, [pc, #288]	@ (8001394 <main+0x1b0>)
 8001272:	4849      	ldr	r0, [pc, #292]	@ (8001398 <main+0x1b4>)
 8001274:	f00b f89a 	bl	800c3ac <f_mount>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b47      	ldr	r3, [pc, #284]	@ (800139c <main+0x1b8>)
 800127e:	701a      	strb	r2, [r3, #0]
		if(res != FR_OK)
 8001280:	4b46      	ldr	r3, [pc, #280]	@ (800139c <main+0x1b8>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <main+0xa8>
			Error_Handler();
 8001288:	f000 f90d 	bl	80014a6 <Error_Handler>
	}
	if(file_exists(CONFIG_FILE) != FR_OK)
 800128c:	4b46      	ldr	r3, [pc, #280]	@ (80013a8 <main+0x1c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fc62 	bl	8001b5a <file_exists>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <main+0xbc>
		create_default_config();
 800129c:	f000 fe4e 	bl	8001f3c <create_default_config>
	int log_num = get_next_log_number();
 80012a0:	f000 fc74 	bl	8001b8c <get_next_log_number>
 80012a4:	60f8      	str	r0, [r7, #12]
	snprintf(current_log_file, sizeof(current_log_file), "%s%05d.txt", LOG_PREFIX, log_num);
 80012a6:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <main+0x1c8>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4613      	mov	r3, r2
 80012b0:	4a3f      	ldr	r2, [pc, #252]	@ (80013b0 <main+0x1cc>)
 80012b2:	2114      	movs	r1, #20
 80012b4:	483f      	ldr	r0, [pc, #252]	@ (80013b4 <main+0x1d0>)
 80012b6:	f00e fc51 	bl	800fb5c <sniprintf>
	f_open(&fil, current_log_file, FA_CREATE_NEW | FA_WRITE);
 80012ba:	2206      	movs	r2, #6
 80012bc:	493d      	ldr	r1, [pc, #244]	@ (80013b4 <main+0x1d0>)
 80012be:	483e      	ldr	r0, [pc, #248]	@ (80013b8 <main+0x1d4>)
 80012c0:	f00b f8ba 	bl	800c438 <f_open>
	current_config = load_and_apply_config();
 80012c4:	4c3d      	ldr	r4, [pc, #244]	@ (80013bc <main+0x1d8>)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fe63 	bl	8001f94 <load_and_apply_config>
 80012ce:	4623      	mov	r3, r4
 80012d0:	463a      	mov	r2, r7
 80012d2:	6810      	ldr	r0, [r2, #0]
 80012d4:	6851      	ldr	r1, [r2, #4]
 80012d6:	c303      	stmia	r3!, {r0, r1}
  }
  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 80012d8:	2280      	movs	r2, #128	@ 0x80
 80012da:	4939      	ldr	r1, [pc, #228]	@ (80013c0 <main+0x1dc>)
 80012dc:	4839      	ldr	r0, [pc, #228]	@ (80013c4 <main+0x1e0>)
 80012de:	f005 ff9f 	bl	8007220 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80012e2:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <main+0x1e0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b36      	ldr	r3, [pc, #216]	@ (80013c4 <main+0x1e0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0210 	orr.w	r2, r2, #16
 80012f0:	601a      	str	r2, [r3, #0]
  ON_G();
 80012f2:	2201      	movs	r2, #1
 80012f4:	2102      	movs	r1, #2
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fa:	f003 fabb 	bl	8004874 <HAL_GPIO_WritePin>

  while (1)
  {
	  if(data_ready == 0)
 80012fe:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <main+0x1e4>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <main+0x128>
	  	  maintain_processing_buffer();
 8001308:	f002 fbec 	bl	8003ae4 <maintain_processing_buffer>
	  if(data_ready)
 800130c:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <main+0x1e4>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d021      	beq.n	800135a <main+0x176>
	  {
		  while(!txstate)
 8001316:	e019      	b.n	800134c <main+0x168>
		  {
			  CMD_Status state1 = CMD_Judge();
 8001318:	f001 fd10 	bl	8002d3c <CMD_Judge>
 800131c:	4603      	mov	r3, r0
 800131e:	72fb      	strb	r3, [r7, #11]
			  if(state1 == CMD_OK)
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10b      	bne.n	800133e <main+0x15a>
			  {
				  CMD_Status state2 = CMD_Execute();
 8001326:	f001 fdfd 	bl	8002f24 <CMD_Execute>
 800132a:	4603      	mov	r3, r0
 800132c:	72bb      	strb	r3, [r7, #10]
				  if(state2 != CMD_OK)
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <main+0x168>
					  CMD_HANDLE_ERROR(state2);
 8001334:	7abb      	ldrb	r3, [r7, #10]
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fc34 	bl	8003ba4 <CMD_HANDLE_ERROR>
 800133c:	e006      	b.n	800134c <main+0x168>
			  }
			  else if(state1 == CMD_END)
 800133e:	7afb      	ldrb	r3, [r7, #11]
 8001340:	2b06      	cmp	r3, #6
 8001342:	d009      	beq.n	8001358 <main+0x174>
				  break;
			  else
				  CMD_HANDLE_ERROR(state1);
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fc2c 	bl	8003ba4 <CMD_HANDLE_ERROR>
		  while(!txstate)
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <main+0x1e8>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0e0      	beq.n	8001318 <main+0x134>
 8001356:	e000      	b.n	800135a <main+0x176>
				  break;
 8001358:	bf00      	nop
		  }
	  }
	  if(sampling_ready == 1)
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <main+0x1ec>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d1cc      	bne.n	80012fe <main+0x11a>
	  {
		  if(ReadResult() == HAL_OK)
 8001364:	f001 fc36 	bl	8002bd4 <ReadResult>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1c7      	bne.n	80012fe <main+0x11a>
		  {
			  Send_Data();
 800136e:	f002 fb05 	bl	800397c <Send_Data>
			  f_write(&fil, datatx, transmitlength, &bw);
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <main+0x1f0>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <main+0x1f4>)
 800137a:	4918      	ldr	r1, [pc, #96]	@ (80013dc <main+0x1f8>)
 800137c:	480e      	ldr	r0, [pc, #56]	@ (80013b8 <main+0x1d4>)
 800137e:	f00b fcad 	bl	800ccdc <f_write>
			  f_sync(&fil);
 8001382:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <main+0x1d4>)
 8001384:	f00b fe5e 	bl	800d044 <f_sync>
	  if(data_ready == 0)
 8001388:	e7b9      	b.n	80012fe <main+0x11a>
 800138a:	bf00      	nop
 800138c:	20000be4 	.word	0x20000be4
 8001390:	20000c30 	.word	0x20000c30
 8001394:	08013230 	.word	0x08013230
 8001398:	20000540 	.word	0x20000540
 800139c:	200009d4 	.word	0x200009d4
 80013a0:	2000023c 	.word	0x2000023c
 80013a4:	08013234 	.word	0x08013234
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004
 80013b0:	08013238 	.word	0x08013238
 80013b4:	200009e4 	.word	0x200009e4
 80013b8:	20000778 	.word	0x20000778
 80013bc:	200009d8 	.word	0x200009d8
 80013c0:	2000043c 	.word	0x2000043c
 80013c4:	20000c7c 	.word	0x20000c7c
 80013c8:	2000053e 	.word	0x2000053e
 80013cc:	200011da 	.word	0x200011da
 80013d0:	2000002e 	.word	0x2000002e
 80013d4:	20000034 	.word	0x20000034
 80013d8:	200009d0 	.word	0x200009d0
 80013dc:	200011e0 	.word	0x200011e0

080013e0 <_write>:
  }
}


int _write(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	2364      	movs	r3, #100	@ 0x64
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	4803      	ldr	r0, [pc, #12]	@ (8001404 <_write+0x24>)
 80013f6:	f005 fe0d 	bl	8007014 <HAL_UART_Transmit>
    return len;
 80013fa:	687b      	ldr	r3, [r7, #4]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000c7c 	.word	0x20000c7c

08001408 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b096      	sub	sp, #88	@ 0x58
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2244      	movs	r2, #68	@ 0x44
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f00e fc55 	bl	800fcc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800142a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800142e:	f003 fa61 	bl	80048f4 <HAL_PWREx_ControlVoltageScaling>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001438:	f000 f835 	bl	80014a6 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001440:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144a:	2303      	movs	r3, #3
 800144c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001452:	2314      	movs	r3, #20
 8001454:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001456:	2307      	movs	r3, #7
 8001458:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fa9a 	bl	80049a0 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001472:	f000 f818 	bl	80014a6 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2303      	movs	r3, #3
 800147c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	2104      	movs	r1, #4
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fe9a 	bl	80051c8 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800149a:	f000 f804 	bl	80014a6 <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3758      	adds	r7, #88	@ 0x58
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <Error_Handler>:

void Error_Handler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014aa:	b672      	cpsid	i
}
 80014ac:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  SHINE_R();
 80014ae:	f000 f806 	bl	80014be <SHINE_R>
	  HAL_Delay(1000);
 80014b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b6:	f002 fc87 	bl	8003dc8 <HAL_Delay>
	  SHINE_R();
 80014ba:	bf00      	nop
 80014bc:	e7f7      	b.n	80014ae <Error_Handler+0x8>

080014be <SHINE_R>:
const char *LOG_PREFIX = "log";
char current_log_file[20];
static int cached_max_log_num = -1;

void SHINE_R(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80014c2:	2101      	movs	r1, #1
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c8:	f003 f9ec 	bl	80048a4 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80014cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014d0:	f002 fc7a 	bl	8003dc8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80014d4:	2101      	movs	r1, #1
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f003 f9e3 	bl	80048a4 <HAL_GPIO_TogglePin>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <SPI_TransmitReceive>:
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}

uint8_t SPI_TransmitReceive(uint8_t data) //发送接收函数封装
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1 ,100);
 80014ee:	f107 020f 	add.w	r2, r7, #15
 80014f2:	1df9      	adds	r1, r7, #7
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	4804      	ldr	r0, [pc, #16]	@ (800150c <SPI_TransmitReceive+0x28>)
 80014fc:	f004 fc67 	bl	8005dce <HAL_SPI_TransmitReceive>
    return rx_data;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000a5c 	.word	0x20000a5c

08001510 <SD_PowerOnSeq>:

void SD_PowerOnSeq(void) //80个时钟周期
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <SD_PowerOnSeq+0x34>)
 800151e:	f003 f9a9 	bl	8004874 <HAL_GPIO_WritePin>
    for(uint8_t i=0; i<10; i++)
 8001522:	2300      	movs	r3, #0
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	e005      	b.n	8001534 <SD_PowerOnSeq+0x24>
    {
        SPI_TransmitReceive(0xFF);
 8001528:	20ff      	movs	r0, #255	@ 0xff
 800152a:	f7ff ffdb 	bl	80014e4 <SPI_TransmitReceive>
    for(uint8_t i=0; i<10; i++)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b09      	cmp	r3, #9
 8001538:	d9f6      	bls.n	8001528 <SD_PowerOnSeq+0x18>
    }
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	48000400 	.word	0x48000400

08001548 <SD_SendCmd>:

uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)  //发送cmd命令，arg参数及crc校准
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
	uint8_t retry = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
	uint8_t response;
	do{
		retry=SPI_TransmitReceive(0xFF);
 800155c:	20ff      	movs	r0, #255	@ 0xff
 800155e:	f7ff ffc1 	bl	80014e4 <SPI_TransmitReceive>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
	}while(retry!=0xFF);  //这段如果不加，发送CMD8返回值会错误
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	2bff      	cmp	r3, #255	@ 0xff
 800156a:	d1f7      	bne.n	800155c <SD_SendCmd+0x14>

    SPI_TransmitReceive(0x40 | cmd);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ffb5 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 24) & 0xFF);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	0e1b      	lsrs	r3, r3, #24
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ffaf 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 16) & 0xFF);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ffa9 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 8)  & 0xFF);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ffa3 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive(arg & 0xFF);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff9e 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive(crc | 0x01);
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff97 	bl	80014e4 <SPI_TransmitReceive>
    retry = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]

	do {
	response = SPI_TransmitReceive(0xFF);
 80015ba:	20ff      	movs	r0, #255	@ 0xff
 80015bc:	f7ff ff92 	bl	80014e4 <SPI_TransmitReceive>
 80015c0:	4603      	mov	r3, r0
 80015c2:	73bb      	strb	r3, [r7, #14]
	retry++;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3301      	adds	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
	} while ((response & 0x80) && (retry < 0xFF));
 80015ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da02      	bge.n	80015d8 <SD_SendCmd+0x90>
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2bff      	cmp	r3, #255	@ 0xff
 80015d6:	d1f0      	bne.n	80015ba <SD_SendCmd+0x72>
	return response;
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <SD_Init>:

SD_Status SD_Init(void) //SD卡初始化
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
	uint8_t r1;
	uint8_t buff[6] = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	809a      	strh	r2, [r3, #4]
	uint16_t retry;
	uint8_t i;

	SD_PowerOnSeq();
 80015f2:	f7ff ff8d 	bl	8001510 <SD_PowerOnSeq>
	SD_CS_LOW();
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015fc:	487a      	ldr	r0, [pc, #488]	@ (80017e8 <SD_Init+0x204>)
 80015fe:	f003 f939 	bl	8004874 <HAL_GPIO_WritePin>

	retry = 1000; // 设置超时值
 8001602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001606:	81fb      	strh	r3, [r7, #14]
	do {
	    r1 = SD_SendCmd(CMD0, 0, 0x95);
 8001608:	2295      	movs	r2, #149	@ 0x95
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff9b 	bl	8001548 <SD_SendCmd>
 8001612:	4603      	mov	r3, r0
 8001614:	733b      	strb	r3, [r7, #12]
	    retry--;
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	3b01      	subs	r3, #1
 800161a:	81fb      	strh	r3, [r7, #14]
	} while (r1 != 0x01 && retry > 0);
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d002      	beq.n	8001628 <SD_Init+0x44>
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ef      	bne.n	8001608 <SD_Init+0x24>

	if (retry == 0)
 8001628:	89fb      	ldrh	r3, [r7, #14]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d107      	bne.n	800163e <SD_Init+0x5a>
	{
	    SD_CS_HIGH();
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001634:	486c      	ldr	r0, [pc, #432]	@ (80017e8 <SD_Init+0x204>)
 8001636:	f003 f91d 	bl	8004874 <HAL_GPIO_WritePin>
	    return SD_ERROR; // 超时返回错误
 800163a:	2301      	movs	r3, #1
 800163c:	e0d0      	b.n	80017e0 <SD_Init+0x1fc>
	}

	SD_TYPE=0;
 800163e:	4b6b      	ldr	r3, [pc, #428]	@ (80017ec <SD_Init+0x208>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
	r1 = SD_SendCmd(CMD8, 0x1AA, 0x87);
 8001644:	2287      	movs	r2, #135	@ 0x87
 8001646:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800164a:	2008      	movs	r0, #8
 800164c:	f7ff ff7c 	bl	8001548 <SD_SendCmd>
 8001650:	4603      	mov	r3, r0
 8001652:	733b      	strb	r3, [r7, #12]
	if(r1==0x01)
 8001654:	7b3b      	ldrb	r3, [r7, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d161      	bne.n	800171e <SD_Init+0x13a>
	{
		for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0xFF);
 800165a:	2300      	movs	r3, #0
 800165c:	737b      	strb	r3, [r7, #13]
 800165e:	e00d      	b.n	800167c <SD_Init+0x98>
 8001660:	7b7c      	ldrb	r4, [r7, #13]
 8001662:	20ff      	movs	r0, #255	@ 0xff
 8001664:	f7ff ff3e 	bl	80014e4 <SPI_TransmitReceive>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	f104 0310 	add.w	r3, r4, #16
 8001670:	443b      	add	r3, r7
 8001672:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001676:	7b7b      	ldrb	r3, [r7, #13]
 8001678:	3301      	adds	r3, #1
 800167a:	737b      	strb	r3, [r7, #13]
 800167c:	7b7b      	ldrb	r3, [r7, #13]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d9ee      	bls.n	8001660 <SD_Init+0x7c>
		if(buff[2]==0X01&&buff[3]==0XAA)
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 8098 	bne.w	80017ba <SD_Init+0x1d6>
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2baa      	cmp	r3, #170	@ 0xaa
 800168e:	f040 8094 	bne.w	80017ba <SD_Init+0x1d6>
		{
			retry=0XFFFE;
 8001692:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001696:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2037      	movs	r0, #55	@ 0x37
 800169e:	f7ff ff53 	bl	8001548 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0x40000000,0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016a8:	2029      	movs	r0, #41	@ 0x29
 80016aa:	f7ff ff4d 	bl	8001548 <SD_SendCmd>
 80016ae:	4603      	mov	r3, r0
 80016b0:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 80016b2:	7b3b      	ldrb	r3, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <SD_Init+0xde>
 80016b8:	89fb      	ldrh	r3, [r7, #14]
 80016ba:	1e5a      	subs	r2, r3, #1
 80016bc:	81fa      	strh	r2, [r7, #14]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ea      	bne.n	8001698 <SD_Init+0xb4>
			r1=SD_SendCmd(CMD58,0,0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	203a      	movs	r0, #58	@ 0x3a
 80016c8:	f7ff ff3e 	bl	8001548 <SD_SendCmd>
 80016cc:	4603      	mov	r3, r0
 80016ce:	733b      	strb	r3, [r7, #12]
			if(retry&&r1==0)
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d071      	beq.n	80017ba <SD_Init+0x1d6>
 80016d6:	7b3b      	ldrb	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d16e      	bne.n	80017ba <SD_Init+0x1d6>
			{
				for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0XFF);
 80016dc:	2300      	movs	r3, #0
 80016de:	737b      	strb	r3, [r7, #13]
 80016e0:	e00d      	b.n	80016fe <SD_Init+0x11a>
 80016e2:	7b7c      	ldrb	r4, [r7, #13]
 80016e4:	20ff      	movs	r0, #255	@ 0xff
 80016e6:	f7ff fefd 	bl	80014e4 <SPI_TransmitReceive>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	f104 0310 	add.w	r3, r4, #16
 80016f2:	443b      	add	r3, r7
 80016f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	3301      	adds	r3, #1
 80016fc:	737b      	strb	r3, [r7, #13]
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d9ee      	bls.n	80016e2 <SD_Init+0xfe>
				if(buff[0]&0x40){
 8001704:	793b      	ldrb	r3, [r7, #4]
 8001706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <SD_Init+0x132>
					SD_TYPE=V2HC;
 800170e:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <SD_Init+0x208>)
 8001710:	2206      	movs	r2, #6
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e051      	b.n	80017ba <SD_Init+0x1d6>
				}else {
					SD_TYPE=V2;
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <SD_Init+0x208>)
 8001718:	2204      	movs	r2, #4
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e04d      	b.n	80017ba <SD_Init+0x1d6>
			}
		}
	}
	else
	{
		SD_SendCmd(CMD55,0,0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2037      	movs	r0, #55	@ 0x37
 8001724:	f7ff ff10 	bl	8001548 <SD_SendCmd>
		r1=SD_SendCmd(ACMD41,0,0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2029      	movs	r0, #41	@ 0x29
 800172e:	f7ff ff0b 	bl	8001548 <SD_SendCmd>
 8001732:	4603      	mov	r3, r0
 8001734:	733b      	strb	r3, [r7, #12]
		if(r1<=1)
 8001736:	7b3b      	ldrb	r3, [r7, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d81a      	bhi.n	8001772 <SD_Init+0x18e>
		{
			SD_TYPE=V1;
 800173c:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <SD_Init+0x208>)
 800173e:	2202      	movs	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 8001742:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001746:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2037      	movs	r0, #55	@ 0x37
 800174e:	f7ff fefb 	bl	8001548 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0,0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2029      	movs	r0, #41	@ 0x29
 8001758:	f7ff fef6 	bl	8001548 <SD_SendCmd>
 800175c:	4603      	mov	r3, r0
 800175e:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 8001760:	7b3b      	ldrb	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01a      	beq.n	800179c <SD_Init+0x1b8>
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	81fa      	strh	r2, [r7, #14]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1eb      	bne.n	8001748 <SD_Init+0x164>
 8001770:	e014      	b.n	800179c <SD_Init+0x1b8>
		}else
		{
			SD_TYPE=MMC;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <SD_Init+0x208>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 8001778:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800177c:	81fb      	strh	r3, [r7, #14]
			do
			{
				r1=SD_SendCmd(CMD1,0,0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff fee0 	bl	8001548 <SD_SendCmd>
 8001788:	4603      	mov	r3, r0
 800178a:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 800178c:	7b3b      	ldrb	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <SD_Init+0x1b8>
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	81fa      	strh	r2, [r7, #14]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <SD_Init+0x19a>
		}
		if(retry==0||SD_SendCmd(CMD16,512,0)!=0)SD_TYPE=ERR;
 800179c:	89fb      	ldrh	r3, [r7, #14]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <SD_Init+0x1d0>
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a8:	2010      	movs	r0, #16
 80017aa:	f7ff fecd 	bl	8001548 <SD_SendCmd>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <SD_Init+0x1d6>
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <SD_Init+0x208>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
	}
	SD_CS_HIGH();
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017c0:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <SD_Init+0x204>)
 80017c2:	f003 f857 	bl	8004874 <HAL_GPIO_WritePin>
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <SD_Init+0x20c>)
 80017c8:	2208      	movs	r2, #8
 80017ca:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 80017cc:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <SD_Init+0x20c>)
 80017ce:	f004 fa5b 	bl	8005c88 <HAL_SPI_Init>

    if(SD_TYPE != ERR)
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <SD_Init+0x208>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SD_Init+0x1fa>
    	return SD_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <SD_Init+0x1fc>
    else
    	return SD_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	48000400 	.word	0x48000400
 80017ec:	200009e0 	.word	0x200009e0
 80017f0:	20000a5c 	.word	0x20000a5c

080017f4 <SD_ReceiveData>:

uint8_t SD_ReceiveData(uint8_t *data, uint16_t len) //从SD卡读取指定长度的数据块，len为512时为单块大小
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
   uint8_t r1;
   SD_CS_LOW();
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001806:	4817      	ldr	r0, [pc, #92]	@ (8001864 <SD_ReceiveData+0x70>)
 8001808:	f003 f834 	bl	8004874 <HAL_GPIO_WritePin>
   do
   {
      r1 = SPI_TransmitReceive(0xFF);
 800180c:	20ff      	movs	r0, #255	@ 0xff
 800180e:	f7ff fe69 	bl	80014e4 <SPI_TransmitReceive>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(100);
 8001816:	2064      	movs	r0, #100	@ 0x64
 8001818:	f002 fad6 	bl	8003dc8 <HAL_Delay>
   }while(r1 != 0xFE); // sd卡spi模式单块读取的起始令牌是0xFE
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001820:	d1f4      	bne.n	800180c <SD_ReceiveData+0x18>
  while(len--)
 8001822:	e009      	b.n	8001838 <SD_ReceiveData+0x44>
  {
   *data = SPI_TransmitReceive(0xFF);
 8001824:	20ff      	movs	r0, #255	@ 0xff
 8001826:	f7ff fe5d 	bl	80014e4 <SPI_TransmitReceive>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	701a      	strb	r2, [r3, #0]
   data++;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	607b      	str	r3, [r7, #4]
  while(len--)
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	1e5a      	subs	r2, r3, #1
 800183c:	807a      	strh	r2, [r7, #2]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <SD_ReceiveData+0x30>
  }
  SPI_TransmitReceive(0xFF);
 8001842:	20ff      	movs	r0, #255	@ 0xff
 8001844:	f7ff fe4e 	bl	80014e4 <SPI_TransmitReceive>
  SPI_TransmitReceive(0xFF);
 8001848:	20ff      	movs	r0, #255	@ 0xff
 800184a:	f7ff fe4b 	bl	80014e4 <SPI_TransmitReceive>
  SD_CS_HIGH();
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001854:	4803      	ldr	r0, [pc, #12]	@ (8001864 <SD_ReceiveData+0x70>)
 8001856:	f003 f80d 	bl	8004874 <HAL_GPIO_WritePin>
  return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	48000400 	.word	0x48000400

08001868 <SD_SendBlock>:

uint8_t SD_SendBlock(uint8_t*buf,uint8_t cmd) //写入扇区内容，512字节
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint8_t r1;
	do{
		r1=SPI_TransmitReceive(0xFF);
 8001874:	20ff      	movs	r0, #255	@ 0xff
 8001876:	f7ff fe35 	bl	80014e4 <SPI_TransmitReceive>
 800187a:	4603      	mov	r3, r0
 800187c:	737b      	strb	r3, [r7, #13]
	}while(r1!=0xFF);
 800187e:	7b7b      	ldrb	r3, [r7, #13]
 8001880:	2bff      	cmp	r3, #255	@ 0xff
 8001882:	d1f7      	bne.n	8001874 <SD_SendBlock+0xc>

	SPI_TransmitReceive(cmd);
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fe2c 	bl	80014e4 <SPI_TransmitReceive>
	if(cmd!=0xFD) //0xFD为多块写入停止令牌
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	2bfd      	cmp	r3, #253	@ 0xfd
 8001890:	d022      	beq.n	80018d8 <SD_SendBlock+0x70>
	{
		for(i = 0;i < 512;i++)
 8001892:	2300      	movs	r3, #0
 8001894:	81fb      	strh	r3, [r7, #14]
 8001896:	e009      	b.n	80018ac <SD_SendBlock+0x44>
			SPI_TransmitReceive(buf[i]);
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe1f 	bl	80014e4 <SPI_TransmitReceive>
		for(i = 0;i < 512;i++)
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	3301      	adds	r3, #1
 80018aa:	81fb      	strh	r3, [r7, #14]
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018b2:	d3f1      	bcc.n	8001898 <SD_SendBlock+0x30>
		SPI_TransmitReceive(0xFF);
 80018b4:	20ff      	movs	r0, #255	@ 0xff
 80018b6:	f7ff fe15 	bl	80014e4 <SPI_TransmitReceive>
		SPI_TransmitReceive(0xFF);
 80018ba:	20ff      	movs	r0, #255	@ 0xff
 80018bc:	f7ff fe12 	bl	80014e4 <SPI_TransmitReceive>
		i=SPI_TransmitReceive(0xFF);
 80018c0:	20ff      	movs	r0, #255	@ 0xff
 80018c2:	f7ff fe0f 	bl	80014e4 <SPI_TransmitReceive>
 80018c6:	4603      	mov	r3, r0
 80018c8:	81fb      	strh	r3, [r7, #14]
		if((i&0x1F)!=0x05) //低5位为状态码，高3位为保留，应舍弃，0x05表示接收正确
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d001      	beq.n	80018d8 <SD_SendBlock+0x70>
			return 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	e000      	b.n	80018da <SD_SendBlock+0x72>
	}
    return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <SD_ReadDisk>:

uint8_t SD_ReadDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //读SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f8:	4824      	ldr	r0, [pc, #144]	@ (800198c <SD_ReadDisk+0xa8>)
 80018fa:	f002 ffbb 	bl	8004874 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <SD_ReadDisk+0xac>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b06      	cmp	r3, #6
 8001904:	d002      	beq.n	800190c <SD_ReadDisk+0x28>
		sector *= 512;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d111      	bne.n	8001936 <SD_ReadDisk+0x52>
	{
		r1=SD_SendCmd(CMD17,sector,0);
 8001912:	2200      	movs	r2, #0
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	2011      	movs	r0, #17
 8001918:	f7ff fe16 	bl	8001548 <SD_SendCmd>
 800191c:	4603      	mov	r3, r0
 800191e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d127      	bne.n	8001976 <SD_ReadDisk+0x92>
			r1=SD_ReceiveData(buf,512);
 8001926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ff62 	bl	80017f4 <SD_ReceiveData>
 8001930:	4603      	mov	r3, r0
 8001932:	75fb      	strb	r3, [r7, #23]
 8001934:	e01f      	b.n	8001976 <SD_ReadDisk+0x92>
	}
	else
	{
		r1=SD_SendCmd(CMD18,sector,0);
 8001936:	2200      	movs	r2, #0
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	2012      	movs	r0, #18
 800193c:	f7ff fe04 	bl	8001548 <SD_SendCmd>
 8001940:	4603      	mov	r3, r0
 8001942:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_ReceiveData(buf,512);
 8001944:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff ff53 	bl	80017f4 <SD_ReceiveData>
 800194e:	4603      	mov	r3, r0
 8001950:	75fb      	strb	r3, [r7, #23]
			buf+=512;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001958:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	3b01      	subs	r3, #1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <SD_ReadDisk+0x88>
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0eb      	beq.n	8001944 <SD_ReadDisk+0x60>
		SD_SendCmd(CMD12,0,0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	200c      	movs	r0, #12
 8001972:	f7ff fde9 	bl	8001548 <SD_SendCmd>
	}
	SD_CS_HIGH();
 8001976:	2201      	movs	r2, #1
 8001978:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800197c:	4803      	ldr	r0, [pc, #12]	@ (800198c <SD_ReadDisk+0xa8>)
 800197e:	f002 ff79 	bl	8004874 <HAL_GPIO_WritePin>
	return r1;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	48000400 	.word	0x48000400
 8001990:	200009e0 	.word	0x200009e0

08001994 <SD_WriteDisk>:

uint8_t SD_WriteDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //写SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019a8:	482d      	ldr	r0, [pc, #180]	@ (8001a60 <SD_WriteDisk+0xcc>)
 80019aa:	f002 ff63 	bl	8004874 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 80019ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <SD_WriteDisk+0xd0>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d002      	beq.n	80019bc <SD_WriteDisk+0x28>
		sector *= 512;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d110      	bne.n	80019e4 <SD_WriteDisk+0x50>
	{
		r1=SD_SendCmd(CMD24,sector,0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	2018      	movs	r0, #24
 80019c8:	f7ff fdbe 	bl	8001548 <SD_SendCmd>
 80019cc:	4603      	mov	r3, r0
 80019ce:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d138      	bne.n	8001a48 <SD_WriteDisk+0xb4>
		{
			r1=SD_SendBlock(buf,0xFE);
 80019d6:	21fe      	movs	r1, #254	@ 0xfe
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff ff45 	bl	8001868 <SD_SendBlock>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
 80019e2:	e031      	b.n	8001a48 <SD_WriteDisk+0xb4>
		}
	}
	else
	{
		if(SD_TYPE!=MMC)
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <SD_WriteDisk+0xd0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d00a      	beq.n	8001a02 <SD_WriteDisk+0x6e>
		{
			SD_SendCmd(CMD55,0,0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2037      	movs	r0, #55	@ 0x37
 80019f2:	f7ff fda9 	bl	8001548 <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	2017      	movs	r0, #23
 80019fe:	f7ff fda3 	bl	8001548 <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	2019      	movs	r0, #25
 8001a08:	f7ff fd9e 	bl	8001548 <SD_SendCmd>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <SD_WriteDisk+0xb4>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); //0xFC为多块写入起始令牌
 8001a16:	21fc      	movs	r1, #252	@ 0xfc
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ff25 	bl	8001868 <SD_SendBlock>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	75fb      	strb	r3, [r7, #23]
				buf+=512;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001a28:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <SD_WriteDisk+0xa8>
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ec      	beq.n	8001a16 <SD_WriteDisk+0x82>
			r1=SD_SendBlock(0,0xFD);
 8001a3c:	21fd      	movs	r1, #253	@ 0xfd
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff ff12 	bl	8001868 <SD_SendBlock>
 8001a44:	4603      	mov	r3, r0
 8001a46:	75fb      	strb	r3, [r7, #23]
		}
	}
	SD_CS_HIGH();
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a4e:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <SD_WriteDisk+0xcc>)
 8001a50:	f002 ff10 	bl	8004874 <HAL_GPIO_WritePin>
	return r1;
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	48000400 	.word	0x48000400
 8001a64:	200009e0 	.word	0x200009e0

08001a68 <SD_GETCSD>:

uint8_t SD_GETCSD(uint8_t *csd_data) //获取CSD数据
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	SD_CS_LOW();
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a76:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <SD_GETCSD+0x50>)
 8001a78:	f002 fefc 	bl	8004874 <HAL_GPIO_WritePin>
	uint8_t r1;
    if(SD_SendCmd(CMD9,0,0) == 0)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2009      	movs	r0, #9
 8001a82:	f7ff fd61 	bl	8001548 <SD_SendCmd>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d105      	bne.n	8001a98 <SD_GETCSD+0x30>
    {
    	r1=SD_ReceiveData(csd_data, 16);
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff feb0 	bl	80017f4 <SD_ReceiveData>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
    }
	SD_CS_HIGH();
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a9e:	4806      	ldr	r0, [pc, #24]	@ (8001ab8 <SD_GETCSD+0x50>)
 8001aa0:	f002 fee8 	bl	8004874 <HAL_GPIO_WritePin>
	if(r1)
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SD_GETCSD+0x46>
		return 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <SD_GETCSD+0x48>
	else
		return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	48000400 	.word	0x48000400

08001abc <SD_GetSectorCount>:

uint32_t SD_GetSectorCount(void) //获取SD卡总扇区数
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
    uint8_t csd[16];
    uint32_t Capacity;
    uint8_t n;
	uint16_t csize;
    if(SD_GETCSD(csd)!=0)
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ffcf 	bl	8001a68 <SD_GETCSD>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SD_GetSectorCount+0x18>
    	return 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e03e      	b.n	8001b52 <SD_GetSectorCount+0x96>
    if((csd[0]&0xC0)==0x40)
 8001ad4:	783b      	ldrb	r3, [r7, #0]
 8001ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001ada:	2b40      	cmp	r3, #64	@ 0x40
 8001adc:	d10c      	bne.n	8001af8 <SD_GetSectorCount+0x3c>
    {
		csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
 8001ade:	7a7b      	ldrb	r3, [r7, #9]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	7a3b      	ldrb	r3, [r7, #8]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	823b      	strh	r3, [r7, #16]
		Capacity = (uint32_t)csize << 10;
 8001af0:	8a3b      	ldrh	r3, [r7, #16]
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e02b      	b.n	8001b50 <SD_GetSectorCount+0x94>
    }
    else
    {
		n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001af8:	797b      	ldrb	r3, [r7, #5]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	7abb      	ldrb	r3, [r7, #10]
 8001b02:	09db      	lsrs	r3, r3, #7
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	7a7b      	ldrb	r3, [r7, #9]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f003 0306 	and.w	r3, r3, #6
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	74fb      	strb	r3, [r7, #19]
		csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8001b1e:	7a3b      	ldrb	r3, [r7, #8]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	823b      	strh	r3, [r7, #16]
		Capacity= (uint32_t)csize << (n - 9);
 8001b44:	8a3a      	ldrh	r2, [r7, #16]
 8001b46:	7cfb      	ldrb	r3, [r7, #19]
 8001b48:	3b09      	subs	r3, #9
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
    }
    return Capacity;
 8001b50:	697b      	ldr	r3, [r7, #20]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <file_exists>:

FRESULT file_exists(const char *path) //检查配置文件是否存在
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b0ca      	sub	sp, #296	@ 0x128
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001b64:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b68:	6018      	str	r0, [r3, #0]
    FILINFO fno;
    return f_stat(path, &fno);
 8001b6a:	f107 0208 	add.w	r2, r7, #8
 8001b6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001b72:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b76:	4611      	mov	r1, r2
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	f00b fcf5 	bl	800d568 <f_stat>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <get_next_log_number>:

int get_next_log_number(void) //寻找sd卡中生成的文件最大的数字并返回最大数字+1
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0e4      	sub	sp, #400	@ 0x190
 8001b90:	af00      	add	r7, sp, #0
    if (cached_max_log_num == -1)
 8001b92:	4b54      	ldr	r3, [pc, #336]	@ (8001ce4 <get_next_log_number+0x158>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	f040 8096 	bne.w	8001cca <get_next_log_number+0x13e>
    {
        DIR dir;
        FILINFO fno;
        const char *prefix = LOG_PREFIX;
 8001b9e:	4b52      	ldr	r3, [pc, #328]	@ (8001ce8 <get_next_log_number+0x15c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        const size_t prefix_len = strlen(prefix);
 8001ba6:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8001baa:	f7fe fb71 	bl	8000290 <strlen>
 8001bae:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
        int max_num = -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

        if (f_opendir(&dir, "/") == FR_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	494b      	ldr	r1, [pc, #300]	@ (8001cec <get_next_log_number+0x160>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f00b fb9c 	bl	800d2fc <f_opendir>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d179      	bne.n	8001cbe <get_next_log_number+0x132>
        {
            while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0)
 8001bca:	e063      	b.n	8001c94 <get_next_log_number+0x108>
            {
                char* name = fno.fname;
 8001bcc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001bd0:	331a      	adds	r3, #26
 8001bd2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
                size_t len = strlen(name);
 8001bd6:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001bda:	f7fe fb59 	bl	8000290 <strlen>
 8001bde:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174

                if (len == prefix_len + 9 && strncmp(name, prefix, prefix_len) == 0)
 8001be2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001be6:	3309      	adds	r3, #9
 8001be8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d151      	bne.n	8001c94 <get_next_log_number+0x108>
 8001bf0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001bf4:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8001bf8:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001bfc:	f00e f86b 	bl	800fcd6 <strncmp>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d146      	bne.n	8001c94 <get_next_log_number+0x108>
                {
                    int num = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    for (int i = 0; i < 5; i++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c12:	e024      	b.n	8001c5e <get_next_log_number+0xd2>
                    {
                        char c = name[prefix_len + i];
 8001c14:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8001c18:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
                        if (c < '0' || c > '9') break;
 8001c2a:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001c2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c30:	d919      	bls.n	8001c66 <get_next_log_number+0xda>
 8001c32:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001c36:	2b39      	cmp	r3, #57	@ 0x39
 8001c38:	d815      	bhi.n	8001c66 <get_next_log_number+0xda>
                        num = num * 10 + (c - '0');
 8001c3a:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	461a      	mov	r2, r3
 8001c48:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001c4c:	3b30      	subs	r3, #48	@ 0x30
 8001c4e:	4413      	add	r3, r2
 8001c50:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    for (int i = 0; i < 5; i++)
 8001c54:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c5e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	ddd6      	ble.n	8001c14 <get_next_log_number+0x88>
                    }

                    if (strcmp(name + prefix_len + 5, ".txt") == 0)
 8001c66:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001c6a:	3305      	adds	r3, #5
 8001c6c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c70:	4413      	add	r3, r2
 8001c72:	491f      	ldr	r1, [pc, #124]	@ (8001cf0 <get_next_log_number+0x164>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe faab 	bl	80001d0 <strcmp>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <get_next_log_number+0x108>
                    {
                        if (num > max_num) max_num = num;
 8001c80:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001c84:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dd03      	ble.n	8001c94 <get_next_log_number+0x108>
 8001c8c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c90:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
            while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0)
 8001c94:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00b fc11 	bl	800d4c4 <f_readdir>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <get_next_log_number+0x12a>
 8001ca8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001cac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cb0:	7e9b      	ldrb	r3, [r3, #26]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d18a      	bne.n	8001bcc <get_next_log_number+0x40>
                    }
                }
            }
            f_closedir(&dir);
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00b fbdd 	bl	800d478 <f_closedir>
        }
        cached_max_log_num = (max_num < 0) ? 0 : max_num;
 8001cbe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001cc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cc6:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <get_next_log_number+0x158>)
 8001cc8:	6013      	str	r3, [r2, #0]
    }
    	return ++cached_max_log_num;
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <get_next_log_number+0x158>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <get_next_log_number+0x158>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <get_next_log_number+0x158>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	08013254 	.word	0x08013254
 8001cf0:	08013258 	.word	0x08013258

08001cf4 <read_config>:
#include "sdconfig.h"
#include "user_spi.h"
#include "user_usart.h"

FRESULT read_config(char *buffer, uint16_t buf_size) //读配置文件
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d00:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001d04:	6018      	str	r0, [r3, #0]
 8001d06:	460a      	mov	r2, r1
 8001d08:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d0c:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001d10:	801a      	strh	r2, [r3, #0]
    FIL fil;
    FRESULT res = f_open(&fil, CONFIG_FILE, FA_READ);
 8001d12:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <read_config+0x94>)
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00a fb8b 	bl	800c438 <f_open>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if(res == FR_OK)
 8001d28:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d124      	bne.n	8001d7a <read_config+0x86>
    {
        UINT br;
        f_read(&fil, buffer, buf_size - 1, &br);
 8001d30:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d34:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	461c      	mov	r4, r3
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001d46:	f5a2 711b 	sub.w	r1, r2, #620	@ 0x26c
 8001d4a:	f107 0010 	add.w	r0, r7, #16
 8001d4e:	4622      	mov	r2, r4
 8001d50:	6809      	ldr	r1, [r1, #0]
 8001d52:	f00a fe4b 	bl	800c9ec <f_read>
        buffer[br] = '\0';
 8001d56:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d5a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001d64:	f5a2 721b 	sub.w	r2, r2, #620	@ 0x26c
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
        f_close(&fil);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4618      	mov	r0, r3
 8001d76:	f00b fa97 	bl	800d2a8 <f_close>
    }
    return res;
 8001d7a:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	20000000 	.word	0x20000000

08001d8c <parse_config>:

SD_Config parse_config(const char *config_text) //寻找配置文件中的相关参数，查看是否有修改，将参数保存并返回
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	SD_Config config =
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <parse_config+0x128>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	813b      	strh	r3, [r7, #8]
 8001d9e:	4b46      	ldr	r3, [pc, #280]	@ (8001eb8 <parse_config+0x12c>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	817b      	strh	r3, [r7, #10]
 8001da4:	4b45      	ldr	r3, [pc, #276]	@ (8001ebc <parse_config+0x130>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	81bb      	strh	r3, [r7, #12]
 8001daa:	4b45      	ldr	r3, [pc, #276]	@ (8001ec0 <parse_config+0x134>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	81fb      	strh	r3, [r7, #14]
		.peakth = PEAKTH,
		.almstth = ALMSTTH,
		.pkwnd = PKWND
	};

    const char *section = strstr(config_text, CONFIG_SECTION);
 8001db0:	4944      	ldr	r1, [pc, #272]	@ (8001ec4 <parse_config+0x138>)
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	f00d ffa1 	bl	800fcfa <strstr>
 8001db8:	6138      	str	r0, [r7, #16]
    if (!section) return config;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <parse_config+0x44>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	cb03      	ldmia	r3!, {r0, r1}
 8001dca:	6010      	str	r0, [r2, #0]
 8001dcc:	6051      	str	r1, [r2, #4]
 8001dce:	e06c      	b.n	8001eaa <parse_config+0x11e>

    const char *ptr = section + strlen(CONFIG_SECTION);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	330a      	adds	r3, #10
 8001dd4:	617b      	str	r3, [r7, #20]

    while (*ptr != '\0' && *ptr != '[')
 8001dd6:	e059      	b.n	8001e8c <parse_config+0x100>
    {
        if (strncmp(ptr, RECODE_KEY, strlen(RECODE_KEY)) == 0)
 8001dd8:	220c      	movs	r2, #12
 8001dda:	493b      	ldr	r1, [pc, #236]	@ (8001ec8 <parse_config+0x13c>)
 8001ddc:	6978      	ldr	r0, [r7, #20]
 8001dde:	f00d ff7a 	bl	800fcd6 <strncmp>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <parse_config+0x70>
        {
            ptr += strlen(RECODE_KEY) + 1;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	330d      	adds	r3, #13
 8001dec:	617b      	str	r3, [r7, #20]
            config.receiver_code = atoi(ptr);
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f00c fe45 	bl	800ea7e <atoi>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	e038      	b.n	8001e6e <parse_config+0xe2>
        }
        else if (strncmp(ptr, PEAKTH_KEY, strlen(PEAKTH_KEY)) == 0)
 8001dfc:	2206      	movs	r2, #6
 8001dfe:	4933      	ldr	r1, [pc, #204]	@ (8001ecc <parse_config+0x140>)
 8001e00:	6978      	ldr	r0, [r7, #20]
 8001e02:	f00d ff68 	bl	800fcd6 <strncmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <parse_config+0x94>
        {
            ptr += strlen(PEAKTH_KEY) + 1;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3307      	adds	r3, #7
 8001e10:	617b      	str	r3, [r7, #20]
            config.peakth = atoi(ptr);
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f00c fe33 	bl	800ea7e <atoi>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	817b      	strh	r3, [r7, #10]
 8001e1e:	e026      	b.n	8001e6e <parse_config+0xe2>
        }
        else if (strncmp(ptr, ALMSTTH_KEY, strlen(ALMSTTH_KEY)) == 0)
 8001e20:	2207      	movs	r2, #7
 8001e22:	492b      	ldr	r1, [pc, #172]	@ (8001ed0 <parse_config+0x144>)
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	f00d ff56 	bl	800fcd6 <strncmp>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <parse_config+0xb8>
        {
            ptr += strlen(ALMSTTH_KEY) + 1;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3308      	adds	r3, #8
 8001e34:	617b      	str	r3, [r7, #20]
            config.almstth = atoi(ptr);
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f00c fe21 	bl	800ea7e <atoi>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	81bb      	strh	r3, [r7, #12]
 8001e42:	e014      	b.n	8001e6e <parse_config+0xe2>
        }
        else if (strncmp(ptr, PKWND_KEY, strlen(PKWND_KEY)) == 0)
 8001e44:	2205      	movs	r2, #5
 8001e46:	4923      	ldr	r1, [pc, #140]	@ (8001ed4 <parse_config+0x148>)
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f00d ff44 	bl	800fcd6 <strncmp>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10c      	bne.n	8001e6e <parse_config+0xe2>
		{
			ptr += strlen(PKWND_KEY) + 1;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3306      	adds	r3, #6
 8001e58:	617b      	str	r3, [r7, #20]
			config.pkwnd = atoi(ptr);
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f00c fe0f 	bl	800ea7e <atoi>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	81fb      	strh	r3, [r7, #14]
		}

        while (*ptr != '\n' && *ptr != '\0') ptr++;
 8001e66:	e002      	b.n	8001e6e <parse_config+0xe2>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b0a      	cmp	r3, #10
 8001e74:	d003      	beq.n	8001e7e <parse_config+0xf2>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f4      	bne.n	8001e68 <parse_config+0xdc>
        if (*ptr == '\n') ptr++;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b0a      	cmp	r3, #10
 8001e84:	d102      	bne.n	8001e8c <parse_config+0x100>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
    while (*ptr != '\0' && *ptr != '[')
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <parse_config+0x110>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e9a:	d19d      	bne.n	8001dd8 <parse_config+0x4c>
    }

    return config;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	cb03      	ldmia	r3!, {r0, r1}
 8001ea6:	6010      	str	r0, [r2, #0]
 8001ea8:	6051      	str	r1, [r2, #4]
}
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000022 	.word	0x20000022
 8001eb8:	20000010 	.word	0x20000010
 8001ebc:	20000012 	.word	0x20000012
 8001ec0:	20000014 	.word	0x20000014
 8001ec4:	08013260 	.word	0x08013260
 8001ec8:	0801326c 	.word	0x0801326c
 8001ecc:	0801327c 	.word	0x0801327c
 8001ed0:	08013284 	.word	0x08013284
 8001ed4:	0801328c 	.word	0x0801328c

08001ed8 <apply_config>:

void apply_config(SD_Config *config) // 应用新配置
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	receivercode = config->receiver_code;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <apply_config+0x54>)
 8001ee6:	801a      	strh	r2, [r3, #0]
	PEAKTH = config->peakth;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	885a      	ldrh	r2, [r3, #2]
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <apply_config+0x58>)
 8001eee:	801a      	strh	r2, [r3, #0]
	ALMSTTH = config->almstth;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	889a      	ldrh	r2, [r3, #4]
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <apply_config+0x5c>)
 8001ef6:	801a      	strh	r2, [r3, #0]
	PKWND = config->pkwnd;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	88da      	ldrh	r2, [r3, #6]
 8001efc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <apply_config+0x60>)
 8001efe:	801a      	strh	r2, [r3, #0]
	ASIC_CMD(0x01, PEAKTH);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <apply_config+0x58>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	2001      	movs	r0, #1
 8001f08:	f000 fe30 	bl	8002b6c <ASIC_CMD>
	ASIC_CMD(0x02, ALMSTTH);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <apply_config+0x5c>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	2002      	movs	r0, #2
 8001f14:	f000 fe2a 	bl	8002b6c <ASIC_CMD>
	ASIC_CMD(0x04, PKWND);
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <apply_config+0x60>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2004      	movs	r0, #4
 8001f20:	f000 fe24 	bl	8002b6c <ASIC_CMD>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000022 	.word	0x20000022
 8001f30:	20000010 	.word	0x20000010
 8001f34:	20000012 	.word	0x20000012
 8001f38:	20000014 	.word	0x20000014

08001f3c <create_default_config>:

void create_default_config(void) //创建配置文件
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8001f42:	af00      	add	r7, sp, #0
    FIL fil;
    if(f_open(&fil, CONFIG_FILE, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <create_default_config+0x50>)
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00a fa72 	bl	800c438 <f_open>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d113      	bne.n	8001f82 <create_default_config+0x46>
    {
        const char *default_config =
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <create_default_config+0x54>)
 8001f5c:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
            "PEAKTH=200\n"
        	"ALMSTTH=32\n"
        	"PKWND=5000\n";

        UINT bw;
        f_write(&fil, default_config, strlen(default_config), &bw);
 8001f60:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 8001f64:	f7fe f994 	bl	8000290 <strlen>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	f107 0008 	add.w	r0, r7, #8
 8001f70:	f8d7 1264 	ldr.w	r1, [r7, #612]	@ 0x264
 8001f74:	f00a feb2 	bl	800ccdc <f_write>
        f_close(&fil);
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00b f993 	bl	800d2a8 <f_close>
    }
}
 8001f82:	bf00      	nop
 8001f84:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	08013294 	.word	0x08013294

08001f94 <load_and_apply_config>:

SD_Config load_and_apply_config(void) //读取并应用配置
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b0c7      	sub	sp, #284	@ 0x11c
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fa2:	6018      	str	r0, [r3, #0]
    char config_buf[256];
    SD_Config config =
 8001fa4:	4b29      	ldr	r3, [pc, #164]	@ (800204c <load_and_apply_config+0xb8>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fb2:	801a      	strh	r2, [r3, #0]
 8001fb4:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <load_and_apply_config+0xbc>)
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fc0:	805a      	strh	r2, [r3, #2]
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <load_and_apply_config+0xc0>)
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fce:	809a      	strh	r2, [r3, #4]
 8001fd0:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <load_and_apply_config+0xc4>)
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fdc:	80da      	strh	r2, [r3, #6]
        .peakth = PEAKTH,
        .almstth = ALMSTTH,
        .pkwnd = PKWND
    };

    if(read_config(config_buf, sizeof(config_buf)) == FR_OK)
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fe84 	bl	8001cf4 <read_config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d117      	bne.n	8002022 <load_and_apply_config+0x8e>
    {
        config = parse_config(config_buf);
 8001ff2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff6:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	f107 0218 	add.w	r2, r7, #24
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fec2 	bl	8001d8c <parse_config>
 8002008:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800200c:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8002010:	4623      	mov	r3, r4
 8002012:	6810      	ldr	r0, [r2, #0]
 8002014:	6851      	ldr	r1, [r2, #4]
 8002016:	c303      	stmia	r3!, {r0, r1}
        apply_config(&config);
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5b 	bl	8001ed8 <apply_config>
    }
    return config;
 8002022:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002026:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002034:	cb03      	ldmia	r3!, {r0, r1}
 8002036:	6010      	str	r0, [r2, #0]
 8002038:	6051      	str	r1, [r2, #4]
}
 800203a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800203e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	20000022 	.word	0x20000022
 8002050:	20000010 	.word	0x20000010
 8002054:	20000012 	.word	0x20000012
 8002058:	20000014 	.word	0x20000014

0800205c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002062:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <MX_SPI1_Init+0x78>)
 8002064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002068:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800206c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002076:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800207a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <MX_SPI1_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002082:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_SPI1_Init+0x74>)
 800208a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800208e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002092:	2208      	movs	r2, #8
 8002094:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002096:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <MX_SPI1_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020aa:	2207      	movs	r2, #7
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020b6:	2208      	movs	r2, #8
 80020b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020bc:	f003 fde4 	bl	8005c88 <HAL_SPI_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f7ff f9ee 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200009f8 	.word	0x200009f8
 80020d4:	40013000 	.word	0x40013000

080020d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <MX_SPI2_Init+0x74>)
 80020de:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <MX_SPI2_Init+0x78>)
 80020e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <MX_SPI2_Init+0x74>)
 80020e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020ea:	4b18      	ldr	r3, [pc, #96]	@ (800214c <MX_SPI2_Init+0x74>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_SPI2_Init+0x74>)
 80020f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_SPI2_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020fe:	4b13      	ldr	r3, [pc, #76]	@ (800214c <MX_SPI2_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <MX_SPI2_Init+0x74>)
 8002106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800210a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <MX_SPI2_Init+0x74>)
 800210e:	2238      	movs	r2, #56	@ 0x38
 8002110:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <MX_SPI2_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002118:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <MX_SPI2_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <MX_SPI2_Init+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <MX_SPI2_Init+0x74>)
 8002126:	2207      	movs	r2, #7
 8002128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800212a:	4b08      	ldr	r3, [pc, #32]	@ (800214c <MX_SPI2_Init+0x74>)
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <MX_SPI2_Init+0x74>)
 8002132:	2208      	movs	r2, #8
 8002134:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	@ (800214c <MX_SPI2_Init+0x74>)
 8002138:	f003 fda6 	bl	8005c88 <HAL_SPI_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002142:	f7ff f9b0 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000a5c 	.word	0x20000a5c
 8002150:	40003800 	.word	0x40003800

08002154 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	@ 0x30
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a9b      	ldr	r2, [pc, #620]	@ (80023e0 <HAL_SPI_MspInit+0x28c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	f040 8095 	bne.w	80022a2 <HAL_SPI_MspInit+0x14e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002178:	4b9a      	ldr	r3, [pc, #616]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 800217a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217c:	4a99      	ldr	r2, [pc, #612]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 800217e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002182:	6613      	str	r3, [r2, #96]	@ 0x60
 8002184:	4b97      	ldr	r3, [pc, #604]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 8002186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b94      	ldr	r3, [pc, #592]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002194:	4a93      	ldr	r2, [pc, #588]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219c:	4b91      	ldr	r3, [pc, #580]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021a8:	23a0      	movs	r3, #160	@ 0xa0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b8:	2305      	movs	r3, #5
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c6:	f002 f9c3 	bl	8004550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ca:	2340      	movs	r3, #64	@ 0x40
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021da:	2305      	movs	r3, #5
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e8:	f002 f9b2 	bl	8004550 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80021ec:	4b7e      	ldr	r3, [pc, #504]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 80021ee:	4a7f      	ldr	r2, [pc, #508]	@ (80023ec <HAL_SPI_MspInit+0x298>)
 80021f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80021f2:	4b7d      	ldr	r3, [pc, #500]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f8:	4b7b      	ldr	r3, [pc, #492]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fe:	4b7a      	ldr	r3, [pc, #488]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002204:	4b78      	ldr	r3, [pc, #480]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002206:	2280      	movs	r2, #128	@ 0x80
 8002208:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220a:	4b77      	ldr	r3, [pc, #476]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002210:	4b75      	ldr	r3, [pc, #468]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002216:	4b74      	ldr	r3, [pc, #464]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800221c:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002222:	4871      	ldr	r0, [pc, #452]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002224:	f001 ff12 	bl	800404c <HAL_DMA_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 800222e:	f7ff f93a 	bl	80014a6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a6c      	ldr	r2, [pc, #432]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002236:	659a      	str	r2, [r3, #88]	@ 0x58
 8002238:	4a6b      	ldr	r2, [pc, #428]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800223e:	4b6c      	ldr	r3, [pc, #432]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002240:	4a6c      	ldr	r2, [pc, #432]	@ (80023f4 <HAL_SPI_MspInit+0x2a0>)
 8002242:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002244:	4b6a      	ldr	r3, [pc, #424]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002246:	2201      	movs	r2, #1
 8002248:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800224a:	4b69      	ldr	r3, [pc, #420]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 800224c:	2210      	movs	r2, #16
 800224e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002250:	4b67      	ldr	r3, [pc, #412]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002256:	4b66      	ldr	r3, [pc, #408]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002258:	2280      	movs	r2, #128	@ 0x80
 800225a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225c:	4b64      	ldr	r3, [pc, #400]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002262:	4b63      	ldr	r3, [pc, #396]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002268:	4b61      	ldr	r3, [pc, #388]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800226e:	4b60      	ldr	r3, [pc, #384]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002274:	485e      	ldr	r0, [pc, #376]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002276:	f001 fee9 	bl	800404c <HAL_DMA_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002280:	f7ff f911 	bl	80014a6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a5a      	ldr	r2, [pc, #360]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
 800228a:	4a59      	ldr	r2, [pc, #356]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2023      	movs	r0, #35	@ 0x23
 8002296:	f001 fe96 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800229a:	2023      	movs	r0, #35	@ 0x23
 800229c:	f001 feaf 	bl	8003ffe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022a0:	e099      	b.n	80023d6 <HAL_SPI_MspInit+0x282>
  else if(spiHandle->Instance==SPI2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a54      	ldr	r2, [pc, #336]	@ (80023f8 <HAL_SPI_MspInit+0x2a4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	f040 8094 	bne.w	80023d6 <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ae:	4b4d      	ldr	r3, [pc, #308]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	4a4c      	ldr	r2, [pc, #304]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ba:	4b4a      	ldr	r3, [pc, #296]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	4a46      	ldr	r2, [pc, #280]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d2:	4b44      	ldr	r3, [pc, #272]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022de:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022f0:	2305      	movs	r3, #5
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4619      	mov	r1, r3
 80022fa:	4840      	ldr	r0, [pc, #256]	@ (80023fc <HAL_SPI_MspInit+0x2a8>)
 80022fc:	f002 f928 	bl	8004550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002300:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800230a:	2301      	movs	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002312:	2305      	movs	r3, #5
 8002314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	4619      	mov	r1, r3
 800231c:	4837      	ldr	r0, [pc, #220]	@ (80023fc <HAL_SPI_MspInit+0x2a8>)
 800231e:	f002 f917 	bl	8004550 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8002322:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002324:	4a37      	ldr	r2, [pc, #220]	@ (8002404 <HAL_SPI_MspInit+0x2b0>)
 8002326:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8002328:	4b35      	ldr	r3, [pc, #212]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800232a:	2201      	movs	r2, #1
 800232c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800232e:	4b34      	ldr	r3, [pc, #208]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002334:	4b32      	ldr	r3, [pc, #200]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800233a:	4b31      	ldr	r3, [pc, #196]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800233c:	2280      	movs	r2, #128	@ 0x80
 800233e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002340:	4b2f      	ldr	r3, [pc, #188]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002346:	4b2e      	ldr	r3, [pc, #184]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800234c:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002352:	4b2b      	ldr	r3, [pc, #172]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002358:	4829      	ldr	r0, [pc, #164]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800235a:	f001 fe77 	bl	800404c <HAL_DMA_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8002364:	f7ff f89f 	bl	80014a6 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a25      	ldr	r2, [pc, #148]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800236c:	659a      	str	r2, [r3, #88]	@ 0x58
 800236e:	4a24      	ldr	r2, [pc, #144]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002374:	4b24      	ldr	r3, [pc, #144]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 8002376:	4a25      	ldr	r2, [pc, #148]	@ (800240c <HAL_SPI_MspInit+0x2b8>)
 8002378:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800237a:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 800237c:	2201      	movs	r2, #1
 800237e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002380:	4b21      	ldr	r3, [pc, #132]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 8002382:	2210      	movs	r2, #16
 8002384:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b1e      	ldr	r3, [pc, #120]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 800238e:	2280      	movs	r2, #128	@ 0x80
 8002390:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002392:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800239e:	4b1a      	ldr	r3, [pc, #104]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023a4:	4b18      	ldr	r3, [pc, #96]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80023aa:	4817      	ldr	r0, [pc, #92]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023ac:	f001 fe4e 	bl	800404c <HAL_DMA_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_SPI_MspInit+0x266>
      Error_Handler();
 80023b6:	f7ff f876 	bl	80014a6 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
 80023c0:	4a11      	ldr	r2, [pc, #68]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2024      	movs	r0, #36	@ 0x24
 80023cc:	f001 fdfb 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023d0:	2024      	movs	r0, #36	@ 0x24
 80023d2:	f001 fe14 	bl	8003ffe <HAL_NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3730      	adds	r7, #48	@ 0x30
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40013000 	.word	0x40013000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	20000ac0 	.word	0x20000ac0
 80023ec:	4002001c 	.word	0x4002001c
 80023f0:	20000b08 	.word	0x20000b08
 80023f4:	40020030 	.word	0x40020030
 80023f8:	40003800 	.word	0x40003800
 80023fc:	48000400 	.word	0x48000400
 8002400:	20000b50 	.word	0x20000b50
 8002404:	40020044 	.word	0x40020044
 8002408:	20000b98 	.word	0x20000b98
 800240c:	40020058 	.word	0x40020058

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_MspInit+0x44>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241a:	4a0e      	ldr	r2, [pc, #56]	@ (8002454 <HAL_MspInit+0x44>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6613      	str	r3, [r2, #96]	@ 0x60
 8002422:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <HAL_MspInit+0x44>)
 8002424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_MspInit+0x44>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <HAL_MspInit+0x44>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	@ 0x58
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_MspInit+0x44>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <NMI_Handler+0x4>

08002460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <MemManage_Handler+0x4>

08002470 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <UsageFault_Handler+0x4>

08002480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ae:	f001 fc6b 	bl	8003d88 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80024b2:	f001 fdbe 	bl	8004032 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <DMA1_Channel2_IRQHandler+0x10>)
 80024c2:	f001 ff5a 	bl	800437a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000ac0 	.word	0x20000ac0

080024d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <DMA1_Channel3_IRQHandler+0x10>)
 80024d6:	f001 ff50 	bl	800437a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000b08 	.word	0x20000b08

080024e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <DMA1_Channel4_IRQHandler+0x10>)
 80024ea:	f001 ff46 	bl	800437a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000b50 	.word	0x20000b50

080024f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <DMA1_Channel5_IRQHandler+0x10>)
 80024fe:	f001 ff3c 	bl	800437a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000b98 	.word	0x20000b98

0800250c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <TIM2_IRQHandler+0x38>)
 8002512:	f004 f9ab 	bl	800686c <HAL_TIM_IRQHandler>
  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE))
 8002516:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <TIM2_IRQHandler+0x38>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10c      	bne.n	800253e <TIM2_IRQHandler+0x32>
    {
        __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8002524:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <TIM2_IRQHandler+0x38>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0201 	mvn.w	r2, #1
 800252c:	611a      	str	r2, [r3, #16]
        high_counter += 0x100000000;
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <TIM2_IRQHandler+0x3c>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	1c5d      	adds	r5, r3, #1
 8002536:	4614      	mov	r4, r2
 8002538:	4b03      	ldr	r3, [pc, #12]	@ (8002548 <TIM2_IRQHandler+0x3c>)
 800253a:	e9c3 4500 	strd	r4, r5, [r3]
    }
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bdb0      	pop	{r4, r5, r7, pc}
 8002542:	bf00      	nop
 8002544:	20000be4 	.word	0x20000be4
 8002548:	200011c0 	.word	0x200011c0

0800254c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002550:	4802      	ldr	r0, [pc, #8]	@ (800255c <SPI1_IRQHandler+0x10>)
 8002552:	f003 fe5b 	bl	800620c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200009f8 	.word	0x200009f8

08002560 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <SPI2_IRQHandler+0x10>)
 8002566:	f003 fe51 	bl	800620c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000a5c 	.word	0x20000a5c

08002574 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8002578:	4823      	ldr	r0, [pc, #140]	@ (8002608 <USART1_IRQHandler+0x94>)
 800257a:	f004 ff4f 	bl	800741c <HAL_UART_IRQHandler>
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 800257e:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <USART1_IRQHandler+0x94>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d13b      	bne.n	8002604 <USART1_IRQHandler+0x90>
      {
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800258c:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <USART1_IRQHandler+0x94>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	621a      	str	r2, [r3, #32]
    	  HAL_UART_AbortReceive(&huart1);
 8002594:	481c      	ldr	r0, [pc, #112]	@ (8002608 <USART1_IRQHandler+0x94>)
 8002596:	f004 fe8f 	bl	80072b8 <HAL_UART_AbortReceive>
    	  rx_length = sizeof(rx_buffer) - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <USART1_IRQHandler+0x94>)
 800259c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b18      	ldr	r3, [pc, #96]	@ (800260c <USART1_IRQHandler+0x98>)
 80025ac:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025ae:	b672      	cpsid	i
}
 80025b0:	bf00      	nop
    	  __disable_irq();
    	  if(wp + rx_length <= &processing_buffer[BUF_SIZE])
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <USART1_IRQHandler+0x9c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a15      	ldr	r2, [pc, #84]	@ (800260c <USART1_IRQHandler+0x98>)
 80025b8:	8812      	ldrh	r2, [r2, #0]
 80025ba:	b292      	uxth	r2, r2
 80025bc:	4413      	add	r3, r2
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <USART1_IRQHandler+0xa0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d810      	bhi.n	80025e6 <USART1_IRQHandler+0x72>
    	  {
    		  memcpy(wp, rx_buffer, rx_length);
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <USART1_IRQHandler+0x9c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a10      	ldr	r2, [pc, #64]	@ (800260c <USART1_IRQHandler+0x98>)
 80025ca:	8812      	ldrh	r2, [r2, #0]
 80025cc:	b292      	uxth	r2, r2
 80025ce:	4912      	ldr	r1, [pc, #72]	@ (8002618 <USART1_IRQHandler+0xa4>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f00d fc30 	bl	800fe36 <memcpy>
    		  wp += rx_length;
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <USART1_IRQHandler+0x98>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <USART1_IRQHandler+0x9c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <USART1_IRQHandler+0x9c>)
 80025e4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025e6:	b662      	cpsie	i
}
 80025e8:	bf00      	nop
    	  }
		  __enable_irq();
		  if(rx_length > 0)
 80025ea:	4b08      	ldr	r3, [pc, #32]	@ (800260c <USART1_IRQHandler+0x98>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <USART1_IRQHandler+0x86>
		  {
			  data_ready = 1;
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <USART1_IRQHandler+0xa8>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	801a      	strh	r2, [r3, #0]
		  }
    	  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 80025fa:	2280      	movs	r2, #128	@ 0x80
 80025fc:	4906      	ldr	r1, [pc, #24]	@ (8002618 <USART1_IRQHandler+0xa4>)
 80025fe:	4802      	ldr	r0, [pc, #8]	@ (8002608 <USART1_IRQHandler+0x94>)
 8002600:	f004 fe0e 	bl	8007220 <HAL_UART_Receive_DMA>
      }
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000c7c 	.word	0x20000c7c
 800260c:	2000053c 	.word	0x2000053c
 8002610:	20000018 	.word	0x20000018
 8002614:	200011a8 	.word	0x200011a8
 8002618:	2000043c 	.word	0x2000043c
 800261c:	2000053e 	.word	0x2000053e

08002620 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <TIM6_DAC_IRQHandler+0x10>)
 8002626:	f004 f921 	bl	800686c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000c30 	.word	0x20000c30

08002634 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <DMA2_Channel6_IRQHandler+0x10>)
 800263a:	f001 fe9e 	bl	800437a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000d4c 	.word	0x20000d4c

08002648 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <DMA2_Channel7_IRQHandler+0x10>)
 800264e:	f001 fe94 	bl	800437a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000d04 	.word	0x20000d04

0800265c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_kill>:

int _kill(int pid, int sig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002676:	f00d fbb1 	bl	800fddc <__errno>
 800267a:	4603      	mov	r3, r0
 800267c:	2216      	movs	r2, #22
 800267e:	601a      	str	r2, [r3, #0]
  return -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_exit>:

void _exit (int status)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffe7 	bl	800266c <_kill>
  while (1) {}    /* Make sure we hang here */
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <_exit+0x12>

080026a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e00a      	b.n	80026ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b4:	f3af 8000 	nop.w
 80026b8:	4601      	mov	r1, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	60ba      	str	r2, [r7, #8]
 80026c0:	b2ca      	uxtb	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dbf0      	blt.n	80026b4 <_read+0x12>
  }

  return len;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002704:	605a      	str	r2, [r3, #4]
  return 0;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_isatty>:

int _isatty(int file)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271c:	2301      	movs	r3, #1
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	@ (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f00d fb32 	bl	800fddc <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000c000 	.word	0x2000c000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	20000be0 	.word	0x20000be0
 80027ac:	20001398 	.word	0x20001398

080027b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <SystemInit+0x20>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	4a05      	ldr	r2, [pc, #20]	@ (80027d0 <SystemInit+0x20>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <MX_TIM2_Init+0x98>)
 80027f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80027fa:	4b1c      	ldr	r3, [pc, #112]	@ (800286c <MX_TIM2_Init+0x98>)
 80027fc:	224f      	movs	r2, #79	@ 0x4f
 80027fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002800:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <MX_TIM2_Init+0x98>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002806:	4b19      	ldr	r3, [pc, #100]	@ (800286c <MX_TIM2_Init+0x98>)
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280e:	4b17      	ldr	r3, [pc, #92]	@ (800286c <MX_TIM2_Init+0x98>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002814:	4b15      	ldr	r3, [pc, #84]	@ (800286c <MX_TIM2_Init+0x98>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800281a:	4814      	ldr	r0, [pc, #80]	@ (800286c <MX_TIM2_Init+0x98>)
 800281c:	f003 ff7a 	bl	8006714 <HAL_TIM_Base_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002826:	f7fe fe3e 	bl	80014a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800282e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4619      	mov	r1, r3
 8002836:	480d      	ldr	r0, [pc, #52]	@ (800286c <MX_TIM2_Init+0x98>)
 8002838:	f004 f91f 	bl	8006a7a <HAL_TIM_ConfigClockSource>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002842:	f7fe fe30 	bl	80014a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	@ (800286c <MX_TIM2_Init+0x98>)
 8002854:	f004 fb0c 	bl	8006e70 <HAL_TIMEx_MasterConfigSynchronization>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800285e:	f7fe fe22 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000be4 	.word	0x20000be4

08002870 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <MX_TIM6_Init+0x68>)
 8002882:	4a16      	ldr	r2, [pc, #88]	@ (80028dc <MX_TIM6_Init+0x6c>)
 8002884:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002886:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <MX_TIM6_Init+0x68>)
 8002888:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800288c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <MX_TIM6_Init+0x68>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <MX_TIM6_Init+0x68>)
 8002896:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800289a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <MX_TIM6_Init+0x68>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028a2:	480d      	ldr	r0, [pc, #52]	@ (80028d8 <MX_TIM6_Init+0x68>)
 80028a4:	f003 ff36 	bl	8006714 <HAL_TIM_Base_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80028ae:	f7fe fdfa 	bl	80014a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	@ (80028d8 <MX_TIM6_Init+0x68>)
 80028c0:	f004 fad6 	bl	8006e70 <HAL_TIMEx_MasterConfigSynchronization>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80028ca:	f7fe fdec 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000c30 	.word	0x20000c30
 80028dc:	40001000 	.word	0x40001000

080028e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f0:	d114      	bne.n	800291c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f2:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fe:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	201c      	movs	r0, #28
 8002910:	f001 fb59 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002914:	201c      	movs	r0, #28
 8002916:	f001 fb72 	bl	8003ffe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800291a:	e018      	b.n	800294e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0e      	ldr	r2, [pc, #56]	@ (800295c <HAL_TIM_Base_MspInit+0x7c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d113      	bne.n	800294e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	4a0b      	ldr	r2, [pc, #44]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 800292c:	f043 0310 	orr.w	r3, r3, #16
 8002930:	6593      	str	r3, [r2, #88]	@ 0x58
 8002932:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2036      	movs	r0, #54	@ 0x36
 8002944:	f001 fb3f 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002948:	2036      	movs	r0, #54	@ 0x36
 800294a:	f001 fb58 	bl	8003ffe <HAL_NVIC_EnableIRQ>
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	40001000 	.word	0x40001000

08002960 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002964:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002966:	4a15      	ldr	r2, [pc, #84]	@ (80029bc <MX_USART1_UART_Init+0x5c>)
 8002968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 800296c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0e      	ldr	r3, [pc, #56]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002996:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 80029a4:	f004 fae8 	bl	8006f78 <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80029ae:	f7fe fd7a 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000c7c 	.word	0x20000c7c
 80029bc:	40013800 	.word	0x40013800

080029c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0a2      	sub	sp, #136	@ 0x88
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2260      	movs	r2, #96	@ 0x60
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f00d f970 	bl	800fcc6 <memset>
  if(uartHandle->Instance==USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002b28 <HAL_UART_MspInit+0x168>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	f040 8096 	bne.w	8002b1e <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029f6:	2300      	movs	r3, #0
 80029f8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fe06 	bl	8005610 <HAL_RCCEx_PeriphCLKConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a0a:	f7fe fd4c 	bl	80014a6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0e:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	4a46      	ldr	r2, [pc, #280]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a18:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a1a:	4b44      	ldr	r3, [pc, #272]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b41      	ldr	r3, [pc, #260]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	4a40      	ldr	r2, [pc, #256]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a32:	4b3e      	ldr	r3, [pc, #248]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a42:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a52:	2307      	movs	r3, #7
 8002a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a62:	f001 fd75 	bl	8004550 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8002a66:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a68:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <HAL_UART_MspInit+0x174>)
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002a6c:	4b30      	ldr	r3, [pc, #192]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a6e:	2202      	movs	r2, #2
 8002a70:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a72:	4b2f      	ldr	r3, [pc, #188]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a78:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a84:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8a:	4b29      	ldr	r3, [pc, #164]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a90:	4b27      	ldr	r3, [pc, #156]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a92:	2220      	movs	r2, #32
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a96:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a9e:	4824      	ldr	r0, [pc, #144]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002aa0:	f001 fad4 	bl	800404c <HAL_DMA_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002aaa:	f7fe fcfc 	bl	80014a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002ab2:	675a      	str	r2, [r3, #116]	@ 0x74
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8002aba:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002abc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_UART_MspInit+0x17c>)
 8002abe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ac8:	2210      	movs	r2, #16
 8002aca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ad4:	2280      	movs	r2, #128	@ 0x80
 8002ad6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ade:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aea:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002af2:	4811      	ldr	r0, [pc, #68]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002af4:	f001 faaa 	bl	800404c <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002afe:	f7fe fcd2 	bl	80014a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002b06:	671a      	str	r2, [r3, #112]	@ 0x70
 8002b08:	4a0b      	ldr	r2, [pc, #44]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2025      	movs	r0, #37	@ 0x25
 8002b14:	f001 fa57 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b18:	2025      	movs	r0, #37	@ 0x25
 8002b1a:	f001 fa70 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3788      	adds	r7, #136	@ 0x88
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	20000d04 	.word	0x20000d04
 8002b34:	40020480 	.word	0x40020480
 8002b38:	20000d4c 	.word	0x20000d4c
 8002b3c:	4002046c 	.word	0x4002046c

08002b40 <ASIC_TransmitReceive>:
uint16_t peaklevel;
uint64_t peaktime;
uint8_t result[6];

uint8_t ASIC_TransmitReceive(uint8_t data) //发送接收函数封装
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, 100);
 8002b4a:	f107 020f 	add.w	r2, r7, #15
 8002b4e:	1df9      	adds	r1, r7, #7
 8002b50:	2364      	movs	r3, #100	@ 0x64
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2301      	movs	r3, #1
 8002b56:	4804      	ldr	r0, [pc, #16]	@ (8002b68 <ASIC_TransmitReceive+0x28>)
 8002b58:	f003 f939 	bl	8005dce <HAL_SPI_TransmitReceive>
    return rx_data;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200009f8 	.word	0x200009f8

08002b6c <ASIC_CMD>:

void ASIC_CMD(uint8_t address, uint16_t data) //ASIC发送参数到指定地址
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	460a      	mov	r2, r1
 8002b76:	71fb      	strb	r3, [r7, #7]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	80bb      	strh	r3, [r7, #4]
	ASIC_CS_LOW();
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4813      	ldr	r0, [pc, #76]	@ (8002bd0 <ASIC_CMD+0x64>)
 8002b82:	f001 fe77 	bl	8004874 <HAL_GPIO_WritePin>
	ASIC_TransmitReceive(address);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ffd9 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7ff ffd6 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7ff ffd3 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7ff ffd0 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7ff ffcd 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive((data >> 8) & 0xFF);
 8002ba6:	88bb      	ldrh	r3, [r7, #4]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ffc6 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(data & 0xFF);
 8002bb4:	88bb      	ldrh	r3, [r7, #4]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ffc1 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_CS_HIGH();
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4803      	ldr	r0, [pc, #12]	@ (8002bd0 <ASIC_CMD+0x64>)
 8002bc4:	f001 fe56 	bl	8004874 <HAL_GPIO_WritePin>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	48000400 	.word	0x48000400

08002bd4 <ReadResult>:

HAL_StatusTypeDef ReadResult(void) //读取相关结果
{
 8002bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(EMPTY_GPIO_Port, EMPTY_Pin) == GPIO_PIN_SET)
 8002bda:	2104      	movs	r1, #4
 8002bdc:	482c      	ldr	r0, [pc, #176]	@ (8002c90 <ReadResult+0xbc>)
 8002bde:	f001 fe31 	bl	8004844 <HAL_GPIO_ReadPin>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <ReadResult+0x18>
	{
		return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04d      	b.n	8002c88 <ReadResult+0xb4>
	}
	else
	{
		ASIC_CS_LOW();
 8002bec:	2200      	movs	r2, #0
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4827      	ldr	r0, [pc, #156]	@ (8002c90 <ReadResult+0xbc>)
 8002bf2:	f001 fe3f 	bl	8004874 <HAL_GPIO_WritePin>
		uint16_t i;
		uint8_t address = 0x80;
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	717b      	strb	r3, [r7, #5]
		ASIC_TransmitReceive(address);
 8002bfa:	797b      	ldrb	r3, [r7, #5]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff9f 	bl	8002b40 <ASIC_TransmitReceive>
		for(i = 0;i < 6;i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	80fb      	strh	r3, [r7, #6]
 8002c06:	e00a      	b.n	8002c1e <ReadResult+0x4a>
			result[i] = ASIC_TransmitReceive(0x00);
 8002c08:	88fe      	ldrh	r6, [r7, #6]
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7ff ff98 	bl	8002b40 <ASIC_TransmitReceive>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <ReadResult+0xc0>)
 8002c16:	559a      	strb	r2, [r3, r6]
		for(i = 0;i < 6;i++)
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	80fb      	strh	r3, [r7, #6]
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d9f1      	bls.n	8002c08 <ReadResult+0x34>
		codeid = result[0] >> 3;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <ReadResult+0xc0>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <ReadResult+0xc4>)
 8002c2e:	701a      	strb	r2, [r3, #0]
		peaklevel = (result[1] >> 1) | ((result[0] & 0x07 ) << 7);
 8002c30:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <ReadResult+0xc0>)
 8002c32:	785b      	ldrb	r3, [r3, #1]
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	4b16      	ldr	r3, [pc, #88]	@ (8002c94 <ReadResult+0xc0>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	01db      	lsls	r3, r3, #7
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	f403 7360 	and.w	r3, r3, #896	@ 0x380
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <ReadResult+0xc8>)
 8002c52:	801a      	strh	r2, [r3, #0]
		peaktime = ((result[1] & 0x01) << 32) | (result[2] << 24) | (result[3] << 16) | (result[4] << 8) | result[5];
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <ReadResult+0xc0>)
 8002c56:	789b      	ldrb	r3, [r3, #2]
 8002c58:	061a      	lsls	r2, r3, #24
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <ReadResult+0xc0>)
 8002c5c:	78db      	ldrb	r3, [r3, #3]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	431a      	orrs	r2, r3
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <ReadResult+0xc0>)
 8002c64:	791b      	ldrb	r3, [r3, #4]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <ReadResult+0xc0>)
 8002c6c:	7952      	ldrb	r2, [r2, #5]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	17da      	asrs	r2, r3, #31
 8002c72:	461c      	mov	r4, r3
 8002c74:	4615      	mov	r5, r2
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <ReadResult+0xcc>)
 8002c78:	e9c3 4500 	strd	r4, r5, [r3]
		ASIC_CS_HIGH();
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4803      	ldr	r0, [pc, #12]	@ (8002c90 <ReadResult+0xbc>)
 8002c82:	f001 fdf7 	bl	8004874 <HAL_GPIO_WritePin>
		return HAL_OK;
 8002c86:	2300      	movs	r3, #0
	}
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c90:	48000400 	.word	0x48000400
 8002c94:	20000da0 	.word	0x20000da0
 8002c98:	20000d94 	.word	0x20000d94
 8002c9c:	20000d96 	.word	0x20000d96
 8002ca0:	20000d98 	.word	0x20000d98

08002ca4 <ASIC_RST>:

void ASIC_RST(void) //ASIC芯片复位
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2110      	movs	r1, #16
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cb0:	f001 fde0 	bl	8004874 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002cb4:	2032      	movs	r0, #50	@ 0x32
 8002cb6:	f001 f887 	bl	8003dc8 <HAL_Delay>
	HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cc2:	f001 fdd7 	bl	8004874 <HAL_GPIO_WritePin>
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <read_be16>:
void Send_time(void);
void Parameterset_query(void);
void Sendheart(void);

uint16_t read_be16(uint8_t *data) //连续读取两个字节
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
    return (data[0] << 8) | data[1];
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	b29b      	uxth	r3, r3
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <Checksum>:

uint16_t Checksum(uint8_t *data, uint16_t length) //逐字节校检和
{
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]
	uint16_t sum;
    if(length <= 1)
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d804      	bhi.n	8002d12 <Checksum+0x1c>
    {
    	sum = (uint16_t)data[0];
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002d0e:	89fb      	ldrh	r3, [r7, #14]
 8002d10:	e010      	b.n	8002d34 <Checksum+0x3e>
    }
    else
    {
    	sum = (uint16_t)data[length-1]+Checksum(data, length - 1);
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461c      	mov	r4, r3
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffe5 	bl	8002cf6 <Checksum>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4423      	add	r3, r4
 8002d30:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002d32:	89fb      	ldrh	r3, [r7, #14]
    }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}

08002d3c <CMD_Judge>:

CMD_Status CMD_Judge(void) //按照地址从地到高轮询数组，找到最近的包头和包尾进行判断和处理，没有设计处理参数中如果出现包头包尾的方法，目前如果出现这种情况会直接报错误码舍弃
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
	uint32_t rxcode = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
	uint16_t time;
	uint16_t checksum;
	uint16_t SUM;
	rp1 = rp;
 8002d46:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002efc <CMD_Judge+0x1c0>)
 8002d4c:	6013      	str	r3, [r2, #0]
	rp2 = rp;
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6b      	ldr	r2, [pc, #428]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002d54:	6013      	str	r3, [r2, #0]
	while (wp > rp)
 8002d56:	e02b      	b.n	8002db0 <CMD_Judge+0x74>
	{
		uint16_t test = (*rp << 8) | *(rp + 1);
 8002d58:	4b67      	ldr	r3, [pc, #412]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	4b64      	ldr	r3, [pc, #400]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	80fb      	strh	r3, [r7, #6]
		if(test == HEAD)
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d103      	bne.n	8002d86 <CMD_Judge+0x4a>
			rp1 = rp;
 8002d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5e      	ldr	r2, [pc, #376]	@ (8002efc <CMD_Judge+0x1c0>)
 8002d84:	6013      	str	r3, [r2, #0]
		if(test == TAIL)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	f647 62fe 	movw	r2, #32510	@ 0x7efe
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d104      	bne.n	8002d9a <CMD_Judge+0x5e>
			rp2 = rp + 1;
 8002d90:	4b59      	ldr	r3, [pc, #356]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	4a5a      	ldr	r2, [pc, #360]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002d98:	6013      	str	r3, [r2, #0]
		rp++;
 8002d9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a55      	ldr	r2, [pc, #340]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002da2:	6013      	str	r3, [r2, #0]
		if(rp2 > rp1)
 8002da4:	4b56      	ldr	r3, [pc, #344]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b54      	ldr	r3, [pc, #336]	@ (8002efc <CMD_Judge+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d806      	bhi.n	8002dbe <CMD_Judge+0x82>
	while (wp > rp)
 8002db0:	4b54      	ldr	r3, [pc, #336]	@ (8002f04 <CMD_Judge+0x1c8>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b50      	ldr	r3, [pc, #320]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d8cd      	bhi.n	8002d58 <CMD_Judge+0x1c>
 8002dbc:	e000      	b.n	8002dc0 <CMD_Judge+0x84>
			break;
 8002dbe:	bf00      	nop
	}
	if(rp == wp)
 8002dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8002f04 <CMD_Judge+0x1c8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d104      	bne.n	8002dd6 <CMD_Judge+0x9a>
	{
		data_ready = 0;
 8002dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8002f08 <CMD_Judge+0x1cc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	801a      	strh	r2, [r3, #0]
		return CMD_END;
 8002dd2:	2306      	movs	r3, #6
 8002dd4:	e08c      	b.n	8002ef0 <CMD_Judge+0x1b4>
	}
	for(uint16_t i = 3;i <= 4;i++)
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	e012      	b.n	8002e02 <CMD_Judge+0xc6>
		rxcode = (*(rp1 + i) << (32 - 8*i)) | rxcode;
 8002ddc:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <CMD_Judge+0x1c0>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	893b      	ldrh	r3, [r7, #8]
 8002dea:	f1c3 0304 	rsb	r3, r3, #4
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 3;i <= 4;i++)
 8002dfc:	893b      	ldrh	r3, [r7, #8]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	813b      	strh	r3, [r7, #8]
 8002e02:	893b      	ldrh	r3, [r7, #8]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d9e9      	bls.n	8002ddc <CMD_Judge+0xa0>
	datalength = *(rp1 + 7);
 8002e08:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	79da      	ldrb	r2, [r3, #7]
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f0c <CMD_Judge+0x1d0>)
 8002e10:	701a      	strb	r2, [r3, #0]
	for(time = 0;time < cmd_number;time++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	e01b      	b.n	8002e50 <CMD_Judge+0x114>
	{
		command = (*(rp1 + 5)<< 8) | *(rp1 + 6);
 8002e18:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3305      	adds	r3, #5
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	4b35      	ldr	r3, [pc, #212]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3306      	adds	r3, #6
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	4b36      	ldr	r3, [pc, #216]	@ (8002f10 <CMD_Judge+0x1d4>)
 8002e38:	801a      	strh	r2, [r3, #0]
		if(command == cmd[time])
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	@ (8002f14 <CMD_Judge+0x1d8>)
 8002e3e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002e42:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <CMD_Judge+0x1d4>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d006      	beq.n	8002e58 <CMD_Judge+0x11c>
	for(time = 0;time < cmd_number;time++)
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	817b      	strh	r3, [r7, #10]
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d9e0      	bls.n	8002e18 <CMD_Judge+0xdc>
 8002e56:	e000      	b.n	8002e5a <CMD_Judge+0x11e>
			break;
 8002e58:	bf00      	nop
	}
	checksum = (*(rp2 - 3) << 8) | *(rp2 - 2);
 8002e5a:	4b29      	ldr	r3, [pc, #164]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3b03      	subs	r3, #3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3b02      	subs	r3, #2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	b21b      	sxth	r3, r3
 8002e76:	80bb      	strh	r3, [r7, #4]
	rp3 = rp1 + 8;
 8002e78:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	4a26      	ldr	r2, [pc, #152]	@ (8002f18 <CMD_Judge+0x1dc>)
 8002e80:	6013      	str	r3, [r2, #0]
	SUM = Checksum(rp1 + 2, datalength + 6);
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3302      	adds	r3, #2
 8002e88:	4a20      	ldr	r2, [pc, #128]	@ (8002f0c <CMD_Judge+0x1d0>)
 8002e8a:	7812      	ldrb	r2, [r2, #0]
 8002e8c:	3206      	adds	r2, #6
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff2f 	bl	8002cf6 <Checksum>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	807b      	strh	r3, [r7, #2]
	if(rxcode != receivercode || *(rp1 + 2) != version)
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <CMD_Judge+0x1e0>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d107      	bne.n	8002eba <CMD_Judge+0x17e>
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <CMD_Judge+0x1c0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3302      	adds	r3, #2
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <CMD_Judge+0x1e4>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <CMD_Judge+0x182>
		return CODE_ERROE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e018      	b.n	8002ef0 <CMD_Judge+0x1b4>
	else if(datalength != rp2 - rp1 - 11)
 8002ebe:	4b13      	ldr	r3, [pc, #76]	@ (8002f0c <CMD_Judge+0x1d0>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <CMD_Judge+0x1c0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	3b0b      	subs	r3, #11
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d001      	beq.n	8002ed8 <CMD_Judge+0x19c>
		return LENGTH_ERROE;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e00b      	b.n	8002ef0 <CMD_Judge+0x1b4>
	else if(time >= cmd_number)
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d901      	bls.n	8002ee2 <CMD_Judge+0x1a6>
		return CMD_ERROR;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e006      	b.n	8002ef0 <CMD_Judge+0x1b4>
	else if(checksum != SUM)
 8002ee2:	88ba      	ldrh	r2, [r7, #4]
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <CMD_Judge+0x1b2>
		return CHECK_ERROR;
 8002eea:	2304      	movs	r3, #4
 8002eec:	e000      	b.n	8002ef0 <CMD_Judge+0x1b4>
	else
		return CMD_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	2000001c 	.word	0x2000001c
 8002efc:	200011ac 	.word	0x200011ac
 8002f00:	200011b0 	.word	0x200011b0
 8002f04:	20000018 	.word	0x20000018
 8002f08:	2000053e 	.word	0x2000053e
 8002f0c:	200011b8 	.word	0x200011b8
 8002f10:	200011a8 	.word	0x200011a8
 8002f14:	20000024 	.word	0x20000024
 8002f18:	200011b4 	.word	0x200011b4
 8002f1c:	20000022 	.word	0x20000022
 8002f20:	20000020 	.word	0x20000020

08002f24 <CMD_Execute>:

CMD_Status CMD_Execute(void) //判断命令内容和处理
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	if(command == cmd1)
 8002f28:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <CMD_Execute+0x8c>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d124      	bne.n	8002f7a <CMD_Execute+0x56>
	{
		if(datalength == 0x01 && *rp3 == 0x01)
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <CMD_Execute+0x90>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10b      	bne.n	8002f50 <CMD_Execute+0x2c>
 8002f38:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb8 <CMD_Execute+0x94>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d106      	bne.n	8002f50 <CMD_Execute+0x2c>
		{
			Sampling();
 8002f42:	f000 f83d 	bl	8002fc0 <Sampling>
			sampling_ready = 0;
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <CMD_Execute+0x98>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e02d      	b.n	8002fac <CMD_Execute+0x88>
		}
		else if(datalength == 0x01 && *rp3 == 0)
 8002f50:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <CMD_Execute+0x90>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10e      	bne.n	8002f76 <CMD_Execute+0x52>
 8002f58:	4b17      	ldr	r3, [pc, #92]	@ (8002fb8 <CMD_Execute+0x94>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <CMD_Execute+0x52>
		{
			Sampling();
 8002f62:	f000 f82d 	bl	8002fc0 <Sampling>
			HAL_Delay(100);
 8002f66:	2064      	movs	r0, #100	@ 0x64
 8002f68:	f000 ff2e 	bl	8003dc8 <HAL_Delay>
			sampling_ready = 1;
 8002f6c:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <CMD_Execute+0x98>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e01a      	b.n	8002fac <CMD_Execute+0x88>
		}
		else
			return INVALID;
 8002f76:	2305      	movs	r3, #5
 8002f78:	e018      	b.n	8002fac <CMD_Execute+0x88>
	}
	else if(command == cmd3)
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb0 <CMD_Execute+0x8c>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d103      	bne.n	8002f8a <CMD_Execute+0x66>
	{
		Parameterset_query();
 8002f82:	f000 f905 	bl	8003190 <Parameterset_query>
		return CMD_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e010      	b.n	8002fac <CMD_Execute+0x88>
	}
	else if(command == cmd4)
 8002f8a:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <CMD_Execute+0x8c>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d109      	bne.n	8002fa6 <CMD_Execute+0x82>
	{
		if(datalength != 0x00)
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <CMD_Execute+0x90>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <CMD_Execute+0x7a>
			return INVALID;
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	e006      	b.n	8002fac <CMD_Execute+0x88>
		else
		{
			Parameterset_query();
 8002f9e:	f000 f8f7 	bl	8003190 <Parameterset_query>
			return CMD_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e002      	b.n	8002fac <CMD_Execute+0x88>
		}
	}
	else
	{
		Send_time();
 8002fa6:	f000 fb85 	bl	80036b4 <Send_time>
		return CMD_OK;
 8002faa:	2300      	movs	r3, #0
	}
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200011a8 	.word	0x200011a8
 8002fb4:	200011b8 	.word	0x200011b8
 8002fb8:	200011b4 	.word	0x200011b4
 8002fbc:	2000002e 	.word	0x2000002e

08002fc0 <Sampling>:

void Sampling(void) //发送采样相关的应答命令
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
	uint16_t length =  rp2 - rp1 + 1;
 8002fc6:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <Sampling+0xa8>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b28      	ldr	r3, [pc, #160]	@ (800306c <Sampling+0xac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	807b      	strh	r3, [r7, #2]
	uint16_t SUM;
	for(uint16_t i = 0;i < length;i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	80bb      	strh	r3, [r7, #4]
 8002fda:	e033      	b.n	8003044 <Sampling+0x84>
	{
		if(i == 5)
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d104      	bne.n	8002fec <Sampling+0x2c>
			tx_buffer[i] = 0x01;
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	4a22      	ldr	r2, [pc, #136]	@ (8003070 <Sampling+0xb0>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	54d1      	strb	r1, [r2, r3]
 8002fea:	e028      	b.n	800303e <Sampling+0x7e>
		else if(i == length - 4)
 8002fec:	88ba      	ldrh	r2, [r7, #4]
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	3b04      	subs	r3, #4
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d110      	bne.n	8003018 <Sampling+0x58>
		{
			SUM = Checksum(&tx_buffer[2], i - 2);
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	3b02      	subs	r3, #2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	481d      	ldr	r0, [pc, #116]	@ (8003074 <Sampling+0xb4>)
 8003000:	f7ff fe79 	bl	8002cf6 <Checksum>
 8003004:	4603      	mov	r3, r0
 8003006:	80fb      	strh	r3, [r7, #6]
			tx_buffer[i] = (SUM >> 8) & 0xFF;
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	b29a      	uxth	r2, r3
 800300e:	88bb      	ldrh	r3, [r7, #4]
 8003010:	b2d1      	uxtb	r1, r2
 8003012:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <Sampling+0xb0>)
 8003014:	54d1      	strb	r1, [r2, r3]
 8003016:	e012      	b.n	800303e <Sampling+0x7e>
		}
		else if(i == length - 3)
 8003018:	88ba      	ldrh	r2, [r7, #4]
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	3b03      	subs	r3, #3
 800301e:	429a      	cmp	r2, r3
 8003020:	d105      	bne.n	800302e <Sampling+0x6e>
			tx_buffer[i] = SUM & 0xFF;
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	b2d1      	uxtb	r1, r2
 8003028:	4a11      	ldr	r2, [pc, #68]	@ (8003070 <Sampling+0xb0>)
 800302a:	54d1      	strb	r1, [r2, r3]
 800302c:	e007      	b.n	800303e <Sampling+0x7e>
		else
			tx_buffer[i] = *(rp1 + i);
 800302e:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <Sampling+0xac>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	88bb      	ldrh	r3, [r7, #4]
 8003034:	441a      	add	r2, r3
 8003036:	88bb      	ldrh	r3, [r7, #4]
 8003038:	7811      	ldrb	r1, [r2, #0]
 800303a:	4a0d      	ldr	r2, [pc, #52]	@ (8003070 <Sampling+0xb0>)
 800303c:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i < length;i++)
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	3301      	adds	r3, #1
 8003042:	80bb      	strh	r3, [r7, #4]
 8003044:	88ba      	ldrh	r2, [r7, #4]
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3c7      	bcc.n	8002fdc <Sampling+0x1c>
	}
	txstate = 1;
 800304c:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <Sampling+0xb8>)
 800304e:	2201      	movs	r2, #1
 8003050:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	461a      	mov	r2, r3
 8003056:	4906      	ldr	r1, [pc, #24]	@ (8003070 <Sampling+0xb0>)
 8003058:	4808      	ldr	r0, [pc, #32]	@ (800307c <Sampling+0xbc>)
 800305a:	f004 f865 	bl	8007128 <HAL_UART_Transmit_DMA>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200011b0 	.word	0x200011b0
 800306c:	200011ac 	.word	0x200011ac
 8003070:	200004bc 	.word	0x200004bc
 8003074:	200004be 	.word	0x200004be
 8003078:	200011da 	.word	0x200011da
 800307c:	20000c7c 	.word	0x20000c7c

08003080 <update_config_value>:

void update_config_value(char *config_buf, const char *key, int new_value) //更新配置文件内容
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b0ac      	sub	sp, #176	@ 0xb0
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
    char *ptr = strstr(config_buf, key);
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f00c fe33 	bl	800fcfa <strstr>
 8003094:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (ptr == NULL)
 8003098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d06e      	beq.n	800317e <update_config_value+0xfe>
    {
        return;
    }
    char *value_start = ptr + strlen(key);
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f7fd f8f5 	bl	8000290 <strlen>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030ac:	4413      	add	r3, r2
 80030ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    char *line_end = value_start;
 80030b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (*line_end != '\0' && *line_end != '\n')
 80030ba:	e004      	b.n	80030c6 <update_config_value+0x46>
    {
        line_end++;
 80030bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030c0:	3301      	adds	r3, #1
 80030c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (*line_end != '\0' && *line_end != '\n')
 80030c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <update_config_value+0x5a>
 80030d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b0a      	cmp	r3, #10
 80030d8:	d1f0      	bne.n	80030bc <update_config_value+0x3c>
    }
    char new_line[128];
    snprintf(new_line, sizeof(new_line), "%s%d", key, new_value);
 80030da:	f107 0014 	add.w	r0, r7, #20
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4a28      	ldr	r2, [pc, #160]	@ (8003188 <update_config_value+0x108>)
 80030e6:	2180      	movs	r1, #128	@ 0x80
 80030e8:	f00c fd38 	bl	800fb5c <sniprintf>
    size_t new_line_len = strlen(new_line);
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd f8cd 	bl	8000290 <strlen>
 80030f6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    size_t tail_len = strlen(line_end);
 80030fa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80030fe:	f7fd f8c7 	bl	8000290 <strlen>
 8003102:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    memmove(ptr + new_line_len, line_end, tail_len);
 8003106:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800310a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800310e:	4413      	add	r3, r2
 8003110:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003114:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003118:	4618      	mov	r0, r3
 800311a:	f00c fdba 	bl	800fc92 <memmove>
    memcpy(ptr, new_line, new_line_len);
 800311e:	f107 0314 	add.w	r3, r7, #20
 8003122:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003126:	4619      	mov	r1, r3
 8003128:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800312c:	f00c fe83 	bl	800fe36 <memcpy>
    if(strcmp(key, "PKWND=") == 0)
 8003130:	4916      	ldr	r1, [pc, #88]	@ (800318c <update_config_value+0x10c>)
 8003132:	68b8      	ldr	r0, [r7, #8]
 8003134:	f7fd f84c 	bl	80001d0 <strcmp>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d120      	bne.n	8003180 <update_config_value+0x100>
    {
    	ptr = strstr(config_buf, key);
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f00c fdda 	bl	800fcfa <strstr>
 8003146:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    	line_end = ptr + strlen(key);
 800314a:	68b8      	ldr	r0, [r7, #8]
 800314c:	f7fd f8a0 	bl	8000290 <strlen>
 8003150:	4602      	mov	r2, r0
 8003152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003156:	4413      	add	r3, r2
 8003158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    	while (*line_end != '\n')
 800315c:	e004      	b.n	8003168 <update_config_value+0xe8>
		{
			line_end++;
 800315e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003162:	3301      	adds	r3, #1
 8003164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    	while (*line_end != '\n')
 8003168:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b0a      	cmp	r3, #10
 8003170:	d1f5      	bne.n	800315e <update_config_value+0xde>
		}
    	*(line_end + 1) = '\0';
 8003172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003176:	3301      	adds	r3, #1
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e000      	b.n	8003180 <update_config_value+0x100>
        return;
 800317e:	bf00      	nop
    }
}
 8003180:	37a8      	adds	r7, #168	@ 0xa8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	080132d0 	.word	0x080132d0
 800318c:	080132d8 	.word	0x080132d8

08003190 <Parameterset_query>:

void Parameterset_query(void) //参数设置查询函数
{
 8003190:	b580      	push	{r7, lr}
 8003192:	f5ad 7d3c 	sub.w	sp, sp, #752	@ 0x2f0
 8003196:	af00      	add	r7, sp, #0
	uint16_t SUM;
	if(command == cmd3)
 8003198:	4b73      	ldr	r3, [pc, #460]	@ (8003368 <Parameterset_query+0x1d8>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	2b03      	cmp	r3, #3
 800319e:	f040 809a 	bne.w	80032d6 <Parameterset_query+0x146>
	{
		uint16_t code = (*rp3 << 8) | *(rp3 + 1);
 80031a2:	4b72      	ldr	r3, [pc, #456]	@ (800336c <Parameterset_query+0x1dc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	b21a      	sxth	r2, r3
 80031ae:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <Parameterset_query+0x1dc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	f8a7 32ec 	strh.w	r3, [r7, #748]	@ 0x2ec
		receivercode = code;
 80031c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003370 <Parameterset_query+0x1e0>)
 80031c2:	f8b7 32ec 	ldrh.w	r3, [r7, #748]	@ 0x2ec
 80031c6:	8013      	strh	r3, [r2, #0]
		PEAKTH = read_be16(rp3 + 2);
 80031c8:	4b68      	ldr	r3, [pc, #416]	@ (800336c <Parameterset_query+0x1dc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3302      	adds	r3, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fd7b 	bl	8002cca <read_be16>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b66      	ldr	r3, [pc, #408]	@ (8003374 <Parameterset_query+0x1e4>)
 80031da:	801a      	strh	r2, [r3, #0]
		ALMSTTH = read_be16(rp3 + 4);
 80031dc:	4b63      	ldr	r3, [pc, #396]	@ (800336c <Parameterset_query+0x1dc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fd71 	bl	8002cca <read_be16>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b62      	ldr	r3, [pc, #392]	@ (8003378 <Parameterset_query+0x1e8>)
 80031ee:	801a      	strh	r2, [r3, #0]
		PKWND = read_be16(rp3 + 6);
 80031f0:	4b5e      	ldr	r3, [pc, #376]	@ (800336c <Parameterset_query+0x1dc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3306      	adds	r3, #6
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fd67 	bl	8002cca <read_be16>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4b5e      	ldr	r3, [pc, #376]	@ (800337c <Parameterset_query+0x1ec>)
 8003202:	801a      	strh	r2, [r3, #0]
		ASIC_RST();
 8003204:	f7ff fd4e 	bl	8002ca4 <ASIC_RST>
		ASIC_CMD(0x01, PEAKTH);
 8003208:	4b5a      	ldr	r3, [pc, #360]	@ (8003374 <Parameterset_query+0x1e4>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	2001      	movs	r0, #1
 8003210:	f7ff fcac 	bl	8002b6c <ASIC_CMD>
		ASIC_CMD(0x02, ALMSTTH);
 8003214:	4b58      	ldr	r3, [pc, #352]	@ (8003378 <Parameterset_query+0x1e8>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	2002      	movs	r0, #2
 800321c:	f7ff fca6 	bl	8002b6c <ASIC_CMD>
		ASIC_CMD(0x04, PKWND);
 8003220:	4b56      	ldr	r3, [pc, #344]	@ (800337c <Parameterset_query+0x1ec>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	4619      	mov	r1, r3
 8003226:	2004      	movs	r0, #4
 8003228:	f7ff fca0 	bl	8002b6c <ASIC_CMD>
		char config_buf[128];
		FIL fil;
		UINT bytes_written;
		if(read_config(config_buf, sizeof(config_buf)) == FR_OK)
 800322c:	463b      	mov	r3, r7
 800322e:	2180      	movs	r1, #128	@ 0x80
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe fd5f 	bl	8001cf4 <read_config>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d120      	bne.n	800327e <Parameterset_query+0xee>
		{
			update_config_value(config_buf, "Receivercode=", receivercode);
 800323c:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <Parameterset_query+0x1e0>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	463b      	mov	r3, r7
 8003246:	494e      	ldr	r1, [pc, #312]	@ (8003380 <Parameterset_query+0x1f0>)
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff19 	bl	8003080 <update_config_value>
			update_config_value(config_buf, "PEAKTH=", PEAKTH);
 800324e:	4b49      	ldr	r3, [pc, #292]	@ (8003374 <Parameterset_query+0x1e4>)
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	463b      	mov	r3, r7
 8003256:	494b      	ldr	r1, [pc, #300]	@ (8003384 <Parameterset_query+0x1f4>)
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff11 	bl	8003080 <update_config_value>
			update_config_value(config_buf, "ALMSTTH=", ALMSTTH);
 800325e:	4b46      	ldr	r3, [pc, #280]	@ (8003378 <Parameterset_query+0x1e8>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	463b      	mov	r3, r7
 8003266:	4948      	ldr	r1, [pc, #288]	@ (8003388 <Parameterset_query+0x1f8>)
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff09 	bl	8003080 <update_config_value>
			update_config_value(config_buf, "PKWND=", PKWND);
 800326e:	4b43      	ldr	r3, [pc, #268]	@ (800337c <Parameterset_query+0x1ec>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	463b      	mov	r3, r7
 8003276:	4945      	ldr	r1, [pc, #276]	@ (800338c <Parameterset_query+0x1fc>)
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff01 	bl	8003080 <update_config_value>
		}
		f_open(&fil, CONFIG_FILE, FA_OPEN_ALWAYS | FA_WRITE);
 800327e:	4b44      	ldr	r3, [pc, #272]	@ (8003390 <Parameterset_query+0x200>)
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003286:	2212      	movs	r2, #18
 8003288:	4618      	mov	r0, r3
 800328a:	f009 f8d5 	bl	800c438 <f_open>
		f_write(&fil, config_buf, strlen(config_buf), &bytes_written);
 800328e:	463b      	mov	r3, r7
 8003290:	4618      	mov	r0, r3
 8003292:	f7fc fffd 	bl	8000290 <strlen>
 8003296:	4602      	mov	r2, r0
 8003298:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 800329c:	4639      	mov	r1, r7
 800329e:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80032a2:	f009 fd1b 	bl	800ccdc <f_write>
		f_close(&fil);
 80032a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80032aa:	4618      	mov	r0, r3
 80032ac:	f009 fffc 	bl	800d2a8 <f_close>
		tx_buffer[rp3 - rp1 + 8] = 0x7E;
 80032b0:	4b2e      	ldr	r3, [pc, #184]	@ (800336c <Parameterset_query+0x1dc>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b37      	ldr	r3, [pc, #220]	@ (8003394 <Parameterset_query+0x204>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	3308      	adds	r3, #8
 80032bc:	4a36      	ldr	r2, [pc, #216]	@ (8003398 <Parameterset_query+0x208>)
 80032be:	217e      	movs	r1, #126	@ 0x7e
 80032c0:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 9] = 0xFE;
 80032c2:	4b2a      	ldr	r3, [pc, #168]	@ (800336c <Parameterset_query+0x1dc>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b33      	ldr	r3, [pc, #204]	@ (8003394 <Parameterset_query+0x204>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	3309      	adds	r3, #9
 80032ce:	4a32      	ldr	r2, [pc, #200]	@ (8003398 <Parameterset_query+0x208>)
 80032d0:	21fe      	movs	r1, #254	@ 0xfe
 80032d2:	54d1      	strb	r1, [r2, r3]
 80032d4:	e043      	b.n	800335e <Parameterset_query+0x1ce>
	}
	else
	{
		ReadResult();
 80032d6:	f7ff fc7d 	bl	8002bd4 <ReadResult>
		tx_buffer[rp3 - rp1 + 6] = (FREQ >> 8) & 0xFF;
 80032da:	4b30      	ldr	r3, [pc, #192]	@ (800339c <Parameterset_query+0x20c>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	b299      	uxth	r1, r3
 80032e2:	4b22      	ldr	r3, [pc, #136]	@ (800336c <Parameterset_query+0x1dc>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <Parameterset_query+0x204>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	3306      	adds	r3, #6
 80032ee:	b2c9      	uxtb	r1, r1
 80032f0:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <Parameterset_query+0x208>)
 80032f2:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 7] = FREQ & 0xFF;
 80032f4:	4b29      	ldr	r3, [pc, #164]	@ (800339c <Parameterset_query+0x20c>)
 80032f6:	8819      	ldrh	r1, [r3, #0]
 80032f8:	4b1c      	ldr	r3, [pc, #112]	@ (800336c <Parameterset_query+0x1dc>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b25      	ldr	r3, [pc, #148]	@ (8003394 <Parameterset_query+0x204>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	3307      	adds	r3, #7
 8003304:	b2c9      	uxtb	r1, r1
 8003306:	4a24      	ldr	r2, [pc, #144]	@ (8003398 <Parameterset_query+0x208>)
 8003308:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 8] = (firmware >> 8) & 0xFF;
 800330a:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <Parameterset_query+0x210>)
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	b299      	uxth	r1, r3
 8003312:	4b16      	ldr	r3, [pc, #88]	@ (800336c <Parameterset_query+0x1dc>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <Parameterset_query+0x204>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	3308      	adds	r3, #8
 800331e:	b2c9      	uxtb	r1, r1
 8003320:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <Parameterset_query+0x208>)
 8003322:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 9] = firmware & 0xFF;
 8003324:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <Parameterset_query+0x210>)
 8003326:	8819      	ldrh	r1, [r3, #0]
 8003328:	4b10      	ldr	r3, [pc, #64]	@ (800336c <Parameterset_query+0x1dc>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <Parameterset_query+0x204>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	3309      	adds	r3, #9
 8003334:	b2c9      	uxtb	r1, r1
 8003336:	4a18      	ldr	r2, [pc, #96]	@ (8003398 <Parameterset_query+0x208>)
 8003338:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 12] = 0x7E;
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <Parameterset_query+0x1dc>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <Parameterset_query+0x204>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	330c      	adds	r3, #12
 8003346:	4a14      	ldr	r2, [pc, #80]	@ (8003398 <Parameterset_query+0x208>)
 8003348:	217e      	movs	r1, #126	@ 0x7e
 800334a:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 13] = 0xFE;
 800334c:	4b07      	ldr	r3, [pc, #28]	@ (800336c <Parameterset_query+0x1dc>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <Parameterset_query+0x204>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	330d      	adds	r3, #13
 8003358:	4a0f      	ldr	r2, [pc, #60]	@ (8003398 <Parameterset_query+0x208>)
 800335a:	21fe      	movs	r1, #254	@ 0xfe
 800335c:	54d1      	strb	r1, [r2, r3]
	}
	for(uint16_t i = 0;i < rp3 - rp1 + 6;i++)
 800335e:	2300      	movs	r3, #0
 8003360:	f8a7 32ee 	strh.w	r3, [r7, #750]	@ 0x2ee
 8003364:	e0bc      	b.n	80034e0 <Parameterset_query+0x350>
 8003366:	bf00      	nop
 8003368:	200011a8 	.word	0x200011a8
 800336c:	200011b4 	.word	0x200011b4
 8003370:	20000022 	.word	0x20000022
 8003374:	20000010 	.word	0x20000010
 8003378:	20000012 	.word	0x20000012
 800337c:	20000014 	.word	0x20000014
 8003380:	080132e0 	.word	0x080132e0
 8003384:	080132f0 	.word	0x080132f0
 8003388:	080132f8 	.word	0x080132f8
 800338c:	080132d8 	.word	0x080132d8
 8003390:	20000000 	.word	0x20000000
 8003394:	200011ac 	.word	0x200011ac
 8003398:	200004bc 	.word	0x200004bc
 800339c:	20000032 	.word	0x20000032
 80033a0:	2000002c 	.word	0x2000002c
	{
		if(i < rp3 - rp1)
 80033a4:	f8b7 22ee 	ldrh.w	r2, [r7, #750]	@ 0x2ee
 80033a8:	4b7f      	ldr	r3, [pc, #508]	@ (80035a8 <Parameterset_query+0x418>)
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	4b7f      	ldr	r3, [pc, #508]	@ (80035ac <Parameterset_query+0x41c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	1acb      	subs	r3, r1, r3
 80033b2:	429a      	cmp	r2, r3
 80033b4:	da09      	bge.n	80033ca <Parameterset_query+0x23a>
			tx_buffer[i] = *(rp1 + i);
 80033b6:	4b7d      	ldr	r3, [pc, #500]	@ (80035ac <Parameterset_query+0x41c>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033be:	441a      	add	r2, r3
 80033c0:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033c4:	7811      	ldrb	r1, [r2, #0]
 80033c6:	4a7a      	ldr	r2, [pc, #488]	@ (80035b0 <Parameterset_query+0x420>)
 80033c8:	54d1      	strb	r1, [r2, r3]
		if(command == cmd3)
 80033ca:	4b7a      	ldr	r3, [pc, #488]	@ (80035b4 <Parameterset_query+0x424>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d11b      	bne.n	800340a <Parameterset_query+0x27a>
		{
			if(i >= 3 && i <= 4)
 80033d2:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d90e      	bls.n	80033f8 <Parameterset_query+0x268>
 80033da:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d80a      	bhi.n	80033f8 <Parameterset_query+0x268>
				tx_buffer[i] = *(rp3 + i - 3);
 80033e2:	4b71      	ldr	r3, [pc, #452]	@ (80035a8 <Parameterset_query+0x418>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033ea:	3b03      	subs	r3, #3
 80033ec:	441a      	add	r2, r3
 80033ee:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033f2:	7811      	ldrb	r1, [r2, #0]
 80033f4:	4a6e      	ldr	r2, [pc, #440]	@ (80035b0 <Parameterset_query+0x420>)
 80033f6:	54d1      	strb	r1, [r2, r3]
			if(i == 7)
 80033f8:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	d104      	bne.n	800340a <Parameterset_query+0x27a>
				tx_buffer[i] = 0x06;
 8003400:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003404:	4a6a      	ldr	r2, [pc, #424]	@ (80035b0 <Parameterset_query+0x420>)
 8003406:	2106      	movs	r1, #6
 8003408:	54d1      	strb	r1, [r2, r3]
		}
		if(command == cmd4 && i == 7)
 800340a:	4b6a      	ldr	r3, [pc, #424]	@ (80035b4 <Parameterset_query+0x424>)
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d108      	bne.n	8003424 <Parameterset_query+0x294>
 8003412:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003416:	2b07      	cmp	r3, #7
 8003418:	d104      	bne.n	8003424 <Parameterset_query+0x294>
			tx_buffer[i] = 0x0A;
 800341a:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 800341e:	4a64      	ldr	r2, [pc, #400]	@ (80035b0 <Parameterset_query+0x420>)
 8003420:	210a      	movs	r1, #10
 8003422:	54d1      	strb	r1, [r2, r3]
		if(i == 5)
 8003424:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003428:	2b05      	cmp	r3, #5
 800342a:	d104      	bne.n	8003436 <Parameterset_query+0x2a6>
			tx_buffer[i] = 0x01;
 800342c:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003430:	4a5f      	ldr	r2, [pc, #380]	@ (80035b0 <Parameterset_query+0x420>)
 8003432:	2101      	movs	r1, #1
 8003434:	54d1      	strb	r1, [r2, r3]
		if(i == rp3 - rp1)
 8003436:	f8b7 22ee 	ldrh.w	r2, [r7, #750]	@ 0x2ee
 800343a:	4b5b      	ldr	r3, [pc, #364]	@ (80035a8 <Parameterset_query+0x418>)
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	4b5b      	ldr	r3, [pc, #364]	@ (80035ac <Parameterset_query+0x41c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1acb      	subs	r3, r1, r3
 8003444:	429a      	cmp	r2, r3
 8003446:	d110      	bne.n	800346a <Parameterset_query+0x2da>
		{
			tx_buffer[i] = (PEAKTH >> 8) & 0xFF;
 8003448:	4b5b      	ldr	r3, [pc, #364]	@ (80035b8 <Parameterset_query+0x428>)
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	b29a      	uxth	r2, r3
 8003450:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003454:	b2d1      	uxtb	r1, r2
 8003456:	4a56      	ldr	r2, [pc, #344]	@ (80035b0 <Parameterset_query+0x420>)
 8003458:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = PEAKTH & 0xFF;
 800345a:	4b57      	ldr	r3, [pc, #348]	@ (80035b8 <Parameterset_query+0x428>)
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003462:	3301      	adds	r3, #1
 8003464:	b2d1      	uxtb	r1, r2
 8003466:	4a52      	ldr	r2, [pc, #328]	@ (80035b0 <Parameterset_query+0x420>)
 8003468:	54d1      	strb	r1, [r2, r3]
		}
		if(i == rp3 - rp1 + 2)
 800346a:	f8b7 22ee 	ldrh.w	r2, [r7, #750]	@ 0x2ee
 800346e:	4b4e      	ldr	r3, [pc, #312]	@ (80035a8 <Parameterset_query+0x418>)
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	4b4e      	ldr	r3, [pc, #312]	@ (80035ac <Parameterset_query+0x41c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	1acb      	subs	r3, r1, r3
 8003478:	3302      	adds	r3, #2
 800347a:	429a      	cmp	r2, r3
 800347c:	d110      	bne.n	80034a0 <Parameterset_query+0x310>
		{
			tx_buffer[i] = (ALMSTTH >> 8) & 0xFF;
 800347e:	4b4f      	ldr	r3, [pc, #316]	@ (80035bc <Parameterset_query+0x42c>)
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	b29a      	uxth	r2, r3
 8003486:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 800348a:	b2d1      	uxtb	r1, r2
 800348c:	4a48      	ldr	r2, [pc, #288]	@ (80035b0 <Parameterset_query+0x420>)
 800348e:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = ALMSTTH & 0xFF;
 8003490:	4b4a      	ldr	r3, [pc, #296]	@ (80035bc <Parameterset_query+0x42c>)
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003498:	3301      	adds	r3, #1
 800349a:	b2d1      	uxtb	r1, r2
 800349c:	4a44      	ldr	r2, [pc, #272]	@ (80035b0 <Parameterset_query+0x420>)
 800349e:	54d1      	strb	r1, [r2, r3]
		}
		if(i == rp3 - rp1 + 4)
 80034a0:	f8b7 22ee 	ldrh.w	r2, [r7, #750]	@ 0x2ee
 80034a4:	4b40      	ldr	r3, [pc, #256]	@ (80035a8 <Parameterset_query+0x418>)
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	4b40      	ldr	r3, [pc, #256]	@ (80035ac <Parameterset_query+0x41c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1acb      	subs	r3, r1, r3
 80034ae:	3304      	adds	r3, #4
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d110      	bne.n	80034d6 <Parameterset_query+0x346>
		{
			tx_buffer[i] = (PKWND >> 8) & 0xFF;
 80034b4:	4b42      	ldr	r3, [pc, #264]	@ (80035c0 <Parameterset_query+0x430>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80034c0:	b2d1      	uxtb	r1, r2
 80034c2:	4a3b      	ldr	r2, [pc, #236]	@ (80035b0 <Parameterset_query+0x420>)
 80034c4:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = PKWND & 0xFF;
 80034c6:	4b3e      	ldr	r3, [pc, #248]	@ (80035c0 <Parameterset_query+0x430>)
 80034c8:	881a      	ldrh	r2, [r3, #0]
 80034ca:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80034ce:	3301      	adds	r3, #1
 80034d0:	b2d1      	uxtb	r1, r2
 80034d2:	4a37      	ldr	r2, [pc, #220]	@ (80035b0 <Parameterset_query+0x420>)
 80034d4:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i < rp3 - rp1 + 6;i++)
 80034d6:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80034da:	3301      	adds	r3, #1
 80034dc:	f8a7 32ee 	strh.w	r3, [r7, #750]	@ 0x2ee
 80034e0:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <Parameterset_query+0x418>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <Parameterset_query+0x41c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	1d5a      	adds	r2, r3, #5
 80034ec:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f6bf af57 	bge.w	80033a4 <Parameterset_query+0x214>
		}
	}
	size_t txlen = 12 + tx_buffer[7];
 80034f6:	4b2e      	ldr	r3, [pc, #184]	@ (80035b0 <Parameterset_query+0x420>)
 80034f8:	79db      	ldrb	r3, [r3, #7]
 80034fa:	330c      	adds	r3, #12
 80034fc:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
	size_t checklength = 6 + tx_buffer[7];
 8003500:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <Parameterset_query+0x420>)
 8003502:	79db      	ldrb	r3, [r3, #7]
 8003504:	3306      	adds	r3, #6
 8003506:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
	SUM = Checksum(&tx_buffer[2], checklength);
 800350a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800350e:	b29b      	uxth	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	482c      	ldr	r0, [pc, #176]	@ (80035c4 <Parameterset_query+0x434>)
 8003514:	f7ff fbef 	bl	8002cf6 <Checksum>
 8003518:	4603      	mov	r3, r0
 800351a:	f8a7 32e2 	strh.w	r3, [r7, #738]	@ 0x2e2
	if(command == 3)
 800351e:	4b25      	ldr	r3, [pc, #148]	@ (80035b4 <Parameterset_query+0x424>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d118      	bne.n	8003558 <Parameterset_query+0x3c8>
	{
		tx_buffer[rp3 - rp1 + 6] = (SUM >> 8) & 0xFF;
 8003526:	f8b7 32e2 	ldrh.w	r3, [r7, #738]	@ 0x2e2
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	b299      	uxth	r1, r3
 800352e:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <Parameterset_query+0x418>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <Parameterset_query+0x41c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	3306      	adds	r3, #6
 800353a:	b2c9      	uxtb	r1, r1
 800353c:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <Parameterset_query+0x420>)
 800353e:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 7] = SUM & 0xFF;
 8003540:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <Parameterset_query+0x418>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b19      	ldr	r3, [pc, #100]	@ (80035ac <Parameterset_query+0x41c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	3307      	adds	r3, #7
 800354c:	f8b7 22e2 	ldrh.w	r2, [r7, #738]	@ 0x2e2
 8003550:	b2d1      	uxtb	r1, r2
 8003552:	4a17      	ldr	r2, [pc, #92]	@ (80035b0 <Parameterset_query+0x420>)
 8003554:	54d1      	strb	r1, [r2, r3]
 8003556:	e017      	b.n	8003588 <Parameterset_query+0x3f8>
	}
	else
	{
		tx_buffer[rp3 - rp1 + 10] = (SUM >> 8) & 0xFF;
 8003558:	f8b7 32e2 	ldrh.w	r3, [r7, #738]	@ 0x2e2
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	b299      	uxth	r1, r3
 8003560:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <Parameterset_query+0x418>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <Parameterset_query+0x41c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	330a      	adds	r3, #10
 800356c:	b2c9      	uxtb	r1, r1
 800356e:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <Parameterset_query+0x420>)
 8003570:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 11] = SUM & 0xFF;
 8003572:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <Parameterset_query+0x418>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <Parameterset_query+0x41c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	330b      	adds	r3, #11
 800357e:	f8b7 22e2 	ldrh.w	r2, [r7, #738]	@ 0x2e2
 8003582:	b2d1      	uxtb	r1, r2
 8003584:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <Parameterset_query+0x420>)
 8003586:	54d1      	strb	r1, [r2, r3]
	}
	txstate = 1;
 8003588:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <Parameterset_query+0x438>)
 800358a:	2201      	movs	r2, #1
 800358c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, txlen);
 800358e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8003592:	b29b      	uxth	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	4906      	ldr	r1, [pc, #24]	@ (80035b0 <Parameterset_query+0x420>)
 8003598:	480c      	ldr	r0, [pc, #48]	@ (80035cc <Parameterset_query+0x43c>)
 800359a:	f003 fdc5 	bl	8007128 <HAL_UART_Transmit_DMA>
}
 800359e:	bf00      	nop
 80035a0:	f507 773c 	add.w	r7, r7, #752	@ 0x2f0
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200011b4 	.word	0x200011b4
 80035ac:	200011ac 	.word	0x200011ac
 80035b0:	200004bc 	.word	0x200004bc
 80035b4:	200011a8 	.word	0x200011a8
 80035b8:	20000010 	.word	0x20000010
 80035bc:	20000012 	.word	0x20000012
 80035c0:	20000014 	.word	0x20000014
 80035c4:	200004be 	.word	0x200004be
 80035c8:	200011da 	.word	0x200011da
 80035cc:	20000c7c 	.word	0x20000c7c

080035d0 <get_current_systick>:

uint64_t get_current_systick(void) //获取当前系统计时 (µs)
{
 80035d0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
  uint32_t high1, low;
  do
  {
    high1 = (uint32_t)(high_counter >> 32);
 80035d8:	4b16      	ldr	r3, [pc, #88]	@ (8003634 <get_current_systick+0x64>)
 80035da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	464a      	mov	r2, r9
 80035e8:	2300      	movs	r3, #0
 80035ea:	4613      	mov	r3, r2
 80035ec:	607b      	str	r3, [r7, #4]
    low = TIM2->CNT;
 80035ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	603b      	str	r3, [r7, #0]
  } while (high1 != (uint32_t)(high_counter >> 32));
 80035f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <get_current_systick+0x64>)
 80035f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	464a      	mov	r2, r9
 8003606:	2300      	movs	r3, #0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4293      	cmp	r3, r2
 800360c:	d1e4      	bne.n	80035d8 <get_current_systick+0x8>
  return high_counter + low; // 返回64位，低32位为定时器记录，高32位由high_counter记录
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	4618      	mov	r0, r3
 8003614:	4611      	mov	r1, r2
 8003616:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <get_current_systick+0x64>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	1884      	adds	r4, r0, r2
 800361e:	eb41 0503 	adc.w	r5, r1, r3
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
}
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003632:	4770      	bx	lr
 8003634:	200011c0 	.word	0x200011c0

08003638 <set_base_time>:

void set_base_time(uint64_t timestamp) // 设置时间基准
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	e9c7 0100 	strd	r0, r1, [r7]
  base_timestamp = timestamp;
 8003642:	4908      	ldr	r1, [pc, #32]	@ (8003664 <set_base_time+0x2c>)
 8003644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003648:	e9c1 2300 	strd	r2, r3, [r1]
  base_systick = get_current_systick();
 800364c:	f7ff ffc0 	bl	80035d0 <get_current_systick>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4904      	ldr	r1, [pc, #16]	@ (8003668 <set_base_time+0x30>)
 8003656:	e9c1 2300 	strd	r2, r3, [r1]
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200011c8 	.word	0x200011c8
 8003668:	200011d0 	.word	0x200011d0

0800366c <get_current_timestamp>:

uint64_t get_current_timestamp(void) //获取当前时间戳 (µs)
{
 800366c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
  uint64_t current_systick = get_current_systick();
 8003674:	f7ff ffac 	bl	80035d0 <get_current_systick>
 8003678:	e9c7 0100 	strd	r0, r1, [r7]
  return base_timestamp + (current_systick - base_systick);
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <get_current_timestamp+0x40>)
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003686:	1a84      	subs	r4, r0, r2
 8003688:	eb61 0503 	sbc.w	r5, r1, r3
 800368c:	4b08      	ldr	r3, [pc, #32]	@ (80036b0 <get_current_timestamp+0x44>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	eb14 0802 	adds.w	r8, r4, r2
 8003696:	eb45 0903 	adc.w	r9, r5, r3
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
}
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036aa:	bf00      	nop
 80036ac:	200011d0 	.word	0x200011d0
 80036b0:	200011c8 	.word	0x200011c8

080036b4 <Send_time>:

void Send_time(void) // 校时
{
 80036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b8:	b08b      	sub	sp, #44	@ 0x2c
 80036ba:	af00      	add	r7, sp, #0
	uint64_t timestamp = 0;
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(uint16_t i = 0; i < 8;i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	83fb      	strh	r3, [r7, #30]
 80036cc:	e01b      	b.n	8003706 <Send_time+0x52>
	timestamp = (timestamp << 8) | *(rp3 + i);
 80036ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	020b      	lsls	r3, r1, #8
 80036dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036e0:	0202      	lsls	r2, r0, #8
 80036e2:	4955      	ldr	r1, [pc, #340]	@ (8003838 <Send_time+0x184>)
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	8bf9      	ldrh	r1, [r7, #30]
 80036e8:	4401      	add	r1, r0
 80036ea:	7809      	ldrb	r1, [r1, #0]
 80036ec:	b2c9      	uxtb	r1, r1
 80036ee:	2000      	movs	r0, #0
 80036f0:	4688      	mov	r8, r1
 80036f2:	4681      	mov	r9, r0
 80036f4:	ea42 0a08 	orr.w	sl, r2, r8
 80036f8:	ea43 0b09 	orr.w	fp, r3, r9
 80036fc:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	for(uint16_t i = 0; i < 8;i++)
 8003700:	8bfb      	ldrh	r3, [r7, #30]
 8003702:	3301      	adds	r3, #1
 8003704:	83fb      	strh	r3, [r7, #30]
 8003706:	8bfb      	ldrh	r3, [r7, #30]
 8003708:	2b07      	cmp	r3, #7
 800370a:	d9e0      	bls.n	80036ce <Send_time+0x1a>
	set_base_time(timestamp);
 800370c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003710:	f7ff ff92 	bl	8003638 <set_base_time>
	uint64_t current_timestamp = get_current_timestamp();
 8003714:	f7ff ffaa 	bl	800366c <get_current_timestamp>
 8003718:	e9c7 0104 	strd	r0, r1, [r7, #16]
	for(uint16_t i = 0; i < 8;i++)
 800371c:	2300      	movs	r3, #0
 800371e:	83bb      	strh	r3, [r7, #28]
 8003720:	e01b      	b.n	800375a <Send_time+0xa6>
	tx_buffer[i + 8] = (current_timestamp >> (56 - 8 * i)) & 0xFF;
 8003722:	8bbb      	ldrh	r3, [r7, #28]
 8003724:	f1c3 0307 	rsb	r3, r3, #7
 8003728:	00d9      	lsls	r1, r3, #3
 800372a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800372e:	f1c1 0620 	rsb	r6, r1, #32
 8003732:	f1a1 0020 	sub.w	r0, r1, #32
 8003736:	fa22 f401 	lsr.w	r4, r2, r1
 800373a:	fa03 f606 	lsl.w	r6, r3, r6
 800373e:	4334      	orrs	r4, r6
 8003740:	fa23 f000 	lsr.w	r0, r3, r0
 8003744:	4304      	orrs	r4, r0
 8003746:	fa23 f501 	lsr.w	r5, r3, r1
 800374a:	8bbb      	ldrh	r3, [r7, #28]
 800374c:	3308      	adds	r3, #8
 800374e:	b2e1      	uxtb	r1, r4
 8003750:	4a3a      	ldr	r2, [pc, #232]	@ (800383c <Send_time+0x188>)
 8003752:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < 8;i++)
 8003754:	8bbb      	ldrh	r3, [r7, #28]
 8003756:	3301      	adds	r3, #1
 8003758:	83bb      	strh	r3, [r7, #28]
 800375a:	8bbb      	ldrh	r3, [r7, #28]
 800375c:	2b07      	cmp	r3, #7
 800375e:	d9e0      	bls.n	8003722 <Send_time+0x6e>
	for(uint16_t j = 0;j < rp3 - rp1;j++)
 8003760:	2300      	movs	r3, #0
 8003762:	837b      	strh	r3, [r7, #26]
 8003764:	e011      	b.n	800378a <Send_time+0xd6>
	{
		tx_buffer[j] = *(rp1 + j);
 8003766:	4b36      	ldr	r3, [pc, #216]	@ (8003840 <Send_time+0x18c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	8b7b      	ldrh	r3, [r7, #26]
 800376c:	441a      	add	r2, r3
 800376e:	8b7b      	ldrh	r3, [r7, #26]
 8003770:	7811      	ldrb	r1, [r2, #0]
 8003772:	4a32      	ldr	r2, [pc, #200]	@ (800383c <Send_time+0x188>)
 8003774:	54d1      	strb	r1, [r2, r3]
		if(j == 5)
 8003776:	8b7b      	ldrh	r3, [r7, #26]
 8003778:	2b05      	cmp	r3, #5
 800377a:	d103      	bne.n	8003784 <Send_time+0xd0>
			tx_buffer[j] = 0x01;
 800377c:	8b7b      	ldrh	r3, [r7, #26]
 800377e:	4a2f      	ldr	r2, [pc, #188]	@ (800383c <Send_time+0x188>)
 8003780:	2101      	movs	r1, #1
 8003782:	54d1      	strb	r1, [r2, r3]
	for(uint16_t j = 0;j < rp3 - rp1;j++)
 8003784:	8b7b      	ldrh	r3, [r7, #26]
 8003786:	3301      	adds	r3, #1
 8003788:	837b      	strh	r3, [r7, #26]
 800378a:	8b7a      	ldrh	r2, [r7, #26]
 800378c:	4b2a      	ldr	r3, [pc, #168]	@ (8003838 <Send_time+0x184>)
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <Send_time+0x18c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1acb      	subs	r3, r1, r3
 8003796:	429a      	cmp	r2, r3
 8003798:	dbe5      	blt.n	8003766 <Send_time+0xb2>
	}
	size_t checklength = 6 + tx_buffer[7];
 800379a:	4b28      	ldr	r3, [pc, #160]	@ (800383c <Send_time+0x188>)
 800379c:	79db      	ldrb	r3, [r3, #7]
 800379e:	3306      	adds	r3, #6
 80037a0:	60fb      	str	r3, [r7, #12]
	size_t txlen = 12 + tx_buffer[7];
 80037a2:	4b26      	ldr	r3, [pc, #152]	@ (800383c <Send_time+0x188>)
 80037a4:	79db      	ldrb	r3, [r3, #7]
 80037a6:	330c      	adds	r3, #12
 80037a8:	60bb      	str	r3, [r7, #8]
	uint16_t SUM = Checksum(&tx_buffer[2], checklength);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	4824      	ldr	r0, [pc, #144]	@ (8003844 <Send_time+0x190>)
 80037b2:	f7ff faa0 	bl	8002cf6 <Checksum>
 80037b6:	4603      	mov	r3, r0
 80037b8:	80fb      	strh	r3, [r7, #6]
	tx_buffer[rp3 - rp1 + 8] = (SUM >> 8) & 0xFF;
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	b299      	uxth	r1, r3
 80037c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <Send_time+0x184>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <Send_time+0x18c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	3308      	adds	r3, #8
 80037cc:	b2c9      	uxtb	r1, r1
 80037ce:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <Send_time+0x188>)
 80037d0:	54d1      	strb	r1, [r2, r3]
	tx_buffer[rp3 - rp1 + 9] = SUM & 0xFF;
 80037d2:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <Send_time+0x184>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <Send_time+0x18c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	3309      	adds	r3, #9
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	b2d1      	uxtb	r1, r2
 80037e2:	4a16      	ldr	r2, [pc, #88]	@ (800383c <Send_time+0x188>)
 80037e4:	54d1      	strb	r1, [r2, r3]
	uint16_t tail = TAIL;
 80037e6:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 80037ea:	80bb      	strh	r3, [r7, #4]
	tx_buffer[rp3 - rp1 + 10] = (tail >> 8) & 0xFF;
 80037ec:	88bb      	ldrh	r3, [r7, #4]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	b299      	uxth	r1, r3
 80037f2:	4b11      	ldr	r3, [pc, #68]	@ (8003838 <Send_time+0x184>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <Send_time+0x18c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	330a      	adds	r3, #10
 80037fe:	b2c9      	uxtb	r1, r1
 8003800:	4a0e      	ldr	r2, [pc, #56]	@ (800383c <Send_time+0x188>)
 8003802:	54d1      	strb	r1, [r2, r3]
	tx_buffer[rp3 - rp1 + 11] = tail & 0xFF;
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <Send_time+0x184>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <Send_time+0x18c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	330b      	adds	r3, #11
 8003810:	88ba      	ldrh	r2, [r7, #4]
 8003812:	b2d1      	uxtb	r1, r2
 8003814:	4a09      	ldr	r2, [pc, #36]	@ (800383c <Send_time+0x188>)
 8003816:	54d1      	strb	r1, [r2, r3]
	txstate = 1;
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <Send_time+0x194>)
 800381a:	2201      	movs	r2, #1
 800381c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, txlen);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	4905      	ldr	r1, [pc, #20]	@ (800383c <Send_time+0x188>)
 8003826:	4809      	ldr	r0, [pc, #36]	@ (800384c <Send_time+0x198>)
 8003828:	f003 fc7e 	bl	8007128 <HAL_UART_Transmit_DMA>
}
 800382c:	bf00      	nop
 800382e:	372c      	adds	r7, #44	@ 0x2c
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003836:	bf00      	nop
 8003838:	200011b4 	.word	0x200011b4
 800383c:	200004bc 	.word	0x200004bc
 8003840:	200011ac 	.word	0x200011ac
 8003844:	200004be 	.word	0x200004be
 8003848:	200011da 	.word	0x200011da
 800384c:	20000c7c 	.word	0x20000c7c

08003850 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //5s触发增加一次heartcount记数，每30s发送一次心跳
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0e      	ldr	r2, [pc, #56]	@ (8003898 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d106      	bne.n	8003870 <HAL_TIM_PeriodElapsedCallback+0x20>
		  heartcount++;
 8003862:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800386e:	801a      	strh	r2, [r3, #0]
	  if(heartcount >= 1)
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_TIM_PeriodElapsedCallback+0x3e>
	  {
		  Sendheart();
 800387a:	f000 f811 	bl	80038a0 <Sendheart>
		  heartcount = 0;
 800387e:	4b07      	ldr	r3, [pc, #28]	@ (800389c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003880:	2200      	movs	r2, #0
 8003882:	801a      	strh	r2, [r3, #0]
		  Toggle_R();
 8003884:	2101      	movs	r1, #1
 8003886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800388a:	f001 f80b 	bl	80048a4 <HAL_GPIO_TogglePin>
	  }
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40001000 	.word	0x40001000
 800389c:	200011de 	.word	0x200011de

080038a0 <Sendheart>:

void Sendheart(void) //发送心跳
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
	  uint16_t length = 14;
 80038a6:	230e      	movs	r3, #14
 80038a8:	80fb      	strh	r3, [r7, #6]
	  static uint8_t hearttx[14];
	  uint16_t head = HEAD;
 80038aa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80038ae:	80bb      	strh	r3, [r7, #4]
	  uint16_t tail = TAIL;
 80038b0:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 80038b4:	807b      	strh	r3, [r7, #2]
	  hearttx[0] = (head >> 8) & 0xFF;
 80038b6:	88bb      	ldrh	r3, [r7, #4]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4b28      	ldr	r3, [pc, #160]	@ (8003960 <Sendheart+0xc0>)
 80038c0:	701a      	strb	r2, [r3, #0]
	  hearttx[1] = head & 0xFF;
 80038c2:	88bb      	ldrh	r3, [r7, #4]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4b26      	ldr	r3, [pc, #152]	@ (8003960 <Sendheart+0xc0>)
 80038c8:	705a      	strb	r2, [r3, #1]
	  hearttx[2] = version;
 80038ca:	4b26      	ldr	r3, [pc, #152]	@ (8003964 <Sendheart+0xc4>)
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	4b24      	ldr	r3, [pc, #144]	@ (8003960 <Sendheart+0xc0>)
 80038d0:	709a      	strb	r2, [r3, #2]
	  hearttx[3] = (receivercode >> 8) & 0xFF;
 80038d2:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <Sendheart+0xc8>)
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	b29b      	uxth	r3, r3
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <Sendheart+0xc0>)
 80038e0:	70da      	strb	r2, [r3, #3]
	  hearttx[4] = receivercode & 0xFF;
 80038e2:	4b21      	ldr	r3, [pc, #132]	@ (8003968 <Sendheart+0xc8>)
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003960 <Sendheart+0xc0>)
 80038ec:	711a      	strb	r2, [r3, #4]
	  hearttx[5] = 0x01;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <Sendheart+0xc0>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	715a      	strb	r2, [r3, #5]
	  hearttx[6] = 0x00;
 80038f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003960 <Sendheart+0xc0>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	719a      	strb	r2, [r3, #6]
	  hearttx[7] = 0x02;
 80038fa:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <Sendheart+0xc0>)
 80038fc:	2202      	movs	r2, #2
 80038fe:	71da      	strb	r2, [r3, #7]
	  hearttx[8] = state;
 8003900:	4b1a      	ldr	r3, [pc, #104]	@ (800396c <Sendheart+0xcc>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <Sendheart+0xc0>)
 8003908:	721a      	strb	r2, [r3, #8]
	  hearttx[9] = (uint8_t)sampling_ready;
 800390a:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <Sendheart+0xd0>)
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	b2da      	uxtb	r2, r3
 8003912:	4b13      	ldr	r3, [pc, #76]	@ (8003960 <Sendheart+0xc0>)
 8003914:	725a      	strb	r2, [r3, #9]
	  uint16_t SUM = Checksum(&hearttx[2], 8);
 8003916:	2108      	movs	r1, #8
 8003918:	4816      	ldr	r0, [pc, #88]	@ (8003974 <Sendheart+0xd4>)
 800391a:	f7ff f9ec 	bl	8002cf6 <Checksum>
 800391e:	4603      	mov	r3, r0
 8003920:	803b      	strh	r3, [r7, #0]
	  hearttx[10] = (SUM >> 8) & 0xFF;
 8003922:	883b      	ldrh	r3, [r7, #0]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	b29b      	uxth	r3, r3
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <Sendheart+0xc0>)
 800392c:	729a      	strb	r2, [r3, #10]
	  hearttx[11] = SUM & 0xFF;
 800392e:	883b      	ldrh	r3, [r7, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <Sendheart+0xc0>)
 8003934:	72da      	strb	r2, [r3, #11]
	  hearttx[12] = (tail >> 8) & 0xFF;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	b29b      	uxth	r3, r3
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b08      	ldr	r3, [pc, #32]	@ (8003960 <Sendheart+0xc0>)
 8003940:	731a      	strb	r2, [r3, #12]
	  hearttx[13] = tail & 0xFF;
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <Sendheart+0xc0>)
 8003948:	735a      	strb	r2, [r3, #13]
	  HAL_UART_Transmit_DMA(&huart1, hearttx, length);
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	461a      	mov	r2, r3
 800394e:	4904      	ldr	r1, [pc, #16]	@ (8003960 <Sendheart+0xc0>)
 8003950:	4809      	ldr	r0, [pc, #36]	@ (8003978 <Sendheart+0xd8>)
 8003952:	f003 fbe9 	bl	8007128 <HAL_UART_Transmit_DMA>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200011f8 	.word	0x200011f8
 8003964:	20000020 	.word	0x20000020
 8003968:	20000022 	.word	0x20000022
 800396c:	200011d8 	.word	0x200011d8
 8003970:	2000002e 	.word	0x2000002e
 8003974:	200011fa 	.word	0x200011fa
 8003978:	20000c7c 	.word	0x20000c7c

0800397c <Send_Data>:

void Send_Data(void) // 数据上送
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
	  while(!samplingstate && !data_ready)
 8003982:	e089      	b.n	8003a98 <Send_Data+0x11c>
	  {
		  uint16_t head = HEAD;
 8003984:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003988:	82bb      	strh	r3, [r7, #20]
		  uint16_t tail = TAIL;
 800398a:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 800398e:	827b      	strh	r3, [r7, #18]
		  datatx[0] = (head >> 8) & 0xFF;
 8003990:	8abb      	ldrh	r3, [r7, #20]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	b29b      	uxth	r3, r3
 8003996:	b2da      	uxtb	r2, r3
 8003998:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <Send_Data+0x13c>)
 800399a:	701a      	strb	r2, [r3, #0]
		  datatx[1] = head & 0xFF;
 800399c:	8abb      	ldrh	r3, [r7, #20]
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	4b45      	ldr	r3, [pc, #276]	@ (8003ab8 <Send_Data+0x13c>)
 80039a2:	705a      	strb	r2, [r3, #1]
		  datatx[2] = version;
 80039a4:	4b45      	ldr	r3, [pc, #276]	@ (8003abc <Send_Data+0x140>)
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	4b43      	ldr	r3, [pc, #268]	@ (8003ab8 <Send_Data+0x13c>)
 80039aa:	709a      	strb	r2, [r3, #2]
		  datatx[3] = (receivercode >> 8) & 0xFF;
 80039ac:	4b44      	ldr	r3, [pc, #272]	@ (8003ac0 <Send_Data+0x144>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab8 <Send_Data+0x13c>)
 80039ba:	70da      	strb	r2, [r3, #3]
		  datatx[4] = receivercode & 0xFF;
 80039bc:	4b40      	ldr	r3, [pc, #256]	@ (8003ac0 <Send_Data+0x144>)
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab8 <Send_Data+0x13c>)
 80039c6:	711a      	strb	r2, [r3, #4]
		  datatx[5] = 0x01;
 80039c8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <Send_Data+0x13c>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	715a      	strb	r2, [r3, #5]
		  datatx[6] = 0x02;
 80039ce:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab8 <Send_Data+0x13c>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	719a      	strb	r2, [r3, #6]
		  datatx[7] = 0x0B;
 80039d4:	4b38      	ldr	r3, [pc, #224]	@ (8003ab8 <Send_Data+0x13c>)
 80039d6:	220b      	movs	r2, #11
 80039d8:	71da      	strb	r2, [r3, #7]
		  datatx[8] = codeid;
 80039da:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac4 <Send_Data+0x148>)
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <Send_Data+0x13c>)
 80039e0:	721a      	strb	r2, [r3, #8]
		  datatx[9] = (peaklevel >> 8) & 0xFF;
 80039e2:	4b39      	ldr	r3, [pc, #228]	@ (8003ac8 <Send_Data+0x14c>)
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <Send_Data+0x13c>)
 80039ee:	725a      	strb	r2, [r3, #9]
		  datatx[10] = peaklevel & 0xFF;
 80039f0:	4b35      	ldr	r3, [pc, #212]	@ (8003ac8 <Send_Data+0x14c>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <Send_Data+0x13c>)
 80039f8:	729a      	strb	r2, [r3, #10]
		  uint64_t current_timestamp = get_current_timestamp();
 80039fa:	f7ff fe37 	bl	800366c <get_current_timestamp>
 80039fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
		  for(uint16_t i = 0;i < 8;i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	82fb      	strh	r3, [r7, #22]
 8003a06:	e01b      	b.n	8003a40 <Send_Data+0xc4>
			  datatx[i + 11] = (current_timestamp >> (56 - 8 * i)) & 0xFF;
 8003a08:	8afb      	ldrh	r3, [r7, #22]
 8003a0a:	f1c3 0307 	rsb	r3, r3, #7
 8003a0e:	00d9      	lsls	r1, r3, #3
 8003a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a14:	f1c1 0620 	rsb	r6, r1, #32
 8003a18:	f1a1 0020 	sub.w	r0, r1, #32
 8003a1c:	fa22 f401 	lsr.w	r4, r2, r1
 8003a20:	fa03 f606 	lsl.w	r6, r3, r6
 8003a24:	4334      	orrs	r4, r6
 8003a26:	fa23 f000 	lsr.w	r0, r3, r0
 8003a2a:	4304      	orrs	r4, r0
 8003a2c:	fa23 f501 	lsr.w	r5, r3, r1
 8003a30:	8afb      	ldrh	r3, [r7, #22]
 8003a32:	330b      	adds	r3, #11
 8003a34:	b2e1      	uxtb	r1, r4
 8003a36:	4a20      	ldr	r2, [pc, #128]	@ (8003ab8 <Send_Data+0x13c>)
 8003a38:	54d1      	strb	r1, [r2, r3]
		  for(uint16_t i = 0;i < 8;i++)
 8003a3a:	8afb      	ldrh	r3, [r7, #22]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	82fb      	strh	r3, [r7, #22]
 8003a40:	8afb      	ldrh	r3, [r7, #22]
 8003a42:	2b07      	cmp	r3, #7
 8003a44:	d9e0      	bls.n	8003a08 <Send_Data+0x8c>
		  uint16_t SUM = Checksum(&datatx[2], 17);
 8003a46:	2111      	movs	r1, #17
 8003a48:	4820      	ldr	r0, [pc, #128]	@ (8003acc <Send_Data+0x150>)
 8003a4a:	f7ff f954 	bl	8002cf6 <Checksum>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
		  datatx[19] = (SUM >> 8) & 0xFF;
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b17      	ldr	r3, [pc, #92]	@ (8003ab8 <Send_Data+0x13c>)
 8003a5c:	74da      	strb	r2, [r3, #19]
		  datatx[20] = SUM & 0xFF;
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <Send_Data+0x13c>)
 8003a64:	751a      	strb	r2, [r3, #20]
		  datatx[21] = (tail >> 8) & 0xFF;
 8003a66:	8a7b      	ldrh	r3, [r7, #18]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <Send_Data+0x13c>)
 8003a70:	755a      	strb	r2, [r3, #21]
		  datatx[22] = tail & 0xFF;
 8003a72:	8a7b      	ldrh	r3, [r7, #18]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4b10      	ldr	r3, [pc, #64]	@ (8003ab8 <Send_Data+0x13c>)
 8003a78:	759a      	strb	r2, [r3, #22]
		  if(sampling_ready == 1)
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <Send_Data+0x154>)
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d109      	bne.n	8003a98 <Send_Data+0x11c>
		  {
			  samplingstate = 1;
 8003a84:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <Send_Data+0x158>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit_DMA(&huart1, datatx, transmitlength);
 8003a8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ad8 <Send_Data+0x15c>)
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4909      	ldr	r1, [pc, #36]	@ (8003ab8 <Send_Data+0x13c>)
 8003a92:	4812      	ldr	r0, [pc, #72]	@ (8003adc <Send_Data+0x160>)
 8003a94:	f003 fb48 	bl	8007128 <HAL_UART_Transmit_DMA>
	  while(!samplingstate && !data_ready)
 8003a98:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad4 <Send_Data+0x158>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <Send_Data+0x132>
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae0 <Send_Data+0x164>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f43f af6b 	beq.w	8003984 <Send_Data+0x8>
		  }
	  }
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200011e0 	.word	0x200011e0
 8003abc:	20000020 	.word	0x20000020
 8003ac0:	20000022 	.word	0x20000022
 8003ac4:	20000d94 	.word	0x20000d94
 8003ac8:	20000d96 	.word	0x20000d96
 8003acc:	200011e2 	.word	0x200011e2
 8003ad0:	2000002e 	.word	0x2000002e
 8003ad4:	200011dc 	.word	0x200011dc
 8003ad8:	20000034 	.word	0x20000034
 8003adc:	20000c7c 	.word	0x20000c7c
 8003ae0:	2000053e 	.word	0x2000053e

08003ae4 <maintain_processing_buffer>:

void maintain_processing_buffer(void) //存储数据超过512字节且处理数据也超过512字节后前移512字节
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
	uint8_t *address = processing_buffer;
 8003aea:	4b17      	ldr	r3, [pc, #92]	@ (8003b48 <maintain_processing_buffer+0x64>)
 8003aec:	607b      	str	r3, [r7, #4]
    if (wp - address > BUF_SIZE/2 && rp - address > BUF_SIZE/2)
 8003aee:	4b17      	ldr	r3, [pc, #92]	@ (8003b4c <maintain_processing_buffer+0x68>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afa:	dd21      	ble.n	8003b40 <maintain_processing_buffer+0x5c>
 8003afc:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <maintain_processing_buffer+0x6c>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b08:	dd1a      	ble.n	8003b40 <maintain_processing_buffer+0x5c>
    {
        uint16_t move_len = BUF_SIZE/2;
 8003b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b0e:	807b      	strh	r3, [r7, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b10:	b672      	cpsid	i
}
 8003b12:	bf00      	nop
        __disable_irq();
        memmove(processing_buffer, &processing_buffer[BUF_SIZE/2], move_len);
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	461a      	mov	r2, r3
 8003b18:	490e      	ldr	r1, [pc, #56]	@ (8003b54 <maintain_processing_buffer+0x70>)
 8003b1a:	480b      	ldr	r0, [pc, #44]	@ (8003b48 <maintain_processing_buffer+0x64>)
 8003b1c:	f00c f8b9 	bl	800fc92 <memmove>
        wp = wp - move_len;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <maintain_processing_buffer+0x68>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	425b      	negs	r3, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	4a08      	ldr	r2, [pc, #32]	@ (8003b4c <maintain_processing_buffer+0x68>)
 8003b2c:	6013      	str	r3, [r2, #0]
        rp = rp - move_len;
 8003b2e:	4b08      	ldr	r3, [pc, #32]	@ (8003b50 <maintain_processing_buffer+0x6c>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	887b      	ldrh	r3, [r7, #2]
 8003b34:	425b      	negs	r3, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	4a05      	ldr	r2, [pc, #20]	@ (8003b50 <maintain_processing_buffer+0x6c>)
 8003b3a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b3c:	b662      	cpsie	i
}
 8003b3e:	bf00      	nop
        __enable_irq();
    }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000da8 	.word	0x20000da8
 8003b4c:	20000018 	.word	0x20000018
 8003b50:	2000001c 	.word	0x2000001c
 8003b54:	20000fa8 	.word	0x20000fa8

08003b58 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0c      	ldr	r2, [pc, #48]	@ (8003b98 <HAL_UART_TxCpltCallback+0x40>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10f      	bne.n	8003b8a <HAL_UART_TxCpltCallback+0x32>
	{
		if(txstate == 1)
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <HAL_UART_TxCpltCallback+0x44>)
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d102      	bne.n	8003b7a <HAL_UART_TxCpltCallback+0x22>
			txstate = 0;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <HAL_UART_TxCpltCallback+0x44>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	801a      	strh	r2, [r3, #0]
		if(samplingstate == 1)
 8003b7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <HAL_UART_TxCpltCallback+0x48>)
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <HAL_UART_TxCpltCallback+0x32>
			samplingstate = 0;
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_UART_TxCpltCallback+0x48>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	801a      	strh	r2, [r3, #0]
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40013800 	.word	0x40013800
 8003b9c:	200011da 	.word	0x200011da
 8003ba0:	200011dc 	.word	0x200011dc

08003ba4 <CMD_HANDLE_ERROR>:

void CMD_HANDLE_ERROR(CMD_Status cmdstate) //错误码发送
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
	uint16_t head = HEAD;
 8003bae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003bb2:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = TAIL;
 8003bb4:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 8003bb8:	81bb      	strh	r3, [r7, #12]
	tx_buffer[0] = (head >> 8) & 0xFF;
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003bc4:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = head & 0xFF;
 8003bc6:	89fb      	ldrh	r3, [r7, #14]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003bcc:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = version;
 8003bce:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <CMD_HANDLE_ERROR+0xcc>)
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003bd4:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = (receivercode >> 8) & 0xFF;
 8003bd6:	4b27      	ldr	r3, [pc, #156]	@ (8003c74 <CMD_HANDLE_ERROR+0xd0>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4b22      	ldr	r3, [pc, #136]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003be4:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = receivercode & 0xFF;
 8003be6:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <CMD_HANDLE_ERROR+0xd0>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003bf0:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = 0xFF;
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003bf4:	22ff      	movs	r2, #255	@ 0xff
 8003bf6:	715a      	strb	r2, [r3, #5]
	tx_buffer[6] = command & 0xFF;
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <CMD_HANDLE_ERROR+0xd4>)
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c00:	719a      	strb	r2, [r3, #6]
	tx_buffer[7] = 0x02;
 8003c02:	4b1a      	ldr	r3, [pc, #104]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c04:	2202      	movs	r2, #2
 8003c06:	71da      	strb	r2, [r3, #7]
	tx_buffer[8] = retransmit;
 8003c08:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <CMD_HANDLE_ERROR+0xd8>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c10:	721a      	strb	r2, [r3, #8]
	tx_buffer[9] = (uint8_t)cmdstate;
 8003c12:	4a16      	ldr	r2, [pc, #88]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	7253      	strb	r3, [r2, #9]
	uint16_t SUM = Checksum(&tx_buffer[2], 8);
 8003c18:	2108      	movs	r1, #8
 8003c1a:	4819      	ldr	r0, [pc, #100]	@ (8003c80 <CMD_HANDLE_ERROR+0xdc>)
 8003c1c:	f7ff f86b 	bl	8002cf6 <Checksum>
 8003c20:	4603      	mov	r3, r0
 8003c22:	817b      	strh	r3, [r7, #10]
	tx_buffer[10] = (SUM >> 8) & 0xFF;
 8003c24:	897b      	ldrh	r3, [r7, #10]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c2e:	729a      	strb	r2, [r3, #10]
	tx_buffer[11] = SUM & 0xFF;
 8003c30:	897b      	ldrh	r3, [r7, #10]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c36:	72da      	strb	r2, [r3, #11]
	tx_buffer[12] = (tail >> 8) & 0xFF;
 8003c38:	89bb      	ldrh	r3, [r7, #12]
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c42:	731a      	strb	r2, [r3, #12]
	tx_buffer[13] = tail & 0xFF;
 8003c44:	89bb      	ldrh	r3, [r7, #12]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c4a:	735a      	strb	r2, [r3, #13]
	uint16_t length = 14;
 8003c4c:	230e      	movs	r3, #14
 8003c4e:	813b      	strh	r3, [r7, #8]
	txstate = 1;
 8003c50:	4b0c      	ldr	r3, [pc, #48]	@ (8003c84 <CMD_HANDLE_ERROR+0xe0>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
 8003c56:	893b      	ldrh	r3, [r7, #8]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4904      	ldr	r1, [pc, #16]	@ (8003c6c <CMD_HANDLE_ERROR+0xc8>)
 8003c5c:	480a      	ldr	r0, [pc, #40]	@ (8003c88 <CMD_HANDLE_ERROR+0xe4>)
 8003c5e:	f003 fa63 	bl	8007128 <HAL_UART_Transmit_DMA>
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200004bc 	.word	0x200004bc
 8003c70:	20000020 	.word	0x20000020
 8003c74:	20000022 	.word	0x20000022
 8003c78:	200011a8 	.word	0x200011a8
 8003c7c:	20000030 	.word	0x20000030
 8003c80:	200004be 	.word	0x200004be
 8003c84:	200011da 	.word	0x200011da
 8003c88:	20000c7c 	.word	0x20000c7c

08003c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003cc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c90:	f7fe fd8e 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c94:	480c      	ldr	r0, [pc, #48]	@ (8003cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c96:	490d      	ldr	r1, [pc, #52]	@ (8003ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c98:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd0 <LoopForever+0xe>)
  movs r3, #0
 8003c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c9c:	e002      	b.n	8003ca4 <LoopCopyDataInit>

08003c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ca2:	3304      	adds	r3, #4

08003ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ca8:	d3f9      	bcc.n	8003c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003caa:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cac:	4c0a      	ldr	r4, [pc, #40]	@ (8003cd8 <LoopForever+0x16>)
  movs r3, #0
 8003cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cb0:	e001      	b.n	8003cb6 <LoopFillZerobss>

08003cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cb4:	3204      	adds	r2, #4

08003cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cb8:	d3fb      	bcc.n	8003cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cba:	f00c f895 	bl	800fde8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cbe:	f7fd fa91 	bl	80011e4 <main>

08003cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8003cc2:	e7fe      	b.n	8003cc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003cc4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ccc:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003cd0:	0803e3c0 	.word	0x0803e3c0
  ldr r2, =_sbss
 8003cd4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003cd8:	20001394 	.word	0x20001394

08003cdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cdc:	e7fe      	b.n	8003cdc <ADC1_IRQHandler>

08003cde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce8:	2003      	movs	r0, #3
 8003cea:	f000 f961 	bl	8003fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cee:	200f      	movs	r0, #15
 8003cf0:	f000 f80e 	bl	8003d10 <HAL_InitTick>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	71fb      	strb	r3, [r7, #7]
 8003cfe:	e001      	b.n	8003d04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d00:	f7fe fb86 	bl	8002410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d04:	79fb      	ldrb	r3, [r7, #7]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d1c:	4b17      	ldr	r3, [pc, #92]	@ (8003d7c <HAL_InitTick+0x6c>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d023      	beq.n	8003d6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d24:	4b16      	ldr	r3, [pc, #88]	@ (8003d80 <HAL_InitTick+0x70>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <HAL_InitTick+0x6c>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f96d 	bl	800401a <HAL_SYSTICK_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b0f      	cmp	r3, #15
 8003d4a:	d809      	bhi.n	8003d60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	f000 f937 	bl	8003fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d58:	4a0a      	ldr	r2, [pc, #40]	@ (8003d84 <HAL_InitTick+0x74>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e007      	b.n	8003d70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	e004      	b.n	8003d70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	e001      	b.n	8003d70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000003c 	.word	0x2000003c
 8003d80:	2000000c 	.word	0x2000000c
 8003d84:	20000038 	.word	0x20000038

08003d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <HAL_IncTick+0x20>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_IncTick+0x24>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	4a04      	ldr	r2, [pc, #16]	@ (8003dac <HAL_IncTick+0x24>)
 8003d9a:	6013      	str	r3, [r2, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	2000003c 	.word	0x2000003c
 8003dac:	20001208 	.word	0x20001208

08003db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return uwTick;
 8003db4:	4b03      	ldr	r3, [pc, #12]	@ (8003dc4 <HAL_GetTick+0x14>)
 8003db6:	681b      	ldr	r3, [r3, #0]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20001208 	.word	0x20001208

08003dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff ffee 	bl	8003db0 <HAL_GetTick>
 8003dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d005      	beq.n	8003dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003de2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <HAL_Delay+0x44>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dee:	bf00      	nop
 8003df0:	f7ff ffde 	bl	8003db0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d8f7      	bhi.n	8003df0 <HAL_Delay+0x28>
  {
  }
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	2000003c 	.word	0x2000003c

08003e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e20:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <__NVIC_SetPriorityGrouping+0x44>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e42:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <__NVIC_SetPriorityGrouping+0x44>)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	60d3      	str	r3, [r2, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e5c:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <__NVIC_GetPriorityGrouping+0x18>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	f003 0307 	and.w	r3, r3, #7
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	db0b      	blt.n	8003e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	4907      	ldr	r1, [pc, #28]	@ (8003eac <__NVIC_EnableIRQ+0x38>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2001      	movs	r0, #1
 8003e96:	fa00 f202 	lsl.w	r2, r0, r2
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	e000e100 	.word	0xe000e100

08003eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	db0a      	blt.n	8003eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	490c      	ldr	r1, [pc, #48]	@ (8003efc <__NVIC_SetPriority+0x4c>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	0112      	lsls	r2, r2, #4
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed8:	e00a      	b.n	8003ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	4908      	ldr	r1, [pc, #32]	@ (8003f00 <__NVIC_SetPriority+0x50>)
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	3b04      	subs	r3, #4
 8003ee8:	0112      	lsls	r2, r2, #4
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	440b      	add	r3, r1
 8003eee:	761a      	strb	r2, [r3, #24]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000e100 	.word	0xe000e100
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f1c3 0307 	rsb	r3, r3, #7
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	bf28      	it	cs
 8003f22:	2304      	movcs	r3, #4
 8003f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d902      	bls.n	8003f34 <NVIC_EncodePriority+0x30>
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3b03      	subs	r3, #3
 8003f32:	e000      	b.n	8003f36 <NVIC_EncodePriority+0x32>
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	401a      	ands	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	43d9      	mvns	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	4313      	orrs	r3, r2
         );
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	@ 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f7c:	d301      	bcc.n	8003f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00f      	b.n	8003fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f82:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <SysTick_Config+0x40>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	f7ff ff8e 	bl	8003eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <SysTick_Config+0x40>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f9a:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <SysTick_Config+0x40>)
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	e000e010 	.word	0xe000e010

08003fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff29 	bl	8003e10 <__NVIC_SetPriorityGrouping>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd8:	f7ff ff3e 	bl	8003e58 <__NVIC_GetPriorityGrouping>
 8003fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7ff ff8e 	bl	8003f04 <NVIC_EncodePriority>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ff5d 	bl	8003eb0 <__NVIC_SetPriority>
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff31 	bl	8003e74 <__NVIC_EnableIRQ>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffa2 	bl	8003f6c <SysTick_Config>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004036:	f000 f802 	bl	800403e <HAL_SYSTICK_Callback>
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e098      	b.n	8004190 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	4b4d      	ldr	r3, [pc, #308]	@ (800419c <HAL_DMA_Init+0x150>)
 8004066:	429a      	cmp	r2, r3
 8004068:	d80f      	bhi.n	800408a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	4b4b      	ldr	r3, [pc, #300]	@ (80041a0 <HAL_DMA_Init+0x154>)
 8004072:	4413      	add	r3, r2
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <HAL_DMA_Init+0x158>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	009a      	lsls	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a48      	ldr	r2, [pc, #288]	@ (80041a8 <HAL_DMA_Init+0x15c>)
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40
 8004088:	e00e      	b.n	80040a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	4b46      	ldr	r3, [pc, #280]	@ (80041ac <HAL_DMA_Init+0x160>)
 8004092:	4413      	add	r3, r2
 8004094:	4a43      	ldr	r2, [pc, #268]	@ (80041a4 <HAL_DMA_Init+0x158>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	009a      	lsls	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a42      	ldr	r2, [pc, #264]	@ (80041b0 <HAL_DMA_Init+0x164>)
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004102:	d039      	beq.n	8004178 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	4a27      	ldr	r2, [pc, #156]	@ (80041a8 <HAL_DMA_Init+0x15c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d11a      	bne.n	8004144 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800410e:	4b29      	ldr	r3, [pc, #164]	@ (80041b4 <HAL_DMA_Init+0x168>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	f003 031c 	and.w	r3, r3, #28
 800411a:	210f      	movs	r1, #15
 800411c:	fa01 f303 	lsl.w	r3, r1, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	4924      	ldr	r1, [pc, #144]	@ (80041b4 <HAL_DMA_Init+0x168>)
 8004124:	4013      	ands	r3, r2
 8004126:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004128:	4b22      	ldr	r3, [pc, #136]	@ (80041b4 <HAL_DMA_Init+0x168>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	f003 031c 	and.w	r3, r3, #28
 8004138:	fa01 f303 	lsl.w	r3, r1, r3
 800413c:	491d      	ldr	r1, [pc, #116]	@ (80041b4 <HAL_DMA_Init+0x168>)
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
 8004142:	e019      	b.n	8004178 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004144:	4b1c      	ldr	r3, [pc, #112]	@ (80041b8 <HAL_DMA_Init+0x16c>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	f003 031c 	and.w	r3, r3, #28
 8004150:	210f      	movs	r1, #15
 8004152:	fa01 f303 	lsl.w	r3, r1, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	4917      	ldr	r1, [pc, #92]	@ (80041b8 <HAL_DMA_Init+0x16c>)
 800415a:	4013      	ands	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800415e:	4b16      	ldr	r3, [pc, #88]	@ (80041b8 <HAL_DMA_Init+0x16c>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f003 031c 	and.w	r3, r3, #28
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	4911      	ldr	r1, [pc, #68]	@ (80041b8 <HAL_DMA_Init+0x16c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	40020407 	.word	0x40020407
 80041a0:	bffdfff8 	.word	0xbffdfff8
 80041a4:	cccccccd 	.word	0xcccccccd
 80041a8:	40020000 	.word	0x40020000
 80041ac:	bffdfbf8 	.word	0xbffdfbf8
 80041b0:	40020400 	.word	0x40020400
 80041b4:	400200a8 	.word	0x400200a8
 80041b8:	400204a8 	.word	0x400204a8

080041bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_DMA_Start_IT+0x20>
 80041d8:	2302      	movs	r3, #2
 80041da:	e04b      	b.n	8004274 <HAL_DMA_Start_IT+0xb8>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d13a      	bne.n	8004266 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f96b 	bl	80044f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 020e 	orr.w	r2, r2, #14
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e00f      	b.n	8004254 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0204 	bic.w	r2, r2, #4
 8004242:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 020a 	orr.w	r2, r2, #10
 8004252:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e005      	b.n	8004272 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004272:	7dfb      	ldrb	r3, [r7, #23]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d008      	beq.n	80042a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2204      	movs	r2, #4
 8004298:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e022      	b.n	80042ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 020e 	bic.w	r2, r2, #14
 80042b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f003 021c 	and.w	r2, r3, #28
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	2101      	movs	r1, #1
 80042d4:	fa01 f202 	lsl.w	r2, r1, r2
 80042d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d005      	beq.n	800431c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2204      	movs	r2, #4
 8004314:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	e029      	b.n	8004370 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 020e 	bic.w	r2, r2, #14
 800432a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	f003 021c 	and.w	r2, r3, #28
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f202 	lsl.w	r2, r1, r2
 800434e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
    }
  }
  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f003 031c 	and.w	r3, r3, #28
 800439a:	2204      	movs	r2, #4
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d026      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x7a>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d021      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d107      	bne.n	80043ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0204 	bic.w	r2, r2, #4
 80043cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d2:	f003 021c 	and.w	r2, r3, #28
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	2104      	movs	r1, #4
 80043dc:	fa01 f202 	lsl.w	r2, r1, r2
 80043e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d071      	beq.n	80044ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043f2:	e06c      	b.n	80044ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f8:	f003 031c 	and.w	r3, r3, #28
 80043fc:	2202      	movs	r2, #2
 80043fe:	409a      	lsls	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d02e      	beq.n	8004466 <HAL_DMA_IRQHandler+0xec>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d029      	beq.n	8004466 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 020a 	bic.w	r2, r2, #10
 800442e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443c:	f003 021c 	and.w	r2, r3, #28
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	2102      	movs	r1, #2
 8004446:	fa01 f202 	lsl.w	r2, r1, r2
 800444a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d038      	beq.n	80044ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004464:	e033      	b.n	80044ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f003 031c 	and.w	r3, r3, #28
 800446e:	2208      	movs	r2, #8
 8004470:	409a      	lsls	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d02a      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x156>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d025      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 020e 	bic.w	r2, r2, #14
 8004492:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	f003 021c 	and.w	r2, r3, #28
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f202 	lsl.w	r2, r1, r2
 80044a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
}
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f003 021c 	and.w	r2, r3, #28
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	2101      	movs	r1, #1
 800450c:	fa01 f202 	lsl.w	r2, r1, r2
 8004510:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b10      	cmp	r3, #16
 8004520:	d108      	bne.n	8004534 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004532:	e007      	b.n	8004544 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455e:	e154      	b.n	800480a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2101      	movs	r1, #1
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	4013      	ands	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8146 	beq.w	8004804 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d005      	beq.n	8004590 <HAL_GPIO_Init+0x40>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d130      	bne.n	80045f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045c6:	2201      	movs	r2, #1
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0201 	and.w	r2, r3, #1
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d017      	beq.n	800462e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	2203      	movs	r2, #3
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4013      	ands	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d123      	bne.n	8004682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	08da      	lsrs	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	08da      	lsrs	r2, r3, #3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3208      	adds	r2, #8
 800467c:	6939      	ldr	r1, [r7, #16]
 800467e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	2203      	movs	r2, #3
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4013      	ands	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0203 	and.w	r2, r3, #3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80a0 	beq.w	8004804 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c4:	4b58      	ldr	r3, [pc, #352]	@ (8004828 <HAL_GPIO_Init+0x2d8>)
 80046c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c8:	4a57      	ldr	r2, [pc, #348]	@ (8004828 <HAL_GPIO_Init+0x2d8>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80046d0:	4b55      	ldr	r3, [pc, #340]	@ (8004828 <HAL_GPIO_Init+0x2d8>)
 80046d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046dc:	4a53      	ldr	r2, [pc, #332]	@ (800482c <HAL_GPIO_Init+0x2dc>)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	3302      	adds	r3, #2
 80046e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	220f      	movs	r2, #15
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004706:	d019      	beq.n	800473c <HAL_GPIO_Init+0x1ec>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a49      	ldr	r2, [pc, #292]	@ (8004830 <HAL_GPIO_Init+0x2e0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d013      	beq.n	8004738 <HAL_GPIO_Init+0x1e8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a48      	ldr	r2, [pc, #288]	@ (8004834 <HAL_GPIO_Init+0x2e4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00d      	beq.n	8004734 <HAL_GPIO_Init+0x1e4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a47      	ldr	r2, [pc, #284]	@ (8004838 <HAL_GPIO_Init+0x2e8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <HAL_GPIO_Init+0x1e0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a46      	ldr	r2, [pc, #280]	@ (800483c <HAL_GPIO_Init+0x2ec>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_GPIO_Init+0x1dc>
 8004728:	2304      	movs	r3, #4
 800472a:	e008      	b.n	800473e <HAL_GPIO_Init+0x1ee>
 800472c:	2307      	movs	r3, #7
 800472e:	e006      	b.n	800473e <HAL_GPIO_Init+0x1ee>
 8004730:	2303      	movs	r3, #3
 8004732:	e004      	b.n	800473e <HAL_GPIO_Init+0x1ee>
 8004734:	2302      	movs	r3, #2
 8004736:	e002      	b.n	800473e <HAL_GPIO_Init+0x1ee>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_GPIO_Init+0x1ee>
 800473c:	2300      	movs	r3, #0
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	f002 0203 	and.w	r2, r2, #3
 8004744:	0092      	lsls	r2, r2, #2
 8004746:	4093      	lsls	r3, r2
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800474e:	4937      	ldr	r1, [pc, #220]	@ (800482c <HAL_GPIO_Init+0x2dc>)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	3302      	adds	r3, #2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800475c:	4b38      	ldr	r3, [pc, #224]	@ (8004840 <HAL_GPIO_Init+0x2f0>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004780:	4a2f      	ldr	r2, [pc, #188]	@ (8004840 <HAL_GPIO_Init+0x2f0>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004786:	4b2e      	ldr	r3, [pc, #184]	@ (8004840 <HAL_GPIO_Init+0x2f0>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047aa:	4a25      	ldr	r2, [pc, #148]	@ (8004840 <HAL_GPIO_Init+0x2f0>)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047b0:	4b23      	ldr	r3, [pc, #140]	@ (8004840 <HAL_GPIO_Init+0x2f0>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4013      	ands	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004840 <HAL_GPIO_Init+0x2f0>)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047da:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_GPIO_Init+0x2f0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	43db      	mvns	r3, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047fe:	4a10      	ldr	r2, [pc, #64]	@ (8004840 <HAL_GPIO_Init+0x2f0>)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	3301      	adds	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	f47f aea3 	bne.w	8004560 <HAL_GPIO_Init+0x10>
  }
}
 800481a:	bf00      	nop
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	40021000 	.word	0x40021000
 800482c:	40010000 	.word	0x40010000
 8004830:	48000400 	.word	0x48000400
 8004834:	48000800 	.word	0x48000800
 8004838:	48000c00 	.word	0x48000c00
 800483c:	48001000 	.word	0x48001000
 8004840:	40010400 	.word	0x40010400

08004844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	887b      	ldrh	r3, [r7, #2]
 8004856:	4013      	ands	r3, r2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
 8004860:	e001      	b.n	8004866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004866:	7bfb      	ldrb	r3, [r7, #15]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	807b      	strh	r3, [r7, #2]
 8004880:	4613      	mov	r3, r2
 8004882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004884:	787b      	ldrb	r3, [r7, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004890:	e002      	b.n	8004898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	041a      	lsls	r2, r3, #16
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43d9      	mvns	r1, r3
 80048c2:	887b      	ldrh	r3, [r7, #2]
 80048c4:	400b      	ands	r3, r1
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048dc:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40007000 	.word	0x40007000

080048f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004902:	d130      	bne.n	8004966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004904:	4b23      	ldr	r3, [pc, #140]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800490c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004910:	d038      	beq.n	8004984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004912:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800491a:	4a1e      	ldr	r2, [pc, #120]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800491c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004922:	4b1d      	ldr	r3, [pc, #116]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2232      	movs	r2, #50	@ 0x32
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	4a1b      	ldr	r2, [pc, #108]	@ (800499c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	0c9b      	lsrs	r3, r3, #18
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004938:	e002      	b.n	8004940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3b01      	subs	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004940:	4b14      	ldr	r3, [pc, #80]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494c:	d102      	bne.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f2      	bne.n	800493a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004954:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004960:	d110      	bne.n	8004984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e00f      	b.n	8004986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004966:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800496e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004972:	d007      	beq.n	8004984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004974:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800497c:	4a05      	ldr	r2, [pc, #20]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800497e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40007000 	.word	0x40007000
 8004998:	2000000c 	.word	0x2000000c
 800499c:	431bde83 	.word	0x431bde83

080049a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f000 bc02 	b.w	80051b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b4:	4b96      	ldr	r3, [pc, #600]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 030c 	and.w	r3, r3, #12
 80049bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049be:	4b94      	ldr	r3, [pc, #592]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80e4 	beq.w	8004b9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_RCC_OscConfig+0x4c>
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	f040 808b 	bne.w	8004afa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	f040 8087 	bne.w	8004afa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049ec:	4b88      	ldr	r3, [pc, #544]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_OscConfig+0x64>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e3d9      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	4b81      	ldr	r3, [pc, #516]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <HAL_RCC_OscConfig+0x7e>
 8004a14:	4b7e      	ldr	r3, [pc, #504]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a1c:	e005      	b.n	8004a2a <HAL_RCC_OscConfig+0x8a>
 8004a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d223      	bcs.n	8004a76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fd8c 	bl	8005550 <RCC_SetFlashLatencyFromMSIRange>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e3ba      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a42:	4b73      	ldr	r3, [pc, #460]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a72      	ldr	r2, [pc, #456]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a48:	f043 0308 	orr.w	r3, r3, #8
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b70      	ldr	r3, [pc, #448]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	496d      	ldr	r1, [pc, #436]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a60:	4b6b      	ldr	r3, [pc, #428]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	4968      	ldr	r1, [pc, #416]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
 8004a74:	e025      	b.n	8004ac2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a76:	4b66      	ldr	r3, [pc, #408]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a65      	ldr	r2, [pc, #404]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	f043 0308 	orr.w	r3, r3, #8
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b63      	ldr	r3, [pc, #396]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4960      	ldr	r1, [pc, #384]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a94:	4b5e      	ldr	r3, [pc, #376]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	495b      	ldr	r1, [pc, #364]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fd4c 	bl	8005550 <RCC_SetFlashLatencyFromMSIRange>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e37a      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ac2:	f000 fc81 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b51      	ldr	r3, [pc, #324]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	4950      	ldr	r1, [pc, #320]	@ (8004c14 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	4a4e      	ldr	r2, [pc, #312]	@ (8004c18 <HAL_RCC_OscConfig+0x278>)
 8004ae0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c1c <HAL_RCC_OscConfig+0x27c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff f912 	bl	8003d10 <HAL_InitTick>
 8004aec:	4603      	mov	r3, r0
 8004aee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d052      	beq.n	8004b9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	e35e      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d032      	beq.n	8004b68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b02:	4b43      	ldr	r3, [pc, #268]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a42      	ldr	r2, [pc, #264]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b0e:	f7ff f94f 	bl	8003db0 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b16:	f7ff f94b 	bl	8003db0 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e347      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b28:	4b39      	ldr	r3, [pc, #228]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b34:	4b36      	ldr	r3, [pc, #216]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a35      	ldr	r2, [pc, #212]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	f043 0308 	orr.w	r3, r3, #8
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b33      	ldr	r3, [pc, #204]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	4930      	ldr	r1, [pc, #192]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b52:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	492b      	ldr	r1, [pc, #172]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
 8004b66:	e01a      	b.n	8004b9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b68:	4b29      	ldr	r3, [pc, #164]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a28      	ldr	r2, [pc, #160]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b74:	f7ff f91c 	bl	8003db0 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b7c:	f7ff f918 	bl	8003db0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e314      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b8e:	4b20      	ldr	r3, [pc, #128]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x1dc>
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d073      	beq.n	8004c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_OscConfig+0x21c>
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d10b      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbc:	4b14      	ldr	r3, [pc, #80]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d063      	beq.n	8004c90 <HAL_RCC_OscConfig+0x2f0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d15f      	bne.n	8004c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e2f1      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bdc:	d106      	bne.n	8004bec <HAL_RCC_OscConfig+0x24c>
 8004bde:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a0b      	ldr	r2, [pc, #44]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e025      	b.n	8004c38 <HAL_RCC_OscConfig+0x298>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bf4:	d114      	bne.n	8004c20 <HAL_RCC_OscConfig+0x280>
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a05      	ldr	r2, [pc, #20]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a02      	ldr	r2, [pc, #8]	@ (8004c10 <HAL_RCC_OscConfig+0x270>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e013      	b.n	8004c38 <HAL_RCC_OscConfig+0x298>
 8004c10:	40021000 	.word	0x40021000
 8004c14:	08013358 	.word	0x08013358
 8004c18:	2000000c 	.word	0x2000000c
 8004c1c:	20000038 	.word	0x20000038
 8004c20:	4ba0      	ldr	r3, [pc, #640]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a9f      	ldr	r2, [pc, #636]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a9c      	ldr	r2, [pc, #624]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d013      	beq.n	8004c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7ff f8b6 	bl	8003db0 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7ff f8b2 	bl	8003db0 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	@ 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e2ae      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5a:	4b92      	ldr	r3, [pc, #584]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x2a8>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7ff f8a2 	bl	8003db0 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c70:	f7ff f89e 	bl	8003db0 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	@ 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e29a      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c82:	4b88      	ldr	r3, [pc, #544]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x2d0>
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d060      	beq.n	8004d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x310>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b0c      	cmp	r3, #12
 8004ca8:	d119      	bne.n	8004cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d116      	bne.n	8004cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x328>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e277      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc8:	4b76      	ldr	r3, [pc, #472]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	4973      	ldr	r1, [pc, #460]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cdc:	e040      	b.n	8004d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d023      	beq.n	8004d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7ff f85d 	bl	8003db0 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cfa:	f7ff f859 	bl	8003db0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e255      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0c:	4b65      	ldr	r3, [pc, #404]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d18:	4b62      	ldr	r3, [pc, #392]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	061b      	lsls	r3, r3, #24
 8004d26:	495f      	ldr	r1, [pc, #380]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]
 8004d2c:	e018      	b.n	8004d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a5c      	ldr	r2, [pc, #368]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7ff f839 	bl	8003db0 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d42:	f7ff f835 	bl	8003db0 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e231      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d54:	4b53      	ldr	r3, [pc, #332]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f0      	bne.n	8004d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d03c      	beq.n	8004de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01c      	beq.n	8004dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d74:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7ff f814 	bl	8003db0 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8c:	f7ff f810 	bl	8003db0 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e20c      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d9e:	4b41      	ldr	r3, [pc, #260]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ef      	beq.n	8004d8c <HAL_RCC_OscConfig+0x3ec>
 8004dac:	e01b      	b.n	8004de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dae:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7fe fff7 	bl	8003db0 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc6:	f7fe fff3 	bl	8003db0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e1ef      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dd8:	4b32      	ldr	r3, [pc, #200]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ef      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80a6 	beq.w	8004f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df4:	2300      	movs	r3, #0
 8004df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004df8:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10d      	bne.n	8004e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e04:	4b27      	ldr	r3, [pc, #156]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e08:	4a26      	ldr	r2, [pc, #152]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e10:	4b24      	ldr	r3, [pc, #144]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e20:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <HAL_RCC_OscConfig+0x508>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d118      	bne.n	8004e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea8 <HAL_RCC_OscConfig+0x508>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <HAL_RCC_OscConfig+0x508>)
 8004e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e38:	f7fe ffba 	bl	8003db0 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e40:	f7fe ffb6 	bl	8003db0 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e1b2      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e52:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <HAL_RCC_OscConfig+0x508>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d108      	bne.n	8004e78 <HAL_RCC_OscConfig+0x4d8>
 8004e66:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e76:	e029      	b.n	8004ecc <HAL_RCC_OscConfig+0x52c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d115      	bne.n	8004eac <HAL_RCC_OscConfig+0x50c>
 8004e80:	4b08      	ldr	r3, [pc, #32]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	4a07      	ldr	r2, [pc, #28]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e90:	4b04      	ldr	r3, [pc, #16]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	4a03      	ldr	r2, [pc, #12]	@ (8004ea4 <HAL_RCC_OscConfig+0x504>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea0:	e014      	b.n	8004ecc <HAL_RCC_OscConfig+0x52c>
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	4b9a      	ldr	r3, [pc, #616]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	4a99      	ldr	r2, [pc, #612]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ebc:	4b96      	ldr	r3, [pc, #600]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	4a95      	ldr	r2, [pc, #596]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d016      	beq.n	8004f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fe ff6c 	bl	8003db0 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fe ff68 	bl	8003db0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e162      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef2:	4b89      	ldr	r3, [pc, #548]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0ed      	beq.n	8004edc <HAL_RCC_OscConfig+0x53c>
 8004f00:	e015      	b.n	8004f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f02:	f7fe ff55 	bl	8003db0 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f08:	e00a      	b.n	8004f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0a:	f7fe ff51 	bl	8003db0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e14b      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f20:	4b7d      	ldr	r3, [pc, #500]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ed      	bne.n	8004f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f2e:	7ffb      	ldrb	r3, [r7, #31]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d105      	bne.n	8004f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f34:	4b78      	ldr	r3, [pc, #480]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f38:	4a77      	ldr	r2, [pc, #476]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01c      	beq.n	8004f8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f54:	4b70      	ldr	r3, [pc, #448]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f5a:	4a6f      	ldr	r2, [pc, #444]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fe ff24 	bl	8003db0 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f6c:	f7fe ff20 	bl	8003db0 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e11c      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f7e:	4b66      	ldr	r3, [pc, #408]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ef      	beq.n	8004f6c <HAL_RCC_OscConfig+0x5cc>
 8004f8c:	e01b      	b.n	8004fc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f8e:	4b62      	ldr	r3, [pc, #392]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f94:	4a60      	ldr	r2, [pc, #384]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9e:	f7fe ff07 	bl	8003db0 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fa6:	f7fe ff03 	bl	8003db0 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0ff      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fb8:	4b57      	ldr	r3, [pc, #348]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ef      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80f3 	beq.w	80051b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	f040 80c9 	bne.w	800516c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fda:	4b4f      	ldr	r3, [pc, #316]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 0203 	and.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d12c      	bne.n	8005048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d123      	bne.n	8005048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800500c:	429a      	cmp	r2, r3
 800500e:	d11b      	bne.n	8005048 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d113      	bne.n	8005048 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	3b01      	subs	r3, #1
 800502e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005030:	429a      	cmp	r2, r3
 8005032:	d109      	bne.n	8005048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	3b01      	subs	r3, #1
 8005042:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d06b      	beq.n	8005120 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b0c      	cmp	r3, #12
 800504c:	d062      	beq.n	8005114 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800504e:	4b32      	ldr	r3, [pc, #200]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0ac      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800505e:	4b2e      	ldr	r3, [pc, #184]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2d      	ldr	r2, [pc, #180]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8005064:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005068:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800506a:	f7fe fea1 	bl	8003db0 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005072:	f7fe fe9d 	bl	8003db0 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e099      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005084:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f0      	bne.n	8005072 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005090:	4b21      	ldr	r3, [pc, #132]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	4b21      	ldr	r3, [pc, #132]	@ (800511c <HAL_RCC_OscConfig+0x77c>)
 8005096:	4013      	ands	r3, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80050a0:	3a01      	subs	r2, #1
 80050a2:	0112      	lsls	r2, r2, #4
 80050a4:	4311      	orrs	r1, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050aa:	0212      	lsls	r2, r2, #8
 80050ac:	4311      	orrs	r1, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050b2:	0852      	lsrs	r2, r2, #1
 80050b4:	3a01      	subs	r2, #1
 80050b6:	0552      	lsls	r2, r2, #21
 80050b8:	4311      	orrs	r1, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050be:	0852      	lsrs	r2, r2, #1
 80050c0:	3a01      	subs	r2, #1
 80050c2:	0652      	lsls	r2, r2, #25
 80050c4:	4311      	orrs	r1, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050ca:	06d2      	lsls	r2, r2, #27
 80050cc:	430a      	orrs	r2, r1
 80050ce:	4912      	ldr	r1, [pc, #72]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050d4:	4b10      	ldr	r3, [pc, #64]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 80050da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 80050e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050ec:	f7fe fe60 	bl	8003db0 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f4:	f7fe fe5c 	bl	8003db0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e058      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005106:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <HAL_RCC_OscConfig+0x778>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005112:	e050      	b.n	80051b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e04f      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
 8005118:	40021000 	.word	0x40021000
 800511c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005120:	4b27      	ldr	r3, [pc, #156]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d144      	bne.n	80051b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800512c:	4b24      	ldr	r3, [pc, #144]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 8005132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005138:	4b21      	ldr	r3, [pc, #132]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a20      	ldr	r2, [pc, #128]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 800513e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005144:	f7fe fe34 	bl	8003db0 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514c:	f7fe fe30 	bl	8003db0 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e02c      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800515e:	4b18      	ldr	r3, [pc, #96]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x7ac>
 800516a:	e024      	b.n	80051b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d01f      	beq.n	80051b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005172:	4b13      	ldr	r3, [pc, #76]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a12      	ldr	r2, [pc, #72]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 8005178:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800517c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517e:	f7fe fe17 	bl	8003db0 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005186:	f7fe fe13 	bl	8003db0 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e00f      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f0      	bne.n	8005186 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	4905      	ldr	r1, [pc, #20]	@ (80051c0 <HAL_RCC_OscConfig+0x820>)
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <HAL_RCC_OscConfig+0x824>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60cb      	str	r3, [r1, #12]
 80051b0:	e001      	b.n	80051b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40021000 	.word	0x40021000
 80051c4:	feeefffc 	.word	0xfeeefffc

080051c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0e7      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051dc:	4b75      	ldr	r3, [pc, #468]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d910      	bls.n	800520c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	4b72      	ldr	r3, [pc, #456]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 0207 	bic.w	r2, r3, #7
 80051f2:	4970      	ldr	r1, [pc, #448]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b6e      	ldr	r3, [pc, #440]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0cf      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d010      	beq.n	800523a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	4b66      	ldr	r3, [pc, #408]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005224:	429a      	cmp	r2, r3
 8005226:	d908      	bls.n	800523a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b63      	ldr	r3, [pc, #396]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4960      	ldr	r1, [pc, #384]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d04c      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524e:	4b5a      	ldr	r3, [pc, #360]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d121      	bne.n	800529e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0a6      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005266:	4b54      	ldr	r3, [pc, #336]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e09a      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800527e:	4b4e      	ldr	r3, [pc, #312]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e08e      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528e:	4b4a      	ldr	r3, [pc, #296]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e086      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4b46      	ldr	r3, [pc, #280]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4943      	ldr	r1, [pc, #268]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fe fd7e 	bl	8003db0 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b8:	f7fe fd7a 	bl	8003db0 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e06e      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b3a      	ldr	r3, [pc, #232]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 020c 	and.w	r2, r3, #12
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1eb      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d208      	bcs.n	800530e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052fc:	4b2e      	ldr	r3, [pc, #184]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	492b      	ldr	r1, [pc, #172]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800530e:	4b29      	ldr	r3, [pc, #164]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d210      	bcs.n	800533e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531c:	4b25      	ldr	r3, [pc, #148]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 0207 	bic.w	r2, r3, #7
 8005324:	4923      	ldr	r1, [pc, #140]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4313      	orrs	r3, r2
 800532a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532c:	4b21      	ldr	r3, [pc, #132]	@ (80053b4 <HAL_RCC_ClockConfig+0x1ec>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d001      	beq.n	800533e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e036      	b.n	80053ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800534a:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	4918      	ldr	r1, [pc, #96]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005368:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4910      	ldr	r1, [pc, #64]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005378:	4313      	orrs	r3, r2
 800537a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800537c:	f000 f824 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	490b      	ldr	r1, [pc, #44]	@ (80053bc <HAL_RCC_ClockConfig+0x1f4>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	4a09      	ldr	r2, [pc, #36]	@ (80053c0 <HAL_RCC_ClockConfig+0x1f8>)
 800539a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800539c:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <HAL_RCC_ClockConfig+0x1fc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe fcb5 	bl	8003d10 <HAL_InitTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80053aa:	7afb      	ldrb	r3, [r7, #11]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40022000 	.word	0x40022000
 80053b8:	40021000 	.word	0x40021000
 80053bc:	08013358 	.word	0x08013358
 80053c0:	2000000c 	.word	0x2000000c
 80053c4:	20000038 	.word	0x20000038

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	@ 0x24
 80053cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d6:	4b3e      	ldr	r3, [pc, #248]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053e0:	4b3b      	ldr	r3, [pc, #236]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x34>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d121      	bne.n	800543a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d11e      	bne.n	800543a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053fc:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d107      	bne.n	8005418 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005408:	4b31      	ldr	r3, [pc, #196]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	e005      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005418:	4b2d      	ldr	r3, [pc, #180]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005424:	4a2b      	ldr	r2, [pc, #172]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10d      	bne.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005438:	e00a      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d102      	bne.n	8005446 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005440:	4b25      	ldr	r3, [pc, #148]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e004      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d101      	bne.n	8005450 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800544c:	4b23      	ldr	r3, [pc, #140]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x114>)
 800544e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b0c      	cmp	r3, #12
 8005454:	d134      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005456:	4b1e      	ldr	r3, [pc, #120]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d003      	beq.n	800546e <HAL_RCC_GetSysClockFreq+0xa6>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d003      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0xac>
 800546c:	e005      	b.n	800547a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800546e:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005470:	617b      	str	r3, [r7, #20]
      break;
 8005472:	e005      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005474:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x114>)
 8005476:	617b      	str	r3, [r7, #20]
      break;
 8005478:	e002      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	617b      	str	r3, [r7, #20]
      break;
 800547e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005480:	4b13      	ldr	r3, [pc, #76]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	3301      	adds	r3, #1
 800548c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800548e:	4b10      	ldr	r3, [pc, #64]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	fb03 f202 	mul.w	r2, r3, r2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054a6:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	0e5b      	lsrs	r3, r3, #25
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	3301      	adds	r3, #1
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054c0:	69bb      	ldr	r3, [r7, #24]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3724      	adds	r7, #36	@ 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	08013370 	.word	0x08013370
 80054d8:	00f42400 	.word	0x00f42400
 80054dc:	007a1200 	.word	0x007a1200

080054e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b03      	ldr	r3, [pc, #12]	@ (80054f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000000c 	.word	0x2000000c

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054fc:	f7ff fff0 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b06      	ldr	r3, [pc, #24]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4904      	ldr	r1, [pc, #16]	@ (8005520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021000 	.word	0x40021000
 8005520:	08013368 	.word	0x08013368

08005524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005528:	f7ff ffda 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	0adb      	lsrs	r3, r3, #11
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4904      	ldr	r1, [pc, #16]	@ (800554c <HAL_RCC_GetPCLK2Freq+0x28>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000
 800554c:	08013368 	.word	0x08013368

08005550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005558:	2300      	movs	r3, #0
 800555a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800555c:	4b2a      	ldr	r3, [pc, #168]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005568:	f7ff f9b6 	bl	80048d8 <HAL_PWREx_GetVoltageRange>
 800556c:	6178      	str	r0, [r7, #20]
 800556e:	e014      	b.n	800559a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005570:	4b25      	ldr	r3, [pc, #148]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	4a24      	ldr	r2, [pc, #144]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800557a:	6593      	str	r3, [r2, #88]	@ 0x58
 800557c:	4b22      	ldr	r3, [pc, #136]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005588:	f7ff f9a6 	bl	80048d8 <HAL_PWREx_GetVoltageRange>
 800558c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800558e:	4b1e      	ldr	r3, [pc, #120]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005592:	4a1d      	ldr	r2, [pc, #116]	@ (8005608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005598:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a0:	d10b      	bne.n	80055ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b80      	cmp	r3, #128	@ 0x80
 80055a6:	d919      	bls.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80055ac:	d902      	bls.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055ae:	2302      	movs	r3, #2
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e013      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055b4:	2301      	movs	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	e010      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b80      	cmp	r3, #128	@ 0x80
 80055be:	d902      	bls.n	80055c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80055c0:	2303      	movs	r3, #3
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e00a      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b80      	cmp	r3, #128	@ 0x80
 80055ca:	d102      	bne.n	80055d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055cc:	2302      	movs	r3, #2
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	e004      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b70      	cmp	r3, #112	@ 0x70
 80055d6:	d101      	bne.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055d8:	2301      	movs	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055dc:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f023 0207 	bic.w	r2, r3, #7
 80055e4:	4909      	ldr	r1, [pc, #36]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055ec:	4b07      	ldr	r3, [pc, #28]	@ (800560c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d001      	beq.n	80055fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000
 800560c:	40022000 	.word	0x40022000

08005610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005618:	2300      	movs	r3, #0
 800561a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800561c:	2300      	movs	r3, #0
 800561e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005628:	2b00      	cmp	r3, #0
 800562a:	d031      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005630:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005634:	d01a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005636:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800563a:	d814      	bhi.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005640:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005644:	d10f      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005646:	4b5d      	ldr	r3, [pc, #372]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	4a5c      	ldr	r2, [pc, #368]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005650:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005652:	e00c      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fa22 	bl	8005aa4 <RCCEx_PLLSAI1_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005664:	e003      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	74fb      	strb	r3, [r7, #19]
      break;
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800566c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005674:	4b51      	ldr	r3, [pc, #324]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	494e      	ldr	r1, [pc, #312]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800568a:	e001      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568c:	7cfb      	ldrb	r3, [r7, #19]
 800568e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 809e 	beq.w	80057da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056a2:	4b46      	ldr	r3, [pc, #280]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b8:	4b40      	ldr	r3, [pc, #256]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056bc:	4a3f      	ldr	r2, [pc, #252]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80056c4:	4b3d      	ldr	r3, [pc, #244]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d0:	2301      	movs	r3, #1
 80056d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d4:	4b3a      	ldr	r3, [pc, #232]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a39      	ldr	r2, [pc, #228]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056e0:	f7fe fb66 	bl	8003db0 <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056e6:	e009      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7fe fb62 	bl	8003db0 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d902      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	74fb      	strb	r3, [r7, #19]
        break;
 80056fa:	e005      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056fc:	4b30      	ldr	r3, [pc, #192]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ef      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d15a      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800570e:	4b2b      	ldr	r3, [pc, #172]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005714:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005718:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01e      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	429a      	cmp	r2, r3
 8005728:	d019      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800572a:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005734:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005736:	4b21      	ldr	r3, [pc, #132]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573c:	4a1f      	ldr	r2, [pc, #124]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800573e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005746:	4b1d      	ldr	r3, [pc, #116]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574c:	4a1b      	ldr	r2, [pc, #108]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800574e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005756:	4a19      	ldr	r2, [pc, #100]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d016      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fe fb22 	bl	8003db0 <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576e:	e00b      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fe fb1e 	bl	8003db0 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d902      	bls.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	74fb      	strb	r3, [r7, #19]
            break;
 8005786:	e006      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005788:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0ec      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005796:	7cfb      	ldrb	r3, [r7, #19]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10b      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579c:	4b07      	ldr	r3, [pc, #28]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057aa:	4904      	ldr	r1, [pc, #16]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057b2:	e009      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057b4:	7cfb      	ldrb	r3, [r7, #19]
 80057b6:	74bb      	strb	r3, [r7, #18]
 80057b8:	e006      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c4:	7cfb      	ldrb	r3, [r7, #19]
 80057c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057c8:	7c7b      	ldrb	r3, [r7, #17]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d105      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d2:	4a8c      	ldr	r2, [pc, #560]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057e6:	4b87      	ldr	r3, [pc, #540]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ec:	f023 0203 	bic.w	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	4983      	ldr	r1, [pc, #524]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005808:	4b7e      	ldr	r3, [pc, #504]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580e:	f023 020c 	bic.w	r2, r3, #12
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	497b      	ldr	r1, [pc, #492]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800582a:	4b76      	ldr	r3, [pc, #472]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005838:	4972      	ldr	r1, [pc, #456]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800584c:	4b6d      	ldr	r3, [pc, #436]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005852:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585a:	496a      	ldr	r1, [pc, #424]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800586e:	4b65      	ldr	r3, [pc, #404]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005874:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	4961      	ldr	r1, [pc, #388]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005890:	4b5c      	ldr	r3, [pc, #368]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005896:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	4959      	ldr	r1, [pc, #356]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058b2:	4b54      	ldr	r3, [pc, #336]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	4950      	ldr	r1, [pc, #320]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e2:	4948      	ldr	r1, [pc, #288]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058f6:	4b43      	ldr	r3, [pc, #268]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	493f      	ldr	r1, [pc, #252]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d028      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005918:	4b3a      	ldr	r3, [pc, #232]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005926:	4937      	ldr	r1, [pc, #220]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005936:	d106      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005938:	4b32      	ldr	r3, [pc, #200]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a31      	ldr	r2, [pc, #196]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800593e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005942:	60d3      	str	r3, [r2, #12]
 8005944:	e011      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800594e:	d10c      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	2101      	movs	r1, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f8a4 	bl	8005aa4 <RCCEx_PLLSAI1_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d028      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005976:	4b23      	ldr	r3, [pc, #140]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005984:	491f      	ldr	r1, [pc, #124]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005994:	d106      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005996:	4b1b      	ldr	r3, [pc, #108]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	4a1a      	ldr	r2, [pc, #104]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800599c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059a0:	60d3      	str	r3, [r2, #12]
 80059a2:	e011      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f875 	bl	8005aa4 <RCCEx_PLLSAI1_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059be:	7cfb      	ldrb	r3, [r7, #19]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02b      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e2:	4908      	ldr	r1, [pc, #32]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059f2:	d109      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f4:	4b03      	ldr	r3, [pc, #12]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a02      	ldr	r2, [pc, #8]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059fe:	60d3      	str	r3, [r2, #12]
 8005a00:	e014      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005a02:	bf00      	nop
 8005a04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a10:	d10c      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3304      	adds	r3, #4
 8005a16:	2101      	movs	r1, #1
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 f843 	bl	8005aa4 <RCCEx_PLLSAI1_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a22:	7cfb      	ldrb	r3, [r7, #19]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005a28:	7cfb      	ldrb	r3, [r7, #19]
 8005a2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01c      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a38:	4b19      	ldr	r3, [pc, #100]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a46:	4916      	ldr	r1, [pc, #88]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a56:	d10c      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	2102      	movs	r1, #2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f820 	bl	8005aa4 <RCCEx_PLLSAI1_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a68:	7cfb      	ldrb	r3, [r7, #19]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a7e:	4b08      	ldr	r3, [pc, #32]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a84:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a8c:	4904      	ldr	r1, [pc, #16]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a94:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000

08005aa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ab2:	4b74      	ldr	r3, [pc, #464]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d018      	beq.n	8005af0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005abe:	4b71      	ldr	r3, [pc, #452]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0203 	and.w	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d10d      	bne.n	8005aea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ad6:	4b6b      	ldr	r3, [pc, #428]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d047      	beq.n	8005b7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
 8005aee:	e044      	b.n	8005b7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d018      	beq.n	8005b2a <RCCEx_PLLSAI1_Config+0x86>
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d825      	bhi.n	8005b48 <RCCEx_PLLSAI1_Config+0xa4>
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d002      	beq.n	8005b06 <RCCEx_PLLSAI1_Config+0x62>
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d009      	beq.n	8005b18 <RCCEx_PLLSAI1_Config+0x74>
 8005b04:	e020      	b.n	8005b48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b06:	4b5f      	ldr	r3, [pc, #380]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d11d      	bne.n	8005b4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b16:	e01a      	b.n	8005b4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b18:	4b5a      	ldr	r3, [pc, #360]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d116      	bne.n	8005b52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b28:	e013      	b.n	8005b52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b2a:	4b56      	ldr	r3, [pc, #344]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b36:	4b53      	ldr	r3, [pc, #332]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b46:	e006      	b.n	8005b56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e004      	b.n	8005b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b56:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10d      	bne.n	8005b7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b5e:	4b49      	ldr	r3, [pc, #292]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6819      	ldr	r1, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	430b      	orrs	r3, r1
 8005b74:	4943      	ldr	r1, [pc, #268]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d17c      	bne.n	8005c7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b80:	4b40      	ldr	r3, [pc, #256]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a3f      	ldr	r2, [pc, #252]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8c:	f7fe f910 	bl	8003db0 <HAL_GetTick>
 8005b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b92:	e009      	b.n	8005ba8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b94:	f7fe f90c 	bl	8003db0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d902      	bls.n	8005ba8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ba6:	e005      	b.n	8005bb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ba8:	4b36      	ldr	r3, [pc, #216]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ef      	bne.n	8005b94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d15f      	bne.n	8005c7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d110      	bne.n	8005be2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bc0:	4b30      	ldr	r3, [pc, #192]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005bc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6892      	ldr	r2, [r2, #8]
 8005bd0:	0211      	lsls	r1, r2, #8
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68d2      	ldr	r2, [r2, #12]
 8005bd6:	06d2      	lsls	r2, r2, #27
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	492a      	ldr	r1, [pc, #168]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	610b      	str	r3, [r1, #16]
 8005be0:	e027      	b.n	8005c32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d112      	bne.n	8005c0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be8:	4b26      	ldr	r3, [pc, #152]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005bf0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6892      	ldr	r2, [r2, #8]
 8005bf8:	0211      	lsls	r1, r2, #8
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6912      	ldr	r2, [r2, #16]
 8005bfe:	0852      	lsrs	r2, r2, #1
 8005c00:	3a01      	subs	r2, #1
 8005c02:	0552      	lsls	r2, r2, #21
 8005c04:	430a      	orrs	r2, r1
 8005c06:	491f      	ldr	r1, [pc, #124]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	610b      	str	r3, [r1, #16]
 8005c0c:	e011      	b.n	8005c32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6892      	ldr	r2, [r2, #8]
 8005c1e:	0211      	lsls	r1, r2, #8
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6952      	ldr	r2, [r2, #20]
 8005c24:	0852      	lsrs	r2, r2, #1
 8005c26:	3a01      	subs	r2, #1
 8005c28:	0652      	lsls	r2, r2, #25
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	4915      	ldr	r1, [pc, #84]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c32:	4b14      	ldr	r3, [pc, #80]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a13      	ldr	r2, [pc, #76]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3e:	f7fe f8b7 	bl	8003db0 <HAL_GetTick>
 8005c42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c44:	e009      	b.n	8005c5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c46:	f7fe f8b3 	bl	8003db0 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d902      	bls.n	8005c5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	73fb      	strb	r3, [r7, #15]
          break;
 8005c58:	e005      	b.n	8005c66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0ef      	beq.n	8005c46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d106      	bne.n	8005c7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c6c:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	4903      	ldr	r1, [pc, #12]	@ (8005c84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40021000 	.word	0x40021000

08005c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e095      	b.n	8005dc6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005caa:	d009      	beq.n	8005cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	61da      	str	r2, [r3, #28]
 8005cb2:	e005      	b.n	8005cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fa3a 	bl	8002154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cf6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d00:	d902      	bls.n	8005d08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	e002      	b.n	8005d0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d16:	d007      	beq.n	8005d28 <HAL_SPI_Init+0xa0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d20:	d002      	beq.n	8005d28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6a:	ea42 0103 	orr.w	r1, r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	0c1b      	lsrs	r3, r3, #16
 8005d84:	f003 0204 	and.w	r2, r3, #4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005da4:	ea42 0103 	orr.w	r1, r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b08a      	sub	sp, #40	@ 0x28
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de0:	f7fd ffe6 	bl	8003db0 <HAL_GetTick>
 8005de4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005df4:	887b      	ldrh	r3, [r7, #2]
 8005df6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dfc:	7ffb      	ldrb	r3, [r7, #31]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d00c      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x4e>
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e08:	d106      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d102      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x4a>
 8005e12:	7ffb      	ldrb	r3, [r7, #31]
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d001      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e1f3      	b.n	8006204 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0x60>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0x60>
 8005e28:	887b      	ldrh	r3, [r7, #2]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e1e8      	b.n	8006204 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x72>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e1e1      	b.n	8006204 <HAL_SPI_TransmitReceive+0x436>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d003      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2205      	movs	r2, #5
 8005e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	887a      	ldrh	r2, [r7, #2]
 8005e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	887a      	ldrh	r2, [r7, #2]
 8005e74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	887a      	ldrh	r2, [r7, #2]
 8005e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	887a      	ldrh	r2, [r7, #2]
 8005e88:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e9e:	d802      	bhi.n	8005ea6 <HAL_SPI_TransmitReceive+0xd8>
 8005ea0:	8abb      	ldrh	r3, [r7, #20]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d908      	bls.n	8005eb8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005eb4:	605a      	str	r2, [r3, #4]
 8005eb6:	e007      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed2:	2b40      	cmp	r3, #64	@ 0x40
 8005ed4:	d007      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005eee:	f240 8083 	bls.w	8005ff8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_SPI_TransmitReceive+0x132>
 8005efa:	8afb      	ldrh	r3, [r7, #22]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d16f      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f24:	e05c      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d11b      	bne.n	8005f6c <HAL_SPI_TransmitReceive+0x19e>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d016      	beq.n	8005f6c <HAL_SPI_TransmitReceive+0x19e>
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d113      	bne.n	8005f6c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	881a      	ldrh	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d11c      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x1e6>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	b292      	uxth	r2, r2
 8005f92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f98:	1c9a      	adds	r2, r3, #2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fb4:	f7fd fefc 	bl	8003db0 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d80d      	bhi.n	8005fe0 <HAL_SPI_TransmitReceive+0x212>
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d009      	beq.n	8005fe0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e111      	b.n	8006204 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d19d      	bne.n	8005f26 <HAL_SPI_TransmitReceive+0x158>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d197      	bne.n	8005f26 <HAL_SPI_TransmitReceive+0x158>
 8005ff6:	e0e5      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_SPI_TransmitReceive+0x23a>
 8006000:	8afb      	ldrh	r3, [r7, #22]
 8006002:	2b01      	cmp	r3, #1
 8006004:	f040 80d1 	bne.w	80061aa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d912      	bls.n	8006038 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006016:	881a      	ldrh	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006022:	1c9a      	adds	r2, r3, #2
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b02      	subs	r3, #2
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006036:	e0b8      	b.n	80061aa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800605e:	e0a4      	b.n	80061aa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b02      	cmp	r3, #2
 800606c:	d134      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x30a>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d02f      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x30a>
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	2b01      	cmp	r3, #1
 800607c:	d12c      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d912      	bls.n	80060ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	1c9a      	adds	r2, r3, #2
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b02      	subs	r3, #2
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060ac:	e012      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	7812      	ldrb	r2, [r2, #0]
 80060ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d148      	bne.n	8006178 <HAL_SPI_TransmitReceive+0x3aa>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d042      	beq.n	8006178 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d923      	bls.n	8006146 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006108:	b292      	uxth	r2, r2
 800610a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	1c9a      	adds	r2, r3, #2
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b02      	subs	r3, #2
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d81f      	bhi.n	8006174 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006142:	605a      	str	r2, [r3, #4]
 8006144:	e016      	b.n	8006174 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f103 020c 	add.w	r2, r3, #12
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006152:	7812      	ldrb	r2, [r2, #0]
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006174:	2301      	movs	r3, #1
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006178:	f7fd fe1a 	bl	8003db0 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006184:	429a      	cmp	r2, r3
 8006186:	d803      	bhi.n	8006190 <HAL_SPI_TransmitReceive+0x3c2>
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618e:	d102      	bne.n	8006196 <HAL_SPI_TransmitReceive+0x3c8>
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e02c      	b.n	8006204 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f47f af55 	bne.w	8006060 <HAL_SPI_TransmitReceive+0x292>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f47f af4e 	bne.w	8006060 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061c4:	6a3a      	ldr	r2, [r7, #32]
 80061c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fa5d 	bl	8006688 <SPI_EndRxTxTransaction>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e00e      	b.n	8006204 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006202:	2300      	movs	r3, #0
  }
}
 8006204:	4618      	mov	r0, r3
 8006206:	3728      	adds	r7, #40	@ 0x28
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10f      	bne.n	8006250 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	099b      	lsrs	r3, r3, #6
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
    return;
 800624e:	e0d7      	b.n	8006400 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_SPI_IRQHandler+0x66>
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	09db      	lsrs	r3, r3, #7
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
    return;
 8006270:	e0c6      	b.n	8006400 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10c      	bne.n	8006298 <HAL_SPI_IRQHandler+0x8c>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	099b      	lsrs	r3, r3, #6
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	0a1b      	lsrs	r3, r3, #8
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80b4 	beq.w	8006400 <HAL_SPI_IRQHandler+0x1f4>
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80ad 	beq.w	8006400 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	099b      	lsrs	r3, r3, #6
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d023      	beq.n	80062fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d011      	beq.n	80062e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c2:	f043 0204 	orr.w	r2, r3, #4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	e00b      	b.n	80062fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	693b      	ldr	r3, [r7, #16]
        return;
 80062f8:	e082      	b.n	8006400 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800630a:	f043 0201 	orr.w	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00c      	beq.n	8006356 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006340:	f043 0208 	orr.w	r2, r3, #8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006348:	2300      	movs	r3, #0
 800634a:	60bb      	str	r3, [r7, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800635a:	2b00      	cmp	r3, #0
 800635c:	d04f      	beq.n	80063fe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800636c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <HAL_SPI_IRQHandler+0x17e>
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d034      	beq.n	80063f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0203 	bic.w	r2, r2, #3
 8006398:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d011      	beq.n	80063c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a6:	4a18      	ldr	r2, [pc, #96]	@ (8006408 <HAL_SPI_IRQHandler+0x1fc>)
 80063a8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fd ffa2 	bl	80042f8 <HAL_DMA_Abort_IT>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006408 <HAL_SPI_IRQHandler+0x1fc>)
 80063d4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fd ff8c 	bl	80042f8 <HAL_DMA_Abort_IT>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80063f2:	e003      	b.n	80063fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f809 	bl	800640c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80063fa:	e000      	b.n	80063fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80063fc:	bf00      	nop
    return;
 80063fe:	bf00      	nop
  }
}
 8006400:	3720      	adds	r7, #32
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	08006421 	.word	0x08006421

0800640c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7ff ffe5 	bl	800640c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800645c:	f7fd fca8 	bl	8003db0 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	4413      	add	r3, r2
 800646a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800646c:	f7fd fca0 	bl	8003db0 <HAL_GetTick>
 8006470:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006472:	4b39      	ldr	r3, [pc, #228]	@ (8006558 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	015b      	lsls	r3, r3, #5
 8006478:	0d1b      	lsrs	r3, r3, #20
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	fb02 f303 	mul.w	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006482:	e054      	b.n	800652e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d050      	beq.n	800652e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800648c:	f7fd fc90 	bl	8003db0 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	429a      	cmp	r2, r3
 800649a:	d902      	bls.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d13d      	bne.n	800651e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ba:	d111      	bne.n	80064e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c4:	d004      	beq.n	80064d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ce:	d107      	bne.n	80064e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e8:	d10f      	bne.n	800650a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006508:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e017      	b.n	800654e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	3b01      	subs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4013      	ands	r3, r2
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	429a      	cmp	r2, r3
 800653c:	bf0c      	ite	eq
 800653e:	2301      	moveq	r3, #1
 8006540:	2300      	movne	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	429a      	cmp	r2, r3
 800654a:	d19b      	bne.n	8006484 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3720      	adds	r7, #32
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	2000000c 	.word	0x2000000c

0800655c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	@ 0x28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800656e:	f7fd fc1f 	bl	8003db0 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	4413      	add	r3, r2
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800657e:	f7fd fc17 	bl	8003db0 <HAL_GetTick>
 8006582:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330c      	adds	r3, #12
 800658a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800658c:	4b3d      	ldr	r3, [pc, #244]	@ (8006684 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	00da      	lsls	r2, r3, #3
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	0d1b      	lsrs	r3, r3, #20
 800659c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065a4:	e060      	b.n	8006668 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065ac:	d107      	bne.n	80065be <SPI_WaitFifoStateUntilTimeout+0x62>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d050      	beq.n	8006668 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065c6:	f7fd fbf3 	bl	8003db0 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d902      	bls.n	80065dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d13d      	bne.n	8006658 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065f4:	d111      	bne.n	800661a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065fe:	d004      	beq.n	800660a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006608:	d107      	bne.n	800661a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006618:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006622:	d10f      	bne.n	8006644 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006642:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e010      	b.n	800667a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	3b01      	subs	r3, #1
 8006666:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d196      	bne.n	80065a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3728      	adds	r7, #40	@ 0x28
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	2000000c 	.word	0x2000000c

08006688 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af02      	add	r7, sp, #8
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2200      	movs	r2, #0
 800669c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ff5b 	bl	800655c <SPI_WaitFifoStateUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e027      	b.n	800670c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2200      	movs	r2, #0
 80066c4:	2180      	movs	r1, #128	@ 0x80
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff fec0 	bl	800644c <SPI_WaitFlagStateUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d6:	f043 0220 	orr.w	r2, r3, #32
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e014      	b.n	800670c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ff34 	bl	800655c <SPI_WaitFifoStateUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e000      	b.n	800670c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e049      	b.n	80067ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fc f8d0 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f000 fa82 	bl	8006c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d001      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e03b      	b.n	8006854 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a19      	ldr	r2, [pc, #100]	@ (8006860 <HAL_TIM_Base_Start_IT+0x9c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <HAL_TIM_Base_Start_IT+0x4e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006806:	d004      	beq.n	8006812 <HAL_TIM_Base_Start_IT+0x4e>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a15      	ldr	r2, [pc, #84]	@ (8006864 <HAL_TIM_Base_Start_IT+0xa0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d115      	bne.n	800683e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <HAL_TIM_Base_Start_IT+0xa4>)
 800681a:	4013      	ands	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b06      	cmp	r3, #6
 8006822:	d015      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x8c>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800682a:	d011      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683c:	e008      	b.n	8006850 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0201 	orr.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e000      	b.n	8006852 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006850:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	40012c00 	.word	0x40012c00
 8006864:	40014000 	.word	0x40014000
 8006868:	00010007 	.word	0x00010007

0800686c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d020      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01b      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0202 	mvn.w	r2, #2
 80068a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f9b2 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f9a4 	bl	8006c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f9b5 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d020      	beq.n	800691c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01b      	beq.n	800691c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0204 	mvn.w	r2, #4
 80068ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f98c 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 8006908:	e005      	b.n	8006916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f97e 	bl	8006c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f98f 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d020      	beq.n	8006968 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01b      	beq.n	8006968 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0208 	mvn.w	r2, #8
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2204      	movs	r2, #4
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f966 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f958 	bl	8006c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f969 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	d020      	beq.n	80069b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01b      	beq.n	80069b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0210 	mvn.w	r2, #16
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2208      	movs	r2, #8
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f940 	bl	8006c20 <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f932 	bl	8006c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f943 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00c      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0201 	mvn.w	r2, #1
 80069d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fc ff3c 	bl	8003850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00c      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 faa5 	bl	8006f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00c      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fa9d 	bl	8006f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f8fd 	bl	8006c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00c      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f06f 0220 	mvn.w	r2, #32
 8006a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa65 	bl	8006f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_ConfigClockSource+0x1c>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e0b6      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x18a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ab8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ac0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad2:	d03e      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0xd8>
 8006ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad8:	f200 8087 	bhi.w	8006bea <HAL_TIM_ConfigClockSource+0x170>
 8006adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae0:	f000 8086 	beq.w	8006bf0 <HAL_TIM_ConfigClockSource+0x176>
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae8:	d87f      	bhi.n	8006bea <HAL_TIM_ConfigClockSource+0x170>
 8006aea:	2b70      	cmp	r3, #112	@ 0x70
 8006aec:	d01a      	beq.n	8006b24 <HAL_TIM_ConfigClockSource+0xaa>
 8006aee:	2b70      	cmp	r3, #112	@ 0x70
 8006af0:	d87b      	bhi.n	8006bea <HAL_TIM_ConfigClockSource+0x170>
 8006af2:	2b60      	cmp	r3, #96	@ 0x60
 8006af4:	d050      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0x11e>
 8006af6:	2b60      	cmp	r3, #96	@ 0x60
 8006af8:	d877      	bhi.n	8006bea <HAL_TIM_ConfigClockSource+0x170>
 8006afa:	2b50      	cmp	r3, #80	@ 0x50
 8006afc:	d03c      	beq.n	8006b78 <HAL_TIM_ConfigClockSource+0xfe>
 8006afe:	2b50      	cmp	r3, #80	@ 0x50
 8006b00:	d873      	bhi.n	8006bea <HAL_TIM_ConfigClockSource+0x170>
 8006b02:	2b40      	cmp	r3, #64	@ 0x40
 8006b04:	d058      	beq.n	8006bb8 <HAL_TIM_ConfigClockSource+0x13e>
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	d86f      	bhi.n	8006bea <HAL_TIM_ConfigClockSource+0x170>
 8006b0a:	2b30      	cmp	r3, #48	@ 0x30
 8006b0c:	d064      	beq.n	8006bd8 <HAL_TIM_ConfigClockSource+0x15e>
 8006b0e:	2b30      	cmp	r3, #48	@ 0x30
 8006b10:	d86b      	bhi.n	8006bea <HAL_TIM_ConfigClockSource+0x170>
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d060      	beq.n	8006bd8 <HAL_TIM_ConfigClockSource+0x15e>
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d867      	bhi.n	8006bea <HAL_TIM_ConfigClockSource+0x170>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d05c      	beq.n	8006bd8 <HAL_TIM_ConfigClockSource+0x15e>
 8006b1e:	2b10      	cmp	r3, #16
 8006b20:	d05a      	beq.n	8006bd8 <HAL_TIM_ConfigClockSource+0x15e>
 8006b22:	e062      	b.n	8006bea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b34:	f000 f97c 	bl	8006e30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	609a      	str	r2, [r3, #8]
      break;
 8006b50:	e04f      	b.n	8006bf2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b62:	f000 f965 	bl	8006e30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b74:	609a      	str	r2, [r3, #8]
      break;
 8006b76:	e03c      	b.n	8006bf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b84:	461a      	mov	r2, r3
 8006b86:	f000 f8d9 	bl	8006d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2150      	movs	r1, #80	@ 0x50
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f932 	bl	8006dfa <TIM_ITRx_SetConfig>
      break;
 8006b96:	e02c      	b.n	8006bf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f000 f8f8 	bl	8006d9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2160      	movs	r1, #96	@ 0x60
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 f922 	bl	8006dfa <TIM_ITRx_SetConfig>
      break;
 8006bb6:	e01c      	b.n	8006bf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f000 f8b9 	bl	8006d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2140      	movs	r1, #64	@ 0x40
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f912 	bl	8006dfa <TIM_ITRx_SetConfig>
      break;
 8006bd6:	e00c      	b.n	8006bf2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4619      	mov	r1, r3
 8006be2:	4610      	mov	r0, r2
 8006be4:	f000 f909 	bl	8006dfa <TIM_ITRx_SetConfig>
      break;
 8006be8:	e003      	b.n	8006bf2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	73fb      	strb	r3, [r7, #15]
      break;
 8006bee:	e000      	b.n	8006bf2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006bf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a30      	ldr	r2, [pc, #192]	@ (8006d30 <TIM_Base_SetConfig+0xd4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_Base_SetConfig+0x20>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c7a:	d108      	bne.n	8006c8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a27      	ldr	r2, [pc, #156]	@ (8006d30 <TIM_Base_SetConfig+0xd4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00b      	beq.n	8006cae <TIM_Base_SetConfig+0x52>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c9c:	d007      	beq.n	8006cae <TIM_Base_SetConfig+0x52>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a24      	ldr	r2, [pc, #144]	@ (8006d34 <TIM_Base_SetConfig+0xd8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_Base_SetConfig+0x52>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a23      	ldr	r2, [pc, #140]	@ (8006d38 <TIM_Base_SetConfig+0xdc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d108      	bne.n	8006cc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a12      	ldr	r2, [pc, #72]	@ (8006d30 <TIM_Base_SetConfig+0xd4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d007      	beq.n	8006cfc <TIM_Base_SetConfig+0xa0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a11      	ldr	r2, [pc, #68]	@ (8006d34 <TIM_Base_SetConfig+0xd8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_Base_SetConfig+0xa0>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a10      	ldr	r2, [pc, #64]	@ (8006d38 <TIM_Base_SetConfig+0xdc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d103      	bne.n	8006d04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d105      	bne.n	8006d22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]
  }
}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40014000 	.word	0x40014000
 8006d38:	40014400 	.word	0x40014400

08006d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f023 0201 	bic.w	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f023 030a 	bic.w	r3, r3, #10
 8006d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b087      	sub	sp, #28
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f023 0210 	bic.w	r2, r3, #16
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	031b      	lsls	r3, r3, #12
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f043 0307 	orr.w	r3, r3, #7
 8006e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	609a      	str	r2, [r3, #8]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	021a      	lsls	r2, r3, #8
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	609a      	str	r2, [r3, #8]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e04f      	b.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a21      	ldr	r2, [pc, #132]	@ (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d108      	bne.n	8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006eb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a14      	ldr	r2, [pc, #80]	@ (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d009      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef0:	d004      	beq.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a10      	ldr	r2, [pc, #64]	@ (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d10c      	bne.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	40012c00 	.word	0x40012c00
 8006f38:	40014000 	.word	0x40014000

08006f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e040      	b.n	800700c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fb fd10 	bl	80029c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	@ 0x24
 8006fa4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 ffc0 	bl	8007f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fd63 	bl	8007a90 <UART_SetConfig>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e01b      	b.n	800700c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 f83f 	bl	8008088 <UART_CheckIdleState>
 800700a:	4603      	mov	r3, r0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	@ 0x28
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007028:	2b20      	cmp	r3, #32
 800702a:	d177      	bne.n	800711c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_UART_Transmit+0x24>
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e070      	b.n	800711e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2221      	movs	r2, #33	@ 0x21
 8007048:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800704a:	f7fc feb1 	bl	8003db0 <HAL_GetTick>
 800704e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007068:	d108      	bne.n	800707c <HAL_UART_Transmit+0x68>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	e003      	b.n	8007084 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007084:	e02f      	b.n	80070e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2200      	movs	r2, #0
 800708e:	2180      	movs	r1, #128	@ 0x80
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f001 f8a1 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e03b      	b.n	800711e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	881a      	ldrh	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070b8:	b292      	uxth	r2, r2
 80070ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	3302      	adds	r3, #2
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e007      	b.n	80070d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	781a      	ldrb	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3301      	adds	r3, #1
 80070d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1c9      	bne.n	8007086 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2140      	movs	r1, #64	@ 0x40
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f001 f86b 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2220      	movs	r2, #32
 800710c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e005      	b.n	800711e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2220      	movs	r2, #32
 8007116:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	e000      	b.n	800711e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800711c:	2302      	movs	r3, #2
  }
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	@ 0x28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800713a:	2b20      	cmp	r3, #32
 800713c:	d165      	bne.n	800720a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_UART_Transmit_DMA+0x22>
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e05e      	b.n	800720c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2221      	movs	r2, #33	@ 0x21
 8007170:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007176:	2b00      	cmp	r3, #0
 8007178:	d027      	beq.n	80071ca <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717e:	4a25      	ldr	r2, [pc, #148]	@ (8007214 <HAL_UART_Transmit_DMA+0xec>)
 8007180:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007186:	4a24      	ldr	r2, [pc, #144]	@ (8007218 <HAL_UART_Transmit_DMA+0xf0>)
 8007188:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718e:	4a23      	ldr	r2, [pc, #140]	@ (800721c <HAL_UART_Transmit_DMA+0xf4>)
 8007190:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007196:	2200      	movs	r2, #0
 8007198:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a2:	4619      	mov	r1, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3328      	adds	r3, #40	@ 0x28
 80071aa:	461a      	mov	r2, r3
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	f7fd f805 	bl	80041bc <HAL_DMA_Start_IT>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2210      	movs	r2, #16
 80071bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2220      	movs	r2, #32
 80071c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e020      	b.n	800720c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2240      	movs	r2, #64	@ 0x40
 80071d0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	613b      	str	r3, [r7, #16]
   return(result);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f2:	623a      	str	r2, [r7, #32]
 80071f4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	69f9      	ldr	r1, [r7, #28]
 80071f8:	6a3a      	ldr	r2, [r7, #32]
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e5      	bne.n	80071d2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e000      	b.n	800720c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800720a:	2302      	movs	r3, #2
  }
}
 800720c:	4618      	mov	r0, r3
 800720e:	3728      	adds	r7, #40	@ 0x28
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	08008509 	.word	0x08008509
 8007218:	080085a3 	.word	0x080085a3
 800721c:	08008729 	.word	0x08008729

08007220 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08a      	sub	sp, #40	@ 0x28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007234:	2b20      	cmp	r3, #32
 8007236:	d137      	bne.n	80072a8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_UART_Receive_DMA+0x24>
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e030      	b.n	80072aa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a18      	ldr	r2, [pc, #96]	@ (80072b4 <HAL_UART_Receive_DMA+0x94>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d01f      	beq.n	8007298 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d018      	beq.n	8007298 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	613b      	str	r3, [r7, #16]
   return(result);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	623b      	str	r3, [r7, #32]
 8007286:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	61bb      	str	r3, [r7, #24]
   return(result);
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e6      	bne.n	8007266 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	461a      	mov	r2, r3
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f001 f808 	bl	80082b4 <UART_Start_Receive_DMA>
 80072a4:	4603      	mov	r3, r0
 80072a6:	e000      	b.n	80072aa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072a8:	2302      	movs	r3, #2
  }
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3728      	adds	r7, #40	@ 0x28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40008000 	.word	0x40008000

080072b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b09a      	sub	sp, #104	@ 0x68
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072de:	657b      	str	r3, [r7, #84]	@ 0x54
 80072e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e6      	bne.n	80072c0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	663b      	str	r3, [r7, #96]	@ 0x60
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3308      	adds	r3, #8
 8007310:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007312:	643a      	str	r2, [r7, #64]	@ 0x40
 8007314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007318:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e5      	bne.n	80072f2 <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800732a:	2b01      	cmp	r3, #1
 800732c:	d118      	bne.n	8007360 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	61fb      	str	r3, [r7, #28]
   return(result);
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f023 0310 	bic.w	r3, r3, #16
 8007342:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800734c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800734e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e6      	bne.n	800732e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736a:	2b40      	cmp	r3, #64	@ 0x40
 800736c:	d137      	bne.n	80073de <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3308      	adds	r3, #8
 8007374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	60bb      	str	r3, [r7, #8]
   return(result);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007384:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800738e:	61ba      	str	r2, [r7, #24]
 8007390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	613b      	str	r3, [r7, #16]
   return(result);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e5      	bne.n	800736e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d019      	beq.n	80073de <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ae:	2200      	movs	r2, #0
 80073b0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fc ff60 	bl	800427c <HAL_DMA_Abort>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00d      	beq.n	80073de <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fd f886 	bl	80044d8 <HAL_DMA_GetError>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d105      	bne.n	80073de <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2210      	movs	r2, #16
 80073d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e019      	b.n	8007412 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	220f      	movs	r2, #15
 80073ec:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	8b1b      	ldrh	r3, [r3, #24]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0208 	orr.w	r2, r2, #8
 80073fe:	b292      	uxth	r2, r2
 8007400:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3768      	adds	r7, #104	@ 0x68
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b0ba      	sub	sp, #232	@ 0xe8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007442:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007446:	f640 030f 	movw	r3, #2063	@ 0x80f
 800744a:	4013      	ands	r3, r2
 800744c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007454:	2b00      	cmp	r3, #0
 8007456:	d115      	bne.n	8007484 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00f      	beq.n	8007484 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 82ca 	beq.w	8007a0e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
      }
      return;
 8007482:	e2c4      	b.n	8007a0e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 8117 	beq.w	80076bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800748e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800749a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800749e:	4b85      	ldr	r3, [pc, #532]	@ (80076b4 <HAL_UART_IRQHandler+0x298>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 810a 	beq.w	80076bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d011      	beq.n	80074d8 <HAL_UART_IRQHandler+0xbc>
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2201      	movs	r2, #1
 80074c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074ce:	f043 0201 	orr.w	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d011      	beq.n	8007508 <HAL_UART_IRQHandler+0xec>
 80074e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2202      	movs	r2, #2
 80074f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074fe:	f043 0204 	orr.w	r2, r3, #4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d011      	beq.n	8007538 <HAL_UART_IRQHandler+0x11c>
 8007514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2204      	movs	r2, #4
 8007526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800752e:	f043 0202 	orr.w	r2, r3, #2
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d017      	beq.n	8007574 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007554:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2208      	movs	r2, #8
 8007562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800756a:	f043 0208 	orr.w	r2, r3, #8
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800757c:	2b00      	cmp	r3, #0
 800757e:	d012      	beq.n	80075a6 <HAL_UART_IRQHandler+0x18a>
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007584:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00c      	beq.n	80075a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800759c:	f043 0220 	orr.w	r2, r3, #32
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8230 	beq.w	8007a12 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00d      	beq.n	80075da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ee:	2b40      	cmp	r3, #64	@ 0x40
 80075f0:	d005      	beq.n	80075fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d04f      	beq.n	800769e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 ff1e 	bl	8008440 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d141      	bne.n	8007696 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800762c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800763e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007642:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800764a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1d9      	bne.n	8007612 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007662:	2b00      	cmp	r3, #0
 8007664:	d013      	beq.n	800768e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800766a:	4a13      	ldr	r2, [pc, #76]	@ (80076b8 <HAL_UART_IRQHandler+0x29c>)
 800766c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007672:	4618      	mov	r0, r3
 8007674:	f7fc fe40 	bl	80042f8 <HAL_DMA_Abort_IT>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d017      	beq.n	80076ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	e00f      	b.n	80076ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9e8 	bl	8007a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007694:	e00b      	b.n	80076ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f9e4 	bl	8007a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769c:	e007      	b.n	80076ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f9e0 	bl	8007a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80076ac:	e1b1      	b.n	8007a12 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ae:	bf00      	nop
    return;
 80076b0:	e1af      	b.n	8007a12 <HAL_UART_IRQHandler+0x5f6>
 80076b2:	bf00      	nop
 80076b4:	04000120 	.word	0x04000120
 80076b8:	080087a7 	.word	0x080087a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	f040 816a 	bne.w	800799a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8163 	beq.w	800799a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 815c 	beq.w	800799a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2210      	movs	r2, #16
 80076e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f4:	2b40      	cmp	r3, #64	@ 0x40
 80076f6:	f040 80d4 	bne.w	80078a2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007706:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 80ad 	beq.w	800786a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800771a:	429a      	cmp	r2, r3
 800771c:	f080 80a5 	bcs.w	800786a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007726:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b00      	cmp	r3, #0
 8007738:	f040 8086 	bne.w	8007848 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007750:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800776a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007772:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800777e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1da      	bne.n	800773c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3308      	adds	r3, #8
 800778c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007798:	f023 0301 	bic.w	r3, r3, #1
 800779c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3308      	adds	r3, #8
 80077a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e1      	bne.n	8007786 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e3      	bne.n	80077c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007818:	f023 0310 	bic.w	r3, r3, #16
 800781c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800782a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800782c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007830:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e4      	bne.n	8007808 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007842:	4618      	mov	r0, r3
 8007844:	f7fc fd1a 	bl	800427c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800785a:	b29b      	uxth	r3, r3
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f908 	bl	8007a78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007868:	e0d5      	b.n	8007a16 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007870:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007874:	429a      	cmp	r2, r3
 8007876:	f040 80ce 	bne.w	8007a16 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b20      	cmp	r3, #32
 8007888:	f040 80c5 	bne.w	8007a16 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f8ec 	bl	8007a78 <HAL_UARTEx_RxEventCallback>
      return;
 80078a0:	e0b9      	b.n	8007a16 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80ab 	beq.w	8007a1a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80078c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 80a6 	beq.w	8007a1a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e4      	bne.n	80078ce <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	623b      	str	r3, [r7, #32]
   return(result);
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3308      	adds	r3, #8
 8007924:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007928:	633a      	str	r2, [r7, #48]	@ 0x30
 800792a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800792e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e3      	bne.n	8007904 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2220      	movs	r2, #32
 8007940:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	60fb      	str	r3, [r7, #12]
   return(result);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0310 	bic.w	r3, r3, #16
 8007964:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	69b9      	ldr	r1, [r7, #24]
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	617b      	str	r3, [r7, #20]
   return(result);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e4      	bne.n	8007950 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2202      	movs	r2, #2
 800798a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800798c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f870 	bl	8007a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007998:	e03f      	b.n	8007a1a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800799a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800799e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <HAL_UART_IRQHandler+0x5a8>
 80079a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d008      	beq.n	80079c4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 ff32 	bl	8008826 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079c2:	e02d      	b.n	8007a20 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00e      	beq.n	80079ee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d008      	beq.n	80079ee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01c      	beq.n	8007a1e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	4798      	blx	r3
    }
    return;
 80079ec:	e017      	b.n	8007a1e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d012      	beq.n	8007a20 <HAL_UART_IRQHandler+0x604>
 80079fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00c      	beq.n	8007a20 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fee3 	bl	80087d2 <UART_EndTransmit_IT>
    return;
 8007a0c:	e008      	b.n	8007a20 <HAL_UART_IRQHandler+0x604>
      return;
 8007a0e:	bf00      	nop
 8007a10:	e006      	b.n	8007a20 <HAL_UART_IRQHandler+0x604>
    return;
 8007a12:	bf00      	nop
 8007a14:	e004      	b.n	8007a20 <HAL_UART_IRQHandler+0x604>
      return;
 8007a16:	bf00      	nop
 8007a18:	e002      	b.n	8007a20 <HAL_UART_IRQHandler+0x604>
      return;
 8007a1a:	bf00      	nop
 8007a1c:	e000      	b.n	8007a20 <HAL_UART_IRQHandler+0x604>
    return;
 8007a1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007a20:	37e8      	adds	r7, #232	@ 0xe8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop

08007a28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a94:	b08a      	sub	sp, #40	@ 0x28
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b9e      	ldr	r3, [pc, #632]	@ (8007d38 <UART_SetConfig+0x2a8>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a93      	ldr	r2, [pc, #588]	@ (8007d3c <UART_SetConfig+0x2ac>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d004      	beq.n	8007afc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af8:	4313      	orrs	r3, r2
 8007afa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a8a      	ldr	r2, [pc, #552]	@ (8007d40 <UART_SetConfig+0x2b0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d126      	bne.n	8007b68 <UART_SetConfig+0xd8>
 8007b1a:	4b8a      	ldr	r3, [pc, #552]	@ (8007d44 <UART_SetConfig+0x2b4>)
 8007b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d81b      	bhi.n	8007b60 <UART_SetConfig+0xd0>
 8007b28:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <UART_SetConfig+0xa0>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b59 	.word	0x08007b59
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b46:	e0ab      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b4e:	e0a7      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b56:	e0a3      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5e:	e09f      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b66:	e09b      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a76      	ldr	r2, [pc, #472]	@ (8007d48 <UART_SetConfig+0x2b8>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d138      	bne.n	8007be4 <UART_SetConfig+0x154>
 8007b72:	4b74      	ldr	r3, [pc, #464]	@ (8007d44 <UART_SetConfig+0x2b4>)
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b78:	f003 030c 	and.w	r3, r3, #12
 8007b7c:	2b0c      	cmp	r3, #12
 8007b7e:	d82d      	bhi.n	8007bdc <UART_SetConfig+0x14c>
 8007b80:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <UART_SetConfig+0xf8>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007bbd 	.word	0x08007bbd
 8007b8c:	08007bdd 	.word	0x08007bdd
 8007b90:	08007bdd 	.word	0x08007bdd
 8007b94:	08007bdd 	.word	0x08007bdd
 8007b98:	08007bcd 	.word	0x08007bcd
 8007b9c:	08007bdd 	.word	0x08007bdd
 8007ba0:	08007bdd 	.word	0x08007bdd
 8007ba4:	08007bdd 	.word	0x08007bdd
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	08007bdd 	.word	0x08007bdd
 8007bb0:	08007bdd 	.word	0x08007bdd
 8007bb4:	08007bdd 	.word	0x08007bdd
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bc2:	e06d      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bca:	e069      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bd2:	e065      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bda:	e061      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007be2:	e05d      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a58      	ldr	r2, [pc, #352]	@ (8007d4c <UART_SetConfig+0x2bc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d125      	bne.n	8007c3a <UART_SetConfig+0x1aa>
 8007bee:	4b55      	ldr	r3, [pc, #340]	@ (8007d44 <UART_SetConfig+0x2b4>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bf8:	2b30      	cmp	r3, #48	@ 0x30
 8007bfa:	d016      	beq.n	8007c2a <UART_SetConfig+0x19a>
 8007bfc:	2b30      	cmp	r3, #48	@ 0x30
 8007bfe:	d818      	bhi.n	8007c32 <UART_SetConfig+0x1a2>
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d00a      	beq.n	8007c1a <UART_SetConfig+0x18a>
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d814      	bhi.n	8007c32 <UART_SetConfig+0x1a2>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <UART_SetConfig+0x182>
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d008      	beq.n	8007c22 <UART_SetConfig+0x192>
 8007c10:	e00f      	b.n	8007c32 <UART_SetConfig+0x1a2>
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c18:	e042      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c20:	e03e      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c22:	2304      	movs	r3, #4
 8007c24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c28:	e03a      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c2a:	2308      	movs	r3, #8
 8007c2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c30:	e036      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c32:	2310      	movs	r3, #16
 8007c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c38:	e032      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a3f      	ldr	r2, [pc, #252]	@ (8007d3c <UART_SetConfig+0x2ac>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d12a      	bne.n	8007c9a <UART_SetConfig+0x20a>
 8007c44:	4b3f      	ldr	r3, [pc, #252]	@ (8007d44 <UART_SetConfig+0x2b4>)
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c4a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c52:	d01a      	beq.n	8007c8a <UART_SetConfig+0x1fa>
 8007c54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c58:	d81b      	bhi.n	8007c92 <UART_SetConfig+0x202>
 8007c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c5e:	d00c      	beq.n	8007c7a <UART_SetConfig+0x1ea>
 8007c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c64:	d815      	bhi.n	8007c92 <UART_SetConfig+0x202>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <UART_SetConfig+0x1e2>
 8007c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c6e:	d008      	beq.n	8007c82 <UART_SetConfig+0x1f2>
 8007c70:	e00f      	b.n	8007c92 <UART_SetConfig+0x202>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c78:	e012      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c80:	e00e      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c82:	2304      	movs	r3, #4
 8007c84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c88:	e00a      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c90:	e006      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c92:	2310      	movs	r3, #16
 8007c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c98:	e002      	b.n	8007ca0 <UART_SetConfig+0x210>
 8007c9a:	2310      	movs	r3, #16
 8007c9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a25      	ldr	r2, [pc, #148]	@ (8007d3c <UART_SetConfig+0x2ac>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	f040 808a 	bne.w	8007dc0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d824      	bhi.n	8007cfe <UART_SetConfig+0x26e>
 8007cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cbc <UART_SetConfig+0x22c>)
 8007cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cba:	bf00      	nop
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007cff 	.word	0x08007cff
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cff 	.word	0x08007cff
 8007ccc:	08007cef 	.word	0x08007cef
 8007cd0:	08007cff 	.word	0x08007cff
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007cff 	.word	0x08007cff
 8007cdc:	08007cf7 	.word	0x08007cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fd fc0a 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8007ce4:	61f8      	str	r0, [r7, #28]
        break;
 8007ce6:	e010      	b.n	8007d0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce8:	4b19      	ldr	r3, [pc, #100]	@ (8007d50 <UART_SetConfig+0x2c0>)
 8007cea:	61fb      	str	r3, [r7, #28]
        break;
 8007cec:	e00d      	b.n	8007d0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fd fb6b 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8007cf2:	61f8      	str	r0, [r7, #28]
        break;
 8007cf4:	e009      	b.n	8007d0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cfa:	61fb      	str	r3, [r7, #28]
        break;
 8007cfc:	e005      	b.n	8007d0a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8109 	beq.w	8007f24 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4613      	mov	r3, r2
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	4413      	add	r3, r2
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d305      	bcc.n	8007d2e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d912      	bls.n	8007d54 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d34:	e0f6      	b.n	8007f24 <UART_SetConfig+0x494>
 8007d36:	bf00      	nop
 8007d38:	efff69f3 	.word	0xefff69f3
 8007d3c:	40008000 	.word	0x40008000
 8007d40:	40013800 	.word	0x40013800
 8007d44:	40021000 	.word	0x40021000
 8007d48:	40004400 	.word	0x40004400
 8007d4c:	40004800 	.word	0x40004800
 8007d50:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	2200      	movs	r2, #0
 8007d58:	461c      	mov	r4, r3
 8007d5a:	4615      	mov	r5, r2
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	022b      	lsls	r3, r5, #8
 8007d66:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007d6a:	0222      	lsls	r2, r4, #8
 8007d6c:	68f9      	ldr	r1, [r7, #12]
 8007d6e:	6849      	ldr	r1, [r1, #4]
 8007d70:	0849      	lsrs	r1, r1, #1
 8007d72:	2000      	movs	r0, #0
 8007d74:	4688      	mov	r8, r1
 8007d76:	4681      	mov	r9, r0
 8007d78:	eb12 0a08 	adds.w	sl, r2, r8
 8007d7c:	eb43 0b09 	adc.w	fp, r3, r9
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d8e:	4650      	mov	r0, sl
 8007d90:	4659      	mov	r1, fp
 8007d92:	f7f8 ff89 	bl	8000ca8 <__aeabi_uldivmod>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007da4:	d308      	bcc.n	8007db8 <UART_SetConfig+0x328>
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dac:	d204      	bcs.n	8007db8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	60da      	str	r2, [r3, #12]
 8007db6:	e0b5      	b.n	8007f24 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007dbe:	e0b1      	b.n	8007f24 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dc8:	d15d      	bne.n	8007e86 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007dca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007dce:	2b08      	cmp	r3, #8
 8007dd0:	d827      	bhi.n	8007e22 <UART_SetConfig+0x392>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <UART_SetConfig+0x348>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007dfd 	.word	0x08007dfd
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	08007e23 	.word	0x08007e23
 8007de8:	08007e13 	.word	0x08007e13
 8007dec:	08007e23 	.word	0x08007e23
 8007df0:	08007e23 	.word	0x08007e23
 8007df4:	08007e23 	.word	0x08007e23
 8007df8:	08007e1b 	.word	0x08007e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dfc:	f7fd fb7c 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8007e00:	61f8      	str	r0, [r7, #28]
        break;
 8007e02:	e014      	b.n	8007e2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e04:	f7fd fb8e 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 8007e08:	61f8      	str	r0, [r7, #28]
        break;
 8007e0a:	e010      	b.n	8007e2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8007f40 <UART_SetConfig+0x4b0>)
 8007e0e:	61fb      	str	r3, [r7, #28]
        break;
 8007e10:	e00d      	b.n	8007e2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e12:	f7fd fad9 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8007e16:	61f8      	str	r0, [r7, #28]
        break;
 8007e18:	e009      	b.n	8007e2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e1e:	61fb      	str	r3, [r7, #28]
        break;
 8007e20:	e005      	b.n	8007e2e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d077      	beq.n	8007f24 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	005a      	lsls	r2, r3, #1
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	441a      	add	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	2b0f      	cmp	r3, #15
 8007e4e:	d916      	bls.n	8007e7e <UART_SetConfig+0x3ee>
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e56:	d212      	bcs.n	8007e7e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f023 030f 	bic.w	r3, r3, #15
 8007e60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	085b      	lsrs	r3, r3, #1
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	8afb      	ldrh	r3, [r7, #22]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	8afa      	ldrh	r2, [r7, #22]
 8007e7a:	60da      	str	r2, [r3, #12]
 8007e7c:	e052      	b.n	8007f24 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e84:	e04e      	b.n	8007f24 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	d827      	bhi.n	8007ede <UART_SetConfig+0x44e>
 8007e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e94 <UART_SetConfig+0x404>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007eb9 	.word	0x08007eb9
 8007e98:	08007ec1 	.word	0x08007ec1
 8007e9c:	08007ec9 	.word	0x08007ec9
 8007ea0:	08007edf 	.word	0x08007edf
 8007ea4:	08007ecf 	.word	0x08007ecf
 8007ea8:	08007edf 	.word	0x08007edf
 8007eac:	08007edf 	.word	0x08007edf
 8007eb0:	08007edf 	.word	0x08007edf
 8007eb4:	08007ed7 	.word	0x08007ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eb8:	f7fd fb1e 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8007ebc:	61f8      	str	r0, [r7, #28]
        break;
 8007ebe:	e014      	b.n	8007eea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ec0:	f7fd fb30 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 8007ec4:	61f8      	str	r0, [r7, #28]
        break;
 8007ec6:	e010      	b.n	8007eea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f40 <UART_SetConfig+0x4b0>)
 8007eca:	61fb      	str	r3, [r7, #28]
        break;
 8007ecc:	e00d      	b.n	8007eea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ece:	f7fd fa7b 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8007ed2:	61f8      	str	r0, [r7, #28]
        break;
 8007ed4:	e009      	b.n	8007eea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eda:	61fb      	str	r3, [r7, #28]
        break;
 8007edc:	e005      	b.n	8007eea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ee8:	bf00      	nop
    }

    if (pclk != 0U)
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d019      	beq.n	8007f24 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	085a      	lsrs	r2, r3, #1
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	441a      	add	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d909      	bls.n	8007f1e <UART_SetConfig+0x48e>
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f10:	d205      	bcs.n	8007f1e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60da      	str	r2, [r3, #12]
 8007f1c:	e002      	b.n	8007f24 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007f30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3728      	adds	r7, #40	@ 0x28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f3e:	bf00      	nop
 8007f40:	00f42400 	.word	0x00f42400

08007f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01a      	beq.n	800805a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008042:	d10a      	bne.n	800805a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	605a      	str	r2, [r3, #4]
  }
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b098      	sub	sp, #96	@ 0x60
 800808c:	af02      	add	r7, sp, #8
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008098:	f7fb fe8a 	bl	8003db0 <HAL_GetTick>
 800809c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0308 	and.w	r3, r3, #8
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d12e      	bne.n	800810a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080b4:	2200      	movs	r2, #0
 80080b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f88c 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d021      	beq.n	800810a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080da:	653b      	str	r3, [r7, #80]	@ 0x50
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e6      	bne.n	80080c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e062      	b.n	80081d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b04      	cmp	r3, #4
 8008116:	d149      	bne.n	80081ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008118:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008120:	2200      	movs	r2, #0
 8008122:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f856 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d03c      	beq.n	80081ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	623b      	str	r3, [r7, #32]
   return(result);
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008150:	633b      	str	r3, [r7, #48]	@ 0x30
 8008152:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800815e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e6      	bne.n	8008132 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3308      	adds	r3, #8
 800816a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	60fb      	str	r3, [r7, #12]
   return(result);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0301 	bic.w	r3, r3, #1
 800817a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3308      	adds	r3, #8
 8008182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008184:	61fa      	str	r2, [r7, #28]
 8008186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	69b9      	ldr	r1, [r7, #24]
 800818a:	69fa      	ldr	r2, [r7, #28]
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	617b      	str	r3, [r7, #20]
   return(result);
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e5      	bne.n	8008164 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e011      	b.n	80081d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3758      	adds	r7, #88	@ 0x58
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	4613      	mov	r3, r2
 80081e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e8:	e04f      	b.n	800828a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f0:	d04b      	beq.n	800828a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7fb fddd 	bl	8003db0 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d302      	bcc.n	8008208 <UART_WaitOnFlagUntilTimeout+0x30>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e04e      	b.n	80082aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	d037      	beq.n	800828a <UART_WaitOnFlagUntilTimeout+0xb2>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b80      	cmp	r3, #128	@ 0x80
 800821e:	d034      	beq.n	800828a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b40      	cmp	r3, #64	@ 0x40
 8008224:	d031      	beq.n	800828a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b08      	cmp	r3, #8
 8008232:	d110      	bne.n	8008256 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2208      	movs	r2, #8
 800823a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f8ff 	bl	8008440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2208      	movs	r2, #8
 8008246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e029      	b.n	80082aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008264:	d111      	bne.n	800828a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800826e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 f8e5 	bl	8008440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e00f      	b.n	80082aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69da      	ldr	r2, [r3, #28]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4013      	ands	r3, r2
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	429a      	cmp	r2, r3
 8008298:	bf0c      	ite	eq
 800829a:	2301      	moveq	r3, #1
 800829c:	2300      	movne	r3, #0
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	461a      	mov	r2, r3
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d0a0      	beq.n	80081ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b096      	sub	sp, #88	@ 0x58
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	88fa      	ldrh	r2, [r7, #6]
 80082cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2222      	movs	r2, #34	@ 0x22
 80082dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d028      	beq.n	800833a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ec:	4a3e      	ldr	r2, [pc, #248]	@ (80083e8 <UART_Start_Receive_DMA+0x134>)
 80082ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f4:	4a3d      	ldr	r2, [pc, #244]	@ (80083ec <UART_Start_Receive_DMA+0x138>)
 80082f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082fc:	4a3c      	ldr	r2, [pc, #240]	@ (80083f0 <UART_Start_Receive_DMA+0x13c>)
 80082fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008304:	2200      	movs	r2, #0
 8008306:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3324      	adds	r3, #36	@ 0x24
 8008312:	4619      	mov	r1, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008318:	461a      	mov	r2, r3
 800831a:	88fb      	ldrh	r3, [r7, #6]
 800831c:	f7fb ff4e 	bl	80041bc <HAL_DMA_Start_IT>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2210      	movs	r2, #16
 800832a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2220      	movs	r2, #32
 8008332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e051      	b.n	80083de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d018      	beq.n	8008374 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008356:	657b      	str	r3, [r7, #84]	@ 0x54
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008362:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800836e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e6      	bne.n	8008342 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3308      	adds	r3, #8
 800837a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	653b      	str	r3, [r7, #80]	@ 0x50
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3308      	adds	r3, #8
 8008392:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008394:	637a      	str	r2, [r7, #52]	@ 0x34
 8008396:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800839a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e5      	bne.n	8008374 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	613b      	str	r3, [r7, #16]
   return(result);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083c8:	623a      	str	r2, [r7, #32]
 80083ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	69f9      	ldr	r1, [r7, #28]
 80083ce:	6a3a      	ldr	r2, [r7, #32]
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e5      	bne.n	80083a8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3758      	adds	r7, #88	@ 0x58
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	080085bf 	.word	0x080085bf
 80083ec:	080086eb 	.word	0x080086eb
 80083f0:	08008729 	.word	0x08008729

080083f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b089      	sub	sp, #36	@ 0x24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	60bb      	str	r3, [r7, #8]
   return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	61bb      	str	r3, [r7, #24]
 800841c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6979      	ldr	r1, [r7, #20]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	613b      	str	r3, [r7, #16]
   return(result);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e6      	bne.n	80083fc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008434:	bf00      	nop
 8008436:	3724      	adds	r7, #36	@ 0x24
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b095      	sub	sp, #84	@ 0x54
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800845c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008466:	643b      	str	r3, [r7, #64]	@ 0x40
 8008468:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800846c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e6      	bne.n	8008448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	61fb      	str	r3, [r7, #28]
   return(result);
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	f023 0301 	bic.w	r3, r3, #1
 8008490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800849a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800849c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e5      	bne.n	800847a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d118      	bne.n	80084e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f023 0310 	bic.w	r3, r3, #16
 80084ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6979      	ldr	r1, [r7, #20]
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	613b      	str	r3, [r7, #16]
   return(result);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80084fc:	bf00      	nop
 80084fe:	3754      	adds	r7, #84	@ 0x54
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b090      	sub	sp, #64	@ 0x40
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d137      	bne.n	8008594 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008526:	2200      	movs	r2, #0
 8008528:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800852c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3308      	adds	r3, #8
 8008532:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	623b      	str	r3, [r7, #32]
   return(result);
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008542:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800854c:	633a      	str	r2, [r7, #48]	@ 0x30
 800854e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e5      	bne.n	800852c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	60fb      	str	r3, [r7, #12]
   return(result);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008574:	637b      	str	r3, [r7, #52]	@ 0x34
 8008576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	69b9      	ldr	r1, [r7, #24]
 8008584:	69fa      	ldr	r2, [r7, #28]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	617b      	str	r3, [r7, #20]
   return(result);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008592:	e002      	b.n	800859a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008594:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008596:	f7fb fadf 	bl	8003b58 <HAL_UART_TxCpltCallback>
}
 800859a:	bf00      	nop
 800859c:	3740      	adds	r7, #64	@ 0x40
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7ff fa39 	bl	8007a28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b09c      	sub	sp, #112	@ 0x70
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d171      	bne.n	80086be <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80085da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085dc:	2200      	movs	r2, #0
 80085de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008600:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008602:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008606:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800860e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e6      	bne.n	80085e2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	667b      	str	r3, [r7, #100]	@ 0x64
 800862c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008634:	647a      	str	r2, [r7, #68]	@ 0x44
 8008636:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800863a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e5      	bne.n	8008614 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3308      	adds	r3, #8
 800864e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	623b      	str	r3, [r7, #32]
   return(result);
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800865e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008668:	633a      	str	r2, [r7, #48]	@ 0x30
 800866a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800866e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008670:	e841 2300 	strex	r3, r2, [r1]
 8008674:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e5      	bne.n	8008648 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800867c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800867e:	2220      	movs	r2, #32
 8008680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008688:	2b01      	cmp	r3, #1
 800868a:	d118      	bne.n	80086be <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800868c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	60fb      	str	r3, [r7, #12]
   return(result);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f023 0310 	bic.w	r3, r3, #16
 80086a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086aa:	61fb      	str	r3, [r7, #28]
 80086ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	69b9      	ldr	r1, [r7, #24]
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	617b      	str	r3, [r7, #20]
   return(result);
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e6      	bne.n	800868c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086c0:	2200      	movs	r2, #0
 80086c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d107      	bne.n	80086dc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086d2:	4619      	mov	r1, r3
 80086d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086d6:	f7ff f9cf 	bl	8007a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086da:	e002      	b.n	80086e2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80086dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086de:	f7ff f9ad 	bl	8007a3c <HAL_UART_RxCpltCallback>
}
 80086e2:	bf00      	nop
 80086e4:	3770      	adds	r7, #112	@ 0x70
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008702:	2b01      	cmp	r3, #1
 8008704:	d109      	bne.n	800871a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	b29b      	uxth	r3, r3
 8008710:	4619      	mov	r1, r3
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7ff f9b0 	bl	8007a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008718:	e002      	b.n	8008720 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7ff f998 	bl	8007a50 <HAL_UART_RxHalfCpltCallback>
}
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008734:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800873a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008742:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874e:	2b80      	cmp	r3, #128	@ 0x80
 8008750:	d109      	bne.n	8008766 <UART_DMAError+0x3e>
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b21      	cmp	r3, #33	@ 0x21
 8008756:	d106      	bne.n	8008766 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2200      	movs	r2, #0
 800875c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008760:	6978      	ldr	r0, [r7, #20]
 8008762:	f7ff fe47 	bl	80083f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008770:	2b40      	cmp	r3, #64	@ 0x40
 8008772:	d109      	bne.n	8008788 <UART_DMAError+0x60>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b22      	cmp	r3, #34	@ 0x22
 8008778:	d106      	bne.n	8008788 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2200      	movs	r2, #0
 800877e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008782:	6978      	ldr	r0, [r7, #20]
 8008784:	f7ff fe5c 	bl	8008440 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800878e:	f043 0210 	orr.w	r2, r3, #16
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008798:	6978      	ldr	r0, [r7, #20]
 800879a:	f7ff f963 	bl	8007a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800879e:	bf00      	nop
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff f94d 	bl	8007a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b088      	sub	sp, #32
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087ee:	61fb      	str	r3, [r7, #28]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6979      	ldr	r1, [r7, #20]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	613b      	str	r3, [r7, #16]
   return(result);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e6      	bne.n	80087da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2220      	movs	r2, #32
 8008810:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fb f99d 	bl	8003b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800881e:	bf00      	nop
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
	...

0800883c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008840:	4904      	ldr	r1, [pc, #16]	@ (8008854 <MX_FATFS_Init+0x18>)
 8008842:	4805      	ldr	r0, [pc, #20]	@ (8008858 <MX_FATFS_Init+0x1c>)
 8008844:	f006 f80c 	bl	800e860 <FATFS_LinkDriver>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	4b03      	ldr	r3, [pc, #12]	@ (800885c <MX_FATFS_Init+0x20>)
 800884e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008850:	bf00      	nop
 8008852:	bd80      	pop	{r7, pc}
 8008854:	20001210 	.word	0x20001210
 8008858:	20000040 	.word	0x20000040
 800885c:	2000120c 	.word	0x2000120c

08008860 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008864:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008866:	4618      	mov	r0, r3
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USER_initialize>:
};

DSTATUS USER_initialize (
	BYTE pdrv
)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
	res = SD_Init();
 800887a:	f7f8 feb3 	bl	80015e4 <SD_Init>
 800887e:	4603      	mov	r3, r0
 8008880:	73fb      	strb	r3, [r7, #15]
	if(res)
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d008      	beq.n	800889a <USER_initialize+0x2a>
	{
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8008888:	4b09      	ldr	r3, [pc, #36]	@ (80088b0 <USER_initialize+0x40>)
 800888a:	2238      	movs	r2, #56	@ 0x38
 800888c:	61da      	str	r2, [r3, #28]
		SPI_TransmitReceive(0xFF);
 800888e:	20ff      	movs	r0, #255	@ 0xff
 8008890:	f7f8 fe28 	bl	80014e4 <SPI_TransmitReceive>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008894:	4b06      	ldr	r3, [pc, #24]	@ (80088b0 <USER_initialize+0x40>)
 8008896:	2200      	movs	r2, #0
 8008898:	61da      	str	r2, [r3, #28]
	}
	if(res)
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <USER_initialize+0x34>
		return  STA_NOINIT;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e000      	b.n	80088a6 <USER_initialize+0x36>
	else
		return RES_OK;
 80088a4:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20000a5c 	.word	0x20000a5c

080088b4 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv
)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	71fb      	strb	r3, [r7, #7]
	switch (pdrv)
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <USER_status+0x16>
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d002      	beq.n	80088ce <USER_status+0x1a>
 80088c8:	e003      	b.n	80088d2 <USER_status+0x1e>
	{
		case 0 :
			return RES_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	e002      	b.n	80088d4 <USER_status+0x20>
		case 1 :
			return RES_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e000      	b.n	80088d4 <USER_status+0x20>
		default:
			return STA_NOINIT;
 80088d2:	2301      	movs	r3, #1
	}
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USER_read>:
	BYTE pdrv,
	BYTE *buff,
	DWORD sector,
	UINT count
)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
	uint8_t res;
  if(count == 0)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <USER_read+0x1a>
	  return RES_PARERR;
 80088f6:	2304      	movs	r3, #4
 80088f8:	e013      	b.n	8008922 <USER_read+0x42>
  switch (pdrv)
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10f      	bne.n	8008920 <USER_read+0x40>
  	{
	case 0:
	{
		res=SD_ReadDisk(buff,sector,count);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	461a      	mov	r2, r3
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	68b8      	ldr	r0, [r7, #8]
 800890a:	f7f8 ffeb 	bl	80018e4 <SD_ReadDisk>
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]
		if(res == 0)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <USER_read+0x3c>
			return RES_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	e002      	b.n	8008922 <USER_read+0x42>
		else
			return RES_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e000      	b.n	8008922 <USER_read+0x42>
	}
	default:
		return RES_ERROR;
 8008920:	2301      	movs	r3, #1
  	}
}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USER_write>:
	BYTE pdrv,
	const BYTE *buff,
	DWORD sector,
	UINT count
)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b086      	sub	sp, #24
 800892e:	af00      	add	r7, sp, #0
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]
	uint8_t  res;
	if( !count )
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <USER_write+0x1a>
	{
		return RES_PARERR;
 8008940:	2304      	movs	r3, #4
 8008942:	e013      	b.n	800896c <USER_write+0x42>
	}
	switch (pdrv)
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10f      	bne.n	800896a <USER_write+0x40>
	{
		case 0:
			res=SD_WriteDisk((uint8_t *)buff,sector,count);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	461a      	mov	r2, r3
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	68b8      	ldr	r0, [r7, #8]
 8008954:	f7f9 f81e 	bl	8001994 <SD_WriteDisk>
 8008958:	4603      	mov	r3, r0
 800895a:	75fb      	strb	r3, [r7, #23]
				if(res == 0)
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <USER_write+0x3c>
					return RES_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	e002      	b.n	800896c <USER_write+0x42>
				else
					return RES_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <USER_write+0x42>
		default:return RES_ERROR;
 800896a:	2301      	movs	r3, #1
	}
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,
	BYTE cmd,
	void *buff
)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	603a      	str	r2, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
 8008980:	460b      	mov	r3, r1
 8008982:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	 switch(cmd)
 8008984:	79bb      	ldrb	r3, [r7, #6]
 8008986:	2b03      	cmp	r3, #3
 8008988:	d837      	bhi.n	80089fa <USER_ioctl+0x86>
 800898a:	a201      	add	r2, pc, #4	@ (adr r2, 8008990 <USER_ioctl+0x1c>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089a1 	.word	0x080089a1
 8008994:	080089eb 	.word	0x080089eb
 8008998:	080089d1 	.word	0x080089d1
 800899c:	080089df 	.word	0x080089df
		{
			case CTRL_SYNC:
				SD_CS_LOW();
 80089a0:	2200      	movs	r2, #0
 80089a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80089a6:	4819      	ldr	r0, [pc, #100]	@ (8008a0c <USER_ioctl+0x98>)
 80089a8:	f7fb ff64 	bl	8004874 <HAL_GPIO_WritePin>
				do{
					HAL_Delay(20);
 80089ac:	2014      	movs	r0, #20
 80089ae:	f7fb fa0b 	bl	8003dc8 <HAL_Delay>
				}while(SPI_TransmitReceive(0xFF)!=0xFF);
 80089b2:	20ff      	movs	r0, #255	@ 0xff
 80089b4:	f7f8 fd96 	bl	80014e4 <SPI_TransmitReceive>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2bff      	cmp	r3, #255	@ 0xff
 80089bc:	d1f6      	bne.n	80089ac <USER_ioctl+0x38>
				res=RES_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
				SD_CS_HIGH();
 80089c2:	2201      	movs	r2, #1
 80089c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80089c8:	4810      	ldr	r0, [pc, #64]	@ (8008a0c <USER_ioctl+0x98>)
 80089ca:	f7fb ff53 	bl	8004874 <HAL_GPIO_WritePin>
				break;
 80089ce:	e017      	b.n	8008a00 <USER_ioctl+0x8c>
			case GET_SECTOR_SIZE:
				*(WORD*)buff = 512;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089d6:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
				break;
 80089dc:	e010      	b.n	8008a00 <USER_ioctl+0x8c>
			case GET_BLOCK_SIZE:
				*(WORD*)buff = 8;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2208      	movs	r2, #8
 80089e2:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
				break;
 80089e8:	e00a      	b.n	8008a00 <USER_ioctl+0x8c>
			case GET_SECTOR_COUNT:
				*(DWORD*)buff = SD_GetSectorCount();
 80089ea:	f7f9 f867 	bl	8001abc <SD_GetSectorCount>
 80089ee:	4602      	mov	r2, r0
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
				break;
 80089f8:	e002      	b.n	8008a00 <USER_ioctl+0x8c>
			default:
				res = RES_PARERR;
 80089fa:	2304      	movs	r3, #4
 80089fc:	73fb      	strb	r3, [r7, #15]
				break;
 80089fe:	bf00      	nop
		}
		return res;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	48000400 	.word	0x48000400

08008a10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	4a08      	ldr	r2, [pc, #32]	@ (8008a40 <disk_status+0x30>)
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	79fa      	ldrb	r2, [r7, #7]
 8008a28:	4905      	ldr	r1, [pc, #20]	@ (8008a40 <disk_status+0x30>)
 8008a2a:	440a      	add	r2, r1
 8008a2c:	7a12      	ldrb	r2, [r2, #8]
 8008a2e:	4610      	mov	r0, r2
 8008a30:	4798      	blx	r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	2000123c 	.word	0x2000123c

08008a44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	4a0d      	ldr	r2, [pc, #52]	@ (8008a8c <disk_initialize+0x48>)
 8008a56:	5cd3      	ldrb	r3, [r2, r3]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d111      	bne.n	8008a80 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a5c:	79fb      	ldrb	r3, [r7, #7]
 8008a5e:	4a0b      	ldr	r2, [pc, #44]	@ (8008a8c <disk_initialize+0x48>)
 8008a60:	2101      	movs	r1, #1
 8008a62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	4a09      	ldr	r2, [pc, #36]	@ (8008a8c <disk_initialize+0x48>)
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	79fa      	ldrb	r2, [r7, #7]
 8008a72:	4906      	ldr	r1, [pc, #24]	@ (8008a8c <disk_initialize+0x48>)
 8008a74:	440a      	add	r2, r1
 8008a76:	7a12      	ldrb	r2, [r2, #8]
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	2000123c 	.word	0x2000123c

08008a90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a90:	b590      	push	{r4, r7, lr}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8008acc <disk_read+0x3c>)
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	689c      	ldr	r4, [r3, #8]
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	4a07      	ldr	r2, [pc, #28]	@ (8008acc <disk_read+0x3c>)
 8008ab0:	4413      	add	r3, r2
 8008ab2:	7a18      	ldrb	r0, [r3, #8]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	47a0      	blx	r4
 8008abc:	4603      	mov	r3, r0
 8008abe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd90      	pop	{r4, r7, pc}
 8008aca:	bf00      	nop
 8008acc:	2000123c 	.word	0x2000123c

08008ad0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8008b0c <disk_write+0x3c>)
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	68dc      	ldr	r4, [r3, #12]
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	4a07      	ldr	r2, [pc, #28]	@ (8008b0c <disk_write+0x3c>)
 8008af0:	4413      	add	r3, r2
 8008af2:	7a18      	ldrb	r0, [r3, #8]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	47a0      	blx	r4
 8008afc:	4603      	mov	r3, r0
 8008afe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd90      	pop	{r4, r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	2000123c 	.word	0x2000123c

08008b10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	603a      	str	r2, [r7, #0]
 8008b1a:	71fb      	strb	r3, [r7, #7]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	4a09      	ldr	r2, [pc, #36]	@ (8008b48 <disk_ioctl+0x38>)
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	79fa      	ldrb	r2, [r7, #7]
 8008b2e:	4906      	ldr	r1, [pc, #24]	@ (8008b48 <disk_ioctl+0x38>)
 8008b30:	440a      	add	r2, r1
 8008b32:	7a10      	ldrb	r0, [r2, #8]
 8008b34:	79b9      	ldrb	r1, [r7, #6]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4798      	blx	r3
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	2000123c 	.word	0x2000123c

08008b4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3301      	adds	r3, #1
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b60:	021b      	lsls	r3, r3, #8
 8008b62:	b21a      	sxth	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	b21b      	sxth	r3, r3
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	b21b      	sxth	r3, r3
 8008b6e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b70:	89fb      	ldrh	r3, [r7, #14]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3303      	adds	r3, #3
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	3202      	adds	r2, #2
 8008b96:	7812      	ldrb	r2, [r2, #0]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	021b      	lsls	r3, r3, #8
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	3201      	adds	r2, #1
 8008ba4:	7812      	ldrb	r2, [r2, #0]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	021b      	lsls	r3, r3, #8
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	7812      	ldrb	r2, [r2, #0]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
	return rv;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8008bc4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008bc8:	b09d      	sub	sp, #116	@ 0x74
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8008bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bd0:	3307      	adds	r3, #7
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	469a      	mov	sl, r3
 8008bda:	4693      	mov	fp, r2
 8008bdc:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8008be0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008be4:	f04f 0000 	mov.w	r0, #0
 8008be8:	f04f 0100 	mov.w	r1, #0
 8008bec:	0219      	lsls	r1, r3, #8
 8008bee:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008bf2:	0210      	lsls	r0, r2, #8
 8008bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bf6:	3306      	adds	r3, #6
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	461c      	mov	r4, r3
 8008c00:	4615      	mov	r5, r2
 8008c02:	ea40 0804 	orr.w	r8, r0, r4
 8008c06:	ea41 0905 	orr.w	r9, r1, r5
 8008c0a:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8008c0e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008c12:	f04f 0000 	mov.w	r0, #0
 8008c16:	f04f 0100 	mov.w	r1, #0
 8008c1a:	0219      	lsls	r1, r3, #8
 8008c1c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008c20:	0210      	lsls	r0, r2, #8
 8008c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c24:	3305      	adds	r3, #5
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c2e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008c30:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8008c34:	4623      	mov	r3, r4
 8008c36:	4303      	orrs	r3, r0
 8008c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c3a:	462b      	mov	r3, r5
 8008c3c:	430b      	orrs	r3, r1
 8008c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c40:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008c44:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8008c48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008c4c:	f04f 0000 	mov.w	r0, #0
 8008c50:	f04f 0100 	mov.w	r1, #0
 8008c54:	0219      	lsls	r1, r3, #8
 8008c56:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008c5a:	0210      	lsls	r0, r2, #8
 8008c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c5e:	3304      	adds	r3, #4
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2200      	movs	r2, #0
 8008c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c68:	657a      	str	r2, [r7, #84]	@ 0x54
 8008c6a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8008c6e:	4623      	mov	r3, r4
 8008c70:	4303      	orrs	r3, r0
 8008c72:	623b      	str	r3, [r7, #32]
 8008c74:	462b      	mov	r3, r5
 8008c76:	430b      	orrs	r3, r1
 8008c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c7a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008c7e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8008c82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008c86:	f04f 0000 	mov.w	r0, #0
 8008c8a:	f04f 0100 	mov.w	r1, #0
 8008c8e:	0219      	lsls	r1, r3, #8
 8008c90:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008c94:	0210      	lsls	r0, r2, #8
 8008c96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c98:	3303      	adds	r3, #3
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ca2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008ca4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8008ca8:	4623      	mov	r3, r4
 8008caa:	4303      	orrs	r3, r0
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	462b      	mov	r3, r5
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	61fb      	str	r3, [r7, #28]
 8008cb4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008cb8:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8008cbc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008cc0:	f04f 0000 	mov.w	r0, #0
 8008cc4:	f04f 0100 	mov.w	r1, #0
 8008cc8:	0219      	lsls	r1, r3, #8
 8008cca:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008cce:	0210      	lsls	r0, r2, #8
 8008cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2200      	movs	r2, #0
 8008cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cdc:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cde:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	4303      	orrs	r3, r0
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	462b      	mov	r3, r5
 8008cea:	430b      	orrs	r3, r1
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008cf2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8008cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008cfa:	f04f 0200 	mov.w	r2, #0
 8008cfe:	f04f 0300 	mov.w	r3, #0
 8008d02:	020b      	lsls	r3, r1, #8
 8008d04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d08:	0202      	lsls	r2, r0, #8
 8008d0a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d0c:	3101      	adds	r1, #1
 8008d0e:	7809      	ldrb	r1, [r1, #0]
 8008d10:	b2c9      	uxtb	r1, r1
 8008d12:	2000      	movs	r0, #0
 8008d14:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008d16:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008d18:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4311      	orrs	r1, r2
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4629      	mov	r1, r5
 8008d24:	4319      	orrs	r1, r3
 8008d26:	60f9      	str	r1, [r7, #12]
 8008d28:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008d2c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8008d30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	020b      	lsls	r3, r1, #8
 8008d3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d42:	0202      	lsls	r2, r0, #8
 8008d44:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d46:	7809      	ldrb	r1, [r1, #0]
 8008d48:	b2c9      	uxtb	r1, r1
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008d4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008d54:	4621      	mov	r1, r4
 8008d56:	4311      	orrs	r1, r2
 8008d58:	6039      	str	r1, [r7, #0]
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4319      	orrs	r1, r3
 8008d5e:	6079      	str	r1, [r7, #4]
 8008d60:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008d64:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8008d68:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	3774      	adds	r7, #116	@ 0x74
 8008d72:	46bd      	mov	sp, r7
 8008d74:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d78:	4770      	bx	lr

08008d7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	887a      	ldrh	r2, [r7, #2]
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	887b      	ldrh	r3, [r7, #2]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	887a      	ldrh	r2, [r7, #2]
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	0a1b      	lsrs	r3, r3, #8
 8008dca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	607a      	str	r2, [r7, #4]
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	b2d2      	uxtb	r2, r2
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	0a1b      	lsrs	r3, r3, #8
 8008ddc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	0a1b      	lsrs	r3, r3, #8
 8008dee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	607a      	str	r2, [r7, #4]
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	b2d2      	uxtb	r2, r2
 8008dfa:	701a      	strb	r2, [r3, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	60fa      	str	r2, [r7, #12]
 8008e1a:	783a      	ldrb	r2, [r7, #0]
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e22:	f04f 0200 	mov.w	r2, #0
 8008e26:	f04f 0300 	mov.w	r3, #0
 8008e2a:	0a02      	lsrs	r2, r0, #8
 8008e2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e30:	0a0b      	lsrs	r3, r1, #8
 8008e32:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	60fa      	str	r2, [r7, #12]
 8008e3c:	783a      	ldrb	r2, [r7, #0]
 8008e3e:	701a      	strb	r2, [r3, #0]
 8008e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	0a02      	lsrs	r2, r0, #8
 8008e4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e52:	0a0b      	lsrs	r3, r1, #8
 8008e54:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	60fa      	str	r2, [r7, #12]
 8008e5e:	783a      	ldrb	r2, [r7, #0]
 8008e60:	701a      	strb	r2, [r3, #0]
 8008e62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e66:	f04f 0200 	mov.w	r2, #0
 8008e6a:	f04f 0300 	mov.w	r3, #0
 8008e6e:	0a02      	lsrs	r2, r0, #8
 8008e70:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e74:	0a0b      	lsrs	r3, r1, #8
 8008e76:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	60fa      	str	r2, [r7, #12]
 8008e80:	783a      	ldrb	r2, [r7, #0]
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e88:	f04f 0200 	mov.w	r2, #0
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	0a02      	lsrs	r2, r0, #8
 8008e92:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e96:	0a0b      	lsrs	r3, r1, #8
 8008e98:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	60fa      	str	r2, [r7, #12]
 8008ea2:	783a      	ldrb	r2, [r7, #0]
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	0a02      	lsrs	r2, r0, #8
 8008eb4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008eb8:	0a0b      	lsrs	r3, r1, #8
 8008eba:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	60fa      	str	r2, [r7, #12]
 8008ec4:	783a      	ldrb	r2, [r7, #0]
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ecc:	f04f 0200 	mov.w	r2, #0
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	0a02      	lsrs	r2, r0, #8
 8008ed6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008eda:	0a0b      	lsrs	r3, r1, #8
 8008edc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	60fa      	str	r2, [r7, #12]
 8008ee6:	783a      	ldrb	r2, [r7, #0]
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eee:	f04f 0200 	mov.w	r2, #0
 8008ef2:	f04f 0300 	mov.w	r3, #0
 8008ef6:	0a02      	lsrs	r2, r0, #8
 8008ef8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008efc:	0a0b      	lsrs	r3, r1, #8
 8008efe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	60fa      	str	r2, [r7, #12]
 8008f08:	783a      	ldrb	r2, [r7, #0]
 8008f0a:	701a      	strb	r2, [r3, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00d      	beq.n	8008f4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	1c53      	adds	r3, r2, #1
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	1c59      	adds	r1, r3, #1
 8008f3c:	6179      	str	r1, [r7, #20]
 8008f3e:	7812      	ldrb	r2, [r2, #0]
 8008f40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	607b      	str	r3, [r7, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f1      	bne.n	8008f32 <mem_cpy+0x1a>
	}
}
 8008f4e:	bf00      	nop
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f5a:	b480      	push	{r7}
 8008f5c:	b087      	sub	sp, #28
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	617a      	str	r2, [r7, #20]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	607b      	str	r3, [r7, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f3      	bne.n	8008f6a <mem_set+0x10>
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	371c      	adds	r7, #28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008f90:	b480      	push	{r7}
 8008f92:	b089      	sub	sp, #36	@ 0x24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	61fb      	str	r3, [r7, #28]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	61fa      	str	r2, [r7, #28]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	61ba      	str	r2, [r7, #24]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	1acb      	subs	r3, r1, r3
 8008fbc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	607b      	str	r3, [r7, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <mem_cmp+0x40>
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0eb      	beq.n	8008fa8 <mem_cmp+0x18>

	return r;
 8008fd0:	697b      	ldr	r3, [r7, #20]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3724      	adds	r7, #36	@ 0x24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008fe8:	e002      	b.n	8008ff0 <chk_chr+0x12>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3301      	adds	r3, #1
 8008fee:	607b      	str	r3, [r7, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <chk_chr+0x26>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	4293      	cmp	r3, r2
 8009002:	d1f2      	bne.n	8008fea <chk_chr+0xc>
	return *str;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	781b      	ldrb	r3, [r3, #0]
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800901e:	2300      	movs	r3, #0
 8009020:	60bb      	str	r3, [r7, #8]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	e029      	b.n	800907c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009028:	4a27      	ldr	r2, [pc, #156]	@ (80090c8 <chk_lock+0xb4>)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	4413      	add	r3, r2
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01d      	beq.n	8009072 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009036:	4a24      	ldr	r2, [pc, #144]	@ (80090c8 <chk_lock+0xb4>)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	4413      	add	r3, r2
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d116      	bne.n	8009076 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009048:	4a1f      	ldr	r2, [pc, #124]	@ (80090c8 <chk_lock+0xb4>)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	4413      	add	r3, r2
 8009050:	3304      	adds	r3, #4
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009058:	429a      	cmp	r2, r3
 800905a:	d10c      	bne.n	8009076 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800905c:	4a1a      	ldr	r2, [pc, #104]	@ (80090c8 <chk_lock+0xb4>)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	4413      	add	r3, r2
 8009064:	3308      	adds	r3, #8
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800906c:	429a      	cmp	r2, r3
 800906e:	d102      	bne.n	8009076 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009070:	e007      	b.n	8009082 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009072:	2301      	movs	r3, #1
 8009074:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3301      	adds	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d9d2      	bls.n	8009028 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d109      	bne.n	800909c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d102      	bne.n	8009094 <chk_lock+0x80>
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d101      	bne.n	8009098 <chk_lock+0x84>
 8009094:	2300      	movs	r3, #0
 8009096:	e010      	b.n	80090ba <chk_lock+0xa6>
 8009098:	2312      	movs	r3, #18
 800909a:	e00e      	b.n	80090ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d108      	bne.n	80090b4 <chk_lock+0xa0>
 80090a2:	4a09      	ldr	r2, [pc, #36]	@ (80090c8 <chk_lock+0xb4>)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	4413      	add	r3, r2
 80090aa:	330c      	adds	r3, #12
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b2:	d101      	bne.n	80090b8 <chk_lock+0xa4>
 80090b4:	2310      	movs	r3, #16
 80090b6:	e000      	b.n	80090ba <chk_lock+0xa6>
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	2000121c 	.word	0x2000121c

080090cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090d2:	2300      	movs	r3, #0
 80090d4:	607b      	str	r3, [r7, #4]
 80090d6:	e002      	b.n	80090de <enq_lock+0x12>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3301      	adds	r3, #1
 80090dc:	607b      	str	r3, [r7, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d806      	bhi.n	80090f2 <enq_lock+0x26>
 80090e4:	4a09      	ldr	r2, [pc, #36]	@ (800910c <enq_lock+0x40>)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	4413      	add	r3, r2
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f2      	bne.n	80090d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	bf14      	ite	ne
 80090f8:	2301      	movne	r3, #1
 80090fa:	2300      	moveq	r3, #0
 80090fc:	b2db      	uxtb	r3, r3
}
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	2000121c 	.word	0x2000121c

08009110 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	e01f      	b.n	8009160 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009120:	4a41      	ldr	r2, [pc, #260]	@ (8009228 <inc_lock+0x118>)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	011b      	lsls	r3, r3, #4
 8009126:	4413      	add	r3, r2
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d113      	bne.n	800915a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009132:	4a3d      	ldr	r2, [pc, #244]	@ (8009228 <inc_lock+0x118>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	4413      	add	r3, r2
 800913a:	3304      	adds	r3, #4
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009142:	429a      	cmp	r2, r3
 8009144:	d109      	bne.n	800915a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009146:	4a38      	ldr	r2, [pc, #224]	@ (8009228 <inc_lock+0x118>)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	011b      	lsls	r3, r3, #4
 800914c:	4413      	add	r3, r2
 800914e:	3308      	adds	r3, #8
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8009156:	429a      	cmp	r2, r3
 8009158:	d006      	beq.n	8009168 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3301      	adds	r3, #1
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d9dc      	bls.n	8009120 <inc_lock+0x10>
 8009166:	e000      	b.n	800916a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009168:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d132      	bne.n	80091d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009170:	2300      	movs	r3, #0
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	e002      	b.n	800917c <inc_lock+0x6c>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3301      	adds	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d806      	bhi.n	8009190 <inc_lock+0x80>
 8009182:	4a29      	ldr	r2, [pc, #164]	@ (8009228 <inc_lock+0x118>)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	4413      	add	r3, r2
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1f2      	bne.n	8009176 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b02      	cmp	r3, #2
 8009194:	d101      	bne.n	800919a <inc_lock+0x8a>
 8009196:	2300      	movs	r3, #0
 8009198:	e040      	b.n	800921c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4922      	ldr	r1, [pc, #136]	@ (8009228 <inc_lock+0x118>)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	011b      	lsls	r3, r3, #4
 80091a4:	440b      	add	r3, r1
 80091a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	491e      	ldr	r1, [pc, #120]	@ (8009228 <inc_lock+0x118>)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	011b      	lsls	r3, r3, #4
 80091b2:	440b      	add	r3, r1
 80091b4:	3304      	adds	r3, #4
 80091b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091bc:	491a      	ldr	r1, [pc, #104]	@ (8009228 <inc_lock+0x118>)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	011b      	lsls	r3, r3, #4
 80091c2:	440b      	add	r3, r1
 80091c4:	3308      	adds	r3, #8
 80091c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80091c8:	4a17      	ldr	r2, [pc, #92]	@ (8009228 <inc_lock+0x118>)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	011b      	lsls	r3, r3, #4
 80091ce:	4413      	add	r3, r2
 80091d0:	330c      	adds	r3, #12
 80091d2:	2200      	movs	r2, #0
 80091d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d009      	beq.n	80091f0 <inc_lock+0xe0>
 80091dc:	4a12      	ldr	r2, [pc, #72]	@ (8009228 <inc_lock+0x118>)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	4413      	add	r3, r2
 80091e4:	330c      	adds	r3, #12
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <inc_lock+0xe0>
 80091ec:	2300      	movs	r3, #0
 80091ee:	e015      	b.n	800921c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d108      	bne.n	8009208 <inc_lock+0xf8>
 80091f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009228 <inc_lock+0x118>)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	4413      	add	r3, r2
 80091fe:	330c      	adds	r3, #12
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	b29a      	uxth	r2, r3
 8009206:	e001      	b.n	800920c <inc_lock+0xfc>
 8009208:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800920c:	4906      	ldr	r1, [pc, #24]	@ (8009228 <inc_lock+0x118>)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	440b      	add	r3, r1
 8009214:	330c      	adds	r3, #12
 8009216:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3301      	adds	r3, #1
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	2000121c 	.word	0x2000121c

0800922c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3b01      	subs	r3, #1
 8009238:	607b      	str	r3, [r7, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d825      	bhi.n	800928c <dec_lock+0x60>
		n = Files[i].ctr;
 8009240:	4a17      	ldr	r2, [pc, #92]	@ (80092a0 <dec_lock+0x74>)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	011b      	lsls	r3, r3, #4
 8009246:	4413      	add	r3, r2
 8009248:	330c      	adds	r3, #12
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800924e:	89fb      	ldrh	r3, [r7, #14]
 8009250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009254:	d101      	bne.n	800925a <dec_lock+0x2e>
 8009256:	2300      	movs	r3, #0
 8009258:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800925a:	89fb      	ldrh	r3, [r7, #14]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <dec_lock+0x3a>
 8009260:	89fb      	ldrh	r3, [r7, #14]
 8009262:	3b01      	subs	r3, #1
 8009264:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009266:	4a0e      	ldr	r2, [pc, #56]	@ (80092a0 <dec_lock+0x74>)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	4413      	add	r3, r2
 800926e:	330c      	adds	r3, #12
 8009270:	89fa      	ldrh	r2, [r7, #14]
 8009272:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009274:	89fb      	ldrh	r3, [r7, #14]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <dec_lock+0x5a>
 800927a:	4a09      	ldr	r2, [pc, #36]	@ (80092a0 <dec_lock+0x74>)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	4413      	add	r3, r2
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	737b      	strb	r3, [r7, #13]
 800928a:	e001      	b.n	8009290 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800928c:	2302      	movs	r3, #2
 800928e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009290:	7b7b      	ldrb	r3, [r7, #13]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	2000121c 	.word	0x2000121c

080092a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	e010      	b.n	80092d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80092b2:	4a0d      	ldr	r2, [pc, #52]	@ (80092e8 <clear_lock+0x44>)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	4413      	add	r3, r2
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d105      	bne.n	80092ce <clear_lock+0x2a>
 80092c2:	4a09      	ldr	r2, [pc, #36]	@ (80092e8 <clear_lock+0x44>)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	4413      	add	r3, r2
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3301      	adds	r3, #1
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d9eb      	bls.n	80092b2 <clear_lock+0xe>
	}
}
 80092da:	bf00      	nop
 80092dc:	bf00      	nop
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	2000121c 	.word	0x2000121c

080092ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	78db      	ldrb	r3, [r3, #3]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d034      	beq.n	800936a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009304:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	7858      	ldrb	r0, [r3, #1]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009310:	2301      	movs	r3, #1
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	f7ff fbdc 	bl	8008ad0 <disk_write>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <sync_window+0x38>
			res = FR_DISK_ERR;
 800931e:	2301      	movs	r3, #1
 8009320:	73fb      	strb	r3, [r7, #15]
 8009322:	e022      	b.n	800936a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	1ad2      	subs	r2, r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	429a      	cmp	r2, r3
 8009338:	d217      	bcs.n	800936a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	789b      	ldrb	r3, [r3, #2]
 800933e:	613b      	str	r3, [r7, #16]
 8009340:	e010      	b.n	8009364 <sync_window+0x78>
					wsect += fs->fsize;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	4413      	add	r3, r2
 800934a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	7858      	ldrb	r0, [r3, #1]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009356:	2301      	movs	r3, #1
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	f7ff fbb9 	bl	8008ad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	3b01      	subs	r3, #1
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d8eb      	bhi.n	8009342 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	429a      	cmp	r2, r3
 800938a:	d01b      	beq.n	80093c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff ffad 	bl	80092ec <sync_window>
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d113      	bne.n	80093c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7858      	ldrb	r0, [r3, #1]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80093a6:	2301      	movs	r3, #1
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	f7ff fb71 	bl	8008a90 <disk_read>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80093b4:	f04f 33ff 	mov.w	r3, #4294967295
 80093b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff ff87 	bl	80092ec <sync_window>
 80093de:	4603      	mov	r3, r0
 80093e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d158      	bne.n	800949a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d148      	bne.n	8009482 <sync_fs+0xb2>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	791b      	ldrb	r3, [r3, #4]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d144      	bne.n	8009482 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3338      	adds	r3, #56	@ 0x38
 80093fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff fda9 	bl	8008f5a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3338      	adds	r3, #56	@ 0x38
 800940c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009410:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff fcb0 	bl	8008d7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3338      	adds	r3, #56	@ 0x38
 800941e:	4921      	ldr	r1, [pc, #132]	@ (80094a4 <sync_fs+0xd4>)
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff fcc5 	bl	8008db0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3338      	adds	r3, #56	@ 0x38
 800942a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800942e:	491e      	ldr	r1, [pc, #120]	@ (80094a8 <sync_fs+0xd8>)
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff fcbd 	bl	8008db0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3338      	adds	r3, #56	@ 0x38
 800943a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	4619      	mov	r1, r3
 8009444:	4610      	mov	r0, r2
 8009446:	f7ff fcb3 	bl	8008db0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3338      	adds	r3, #56	@ 0x38
 800944e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f7ff fca9 	bl	8008db0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	7858      	ldrb	r0, [r3, #1]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009476:	2301      	movs	r3, #1
 8009478:	f7ff fb2a 	bl	8008ad0 <disk_write>
			fs->fsi_flag = 0;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2200      	movs	r2, #0
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff fb40 	bl	8008b10 <disk_ioctl>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <sync_fs+0xca>
 8009496:	2301      	movs	r3, #1
 8009498:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800949a:	7bfb      	ldrb	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	41615252 	.word	0x41615252
 80094a8:	61417272 	.word	0x61417272

080094ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	3b02      	subs	r3, #2
 80094ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	3b02      	subs	r3, #2
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d301      	bcc.n	80094cc <clust2sect+0x20>
 80094c8:	2300      	movs	r3, #0
 80094ca:	e008      	b.n	80094de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	895b      	ldrh	r3, [r3, #10]
 80094d0:	461a      	mov	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	fb03 f202 	mul.w	r2, r3, r2
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094dc:	4413      	add	r3, r2
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	6809      	ldr	r1, [r1, #0]
 80094fa:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	2901      	cmp	r1, #1
 8009500:	d904      	bls.n	800950c <get_fat+0x20>
 8009502:	69b9      	ldr	r1, [r7, #24]
 8009504:	69c9      	ldr	r1, [r1, #28]
 8009506:	6838      	ldr	r0, [r7, #0]
 8009508:	4288      	cmp	r0, r1
 800950a:	d302      	bcc.n	8009512 <get_fat+0x26>
		val = 1;	/* Internal error */
 800950c:	2301      	movs	r3, #1
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	e100      	b.n	8009714 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009512:	f04f 31ff 	mov.w	r1, #4294967295
 8009516:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8009518:	69b9      	ldr	r1, [r7, #24]
 800951a:	7809      	ldrb	r1, [r1, #0]
 800951c:	3901      	subs	r1, #1
 800951e:	2903      	cmp	r1, #3
 8009520:	f200 80ec 	bhi.w	80096fc <get_fat+0x210>
 8009524:	a001      	add	r0, pc, #4	@ (adr r0, 800952c <get_fat+0x40>)
 8009526:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800952a:	bf00      	nop
 800952c:	0800953d 	.word	0x0800953d
 8009530:	080095c3 	.word	0x080095c3
 8009534:	080095f9 	.word	0x080095f9
 8009538:	08009631 	.word	0x08009631
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	085b      	lsrs	r3, r3, #1
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4413      	add	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	0a5b      	lsrs	r3, r3, #9
 8009552:	4413      	add	r3, r2
 8009554:	4619      	mov	r1, r3
 8009556:	69b8      	ldr	r0, [r7, #24]
 8009558:	f7ff ff0c 	bl	8009374 <move_window>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	f040 80cf 	bne.w	8009702 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	60fa      	str	r2, [r7, #12]
 800956a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	4413      	add	r3, r2
 8009572:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009576:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	0a5b      	lsrs	r3, r3, #9
 8009580:	4413      	add	r3, r2
 8009582:	4619      	mov	r1, r3
 8009584:	69b8      	ldr	r0, [r7, #24]
 8009586:	f7ff fef5 	bl	8009374 <move_window>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	f040 80ba 	bne.w	8009706 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	4413      	add	r3, r2
 800959c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80095a0:	021b      	lsls	r3, r3, #8
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <get_fat+0xcc>
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	091b      	lsrs	r3, r3, #4
 80095b6:	e002      	b.n	80095be <get_fat+0xd2>
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095be:	61fb      	str	r3, [r7, #28]
			break;
 80095c0:	e0a8      	b.n	8009714 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	0a1b      	lsrs	r3, r3, #8
 80095ca:	4413      	add	r3, r2
 80095cc:	4619      	mov	r1, r3
 80095ce:	69b8      	ldr	r0, [r7, #24]
 80095d0:	f7ff fed0 	bl	8009374 <move_window>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 8097 	bne.w	800970a <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80095ea:	4413      	add	r3, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff faad 	bl	8008b4c <ld_word>
 80095f2:	4603      	mov	r3, r0
 80095f4:	61fb      	str	r3, [r7, #28]
			break;
 80095f6:	e08d      	b.n	8009714 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	09db      	lsrs	r3, r3, #7
 8009600:	4413      	add	r3, r2
 8009602:	4619      	mov	r1, r3
 8009604:	69b8      	ldr	r0, [r7, #24]
 8009606:	f7ff feb5 	bl	8009374 <move_window>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d17e      	bne.n	800970e <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800961e:	4413      	add	r3, r2
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff faac 	bl	8008b7e <ld_dword>
 8009626:	4603      	mov	r3, r0
 8009628:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800962c:	61fb      	str	r3, [r7, #28]
			break;
 800962e:	e071      	b.n	8009714 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009636:	4301      	orrs	r1, r0
 8009638:	d060      	beq.n	80096fc <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	6889      	ldr	r1, [r1, #8]
 800963e:	6838      	ldr	r0, [r7, #0]
 8009640:	1a41      	subs	r1, r0, r1
 8009642:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800964a:	1e42      	subs	r2, r0, #1
 800964c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009650:	f04f 0000 	mov.w	r0, #0
 8009654:	f04f 0100 	mov.w	r1, #0
 8009658:	0a50      	lsrs	r0, r2, #9
 800965a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800965e:	0a59      	lsrs	r1, r3, #9
 8009660:	4602      	mov	r2, r0
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	895b      	ldrh	r3, [r3, #10]
 8009666:	fbb2 f3f3 	udiv	r3, r2, r3
 800966a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	79db      	ldrb	r3, [r3, #7]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d10e      	bne.n	8009692 <get_fat+0x1a6>
					if (cofs <= clen) {
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	429a      	cmp	r2, r3
 800967a:	d80a      	bhi.n	8009692 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	429a      	cmp	r2, r3
 8009682:	d002      	beq.n	800968a <get_fat+0x19e>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	e001      	b.n	800968e <get_fat+0x1a2>
 800968a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800968e:	61fb      	str	r3, [r7, #28]
						break;
 8009690:	e040      	b.n	8009714 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	79db      	ldrb	r3, [r3, #7]
 8009696:	2b03      	cmp	r3, #3
 8009698:	d108      	bne.n	80096ac <get_fat+0x1c0>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d203      	bcs.n	80096ac <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	61fb      	str	r3, [r7, #28]
					break;
 80096aa:	e033      	b.n	8009714 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	79db      	ldrb	r3, [r3, #7]
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d023      	beq.n	80096fc <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80096bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80096c0:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80096c2:	e027      	b.n	8009714 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	09db      	lsrs	r3, r3, #7
 80096cc:	4413      	add	r3, r2
 80096ce:	4619      	mov	r1, r3
 80096d0:	69b8      	ldr	r0, [r7, #24]
 80096d2:	f7ff fe4f 	bl	8009374 <move_window>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d11a      	bne.n	8009712 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80096ea:	4413      	add	r3, r2
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff fa46 	bl	8008b7e <ld_dword>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096f8:	61fb      	str	r3, [r7, #28]
					break;
 80096fa:	e00b      	b.n	8009714 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80096fc:	2301      	movs	r3, #1
 80096fe:	61fb      	str	r3, [r7, #28]
 8009700:	e008      	b.n	8009714 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009702:	bf00      	nop
 8009704:	e006      	b.n	8009714 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009706:	bf00      	nop
 8009708:	e004      	b.n	8009714 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800970a:	bf00      	nop
 800970c:	e002      	b.n	8009714 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800970e:	bf00      	nop
 8009710:	e000      	b.n	8009714 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009712:	bf00      	nop
		}
	}

	return val;
 8009714:	69fb      	ldr	r3, [r7, #28]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3720      	adds	r7, #32
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop

08009720 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b089      	sub	sp, #36	@ 0x24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800972c:	2302      	movs	r3, #2
 800972e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b01      	cmp	r3, #1
 8009734:	f240 80dd 	bls.w	80098f2 <put_fat+0x1d2>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	429a      	cmp	r2, r3
 8009740:	f080 80d7 	bcs.w	80098f2 <put_fat+0x1d2>
		switch (fs->fs_type) {
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b04      	cmp	r3, #4
 800974a:	f300 80d2 	bgt.w	80098f2 <put_fat+0x1d2>
 800974e:	2b03      	cmp	r3, #3
 8009750:	f280 8093 	bge.w	800987a <put_fat+0x15a>
 8009754:	2b01      	cmp	r3, #1
 8009756:	d002      	beq.n	800975e <put_fat+0x3e>
 8009758:	2b02      	cmp	r3, #2
 800975a:	d06e      	beq.n	800983a <put_fat+0x11a>
 800975c:	e0c9      	b.n	80098f2 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	61bb      	str	r3, [r7, #24]
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	085b      	lsrs	r3, r3, #1
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	4413      	add	r3, r2
 800976a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	0a5b      	lsrs	r3, r3, #9
 8009774:	4413      	add	r3, r2
 8009776:	4619      	mov	r1, r3
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff fdfb 	bl	8009374 <move_window>
 800977e:	4603      	mov	r3, r0
 8009780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009782:	7ffb      	ldrb	r3, [r7, #31]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f040 80ad 	bne.w	80098e4 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	1c59      	adds	r1, r3, #1
 8009794:	61b9      	str	r1, [r7, #24]
 8009796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800979a:	4413      	add	r3, r2
 800979c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00d      	beq.n	80097c4 <put_fat+0xa4>
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	b25b      	sxtb	r3, r3
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	b25a      	sxtb	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	b25b      	sxtb	r3, r3
 80097b8:	011b      	lsls	r3, r3, #4
 80097ba:	b25b      	sxtb	r3, r3
 80097bc:	4313      	orrs	r3, r2
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	e001      	b.n	80097c8 <put_fat+0xa8>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2201      	movs	r2, #1
 80097d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	0a5b      	lsrs	r3, r3, #9
 80097da:	4413      	add	r3, r2
 80097dc:	4619      	mov	r1, r3
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7ff fdc8 	bl	8009374 <move_window>
 80097e4:	4603      	mov	r3, r0
 80097e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097e8:	7ffb      	ldrb	r3, [r7, #31]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d17c      	bne.n	80098e8 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fa:	4413      	add	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <put_fat+0xf0>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	091b      	lsrs	r3, r3, #4
 800980c:	b2db      	uxtb	r3, r3
 800980e:	e00e      	b.n	800982e <put_fat+0x10e>
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	b25b      	sxtb	r3, r3
 8009816:	f023 030f 	bic.w	r3, r3, #15
 800981a:	b25a      	sxtb	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	0a1b      	lsrs	r3, r3, #8
 8009820:	b25b      	sxtb	r3, r3
 8009822:	f003 030f 	and.w	r3, r3, #15
 8009826:	b25b      	sxtb	r3, r3
 8009828:	4313      	orrs	r3, r2
 800982a:	b25b      	sxtb	r3, r3
 800982c:	b2db      	uxtb	r3, r3
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	70da      	strb	r2, [r3, #3]
			break;
 8009838:	e05b      	b.n	80098f2 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	4413      	add	r3, r2
 8009844:	4619      	mov	r1, r3
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fd94 	bl	8009374 <move_window>
 800984c:	4603      	mov	r3, r0
 800984e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009850:	7ffb      	ldrb	r3, [r7, #31]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d14a      	bne.n	80098ec <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009864:	4413      	add	r3, r2
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	b292      	uxth	r2, r2
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7ff fa84 	bl	8008d7a <st_word>
			fs->wflag = 1;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2201      	movs	r2, #1
 8009876:	70da      	strb	r2, [r3, #3]
			break;
 8009878:	e03b      	b.n	80098f2 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	09db      	lsrs	r3, r3, #7
 8009882:	4413      	add	r3, r2
 8009884:	4619      	mov	r1, r3
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff fd74 	bl	8009374 <move_window>
 800988c:	4603      	mov	r3, r0
 800988e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009890:	7ffb      	ldrb	r3, [r7, #31]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d12c      	bne.n	80098f0 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b04      	cmp	r3, #4
 800989c:	d012      	beq.n	80098c4 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80098b2:	4413      	add	r3, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff f962 	bl	8008b7e <ld_dword>
 80098ba:	4603      	mov	r3, r0
 80098bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80098c0:	4323      	orrs	r3, r4
 80098c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80098d2:	4413      	add	r3, r2
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff fa6a 	bl	8008db0 <st_dword>
			fs->wflag = 1;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2201      	movs	r2, #1
 80098e0:	70da      	strb	r2, [r3, #3]
			break;
 80098e2:	e006      	b.n	80098f2 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80098e4:	bf00      	nop
 80098e6:	e004      	b.n	80098f2 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80098e8:	bf00      	nop
 80098ea:	e002      	b.n	80098f2 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80098f0:	bf00      	nop
		}
	}
	return res;
 80098f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3724      	adds	r7, #36	@ 0x24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd90      	pop	{r4, r7, pc}

080098fc <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	@ 0x28
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	3b02      	subs	r3, #2
 800990c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	3b02      	subs	r3, #2
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	429a      	cmp	r2, r3
 8009918:	d301      	bcc.n	800991e <find_bitmap+0x22>
 800991a:	2300      	movs	r3, #0
 800991c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	61bb      	str	r3, [r7, #24]
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	0b1b      	lsrs	r3, r3, #12
 8009932:	4413      	add	r3, r2
 8009934:	4619      	mov	r1, r3
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7ff fd1c 	bl	8009374 <move_window>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <find_bitmap+0x4c>
 8009942:	f04f 33ff 	mov.w	r3, #4294967295
 8009946:	e051      	b.n	80099ec <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	08db      	lsrs	r3, r3, #3
 800994c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009950:	623b      	str	r3, [r7, #32]
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	2201      	movs	r2, #1
 800995a:	fa02 f303 	lsl.w	r3, r2, r3
 800995e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	4413      	add	r3, r2
 8009968:	3338      	adds	r3, #56	@ 0x38
 800996a:	781a      	ldrb	r2, [r3, #0]
 800996c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009970:	4013      	ands	r3, r2
 8009972:	74fb      	strb	r3, [r7, #19]
 8009974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	3301      	adds	r3, #1
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	3b02      	subs	r3, #2
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	429a      	cmp	r2, r3
 800998e:	d307      	bcc.n	80099a0 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8009990:	2300      	movs	r3, #0
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	2300      	movs	r3, #0
 8009996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800999a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800999e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80099a0:	7cfb      	ldrb	r3, [r7, #19]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	3301      	adds	r3, #1
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d106      	bne.n	80099c2 <find_bitmap+0xc6>
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	3302      	adds	r3, #2
 80099b8:	e018      	b.n	80099ec <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	61bb      	str	r3, [r7, #24]
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d101      	bne.n	80099ce <find_bitmap+0xd2>
 80099ca:	2300      	movs	r3, #0
 80099cc:	e00e      	b.n	80099ec <find_bitmap+0xf0>
			} while (bm);
 80099ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1c5      	bne.n	8009962 <find_bitmap+0x66>
			bm = 1;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	3301      	adds	r3, #1
 80099e0:	623b      	str	r3, [r7, #32]
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099e8:	d3bb      	bcc.n	8009962 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80099ea:	e79e      	b.n	800992a <find_bitmap+0x2e>
	}
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3728      	adds	r7, #40	@ 0x28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	3b02      	subs	r3, #2
 8009a06:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	0b1b      	lsrs	r3, r3, #12
 8009a10:	4413      	add	r3, r2
 8009a12:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	08db      	lsrs	r3, r3, #3
 8009a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	2201      	movs	r2, #1
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	617a      	str	r2, [r7, #20]
 8009a32:	4619      	mov	r1, r3
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7ff fc9d 	bl	8009374 <move_window>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <change_bitmap+0x50>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e03d      	b.n	8009ac0 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	4413      	add	r3, r2
 8009a4a:	3338      	adds	r3, #56	@ 0x38
 8009a4c:	781a      	ldrb	r2, [r3, #0]
 8009a4e:	7ffb      	ldrb	r3, [r7, #31]
 8009a50:	4013      	ands	r3, r2
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bf14      	ite	ne
 8009a58:	2301      	movne	r3, #1
 8009a5a:	2300      	moveq	r3, #0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d101      	bne.n	8009a6a <change_bitmap+0x76>
 8009a66:	2302      	movs	r3, #2
 8009a68:	e02a      	b.n	8009ac0 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	4413      	add	r3, r2
 8009a70:	3338      	adds	r3, #56	@ 0x38
 8009a72:	781a      	ldrb	r2, [r3, #0]
 8009a74:	7ffb      	ldrb	r3, [r7, #31]
 8009a76:	4053      	eors	r3, r2
 8009a78:	b2d9      	uxtb	r1, r3
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	4413      	add	r3, r2
 8009a80:	3338      	adds	r3, #56	@ 0x38
 8009a82:	460a      	mov	r2, r1
 8009a84:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	607b      	str	r3, [r7, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <change_bitmap+0xa8>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e011      	b.n	8009ac0 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8009a9c:	7ffb      	ldrb	r3, [r7, #31]
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	77fb      	strb	r3, [r7, #31]
 8009aa2:	7ffb      	ldrb	r3, [r7, #31]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1cd      	bne.n	8009a44 <change_bitmap+0x50>
			bm = 1;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	61bb      	str	r3, [r7, #24]
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab8:	d3c4      	bcc.n	8009a44 <change_bitmap+0x50>
		i = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009abe:	e7b5      	b.n	8009a2c <change_bitmap+0x38>
	}
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	79db      	ldrb	r3, [r3, #7]
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d121      	bne.n	8009b1c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	613b      	str	r3, [r7, #16]
 8009ae4:	e014      	b.n	8009b10 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	3301      	adds	r3, #1
 8009aee:	461a      	mov	r2, r3
 8009af0:	6979      	ldr	r1, [r7, #20]
 8009af2:	f7ff fe15 	bl	8009720 <put_fat>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <fill_first_frag+0x3c>
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	e00c      	b.n	8009b1e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	3301      	adds	r3, #1
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e7      	bne.n	8009ae6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b086      	sub	sp, #24
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009b32:	e020      	b.n	8009b76 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6818      	ldr	r0, [r3, #0]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	1c59      	adds	r1, r3, #1
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d905      	bls.n	8009b56 <fill_last_frag+0x30>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	3302      	adds	r3, #2
 8009b54:	e000      	b.n	8009b58 <fill_last_frag+0x32>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f7ff fde1 	bl	8009720 <put_fat>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <fill_last_frag+0x46>
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	e009      	b.n	8009b80 <fill_last_frag+0x5a>
		obj->n_frag--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	1e5a      	subs	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1da      	bne.n	8009b34 <fill_last_frag+0xe>
	}
	return FR_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08a      	sub	sp, #40	@ 0x28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d904      	bls.n	8009bb6 <remove_chain+0x2e>
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d301      	bcc.n	8009bba <remove_chain+0x32>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e096      	b.n	8009ce8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d014      	beq.n	8009bea <remove_chain+0x62>
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d103      	bne.n	8009bd0 <remove_chain+0x48>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	79db      	ldrb	r3, [r3, #7]
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d00c      	beq.n	8009bea <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	69b8      	ldr	r0, [r7, #24]
 8009bd8:	f7ff fda2 	bl	8009720 <put_fat>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009be0:	7ffb      	ldrb	r3, [r7, #31]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <remove_chain+0x62>
 8009be6:	7ffb      	ldrb	r3, [r7, #31]
 8009be8:	e07e      	b.n	8009ce8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7ff fc7d 	bl	80094ec <get_fat>
 8009bf2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d055      	beq.n	8009ca6 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d101      	bne.n	8009c04 <remove_chain+0x7c>
 8009c00:	2302      	movs	r3, #2
 8009c02:	e071      	b.n	8009ce8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0a:	d101      	bne.n	8009c10 <remove_chain+0x88>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e06b      	b.n	8009ce8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	d00b      	beq.n	8009c30 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009c18:	2200      	movs	r2, #0
 8009c1a:	68b9      	ldr	r1, [r7, #8]
 8009c1c:	69b8      	ldr	r0, [r7, #24]
 8009c1e:	f7ff fd7f 	bl	8009720 <put_fat>
 8009c22:	4603      	mov	r3, r0
 8009c24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009c26:	7ffb      	ldrb	r3, [r7, #31]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <remove_chain+0xa8>
 8009c2c:	7ffb      	ldrb	r3, [r7, #31]
 8009c2e:	e05b      	b.n	8009ce8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	699a      	ldr	r2, [r3, #24]
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	3b02      	subs	r3, #2
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d20b      	bcs.n	8009c56 <remove_chain+0xce>
			fs->free_clst++;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	791b      	ldrb	r3, [r3, #4]
 8009c4c:	f043 0301 	orr.w	r3, r3, #1
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d102      	bne.n	8009c66 <remove_chain+0xde>
			ecl = nxt;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	623b      	str	r3, [r7, #32]
 8009c64:	e017      	b.n	8009c96 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d10f      	bne.n	8009c8e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009c6e:	6a3a      	ldr	r2, [r7, #32]
 8009c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	2300      	movs	r3, #0
 8009c78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c7a:	69b8      	ldr	r0, [r7, #24]
 8009c7c:	f7ff feba 	bl	80099f4 <change_bitmap>
 8009c80:	4603      	mov	r3, r0
 8009c82:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009c84:	7ffb      	ldrb	r3, [r7, #31]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <remove_chain+0x106>
 8009c8a:	7ffb      	ldrb	r3, [r7, #31]
 8009c8c:	e02c      	b.n	8009ce8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	623b      	str	r3, [r7, #32]
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d3a2      	bcc.n	8009bea <remove_chain+0x62>
 8009ca4:	e000      	b.n	8009ca8 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009ca6:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d11a      	bne.n	8009ce6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d103      	bne.n	8009cbe <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	71da      	strb	r2, [r3, #7]
 8009cbc:	e013      	b.n	8009ce6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	79db      	ldrb	r3, [r3, #7]
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d10f      	bne.n	8009ce6 <remove_chain+0x15e>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d30a      	bcc.n	8009ce6 <remove_chain+0x15e>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	4413      	add	r3, r2
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d802      	bhi.n	8009ce6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3728      	adds	r7, #40	@ 0x28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10d      	bne.n	8009d22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d004      	beq.n	8009d1c <create_chain+0x2c>
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d31b      	bcc.n	8009d54 <create_chain+0x64>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	61bb      	str	r3, [r7, #24]
 8009d20:	e018      	b.n	8009d54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fbe1 	bl	80094ec <get_fat>
 8009d2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d801      	bhi.n	8009d36 <create_chain+0x46>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e0d9      	b.n	8009eea <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3c:	d101      	bne.n	8009d42 <create_chain+0x52>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	e0d3      	b.n	8009eea <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d201      	bcs.n	8009d50 <create_chain+0x60>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	e0cc      	b.n	8009eea <create_chain+0x1fa>
		scl = clst;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d164      	bne.n	8009e26 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	69b9      	ldr	r1, [r7, #24]
 8009d60:	6938      	ldr	r0, [r7, #16]
 8009d62:	f7ff fdcb 	bl	80098fc <find_bitmap>
 8009d66:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <create_chain+0x86>
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d74:	d101      	bne.n	8009d7a <create_chain+0x8a>
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	e0b7      	b.n	8009eea <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	69f9      	ldr	r1, [r7, #28]
 8009d80:	6938      	ldr	r0, [r7, #16]
 8009d82:	f7ff fe37 	bl	80099f4 <change_bitmap>
 8009d86:	4603      	mov	r3, r0
 8009d88:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d101      	bne.n	8009d94 <create_chain+0xa4>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e0aa      	b.n	8009eea <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d102      	bne.n	8009da0 <create_chain+0xb0>
 8009d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d9e:	e0a4      	b.n	8009eea <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d103      	bne.n	8009dae <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2202      	movs	r2, #2
 8009daa:	71da      	strb	r2, [r3, #7]
 8009dac:	e011      	b.n	8009dd2 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	79db      	ldrb	r3, [r3, #7]
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d10d      	bne.n	8009dd2 <create_chain+0xe2>
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	3301      	adds	r3, #1
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d008      	beq.n	8009dd2 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	69ba      	ldr	r2, [r7, #24]
 8009dc6:	1ad2      	subs	r2, r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2203      	movs	r2, #3
 8009dd0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	79db      	ldrb	r3, [r3, #7]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d064      	beq.n	8009ea4 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d10b      	bne.n	8009dfc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <create_chain+0x104>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	3301      	adds	r3, #1
 8009df2:	e000      	b.n	8009df6 <create_chain+0x106>
 8009df4:	2302      	movs	r3, #2
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	61d3      	str	r3, [r2, #28]
 8009dfa:	e053      	b.n	8009ea4 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <create_chain+0x11a>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fe89 	bl	8009b26 <fill_last_frag>
 8009e14:	4603      	mov	r3, r0
 8009e16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d142      	bne.n	8009ea4 <create_chain+0x1b4>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	61da      	str	r2, [r3, #28]
 8009e24:	e03e      	b.n	8009ea4 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	69db      	ldr	r3, [r3, #28]
 8009e34:	69fa      	ldr	r2, [r7, #28]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d307      	bcc.n	8009e4a <create_chain+0x15a>
				ncl = 2;
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d901      	bls.n	8009e4a <create_chain+0x15a>
 8009e46:	2300      	movs	r3, #0
 8009e48:	e04f      	b.n	8009eea <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009e4a:	69f9      	ldr	r1, [r7, #28]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff fb4d 	bl	80094ec <get_fat>
 8009e52:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00e      	beq.n	8009e78 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d003      	beq.n	8009e68 <create_chain+0x178>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e66:	d101      	bne.n	8009e6c <create_chain+0x17c>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	e03e      	b.n	8009eea <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d1da      	bne.n	8009e2a <create_chain+0x13a>
 8009e74:	2300      	movs	r3, #0
 8009e76:	e038      	b.n	8009eea <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009e78:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7e:	69f9      	ldr	r1, [r7, #28]
 8009e80:	6938      	ldr	r0, [r7, #16]
 8009e82:	f7ff fc4d 	bl	8009720 <put_fat>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d109      	bne.n	8009ea4 <create_chain+0x1b4>
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d006      	beq.n	8009ea4 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009e96:	69fa      	ldr	r2, [r7, #28]
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6938      	ldr	r0, [r7, #16]
 8009e9c:	f7ff fc40 	bl	8009720 <put_fat>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d116      	bne.n	8009ed8 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	69fa      	ldr	r2, [r7, #28]
 8009eae:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	699a      	ldr	r2, [r3, #24]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	3b02      	subs	r3, #2
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d804      	bhi.n	8009ec8 <create_chain+0x1d8>
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	1e5a      	subs	r2, r3, #1
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	791b      	ldrb	r3, [r3, #4]
 8009ecc:	f043 0301 	orr.w	r3, r3, #1
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	711a      	strb	r2, [r3, #4]
 8009ed6:	e007      	b.n	8009ee8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d102      	bne.n	8009ee4 <create_chain+0x1f4>
 8009ede:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee2:	e000      	b.n	8009ee6 <create_chain+0x1f6>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009ee8:	69fb      	ldr	r3, [r7, #28]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3720      	adds	r7, #32
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009ef2:	b5b0      	push	{r4, r5, r7, lr}
 8009ef4:	b088      	sub	sp, #32
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f08:	3304      	adds	r3, #4
 8009f0a:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f10:	f04f 0000 	mov.w	r0, #0
 8009f14:	f04f 0100 	mov.w	r1, #0
 8009f18:	0a50      	lsrs	r0, r2, #9
 8009f1a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009f1e:	0a59      	lsrs	r1, r3, #9
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	895b      	ldrh	r3, [r3, #10]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	2200      	movs	r2, #0
 8009f28:	461c      	mov	r4, r3
 8009f2a:	4615      	mov	r5, r2
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	462b      	mov	r3, r5
 8009f30:	f7f6 feba 	bl	8000ca8 <__aeabi_uldivmod>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4613      	mov	r3, r2
 8009f3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	1d1a      	adds	r2, r3, #4
 8009f40:	61ba      	str	r2, [r7, #24]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <clmt_clust+0x5e>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e010      	b.n	8009f72 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8009f50:	69fa      	ldr	r2, [r7, #28]
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d307      	bcc.n	8009f68 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	61fb      	str	r3, [r7, #28]
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	3304      	adds	r3, #4
 8009f64:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f66:	e7e9      	b.n	8009f3c <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8009f68:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3720      	adds	r7, #32
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bdb0      	pop	{r4, r5, r7, pc}

08009f7a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b086      	sub	sp, #24
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d102      	bne.n	8009f98 <dir_sdi+0x1e>
 8009f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f96:	e001      	b.n	8009f9c <dir_sdi+0x22>
 8009f98:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d904      	bls.n	8009fac <dir_sdi+0x32>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	f003 031f 	and.w	r3, r3, #31
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <dir_sdi+0x36>
		return FR_INT_ERR;
 8009fac:	2302      	movs	r3, #2
 8009fae:	e066      	b.n	800a07e <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d109      	bne.n	8009fd6 <dir_sdi+0x5c>
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d905      	bls.n	8009fd6 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10c      	bne.n	8009ff6 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	095b      	lsrs	r3, r3, #5
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	8912      	ldrh	r2, [r2, #8]
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d301      	bcc.n	8009fec <dir_sdi+0x72>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	e048      	b.n	800a07e <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	639a      	str	r2, [r3, #56]	@ 0x38
 8009ff4:	e029      	b.n	800a04a <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	895b      	ldrh	r3, [r3, #10]
 8009ffa:	025b      	lsls	r3, r3, #9
 8009ffc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ffe:	e019      	b.n	800a034 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6979      	ldr	r1, [r7, #20]
 800a004:	4618      	mov	r0, r3
 800a006:	f7ff fa71 	bl	80094ec <get_fat>
 800a00a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d101      	bne.n	800a018 <dir_sdi+0x9e>
 800a014:	2301      	movs	r3, #1
 800a016:	e032      	b.n	800a07e <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d904      	bls.n	800a028 <dir_sdi+0xae>
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	429a      	cmp	r2, r3
 800a026:	d301      	bcc.n	800a02c <dir_sdi+0xb2>
 800a028:	2302      	movs	r3, #2
 800a02a:	e028      	b.n	800a07e <dir_sdi+0x104>
			ofs -= csz;
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d2e1      	bcs.n	800a000 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800a03c:	6979      	ldr	r1, [r7, #20]
 800a03e:	6938      	ldr	r0, [r7, #16]
 800a040:	f7ff fa34 	bl	80094ac <clust2sect>
 800a044:	4602      	mov	r2, r0
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <dir_sdi+0xe2>
 800a058:	2302      	movs	r3, #2
 800a05a:	e010      	b.n	800a07e <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	0a5b      	lsrs	r3, r3, #9
 800a064:	441a      	add	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a076:	441a      	add	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b086      	sub	sp, #24
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09a:	3320      	adds	r3, #32
 800a09c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <dir_next+0x38>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b04      	cmp	r3, #4
 800a0ac:	d102      	bne.n	800a0b4 <dir_next+0x2e>
 800a0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0b2:	e001      	b.n	800a0b8 <dir_next+0x32>
 800a0b4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d801      	bhi.n	800a0c2 <dir_next+0x3c>
 800a0be:	2304      	movs	r3, #4
 800a0c0:	e0b2      	b.n	800a228 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f040 80a0 	bne.w	800a20e <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10b      	bne.n	800a0f8 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	095b      	lsrs	r3, r3, #5
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	8912      	ldrh	r2, [r2, #8]
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	f0c0 8090 	bcc.w	800a20e <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	e097      	b.n	800a228 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	0a5b      	lsrs	r3, r3, #9
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	8952      	ldrh	r2, [r2, #10]
 800a100:	3a01      	subs	r2, #1
 800a102:	4013      	ands	r3, r2
 800a104:	2b00      	cmp	r3, #0
 800a106:	f040 8082 	bne.w	800a20e <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f7ff f9ea 	bl	80094ec <get_fat>
 800a118:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d801      	bhi.n	800a124 <dir_next+0x9e>
 800a120:	2302      	movs	r3, #2
 800a122:	e081      	b.n	800a228 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d101      	bne.n	800a130 <dir_next+0xaa>
 800a12c:	2301      	movs	r3, #1
 800a12e:	e07b      	b.n	800a228 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	429a      	cmp	r2, r3
 800a138:	d35f      	bcc.n	800a1fa <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d104      	bne.n	800a14a <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	639a      	str	r2, [r3, #56]	@ 0x38
 800a146:	2304      	movs	r3, #4
 800a148:	e06e      	b.n	800a228 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a150:	4619      	mov	r1, r3
 800a152:	4610      	mov	r0, r2
 800a154:	f7ff fdcc 	bl	8009cf0 <create_chain>
 800a158:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <dir_next+0xde>
 800a160:	2307      	movs	r3, #7
 800a162:	e061      	b.n	800a228 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d101      	bne.n	800a16e <dir_next+0xe8>
 800a16a:	2302      	movs	r3, #2
 800a16c:	e05c      	b.n	800a228 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a174:	d101      	bne.n	800a17a <dir_next+0xf4>
 800a176:	2301      	movs	r3, #1
 800a178:	e056      	b.n	800a228 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	79db      	ldrb	r3, [r3, #7]
 800a17e:	f043 0304 	orr.w	r3, r3, #4
 800a182:	b2da      	uxtb	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7ff f8af 	bl	80092ec <sync_window>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <dir_next+0x112>
 800a194:	2301      	movs	r3, #1
 800a196:	e047      	b.n	800a228 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3338      	adds	r3, #56	@ 0x38
 800a19c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fed9 	bl	8008f5a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	6979      	ldr	r1, [r7, #20]
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff f97c 	bl	80094ac <clust2sect>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a1ba:	e012      	b.n	800a1e2 <dir_next+0x15c>
						fs->wflag = 1;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f7ff f892 	bl	80092ec <sync_window>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <dir_next+0x14c>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e02a      	b.n	800a228 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	613b      	str	r3, [r7, #16]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	895b      	ldrh	r3, [r3, #10]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d3e6      	bcc.n	800a1bc <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	1ad2      	subs	r2, r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800a200:	6979      	ldr	r1, [r7, #20]
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7ff f952 	bl	80094ac <clust2sect>
 800a208:	4602      	mov	r2, r0
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a220:	441a      	add	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a240:	2100      	movs	r1, #0
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff fe99 	bl	8009f7a <dir_sdi>
 800a248:	4603      	mov	r3, r0
 800a24a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d140      	bne.n	800a2d4 <dir_alloc+0xa4>
		n = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a25a:	4619      	mov	r1, r3
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff f889 	bl	8009374 <move_window>
 800a262:	4603      	mov	r3, r0
 800a264:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d132      	bne.n	800a2d2 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	2b04      	cmp	r3, #4
 800a272:	d108      	bne.n	800a286 <dir_alloc+0x56>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b25b      	sxtb	r3, r3
 800a27c:	43db      	mvns	r3, r3
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	09db      	lsrs	r3, r3, #7
 800a282:	b2db      	uxtb	r3, r3
 800a284:	e00f      	b.n	800a2a6 <dir_alloc+0x76>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2be5      	cmp	r3, #229	@ 0xe5
 800a28e:	d004      	beq.n	800a29a <dir_alloc+0x6a>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <dir_alloc+0x6e>
 800a29a:	2301      	movs	r3, #1
 800a29c:	e000      	b.n	800a2a0 <dir_alloc+0x70>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d007      	beq.n	800a2ba <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	613b      	str	r3, [r7, #16]
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d102      	bne.n	800a2be <dir_alloc+0x8e>
 800a2b8:	e00c      	b.n	800a2d4 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a2be:	2101      	movs	r1, #1
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff fee0 	bl	800a086 <dir_next>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0c2      	beq.n	800a256 <dir_alloc+0x26>
 800a2d0:	e000      	b.n	800a2d4 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a2d2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d101      	bne.n	800a2de <dir_alloc+0xae>
 800a2da:	2307      	movs	r3, #7
 800a2dc:	75fb      	strb	r3, [r7, #23]
	return res;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	331a      	adds	r3, #26
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe fc28 	bl	8008b4c <ld_word>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b03      	cmp	r3, #3
 800a306:	d109      	bne.n	800a31c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	3314      	adds	r3, #20
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe fc1d 	bl	8008b4c <ld_word>
 800a312:	4603      	mov	r3, r0
 800a314:	041b      	lsls	r3, r3, #16
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	4313      	orrs	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a31c:	68fb      	ldr	r3, [r7, #12]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	331a      	adds	r3, #26
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	b292      	uxth	r2, r2
 800a33a:	4611      	mov	r1, r2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe fd1c 	bl	8008d7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b03      	cmp	r3, #3
 800a348:	d109      	bne.n	800a35e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	f103 0214 	add.w	r2, r3, #20
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	0c1b      	lsrs	r3, r3, #16
 800a354:	b29b      	uxth	r3, r3
 800a356:	4619      	mov	r1, r3
 800a358:	4610      	mov	r0, r2
 800a35a:	f7fe fd0e 	bl	8008d7a <st_word>
	}
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b087      	sub	sp, #28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	331a      	adds	r3, #26
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fbe8 	bl	8008b4c <ld_word>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <cmp_lfn+0x1e>
 800a382:	2300      	movs	r3, #0
 800a384:	e059      	b.n	800a43a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a38e:	1e5a      	subs	r2, r3, #1
 800a390:	4613      	mov	r3, r2
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a39c:	2301      	movs	r3, #1
 800a39e:	81fb      	strh	r3, [r7, #14]
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	613b      	str	r3, [r7, #16]
 800a3a4:	e033      	b.n	800a40e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a3a6:	4a27      	ldr	r2, [pc, #156]	@ (800a444 <cmp_lfn+0xdc>)
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe fbc9 	bl	8008b4c <ld_word>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a3be:	89fb      	ldrh	r3, [r7, #14]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d01a      	beq.n	800a3fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2bfe      	cmp	r3, #254	@ 0xfe
 800a3c8:	d812      	bhi.n	800a3f0 <cmp_lfn+0x88>
 800a3ca:	89bb      	ldrh	r3, [r7, #12]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f004 fab5 	bl	800e93c <ff_wtoupper>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	461c      	mov	r4, r3
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	617a      	str	r2, [r7, #20]
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f004 faa9 	bl	800e93c <ff_wtoupper>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	429c      	cmp	r4, r3
 800a3ee:	d001      	beq.n	800a3f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e022      	b.n	800a43a <cmp_lfn+0xd2>
			}
			wc = uc;
 800a3f4:	89bb      	ldrh	r3, [r7, #12]
 800a3f6:	81fb      	strh	r3, [r7, #14]
 800a3f8:	e006      	b.n	800a408 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a3fa:	89bb      	ldrh	r3, [r7, #12]
 800a3fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a400:	4293      	cmp	r3, r2
 800a402:	d001      	beq.n	800a408 <cmp_lfn+0xa0>
 800a404:	2300      	movs	r3, #0
 800a406:	e018      	b.n	800a43a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	3301      	adds	r3, #1
 800a40c:	613b      	str	r3, [r7, #16]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b0c      	cmp	r3, #12
 800a412:	d9c8      	bls.n	800a3a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <cmp_lfn+0xd0>
 800a420:	89fb      	ldrh	r3, [r7, #14]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d008      	beq.n	800a438 <cmp_lfn+0xd0>
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	881b      	ldrh	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <cmp_lfn+0xd0>
 800a434:	2300      	movs	r3, #0
 800a436:	e000      	b.n	800a43a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a438:	2301      	movs	r3, #1
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd90      	pop	{r4, r7, pc}
 800a442:	bf00      	nop
 800a444:	080133a0 	.word	0x080133a0

0800a448 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	331a      	adds	r3, #26
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe fb78 	bl	8008b4c <ld_word>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <pick_lfn+0x1e>
 800a462:	2300      	movs	r3, #0
 800a464:	e04d      	b.n	800a502 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a46e:	1e5a      	subs	r2, r3, #1
 800a470:	4613      	mov	r3, r2
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a47c:	2301      	movs	r3, #1
 800a47e:	81fb      	strh	r3, [r7, #14]
 800a480:	2300      	movs	r3, #0
 800a482:	613b      	str	r3, [r7, #16]
 800a484:	e028      	b.n	800a4d8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a486:	4a21      	ldr	r2, [pc, #132]	@ (800a50c <pick_lfn+0xc4>)
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	4413      	add	r3, r2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	4413      	add	r3, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe fb59 	bl	8008b4c <ld_word>
 800a49a:	4603      	mov	r3, r0
 800a49c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a49e:	89fb      	ldrh	r3, [r7, #14]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00f      	beq.n	800a4c4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2bfe      	cmp	r3, #254	@ 0xfe
 800a4a8:	d901      	bls.n	800a4ae <pick_lfn+0x66>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e029      	b.n	800a502 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a4ae:	89bb      	ldrh	r3, [r7, #12]
 800a4b0:	81fb      	strh	r3, [r7, #14]
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	617a      	str	r2, [r7, #20]
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	89fa      	ldrh	r2, [r7, #14]
 800a4c0:	801a      	strh	r2, [r3, #0]
 800a4c2:	e006      	b.n	800a4d2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a4c4:	89bb      	ldrh	r3, [r7, #12]
 800a4c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d001      	beq.n	800a4d2 <pick_lfn+0x8a>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e017      	b.n	800a502 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	613b      	str	r3, [r7, #16]
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	2b0c      	cmp	r3, #12
 800a4dc:	d9d3      	bls.n	800a486 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2bfe      	cmp	r3, #254	@ 0xfe
 800a4ee:	d901      	bls.n	800a4f4 <pick_lfn+0xac>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	e006      	b.n	800a502 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a500:	2301      	movs	r3, #1
}
 800a502:	4618      	mov	r0, r3
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	080133a0 	.word	0x080133a0

0800a510 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	4611      	mov	r1, r2
 800a51c:	461a      	mov	r2, r3
 800a51e:	460b      	mov	r3, r1
 800a520:	71fb      	strb	r3, [r7, #7]
 800a522:	4613      	mov	r3, r2
 800a524:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	330d      	adds	r3, #13
 800a52a:	79ba      	ldrb	r2, [r7, #6]
 800a52c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	330b      	adds	r3, #11
 800a532:	220f      	movs	r2, #15
 800a534:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	330c      	adds	r3, #12
 800a53a:	2200      	movs	r2, #0
 800a53c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	331a      	adds	r3, #26
 800a542:	2100      	movs	r1, #0
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe fc18 	bl	8008d7a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	1e5a      	subs	r2, r3, #1
 800a54e:	4613      	mov	r3, r2
 800a550:	005b      	lsls	r3, r3, #1
 800a552:	4413      	add	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	82fb      	strh	r3, [r7, #22]
 800a55e:	2300      	movs	r3, #0
 800a560:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a562:	8afb      	ldrh	r3, [r7, #22]
 800a564:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a568:	4293      	cmp	r3, r2
 800a56a:	d007      	beq.n	800a57c <put_lfn+0x6c>
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	61fa      	str	r2, [r7, #28]
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4413      	add	r3, r2
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a57c:	4a17      	ldr	r2, [pc, #92]	@ (800a5dc <put_lfn+0xcc>)
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	4413      	add	r3, r2
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	461a      	mov	r2, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	4413      	add	r3, r2
 800a58a:	8afa      	ldrh	r2, [r7, #22]
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fe fbf3 	bl	8008d7a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a594:	8afb      	ldrh	r3, [r7, #22]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d102      	bne.n	800a5a0 <put_lfn+0x90>
 800a59a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a59e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	2b0c      	cmp	r3, #12
 800a5aa:	d9da      	bls.n	800a562 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a5ac:	8afb      	ldrh	r3, [r7, #22]
 800a5ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d006      	beq.n	800a5c4 <put_lfn+0xb4>
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d103      	bne.n	800a5cc <put_lfn+0xbc>
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5ca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	79fa      	ldrb	r2, [r7, #7]
 800a5d0:	701a      	strb	r2, [r3, #0]
}
 800a5d2:	bf00      	nop
 800a5d4:	3720      	adds	r7, #32
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	080133a0 	.word	0x080133a0

0800a5e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08c      	sub	sp, #48	@ 0x30
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a5ee:	220b      	movs	r2, #11
 800a5f0:	68b9      	ldr	r1, [r7, #8]
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f7fe fc90 	bl	8008f18 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b05      	cmp	r3, #5
 800a5fc:	d92b      	bls.n	800a656 <gen_numname+0x76>
		sr = seq;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a602:	e022      	b.n	800a64a <gen_numname+0x6a>
			wc = *lfn++;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	1c9a      	adds	r2, r3, #2
 800a608:	607a      	str	r2, [r7, #4]
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a60e:	2300      	movs	r3, #0
 800a610:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a612:	e017      	b.n	800a644 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	005a      	lsls	r2, r3, #1
 800a618:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	4413      	add	r3, r2
 800a620:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a622:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a624:	085b      	lsrs	r3, r3, #1
 800a626:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d005      	beq.n	800a63e <gen_numname+0x5e>
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a638:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a63c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	3301      	adds	r3, #1
 800a642:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a646:	2b0f      	cmp	r3, #15
 800a648:	d9e4      	bls.n	800a614 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1d8      	bne.n	800a604 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a656:	2307      	movs	r3, #7
 800a658:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f003 030f 	and.w	r3, r3, #15
 800a662:	b2db      	uxtb	r3, r3
 800a664:	3330      	adds	r3, #48	@ 0x30
 800a666:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a66a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a66e:	2b39      	cmp	r3, #57	@ 0x39
 800a670:	d904      	bls.n	800a67c <gen_numname+0x9c>
 800a672:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a676:	3307      	adds	r3, #7
 800a678:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67e:	1e5a      	subs	r2, r3, #1
 800a680:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a682:	3330      	adds	r3, #48	@ 0x30
 800a684:	443b      	add	r3, r7
 800a686:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a68a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	091b      	lsrs	r3, r3, #4
 800a692:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1df      	bne.n	800a65a <gen_numname+0x7a>
	ns[i] = '~';
 800a69a:	f107 0214 	add.w	r2, r7, #20
 800a69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a0:	4413      	add	r3, r2
 800a6a2:	227e      	movs	r2, #126	@ 0x7e
 800a6a4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6aa:	e016      	b.n	800a6da <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b0:	4413      	add	r3, r2
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2b80      	cmp	r3, #128	@ 0x80
 800a6b6:	d90d      	bls.n	800a6d4 <gen_numname+0xf4>
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	4413      	add	r3, r2
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	2bff      	cmp	r3, #255	@ 0xff
 800a6c2:	d007      	beq.n	800a6d4 <gen_numname+0xf4>
			if (j == i - 1) break;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d010      	beq.n	800a6f0 <gen_numname+0x110>
			j++;
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d207      	bcs.n	800a6f2 <gen_numname+0x112>
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e6:	4413      	add	r3, r2
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b20      	cmp	r3, #32
 800a6ec:	d1de      	bne.n	800a6ac <gen_numname+0xcc>
 800a6ee:	e000      	b.n	800a6f2 <gen_numname+0x112>
			if (j == i - 1) break;
 800a6f0:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f4:	2b07      	cmp	r3, #7
 800a6f6:	d807      	bhi.n	800a708 <gen_numname+0x128>
 800a6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a6fe:	3330      	adds	r3, #48	@ 0x30
 800a700:	443b      	add	r3, r7
 800a702:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a706:	e000      	b.n	800a70a <gen_numname+0x12a>
 800a708:	2120      	movs	r1, #32
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	4413      	add	r3, r2
 800a714:	460a      	mov	r2, r1
 800a716:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71a:	2b07      	cmp	r3, #7
 800a71c:	d9e9      	bls.n	800a6f2 <gen_numname+0x112>
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	3730      	adds	r7, #48	@ 0x30
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a734:	230b      	movs	r3, #11
 800a736:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	0852      	lsrs	r2, r2, #1
 800a73e:	01db      	lsls	r3, r3, #7
 800a740:	4313      	orrs	r3, r2
 800a742:	b2da      	uxtb	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	1c59      	adds	r1, r3, #1
 800a748:	6079      	str	r1, [r7, #4]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	4413      	add	r3, r2
 800a74e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	3b01      	subs	r3, #1
 800a754:	60bb      	str	r3, [r7, #8]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1ed      	bne.n	800a738 <sum_sfn+0x10>
	return sum;
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b087      	sub	sp, #28
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3301      	adds	r3, #1
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	3301      	adds	r3, #1
 800a77a:	015b      	lsls	r3, r3, #5
 800a77c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a77e:	2300      	movs	r3, #0
 800a780:	827b      	strh	r3, [r7, #18]
 800a782:	2300      	movs	r3, #0
 800a784:	617b      	str	r3, [r7, #20]
 800a786:	e015      	b.n	800a7b4 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d103      	bne.n	800a796 <xdir_sum+0x2c>
			i++;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	3301      	adds	r3, #1
 800a792:	617b      	str	r3, [r7, #20]
 800a794:	e00b      	b.n	800a7ae <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a796:	8a7b      	ldrh	r3, [r7, #18]
 800a798:	b29a      	uxth	r2, r3
 800a79a:	0852      	lsrs	r2, r2, #1
 800a79c:	03db      	lsls	r3, r3, #15
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	7812      	ldrb	r2, [r2, #0]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d3e5      	bcc.n	800a788 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a7bc:	8a7b      	ldrh	r3, [r7, #18]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	371c      	adds	r7, #28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a7d6:	e01b      	b.n	800a810 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a7d8:	89bb      	ldrh	r3, [r7, #12]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f004 f8ae 	bl	800e93c <ff_wtoupper>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a7e4:	89fb      	ldrh	r3, [r7, #14]
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	0852      	lsrs	r2, r2, #1
 800a7ea:	03db      	lsls	r3, r3, #15
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	89bb      	ldrh	r3, [r7, #12]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	4413      	add	r3, r2
 800a7f8:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a7fa:	89fb      	ldrh	r3, [r7, #14]
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	0852      	lsrs	r2, r2, #1
 800a800:	03db      	lsls	r3, r3, #15
 800a802:	4313      	orrs	r3, r2
 800a804:	b29a      	uxth	r2, r3
 800a806:	89bb      	ldrh	r3, [r7, #12]
 800a808:	0a1b      	lsrs	r3, r3, #8
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	4413      	add	r3, r2
 800a80e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	1c9a      	adds	r2, r3, #2
 800a814:	607a      	str	r2, [r7, #4]
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	81bb      	strh	r3, [r7, #12]
 800a81a:	89bb      	ldrh	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1db      	bne.n	800a7d8 <xname_sum+0xe>
	}
	return sum;
 800a820:	89fb      	ldrh	r3, [r7, #14]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <xsum32>:
static
DWORD xsum32 (
	BYTE  dat,	/* Data to be sumed */
	DWORD sum	/* Previous value */
)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	4603      	mov	r3, r0
 800a832:	6039      	str	r1, [r7, #0]
 800a834:	71fb      	strb	r3, [r7, #7]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	ea4f 0273 	mov.w	r2, r3, ror #1
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	4413      	add	r3, r2
 800a840:	603b      	str	r3, [r7, #0]
	return sum;
 800a842:	683b      	ldr	r3, [r7, #0]
}
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a85e:	2340      	movs	r3, #64	@ 0x40
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	2300      	movs	r3, #0
 800a864:	60fb      	str	r3, [r7, #12]
 800a866:	e03a      	b.n	800a8de <get_xdir_info+0x8e>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	f003 031f 	and.w	r3, r3, #31
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d102      	bne.n	800a878 <get_xdir_info+0x28>
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	3302      	adds	r3, #2
 800a876:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	4413      	add	r3, r2
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe f964 	bl	8008b4c <ld_word>
 800a884:	4603      	mov	r3, r0
 800a886:	2100      	movs	r1, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f003 fff9 	bl	800e880 <ff_convert>
 800a88e:	4603      	mov	r3, r0
 800a890:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
 800a892:	897b      	ldrh	r3, [r7, #10]
 800a894:	2bff      	cmp	r3, #255	@ 0xff
 800a896:	d90a      	bls.n	800a8ae <get_xdir_info+0x5e>
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
 800a898:	897b      	ldrh	r3, [r7, #10]
 800a89a:	0a1b      	lsrs	r3, r3, #8
 800a89c:	b299      	uxth	r1, r3
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	617a      	str	r2, [r7, #20]
 800a8a4:	b2c9      	uxtb	r1, r1
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	460a      	mov	r2, r1
 800a8ac:	769a      	strb	r2, [r3, #26]
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800a8ae:	897b      	ldrh	r3, [r7, #10]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <get_xdir_info+0x6a>
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2bfe      	cmp	r3, #254	@ 0xfe
 800a8b8:	d902      	bls.n	800a8c0 <get_xdir_info+0x70>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
 800a8be:	e015      	b.n	800a8ec <get_xdir_info+0x9c>
		fno->fname[di++] = (char)w;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	617a      	str	r2, [r7, #20]
 800a8c6:	897a      	ldrh	r2, [r7, #10]
 800a8c8:	b2d1      	uxtb	r1, r2
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	460a      	mov	r2, r1
 800a8d0:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	3302      	adds	r3, #2
 800a8d6:	613b      	str	r3, [r7, #16]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3323      	adds	r3, #35	@ 0x23
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d3bd      	bcc.n	800a868 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d106      	bne.n	800a900 <get_xdir_info+0xb0>
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	617a      	str	r2, [r7, #20]
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	223f      	movs	r2, #63	@ 0x3f
 800a8fe:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	4413      	add	r3, r2
 800a906:	331a      	adds	r3, #26
 800a908:	2200      	movs	r2, #0
 800a90a:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2200      	movs	r2, #0
 800a910:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	791a      	ldrb	r2, [r3, #4]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	7b1b      	ldrb	r3, [r3, #12]
 800a91e:	f003 0310 	and.w	r3, r3, #16
 800a922:	2b00      	cmp	r3, #0
 800a924:	d107      	bne.n	800a936 <get_xdir_info+0xe6>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	3338      	adds	r3, #56	@ 0x38
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe f94a 	bl	8008bc4 <ld_qword>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	e003      	b.n	800a93e <get_xdir_info+0xee>
 800a936:	f04f 0200 	mov.w	r2, #0
 800a93a:	f04f 0300 	mov.w	r3, #0
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	330c      	adds	r3, #12
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe f8ff 	bl	8008b4c <ld_word>
 800a94e:	4603      	mov	r3, r0
 800a950:	461a      	mov	r2, r3
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	330e      	adds	r3, #14
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe f8f6 	bl	8008b4c <ld_word>
 800a960:	4603      	mov	r3, r0
 800a962:	461a      	mov	r2, r3
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	811a      	strh	r2, [r3, #8]
}
 800a968:	bf00      	nop
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a970:	b590      	push	{r4, r7, lr}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a988:	4619      	mov	r1, r3
 800a98a:	4610      	mov	r0, r2
 800a98c:	f7fe fcf2 	bl	8009374 <move_window>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <load_xdir+0x2e>
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	e09f      	b.n	800aade <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b85      	cmp	r3, #133	@ 0x85
 800a9a6:	d001      	beq.n	800a9ac <load_xdir+0x3c>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	e098      	b.n	800aade <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6938      	ldr	r0, [r7, #16]
 800a9b6:	f7fe faaf 	bl	8008f18 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	015b      	lsls	r3, r3, #5
 800a9c4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	2b5f      	cmp	r3, #95	@ 0x5f
 800a9ca:	d903      	bls.n	800a9d4 <load_xdir+0x64>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a9d2:	d901      	bls.n	800a9d8 <load_xdir+0x68>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	e082      	b.n	800aade <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800a9d8:	2100      	movs	r1, #0
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff fb53 	bl	800a086 <dir_next>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <load_xdir+0x7e>
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	e077      	b.n	800aade <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	f7fe fcbb 	bl	8009374 <move_window>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800aa02:	7bfb      	ldrb	r3, [r7, #15]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <load_xdir+0x9c>
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	e068      	b.n	800aade <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa14:	d001      	beq.n	800aa1a <load_xdir+0xaa>
 800aa16:	2302      	movs	r3, #2
 800aa18:	e061      	b.n	800aade <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f103 0020 	add.w	r0, r3, #32
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa24:	2220      	movs	r2, #32
 800aa26:	4619      	mov	r1, r3
 800aa28:	f7fe fa76 	bl	8008f18 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	3323      	adds	r3, #35	@ 0x23
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	332c      	adds	r3, #44	@ 0x2c
 800aa34:	4a2c      	ldr	r2, [pc, #176]	@ (800aae8 <load_xdir+0x178>)
 800aa36:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3a:	08db      	lsrs	r3, r3, #3
 800aa3c:	015b      	lsls	r3, r3, #5
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d201      	bcs.n	800aa48 <load_xdir+0xd8>
 800aa44:	2302      	movs	r3, #2
 800aa46:	e04a      	b.n	800aade <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800aa48:	2340      	movs	r3, #64	@ 0x40
 800aa4a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7ff fb19 	bl	800a086 <dir_next>
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <load_xdir+0xf2>
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	e03d      	b.n	800aade <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f7fe fc81 	bl	8009374 <move_window>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <load_xdir+0x110>
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	e02e      	b.n	800aade <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2bc1      	cmp	r3, #193	@ 0xc1
 800aa88:	d001      	beq.n	800aa8e <load_xdir+0x11e>
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	e027      	b.n	800aade <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800aa94:	d208      	bcs.n	800aaa8 <load_xdir+0x138>
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	18d0      	adds	r0, r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	f7fe fa38 	bl	8008f18 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	3320      	adds	r3, #32
 800aaac:	617b      	str	r3, [r7, #20]
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d3ca      	bcc.n	800aa4c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800aabc:	d80e      	bhi.n	800aadc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800aabe:	6938      	ldr	r0, [r7, #16]
 800aac0:	f7ff fe53 	bl	800a76a <xdir_sum>
 800aac4:	4603      	mov	r3, r0
 800aac6:	461c      	mov	r4, r3
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	3302      	adds	r3, #2
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe f83d 	bl	8008b4c <ld_word>
 800aad2:	4603      	mov	r3, r0
 800aad4:	429c      	cmp	r4, r3
 800aad6:	d001      	beq.n	800aadc <load_xdir+0x16c>
 800aad8:	2302      	movs	r3, #2
 800aada:	e000      	b.n	800aade <load_xdir+0x16e>
	}
	return FR_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd90      	pop	{r4, r7, pc}
 800aae6:	bf00      	nop
 800aae8:	88888889 	.word	0x88888889

0800aaec <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800aaec:	b5b0      	push	{r4, r5, r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6808      	ldr	r0, [r1, #0]
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6a08      	ldr	r0, [r1, #32]
 800ab02:	6879      	ldr	r1, [r7, #4]
 800ab04:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800ab0a:	b2c8      	uxtb	r0, r1
 800ab0c:	6879      	ldr	r1, [r7, #4]
 800ab0e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800ab14:	2000      	movs	r0, #0
 800ab16:	460c      	mov	r4, r1
 800ab18:	4605      	mov	r5, r0
 800ab1a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800ab1e:	2300      	movs	r3, #0
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff fa20 	bl	8009f7a <dir_sdi>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d104      	bne.n	800ab4e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff ff13 	bl	800a970 <load_xdir>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bdb0      	pop	{r4, r5, r7, pc}

0800ab58 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800ab58:	b590      	push	{r4, r7, lr}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	1c9c      	adds	r4, r3, #2
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7ff fdfc 	bl	800a76a <xdir_sum>
 800ab72:	4603      	mov	r3, r0
 800ab74:	4619      	mov	r1, r3
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7fe f8ff 	bl	8008d7a <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	3301      	adds	r3, #1
 800ab84:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff f9f4 	bl	8009f7a <dir_sdi>
 800ab92:	4603      	mov	r3, r0
 800ab94:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ab96:	e026      	b.n	800abe6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba0:	4619      	mov	r1, r3
 800aba2:	4610      	mov	r0, r2
 800aba4:	f7fe fbe6 	bl	8009374 <move_window>
 800aba8:	4603      	mov	r3, r0
 800abaa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800abac:	7dfb      	ldrb	r3, [r7, #23]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d11d      	bne.n	800abee <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb6:	2220      	movs	r2, #32
 800abb8:	68f9      	ldr	r1, [r7, #12]
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe f9ac 	bl	8008f18 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2201      	movs	r2, #1
 800abc6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	3b01      	subs	r3, #1
 800abcc:	613b      	str	r3, [r7, #16]
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00e      	beq.n	800abf2 <store_xdir+0x9a>
		dirb += SZDIRE;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3320      	adds	r3, #32
 800abd8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800abda:	2100      	movs	r1, #0
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7ff fa52 	bl	800a086 <dir_next>
 800abe2:	4603      	mov	r3, r0
 800abe4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0d5      	beq.n	800ab98 <store_xdir+0x40>
 800abec:	e002      	b.n	800abf4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800abee:	bf00      	nop
 800abf0:	e000      	b.n	800abf4 <store_xdir+0x9c>
		if (--nent == 0) break;
 800abf2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <store_xdir+0xa8>
 800abfa:	7dfb      	ldrb	r3, [r7, #23]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d101      	bne.n	800ac04 <store_xdir+0xac>
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	e000      	b.n	800ac06 <store_xdir+0xae>
 800ac04:	2302      	movs	r3, #2
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	371c      	adds	r7, #28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd90      	pop	{r4, r7, pc}

0800ac0e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ac0e:	b590      	push	{r4, r7, lr}
 800ac10:	b085      	sub	sp, #20
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800ac18:	2240      	movs	r2, #64	@ 0x40
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7fe f99c 	bl	8008f5a <mem_set>
	dirb[XDIR_Type] = 0x85;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2285      	movs	r2, #133	@ 0x85
 800ac26:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3320      	adds	r3, #32
 800ac2c:	22c0      	movs	r2, #192	@ 0xc0
 800ac2e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800ac30:	2300      	movs	r3, #0
 800ac32:	72bb      	strb	r3, [r7, #10]
 800ac34:	2301      	movs	r3, #1
 800ac36:	72fb      	strb	r3, [r7, #11]
 800ac38:	2301      	movs	r3, #1
 800ac3a:	813b      	strh	r3, [r7, #8]
 800ac3c:	2340      	movs	r3, #64	@ 0x40
 800ac3e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	60fa      	str	r2, [r7, #12]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	4413      	add	r3, r2
 800ac4a:	22c1      	movs	r2, #193	@ 0xc1
 800ac4c:	701a      	strb	r2, [r3, #0]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	60fa      	str	r2, [r7, #12]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	4413      	add	r3, r2
 800ac58:	2200      	movs	r2, #0
 800ac5a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800ac5c:	893b      	ldrh	r3, [r7, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00b      	beq.n	800ac7a <create_xdir+0x6c>
 800ac62:	7abb      	ldrb	r3, [r7, #10]
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	4413      	add	r3, r2
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	813b      	strh	r3, [r7, #8]
 800ac6e:	893b      	ldrh	r3, [r7, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <create_xdir+0x6c>
 800ac74:	7abb      	ldrb	r3, [r7, #10]
 800ac76:	3301      	adds	r3, #1
 800ac78:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	893a      	ldrh	r2, [r7, #8]
 800ac82:	4611      	mov	r1, r2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe f878 	bl	8008d7a <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f003 031f 	and.w	r3, r3, #31
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e0      	bne.n	800ac5c <create_xdir+0x4e>
		nb++;
 800ac9a:	7afb      	ldrb	r3, [r7, #11]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800aca0:	7abb      	ldrb	r3, [r7, #10]
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	4413      	add	r3, r2
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1c8      	bne.n	800ac40 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	3323      	adds	r3, #35	@ 0x23
 800acb2:	7aba      	ldrb	r2, [r7, #10]
 800acb4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	3301      	adds	r3, #1
 800acba:	7afa      	ldrb	r2, [r7, #11]
 800acbc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800acc4:	6838      	ldr	r0, [r7, #0]
 800acc6:	f7ff fd80 	bl	800a7ca <xname_sum>
 800acca:	4603      	mov	r3, r0
 800accc:	4619      	mov	r1, r3
 800acce:	4620      	mov	r0, r4
 800acd0:	f7fe f853 	bl	8008d7a <st_word>
}
 800acd4:	bf00      	nop
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd90      	pop	{r4, r7, pc}

0800acdc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ace6:	2304      	movs	r3, #4
 800ace8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800acf0:	23ff      	movs	r3, #255	@ 0xff
 800acf2:	757b      	strb	r3, [r7, #21]
 800acf4:	23ff      	movs	r3, #255	@ 0xff
 800acf6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800acf8:	e09f      	b.n	800ae3a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfe:	4619      	mov	r1, r3
 800ad00:	6938      	ldr	r0, [r7, #16]
 800ad02:	f7fe fb37 	bl	8009374 <move_window>
 800ad06:	4603      	mov	r3, r0
 800ad08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad0a:	7dfb      	ldrb	r3, [r7, #23]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f040 809a 	bne.w	800ae46 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ad1a:	7dbb      	ldrb	r3, [r7, #22]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d102      	bne.n	800ad26 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ad20:	2304      	movs	r3, #4
 800ad22:	75fb      	strb	r3, [r7, #23]
 800ad24:	e096      	b.n	800ae54 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	2b04      	cmp	r3, #4
 800ad2c:	d118      	bne.n	800ad60 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ad2e:	7dbb      	ldrb	r3, [r7, #22]
 800ad30:	2b85      	cmp	r3, #133	@ 0x85
 800ad32:	d179      	bne.n	800ae28 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff fe17 	bl	800a970 <load_xdir>
 800ad42:	4603      	mov	r3, r0
 800ad44:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d17e      	bne.n	800ae4a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	3304      	adds	r3, #4
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ad5e:	e074      	b.n	800ae4a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad64:	330b      	adds	r3, #11
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad6c:	73fb      	strb	r3, [r7, #15]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	7bfa      	ldrb	r2, [r7, #15]
 800ad72:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ad74:	7dbb      	ldrb	r3, [r7, #22]
 800ad76:	2be5      	cmp	r3, #229	@ 0xe5
 800ad78:	d00e      	beq.n	800ad98 <dir_read+0xbc>
 800ad7a:	7dbb      	ldrb	r3, [r7, #22]
 800ad7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad7e:	d00b      	beq.n	800ad98 <dir_read+0xbc>
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	f023 0320 	bic.w	r3, r3, #32
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	bf0c      	ite	eq
 800ad8a:	2301      	moveq	r3, #1
 800ad8c:	2300      	movne	r3, #0
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	461a      	mov	r2, r3
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d002      	beq.n	800ad9e <dir_read+0xc2>
				ord = 0xFF;
 800ad98:	23ff      	movs	r3, #255	@ 0xff
 800ad9a:	757b      	strb	r3, [r7, #21]
 800ad9c:	e044      	b.n	800ae28 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	2b0f      	cmp	r3, #15
 800ada2:	d12f      	bne.n	800ae04 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ada4:	7dbb      	ldrb	r3, [r7, #22]
 800ada6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00d      	beq.n	800adca <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adb2:	7b5b      	ldrb	r3, [r3, #13]
 800adb4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800adb6:	7dbb      	ldrb	r3, [r7, #22]
 800adb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adbc:	75bb      	strb	r3, [r7, #22]
 800adbe:	7dbb      	ldrb	r3, [r7, #22]
 800adc0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800adca:	7dba      	ldrb	r2, [r7, #22]
 800adcc:	7d7b      	ldrb	r3, [r7, #21]
 800adce:	429a      	cmp	r2, r3
 800add0:	d115      	bne.n	800adfe <dir_read+0x122>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800add6:	330d      	adds	r3, #13
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	7d3a      	ldrb	r2, [r7, #20]
 800addc:	429a      	cmp	r2, r3
 800adde:	d10e      	bne.n	800adfe <dir_read+0x122>
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ade8:	4619      	mov	r1, r3
 800adea:	4610      	mov	r0, r2
 800adec:	f7ff fb2c 	bl	800a448 <pick_lfn>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <dir_read+0x122>
 800adf6:	7d7b      	ldrb	r3, [r7, #21]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	e000      	b.n	800ae00 <dir_read+0x124>
 800adfe:	23ff      	movs	r3, #255	@ 0xff
 800ae00:	757b      	strb	r3, [r7, #21]
 800ae02:	e011      	b.n	800ae28 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ae04:	7d7b      	ldrb	r3, [r7, #21]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d109      	bne.n	800ae1e <dir_read+0x142>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff fc8a 	bl	800a728 <sum_sfn>
 800ae14:	4603      	mov	r3, r0
 800ae16:	461a      	mov	r2, r3
 800ae18:	7d3b      	ldrb	r3, [r7, #20]
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d017      	beq.n	800ae4e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800ae26:	e012      	b.n	800ae4e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ae28:	2100      	movs	r1, #0
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7ff f92b 	bl	800a086 <dir_next>
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10b      	bne.n	800ae52 <dir_read+0x176>
	while (dp->sect) {
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f47f af5b 	bne.w	800acfa <dir_read+0x1e>
 800ae44:	e006      	b.n	800ae54 <dir_read+0x178>
		if (res != FR_OK) break;
 800ae46:	bf00      	nop
 800ae48:	e004      	b.n	800ae54 <dir_read+0x178>
					break;
 800ae4a:	bf00      	nop
 800ae4c:	e002      	b.n	800ae54 <dir_read+0x178>
					break;
 800ae4e:	bf00      	nop
 800ae50:	e000      	b.n	800ae54 <dir_read+0x178>
		if (res != FR_OK) break;
 800ae52:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <dir_read+0x184>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae6a:	b590      	push	{r4, r7, lr}
 800ae6c:	b089      	sub	sp, #36	@ 0x24
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae78:	2100      	movs	r1, #0
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff f87d 	bl	8009f7a <dir_sdi>
 800ae80:	4603      	mov	r3, r0
 800ae82:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800ae84:	7ffb      	ldrb	r3, [r7, #31]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <dir_find+0x24>
 800ae8a:	7ffb      	ldrb	r3, [r7, #31]
 800ae8c:	e113      	b.n	800b0b6 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2b04      	cmp	r3, #4
 800ae94:	d165      	bne.n	800af62 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7ff fc95 	bl	800a7ca <xname_sum>
 800aea0:	4603      	mov	r3, r0
 800aea2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800aea4:	e050      	b.n	800af48 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	3324      	adds	r3, #36	@ 0x24
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fd fe4d 	bl	8008b4c <ld_word>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	893b      	ldrh	r3, [r7, #8]
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d144      	bne.n	800af46 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800aec4:	76fb      	strb	r3, [r7, #27]
 800aec6:	2340      	movs	r3, #64	@ 0x40
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	2300      	movs	r3, #0
 800aecc:	613b      	str	r3, [r7, #16]
 800aece:	e029      	b.n	800af24 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	f003 031f 	and.w	r3, r3, #31
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <dir_find+0x76>
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	3302      	adds	r3, #2
 800aede:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	691a      	ldr	r2, [r3, #16]
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	4413      	add	r3, r2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fd fe2f 	bl	8008b4c <ld_word>
 800aeee:	4603      	mov	r3, r0
 800aef0:	4618      	mov	r0, r3
 800aef2:	f003 fd23 	bl	800e93c <ff_wtoupper>
 800aef6:	4603      	mov	r3, r0
 800aef8:	461c      	mov	r4, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	4413      	add	r3, r2
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f003 fd18 	bl	800e93c <ff_wtoupper>
 800af0c:	4603      	mov	r3, r0
 800af0e:	429c      	cmp	r4, r3
 800af10:	d10c      	bne.n	800af2c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800af12:	7efb      	ldrb	r3, [r7, #27]
 800af14:	3b01      	subs	r3, #1
 800af16:	76fb      	strb	r3, [r7, #27]
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	3302      	adds	r3, #2
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	3301      	adds	r3, #1
 800af22:	613b      	str	r3, [r7, #16]
 800af24:	7efb      	ldrb	r3, [r7, #27]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1d2      	bne.n	800aed0 <dir_find+0x66>
 800af2a:	e000      	b.n	800af2e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800af2c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800af2e:	7efb      	ldrb	r3, [r7, #27]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d109      	bne.n	800af48 <dir_find+0xde>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68da      	ldr	r2, [r3, #12]
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	005b      	lsls	r3, r3, #1
 800af3c:	4413      	add	r3, r2
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00b      	beq.n	800af5c <dir_find+0xf2>
 800af44:	e000      	b.n	800af48 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800af46:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800af48:	2100      	movs	r1, #0
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff fec6 	bl	800acdc <dir_read>
 800af50:	4603      	mov	r3, r0
 800af52:	77fb      	strb	r3, [r7, #31]
 800af54:	7ffb      	ldrb	r3, [r7, #31]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0a5      	beq.n	800aea6 <dir_find+0x3c>
 800af5a:	e000      	b.n	800af5e <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800af5c:	bf00      	nop
		}
		return res;
 800af5e:	7ffb      	ldrb	r3, [r7, #31]
 800af60:	e0a9      	b.n	800b0b6 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af62:	23ff      	movs	r3, #255	@ 0xff
 800af64:	773b      	strb	r3, [r7, #28]
 800af66:	7f3b      	ldrb	r3, [r7, #28]
 800af68:	777b      	strb	r3, [r7, #29]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f04f 32ff 	mov.w	r2, #4294967295
 800af70:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af76:	4619      	mov	r1, r3
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f7fe f9fb 	bl	8009374 <move_window>
 800af7e:	4603      	mov	r3, r0
 800af80:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800af82:	7ffb      	ldrb	r3, [r7, #31]
 800af84:	2b00      	cmp	r3, #0
 800af86:	f040 8090 	bne.w	800b0aa <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af92:	7fbb      	ldrb	r3, [r7, #30]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <dir_find+0x134>
 800af98:	2304      	movs	r3, #4
 800af9a:	77fb      	strb	r3, [r7, #31]
 800af9c:	e08a      	b.n	800b0b4 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa2:	330b      	adds	r3, #11
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afaa:	72fb      	strb	r3, [r7, #11]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7afa      	ldrb	r2, [r7, #11]
 800afb0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800afb2:	7fbb      	ldrb	r3, [r7, #30]
 800afb4:	2be5      	cmp	r3, #229	@ 0xe5
 800afb6:	d007      	beq.n	800afc8 <dir_find+0x15e>
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d009      	beq.n	800afd6 <dir_find+0x16c>
 800afc2:	7afb      	ldrb	r3, [r7, #11]
 800afc4:	2b0f      	cmp	r3, #15
 800afc6:	d006      	beq.n	800afd6 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afc8:	23ff      	movs	r3, #255	@ 0xff
 800afca:	777b      	strb	r3, [r7, #29]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f04f 32ff 	mov.w	r2, #4294967295
 800afd2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800afd4:	e05e      	b.n	800b094 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800afd6:	7afb      	ldrb	r3, [r7, #11]
 800afd8:	2b0f      	cmp	r3, #15
 800afda:	d136      	bne.n	800b04a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800afe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d154      	bne.n	800b094 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800afea:	7fbb      	ldrb	r3, [r7, #30]
 800afec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00d      	beq.n	800b010 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff8:	7b5b      	ldrb	r3, [r3, #13]
 800affa:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800affc:	7fbb      	ldrb	r3, [r7, #30]
 800affe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b002:	77bb      	strb	r3, [r7, #30]
 800b004:	7fbb      	ldrb	r3, [r7, #30]
 800b006:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b010:	7fba      	ldrb	r2, [r7, #30]
 800b012:	7f7b      	ldrb	r3, [r7, #29]
 800b014:	429a      	cmp	r2, r3
 800b016:	d115      	bne.n	800b044 <dir_find+0x1da>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b01c:	330d      	adds	r3, #13
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	7f3a      	ldrb	r2, [r7, #28]
 800b022:	429a      	cmp	r2, r3
 800b024:	d10e      	bne.n	800b044 <dir_find+0x1da>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	68da      	ldr	r2, [r3, #12]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7ff f999 	bl	800a368 <cmp_lfn>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <dir_find+0x1da>
 800b03c:	7f7b      	ldrb	r3, [r7, #29]
 800b03e:	3b01      	subs	r3, #1
 800b040:	b2db      	uxtb	r3, r3
 800b042:	e000      	b.n	800b046 <dir_find+0x1dc>
 800b044:	23ff      	movs	r3, #255	@ 0xff
 800b046:	777b      	strb	r3, [r7, #29]
 800b048:	e024      	b.n	800b094 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b04a:	7f7b      	ldrb	r3, [r7, #29]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d109      	bne.n	800b064 <dir_find+0x1fa>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff fb67 	bl	800a728 <sum_sfn>
 800b05a:	4603      	mov	r3, r0
 800b05c:	461a      	mov	r2, r3
 800b05e:	7f3b      	ldrb	r3, [r7, #28]
 800b060:	4293      	cmp	r3, r2
 800b062:	d024      	beq.n	800b0ae <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <dir_find+0x21e>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	3340      	adds	r3, #64	@ 0x40
 800b07a:	220b      	movs	r2, #11
 800b07c:	4619      	mov	r1, r3
 800b07e:	f7fd ff87 	bl	8008f90 <mem_cmp>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d014      	beq.n	800b0b2 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b088:	23ff      	movs	r3, #255	@ 0xff
 800b08a:	777b      	strb	r3, [r7, #29]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f04f 32ff 	mov.w	r2, #4294967295
 800b092:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b094:	2100      	movs	r1, #0
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7fe fff5 	bl	800a086 <dir_next>
 800b09c:	4603      	mov	r3, r0
 800b09e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b0a0:	7ffb      	ldrb	r3, [r7, #31]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f43f af65 	beq.w	800af72 <dir_find+0x108>
 800b0a8:	e004      	b.n	800b0b4 <dir_find+0x24a>
		if (res != FR_OK) break;
 800b0aa:	bf00      	nop
 800b0ac:	e002      	b.n	800b0b4 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b0ae:	bf00      	nop
 800b0b0:	e000      	b.n	800b0b4 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0b2:	bf00      	nop

	return res;
 800b0b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3724      	adds	r7, #36	@ 0x24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
	...

0800b0c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b0c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b0c4:	b0a0      	sub	sp, #128	@ 0x80
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b0d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <dir_register+0x22>
 800b0de:	2306      	movs	r3, #6
 800b0e0:	e18e      	b.n	800b400 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	677b      	str	r3, [r7, #116]	@ 0x74
 800b0e6:	e002      	b.n	800b0ee <dir_register+0x2e>
 800b0e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	677b      	str	r3, [r7, #116]	@ 0x74
 800b0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	4413      	add	r3, r2
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1f4      	bne.n	800b0e8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b0fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b04      	cmp	r3, #4
 800b104:	f040 809f 	bne.w	800b246 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b10a:	330e      	adds	r3, #14
 800b10c:	4aa2      	ldr	r2, [pc, #648]	@ (800b398 <dir_register+0x2d8>)
 800b10e:	fba2 2303 	umull	r2, r3, r2, r3
 800b112:	08db      	lsrs	r3, r3, #3
 800b114:	3302      	adds	r3, #2
 800b116:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b118:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff f888 	bl	800a230 <dir_alloc>
 800b120:	4603      	mov	r3, r0
 800b122:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800b126:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <dir_register+0x74>
 800b12e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b132:	e165      	b.n	800b400 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b13a:	3b01      	subs	r3, #1
 800b13c:	015b      	lsls	r3, r3, #5
 800b13e:	1ad2      	subs	r2, r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d072      	beq.n	800b232 <dir_register+0x172>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	79db      	ldrb	r3, [r3, #7]
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	d06c      	beq.n	800b232 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b15e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b160:	8949      	ldrh	r1, [r1, #10]
 800b162:	0249      	lsls	r1, r1, #9
 800b164:	2000      	movs	r0, #0
 800b166:	460c      	mov	r4, r1
 800b168:	4605      	mov	r5, r0
 800b16a:	eb12 0804 	adds.w	r8, r2, r4
 800b16e:	eb43 0905 	adc.w	r9, r3, r5
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fca4 	bl	8009ac8 <fill_first_frag>
 800b180:	4603      	mov	r3, r0
 800b182:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b186:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d002      	beq.n	800b194 <dir_register+0xd4>
 800b18e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b192:	e135      	b.n	800b400 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b19a:	f04f 32ff 	mov.w	r2, #4294967295
 800b19e:	4619      	mov	r1, r3
 800b1a0:	f7fe fcc1 	bl	8009b26 <fill_last_frag>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b1aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d002      	beq.n	800b1b8 <dir_register+0xf8>
 800b1b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1b6:	e123      	b.n	800b400 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fc93 	bl	800aaec <load_obj_dir>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b1cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <dir_register+0x11a>
 800b1d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1d8:	e112      	b.n	800b400 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b1da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	f7fd fe0d 	bl	8008e08 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b1ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	f7fd fe03 	bl	8008e08 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	79da      	ldrb	r2, [r3, #7]
 800b206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	3321      	adds	r3, #33	@ 0x21
 800b20c:	f042 0201 	orr.w	r2, r2, #1
 800b210:	b2d2      	uxtb	r2, r2
 800b212:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b214:	f107 0308 	add.w	r3, r7, #8
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff fc9d 	bl	800ab58 <store_xdir>
 800b21e:	4603      	mov	r3, r0
 800b220:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b224:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <dir_register+0x172>
 800b22c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b230:	e0e6      	b.n	800b400 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b234:	691a      	ldr	r2, [r3, #16]
 800b236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	4619      	mov	r1, r3
 800b23c:	4610      	mov	r0, r2
 800b23e:	f7ff fce6 	bl	800ac0e <create_xdir>
		return FR_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	e0dc      	b.n	800b400 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b24c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b250:	220c      	movs	r2, #12
 800b252:	4618      	mov	r0, r3
 800b254:	f7fd fe60 	bl	8008f18 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b258:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	2b00      	cmp	r3, #0
 800b262:	d033      	beq.n	800b2cc <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2240      	movs	r2, #64	@ 0x40
 800b268:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800b26c:	2301      	movs	r3, #1
 800b26e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b270:	e016      	b.n	800b2a0 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800b278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b27a:	68da      	ldr	r2, [r3, #12]
 800b27c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800b280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b282:	f7ff f9ad 	bl	800a5e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff fdef 	bl	800ae6a <dir_find>
 800b28c:	4603      	mov	r3, r0
 800b28e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800b292:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b296:	2b00      	cmp	r3, #0
 800b298:	d106      	bne.n	800b2a8 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800b29a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b29c:	3301      	adds	r3, #1
 800b29e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b2a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2a2:	2b63      	cmp	r3, #99	@ 0x63
 800b2a4:	d9e5      	bls.n	800b272 <dir_register+0x1b2>
 800b2a6:	e000      	b.n	800b2aa <dir_register+0x1ea>
			if (res != FR_OK) break;
 800b2a8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b2aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2ac:	2b64      	cmp	r3, #100	@ 0x64
 800b2ae:	d101      	bne.n	800b2b4 <dir_register+0x1f4>
 800b2b0:	2307      	movs	r3, #7
 800b2b2:	e0a5      	b.n	800b400 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b2b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d002      	beq.n	800b2c2 <dir_register+0x202>
 800b2bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b2c0:	e09e      	b.n	800b400 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b2c2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b2cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b2d0:	f003 0302 	and.w	r3, r3, #2
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d007      	beq.n	800b2e8 <dir_register+0x228>
 800b2d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2da:	330c      	adds	r3, #12
 800b2dc:	4a2f      	ldr	r2, [pc, #188]	@ (800b39c <dir_register+0x2dc>)
 800b2de:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e2:	089b      	lsrs	r3, r3, #2
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	e000      	b.n	800b2ea <dir_register+0x22a>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b2ec:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7fe ff9e 	bl	800a230 <dir_alloc>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b2fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d14f      	bne.n	800b3a2 <dir_register+0x2e2>
 800b302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b304:	3b01      	subs	r3, #1
 800b306:	673b      	str	r3, [r7, #112]	@ 0x70
 800b308:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d049      	beq.n	800b3a2 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b314:	015b      	lsls	r3, r3, #5
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7fe fe2d 	bl	8009f7a <dir_sdi>
 800b320:	4603      	mov	r3, r0
 800b322:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b326:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d139      	bne.n	800b3a2 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	3340      	adds	r3, #64	@ 0x40
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff f9f8 	bl	800a728 <sum_sfn>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b342:	4619      	mov	r1, r3
 800b344:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b346:	f7fe f815 	bl	8009374 <move_window>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800b350:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b354:	2b00      	cmp	r3, #0
 800b356:	d123      	bne.n	800b3a0 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b35a:	68d8      	ldr	r0, [r3, #12]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b360:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b362:	b2da      	uxtb	r2, r3
 800b364:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800b368:	f7ff f8d2 	bl	800a510 <put_lfn>
				fs->wflag = 1;
 800b36c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b36e:	2201      	movs	r2, #1
 800b370:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b372:	2100      	movs	r1, #0
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7fe fe86 	bl	800a086 <dir_next>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800b380:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10c      	bne.n	800b3a2 <dir_register+0x2e2>
 800b388:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b38a:	3b01      	subs	r3, #1
 800b38c:	673b      	str	r3, [r7, #112]	@ 0x70
 800b38e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1d4      	bne.n	800b33e <dir_register+0x27e>
 800b394:	e005      	b.n	800b3a2 <dir_register+0x2e2>
 800b396:	bf00      	nop
 800b398:	88888889 	.word	0x88888889
 800b39c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b3a0:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b3a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d128      	bne.n	800b3fc <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b3b2:	f7fd ffdf 	bl	8009374 <move_window>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b3bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d11b      	bne.n	800b3fc <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c8:	2220      	movs	r2, #32
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fd fdc4 	bl	8008f5a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3340      	adds	r3, #64	@ 0x40
 800b3da:	220b      	movs	r2, #11
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f7fd fd9b 	bl	8008f18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ec:	330c      	adds	r3, #12
 800b3ee:	f002 0218 	and.w	r2, r2, #24
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b3f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b3fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b400:	4618      	mov	r0, r3
 800b402:	3780      	adds	r7, #128	@ 0x80
 800b404:	46bd      	mov	sp, r7
 800b406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b40a:	bf00      	nop

0800b40c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b40c:	b5b0      	push	{r4, r5, r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2200      	movs	r2, #0
 800b420:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b426:	2b00      	cmp	r3, #0
 800b428:	f000 80e7 	beq.w	800b5fa <get_fileinfo+0x1ee>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b04      	cmp	r3, #4
 800b432:	d106      	bne.n	800b442 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff fa08 	bl	800a850 <get_xdir_info>
		return;
 800b440:	e0dc      	b.n	800b5fc <get_fileinfo+0x1f0>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44a:	d040      	beq.n	800b4ce <get_fileinfo+0xc2>
			i = j = 0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	61bb      	str	r3, [r7, #24]
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b454:	e029      	b.n	800b4aa <get_fileinfo+0x9e>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b456:	89fb      	ldrh	r3, [r7, #14]
 800b458:	2100      	movs	r1, #0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f003 fa10 	bl	800e880 <ff_convert>
 800b460:	4603      	mov	r3, r0
 800b462:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b464:	89fb      	ldrh	r3, [r7, #14]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d102      	bne.n	800b470 <get_fileinfo+0x64>
 800b46a:	2300      	movs	r3, #0
 800b46c:	61fb      	str	r3, [r7, #28]
 800b46e:	e028      	b.n	800b4c2 <get_fileinfo+0xb6>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800b470:	89fb      	ldrh	r3, [r7, #14]
 800b472:	2bff      	cmp	r3, #255	@ 0xff
 800b474:	d90a      	bls.n	800b48c <get_fileinfo+0x80>
					fno->fname[i++] = (char)(w >> 8);
 800b476:	89fb      	ldrh	r3, [r7, #14]
 800b478:	0a1b      	lsrs	r3, r3, #8
 800b47a:	b299      	uxth	r1, r3
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	61fa      	str	r2, [r7, #28]
 800b482:	b2c9      	uxtb	r1, r1
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	4413      	add	r3, r2
 800b488:	460a      	mov	r2, r1
 800b48a:	769a      	strb	r2, [r3, #26]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b490:	d902      	bls.n	800b498 <get_fileinfo+0x8c>
 800b492:	2300      	movs	r3, #0
 800b494:	61fb      	str	r3, [r7, #28]
 800b496:	e014      	b.n	800b4c2 <get_fileinfo+0xb6>
				fno->fname[i++] = (TCHAR)w;
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	61fa      	str	r2, [r7, #28]
 800b49e:	89fa      	ldrh	r2, [r7, #14]
 800b4a0:	b2d1      	uxtb	r1, r2
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	460a      	mov	r2, r1
 800b4a8:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	1c59      	adds	r1, r3, #1
 800b4b2:	61b9      	str	r1, [r7, #24]
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	4413      	add	r3, r2
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	81fb      	strh	r3, [r7, #14]
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1c9      	bne.n	800b456 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	331a      	adds	r3, #26
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	61bb      	str	r3, [r7, #24]
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	4413      	add	r3, r2
 800b4dc:	331a      	adds	r3, #26
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b4e2:	e04d      	b.n	800b580 <get_fileinfo+0x174>
		c = (TCHAR)dp->dir[i++];
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	1c59      	adds	r1, r3, #1
 800b4ec:	61f9      	str	r1, [r7, #28]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
 800b4f6:	2b20      	cmp	r3, #32
 800b4f8:	d041      	beq.n	800b57e <get_fileinfo+0x172>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	d101      	bne.n	800b504 <get_fileinfo+0xf8>
 800b500:	23e5      	movs	r3, #229	@ 0xe5
 800b502:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	2b09      	cmp	r3, #9
 800b508:	d10f      	bne.n	800b52a <get_fileinfo+0x11e>
			if (!lfv) fno->fname[j] = '.';
 800b50a:	89bb      	ldrh	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d105      	bne.n	800b51c <get_fileinfo+0x110>
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	4413      	add	r3, r2
 800b516:	331a      	adds	r3, #26
 800b518:	222e      	movs	r2, #46	@ 0x2e
 800b51a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	61ba      	str	r2, [r7, #24]
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	4413      	add	r3, r2
 800b526:	222e      	movs	r2, #46	@ 0x2e
 800b528:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	4413      	add	r3, r2
 800b530:	330d      	adds	r3, #13
 800b532:	7dfa      	ldrb	r2, [r7, #23]
 800b534:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b536:	89bb      	ldrh	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d11c      	bne.n	800b576 <get_fileinfo+0x16a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
 800b53e:	2b40      	cmp	r3, #64	@ 0x40
 800b540:	d913      	bls.n	800b56a <get_fileinfo+0x15e>
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b5a      	cmp	r3, #90	@ 0x5a
 800b546:	d810      	bhi.n	800b56a <get_fileinfo+0x15e>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b54c:	330c      	adds	r3, #12
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	2b08      	cmp	r3, #8
 800b556:	d901      	bls.n	800b55c <get_fileinfo+0x150>
 800b558:	2310      	movs	r3, #16
 800b55a:	e000      	b.n	800b55e <get_fileinfo+0x152>
 800b55c:	2308      	movs	r3, #8
 800b55e:	4013      	ands	r3, r2
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <get_fileinfo+0x15e>
				c += 0x20;			/* To lower */
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	3320      	adds	r3, #32
 800b568:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	4413      	add	r3, r2
 800b570:	331a      	adds	r3, #26
 800b572:	7dfa      	ldrb	r2, [r7, #23]
 800b574:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	3301      	adds	r3, #1
 800b57a:	61bb      	str	r3, [r7, #24]
 800b57c:	e000      	b.n	800b580 <get_fileinfo+0x174>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b57e:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	2b0a      	cmp	r3, #10
 800b584:	d9ae      	bls.n	800b4e4 <get_fileinfo+0xd8>
	}
	if (!lfv) {
 800b586:	89bb      	ldrh	r3, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10d      	bne.n	800b5a8 <get_fileinfo+0x19c>
		fno->fname[j] = 0;
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	4413      	add	r3, r2
 800b592:	331a      	adds	r3, #26
 800b594:	2200      	movs	r2, #0
 800b596:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b59c:	330c      	adds	r3, #12
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <get_fileinfo+0x19c>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	330d      	adds	r3, #13
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5b8:	7ada      	ldrb	r2, [r3, #11]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5c2:	331c      	adds	r3, #28
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fd fada 	bl	8008b7e <ld_dword>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	461c      	mov	r4, r3
 800b5d0:	4615      	mov	r5, r2
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5dc:	3316      	adds	r3, #22
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fd facd 	bl	8008b7e <ld_dword>
 800b5e4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	815a      	strh	r2, [r3, #10]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	0c1b      	lsrs	r3, r3, #16
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	811a      	strh	r2, [r3, #8]
 800b5f8:	e000      	b.n	800b5fc <get_fileinfo+0x1f0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b5fa:	bf00      	nop
}
 800b5fc:	3720      	adds	r7, #32
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b604 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b08a      	sub	sp, #40	@ 0x28
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	61ba      	str	r2, [r7, #24]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	4413      	add	r3, r2
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b634:	2b1f      	cmp	r3, #31
 800b636:	d96a      	bls.n	800b70e <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b638:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b63a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b63c:	d006      	beq.n	800b64c <create_name+0x48>
 800b63e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b640:	2b5c      	cmp	r3, #92	@ 0x5c
 800b642:	d110      	bne.n	800b666 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b644:	e002      	b.n	800b64c <create_name+0x48>
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	3301      	adds	r3, #1
 800b64a:	61bb      	str	r3, [r7, #24]
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	4413      	add	r3, r2
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b2f      	cmp	r3, #47	@ 0x2f
 800b656:	d0f6      	beq.n	800b646 <create_name+0x42>
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	4413      	add	r3, r2
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b5c      	cmp	r3, #92	@ 0x5c
 800b662:	d0f0      	beq.n	800b646 <create_name+0x42>
			break;
 800b664:	e054      	b.n	800b710 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2bfe      	cmp	r3, #254	@ 0xfe
 800b66a:	d901      	bls.n	800b670 <create_name+0x6c>
 800b66c:	2306      	movs	r3, #6
 800b66e:	e1bf      	b.n	800b9f0 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b672:	b2db      	uxtb	r3, r3
 800b674:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800b676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b80      	cmp	r3, #128	@ 0x80
 800b67c:	d925      	bls.n	800b6ca <create_name+0xc6>
 800b67e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2bff      	cmp	r3, #255	@ 0xff
 800b684:	d021      	beq.n	800b6ca <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	61ba      	str	r2, [r7, #24]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4413      	add	r3, r2
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800b696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b698:	021b      	lsls	r3, r3, #8
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	4413      	add	r3, r2
 800b6a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800b6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800b6ac:	d903      	bls.n	800b6b6 <create_name+0xb2>
 800b6ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6b2:	2b7e      	cmp	r3, #126	@ 0x7e
 800b6b4:	d909      	bls.n	800b6ca <create_name+0xc6>
 800b6b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	da03      	bge.n	800b6c6 <create_name+0xc2>
 800b6be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6c2:	2bff      	cmp	r3, #255	@ 0xff
 800b6c4:	d101      	bne.n	800b6ca <create_name+0xc6>
 800b6c6:	2306      	movs	r3, #6
 800b6c8:	e192      	b.n	800b9f0 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b6ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f003 f8d6 	bl	800e880 <ff_convert>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b6d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <create_name+0xde>
 800b6de:	2306      	movs	r3, #6
 800b6e0:	e186      	b.n	800b9f0 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b6e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6e4:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6e6:	d809      	bhi.n	800b6fc <create_name+0xf8>
 800b6e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	489a      	ldr	r0, [pc, #616]	@ (800b958 <create_name+0x354>)
 800b6ee:	f7fd fc76 	bl	8008fde <chk_chr>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <create_name+0xf8>
 800b6f8:	2306      	movs	r3, #6
 800b6fa:	e179      	b.n	800b9f0 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	617a      	str	r2, [r7, #20]
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	4413      	add	r3, r2
 800b708:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b70a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b70c:	e78a      	b.n	800b624 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b70e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	441a      	add	r2, r3
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b71a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b71c:	2b1f      	cmp	r3, #31
 800b71e:	d801      	bhi.n	800b724 <create_name+0x120>
 800b720:	2304      	movs	r3, #4
 800b722:	e000      	b.n	800b726 <create_name+0x122>
 800b724:	2300      	movs	r3, #0
 800b726:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b72a:	e011      	b.n	800b750 <create_name+0x14c>
		w = lfn[di - 1];
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b732:	3b01      	subs	r3, #1
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	4413      	add	r3, r2
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b73e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b740:	2b20      	cmp	r3, #32
 800b742:	d002      	beq.n	800b74a <create_name+0x146>
 800b744:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b746:	2b2e      	cmp	r3, #46	@ 0x2e
 800b748:	d106      	bne.n	800b758 <create_name+0x154>
		di--;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1ea      	bne.n	800b72c <create_name+0x128>
 800b756:	e000      	b.n	800b75a <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800b758:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	005b      	lsls	r3, r3, #1
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	4413      	add	r3, r2
 800b762:	2200      	movs	r2, #0
 800b764:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <create_name+0x16c>
 800b76c:	2306      	movs	r3, #6
 800b76e:	e13f      	b.n	800b9f0 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3340      	adds	r3, #64	@ 0x40
 800b774:	220b      	movs	r2, #11
 800b776:	2120      	movs	r1, #32
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fd fbee 	bl	8008f5a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b77e:	2300      	movs	r3, #0
 800b780:	61bb      	str	r3, [r7, #24]
 800b782:	e002      	b.n	800b78a <create_name+0x186>
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	3301      	adds	r3, #1
 800b788:	61bb      	str	r3, [r7, #24]
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4413      	add	r3, r2
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	2b20      	cmp	r3, #32
 800b796:	d0f5      	beq.n	800b784 <create_name+0x180>
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4413      	add	r3, r2
 800b7a0:	881b      	ldrh	r3, [r3, #0]
 800b7a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7a4:	d0ee      	beq.n	800b784 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d009      	beq.n	800b7c0 <create_name+0x1bc>
 800b7ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7b0:	f043 0303 	orr.w	r3, r3, #3
 800b7b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b7b8:	e002      	b.n	800b7c0 <create_name+0x1bc>
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	617b      	str	r3, [r7, #20]
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d009      	beq.n	800b7da <create_name+0x1d6>
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	005b      	lsls	r3, r3, #1
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7d8:	d1ef      	bne.n	800b7ba <create_name+0x1b6>

	i = b = 0; ni = 8;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	623b      	str	r3, [r7, #32]
 800b7e4:	2308      	movs	r3, #8
 800b7e6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	61ba      	str	r2, [r7, #24]
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b7f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 80aa 	beq.w	800b954 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b800:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b802:	2b20      	cmp	r3, #32
 800b804:	d006      	beq.n	800b814 <create_name+0x210>
 800b806:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b808:	2b2e      	cmp	r3, #46	@ 0x2e
 800b80a:	d10a      	bne.n	800b822 <create_name+0x21e>
 800b80c:	69ba      	ldr	r2, [r7, #24]
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	429a      	cmp	r2, r3
 800b812:	d006      	beq.n	800b822 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800b814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b818:	f043 0303 	orr.w	r3, r3, #3
 800b81c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b820:	e097      	b.n	800b952 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b822:	6a3a      	ldr	r2, [r7, #32]
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	429a      	cmp	r2, r3
 800b828:	d203      	bcs.n	800b832 <create_name+0x22e>
 800b82a:	69ba      	ldr	r2, [r7, #24]
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d123      	bne.n	800b87a <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	2b0b      	cmp	r3, #11
 800b836:	d106      	bne.n	800b846 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800b838:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b83c:	f043 0303 	orr.w	r3, r3, #3
 800b840:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b844:	e08d      	b.n	800b962 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b846:	69ba      	ldr	r2, [r7, #24]
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d005      	beq.n	800b85a <create_name+0x256>
 800b84e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b852:	f043 0303 	orr.w	r3, r3, #3
 800b856:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 800b85a:	69ba      	ldr	r2, [r7, #24]
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d87e      	bhi.n	800b960 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	61bb      	str	r3, [r7, #24]
 800b866:	2308      	movs	r3, #8
 800b868:	623b      	str	r3, [r7, #32]
 800b86a:	230b      	movs	r3, #11
 800b86c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b86e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b878:	e06b      	b.n	800b952 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b87a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b87c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b87e:	d910      	bls.n	800b8a2 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800b880:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b882:	4618      	mov	r0, r3
 800b884:	f003 f85a 	bl	800e93c <ff_wtoupper>
 800b888:	4603      	mov	r3, r0
 800b88a:	2100      	movs	r1, #0
 800b88c:	4618      	mov	r0, r3
 800b88e:	f002 fff7 	bl	800e880 <ff_convert>
 800b892:	4603      	mov	r3, r0
 800b894:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b896:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b89a:	f043 0302 	orr.w	r3, r3, #2
 800b89e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800b8a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8a4:	2bff      	cmp	r3, #255	@ 0xff
 800b8a6:	d91a      	bls.n	800b8de <create_name+0x2da>
			if (i >= ni - 1) {
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	6a3a      	ldr	r2, [r7, #32]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d308      	bcc.n	800b8c4 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800b8b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b8b6:	f043 0303 	orr.w	r3, r3, #3
 800b8ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	623b      	str	r3, [r7, #32]
 800b8c2:	e046      	b.n	800b952 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800b8c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8c6:	0a1b      	lsrs	r3, r3, #8
 800b8c8:	b299      	uxth	r1, r3
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	1c5a      	adds	r2, r3, #1
 800b8ce:	623a      	str	r2, [r7, #32]
 800b8d0:	b2c9      	uxtb	r1, r1
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	460a      	mov	r2, r1
 800b8d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8dc:	e02f      	b.n	800b93e <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b8de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d007      	beq.n	800b8f4 <create_name+0x2f0>
 800b8e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	481c      	ldr	r0, [pc, #112]	@ (800b95c <create_name+0x358>)
 800b8ea:	f7fd fb78 	bl	8008fde <chk_chr>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b8f4:	235f      	movs	r3, #95	@ 0x5f
 800b8f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b8f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b8fc:	f043 0303 	orr.w	r3, r3, #3
 800b900:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b904:	e01b      	b.n	800b93e <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b908:	2b40      	cmp	r3, #64	@ 0x40
 800b90a:	d909      	bls.n	800b920 <create_name+0x31c>
 800b90c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b90e:	2b5a      	cmp	r3, #90	@ 0x5a
 800b910:	d806      	bhi.n	800b920 <create_name+0x31c>
					b |= 2;
 800b912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b916:	f043 0302 	orr.w	r3, r3, #2
 800b91a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b91e:	e00e      	b.n	800b93e <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b922:	2b60      	cmp	r3, #96	@ 0x60
 800b924:	d90b      	bls.n	800b93e <create_name+0x33a>
 800b926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b928:	2b7a      	cmp	r3, #122	@ 0x7a
 800b92a:	d808      	bhi.n	800b93e <create_name+0x33a>
						b |= 1; w -= 0x20;
 800b92c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b930:	f043 0301 	orr.w	r3, r3, #1
 800b934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b938:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b93a:	3b20      	subs	r3, #32
 800b93c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	623a      	str	r2, [r7, #32]
 800b944:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b946:	b2d1      	uxtb	r1, r2
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	4413      	add	r3, r2
 800b94c:	460a      	mov	r2, r1
 800b94e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b952:	e749      	b.n	800b7e8 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800b954:	bf00      	nop
 800b956:	e004      	b.n	800b962 <create_name+0x35e>
 800b958:	08013304 	.word	0x08013304
 800b95c:	08013310 	.word	0x08013310
			if (si > di) break;			/* No extension */
 800b960:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b968:	2be5      	cmp	r3, #229	@ 0xe5
 800b96a:	d103      	bne.n	800b974 <create_name+0x370>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2205      	movs	r2, #5
 800b970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	2b08      	cmp	r3, #8
 800b978:	d104      	bne.n	800b984 <create_name+0x380>
 800b97a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b988:	f003 030c 	and.w	r3, r3, #12
 800b98c:	2b0c      	cmp	r3, #12
 800b98e:	d005      	beq.n	800b99c <create_name+0x398>
 800b990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b994:	f003 0303 	and.w	r3, r3, #3
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d105      	bne.n	800b9a8 <create_name+0x3a4>
 800b99c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9a0:	f043 0302 	orr.w	r3, r3, #2
 800b9a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b9a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9ac:	f003 0302 	and.w	r3, r3, #2
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d117      	bne.n	800b9e4 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9b8:	f003 0303 	and.w	r3, r3, #3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d105      	bne.n	800b9cc <create_name+0x3c8>
 800b9c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9c4:	f043 0310 	orr.w	r3, r3, #16
 800b9c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9d0:	f003 030c 	and.w	r3, r3, #12
 800b9d4:	2b04      	cmp	r3, #4
 800b9d6:	d105      	bne.n	800b9e4 <create_name+0x3e0>
 800b9d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9dc:	f043 0308 	orr.w	r3, r3, #8
 800b9e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b9ea:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800b9ee:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3728      	adds	r7, #40	@ 0x28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ba0c:	e002      	b.n	800ba14 <follow_path+0x1c>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	3301      	adds	r3, #1
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b2f      	cmp	r3, #47	@ 0x2f
 800ba1a:	d0f8      	beq.n	800ba0e <follow_path+0x16>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	2b5c      	cmp	r3, #92	@ 0x5c
 800ba22:	d0f4      	beq.n	800ba0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	2200      	movs	r2, #0
 800ba28:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	2b1f      	cmp	r3, #31
 800ba36:	d80a      	bhi.n	800ba4e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2280      	movs	r2, #128	@ 0x80
 800ba3c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800ba40:	2100      	movs	r1, #0
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7fe fa99 	bl	8009f7a <dir_sdi>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	75fb      	strb	r3, [r7, #23]
 800ba4c:	e078      	b.n	800bb40 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba4e:	463b      	mov	r3, r7
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fdd6 	bl	800b604 <create_name>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d169      	bne.n	800bb36 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7ff fa01 	bl	800ae6a <dir_find>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ba72:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	d15c      	bne.n	800bb3a <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba80:	7afb      	ldrb	r3, [r7, #11]
 800ba82:	f003 0304 	and.w	r3, r3, #4
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d157      	bne.n	800bb3a <follow_path+0x142>
 800ba8a:	2305      	movs	r3, #5
 800ba8c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ba8e:	e054      	b.n	800bb3a <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba90:	7afb      	ldrb	r3, [r7, #11]
 800ba92:	f003 0304 	and.w	r3, r3, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d151      	bne.n	800bb3e <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	799b      	ldrb	r3, [r3, #6]
 800ba9e:	f003 0310 	and.w	r3, r3, #16
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d102      	bne.n	800baac <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800baa6:	2305      	movs	r3, #5
 800baa8:	75fb      	strb	r3, [r7, #23]
 800baaa:	e049      	b.n	800bb40 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d130      	bne.n	800bb16 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	689a      	ldr	r2, [r3, #8]
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bac2:	4613      	mov	r3, r2
 800bac4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	79d2      	ldrb	r2, [r2, #7]
 800bacc:	431a      	orrs	r2, r3
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	3334      	adds	r3, #52	@ 0x34
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fd f84c 	bl	8008b7e <ld_dword>
 800bae6:	4602      	mov	r2, r0
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	3321      	adds	r3, #33	@ 0x21
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	3338      	adds	r3, #56	@ 0x38
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fd f85d 	bl	8008bc4 <ld_qword>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	6939      	ldr	r1, [r7, #16]
 800bb10:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800bb14:	e79b      	b.n	800ba4e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb24:	4413      	add	r3, r2
 800bb26:	4619      	mov	r1, r3
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f7fe fbdd 	bl	800a2e8 <ld_clust>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb34:	e78b      	b.n	800ba4e <follow_path+0x56>
			if (res != FR_OK) break;
 800bb36:	bf00      	nop
 800bb38:	e002      	b.n	800bb40 <follow_path+0x148>
				break;
 800bb3a:	bf00      	nop
 800bb3c:	e000      	b.n	800bb40 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb3e:	bf00      	nop
			}
		}
	}

	return res;
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bb4a:	b480      	push	{r7}
 800bb4c:	b087      	sub	sp, #28
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bb52:	f04f 33ff 	mov.w	r3, #4294967295
 800bb56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d031      	beq.n	800bbc4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	617b      	str	r3, [r7, #20]
 800bb66:	e002      	b.n	800bb6e <get_ldnumber+0x24>
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	617b      	str	r3, [r7, #20]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	2b1f      	cmp	r3, #31
 800bb74:	d903      	bls.n	800bb7e <get_ldnumber+0x34>
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b3a      	cmp	r3, #58	@ 0x3a
 800bb7c:	d1f4      	bne.n	800bb68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	2b3a      	cmp	r3, #58	@ 0x3a
 800bb84:	d11c      	bne.n	800bbc0 <get_ldnumber+0x76>
			tp = *path;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	60fa      	str	r2, [r7, #12]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	3b30      	subs	r3, #48	@ 0x30
 800bb96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2b09      	cmp	r3, #9
 800bb9c:	d80e      	bhi.n	800bbbc <get_ldnumber+0x72>
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d10a      	bne.n	800bbbc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d107      	bne.n	800bbbc <get_ldnumber+0x72>
					vol = (int)i;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	617b      	str	r3, [r7, #20]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	e002      	b.n	800bbc6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bbc4:	693b      	ldr	r3, [r7, #16]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	371c      	adds	r7, #28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	70da      	strb	r2, [r3, #3]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbea:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7fd fbc0 	bl	8009374 <move_window>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <check_fs+0x2a>
 800bbfa:	2304      	movs	r3, #4
 800bbfc:	e044      	b.n	800bc88 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	3338      	adds	r3, #56	@ 0x38
 800bc02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fc ffa0 	bl	8008b4c <ld_word>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d001      	beq.n	800bc1c <check_fs+0x48>
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e035      	b.n	800bc88 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bc22:	2be9      	cmp	r3, #233	@ 0xe9
 800bc24:	d009      	beq.n	800bc3a <check_fs+0x66>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bc2c:	2beb      	cmp	r3, #235	@ 0xeb
 800bc2e:	d11e      	bne.n	800bc6e <check_fs+0x9a>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bc36:	2b90      	cmp	r3, #144	@ 0x90
 800bc38:	d119      	bne.n	800bc6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	3338      	adds	r3, #56	@ 0x38
 800bc3e:	3336      	adds	r3, #54	@ 0x36
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fc ff9c 	bl	8008b7e <ld_dword>
 800bc46:	4603      	mov	r3, r0
 800bc48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bc4c:	4a10      	ldr	r2, [pc, #64]	@ (800bc90 <check_fs+0xbc>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d101      	bne.n	800bc56 <check_fs+0x82>
 800bc52:	2300      	movs	r3, #0
 800bc54:	e018      	b.n	800bc88 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3338      	adds	r3, #56	@ 0x38
 800bc5a:	3352      	adds	r3, #82	@ 0x52
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fc ff8e 	bl	8008b7e <ld_dword>
 800bc62:	4603      	mov	r3, r0
 800bc64:	4a0b      	ldr	r2, [pc, #44]	@ (800bc94 <check_fs+0xc0>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d101      	bne.n	800bc6e <check_fs+0x9a>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e00c      	b.n	800bc88 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3338      	adds	r3, #56	@ 0x38
 800bc72:	220b      	movs	r2, #11
 800bc74:	4908      	ldr	r1, [pc, #32]	@ (800bc98 <check_fs+0xc4>)
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fd f98a 	bl	8008f90 <mem_cmp>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <check_fs+0xb2>
 800bc82:	2301      	movs	r3, #1
 800bc84:	e000      	b.n	800bc88 <check_fs+0xb4>
#endif
	return 2;
 800bc86:	2302      	movs	r3, #2
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	00544146 	.word	0x00544146
 800bc94:	33544146 	.word	0x33544146
 800bc98:	08013318 	.word	0x08013318

0800bc9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bc9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bca0:	b09c      	sub	sp, #112	@ 0x70
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	61f8      	str	r0, [r7, #28]
 800bca6:	61b9      	str	r1, [r7, #24]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bcb2:	69f8      	ldr	r0, [r7, #28]
 800bcb4:	f7ff ff49 	bl	800bb4a <get_ldnumber>
 800bcb8:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	da01      	bge.n	800bcc4 <find_volume+0x28>
 800bcc0:	230b      	movs	r3, #11
 800bcc2:	e331      	b.n	800c328 <find_volume+0x68c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bcc4:	4a99      	ldr	r2, [pc, #612]	@ (800bf2c <find_volume+0x290>)
 800bcc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bccc:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bcce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <find_volume+0x3c>
 800bcd4:	230c      	movs	r3, #12
 800bcd6:	e327      	b.n	800c328 <find_volume+0x68c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bcdc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	f023 0301 	bic.w	r3, r3, #1
 800bce4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d01a      	beq.n	800bd24 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800bcee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcf0:	785b      	ldrb	r3, [r3, #1]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fc fe8c 	bl	8008a10 <disk_status>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bcfe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10c      	bne.n	800bd24 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d007      	beq.n	800bd20 <find_volume+0x84>
 800bd10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bd14:	f003 0304 	and.w	r3, r3, #4
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800bd1c:	230a      	movs	r3, #10
 800bd1e:	e303      	b.n	800c328 <find_volume+0x68c>
			}
			return FR_OK;				/* The file system object is valid */
 800bd20:	2300      	movs	r3, #0
 800bd22:	e301      	b.n	800c328 <find_volume+0x68c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bd24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bd2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd30:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bd32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fc fe84 	bl	8008a44 <disk_initialize>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bd42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e2ea      	b.n	800c328 <find_volume+0x68c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d007      	beq.n	800bd68 <find_volume+0xcc>
 800bd58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800bd64:	230a      	movs	r3, #10
 800bd66:	e2df      	b.n	800c328 <find_volume+0x68c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bd6c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd6e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bd70:	f7ff ff30 	bl	800bbd4 <check_fs>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bd7a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d14d      	bne.n	800be1e <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bd82:	2300      	movs	r3, #0
 800bd84:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd86:	e020      	b.n	800bdca <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bd88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd8a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bd8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd90:	011b      	lsls	r3, r3, #4
 800bd92:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bd96:	4413      	add	r3, r2
 800bd98:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bd9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d006      	beq.n	800bdb2 <find_volume+0x116>
 800bda4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bda6:	3308      	adds	r3, #8
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fc fee8 	bl	8008b7e <ld_dword>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	e000      	b.n	800bdb4 <find_volume+0x118>
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	3360      	adds	r3, #96	@ 0x60
 800bdba:	f107 0110 	add.w	r1, r7, #16
 800bdbe:	440b      	add	r3, r1
 800bdc0:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bdc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bdca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d9db      	bls.n	800bd88 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800bdd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <find_volume+0x144>
 800bdda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bddc:	3b01      	subs	r3, #1
 800bdde:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bde0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	3360      	adds	r3, #96	@ 0x60
 800bde6:	f107 0210 	add.w	r2, r7, #16
 800bdea:	4413      	add	r3, r2
 800bdec:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bdf0:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bdf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d005      	beq.n	800be04 <find_volume+0x168>
 800bdf8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bdfa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bdfc:	f7ff feea 	bl	800bbd4 <check_fs>
 800be00:	4603      	mov	r3, r0
 800be02:	e000      	b.n	800be06 <find_volume+0x16a>
 800be04:	2303      	movs	r3, #3
 800be06:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800be0a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d905      	bls.n	800be1e <find_volume+0x182>
 800be12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be14:	3301      	adds	r3, #1
 800be16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d9e0      	bls.n	800bde0 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800be1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be22:	2b04      	cmp	r3, #4
 800be24:	d101      	bne.n	800be2a <find_volume+0x18e>
 800be26:	2301      	movs	r3, #1
 800be28:	e27e      	b.n	800c328 <find_volume+0x68c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800be2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d901      	bls.n	800be36 <find_volume+0x19a>
 800be32:	230d      	movs	r3, #13
 800be34:	e278      	b.n	800c328 <find_volume+0x68c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800be36:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	f040 80fa 	bne.w	800c034 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800be40:	230b      	movs	r3, #11
 800be42:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be44:	e002      	b.n	800be4c <find_volume+0x1b0>
 800be46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be48:	3301      	adds	r3, #1
 800be4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be4e:	2b3f      	cmp	r3, #63	@ 0x3f
 800be50:	d806      	bhi.n	800be60 <find_volume+0x1c4>
 800be52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be56:	4413      	add	r3, r2
 800be58:	3338      	adds	r3, #56	@ 0x38
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0f2      	beq.n	800be46 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800be60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be62:	2b3f      	cmp	r3, #63	@ 0x3f
 800be64:	d801      	bhi.n	800be6a <find_volume+0x1ce>
 800be66:	230d      	movs	r3, #13
 800be68:	e25e      	b.n	800c328 <find_volume+0x68c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800be6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be6c:	3338      	adds	r3, #56	@ 0x38
 800be6e:	3368      	adds	r3, #104	@ 0x68
 800be70:	4618      	mov	r0, r3
 800be72:	f7fc fe6b 	bl	8008b4c <ld_word>
 800be76:	4603      	mov	r3, r0
 800be78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be7c:	d001      	beq.n	800be82 <find_volume+0x1e6>
 800be7e:	230d      	movs	r3, #13
 800be80:	e252      	b.n	800c328 <find_volume+0x68c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800be82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be84:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800be88:	2b09      	cmp	r3, #9
 800be8a:	d001      	beq.n	800be90 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800be8c:	230d      	movs	r3, #13
 800be8e:	e24b      	b.n	800c328 <find_volume+0x68c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800be90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be92:	3338      	adds	r3, #56	@ 0x38
 800be94:	3348      	adds	r3, #72	@ 0x48
 800be96:	4618      	mov	r0, r3
 800be98:	f7fc fe94 	bl	8008bc4 <ld_qword>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bea2:	2000      	movs	r0, #0
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	68b9      	ldr	r1, [r7, #8]
 800beaa:	1851      	adds	r1, r2, r1
 800beac:	6039      	str	r1, [r7, #0]
 800beae:	68f9      	ldr	r1, [r7, #12]
 800beb0:	eb43 0101 	adc.w	r1, r3, r1
 800beb4:	6079      	str	r1, [r7, #4]
 800beb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800bebe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d301      	bcc.n	800beca <find_volume+0x22e>
 800bec6:	230d      	movs	r3, #13
 800bec8:	e22e      	b.n	800c328 <find_volume+0x68c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800beca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800becc:	3338      	adds	r3, #56	@ 0x38
 800bece:	3354      	adds	r3, #84	@ 0x54
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fc fe54 	bl	8008b7e <ld_dword>
 800bed6:	4602      	mov	r2, r0
 800bed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beda:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800bedc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bede:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800bee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bee4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800bee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bee8:	789b      	ldrb	r3, [r3, #2]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d001      	beq.n	800bef2 <find_volume+0x256>
 800beee:	230d      	movs	r3, #13
 800bef0:	e21a      	b.n	800c328 <find_volume+0x68c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800bef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bef8:	461a      	mov	r2, r3
 800befa:	2301      	movs	r3, #1
 800befc:	4093      	lsls	r3, r2
 800befe:	b29a      	uxth	r2, r3
 800bf00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf02:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800bf04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf06:	895b      	ldrh	r3, [r3, #10]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <find_volume+0x274>
 800bf0c:	230d      	movs	r3, #13
 800bf0e:	e20b      	b.n	800c328 <find_volume+0x68c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800bf10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf12:	3338      	adds	r3, #56	@ 0x38
 800bf14:	335c      	adds	r3, #92	@ 0x5c
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fc fe31 	bl	8008b7e <ld_dword>
 800bf1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800bf1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf20:	4a03      	ldr	r2, [pc, #12]	@ (800bf30 <find_volume+0x294>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d906      	bls.n	800bf34 <find_volume+0x298>
 800bf26:	230d      	movs	r3, #13
 800bf28:	e1fe      	b.n	800c328 <find_volume+0x68c>
 800bf2a:	bf00      	nop
 800bf2c:	20001214 	.word	0x20001214
 800bf30:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800bf34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf36:	1c9a      	adds	r2, r3, #2
 800bf38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf3a:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800bf3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bf40:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800bf42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf44:	3338      	adds	r3, #56	@ 0x38
 800bf46:	3358      	adds	r3, #88	@ 0x58
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fc fe18 	bl	8008b7e <ld_dword>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf52:	441a      	add	r2, r3
 800bf54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf56:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800bf58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf5a:	3338      	adds	r3, #56	@ 0x38
 800bf5c:	3350      	adds	r3, #80	@ 0x50
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fc fe0d 	bl	8008b7e <ld_dword>
 800bf64:	4602      	mov	r2, r0
 800bf66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf68:	441a      	add	r2, r3
 800bf6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf6c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800bf6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf72:	2200      	movs	r2, #0
 800bf74:	469a      	mov	sl, r3
 800bf76:	4693      	mov	fp, r2
 800bf78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf7a:	895b      	ldrh	r3, [r3, #10]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf80:	fb02 f303 	mul.w	r3, r2, r3
 800bf84:	2200      	movs	r2, #0
 800bf86:	4698      	mov	r8, r3
 800bf88:	4691      	mov	r9, r2
 800bf8a:	eb1a 0408 	adds.w	r4, sl, r8
 800bf8e:	eb4b 0509 	adc.w	r5, fp, r9
 800bf92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bf96:	42a2      	cmp	r2, r4
 800bf98:	41ab      	sbcs	r3, r5
 800bf9a:	d201      	bcs.n	800bfa0 <find_volume+0x304>
 800bf9c:	230d      	movs	r3, #13
 800bf9e:	e1c3      	b.n	800c328 <find_volume+0x68c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800bfa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfa2:	3338      	adds	r3, #56	@ 0x38
 800bfa4:	3360      	adds	r3, #96	@ 0x60
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fc fde9 	bl	8008b7e <ld_dword>
 800bfac:	4602      	mov	r2, r0
 800bfae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfb0:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800bfb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bfba:	f7fd fa77 	bl	80094ac <clust2sect>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bfc4:	f7fd f9d6 	bl	8009374 <move_window>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <find_volume+0x336>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e1aa      	b.n	800c328 <find_volume+0x68c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfd6:	e015      	b.n	800c004 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800bfd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfdc:	4413      	add	r3, r2
 800bfde:	3338      	adds	r3, #56	@ 0x38
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	2b81      	cmp	r3, #129	@ 0x81
 800bfe4:	d10b      	bne.n	800bffe <find_volume+0x362>
 800bfe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfe8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bfec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfee:	3314      	adds	r3, #20
 800bff0:	4413      	add	r3, r2
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fc fdc3 	bl	8008b7e <ld_dword>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	d007      	beq.n	800c00e <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c000:	3320      	adds	r3, #32
 800c002:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c004:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c00a:	d3e5      	bcc.n	800bfd8 <find_volume+0x33c>
 800c00c:	e000      	b.n	800c010 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c00e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c016:	d101      	bne.n	800c01c <find_volume+0x380>
 800c018:	230d      	movs	r3, #13
 800c01a:	e185      	b.n	800c328 <find_volume+0x68c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c01c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c01e:	f04f 32ff 	mov.w	r2, #4294967295
 800c022:	619a      	str	r2, [r3, #24]
 800c024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c026:	699a      	ldr	r2, [r3, #24]
 800c028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c02a:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c02c:	2304      	movs	r3, #4
 800c02e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800c032:	e167      	b.n	800c304 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c036:	3338      	adds	r3, #56	@ 0x38
 800c038:	330b      	adds	r3, #11
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fc fd86 	bl	8008b4c <ld_word>
 800c040:	4603      	mov	r3, r0
 800c042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c046:	d001      	beq.n	800c04c <find_volume+0x3b0>
 800c048:	230d      	movs	r3, #13
 800c04a:	e16d      	b.n	800c328 <find_volume+0x68c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c04e:	3338      	adds	r3, #56	@ 0x38
 800c050:	3316      	adds	r3, #22
 800c052:	4618      	mov	r0, r3
 800c054:	f7fc fd7a 	bl	8008b4c <ld_word>
 800c058:	4603      	mov	r3, r0
 800c05a:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c05c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <find_volume+0x3d4>
 800c062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c064:	3338      	adds	r3, #56	@ 0x38
 800c066:	3324      	adds	r3, #36	@ 0x24
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fc fd88 	bl	8008b7e <ld_dword>
 800c06e:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800c070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c072:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c074:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c078:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c07c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c07e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c082:	789b      	ldrb	r3, [r3, #2]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d005      	beq.n	800c094 <find_volume+0x3f8>
 800c088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c08a:	789b      	ldrb	r3, [r3, #2]
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d001      	beq.n	800c094 <find_volume+0x3f8>
 800c090:	230d      	movs	r3, #13
 800c092:	e149      	b.n	800c328 <find_volume+0x68c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c096:	789b      	ldrb	r3, [r3, #2]
 800c098:	461a      	mov	r2, r3
 800c09a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c09c:	fb02 f303 	mul.w	r3, r2, r3
 800c0a0:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c0ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b0:	895b      	ldrh	r3, [r3, #10]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d008      	beq.n	800c0c8 <find_volume+0x42c>
 800c0b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b8:	895b      	ldrh	r3, [r3, #10]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0be:	895b      	ldrh	r3, [r3, #10]
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <find_volume+0x430>
 800c0c8:	230d      	movs	r3, #13
 800c0ca:	e12d      	b.n	800c328 <find_volume+0x68c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ce:	3338      	adds	r3, #56	@ 0x38
 800c0d0:	3311      	adds	r3, #17
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fc fd3a 	bl	8008b4c <ld_word>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	461a      	mov	r2, r3
 800c0dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c0e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0e2:	891b      	ldrh	r3, [r3, #8]
 800c0e4:	f003 030f 	and.w	r3, r3, #15
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <find_volume+0x456>
 800c0ee:	230d      	movs	r3, #13
 800c0f0:	e11a      	b.n	800c328 <find_volume+0x68c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c0f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0f4:	3338      	adds	r3, #56	@ 0x38
 800c0f6:	3313      	adds	r3, #19
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fc fd27 	bl	8008b4c <ld_word>
 800c0fe:	4603      	mov	r3, r0
 800c100:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c104:	2b00      	cmp	r3, #0
 800c106:	d106      	bne.n	800c116 <find_volume+0x47a>
 800c108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c10a:	3338      	adds	r3, #56	@ 0x38
 800c10c:	3320      	adds	r3, #32
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fc fd35 	bl	8008b7e <ld_dword>
 800c114:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c118:	3338      	adds	r3, #56	@ 0x38
 800c11a:	330e      	adds	r3, #14
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fc fd15 	bl	8008b4c <ld_word>
 800c122:	4603      	mov	r3, r0
 800c124:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c128:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <find_volume+0x498>
 800c130:	230d      	movs	r3, #13
 800c132:	e0f9      	b.n	800c328 <find_volume+0x68c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c134:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c13a:	4413      	add	r3, r2
 800c13c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c13e:	8912      	ldrh	r2, [r2, #8]
 800c140:	0912      	lsrs	r2, r2, #4
 800c142:	b292      	uxth	r2, r2
 800c144:	4413      	add	r3, r2
 800c146:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c14a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d201      	bcs.n	800c154 <find_volume+0x4b8>
 800c150:	230d      	movs	r3, #13
 800c152:	e0e9      	b.n	800c328 <find_volume+0x68c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c154:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c15c:	8952      	ldrh	r2, [r2, #10]
 800c15e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c162:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <find_volume+0x4d2>
 800c16a:	230d      	movs	r3, #13
 800c16c:	e0dc      	b.n	800c328 <find_volume+0x68c>
		fmt = FS_FAT32;
 800c16e:	2303      	movs	r3, #3
 800c170:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c176:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d802      	bhi.n	800c184 <find_volume+0x4e8>
 800c17e:	2302      	movs	r3, #2
 800c180:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c186:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d802      	bhi.n	800c194 <find_volume+0x4f8>
 800c18e:	2301      	movs	r3, #1
 800c190:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c196:	1c9a      	adds	r2, r3, #2
 800c198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c19a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c19c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c19e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c1a0:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c1a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1a8:	441a      	add	r2, r3
 800c1aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1ac:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c1ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c1b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1b2:	441a      	add	r2, r3
 800c1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1b6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c1b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d11e      	bne.n	800c1fe <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1c2:	3338      	adds	r3, #56	@ 0x38
 800c1c4:	332a      	adds	r3, #42	@ 0x2a
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fc fcc0 	bl	8008b4c <ld_word>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <find_volume+0x53a>
 800c1d2:	230d      	movs	r3, #13
 800c1d4:	e0a8      	b.n	800c328 <find_volume+0x68c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c1d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1d8:	891b      	ldrh	r3, [r3, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <find_volume+0x546>
 800c1de:	230d      	movs	r3, #13
 800c1e0:	e0a2      	b.n	800c328 <find_volume+0x68c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c1e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e4:	3338      	adds	r3, #56	@ 0x38
 800c1e6:	332c      	adds	r3, #44	@ 0x2c
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fc fcc8 	bl	8008b7e <ld_dword>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c1f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f6:	69db      	ldr	r3, [r3, #28]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1fc:	e01f      	b.n	800c23e <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c1fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c200:	891b      	ldrh	r3, [r3, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d101      	bne.n	800c20a <find_volume+0x56e>
 800c206:	230d      	movs	r3, #13
 800c208:	e08e      	b.n	800c328 <find_volume+0x68c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c20a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c20c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c20e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c210:	441a      	add	r2, r3
 800c212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c214:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c216:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c21a:	2b02      	cmp	r3, #2
 800c21c:	d103      	bne.n	800c226 <find_volume+0x58a>
 800c21e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	e00a      	b.n	800c23c <find_volume+0x5a0>
 800c226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c228:	69da      	ldr	r2, [r3, #28]
 800c22a:	4613      	mov	r3, r2
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	4413      	add	r3, r2
 800c230:	085a      	lsrs	r2, r3, #1
 800c232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c234:	69db      	ldr	r3, [r3, #28]
 800c236:	f003 0301 	and.w	r3, r3, #1
 800c23a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c23c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c240:	6a1a      	ldr	r2, [r3, #32]
 800c242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c244:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c248:	0a5b      	lsrs	r3, r3, #9
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d201      	bcs.n	800c252 <find_volume+0x5b6>
 800c24e:	230d      	movs	r3, #13
 800c250:	e06a      	b.n	800c328 <find_volume+0x68c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c254:	f04f 32ff 	mov.w	r2, #4294967295
 800c258:	619a      	str	r2, [r3, #24]
 800c25a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c25c:	699a      	ldr	r2, [r3, #24]
 800c25e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c260:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c264:	2280      	movs	r2, #128	@ 0x80
 800c266:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c268:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d149      	bne.n	800c304 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c272:	3338      	adds	r3, #56	@ 0x38
 800c274:	3330      	adds	r3, #48	@ 0x30
 800c276:	4618      	mov	r0, r3
 800c278:	f7fc fc68 	bl	8008b4c <ld_word>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d140      	bne.n	800c304 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c284:	3301      	adds	r3, #1
 800c286:	4619      	mov	r1, r3
 800c288:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c28a:	f7fd f873 	bl	8009374 <move_window>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d137      	bne.n	800c304 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800c294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c296:	2200      	movs	r2, #0
 800c298:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c29a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c29c:	3338      	adds	r3, #56	@ 0x38
 800c29e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fc fc52 	bl	8008b4c <ld_word>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d127      	bne.n	800c304 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c2b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2b6:	3338      	adds	r3, #56	@ 0x38
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fc fc60 	bl	8008b7e <ld_dword>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4a1c      	ldr	r2, [pc, #112]	@ (800c334 <find_volume+0x698>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d11e      	bne.n	800c304 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c2c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2c8:	3338      	adds	r3, #56	@ 0x38
 800c2ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fc fc55 	bl	8008b7e <ld_dword>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	4a18      	ldr	r2, [pc, #96]	@ (800c338 <find_volume+0x69c>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d113      	bne.n	800c304 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c2dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2de:	3338      	adds	r3, #56	@ 0x38
 800c2e0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fc fc4a 	bl	8008b7e <ld_dword>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c2f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f2:	3338      	adds	r3, #56	@ 0x38
 800c2f4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fc fc40 	bl	8008b7e <ld_dword>
 800c2fe:	4602      	mov	r2, r0
 800c300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c302:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c306:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800c30a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c30c:	4b0b      	ldr	r3, [pc, #44]	@ (800c33c <find_volume+0x6a0>)
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	4b09      	ldr	r3, [pc, #36]	@ (800c33c <find_volume+0x6a0>)
 800c316:	801a      	strh	r2, [r3, #0]
 800c318:	4b08      	ldr	r3, [pc, #32]	@ (800c33c <find_volume+0x6a0>)
 800c31a:	881a      	ldrh	r2, [r3, #0]
 800c31c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c31e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c320:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c322:	f7fc ffbf 	bl	80092a4 <clear_lock>
#endif
	return FR_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3770      	adds	r7, #112	@ 0x70
 800c32c:	46bd      	mov	sp, r7
 800c32e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c332:	bf00      	nop
 800c334:	41615252 	.word	0x41615252
 800c338:	61417272 	.word	0x61417272
 800c33c:	20001218 	.word	0x20001218

0800c340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c34a:	2309      	movs	r3, #9
 800c34c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d01c      	beq.n	800c38e <validate+0x4e>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d018      	beq.n	800c38e <validate+0x4e>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d013      	beq.n	800c38e <validate+0x4e>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	889a      	ldrh	r2, [r3, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	88db      	ldrh	r3, [r3, #6]
 800c370:	429a      	cmp	r2, r3
 800c372:	d10c      	bne.n	800c38e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	785b      	ldrb	r3, [r3, #1]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fc fb48 	bl	8008a10 <disk_status>
 800c380:	4603      	mov	r3, r0
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <validate+0x4e>
			res = FR_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <validate+0x5a>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	e000      	b.n	800c39c <validate+0x5c>
 800c39a:	2300      	movs	r3, #0
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	6013      	str	r3, [r2, #0]
	return res;
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
	...

0800c3ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3be:	f107 0310 	add.w	r3, r7, #16
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff fbc1 	bl	800bb4a <get_ldnumber>
 800c3c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	da01      	bge.n	800c3d4 <f_mount+0x28>
 800c3d0:	230b      	movs	r3, #11
 800c3d2:	e02b      	b.n	800c42c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c3d4:	4a17      	ldr	r2, [pc, #92]	@ (800c434 <f_mount+0x88>)
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d005      	beq.n	800c3f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c3e4:	69b8      	ldr	r0, [r7, #24]
 800c3e6:	f7fc ff5d 	bl	80092a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	490d      	ldr	r1, [pc, #52]	@ (800c434 <f_mount+0x88>)
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <f_mount+0x66>
 800c40c:	79fb      	ldrb	r3, [r7, #7]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d001      	beq.n	800c416 <f_mount+0x6a>
 800c412:	2300      	movs	r3, #0
 800c414:	e00a      	b.n	800c42c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c416:	f107 010c 	add.w	r1, r7, #12
 800c41a:	f107 0308 	add.w	r3, r7, #8
 800c41e:	2200      	movs	r2, #0
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fc3b 	bl	800bc9c <find_volume>
 800c426:	4603      	mov	r3, r0
 800c428:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3720      	adds	r7, #32
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20001214 	.word	0x20001214

0800c438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c43c:	b0a8      	sub	sp, #160	@ 0xa0
 800c43e:	af00      	add	r7, sp, #0
 800c440:	61f8      	str	r0, [r7, #28]
 800c442:	61b9      	str	r1, [r7, #24]
 800c444:	4613      	mov	r3, r2
 800c446:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <f_open+0x1a>
 800c44e:	2309      	movs	r3, #9
 800c450:	e2c7      	b.n	800c9e2 <f_open+0x5aa>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c458:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800c45a:	7dfa      	ldrb	r2, [r7, #23]
 800c45c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c460:	f107 0318 	add.w	r3, r7, #24
 800c464:	4618      	mov	r0, r3
 800c466:	f7ff fc19 	bl	800bc9c <find_volume>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800c470:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c474:	2b00      	cmp	r3, #0
 800c476:	f040 82ab 	bne.w	800c9d0 <f_open+0x598>
		dj.obj.fs = fs;
 800c47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47c:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
 800c47e:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800c482:	f002 fae5 	bl	800ea50 <ff_memalloc>
 800c486:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800c48a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <f_open+0x5e>
 800c492:	2311      	movs	r3, #17
 800c494:	e2a5      	b.n	800c9e2 <f_open+0x5aa>
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c49c:	60da      	str	r2, [r3, #12]
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c4a4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800c4a8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4aa:	69ba      	ldr	r2, [r7, #24]
 800c4ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff faa0 	bl	800b9f8 <follow_path>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c4be:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d118      	bne.n	800c4f8 <f_open+0xc0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c4c6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800c4ca:	b25b      	sxtb	r3, r3
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	da03      	bge.n	800c4d8 <f_open+0xa0>
				res = FR_INVALID_NAME;
 800c4d0:	2306      	movs	r3, #6
 800c4d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c4d6:	e00f      	b.n	800c4f8 <f_open+0xc0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	bf8c      	ite	hi
 800c4de:	2301      	movhi	r3, #1
 800c4e0:	2300      	movls	r3, #0
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fc fd91 	bl	8009014 <chk_lock>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c4f8:	7dfb      	ldrb	r3, [r7, #23]
 800c4fa:	f003 031c 	and.w	r3, r3, #28
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f000 8115 	beq.w	800c72e <f_open+0x2f6>
			if (res != FR_OK) {					/* No file, create new */
 800c504:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d017      	beq.n	800c53c <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c50c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c510:	2b04      	cmp	r3, #4
 800c512:	d10e      	bne.n	800c532 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c514:	f7fc fdda 	bl	80090cc <enq_lock>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d006      	beq.n	800c52c <f_open+0xf4>
 800c51e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fdcc 	bl	800b0c0 <dir_register>
 800c528:	4603      	mov	r3, r0
 800c52a:	e000      	b.n	800c52e <f_open+0xf6>
 800c52c:	2312      	movs	r3, #18
 800c52e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	f043 0308 	orr.w	r3, r3, #8
 800c538:	75fb      	strb	r3, [r7, #23]
 800c53a:	e011      	b.n	800c560 <f_open+0x128>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c53c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c540:	f003 0311 	and.w	r3, r3, #17
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <f_open+0x118>
					res = FR_DENIED;
 800c548:	2307      	movs	r3, #7
 800c54a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c54e:	e007      	b.n	800c560 <f_open+0x128>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	f003 0304 	and.w	r3, r3, #4
 800c556:	2b00      	cmp	r3, #0
 800c558:	d002      	beq.n	800c560 <f_open+0x128>
 800c55a:	2308      	movs	r3, #8
 800c55c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c560:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c564:	2b00      	cmp	r3, #0
 800c566:	f040 80fe 	bne.w	800c766 <f_open+0x32e>
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	f003 0308 	and.w	r3, r3, #8
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 80f8 	beq.w	800c766 <f_open+0x32e>
				dw = GET_FATTIME();
 800c576:	f7fc f973 	bl	8008860 <get_fattime>
 800c57a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b04      	cmp	r3, #4
 800c584:	f040 8084 	bne.w	800c690 <f_open+0x258>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	3334      	adds	r3, #52	@ 0x34
 800c594:	4618      	mov	r0, r3
 800c596:	f7fc faf2 	bl	8008b7e <ld_dword>
 800c59a:	4602      	mov	r2, r0
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	3338      	adds	r3, #56	@ 0x38
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fc fb0c 	bl	8008bc4 <ld_qword>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	69f9      	ldr	r1, [r7, #28]
 800c5b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	3321      	adds	r3, #33	@ 0x21
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	f003 0302 	and.w	r3, r3, #2
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fc fbe9 	bl	8008db0 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	3314      	adds	r3, #20
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	330c      	adds	r3, #12
 800c5ee:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fc fbdc 	bl	8008db0 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	3315      	adds	r3, #21
 800c5fe:	2200      	movs	r2, #0
 800c600:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	3304      	adds	r3, #4
 800c608:	2220      	movs	r2, #32
 800c60a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	3334      	adds	r3, #52	@ 0x34
 800c612:	2100      	movs	r1, #0
 800c614:	4618      	mov	r0, r3
 800c616:	f7fc fbcb 	bl	8008db0 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c622:	f04f 0200 	mov.w	r2, #0
 800c626:	f04f 0300 	mov.w	r3, #0
 800c62a:	4608      	mov	r0, r1
 800c62c:	f7fc fbec 	bl	8008e08 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c638:	f04f 0200 	mov.w	r2, #0
 800c63c:	f04f 0300 	mov.w	r3, #0
 800c640:	4608      	mov	r0, r1
 800c642:	f7fc fbe1 	bl	8008e08 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	3321      	adds	r3, #33	@ 0x21
 800c64c:	2201      	movs	r2, #1
 800c64e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800c650:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c654:	4618      	mov	r0, r3
 800c656:	f7fe fa7f 	bl	800ab58 <store_xdir>
 800c65a:	4603      	mov	r3, r0
 800c65c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c660:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c664:	2b00      	cmp	r3, #0
 800c666:	d17e      	bne.n	800c766 <f_open+0x32e>
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d07a      	beq.n	800c766 <f_open+0x32e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c670:	69f8      	ldr	r0, [r7, #28]
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	2200      	movs	r2, #0
 800c678:	4619      	mov	r1, r3
 800c67a:	f7fd fa85 	bl	8009b88 <remove_chain>
 800c67e:	4603      	mov	r3, r0
 800c680:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68a:	3a01      	subs	r2, #1
 800c68c:	615a      	str	r2, [r3, #20]
 800c68e:	e06a      	b.n	800c766 <f_open+0x32e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c692:	330e      	adds	r3, #14
 800c694:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fc fb89 	bl	8008db0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c69e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6a0:	3316      	adds	r3, #22
 800c6a2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fc fb82 	bl	8008db0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c6ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6ae:	330b      	adds	r3, #11
 800c6b0:	2220      	movs	r2, #32
 800c6b2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fd fe14 	bl	800a2e8 <ld_clust>
 800c6c0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fd fe2b 	bl	800a326 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c6d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6d2:	331c      	adds	r3, #28
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fc fb6a 	bl	8008db0 <st_dword>
					fs->wflag = 1;
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6de:	2201      	movs	r2, #1
 800c6e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c6e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d03d      	beq.n	800c766 <f_open+0x32e>
						dw = fs->winsect;
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						res = remove_chain(&dj.obj, cl, 0);
 800c6f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fd fa43 	bl	8009b88 <remove_chain>
 800c702:	4603      	mov	r3, r0
 800c704:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 800c708:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d12a      	bne.n	800c766 <f_open+0x32e>
							res = move_window(fs, dw);
 800c710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c712:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c716:	4618      	mov	r0, r3
 800c718:	f7fc fe2c 	bl	8009374 <move_window>
 800c71c:	4603      	mov	r3, r0
 800c71e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c724:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c728:	3a01      	subs	r2, #1
 800c72a:	615a      	str	r2, [r3, #20]
 800c72c:	e01b      	b.n	800c766 <f_open+0x32e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c72e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c732:	2b00      	cmp	r3, #0
 800c734:	d117      	bne.n	800c766 <f_open+0x32e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c736:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c73a:	f003 0310 	and.w	r3, r3, #16
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <f_open+0x312>
					res = FR_NO_FILE;
 800c742:	2304      	movs	r3, #4
 800c744:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c748:	e00d      	b.n	800c766 <f_open+0x32e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
 800c74c:	f003 0302 	and.w	r3, r3, #2
 800c750:	2b00      	cmp	r3, #0
 800c752:	d008      	beq.n	800c766 <f_open+0x32e>
 800c754:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <f_open+0x32e>
						res = FR_DENIED;
 800c760:	2307      	movs	r3, #7
 800c762:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c766:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d126      	bne.n	800c7bc <f_open+0x384>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c76e:	7dfb      	ldrb	r3, [r7, #23]
 800c770:	f003 0308 	and.w	r3, r3, #8
 800c774:	2b00      	cmp	r3, #0
 800c776:	d003      	beq.n	800c780 <f_open+0x348>
				mode |= FA_MODIFIED;
 800c778:	7dfb      	ldrb	r3, [r7, #23]
 800c77a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c77e:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800c788:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	2b01      	cmp	r3, #1
 800c792:	bf8c      	ite	hi
 800c794:	2301      	movhi	r3, #1
 800c796:	2300      	movls	r3, #0
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	461a      	mov	r2, r3
 800c79c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fc fcb4 	bl	8009110 <inc_lock>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d102      	bne.n	800c7bc <f_open+0x384>
 800c7b6:	2302      	movs	r3, #2
 800c7b8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c7bc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f040 8101 	bne.w	800c9c8 <f_open+0x590>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b04      	cmp	r3, #4
 800c7cc:	d12d      	bne.n	800c82a <f_open+0x3f2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c7ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c7d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c7d8:	4613      	mov	r3, r2
 800c7da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c7de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c7e2:	431a      	orrs	r2, r3
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c7e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	3334      	adds	r3, #52	@ 0x34
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fc f9c2 	bl	8008b7e <ld_dword>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	3338      	adds	r3, #56	@ 0x38
 800c806:	4618      	mov	r0, r3
 800c808:	f7fc f9dc 	bl	8008bc4 <ld_qword>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	69f9      	ldr	r1, [r7, #28]
 800c812:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	3321      	adds	r3, #33	@ 0x21
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	f003 0302 	and.w	r3, r3, #2
 800c822:	b2da      	uxtb	r2, r3
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	71da      	strb	r2, [r3, #7]
 800c828:	e016      	b.n	800c858 <f_open+0x420>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c82e:	4611      	mov	r1, r2
 800c830:	4618      	mov	r0, r3
 800c832:	f7fd fd59 	bl	800a2e8 <ld_clust>
 800c836:	4602      	mov	r2, r0
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c83c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c83e:	331c      	adds	r3, #28
 800c840:	4618      	mov	r0, r3
 800c842:	f7fc f99c 	bl	8008b7e <ld_dword>
 800c846:	4603      	mov	r3, r0
 800c848:	2200      	movs	r2, #0
 800c84a:	60bb      	str	r3, [r7, #8]
 800c84c:	60fa      	str	r2, [r7, #12]
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c854:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	2200      	movs	r2, #0
 800c85c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c866:	88da      	ldrh	r2, [r3, #6]
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	7dfa      	ldrb	r2, [r7, #23]
 800c870:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	2200      	movs	r2, #0
 800c880:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c882:	69f9      	ldr	r1, [r7, #28]
 800c884:	f04f 0200 	mov.w	r2, #0
 800c888:	f04f 0300 	mov.w	r3, #0
 800c88c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	3354      	adds	r3, #84	@ 0x54
 800c894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c898:	2100      	movs	r1, #0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fc fb5d 	bl	8008f5a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f000 808e 	beq.w	800c9c8 <f_open+0x590>
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	f000 8088 	beq.w	800c9c8 <f_open+0x590>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8be:	69f9      	ldr	r1, [r7, #28]
 800c8c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c6:	895b      	ldrh	r3, [r3, #10]
 800c8c8:	025b      	lsls	r3, r3, #9
 800c8ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8dc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800c8e0:	e027      	b.n	800c932 <f_open+0x4fa>
					clst = get_fat(&fp->obj, clst);
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fc fdff 	bl	80094ec <get_fat>
 800c8ee:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800c8f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d802      	bhi.n	800c900 <f_open+0x4c8>
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c908:	d102      	bne.n	800c910 <f_open+0x4d8>
 800c90a:	2301      	movs	r3, #1
 800c90c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c910:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c914:	2200      	movs	r2, #0
 800c916:	469a      	mov	sl, r3
 800c918:	4693      	mov	fp, r2
 800c91a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c91e:	ebb2 010a 	subs.w	r1, r2, sl
 800c922:	6039      	str	r1, [r7, #0]
 800c924:	eb63 030b 	sbc.w	r3, r3, fp
 800c928:	607b      	str	r3, [r7, #4]
 800c92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c92e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800c932:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10a      	bne.n	800c950 <f_open+0x518>
 800c93a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c93e:	2200      	movs	r2, #0
 800c940:	4698      	mov	r8, r3
 800c942:	4691      	mov	r9, r2
 800c944:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c948:	4590      	cmp	r8, r2
 800c94a:	eb79 0303 	sbcs.w	r3, r9, r3
 800c94e:	d3c8      	bcc.n	800c8e2 <f_open+0x4aa>
				}
				fp->clust = clst;
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c956:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c958:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d133      	bne.n	800c9c8 <f_open+0x590>
 800c960:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c964:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c968:	2500      	movs	r5, #0
 800c96a:	ea54 0305 	orrs.w	r3, r4, r5
 800c96e:	d02b      	beq.n	800c9c8 <f_open+0x590>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c972:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c976:	4618      	mov	r0, r3
 800c978:	f7fc fd98 	bl	80094ac <clust2sect>
 800c97c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c97e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d103      	bne.n	800c98c <f_open+0x554>
						res = FR_INT_ERR;
 800c984:	2302      	movs	r3, #2
 800c986:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c98a:	e01d      	b.n	800c9c8 <f_open+0x590>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c98c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800c990:	f04f 0200 	mov.w	r2, #0
 800c994:	f04f 0300 	mov.w	r3, #0
 800c998:	0a42      	lsrs	r2, r0, #9
 800c99a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c99e:	0a4b      	lsrs	r3, r1, #9
 800c9a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c9a2:	441a      	add	r2, r3
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9aa:	7858      	ldrb	r0, [r3, #1]
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	f7fc f86a 	bl	8008a90 <disk_read>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <f_open+0x590>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800c9c8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c9cc:	f002 f84c 	bl	800ea68 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c9d0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <f_open+0x5a6>
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9de:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	37a0      	adds	r7, #160	@ 0xa0
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c9ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f0:	b095      	sub	sp, #84	@ 0x54
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	61f8      	str	r0, [r7, #28]
 800c9f6:	61b9      	str	r1, [r7, #24]
 800c9f8:	617a      	str	r2, [r7, #20]
 800c9fa:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ca0c:	4611      	mov	r1, r2
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff fc96 	bl	800c340 <validate>
 800ca14:	4603      	mov	r3, r0
 800ca16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ca1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d108      	bne.n	800ca34 <f_read+0x48>
 800ca22:	69fb      	ldr	r3, [r7, #28]
 800ca24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ca28:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ca2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <f_read+0x4e>
 800ca34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca38:	e14b      	b.n	800ccd2 <f_read+0x2e6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca40:	f003 0301 	and.w	r3, r3, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d101      	bne.n	800ca4c <f_read+0x60>
 800ca48:	2307      	movs	r3, #7
 800ca4a:	e142      	b.n	800ccd2 <f_read+0x2e6>
	remain = fp->obj.objsize - fp->fptr;
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ca58:	1a86      	subs	r6, r0, r2
 800ca5a:	603e      	str	r6, [r7, #0]
 800ca5c:	eb61 0303 	sbc.w	r3, r1, r3
 800ca60:	607b      	str	r3, [r7, #4]
 800ca62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca66:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	469a      	mov	sl, r3
 800ca70:	4693      	mov	fp, r2
 800ca72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ca76:	4552      	cmp	r2, sl
 800ca78:	eb73 030b 	sbcs.w	r3, r3, fp
 800ca7c:	f080 8124 	bcs.w	800ccc8 <f_read+0x2dc>
 800ca80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca82:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800ca84:	e120      	b.n	800ccc8 <f_read+0x2dc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ca8c:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ca90:	2500      	movs	r5, #0
 800ca92:	ea54 0305 	orrs.w	r3, r4, r5
 800ca96:	f040 80d9 	bne.w	800cc4c <f_read+0x260>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	f04f 0300 	mov.w	r3, #0
 800caa8:	0a42      	lsrs	r2, r0, #9
 800caaa:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800caae:	0a4b      	lsrs	r3, r1, #9
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	895b      	ldrh	r3, [r3, #10]
 800cab4:	3b01      	subs	r3, #1
 800cab6:	4013      	ands	r3, r2
 800cab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800caba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d132      	bne.n	800cb26 <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cac6:	4313      	orrs	r3, r2
 800cac8:	d103      	bne.n	800cad2 <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cad0:	e013      	b.n	800cafa <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d007      	beq.n	800caea <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cae0:	69f8      	ldr	r0, [r7, #28]
 800cae2:	f7fd fa06 	bl	8009ef2 <clmt_clust>
 800cae6:	64b8      	str	r0, [r7, #72]	@ 0x48
 800cae8:	e007      	b.n	800cafa <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800caea:	69fa      	ldr	r2, [r7, #28]
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caf0:	4619      	mov	r1, r3
 800caf2:	4610      	mov	r0, r2
 800caf4:	f7fc fcfa 	bl	80094ec <get_fat>
 800caf8:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cafa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d805      	bhi.n	800cb0c <f_read+0x120>
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	2202      	movs	r2, #2
 800cb04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e0e2      	b.n	800ccd2 <f_read+0x2e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb12:	d105      	bne.n	800cb20 <f_read+0x134>
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e0d8      	b.n	800ccd2 <f_read+0x2e6>
				fp->clust = clst;				/* Update current cluster */
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb24:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cb26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4610      	mov	r0, r2
 800cb30:	f7fc fcbc 	bl	80094ac <clust2sect>
 800cb34:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d105      	bne.n	800cb48 <f_read+0x15c>
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	2202      	movs	r2, #2
 800cb40:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cb44:	2302      	movs	r3, #2
 800cb46:	e0c4      	b.n	800ccd2 <f_read+0x2e6>
			sect += csect;
 800cb48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb4c:	4413      	add	r3, r2
 800cb4e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	0a5b      	lsrs	r3, r3, #9
 800cb54:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cb56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d03b      	beq.n	800cbd4 <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb60:	4413      	add	r3, r2
 800cb62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb64:	8952      	ldrh	r2, [r2, #10]
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d905      	bls.n	800cb76 <f_read+0x18a>
					cc = fs->csize - csect;
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6c:	895b      	ldrh	r3, [r3, #10]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb78:	7858      	ldrb	r0, [r3, #1]
 800cb7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb80:	f7fb ff86 	bl	8008a90 <disk_read>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d005      	beq.n	800cb96 <f_read+0x1aa>
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cb92:	2301      	movs	r3, #1
 800cb94:	e09d      	b.n	800ccd2 <f_read+0x2e6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb9c:	b25b      	sxtb	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	da14      	bge.n	800cbcc <f_read+0x1e0>
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d90d      	bls.n	800cbcc <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	025b      	lsls	r3, r3, #9
 800cbba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cbbc:	18d0      	adds	r0, r2, r3
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	3354      	adds	r3, #84	@ 0x54
 800cbc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	f7fc f9a6 	bl	8008f18 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cbcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbce:	025b      	lsls	r3, r3, #9
 800cbd0:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800cbd2:	e059      	b.n	800cc88 <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d033      	beq.n	800cc46 <f_read+0x25a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cbe4:	b25b      	sxtb	r3, r3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	da1b      	bge.n	800cc22 <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	7858      	ldrb	r0, [r3, #1]
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	f7fb ff69 	bl	8008ad0 <disk_write>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d005      	beq.n	800cc10 <f_read+0x224>
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e060      	b.n	800ccd2 <f_read+0x2e6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc24:	7858      	ldrb	r0, [r3, #1]
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc30:	f7fb ff2e 	bl	8008a90 <disk_read>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d005      	beq.n	800cc46 <f_read+0x25a>
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc42:	2301      	movs	r3, #1
 800cc44:	e045      	b.n	800ccd2 <f_read+0x2e6>
			}
#endif
			fp->sect = sect;
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc52:	4613      	mov	r3, r2
 800cc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc58:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cc5c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cc5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d901      	bls.n	800cc6a <f_read+0x27e>
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc76:	4613      	mov	r3, r2
 800cc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7c:	440b      	add	r3, r1
 800cc7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc80:	4619      	mov	r1, r3
 800cc82:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cc84:	f7fc f948 	bl	8008f18 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cc88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc8c:	4413      	add	r3, r2
 800cc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc98:	2000      	movs	r0, #0
 800cc9a:	4688      	mov	r8, r1
 800cc9c:	4681      	mov	r9, r0
 800cc9e:	eb12 0108 	adds.w	r1, r2, r8
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	eb43 0309 	adc.w	r3, r3, r9
 800cca8:	60fb      	str	r3, [r7, #12]
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ccb0:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccba:	441a      	add	r2, r3
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f47f aedb 	bne.w	800ca86 <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3754      	adds	r7, #84	@ 0x54
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ccdc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ccdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce0:	b08d      	sub	sp, #52	@ 0x34
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	60b9      	str	r1, [r7, #8]
 800cce8:	607a      	str	r2, [r7, #4]
 800ccea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f107 0210 	add.w	r2, r7, #16
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff fb1e 	bl	800c340 <validate>
 800cd04:	4603      	mov	r3, r0
 800cd06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d108      	bne.n	800cd24 <f_write+0x48>
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cd18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cd1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d002      	beq.n	800cd2a <f_write+0x4e>
 800cd24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd28:	e187      	b.n	800d03a <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd30:	f003 0302 	and.w	r3, r3, #2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <f_write+0x60>
 800cd38:	2307      	movs	r3, #7
 800cd3a:	e17e      	b.n	800d03a <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b04      	cmp	r3, #4
 800cd42:	f000 816a 	beq.w	800d01a <f_write+0x33e>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	18d1      	adds	r1, r2, r3
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd56:	4613      	mov	r3, r2
 800cd58:	4299      	cmp	r1, r3
 800cd5a:	f080 815e 	bcs.w	800d01a <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd64:	4613      	mov	r3, r2
 800cd66:	43db      	mvns	r3, r3
 800cd68:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cd6a:	e156      	b.n	800d01a <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd72:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800cd76:	2500      	movs	r5, #0
 800cd78:	ea54 0305 	orrs.w	r3, r4, r5
 800cd7c:	f040 80fb 	bne.w	800cf76 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cd86:	f04f 0200 	mov.w	r2, #0
 800cd8a:	f04f 0300 	mov.w	r3, #0
 800cd8e:	0a42      	lsrs	r2, r0, #9
 800cd90:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800cd94:	0a4b      	lsrs	r3, r1, #9
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	895b      	ldrh	r3, [r3, #10]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d146      	bne.n	800ce34 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cdac:	4313      	orrs	r3, r2
 800cdae:	d10c      	bne.n	800cdca <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d11a      	bne.n	800cdf2 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fc ff95 	bl	8009cf0 <create_chain>
 800cdc6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cdc8:	e013      	b.n	800cdf2 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d007      	beq.n	800cde2 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f7fd f88a 	bl	8009ef2 <clmt_clust>
 800cdde:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cde0:	e007      	b.n	800cdf2 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cde8:	4619      	mov	r1, r3
 800cdea:	4610      	mov	r0, r2
 800cdec:	f7fc ff80 	bl	8009cf0 <create_chain>
 800cdf0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f000 8115 	beq.w	800d024 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d105      	bne.n	800ce0c <f_write+0x130>
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2202      	movs	r2, #2
 800ce04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce08:	2302      	movs	r3, #2
 800ce0a:	e116      	b.n	800d03a <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce12:	d105      	bne.n	800ce20 <f_write+0x144>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e10c      	b.n	800d03a <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce24:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d102      	bne.n	800ce34 <f_write+0x158>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce32:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce3a:	b25b      	sxtb	r3, r3
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	da1b      	bge.n	800ce78 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	7858      	ldrb	r0, [r3, #1]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce4e:	2301      	movs	r3, #1
 800ce50:	f7fb fe3e 	bl	8008ad0 <disk_write>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d005      	beq.n	800ce66 <f_write+0x18a>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce62:	2301      	movs	r3, #1
 800ce64:	e0e9      	b.n	800d03a <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7e:	4619      	mov	r1, r3
 800ce80:	4610      	mov	r0, r2
 800ce82:	f7fc fb13 	bl	80094ac <clust2sect>
 800ce86:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d105      	bne.n	800ce9a <f_write+0x1be>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2202      	movs	r2, #2
 800ce92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce96:	2302      	movs	r3, #2
 800ce98:	e0cf      	b.n	800d03a <f_write+0x35e>
			sect += csect;
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	4413      	add	r3, r2
 800cea0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	0a5b      	lsrs	r3, r3, #9
 800cea6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d03f      	beq.n	800cf2e <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ceae:	69ba      	ldr	r2, [r7, #24]
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	693a      	ldr	r2, [r7, #16]
 800ceb6:	8952      	ldrh	r2, [r2, #10]
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d905      	bls.n	800cec8 <f_write+0x1ec>
					cc = fs->csize - csect;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	895b      	ldrh	r3, [r3, #10]
 800cec0:	461a      	mov	r2, r3
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	7858      	ldrb	r0, [r3, #1]
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	69f9      	ldr	r1, [r7, #28]
 800ced2:	f7fb fdfd 	bl	8008ad0 <disk_write>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d005      	beq.n	800cee8 <f_write+0x20c>
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cee4:	2301      	movs	r3, #1
 800cee6:	e0a8      	b.n	800d03a <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	6a3a      	ldr	r2, [r7, #32]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d917      	bls.n	800cf26 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	025b      	lsls	r3, r3, #9
 800cf06:	69fa      	ldr	r2, [r7, #28]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf0e:	4619      	mov	r1, r3
 800cf10:	f7fc f802 	bl	8008f18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cf26:	6a3b      	ldr	r3, [r7, #32]
 800cf28:	025b      	lsls	r3, r3, #9
 800cf2a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cf2c:	e04a      	b.n	800cfc4 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d01b      	beq.n	800cf70 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf44:	4290      	cmp	r0, r2
 800cf46:	eb71 0303 	sbcs.w	r3, r1, r3
 800cf4a:	d211      	bcs.n	800cf70 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	7858      	ldrb	r0, [r3, #1]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cf56:	2301      	movs	r3, #1
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	f7fb fd99 	bl	8008a90 <disk_read>
 800cf5e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d005      	beq.n	800cf70 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e064      	b.n	800d03a <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf82:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cf86:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cf88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d901      	bls.n	800cf94 <f_write+0x2b8>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa6:	440b      	add	r3, r1
 800cfa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfaa:	69f9      	ldr	r1, [r7, #28]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fb ffb3 	bl	8008f18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cfc4:	69fa      	ldr	r2, [r7, #28]
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc8:	4413      	add	r3, r2
 800cfca:	61fb      	str	r3, [r7, #28]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cfd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	4688      	mov	r8, r1
 800cfd8:	4681      	mov	r9, r0
 800cfda:	eb12 0a08 	adds.w	sl, r2, r8
 800cfde:	eb43 0b09 	adc.w	fp, r3, r9
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cfee:	68f9      	ldr	r1, [r7, #12]
 800cff0:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800cff4:	4282      	cmp	r2, r0
 800cff6:	eb73 0601 	sbcs.w	r6, r3, r1
 800cffa:	d201      	bcs.n	800d000 <f_write+0x324>
 800cffc:	4602      	mov	r2, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	68f9      	ldr	r1, [r7, #12]
 800d002:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00c:	441a      	add	r2, r3
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f47f aea5 	bne.w	800cd6c <f_write+0x90>
 800d022:	e000      	b.n	800d026 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d024:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d02c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d030:	b2da      	uxtb	r2, r3
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3734      	adds	r7, #52	@ 0x34
 800d03e:	46bd      	mov	sp, r7
 800d040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d044 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b09c      	sub	sp, #112	@ 0x70
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d052:	4611      	mov	r1, r2
 800d054:	4618      	mov	r0, r3
 800d056:	f7ff f973 	bl	800c340 <validate>
 800d05a:	4603      	mov	r3, r0
 800d05c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800d060:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d064:	2b00      	cmp	r3, #0
 800d066:	f040 8119 	bne.w	800d29c <f_sync+0x258>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 8111 	beq.w	800d29c <f_sync+0x258>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d080:	b25b      	sxtb	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	da17      	bge.n	800d0b6 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d088:	7858      	ldrb	r0, [r3, #1]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d094:	2301      	movs	r3, #1
 800d096:	f7fb fd1b 	bl	8008ad0 <disk_write>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <f_sync+0x60>
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e0fd      	b.n	800d2a0 <f_sync+0x25c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d0aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d0b6:	f7fb fbd3 	bl	8008860 <get_fattime>
 800d0ba:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d0bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	f040 80a0 	bne.w	800d206 <f_sync+0x1c2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fc fcfd 	bl	8009ac8 <fill_first_frag>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800d0d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10a      	bne.n	800d0f2 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	f7fc fd1d 	bl	8009b26 <fill_last_frag>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800d0f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f040 80d0 	bne.w	800d29c <f_sync+0x258>
					INIT_NAMBUF(fs);
 800d0fc:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d100:	f001 fca6 	bl	800ea50 <ff_memalloc>
 800d104:	6638      	str	r0, [r7, #96]	@ 0x60
 800d106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <f_sync+0xcc>
 800d10c:	2311      	movs	r3, #17
 800d10e:	e0c7      	b.n	800d2a0 <f_sync+0x25c>
 800d110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d112:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d114:	60da      	str	r2, [r3, #12]
 800d116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d118:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d11a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d11e:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	f107 0308 	add.w	r3, r7, #8
 800d126:	4611      	mov	r1, r2
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fd fcdf 	bl	800aaec <load_obj_dir>
 800d12e:	4603      	mov	r3, r0
 800d130:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800d134:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d160      	bne.n	800d1fe <f_sync+0x1ba>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d13c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	3304      	adds	r3, #4
 800d142:	781a      	ldrb	r2, [r3, #0]
 800d144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	3304      	adds	r3, #4
 800d14a:	f042 0220 	orr.w	r2, r2, #32
 800d14e:	b2d2      	uxtb	r2, r2
 800d150:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	79da      	ldrb	r2, [r3, #7]
 800d156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	3321      	adds	r3, #33	@ 0x21
 800d15c:	f042 0201 	orr.w	r2, r2, #1
 800d160:	b2d2      	uxtb	r2, r2
 800d162:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	4619      	mov	r1, r3
 800d172:	4610      	mov	r0, r2
 800d174:	f7fb fe1c 	bl	8008db0 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d186:	4608      	mov	r0, r1
 800d188:	f7fb fe3e 	bl	8008e08 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d18c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d19a:	4608      	mov	r0, r1
 800d19c:	f7fb fe34 	bl	8008e08 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d1a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	330c      	adds	r3, #12
 800d1a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fb fe01 	bl	8008db0 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d1ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	3315      	adds	r3, #21
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d1b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	3310      	adds	r3, #16
 800d1be:	2100      	movs	r1, #0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fb fdf5 	bl	8008db0 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d1c6:	f107 0308 	add.w	r3, r7, #8
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fd fcc4 	bl	800ab58 <store_xdir>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800d1d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10f      	bne.n	800d1fe <f_sync+0x1ba>
							res = sync_fs(fs);
 800d1de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fc f8f5 	bl	80093d0 <sync_fs>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d1f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800d1fe:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d200:	f001 fc32 	bl	800ea68 <ff_memfree>
 800d204:	e04a      	b.n	800d29c <f_sync+0x258>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d206:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	f7fc f8b0 	bl	8009374 <move_window>
 800d214:	4603      	mov	r3, r0
 800d216:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800d21a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d13c      	bne.n	800d29c <f_sync+0x258>
					dir = fp->dir_ptr;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d226:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d22a:	330b      	adds	r3, #11
 800d22c:	781a      	ldrb	r2, [r3, #0]
 800d22e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d230:	330b      	adds	r3, #11
 800d232:	f042 0220 	orr.w	r2, r2, #32
 800d236:	b2d2      	uxtb	r2, r2
 800d238:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6818      	ldr	r0, [r3, #0]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	461a      	mov	r2, r3
 800d244:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d246:	f7fd f86e 	bl	800a326 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d24a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d24c:	f103 001c 	add.w	r0, r3, #28
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d256:	4613      	mov	r3, r2
 800d258:	4619      	mov	r1, r3
 800d25a:	f7fb fda9 	bl	8008db0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d25e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d260:	3316      	adds	r3, #22
 800d262:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d264:	4618      	mov	r0, r3
 800d266:	f7fb fda3 	bl	8008db0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d26a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d26c:	3312      	adds	r3, #18
 800d26e:	2100      	movs	r1, #0
 800d270:	4618      	mov	r0, r3
 800d272:	f7fb fd82 	bl	8008d7a <st_word>
					fs->wflag = 1;
 800d276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d278:	2201      	movs	r2, #1
 800d27a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d27c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fc f8a6 	bl	80093d0 <sync_fs>
 800d284:	4603      	mov	r3, r0
 800d286:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d294:	b2da      	uxtb	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d29c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3770      	adds	r7, #112	@ 0x70
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7ff fec7 	bl	800d044 <f_sync>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d118      	bne.n	800d2f2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f107 0208 	add.w	r2, r7, #8
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff f839 	bl	800c340 <validate>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10c      	bne.n	800d2f2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fb ffa5 	bl	800922c <dec_lock>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d102      	bne.n	800d2f2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b086      	sub	sp, #24
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d101      	bne.n	800d310 <f_opendir+0x14>
 800d30c:	2309      	movs	r3, #9
 800d30e:	e0af      	b.n	800d470 <f_opendir+0x174>

	/* Get logical drive */
	obj = &dp->obj;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d314:	f107 0108 	add.w	r1, r7, #8
 800d318:	463b      	mov	r3, r7
 800d31a:	2200      	movs	r2, #0
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7fe fcbd 	bl	800bc9c <find_volume>
 800d322:	4603      	mov	r3, r0
 800d324:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d326:	7dfb      	ldrb	r3, [r7, #23]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f040 809a 	bne.w	800d462 <f_opendir+0x166>
		obj->fs = fs;
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d334:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d338:	f001 fb8a 	bl	800ea50 <ff_memalloc>
 800d33c:	60f8      	str	r0, [r7, #12]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d101      	bne.n	800d348 <f_opendir+0x4c>
 800d344:	2311      	movs	r3, #17
 800d346:	e093      	b.n	800d470 <f_opendir+0x174>
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	60da      	str	r2, [r3, #12]
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d356:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7fe fb4b 	bl	800b9f8 <follow_path>
 800d362:	4603      	mov	r3, r0
 800d364:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d172      	bne.n	800d452 <f_opendir+0x156>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d372:	b25b      	sxtb	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	db47      	blt.n	800d408 <f_opendir+0x10c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	799b      	ldrb	r3, [r3, #6]
 800d37c:	f003 0310 	and.w	r3, r3, #16
 800d380:	2b00      	cmp	r3, #0
 800d382:	d03f      	beq.n	800d404 <f_opendir+0x108>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	2b04      	cmp	r3, #4
 800d38a:	d130      	bne.n	800d3ee <f_opendir+0xf2>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	689a      	ldr	r2, [r3, #8]
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d39a:	4613      	mov	r3, r2
 800d39c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	79d2      	ldrb	r2, [r2, #7]
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	691b      	ldr	r3, [r3, #16]
 800d3b6:	3334      	adds	r3, #52	@ 0x34
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fb fbe0 	bl	8008b7e <ld_dword>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	3338      	adds	r3, #56	@ 0x38
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fb fbfa 	bl	8008bc4 <ld_qword>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	6939      	ldr	r1, [r7, #16]
 800d3d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	691b      	ldr	r3, [r3, #16]
 800d3de:	3321      	adds	r3, #33	@ 0x21
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f003 0302 	and.w	r3, r3, #2
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	71da      	strb	r2, [r3, #7]
 800d3ec:	e00c      	b.n	800d408 <f_opendir+0x10c>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	f7fc ff76 	bl	800a2e8 <ld_clust>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	609a      	str	r2, [r3, #8]
 800d402:	e001      	b.n	800d408 <f_opendir+0x10c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d404:	2305      	movs	r3, #5
 800d406:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d408:	7dfb      	ldrb	r3, [r7, #23]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d121      	bne.n	800d452 <f_opendir+0x156>
				obj->id = fs->id;
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	88da      	ldrh	r2, [r3, #6]
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d416:	2100      	movs	r1, #0
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7fc fdae 	bl	8009f7a <dir_sdi>
 800d41e:	4603      	mov	r3, r0
 800d420:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d422:	7dfb      	ldrb	r3, [r7, #23]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d114      	bne.n	800d452 <f_opendir+0x156>
					if (obj->sclust) {
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00d      	beq.n	800d44c <f_opendir+0x150>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d430:	2100      	movs	r1, #0
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7fb fe6c 	bl	8009110 <inc_lock>
 800d438:	4602      	mov	r2, r0
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d442:	2b00      	cmp	r3, #0
 800d444:	d105      	bne.n	800d452 <f_opendir+0x156>
 800d446:	2312      	movs	r3, #18
 800d448:	75fb      	strb	r3, [r7, #23]
 800d44a:	e002      	b.n	800d452 <f_opendir+0x156>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	2200      	movs	r2, #0
 800d450:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f001 fb08 	bl	800ea68 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d458:	7dfb      	ldrb	r3, [r7, #23]
 800d45a:	2b04      	cmp	r3, #4
 800d45c:	d101      	bne.n	800d462 <f_opendir+0x166>
 800d45e:	2305      	movs	r3, #5
 800d460:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <f_opendir+0x172>
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	2200      	movs	r2, #0
 800d46c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3718      	adds	r7, #24
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f107 0208 	add.w	r2, r7, #8
 800d486:	4611      	mov	r1, r2
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fe ff59 	bl	800c340 <validate>
 800d48e:	4603      	mov	r3, r0
 800d490:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d492:	7bfb      	ldrb	r3, [r7, #15]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d110      	bne.n	800d4ba <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d006      	beq.n	800d4ae <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fb fec1 	bl	800922c <dec_lock>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d102      	bne.n	800d4ba <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f107 020c 	add.w	r2, r7, #12
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe ff32 	bl	800c340 <validate>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d13b      	bne.n	800d55e <f_readdir+0x9a>
		if (!fno) {
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d106      	bne.n	800d4fa <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d4ec:	2100      	movs	r1, #0
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7fc fd43 	bl	8009f7a <dir_sdi>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	75fb      	strb	r3, [r7, #23]
 800d4f8:	e031      	b.n	800d55e <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 800d4fa:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d4fe:	f001 faa7 	bl	800ea50 <ff_memalloc>
 800d502:	6138      	str	r0, [r7, #16]
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d101      	bne.n	800d50e <f_readdir+0x4a>
 800d50a:	2311      	movs	r3, #17
 800d50c:	e028      	b.n	800d560 <f_readdir+0x9c>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	693a      	ldr	r2, [r7, #16]
 800d512:	60da      	str	r2, [r3, #12]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d51c:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800d51e:	2100      	movs	r1, #0
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7fd fbdb 	bl	800acdc <dir_read>
 800d526:	4603      	mov	r3, r0
 800d528:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	d101      	bne.n	800d534 <f_readdir+0x70>
 800d530:	2300      	movs	r3, #0
 800d532:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800d534:	7dfb      	ldrb	r3, [r7, #23]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10e      	bne.n	800d558 <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d53a:	6839      	ldr	r1, [r7, #0]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7fd ff65 	bl	800b40c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d542:	2100      	movs	r1, #0
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7fc fd9e 	bl	800a086 <dir_next>
 800d54a:	4603      	mov	r3, r0
 800d54c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	2b04      	cmp	r3, #4
 800d552:	d101      	bne.n	800d558 <f_readdir+0x94>
 800d554:	2300      	movs	r3, #0
 800d556:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800d558:	6938      	ldr	r0, [r7, #16]
 800d55a:	f001 fa85 	bl	800ea68 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800d55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3718      	adds	r7, #24
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b098      	sub	sp, #96	@ 0x60
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d572:	f107 0108 	add.w	r1, r7, #8
 800d576:	1d3b      	adds	r3, r7, #4
 800d578:	2200      	movs	r2, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fe fb8e 	bl	800bc9c <find_volume>
 800d580:	4603      	mov	r3, r0
 800d582:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d586:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d134      	bne.n	800d5f8 <f_stat+0x90>
		INIT_NAMBUF(dj.obj.fs);
 800d58e:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d592:	f001 fa5d 	bl	800ea50 <ff_memalloc>
 800d596:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <f_stat+0x3a>
 800d59e:	2311      	movs	r3, #17
 800d5a0:	e02c      	b.n	800d5fc <f_stat+0x94>
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5a6:	60da      	str	r2, [r3, #12]
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5ac:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d5b0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	f107 0308 	add.w	r3, r7, #8
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe fa1c 	bl	800b9f8 <follow_path>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d5c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d111      	bne.n	800d5f2 <f_stat+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d5ce:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d5d2:	b25b      	sxtb	r3, r3
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	da03      	bge.n	800d5e0 <f_stat+0x78>
				res = FR_INVALID_NAME;
 800d5d8:	2306      	movs	r3, #6
 800d5da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d5de:	e008      	b.n	800d5f2 <f_stat+0x8a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d005      	beq.n	800d5f2 <f_stat+0x8a>
 800d5e6:	f107 0308 	add.w	r3, r7, #8
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fd ff0d 	bl	800b40c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800d5f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d5f4:	f001 fa38 	bl	800ea68 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800d5f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3760      	adds	r7, #96	@ 0x60
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b0a9      	sub	sp, #164	@ 0xa4
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	607a      	str	r2, [r7, #4]
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	460b      	mov	r3, r1
 800d612:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800d614:	2301      	movs	r3, #1
 800d616:	657b      	str	r3, [r7, #84]	@ 0x54
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800d618:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d61c:	653b      	str	r3, [r7, #80]	@ 0x50
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800d61e:	f107 030c 	add.w	r3, r7, #12
 800d622:	4618      	mov	r0, r3
 800d624:	f7fe fa91 	bl	800bb4a <get_ldnumber>
 800d628:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d62a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	da02      	bge.n	800d636 <f_mkfs+0x32>
 800d630:	230b      	movs	r3, #11
 800d632:	f001 b8c3 	b.w	800e7bc <f_mkfs+0x11b8>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800d636:	4a9b      	ldr	r2, [pc, #620]	@ (800d8a4 <f_mkfs+0x2a0>)
 800d638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d005      	beq.n	800d64e <f_mkfs+0x4a>
 800d642:	4a98      	ldr	r2, [pc, #608]	@ (800d8a4 <f_mkfs+0x2a0>)
 800d644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d64a:	2200      	movs	r2, #0
 800d64c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800d64e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d650:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800d654:	2300      	movs	r3, #0
 800d656:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800d65a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fb f9f0 	bl	8008a44 <disk_initialize>
 800d664:	4603      	mov	r3, r0
 800d666:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d66a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	d002      	beq.n	800d67c <f_mkfs+0x78>
 800d676:	2303      	movs	r3, #3
 800d678:	f001 b8a0 	b.w	800e7bc <f_mkfs+0x11b8>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d67c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800d680:	f003 0304 	and.w	r3, r3, #4
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <f_mkfs+0x8a>
 800d688:	230a      	movs	r3, #10
 800d68a:	f001 b897 	b.w	800e7bc <f_mkfs+0x11b8>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800d68e:	f107 0220 	add.w	r2, r7, #32
 800d692:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d696:	2103      	movs	r1, #3
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fb fa39 	bl	8008b10 <disk_ioctl>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10c      	bne.n	800d6be <f_mkfs+0xba>
 800d6a4:	6a3b      	ldr	r3, [r7, #32]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d009      	beq.n	800d6be <f_mkfs+0xba>
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6b0:	d805      	bhi.n	800d6be <f_mkfs+0xba>
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	1e5a      	subs	r2, r3, #1
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <f_mkfs+0xbe>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	623b      	str	r3, [r7, #32]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800d6c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d6c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d004      	beq.n	800d6da <f_mkfs+0xd6>
 800d6d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d309      	bcc.n	800d6ee <f_mkfs+0xea>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6e0:	d805      	bhi.n	800d6ee <f_mkfs+0xea>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	1e5a      	subs	r2, r3, #1
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d002      	beq.n	800d6f4 <f_mkfs+0xf0>
 800d6ee:	2313      	movs	r3, #19
 800d6f0:	f001 b864 	b.w	800e7bc <f_mkfs+0x11b8>
	au /= ss;	/* Cluster size in unit of sector */
 800d6f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6fe:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	643b      	str	r3, [r7, #64]	@ 0x40
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d704:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d708:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d70c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d710:	63fb      	str	r3, [r7, #60]	@ 0x3c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d712:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d718:	fb02 f303 	mul.w	r3, r2, r3
 800d71c:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d720:	2b00      	cmp	r3, #0
 800d722:	d102      	bne.n	800d72a <f_mkfs+0x126>
 800d724:	230e      	movs	r3, #14
 800d726:	f001 b849 	b.w	800e7bc <f_mkfs+0x11b8>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d72a:	f107 021c 	add.w	r2, r7, #28
 800d72e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d732:	2101      	movs	r1, #1
 800d734:	4618      	mov	r0, r3
 800d736:	f7fb f9eb 	bl	8008b10 <disk_ioctl>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <f_mkfs+0x142>
 800d740:	2301      	movs	r3, #1
 800d742:	f001 b83b 	b.w	800e7bc <f_mkfs+0x11b8>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d746:	7afb      	ldrb	r3, [r7, #11]
 800d748:	f003 0308 	and.w	r3, r3, #8
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <f_mkfs+0x150>
 800d750:	2300      	movs	r3, #0
 800d752:	e000      	b.n	800d756 <f_mkfs+0x152>
 800d754:	233f      	movs	r3, #63	@ 0x3f
 800d756:	637b      	str	r3, [r7, #52]	@ 0x34
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d902      	bls.n	800d766 <f_mkfs+0x162>
 800d760:	230e      	movs	r3, #14
 800d762:	f001 b82b 	b.w	800e7bc <f_mkfs+0x11b8>
		sz_vol -= b_vol;						/* Volume size */
 800d766:	69fa      	ldr	r2, [r7, #28]
 800d768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	61fb      	str	r3, [r7, #28]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	2b7f      	cmp	r3, #127	@ 0x7f
 800d772:	d802      	bhi.n	800d77a <f_mkfs+0x176>
 800d774:	230e      	movs	r3, #14
 800d776:	f001 b821 	b.w	800e7bc <f_mkfs+0x11b8>

	/* Pre-determine the FAT type */
	do {
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
 800d77a:	7afb      	ldrb	r3, [r7, #11]
 800d77c:	f003 0304 	and.w	r3, r3, #4
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00f      	beq.n	800d7a4 <f_mkfs+0x1a0>
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
 800d784:	7afb      	ldrb	r3, [r7, #11]
 800d786:	f003 0307 	and.w	r3, r3, #7
 800d78a:	2b04      	cmp	r3, #4
 800d78c:	d006      	beq.n	800d79c <f_mkfs+0x198>
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d794:	d202      	bcs.n	800d79c <f_mkfs+0x198>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2b80      	cmp	r3, #128	@ 0x80
 800d79a:	d903      	bls.n	800d7a4 <f_mkfs+0x1a0>
				fmt = FS_EXFAT; break;
 800d79c:	2304      	movs	r3, #4
 800d79e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d7a2:	e023      	b.n	800d7ec <f_mkfs+0x1e8>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b80      	cmp	r3, #128	@ 0x80
 800d7a8:	d902      	bls.n	800d7b0 <f_mkfs+0x1ac>
 800d7aa:	2313      	movs	r3, #19
 800d7ac:	f001 b806 	b.w	800e7bc <f_mkfs+0x11b8>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d7b0:	7afb      	ldrb	r3, [r7, #11]
 800d7b2:	f003 0302 	and.w	r3, r3, #2
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00d      	beq.n	800d7d6 <f_mkfs+0x1d2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d7ba:	7afb      	ldrb	r3, [r7, #11]
 800d7bc:	f003 0307 	and.w	r3, r3, #7
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d004      	beq.n	800d7ce <f_mkfs+0x1ca>
 800d7c4:	7afb      	ldrb	r3, [r7, #11]
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d103      	bne.n	800d7d6 <f_mkfs+0x1d2>
				fmt = FS_FAT32; break;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d7d4:	e00a      	b.n	800d7ec <f_mkfs+0x1e8>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d7d6:	7afb      	ldrb	r3, [r7, #11]
 800d7d8:	f003 0301 	and.w	r3, r3, #1
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <f_mkfs+0x1e2>
 800d7e0:	2313      	movs	r3, #19
 800d7e2:	f000 bfeb 	b.w	800e7bc <f_mkfs+0x11b8>
		fmt = FS_FAT16;
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	} while (0);

#if _FS_EXFAT
	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
 800d7ec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d7f0:	2b04      	cmp	r3, #4
 800d7f2:	f040 842b 	bne.w	800e04c <f_mkfs+0xa48>
		DWORD szb_bit, szb_case, sum, nb, cl;
		WCHAR ch, si;
		UINT j, st;
		BYTE b;

		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7fc:	d202      	bcs.n	800d804 <f_mkfs+0x200>
 800d7fe:	230e      	movs	r3, #14
 800d800:	f000 bfdc 	b.w	800e7bc <f_mkfs+0x11b8>
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (!au) {	/* au auto-selection */
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10e      	bne.n	800d828 <f_mkfs+0x224>
			au = 8;
 800d80a:	2308      	movs	r3, #8
 800d80c:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d814:	d301      	bcc.n	800d81a <f_mkfs+0x216>
 800d816:	2340      	movs	r3, #64	@ 0x40
 800d818:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d820:	d302      	bcc.n	800d828 <f_mkfs+0x224>
 800d822:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d826:	607b      	str	r3, [r7, #4]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 800d828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82a:	3320      	adds	r3, #32
 800d82c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
 800d830:	69fa      	ldr	r2, [r7, #28]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	fbb2 f3f3 	udiv	r3, r2, r3
 800d838:	3302      	adds	r3, #2
 800d83a:	009a      	lsls	r2, r3, #2
 800d83c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d840:	4413      	add	r3, r2
 800d842:	1e5a      	subs	r2, r3, #1
 800d844:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d848:	fbb2 f3f3 	udiv	r3, r2, r3
 800d84c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block boundary */
 800d850:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d858:	441a      	add	r2, r3
 800d85a:	6a3b      	ldr	r3, [r7, #32]
 800d85c:	4413      	add	r3, r2
 800d85e:	1e5a      	subs	r2, r3, #1
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	425b      	negs	r3, r3
 800d864:	4013      	ands	r3, r2
 800d866:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	085b      	lsrs	r3, r3, #1
 800d86c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d86e:	429a      	cmp	r2, r3
 800d870:	d302      	bcc.n	800d878 <f_mkfs+0x274>
 800d872:	230e      	movs	r3, #14
 800d874:	f000 bfa2 	b.w	800e7bc <f_mkfs+0x11b8>
		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
 800d878:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87c:	1ad2      	subs	r2, r2, r3
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	441a      	add	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	fbb2 f3f3 	udiv	r3, r2, r3
 800d888:	633b      	str	r3, [r7, #48]	@ 0x30
		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	2b0f      	cmp	r3, #15
 800d88e:	d802      	bhi.n	800d896 <f_mkfs+0x292>
 800d890:	230e      	movs	r3, #14
 800d892:	f000 bf93 	b.w	800e7bc <f_mkfs+0x11b8>
		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
 800d896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d898:	4a03      	ldr	r2, [pc, #12]	@ (800d8a8 <f_mkfs+0x2a4>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d906      	bls.n	800d8ac <f_mkfs+0x2a8>
 800d89e:	230e      	movs	r3, #14
 800d8a0:	f000 bf8c 	b.w	800e7bc <f_mkfs+0x11b8>
 800d8a4:	20001214 	.word	0x20001214
 800d8a8:	7ffffffd 	.word	0x7ffffffd

		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ae:	3307      	adds	r3, #7
 800d8b0:	08db      	lsrs	r3, r3, #3
 800d8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
 800d8b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	fb03 f202 	mul.w	r2, r3, r2
 800d8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c0:	4413      	add	r3, r2
 800d8c2:	1e5a      	subs	r2, r3, #1
 800d8c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8c8:	6879      	ldr	r1, [r7, #4]
 800d8ca:	fb01 f303 	mul.w	r3, r1, r3
 800d8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8d2:	613b      	str	r3, [r7, #16]

		/* Create a compressed up-case table */
		sect = b_data + au * tbl[0];	/* Table start sector */
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	fb02 f303 	mul.w	r3, r2, r3
 800d8dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8de:	4413      	add	r3, r2
 800d8e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		sum = 0;						/* Table checksum to be stored in the 82 entry */
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	673b      	str	r3, [r7, #112]	@ 0x70
		st = si = i = j = szb_case = 0;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	663b      	str	r3, [r7, #96]	@ 0x60
 800d8f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d8f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d8f6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d8fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d8fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			switch (st) {
 800d900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d902:	2b00      	cmp	r3, #0
 800d904:	d003      	beq.n	800d90e <f_mkfs+0x30a>
 800d906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d040      	beq.n	800d98e <f_mkfs+0x38a>
 800d90c:	e04f      	b.n	800d9ae <f_mkfs+0x3aa>
			case 0:
				ch = ff_wtoupper(si);	/* Get an up-case char */
 800d90e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d912:	4618      	mov	r0, r3
 800d914:	f001 f812 	bl	800e93c <ff_wtoupper>
 800d918:	4603      	mov	r3, r0
 800d91a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (ch != si) {
 800d91e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800d922:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d926:	429a      	cmp	r2, r3
 800d928:	d005      	beq.n	800d936 <f_mkfs+0x332>
					si++; break;		/* Store the up-case char if exist */
 800d92a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d92e:	3301      	adds	r3, #1
 800d930:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d934:	e049      	b.n	800d9ca <f_mkfs+0x3c6>
				}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 800d936:	2301      	movs	r3, #1
 800d938:	663b      	str	r3, [r7, #96]	@ 0x60
 800d93a:	e002      	b.n	800d942 <f_mkfs+0x33e>
 800d93c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d93e:	3301      	adds	r3, #1
 800d940:	663b      	str	r3, [r7, #96]	@ 0x60
 800d942:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d944:	b29a      	uxth	r2, r3
 800d946:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d94a:	4413      	add	r3, r2
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d011      	beq.n	800d976 <f_mkfs+0x372>
 800d952:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d954:	b29a      	uxth	r2, r3
 800d956:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d95a:	4413      	add	r3, r2
 800d95c:	b29c      	uxth	r4, r3
 800d95e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d960:	b29a      	uxth	r2, r3
 800d962:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d966:	4413      	add	r3, r2
 800d968:	b29b      	uxth	r3, r3
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 ffe6 	bl	800e93c <ff_wtoupper>
 800d970:	4603      	mov	r3, r0
 800d972:	429c      	cmp	r4, r3
 800d974:	d0e2      	beq.n	800d93c <f_mkfs+0x338>
				if (j >= 128) {
 800d976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d978:	2b7f      	cmp	r3, #127	@ 0x7f
 800d97a:	d906      	bls.n	800d98a <f_mkfs+0x386>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
 800d97c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d980:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d984:	2302      	movs	r3, #2
 800d986:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d988:	e01f      	b.n	800d9ca <f_mkfs+0x3c6>
				}
				st = 1;			/* Do not compress short run */
 800d98a:	2301      	movs	r3, #1
 800d98c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				/* go to next case */
			case 1:
				ch = si++;		/* Fill the short run */
 800d98e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	f8a7 2064 	strh.w	r2, [r7, #100]	@ 0x64
 800d998:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (--j == 0) st = 0;
 800d99c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d9a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d10f      	bne.n	800d9c8 <f_mkfs+0x3c4>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
				break;
 800d9ac:	e00c      	b.n	800d9c8 <f_mkfs+0x3c4>

			default:
				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
 800d9ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9b0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d9b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d9bc:	4413      	add	r3, r2
 800d9be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				st = 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9c6:	e000      	b.n	800d9ca <f_mkfs+0x3c6>
				break;
 800d9c8:	bf00      	nop
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
 800d9ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9ce:	4413      	add	r3, r2
 800d9d0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800d9d4:	b2d2      	uxtb	r2, r2
 800d9d6:	701a      	strb	r2, [r3, #0]
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fc ff24 	bl	800a82a <xsum32>
 800d9e2:	6738      	str	r0, [r7, #112]	@ 0x70
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 800d9e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d9e8:	0a1b      	lsrs	r3, r3, #8
 800d9ea:	b299      	uxth	r1, r3
 800d9ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9f2:	4413      	add	r3, r2
 800d9f4:	b2ca      	uxtb	r2, r1
 800d9f6:	701a      	strb	r2, [r3, #0]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fc ff14 	bl	800a82a <xsum32>
 800da02:	6738      	str	r0, [r7, #112]	@ 0x70
			i += 2; szb_case += 2;
 800da04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da06:	3302      	adds	r3, #2
 800da08:	67bb      	str	r3, [r7, #120]	@ 0x78
 800da0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da0c:	3302      	adds	r3, #2
 800da0e:	677b      	str	r3, [r7, #116]	@ 0x74
			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
 800da10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800da14:	2b00      	cmp	r3, #0
 800da16:	d003      	beq.n	800da20 <f_mkfs+0x41c>
 800da18:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800da1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d122      	bne.n	800da66 <f_mkfs+0x462>
				n = (i + ss - 1) / ss;
 800da20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800da24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da26:	4413      	add	r3, r2
 800da28:	1e5a      	subs	r2, r3, #1
 800da2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800da36:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800da3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da3e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800da42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da44:	f7fb f844 	bl	8008ad0 <disk_write>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d002      	beq.n	800da54 <f_mkfs+0x450>
 800da4e:	2301      	movs	r3, #1
 800da50:	f000 beb4 	b.w	800e7bc <f_mkfs+0x11b8>
				sect += n; i = 0;
 800da54:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800da58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da5c:	4413      	add	r3, r2
 800da5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da62:	2300      	movs	r3, #0
 800da64:	67bb      	str	r3, [r7, #120]	@ 0x78
			}
		} while (si);
 800da66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f47f af48 	bne.w	800d900 <f_mkfs+0x2fc>
		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
 800da70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	fb03 f202 	mul.w	r2, r3, r2
 800da7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da7c:	4413      	add	r3, r2
 800da7e:	1e5a      	subs	r2, r3, #1
 800da80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da84:	6879      	ldr	r1, [r7, #4]
 800da86:	fb01 f303 	mul.w	r3, r1, r3
 800da8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8e:	617b      	str	r3, [r7, #20]
		tbl[2] = 1;										/* Number of root dir clusters */
 800da90:	2301      	movs	r3, #1
 800da92:	61bb      	str	r3, [r7, #24]

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
 800da94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da9a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800da9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa0:	4413      	add	r3, r2
 800daa2:	1e5a      	subs	r2, r3, #1
 800daa4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800daa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800daac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
 800dab0:	693a      	ldr	r2, [r7, #16]
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	441a      	add	r2, r3
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	4413      	add	r3, r2
 800daba:	66fb      	str	r3, [r7, #108]	@ 0x6c
		do {
			mem_set(buf, 0, szb_buf);
 800dabc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dabe:	2100      	movs	r1, #0
 800dac0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dac2:	f7fb fa4a 	bl	8008f5a <mem_set>
			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
 800dac6:	2300      	movs	r3, #0
 800dac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800daca:	e009      	b.n	800dae0 <f_mkfs+0x4dc>
 800dacc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	67ba      	str	r2, [r7, #120]	@ 0x78
 800dad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dad4:	4413      	add	r3, r2
 800dad6:	22ff      	movs	r2, #255	@ 0xff
 800dad8:	701a      	strb	r2, [r3, #0]
 800dada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dadc:	3b08      	subs	r3, #8
 800dade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dae2:	2b07      	cmp	r3, #7
 800dae4:	d903      	bls.n	800daee <f_mkfs+0x4ea>
 800dae6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daea:	429a      	cmp	r2, r3
 800daec:	d3ee      	bcc.n	800dacc <f_mkfs+0x4c8>
			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
 800daee:	2301      	movs	r3, #1
 800daf0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800daf4:	e013      	b.n	800db1e <f_mkfs+0x51a>
 800daf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800daf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dafa:	4413      	add	r3, r2
 800dafc:	7819      	ldrb	r1, [r3, #0]
 800dafe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db02:	4413      	add	r3, r2
 800db04:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800db08:	430a      	orrs	r2, r1
 800db0a:	b2d2      	uxtb	r2, r2
 800db0c:	701a      	strb	r2, [r3, #0]
 800db0e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800db12:	005b      	lsls	r3, r3, #1
 800db14:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800db18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db1a:	3b01      	subs	r3, #1
 800db1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db20:	2b00      	cmp	r3, #0
 800db22:	d003      	beq.n	800db2c <f_mkfs+0x528>
 800db24:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800db26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db28:	429a      	cmp	r2, r3
 800db2a:	d3e4      	bcc.n	800daf6 <f_mkfs+0x4f2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 800db2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800db30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db32:	4293      	cmp	r3, r2
 800db34:	bf28      	it	cs
 800db36:	4613      	movcs	r3, r2
 800db38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800db3c:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800db40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db44:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800db48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db4a:	f7fa ffc1 	bl	8008ad0 <disk_write>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <f_mkfs+0x556>
 800db54:	2301      	movs	r3, #1
 800db56:	f000 be31 	b.w	800e7bc <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 800db5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800db5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db62:	4413      	add	r3, r2
 800db64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db68:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800db6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 800db76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d19e      	bne.n	800dabc <f_mkfs+0x4b8>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 800db7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800db82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		j = nb = cl = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db98:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
 800db9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db9c:	2100      	movs	r1, #0
 800db9e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dba0:	f7fb f9db 	bl	8008f5a <mem_set>
 800dba4:	2300      	movs	r3, #0
 800dba6:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (cl == 0) {	/* Set entry 0 and 1 */
 800dba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d134      	bne.n	800dc18 <f_mkfs+0x614>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
 800dbae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f06f 0107 	mvn.w	r1, #7
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fb f8f9 	bl	8008db0 <st_dword>
 800dbbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	66bb      	str	r3, [r7, #104]	@ 0x68
				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
 800dbca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbce:	4413      	add	r3, r2
 800dbd0:	f04f 31ff 	mov.w	r1, #4294967295
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fb f8eb 	bl	8008db0 <st_dword>
 800dbda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbdc:	3304      	adds	r3, #4
 800dbde:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	66bb      	str	r3, [r7, #104]	@ 0x68
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nb && i < szb_buf) {			/* Create a chain */
 800dbe6:	e017      	b.n	800dc18 <f_mkfs+0x614>
					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 800dbe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbec:	441a      	add	r2, r3
 800dbee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d902      	bls.n	800dbfa <f_mkfs+0x5f6>
 800dbf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	e001      	b.n	800dbfe <f_mkfs+0x5fa>
 800dbfa:	f04f 33ff 	mov.w	r3, #4294967295
 800dbfe:	4619      	mov	r1, r3
 800dc00:	4610      	mov	r0, r2
 800dc02:	f7fb f8d5 	bl	8008db0 <st_dword>
					i += 4; cl++; nb--;
 800dc06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc08:	3304      	adds	r3, #4
 800dc0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc0e:	3301      	adds	r3, #1
 800dc10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc14:	3b01      	subs	r3, #1
 800dc16:	66fb      	str	r3, [r7, #108]	@ 0x6c
				while (nb && i < szb_buf) {			/* Create a chain */
 800dc18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d003      	beq.n	800dc26 <f_mkfs+0x622>
 800dc1e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d3e0      	bcc.n	800dbe8 <f_mkfs+0x5e4>
				}
				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
 800dc26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d10b      	bne.n	800dc44 <f_mkfs+0x640>
 800dc2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d808      	bhi.n	800dc44 <f_mkfs+0x640>
 800dc32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc34:	1c5a      	adds	r2, r3, #1
 800dc36:	663a      	str	r2, [r7, #96]	@ 0x60
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	33a0      	adds	r3, #160	@ 0xa0
 800dc3c:	443b      	add	r3, r7
 800dc3e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800dc42:	66fb      	str	r3, [r7, #108]	@ 0x6c
			} while (nb && i < szb_buf);
 800dc44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d003      	beq.n	800dc52 <f_mkfs+0x64e>
 800dc4a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d3e2      	bcc.n	800dc18 <f_mkfs+0x614>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 800dc52:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dc56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	bf28      	it	cs
 800dc5c:	4613      	movcs	r3, r2
 800dc5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800dc62:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800dc66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc6a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dc6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dc70:	f7fa ff2e 	bl	8008ad0 <disk_write>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <f_mkfs+0x67c>
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	f000 bd9e 	b.w	800e7bc <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 800dc80:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dc84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc88:	4413      	add	r3, r2
 800dc8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dc8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dc92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc96:	1ad3      	subs	r3, r2, r3
 800dc98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 800dc9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f47f af7a 	bne.w	800db9a <f_mkfs+0x596>

		/* Initialize the root directory */
		mem_set(buf, 0, szb_buf);
 800dca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dca8:	2100      	movs	r1, #0
 800dcaa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dcac:	f7fb f955 	bl	8008f5a <mem_set>
		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
 800dcb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcb2:	2283      	movs	r2, #131	@ 0x83
 800dcb4:	701a      	strb	r2, [r3, #0]
		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
 800dcb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcb8:	3320      	adds	r3, #32
 800dcba:	2281      	movs	r2, #129	@ 0x81
 800dcbc:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 1 + 20, 2);
 800dcbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcc0:	3334      	adds	r3, #52	@ 0x34
 800dcc2:	2102      	movs	r1, #2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fb f873 	bl	8008db0 <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
 800dcca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dccc:	3338      	adds	r3, #56	@ 0x38
 800dcce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fb f86d 	bl	8008db0 <st_dword>
		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
 800dcd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcd8:	3340      	adds	r3, #64	@ 0x40
 800dcda:	2282      	movs	r2, #130	@ 0x82
 800dcdc:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 2 + 4, sum);
 800dcde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dce0:	3344      	adds	r3, #68	@ 0x44
 800dce2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fb f863 	bl	8008db0 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
 800dcea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcec:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	3302      	adds	r3, #2
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4610      	mov	r0, r2
 800dcf8:	f7fb f85a 	bl	8008db0 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);
 800dcfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcfe:	3358      	adds	r3, #88	@ 0x58
 800dd00:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fb f854 	bl	8008db0 <st_dword>
		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of sectors */
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	fb02 f303 	mul.w	r3, r2, r3
 800dd14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd16:	4413      	add	r3, r2
 800dd18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800dd22:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dd26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	bf28      	it	cs
 800dd2c:	4613      	movcs	r3, r2
 800dd2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800dd32:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800dd36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd3a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dd3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd40:	f7fa fec6 	bl	8008ad0 <disk_write>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d002      	beq.n	800dd50 <f_mkfs+0x74c>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	f000 bd36 	b.w	800e7bc <f_mkfs+0x11b8>
			mem_set(buf, 0, ss);
 800dd50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dd54:	461a      	mov	r2, r3
 800dd56:	2100      	movs	r1, #0
 800dd58:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dd5a:	f7fb f8fe 	bl	8008f5a <mem_set>
			sect += n; nsect -= n;
 800dd5e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dd62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd66:	4413      	add	r3, r2
 800dd68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dd6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dd70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 800dd7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1cf      	bne.n	800dd22 <f_mkfs+0x71e>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
 800dd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (n = 0; n < 2; n++) {
 800dd88:	2300      	movs	r3, #0
 800dd8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dd8e:	e157      	b.n	800e040 <f_mkfs+0xa3c>
			/* Main record (+0) */
			mem_set(buf, 0, ss);
 800dd90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dd94:	461a      	mov	r2, r3
 800dd96:	2100      	movs	r1, #0
 800dd98:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dd9a:	f7fb f8de 	bl	8008f5a <mem_set>
			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 800dd9e:	220b      	movs	r2, #11
 800dda0:	49b5      	ldr	r1, [pc, #724]	@ (800e078 <f_mkfs+0xa74>)
 800dda2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dda4:	f7fb f8b8 	bl	8008f18 <mem_cpy>
			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 800dda8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddaa:	3340      	adds	r3, #64	@ 0x40
 800ddac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fa fffe 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 800ddb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddb6:	3348      	adds	r3, #72	@ 0x48
 800ddb8:	69fa      	ldr	r2, [r7, #28]
 800ddba:	4611      	mov	r1, r2
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fa fff7 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
 800ddc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddc4:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 800ddc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ddcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	f7fa ffed 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 800ddd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddd8:	3354      	adds	r3, #84	@ 0x54
 800ddda:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fa ffe6 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
 800dde4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dde6:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800ddea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	f7fa ffdd 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 800ddf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddf8:	335c      	adds	r3, #92	@ 0x5c
 800ddfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fa ffd7 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
 800de02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de04:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	4413      	add	r3, r2
 800de0e:	3302      	adds	r3, #2
 800de10:	4619      	mov	r1, r3
 800de12:	f7fa ffcd 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
 800de16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de18:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 800de1c:	f7fa fd20 	bl	8008860 <get_fattime>
 800de20:	4603      	mov	r3, r0
 800de22:	4619      	mov	r1, r3
 800de24:	4620      	mov	r0, r4
 800de26:	f7fa ffc3 	bl	8008db0 <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
 800de2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de2c:	3368      	adds	r3, #104	@ 0x68
 800de2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800de32:	4618      	mov	r0, r3
 800de34:	f7fa ffa1 	bl	8008d7a <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
 800de38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de3a:	336c      	adds	r3, #108	@ 0x6c
 800de3c:	2200      	movs	r2, #0
 800de3e:	701a      	strb	r2, [r3, #0]
 800de40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800de44:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de46:	e005      	b.n	800de54 <f_mkfs+0x850>
 800de48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de4a:	336c      	adds	r3, #108	@ 0x6c
 800de4c:	781a      	ldrb	r2, [r3, #0]
 800de4e:	3201      	adds	r2, #1
 800de50:	b2d2      	uxtb	r2, r2
 800de52:	701a      	strb	r2, [r3, #0]
 800de54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de56:	085b      	lsrs	r3, r3, #1
 800de58:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1f3      	bne.n	800de48 <f_mkfs+0x844>
			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 800de60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de62:	336d      	adds	r3, #109	@ 0x6d
 800de64:	2200      	movs	r2, #0
 800de66:	701a      	strb	r2, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de6c:	e005      	b.n	800de7a <f_mkfs+0x876>
 800de6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de70:	336d      	adds	r3, #109	@ 0x6d
 800de72:	781a      	ldrb	r2, [r3, #0]
 800de74:	3201      	adds	r2, #1
 800de76:	b2d2      	uxtb	r2, r2
 800de78:	701a      	strb	r2, [r3, #0]
 800de7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de7c:	085b      	lsrs	r3, r3, #1
 800de7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1f3      	bne.n	800de6e <f_mkfs+0x86a>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 800de86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de88:	336e      	adds	r3, #110	@ 0x6e
 800de8a:	2201      	movs	r2, #1
 800de8c:	701a      	strb	r2, [r3, #0]
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 800de8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de90:	336f      	adds	r3, #111	@ 0x6f
 800de92:	2280      	movs	r2, #128	@ 0x80
 800de94:	701a      	strb	r2, [r3, #0]
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
 800de96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de98:	3378      	adds	r3, #120	@ 0x78
 800de9a:	f64f 61eb 	movw	r1, #65259	@ 0xfeeb
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fa ff6b 	bl	8008d7a <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
 800dea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dea6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800deaa:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800deae:	4618      	mov	r0, r3
 800deb0:	f7fa ff63 	bl	8008d7a <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 800deb4:	2300      	movs	r3, #0
 800deb6:	673b      	str	r3, [r7, #112]	@ 0x70
 800deb8:	2300      	movs	r3, #0
 800deba:	67bb      	str	r3, [r7, #120]	@ 0x78
 800debc:	e014      	b.n	800dee8 <f_mkfs+0x8e4>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 800debe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dec0:	2b6a      	cmp	r3, #106	@ 0x6a
 800dec2:	d00e      	beq.n	800dee2 <f_mkfs+0x8de>
 800dec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dec6:	2b6b      	cmp	r3, #107	@ 0x6b
 800dec8:	d00b      	beq.n	800dee2 <f_mkfs+0x8de>
 800deca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800decc:	2b70      	cmp	r3, #112	@ 0x70
 800dece:	d008      	beq.n	800dee2 <f_mkfs+0x8de>
 800ded0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ded2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ded4:	4413      	add	r3, r2
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fc fca5 	bl	800a82a <xsum32>
 800dee0:	6738      	str	r0, [r7, #112]	@ 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 800dee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dee4:	3301      	adds	r3, #1
 800dee6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dee8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800deec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800deee:	429a      	cmp	r2, r3
 800def0:	d3e5      	bcc.n	800debe <f_mkfs+0x8ba>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800def2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800def6:	1c53      	adds	r3, r2, #1
 800def8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800defc:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800df00:	2301      	movs	r3, #1
 800df02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df04:	f7fa fde4 	bl	8008ad0 <disk_write>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d002      	beq.n	800df14 <f_mkfs+0x910>
 800df0e:	2301      	movs	r3, #1
 800df10:	f000 bc54 	b.w	800e7bc <f_mkfs+0x11b8>
			/* Extended bootstrap record (+1..+8) */
			mem_set(buf, 0, ss);
 800df14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800df18:	461a      	mov	r2, r3
 800df1a:	2100      	movs	r1, #0
 800df1c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800df1e:	f7fb f81c 	bl	8008f5a <mem_set>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
 800df22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800df26:	3b02      	subs	r3, #2
 800df28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df2a:	4413      	add	r3, r2
 800df2c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800df30:	4618      	mov	r0, r3
 800df32:	f7fa ff22 	bl	8008d7a <st_word>
			for (j = 1; j < 9; j++) {
 800df36:	2301      	movs	r3, #1
 800df38:	663b      	str	r3, [r7, #96]	@ 0x60
 800df3a:	e026      	b.n	800df8a <f_mkfs+0x986>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 800df3c:	2300      	movs	r3, #0
 800df3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df40:	e00a      	b.n	800df58 <f_mkfs+0x954>
 800df42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	67ba      	str	r2, [r7, #120]	@ 0x78
 800df48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df4a:	4413      	add	r3, r2
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800df50:	4618      	mov	r0, r3
 800df52:	f7fc fc6a 	bl	800a82a <xsum32>
 800df56:	6738      	str	r0, [r7, #112]	@ 0x70
 800df58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800df5c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800df5e:	429a      	cmp	r2, r3
 800df60:	d3ef      	bcc.n	800df42 <f_mkfs+0x93e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800df62:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800df66:	1c53      	adds	r3, r2, #1
 800df68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800df6c:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800df70:	2301      	movs	r3, #1
 800df72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df74:	f7fa fdac 	bl	8008ad0 <disk_write>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <f_mkfs+0x980>
 800df7e:	2301      	movs	r3, #1
 800df80:	f000 bc1c 	b.w	800e7bc <f_mkfs+0x11b8>
			for (j = 1; j < 9; j++) {
 800df84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df86:	3301      	adds	r3, #1
 800df88:	663b      	str	r3, [r7, #96]	@ 0x60
 800df8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df8c:	2b08      	cmp	r3, #8
 800df8e:	d9d5      	bls.n	800df3c <f_mkfs+0x938>
			}
			/* OEM/Reserved record (+9..+10) */
			mem_set(buf, 0, ss);
 800df90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800df94:	461a      	mov	r2, r3
 800df96:	2100      	movs	r1, #0
 800df98:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800df9a:	f7fa ffde 	bl	8008f5a <mem_set>
			for ( ; j < 11; j++) {
 800df9e:	e025      	b.n	800dfec <f_mkfs+0x9e8>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dfa4:	e00a      	b.n	800dfbc <f_mkfs+0x9b8>
 800dfa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dfa8:	1c5a      	adds	r2, r3, #1
 800dfaa:	67ba      	str	r2, [r7, #120]	@ 0x78
 800dfac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfae:	4413      	add	r3, r2
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fc fc38 	bl	800a82a <xsum32>
 800dfba:	6738      	str	r0, [r7, #112]	@ 0x70
 800dfbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dfc0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d3ef      	bcc.n	800dfa6 <f_mkfs+0x9a2>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800dfc6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dfca:	1c53      	adds	r3, r2, #1
 800dfcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dfd0:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfd8:	f7fa fd7a 	bl	8008ad0 <disk_write>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <f_mkfs+0x9e2>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e3ea      	b.n	800e7bc <f_mkfs+0x11b8>
			for ( ; j < 11; j++) {
 800dfe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfe8:	3301      	adds	r3, #1
 800dfea:	663b      	str	r3, [r7, #96]	@ 0x60
 800dfec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfee:	2b0a      	cmp	r3, #10
 800dff0:	d9d6      	bls.n	800dfa0 <f_mkfs+0x99c>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 800dff2:	2300      	movs	r3, #0
 800dff4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dff6:	e009      	b.n	800e00c <f_mkfs+0xa08>
 800dff8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dffa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dffc:	4413      	add	r3, r2
 800dffe:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e000:	4618      	mov	r0, r3
 800e002:	f7fa fed5 	bl	8008db0 <st_dword>
 800e006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e008:	3304      	adds	r3, #4
 800e00a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e00c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e010:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e012:	429a      	cmp	r2, r3
 800e014:	d3f0      	bcc.n	800dff8 <f_mkfs+0x9f4>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800e016:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e01a:	1c53      	adds	r3, r2, #1
 800e01c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e020:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e024:	2301      	movs	r3, #1
 800e026:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e028:	f7fa fd52 	bl	8008ad0 <disk_write>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d001      	beq.n	800e036 <f_mkfs+0xa32>
 800e032:	2301      	movs	r3, #1
 800e034:	e3c2      	b.n	800e7bc <f_mkfs+0x11b8>
		for (n = 0; n < 2; n++) {
 800e036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e03a:	3301      	adds	r3, #1
 800e03c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e044:	2b01      	cmp	r3, #1
 800e046:	f67f aea3 	bls.w	800dd90 <f_mkfs+0x78c>
 800e04a:	e324      	b.n	800e696 <f_mkfs+0x1092>

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e052:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e056:	2b03      	cmp	r3, #3
 800e058:	d14a      	bne.n	800e0f0 <f_mkfs+0xaec>
				if (!pau) {	/* au auto-selection */
 800e05a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d123      	bne.n	800e0aa <f_mkfs+0xaa6>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	0c5b      	lsrs	r3, r3, #17
 800e066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e06a:	2300      	movs	r3, #0
 800e06c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e06e:	2301      	movs	r3, #1
 800e070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e074:	e00a      	b.n	800e08c <f_mkfs+0xa88>
 800e076:	bf00      	nop
 800e078:	08013318 	.word	0x08013318
 800e07c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e07e:	3301      	adds	r3, #1
 800e080:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e08c:	4aa0      	ldr	r2, [pc, #640]	@ (800e310 <f_mkfs+0xd0c>)
 800e08e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d008      	beq.n	800e0aa <f_mkfs+0xaa6>
 800e098:	4a9d      	ldr	r2, [pc, #628]	@ (800e310 <f_mkfs+0xd0c>)
 800e09a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e09c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d2e8      	bcs.n	800e07c <f_mkfs+0xa78>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e0aa:	69fa      	ldr	r2, [r7, #28]
 800e0ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0b4:	633b      	str	r3, [r7, #48]	@ 0x30
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b8:	3302      	adds	r3, #2
 800e0ba:	009a      	lsls	r2, r3, #2
 800e0bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e0c0:	4413      	add	r3, r2
 800e0c2:	1e5a      	subs	r2, r3, #1
 800e0c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 32;	/* Number of reserved sectors */
 800e0d0:	2320      	movs	r3, #32
 800e0d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = 0;		/* No static directory */
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0dc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d903      	bls.n	800e0ec <f_mkfs+0xae8>
 800e0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e6:	4a8b      	ldr	r2, [pc, #556]	@ (800e314 <f_mkfs+0xd10>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d959      	bls.n	800e1a0 <f_mkfs+0xb9c>
 800e0ec:	230e      	movs	r3, #14
 800e0ee:	e365      	b.n	800e7bc <f_mkfs+0x11b8>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e0f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d120      	bne.n	800e13a <f_mkfs+0xb36>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	0b1b      	lsrs	r3, r3, #12
 800e0fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e100:	2300      	movs	r3, #0
 800e102:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e104:	2301      	movs	r3, #1
 800e106:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e10a:	e007      	b.n	800e11c <f_mkfs+0xb18>
 800e10c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e10e:	3301      	adds	r3, #1
 800e110:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e112:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e116:	005b      	lsls	r3, r3, #1
 800e118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e11c:	4a7e      	ldr	r2, [pc, #504]	@ (800e318 <f_mkfs+0xd14>)
 800e11e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d008      	beq.n	800e13a <f_mkfs+0xb36>
 800e128:	4a7b      	ldr	r2, [pc, #492]	@ (800e318 <f_mkfs+0xd14>)
 800e12a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e130:	461a      	mov	r2, r3
 800e132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e136:	4293      	cmp	r3, r2
 800e138:	d2e8      	bcs.n	800e10c <f_mkfs+0xb08>
				}
				n_clst = sz_vol / pau;
 800e13a:	69fa      	ldr	r2, [r7, #28]
 800e13c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e140:	fbb2 f3f3 	udiv	r3, r2, r3
 800e144:	633b      	str	r3, [r7, #48]	@ 0x30
				if (n_clst > MAX_FAT12) {
 800e146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e148:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d905      	bls.n	800e15c <f_mkfs+0xb58>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e152:	3302      	adds	r3, #2
 800e154:	005b      	lsls	r3, r3, #1
 800e156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e15a:	e00b      	b.n	800e174 <f_mkfs+0xb70>
				} else {
					fmt = FS_FAT12;
 800e15c:	2301      	movs	r3, #1
 800e15e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e164:	4613      	mov	r3, r2
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	3301      	adds	r3, #1
 800e16c:	085b      	lsrs	r3, r3, #1
 800e16e:	3303      	adds	r3, #3
 800e170:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e174:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e17c:	4413      	add	r3, r2
 800e17e:	1e5a      	subs	r2, r3, #1
 800e180:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e184:	fbb2 f3f3 	udiv	r3, r2, r3
 800e188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 1;						/* Number of reserved sectors */
 800e18c:	2301      	movs	r3, #1
 800e18e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e194:	015a      	lsls	r2, r3, #5
 800e196:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19e:	67fb      	str	r3, [r7, #124]	@ 0x7c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e1a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e1a6:	4413      	add	r3, r2
 800e1a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e1ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e1b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e1b2:	fb03 f202 	mul.w	r2, r3, r2
 800e1b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e1ba:	4413      	add	r3, r2
 800e1bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e1be:	4413      	add	r3, r2
 800e1c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e1c2:	6a3a      	ldr	r2, [r7, #32]
 800e1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c6:	4413      	add	r3, r2
 800e1c8:	1e5a      	subs	r2, r3, #1
 800e1ca:	6a3b      	ldr	r3, [r7, #32]
 800e1cc:	425b      	negs	r3, r3
 800e1ce:	401a      	ands	r2, r3
 800e1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d2:	1ad3      	subs	r3, r2, r3
 800e1d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e1d8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e1dc:	2b03      	cmp	r3, #3
 800e1de:	d10e      	bne.n	800e1fe <f_mkfs+0xbfa>
				sz_rsv += n; b_fat += n;
 800e1e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e1e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1e8:	4413      	add	r3, r2
 800e1ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e1ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e1f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e1fc:	e009      	b.n	800e212 <f_mkfs+0xc0e>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e1fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e204:	fbb2 f3f3 	udiv	r3, r2, r3
 800e208:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e20c:	4413      	add	r3, r2
 800e20e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e212:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e216:	011a      	lsls	r2, r3, #4
 800e218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21a:	441a      	add	r2, r3
 800e21c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e21e:	1ad2      	subs	r2, r2, r3
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	429a      	cmp	r2, r3
 800e224:	d901      	bls.n	800e22a <f_mkfs+0xc26>
 800e226:	230e      	movs	r3, #14
 800e228:	e2c8      	b.n	800e7bc <f_mkfs+0x11b8>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e22a:	69fa      	ldr	r2, [r7, #28]
 800e22c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e230:	1ad2      	subs	r2, r2, r3
 800e232:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e236:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e238:	fb01 f303 	mul.w	r3, r1, r3
 800e23c:	1ad2      	subs	r2, r2, r3
 800e23e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e240:	1ad2      	subs	r2, r2, r3
 800e242:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e246:	fbb2 f3f3 	udiv	r3, r2, r3
 800e24a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fmt == FS_FAT32) {
 800e24c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e250:	2b03      	cmp	r3, #3
 800e252:	d110      	bne.n	800e276 <f_mkfs+0xc72>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e256:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d80b      	bhi.n	800e276 <f_mkfs+0xc72>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d106      	bne.n	800e272 <f_mkfs+0xc6e>
 800e264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e268:	085b      	lsrs	r3, r3, #1
 800e26a:	607b      	str	r3, [r7, #4]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d148      	bne.n	800e304 <f_mkfs+0xd00>
					return FR_MKFS_ABORTED;
 800e272:	230e      	movs	r3, #14
 800e274:	e2a2      	b.n	800e7bc <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT16) {
 800e276:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d137      	bne.n	800e2ee <f_mkfs+0xcea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e280:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e284:	4293      	cmp	r3, r2
 800e286:	d921      	bls.n	800e2cc <f_mkfs+0xcc8>
					if (!au && (pau * 2) <= 64) {
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d109      	bne.n	800e2a2 <f_mkfs+0xc9e>
 800e28e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	2b40      	cmp	r3, #64	@ 0x40
 800e296:	d804      	bhi.n	800e2a2 <f_mkfs+0xc9e>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e29c:	005b      	lsls	r3, r3, #1
 800e29e:	607b      	str	r3, [r7, #4]
 800e2a0:	e035      	b.n	800e30e <f_mkfs+0xd0a>
					}
					if ((opt & FM_FAT32)) {
 800e2a2:	7afb      	ldrb	r3, [r7, #11]
 800e2a4:	f003 0302 	and.w	r3, r3, #2
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d003      	beq.n	800e2b4 <f_mkfs+0xcb0>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e2b2:	e02c      	b.n	800e30e <f_mkfs+0xd0a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d106      	bne.n	800e2c8 <f_mkfs+0xcc4>
 800e2ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	607b      	str	r3, [r7, #4]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b80      	cmp	r3, #128	@ 0x80
 800e2c6:	d91f      	bls.n	800e308 <f_mkfs+0xd04>
					return FR_MKFS_ABORTED;
 800e2c8:	230e      	movs	r3, #14
 800e2ca:	e277      	b.n	800e7bc <f_mkfs+0x11b8>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ce:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d80b      	bhi.n	800e2ee <f_mkfs+0xcea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d106      	bne.n	800e2ea <f_mkfs+0xce6>
 800e2dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2e0:	005b      	lsls	r3, r3, #1
 800e2e2:	607b      	str	r3, [r7, #4]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b80      	cmp	r3, #128	@ 0x80
 800e2e8:	d910      	bls.n	800e30c <f_mkfs+0xd08>
					return FR_MKFS_ABORTED;
 800e2ea:	230e      	movs	r3, #14
 800e2ec:	e266      	b.n	800e7bc <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e2ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d112      	bne.n	800e31c <f_mkfs+0xd18>
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d90d      	bls.n	800e31c <f_mkfs+0xd18>
 800e300:	230e      	movs	r3, #14
 800e302:	e25b      	b.n	800e7bc <f_mkfs+0x11b8>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e304:	bf00      	nop
 800e306:	e6a1      	b.n	800e04c <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e308:	bf00      	nop
 800e30a:	e69f      	b.n	800e04c <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e30c:	bf00      	nop
			pau = au;
 800e30e:	e69d      	b.n	800e04c <f_mkfs+0xa48>
 800e310:	080133b0 	.word	0x080133b0
 800e314:	0ffffff5 	.word	0x0ffffff5
 800e318:	080133c0 	.word	0x080133c0

			/* Ok, it is the valid cluster configuration */
			break;
 800e31c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e31e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e322:	461a      	mov	r2, r3
 800e324:	2100      	movs	r1, #0
 800e326:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e328:	f7fa fe17 	bl	8008f5a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e32c:	220b      	movs	r2, #11
 800e32e:	49be      	ldr	r1, [pc, #760]	@ (800e628 <f_mkfs+0x1024>)
 800e330:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e332:	f7fa fdf1 	bl	8008f18 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e338:	330b      	adds	r3, #11
 800e33a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e33e:	4611      	mov	r1, r2
 800e340:	4618      	mov	r0, r3
 800e342:	f7fa fd1a 	bl	8008d7a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e348:	330d      	adds	r3, #13
 800e34a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e34e:	b2d2      	uxtb	r2, r2
 800e350:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e354:	330e      	adds	r3, #14
 800e356:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e35a:	b292      	uxth	r2, r2
 800e35c:	4611      	mov	r1, r2
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fa fd0b 	bl	8008d7a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e366:	3310      	adds	r3, #16
 800e368:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e36a:	b2d2      	uxtb	r2, r2
 800e36c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e36e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e370:	f103 0211 	add.w	r2, r3, #17
 800e374:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e378:	2b03      	cmp	r3, #3
 800e37a:	d002      	beq.n	800e382 <f_mkfs+0xd7e>
 800e37c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e37e:	b29b      	uxth	r3, r3
 800e380:	e000      	b.n	800e384 <f_mkfs+0xd80>
 800e382:	2300      	movs	r3, #0
 800e384:	4619      	mov	r1, r3
 800e386:	4610      	mov	r0, r2
 800e388:	f7fa fcf7 	bl	8008d7a <st_word>
		if (sz_vol < 0x10000) {
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e392:	d208      	bcs.n	800e3a6 <f_mkfs+0xda2>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e396:	3313      	adds	r3, #19
 800e398:	69fa      	ldr	r2, [r7, #28]
 800e39a:	b292      	uxth	r2, r2
 800e39c:	4611      	mov	r1, r2
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fa fceb 	bl	8008d7a <st_word>
 800e3a4:	e006      	b.n	800e3b4 <f_mkfs+0xdb0>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e3a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3a8:	3320      	adds	r3, #32
 800e3aa:	69fa      	ldr	r2, [r7, #28]
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fa fcfe 	bl	8008db0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e3b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3b6:	3315      	adds	r3, #21
 800e3b8:	22f8      	movs	r2, #248	@ 0xf8
 800e3ba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e3bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3be:	3318      	adds	r3, #24
 800e3c0:	213f      	movs	r1, #63	@ 0x3f
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fa fcd9 	bl	8008d7a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e3c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3ca:	331a      	adds	r3, #26
 800e3cc:	21ff      	movs	r1, #255	@ 0xff
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fa fcd3 	bl	8008d7a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e3d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3d6:	331c      	adds	r3, #28
 800e3d8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fa fce8 	bl	8008db0 <st_dword>
		if (fmt == FS_FAT32) {
 800e3e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e3e4:	2b03      	cmp	r3, #3
 800e3e6:	d132      	bne.n	800e44e <f_mkfs+0xe4a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e3e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3ea:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800e3ee:	f7fa fa37 	bl	8008860 <get_fattime>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f7fa fcda 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3fe:	3324      	adds	r3, #36	@ 0x24
 800e400:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800e404:	4618      	mov	r0, r3
 800e406:	f7fa fcd3 	bl	8008db0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e40a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e40c:	332c      	adds	r3, #44	@ 0x2c
 800e40e:	2102      	movs	r1, #2
 800e410:	4618      	mov	r0, r3
 800e412:	f7fa fccd 	bl	8008db0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e418:	3330      	adds	r3, #48	@ 0x30
 800e41a:	2101      	movs	r1, #1
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fa fcac 	bl	8008d7a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e424:	3332      	adds	r3, #50	@ 0x32
 800e426:	2106      	movs	r1, #6
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fa fca6 	bl	8008d7a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e42e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e430:	3340      	adds	r3, #64	@ 0x40
 800e432:	2280      	movs	r2, #128	@ 0x80
 800e434:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e438:	3342      	adds	r3, #66	@ 0x42
 800e43a:	2229      	movs	r2, #41	@ 0x29
 800e43c:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e440:	3347      	adds	r3, #71	@ 0x47
 800e442:	2213      	movs	r2, #19
 800e444:	4979      	ldr	r1, [pc, #484]	@ (800e62c <f_mkfs+0x1028>)
 800e446:	4618      	mov	r0, r3
 800e448:	f7fa fd66 	bl	8008f18 <mem_cpy>
 800e44c:	e021      	b.n	800e492 <f_mkfs+0xe8e>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e450:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800e454:	f7fa fa04 	bl	8008860 <get_fattime>
 800e458:	4603      	mov	r3, r0
 800e45a:	4619      	mov	r1, r3
 800e45c:	4620      	mov	r0, r4
 800e45e:	f7fa fca7 	bl	8008db0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e464:	3316      	adds	r3, #22
 800e466:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e46a:	b292      	uxth	r2, r2
 800e46c:	4611      	mov	r1, r2
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fa fc83 	bl	8008d7a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e476:	3324      	adds	r3, #36	@ 0x24
 800e478:	2280      	movs	r2, #128	@ 0x80
 800e47a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e47c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e47e:	3326      	adds	r3, #38	@ 0x26
 800e480:	2229      	movs	r2, #41	@ 0x29
 800e482:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e486:	332b      	adds	r3, #43	@ 0x2b
 800e488:	2213      	movs	r2, #19
 800e48a:	4969      	ldr	r1, [pc, #420]	@ (800e630 <f_mkfs+0x102c>)
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fa fd43 	bl	8008f18 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e494:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e498:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fa fc6c 	bl	8008d7a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e4a2:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4ac:	f7fa fb10 	bl	8008ad0 <disk_write>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <f_mkfs+0xeb6>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e180      	b.n	800e7bc <f_mkfs+0x11b8>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e4ba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e4be:	2b03      	cmp	r3, #3
 800e4c0:	d141      	bne.n	800e546 <f_mkfs+0xf42>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4c4:	1d9a      	adds	r2, r3, #6
 800e4c6:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4ce:	f7fa faff 	bl	8008ad0 <disk_write>
			mem_set(buf, 0, ss);
 800e4d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	2100      	movs	r1, #0
 800e4da:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e4dc:	f7fa fd3d 	bl	8008f5a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e4e0:	4954      	ldr	r1, [pc, #336]	@ (800e634 <f_mkfs+0x1030>)
 800e4e2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e4e4:	f7fa fc64 	bl	8008db0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e4e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4ea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e4ee:	4952      	ldr	r1, [pc, #328]	@ (800e638 <f_mkfs+0x1034>)
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fa fc5d 	bl	8008db0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e4f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4f8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4fe:	3b01      	subs	r3, #1
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f7fa fc54 	bl	8008db0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e50a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e50e:	2102      	movs	r1, #2
 800e510:	4618      	mov	r0, r3
 800e512:	f7fa fc4d 	bl	8008db0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e518:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e51c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e520:	4618      	mov	r0, r3
 800e522:	f7fa fc2a 	bl	8008d7a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e528:	1dda      	adds	r2, r3, #7
 800e52a:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e52e:	2301      	movs	r3, #1
 800e530:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e532:	f7fa facd 	bl	8008ad0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e538:	1c5a      	adds	r2, r3, #1
 800e53a:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e53e:	2301      	movs	r3, #1
 800e540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e542:	f7fa fac5 	bl	8008ad0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e546:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e548:	2100      	movs	r1, #0
 800e54a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e54c:	f7fa fd05 	bl	8008f5a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e554:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e558:	2300      	movs	r3, #0
 800e55a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e55c:	e059      	b.n	800e612 <f_mkfs+0x100e>
			if (fmt == FS_FAT32) {
 800e55e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e562:	2b03      	cmp	r3, #3
 800e564:	d113      	bne.n	800e58e <f_mkfs+0xf8a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e566:	f06f 0107 	mvn.w	r1, #7
 800e56a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e56c:	f7fa fc20 	bl	8008db0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e572:	3304      	adds	r3, #4
 800e574:	f04f 31ff 	mov.w	r1, #4294967295
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fa fc19 	bl	8008db0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e57e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e580:	3308      	adds	r3, #8
 800e582:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e586:	4618      	mov	r0, r3
 800e588:	f7fa fc12 	bl	8008db0 <st_dword>
 800e58c:	e00b      	b.n	800e5a6 <f_mkfs+0xfa2>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e58e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e592:	2b01      	cmp	r3, #1
 800e594:	d101      	bne.n	800e59a <f_mkfs+0xf96>
 800e596:	4b29      	ldr	r3, [pc, #164]	@ (800e63c <f_mkfs+0x1038>)
 800e598:	e001      	b.n	800e59e <f_mkfs+0xf9a>
 800e59a:	f06f 0307 	mvn.w	r3, #7
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e5a2:	f7fa fc05 	bl	8008db0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e5a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e5aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e5ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e5b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	bf28      	it	cs
 800e5b8:	4613      	movcs	r3, r2
 800e5ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e5be:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e5c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e5c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e5ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5cc:	f7fa fa80 	bl	8008ad0 <disk_write>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <f_mkfs+0xfd6>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e0f0      	b.n	800e7bc <f_mkfs+0x11b8>
				mem_set(buf, 0, ss);
 800e5da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e5de:	461a      	mov	r2, r3
 800e5e0:	2100      	movs	r1, #0
 800e5e2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e5e4:	f7fa fcb9 	bl	8008f5a <mem_set>
				sect += n; nsect -= n;
 800e5e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e5ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e5f0:	4413      	add	r3, r2
 800e5f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e5f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e5fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			} while (nsect);
 800e604:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d1d0      	bne.n	800e5ae <f_mkfs+0xfaa>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e60c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e60e:	3301      	adds	r3, #1
 800e610:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e612:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e616:	429a      	cmp	r2, r3
 800e618:	d3a1      	bcc.n	800e55e <f_mkfs+0xf5a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e61a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d10e      	bne.n	800e640 <f_mkfs+0x103c>
 800e622:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e626:	e00c      	b.n	800e642 <f_mkfs+0x103e>
 800e628:	08013324 	.word	0x08013324
 800e62c:	08013330 	.word	0x08013330
 800e630:	08013344 	.word	0x08013344
 800e634:	41615252 	.word	0x41615252
 800e638:	61417272 	.word	0x61417272
 800e63c:	00fffff8 	.word	0x00fffff8
 800e640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e646:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e64c:	4293      	cmp	r3, r2
 800e64e:	bf28      	it	cs
 800e650:	4613      	movcs	r3, r2
 800e652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e656:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e65a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e65e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e664:	f7fa fa34 	bl	8008ad0 <disk_write>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d001      	beq.n	800e672 <f_mkfs+0x106e>
 800e66e:	2301      	movs	r3, #1
 800e670:	e0a4      	b.n	800e7bc <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 800e672:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e67a:	4413      	add	r3, r2
 800e67c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e680:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 800e68e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e692:	2b00      	cmp	r3, #0
 800e694:	d1d7      	bne.n	800e646 <f_mkfs+0x1042>
	}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
 800e696:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e69a:	2b04      	cmp	r3, #4
 800e69c:	d103      	bne.n	800e6a6 <f_mkfs+0x10a2>
		sys = 0x07;			/* HPFS/NTFS/exFAT */
 800e69e:	2307      	movs	r3, #7
 800e6a0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800e6a4:	e018      	b.n	800e6d8 <f_mkfs+0x10d4>
	} else {
		if (fmt == FS_FAT32) {
 800e6a6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	d103      	bne.n	800e6b6 <f_mkfs+0x10b2>
			sys = 0x0C;		/* FAT32X */
 800e6ae:	230c      	movs	r3, #12
 800e6b0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800e6b4:	e010      	b.n	800e6d8 <f_mkfs+0x10d4>
		} else {
			if (sz_vol >= 0x10000) {
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6bc:	d303      	bcc.n	800e6c6 <f_mkfs+0x10c2>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e6be:	2306      	movs	r3, #6
 800e6c0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800e6c4:	e008      	b.n	800e6d8 <f_mkfs+0x10d4>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e6c6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e6ca:	2b02      	cmp	r3, #2
 800e6cc:	d101      	bne.n	800e6d2 <f_mkfs+0x10ce>
 800e6ce:	2304      	movs	r3, #4
 800e6d0:	e000      	b.n	800e6d4 <f_mkfs+0x10d0>
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800e6d8:	7afb      	ldrb	r3, [r7, #11]
 800e6da:	f003 0308 	and.w	r3, r3, #8
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d15f      	bne.n	800e7a2 <f_mkfs+0x119e>
			mem_set(buf, 0, ss);
 800e6e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e6ec:	f7fa fc35 	bl	8008f5a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e6f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6f2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e6f6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fa fb3d 	bl	8008d7a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800e700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e702:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e706:	627b      	str	r3, [r7, #36]	@ 0x24
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800e708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70a:	2200      	movs	r2, #0
 800e70c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800e70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e710:	3301      	adds	r3, #1
 800e712:	2201      	movs	r2, #1
 800e714:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800e716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e718:	3302      	adds	r3, #2
 800e71a:	2201      	movs	r2, #1
 800e71c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800e71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e720:	3303      	adds	r3, #3
 800e722:	2200      	movs	r2, #0
 800e724:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800e726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e728:	3304      	adds	r3, #4
 800e72a:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800e72e:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800e730:	69fa      	ldr	r2, [r7, #28]
 800e732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e734:	441a      	add	r2, r3
 800e736:	4b23      	ldr	r3, [pc, #140]	@ (800e7c4 <f_mkfs+0x11c0>)
 800e738:	fba3 1302 	umull	r1, r3, r3, r2
 800e73c:	1ad2      	subs	r2, r2, r3
 800e73e:	0852      	lsrs	r2, r2, #1
 800e740:	4413      	add	r3, r2
 800e742:	0b5b      	lsrs	r3, r3, #13
 800e744:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			pte[PTE_EdHead] = 254;				/* End head */
 800e748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74a:	3305      	adds	r3, #5
 800e74c:	22fe      	movs	r2, #254	@ 0xfe
 800e74e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800e750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e754:	089b      	lsrs	r3, r3, #2
 800e756:	b2da      	uxtb	r2, r3
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	3306      	adds	r3, #6
 800e75c:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800e760:	b2d2      	uxtb	r2, r2
 800e762:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800e764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e766:	3307      	adds	r3, #7
 800e768:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e76c:	b2d2      	uxtb	r2, r2
 800e76e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800e770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e772:	3308      	adds	r3, #8
 800e774:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e776:	4618      	mov	r0, r3
 800e778:	f7fa fb1a 	bl	8008db0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800e77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77e:	330c      	adds	r3, #12
 800e780:	69fa      	ldr	r2, [r7, #28]
 800e782:	4611      	mov	r1, r2
 800e784:	4618      	mov	r0, r3
 800e786:	f7fa fb13 	bl	8008db0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e78a:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e78e:	2301      	movs	r3, #1
 800e790:	2200      	movs	r2, #0
 800e792:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e794:	f7fa f99c 	bl	8008ad0 <disk_write>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <f_mkfs+0x119e>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e00c      	b.n	800e7bc <f_mkfs+0x11b8>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800e7a2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fa f9b0 	bl	8008b10 <disk_ioctl>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d001      	beq.n	800e7ba <f_mkfs+0x11b6>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e000      	b.n	800e7bc <f_mkfs+0x11b8>

	return FR_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	37a4      	adds	r7, #164	@ 0xa4
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd90      	pop	{r4, r7, pc}
 800e7c4:	0515565b 	.word	0x0515565b

0800e7c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b087      	sub	sp, #28
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7de:	4b1f      	ldr	r3, [pc, #124]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e7e0:	7a5b      	ldrb	r3, [r3, #9]
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d131      	bne.n	800e84c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e7e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e7ea:	7a5b      	ldrb	r3, [r3, #9]
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e7f6:	4b19      	ldr	r3, [pc, #100]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e7f8:	7a5b      	ldrb	r3, [r3, #9]
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	4a17      	ldr	r2, [pc, #92]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4413      	add	r3, r2
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e806:	4b15      	ldr	r3, [pc, #84]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e808:	7a5b      	ldrb	r3, [r3, #9]
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	461a      	mov	r2, r3
 800e80e:	4b13      	ldr	r3, [pc, #76]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e810:	4413      	add	r3, r2
 800e812:	79fa      	ldrb	r2, [r7, #7]
 800e814:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e816:	4b11      	ldr	r3, [pc, #68]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e818:	7a5b      	ldrb	r3, [r3, #9]
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	b2d1      	uxtb	r1, r2
 800e820:	4a0e      	ldr	r2, [pc, #56]	@ (800e85c <FATFS_LinkDriverEx+0x94>)
 800e822:	7251      	strb	r1, [r2, #9]
 800e824:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e826:	7dbb      	ldrb	r3, [r7, #22]
 800e828:	3330      	adds	r3, #48	@ 0x30
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	3301      	adds	r3, #1
 800e834:	223a      	movs	r2, #58	@ 0x3a
 800e836:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	3302      	adds	r3, #2
 800e83c:	222f      	movs	r2, #47	@ 0x2f
 800e83e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	3303      	adds	r3, #3
 800e844:	2200      	movs	r2, #0
 800e846:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e848:	2300      	movs	r3, #0
 800e84a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	371c      	adds	r7, #28
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	2000123c 	.word	0x2000123c

0800e860 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e86a:	2200      	movs	r2, #0
 800e86c:	6839      	ldr	r1, [r7, #0]
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7ff ffaa 	bl	800e7c8 <FATFS_LinkDriverEx>
 800e874:	4603      	mov	r3, r0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
	...

0800e880 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e880:	b480      	push	{r7}
 800e882:	b089      	sub	sp, #36	@ 0x24
 800e884:	af00      	add	r7, sp, #0
 800e886:	4603      	mov	r3, r0
 800e888:	6039      	str	r1, [r7, #0]
 800e88a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800e88c:	88fb      	ldrh	r3, [r7, #6]
 800e88e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e890:	d802      	bhi.n	800e898 <ff_convert+0x18>
		c = chr;
 800e892:	88fb      	ldrh	r3, [r7, #6]
 800e894:	837b      	strh	r3, [r7, #26]
 800e896:	e045      	b.n	800e924 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d005      	beq.n	800e8aa <ff_convert+0x2a>
			p = oem2uni;
 800e89e:	4b25      	ldr	r3, [pc, #148]	@ (800e934 <ff_convert+0xb4>)
 800e8a0:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800e8a2:	f245 5320 	movw	r3, #21792	@ 0x5520
 800e8a6:	60bb      	str	r3, [r7, #8]
 800e8a8:	e004      	b.n	800e8b4 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800e8aa:	4b23      	ldr	r3, [pc, #140]	@ (800e938 <ff_convert+0xb8>)
 800e8ac:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800e8ae:	f245 5320 	movw	r3, #21792	@ 0x5520
 800e8b2:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800e8b8:	2310      	movs	r3, #16
 800e8ba:	613b      	str	r3, [r7, #16]
 800e8bc:	e021      	b.n	800e902 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	0fda      	lsrs	r2, r3, #31
 800e8c6:	4413      	add	r3, r2
 800e8c8:	105b      	asrs	r3, r3, #1
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	69fa      	ldr	r2, [r7, #28]
 800e8d8:	4413      	add	r3, r2
 800e8da:	881b      	ldrh	r3, [r3, #0]
 800e8dc:	88fa      	ldrh	r2, [r7, #6]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d013      	beq.n	800e90a <ff_convert+0x8a>
			if (chr > p[i * 2])
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	69fa      	ldr	r2, [r7, #28]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	881b      	ldrh	r3, [r3, #0]
 800e8ec:	88fa      	ldrh	r2, [r7, #6]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d902      	bls.n	800e8f8 <ff_convert+0x78>
				li = i;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	60fb      	str	r3, [r7, #12]
 800e8f6:	e001      	b.n	800e8fc <ff_convert+0x7c>
			else
				hi = i;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	613b      	str	r3, [r7, #16]
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1da      	bne.n	800e8be <ff_convert+0x3e>
 800e908:	e000      	b.n	800e90c <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800e90a:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d006      	beq.n	800e920 <ff_convert+0xa0>
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	3302      	adds	r3, #2
 800e918:	69fa      	ldr	r2, [r7, #28]
 800e91a:	4413      	add	r3, r2
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	e000      	b.n	800e922 <ff_convert+0xa2>
 800e920:	2300      	movs	r3, #0
 800e922:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800e924:	8b7b      	ldrh	r3, [r7, #26]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3724      	adds	r7, #36	@ 0x24
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	08028854 	.word	0x08028854
 800e938:	080133d0 	.word	0x080133d0

0800e93c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b087      	sub	sp, #28
 800e940:	af00      	add	r7, sp, #0
 800e942:	4603      	mov	r3, r0
 800e944:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e946:	88fb      	ldrh	r3, [r7, #6]
 800e948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e94c:	d201      	bcs.n	800e952 <ff_wtoupper+0x16>
 800e94e:	4b3e      	ldr	r3, [pc, #248]	@ (800ea48 <ff_wtoupper+0x10c>)
 800e950:	e000      	b.n	800e954 <ff_wtoupper+0x18>
 800e952:	4b3e      	ldr	r3, [pc, #248]	@ (800ea4c <ff_wtoupper+0x110>)
 800e954:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	1c9a      	adds	r2, r3, #2
 800e95a:	617a      	str	r2, [r7, #20]
 800e95c:	881b      	ldrh	r3, [r3, #0]
 800e95e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e960:	8a7b      	ldrh	r3, [r7, #18]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d068      	beq.n	800ea38 <ff_wtoupper+0xfc>
 800e966:	88fa      	ldrh	r2, [r7, #6]
 800e968:	8a7b      	ldrh	r3, [r7, #18]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d364      	bcc.n	800ea38 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	1c9a      	adds	r2, r3, #2
 800e972:	617a      	str	r2, [r7, #20]
 800e974:	881b      	ldrh	r3, [r3, #0]
 800e976:	823b      	strh	r3, [r7, #16]
 800e978:	8a3b      	ldrh	r3, [r7, #16]
 800e97a:	0a1b      	lsrs	r3, r3, #8
 800e97c:	81fb      	strh	r3, [r7, #14]
 800e97e:	8a3b      	ldrh	r3, [r7, #16]
 800e980:	b2db      	uxtb	r3, r3
 800e982:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e984:	88fa      	ldrh	r2, [r7, #6]
 800e986:	8a79      	ldrh	r1, [r7, #18]
 800e988:	8a3b      	ldrh	r3, [r7, #16]
 800e98a:	440b      	add	r3, r1
 800e98c:	429a      	cmp	r2, r3
 800e98e:	da49      	bge.n	800ea24 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e990:	89fb      	ldrh	r3, [r7, #14]
 800e992:	2b08      	cmp	r3, #8
 800e994:	d84f      	bhi.n	800ea36 <ff_wtoupper+0xfa>
 800e996:	a201      	add	r2, pc, #4	@ (adr r2, 800e99c <ff_wtoupper+0x60>)
 800e998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99c:	0800e9c1 	.word	0x0800e9c1
 800e9a0:	0800e9d3 	.word	0x0800e9d3
 800e9a4:	0800e9e9 	.word	0x0800e9e9
 800e9a8:	0800e9f1 	.word	0x0800e9f1
 800e9ac:	0800e9f9 	.word	0x0800e9f9
 800e9b0:	0800ea01 	.word	0x0800ea01
 800e9b4:	0800ea09 	.word	0x0800ea09
 800e9b8:	0800ea11 	.word	0x0800ea11
 800e9bc:	0800ea19 	.word	0x0800ea19
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e9c0:	88fa      	ldrh	r2, [r7, #6]
 800e9c2:	8a7b      	ldrh	r3, [r7, #18]
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	005b      	lsls	r3, r3, #1
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	881b      	ldrh	r3, [r3, #0]
 800e9ce:	80fb      	strh	r3, [r7, #6]
 800e9d0:	e027      	b.n	800ea22 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e9d2:	88fa      	ldrh	r2, [r7, #6]
 800e9d4:	8a7b      	ldrh	r3, [r7, #18]
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	88fa      	ldrh	r2, [r7, #6]
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	80fb      	strh	r3, [r7, #6]
 800e9e6:	e01c      	b.n	800ea22 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e9e8:	88fb      	ldrh	r3, [r7, #6]
 800e9ea:	3b10      	subs	r3, #16
 800e9ec:	80fb      	strh	r3, [r7, #6]
 800e9ee:	e018      	b.n	800ea22 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e9f0:	88fb      	ldrh	r3, [r7, #6]
 800e9f2:	3b20      	subs	r3, #32
 800e9f4:	80fb      	strh	r3, [r7, #6]
 800e9f6:	e014      	b.n	800ea22 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e9f8:	88fb      	ldrh	r3, [r7, #6]
 800e9fa:	3b30      	subs	r3, #48	@ 0x30
 800e9fc:	80fb      	strh	r3, [r7, #6]
 800e9fe:	e010      	b.n	800ea22 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ea00:	88fb      	ldrh	r3, [r7, #6]
 800ea02:	3b1a      	subs	r3, #26
 800ea04:	80fb      	strh	r3, [r7, #6]
 800ea06:	e00c      	b.n	800ea22 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ea08:	88fb      	ldrh	r3, [r7, #6]
 800ea0a:	3308      	adds	r3, #8
 800ea0c:	80fb      	strh	r3, [r7, #6]
 800ea0e:	e008      	b.n	800ea22 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ea10:	88fb      	ldrh	r3, [r7, #6]
 800ea12:	3b50      	subs	r3, #80	@ 0x50
 800ea14:	80fb      	strh	r3, [r7, #6]
 800ea16:	e004      	b.n	800ea22 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ea18:	88fb      	ldrh	r3, [r7, #6]
 800ea1a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ea1e:	80fb      	strh	r3, [r7, #6]
 800ea20:	bf00      	nop
			}
			break;
 800ea22:	e008      	b.n	800ea36 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ea24:	89fb      	ldrh	r3, [r7, #14]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d195      	bne.n	800e956 <ff_wtoupper+0x1a>
 800ea2a:	8a3b      	ldrh	r3, [r7, #16]
 800ea2c:	005b      	lsls	r3, r3, #1
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	4413      	add	r3, r2
 800ea32:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ea34:	e78f      	b.n	800e956 <ff_wtoupper+0x1a>
			break;
 800ea36:	bf00      	nop
	}

	return chr;
 800ea38:	88fb      	ldrh	r3, [r7, #6]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	371c      	adds	r7, #28
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	0803dcd8 	.word	0x0803dcd8
 800ea4c:	0803decc 	.word	0x0803decc

0800ea50 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 f815 	bl	800ea88 <malloc>
 800ea5e:	4603      	mov	r3, r0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 f811 	bl	800ea98 <free>
}
 800ea76:	bf00      	nop
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <atoi>:
 800ea7e:	220a      	movs	r2, #10
 800ea80:	2100      	movs	r1, #0
 800ea82:	f000 b93b 	b.w	800ecfc <strtol>
	...

0800ea88 <malloc>:
 800ea88:	4b02      	ldr	r3, [pc, #8]	@ (800ea94 <malloc+0xc>)
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	6818      	ldr	r0, [r3, #0]
 800ea8e:	f000 b82d 	b.w	800eaec <_malloc_r>
 800ea92:	bf00      	nop
 800ea94:	20000060 	.word	0x20000060

0800ea98 <free>:
 800ea98:	4b02      	ldr	r3, [pc, #8]	@ (800eaa4 <free+0xc>)
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	6818      	ldr	r0, [r3, #0]
 800ea9e:	f002 b837 	b.w	8010b10 <_free_r>
 800eaa2:	bf00      	nop
 800eaa4:	20000060 	.word	0x20000060

0800eaa8 <sbrk_aligned>:
 800eaa8:	b570      	push	{r4, r5, r6, lr}
 800eaaa:	4e0f      	ldr	r6, [pc, #60]	@ (800eae8 <sbrk_aligned+0x40>)
 800eaac:	460c      	mov	r4, r1
 800eaae:	6831      	ldr	r1, [r6, #0]
 800eab0:	4605      	mov	r5, r0
 800eab2:	b911      	cbnz	r1, 800eaba <sbrk_aligned+0x12>
 800eab4:	f001 f970 	bl	800fd98 <_sbrk_r>
 800eab8:	6030      	str	r0, [r6, #0]
 800eaba:	4621      	mov	r1, r4
 800eabc:	4628      	mov	r0, r5
 800eabe:	f001 f96b 	bl	800fd98 <_sbrk_r>
 800eac2:	1c43      	adds	r3, r0, #1
 800eac4:	d103      	bne.n	800eace <sbrk_aligned+0x26>
 800eac6:	f04f 34ff 	mov.w	r4, #4294967295
 800eaca:	4620      	mov	r0, r4
 800eacc:	bd70      	pop	{r4, r5, r6, pc}
 800eace:	1cc4      	adds	r4, r0, #3
 800ead0:	f024 0403 	bic.w	r4, r4, #3
 800ead4:	42a0      	cmp	r0, r4
 800ead6:	d0f8      	beq.n	800eaca <sbrk_aligned+0x22>
 800ead8:	1a21      	subs	r1, r4, r0
 800eada:	4628      	mov	r0, r5
 800eadc:	f001 f95c 	bl	800fd98 <_sbrk_r>
 800eae0:	3001      	adds	r0, #1
 800eae2:	d1f2      	bne.n	800eaca <sbrk_aligned+0x22>
 800eae4:	e7ef      	b.n	800eac6 <sbrk_aligned+0x1e>
 800eae6:	bf00      	nop
 800eae8:	20001248 	.word	0x20001248

0800eaec <_malloc_r>:
 800eaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaf0:	1ccd      	adds	r5, r1, #3
 800eaf2:	f025 0503 	bic.w	r5, r5, #3
 800eaf6:	3508      	adds	r5, #8
 800eaf8:	2d0c      	cmp	r5, #12
 800eafa:	bf38      	it	cc
 800eafc:	250c      	movcc	r5, #12
 800eafe:	2d00      	cmp	r5, #0
 800eb00:	4606      	mov	r6, r0
 800eb02:	db01      	blt.n	800eb08 <_malloc_r+0x1c>
 800eb04:	42a9      	cmp	r1, r5
 800eb06:	d904      	bls.n	800eb12 <_malloc_r+0x26>
 800eb08:	230c      	movs	r3, #12
 800eb0a:	6033      	str	r3, [r6, #0]
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ebe8 <_malloc_r+0xfc>
 800eb16:	f000 f869 	bl	800ebec <__malloc_lock>
 800eb1a:	f8d8 3000 	ldr.w	r3, [r8]
 800eb1e:	461c      	mov	r4, r3
 800eb20:	bb44      	cbnz	r4, 800eb74 <_malloc_r+0x88>
 800eb22:	4629      	mov	r1, r5
 800eb24:	4630      	mov	r0, r6
 800eb26:	f7ff ffbf 	bl	800eaa8 <sbrk_aligned>
 800eb2a:	1c43      	adds	r3, r0, #1
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	d158      	bne.n	800ebe2 <_malloc_r+0xf6>
 800eb30:	f8d8 4000 	ldr.w	r4, [r8]
 800eb34:	4627      	mov	r7, r4
 800eb36:	2f00      	cmp	r7, #0
 800eb38:	d143      	bne.n	800ebc2 <_malloc_r+0xd6>
 800eb3a:	2c00      	cmp	r4, #0
 800eb3c:	d04b      	beq.n	800ebd6 <_malloc_r+0xea>
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	4639      	mov	r1, r7
 800eb42:	4630      	mov	r0, r6
 800eb44:	eb04 0903 	add.w	r9, r4, r3
 800eb48:	f001 f926 	bl	800fd98 <_sbrk_r>
 800eb4c:	4581      	cmp	r9, r0
 800eb4e:	d142      	bne.n	800ebd6 <_malloc_r+0xea>
 800eb50:	6821      	ldr	r1, [r4, #0]
 800eb52:	1a6d      	subs	r5, r5, r1
 800eb54:	4629      	mov	r1, r5
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7ff ffa6 	bl	800eaa8 <sbrk_aligned>
 800eb5c:	3001      	adds	r0, #1
 800eb5e:	d03a      	beq.n	800ebd6 <_malloc_r+0xea>
 800eb60:	6823      	ldr	r3, [r4, #0]
 800eb62:	442b      	add	r3, r5
 800eb64:	6023      	str	r3, [r4, #0]
 800eb66:	f8d8 3000 	ldr.w	r3, [r8]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	bb62      	cbnz	r2, 800ebc8 <_malloc_r+0xdc>
 800eb6e:	f8c8 7000 	str.w	r7, [r8]
 800eb72:	e00f      	b.n	800eb94 <_malloc_r+0xa8>
 800eb74:	6822      	ldr	r2, [r4, #0]
 800eb76:	1b52      	subs	r2, r2, r5
 800eb78:	d420      	bmi.n	800ebbc <_malloc_r+0xd0>
 800eb7a:	2a0b      	cmp	r2, #11
 800eb7c:	d917      	bls.n	800ebae <_malloc_r+0xc2>
 800eb7e:	1961      	adds	r1, r4, r5
 800eb80:	42a3      	cmp	r3, r4
 800eb82:	6025      	str	r5, [r4, #0]
 800eb84:	bf18      	it	ne
 800eb86:	6059      	strne	r1, [r3, #4]
 800eb88:	6863      	ldr	r3, [r4, #4]
 800eb8a:	bf08      	it	eq
 800eb8c:	f8c8 1000 	streq.w	r1, [r8]
 800eb90:	5162      	str	r2, [r4, r5]
 800eb92:	604b      	str	r3, [r1, #4]
 800eb94:	4630      	mov	r0, r6
 800eb96:	f000 f82f 	bl	800ebf8 <__malloc_unlock>
 800eb9a:	f104 000b 	add.w	r0, r4, #11
 800eb9e:	1d23      	adds	r3, r4, #4
 800eba0:	f020 0007 	bic.w	r0, r0, #7
 800eba4:	1ac2      	subs	r2, r0, r3
 800eba6:	bf1c      	itt	ne
 800eba8:	1a1b      	subne	r3, r3, r0
 800ebaa:	50a3      	strne	r3, [r4, r2]
 800ebac:	e7af      	b.n	800eb0e <_malloc_r+0x22>
 800ebae:	6862      	ldr	r2, [r4, #4]
 800ebb0:	42a3      	cmp	r3, r4
 800ebb2:	bf0c      	ite	eq
 800ebb4:	f8c8 2000 	streq.w	r2, [r8]
 800ebb8:	605a      	strne	r2, [r3, #4]
 800ebba:	e7eb      	b.n	800eb94 <_malloc_r+0xa8>
 800ebbc:	4623      	mov	r3, r4
 800ebbe:	6864      	ldr	r4, [r4, #4]
 800ebc0:	e7ae      	b.n	800eb20 <_malloc_r+0x34>
 800ebc2:	463c      	mov	r4, r7
 800ebc4:	687f      	ldr	r7, [r7, #4]
 800ebc6:	e7b6      	b.n	800eb36 <_malloc_r+0x4a>
 800ebc8:	461a      	mov	r2, r3
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	42a3      	cmp	r3, r4
 800ebce:	d1fb      	bne.n	800ebc8 <_malloc_r+0xdc>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	6053      	str	r3, [r2, #4]
 800ebd4:	e7de      	b.n	800eb94 <_malloc_r+0xa8>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	6033      	str	r3, [r6, #0]
 800ebda:	4630      	mov	r0, r6
 800ebdc:	f000 f80c 	bl	800ebf8 <__malloc_unlock>
 800ebe0:	e794      	b.n	800eb0c <_malloc_r+0x20>
 800ebe2:	6005      	str	r5, [r0, #0]
 800ebe4:	e7d6      	b.n	800eb94 <_malloc_r+0xa8>
 800ebe6:	bf00      	nop
 800ebe8:	2000124c 	.word	0x2000124c

0800ebec <__malloc_lock>:
 800ebec:	4801      	ldr	r0, [pc, #4]	@ (800ebf4 <__malloc_lock+0x8>)
 800ebee:	f001 b920 	b.w	800fe32 <__retarget_lock_acquire_recursive>
 800ebf2:	bf00      	nop
 800ebf4:	20001390 	.word	0x20001390

0800ebf8 <__malloc_unlock>:
 800ebf8:	4801      	ldr	r0, [pc, #4]	@ (800ec00 <__malloc_unlock+0x8>)
 800ebfa:	f001 b91b 	b.w	800fe34 <__retarget_lock_release_recursive>
 800ebfe:	bf00      	nop
 800ec00:	20001390 	.word	0x20001390

0800ec04 <_strtol_l.isra.0>:
 800ec04:	2b24      	cmp	r3, #36	@ 0x24
 800ec06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec0a:	4686      	mov	lr, r0
 800ec0c:	4690      	mov	r8, r2
 800ec0e:	d801      	bhi.n	800ec14 <_strtol_l.isra.0+0x10>
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d106      	bne.n	800ec22 <_strtol_l.isra.0+0x1e>
 800ec14:	f001 f8e2 	bl	800fddc <__errno>
 800ec18:	2316      	movs	r3, #22
 800ec1a:	6003      	str	r3, [r0, #0]
 800ec1c:	2000      	movs	r0, #0
 800ec1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec22:	4834      	ldr	r0, [pc, #208]	@ (800ecf4 <_strtol_l.isra.0+0xf0>)
 800ec24:	460d      	mov	r5, r1
 800ec26:	462a      	mov	r2, r5
 800ec28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec2c:	5d06      	ldrb	r6, [r0, r4]
 800ec2e:	f016 0608 	ands.w	r6, r6, #8
 800ec32:	d1f8      	bne.n	800ec26 <_strtol_l.isra.0+0x22>
 800ec34:	2c2d      	cmp	r4, #45	@ 0x2d
 800ec36:	d110      	bne.n	800ec5a <_strtol_l.isra.0+0x56>
 800ec38:	782c      	ldrb	r4, [r5, #0]
 800ec3a:	2601      	movs	r6, #1
 800ec3c:	1c95      	adds	r5, r2, #2
 800ec3e:	f033 0210 	bics.w	r2, r3, #16
 800ec42:	d115      	bne.n	800ec70 <_strtol_l.isra.0+0x6c>
 800ec44:	2c30      	cmp	r4, #48	@ 0x30
 800ec46:	d10d      	bne.n	800ec64 <_strtol_l.isra.0+0x60>
 800ec48:	782a      	ldrb	r2, [r5, #0]
 800ec4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec4e:	2a58      	cmp	r2, #88	@ 0x58
 800ec50:	d108      	bne.n	800ec64 <_strtol_l.isra.0+0x60>
 800ec52:	786c      	ldrb	r4, [r5, #1]
 800ec54:	3502      	adds	r5, #2
 800ec56:	2310      	movs	r3, #16
 800ec58:	e00a      	b.n	800ec70 <_strtol_l.isra.0+0x6c>
 800ec5a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ec5c:	bf04      	itt	eq
 800ec5e:	782c      	ldrbeq	r4, [r5, #0]
 800ec60:	1c95      	addeq	r5, r2, #2
 800ec62:	e7ec      	b.n	800ec3e <_strtol_l.isra.0+0x3a>
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1f6      	bne.n	800ec56 <_strtol_l.isra.0+0x52>
 800ec68:	2c30      	cmp	r4, #48	@ 0x30
 800ec6a:	bf14      	ite	ne
 800ec6c:	230a      	movne	r3, #10
 800ec6e:	2308      	moveq	r3, #8
 800ec70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ec74:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ec78:	2200      	movs	r2, #0
 800ec7a:	fbbc f9f3 	udiv	r9, ip, r3
 800ec7e:	4610      	mov	r0, r2
 800ec80:	fb03 ca19 	mls	sl, r3, r9, ip
 800ec84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ec88:	2f09      	cmp	r7, #9
 800ec8a:	d80f      	bhi.n	800ecac <_strtol_l.isra.0+0xa8>
 800ec8c:	463c      	mov	r4, r7
 800ec8e:	42a3      	cmp	r3, r4
 800ec90:	dd1b      	ble.n	800ecca <_strtol_l.isra.0+0xc6>
 800ec92:	1c57      	adds	r7, r2, #1
 800ec94:	d007      	beq.n	800eca6 <_strtol_l.isra.0+0xa2>
 800ec96:	4581      	cmp	r9, r0
 800ec98:	d314      	bcc.n	800ecc4 <_strtol_l.isra.0+0xc0>
 800ec9a:	d101      	bne.n	800eca0 <_strtol_l.isra.0+0x9c>
 800ec9c:	45a2      	cmp	sl, r4
 800ec9e:	db11      	blt.n	800ecc4 <_strtol_l.isra.0+0xc0>
 800eca0:	fb00 4003 	mla	r0, r0, r3, r4
 800eca4:	2201      	movs	r2, #1
 800eca6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecaa:	e7eb      	b.n	800ec84 <_strtol_l.isra.0+0x80>
 800ecac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ecb0:	2f19      	cmp	r7, #25
 800ecb2:	d801      	bhi.n	800ecb8 <_strtol_l.isra.0+0xb4>
 800ecb4:	3c37      	subs	r4, #55	@ 0x37
 800ecb6:	e7ea      	b.n	800ec8e <_strtol_l.isra.0+0x8a>
 800ecb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ecbc:	2f19      	cmp	r7, #25
 800ecbe:	d804      	bhi.n	800ecca <_strtol_l.isra.0+0xc6>
 800ecc0:	3c57      	subs	r4, #87	@ 0x57
 800ecc2:	e7e4      	b.n	800ec8e <_strtol_l.isra.0+0x8a>
 800ecc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc8:	e7ed      	b.n	800eca6 <_strtol_l.isra.0+0xa2>
 800ecca:	1c53      	adds	r3, r2, #1
 800eccc:	d108      	bne.n	800ece0 <_strtol_l.isra.0+0xdc>
 800ecce:	2322      	movs	r3, #34	@ 0x22
 800ecd0:	f8ce 3000 	str.w	r3, [lr]
 800ecd4:	4660      	mov	r0, ip
 800ecd6:	f1b8 0f00 	cmp.w	r8, #0
 800ecda:	d0a0      	beq.n	800ec1e <_strtol_l.isra.0+0x1a>
 800ecdc:	1e69      	subs	r1, r5, #1
 800ecde:	e006      	b.n	800ecee <_strtol_l.isra.0+0xea>
 800ece0:	b106      	cbz	r6, 800ece4 <_strtol_l.isra.0+0xe0>
 800ece2:	4240      	negs	r0, r0
 800ece4:	f1b8 0f00 	cmp.w	r8, #0
 800ece8:	d099      	beq.n	800ec1e <_strtol_l.isra.0+0x1a>
 800ecea:	2a00      	cmp	r2, #0
 800ecec:	d1f6      	bne.n	800ecdc <_strtol_l.isra.0+0xd8>
 800ecee:	f8c8 1000 	str.w	r1, [r8]
 800ecf2:	e794      	b.n	800ec1e <_strtol_l.isra.0+0x1a>
 800ecf4:	0803df89 	.word	0x0803df89

0800ecf8 <_strtol_r>:
 800ecf8:	f7ff bf84 	b.w	800ec04 <_strtol_l.isra.0>

0800ecfc <strtol>:
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	460a      	mov	r2, r1
 800ed00:	4601      	mov	r1, r0
 800ed02:	4802      	ldr	r0, [pc, #8]	@ (800ed0c <strtol+0x10>)
 800ed04:	6800      	ldr	r0, [r0, #0]
 800ed06:	f7ff bf7d 	b.w	800ec04 <_strtol_l.isra.0>
 800ed0a:	bf00      	nop
 800ed0c:	20000060 	.word	0x20000060

0800ed10 <__cvt>:
 800ed10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed14:	ec57 6b10 	vmov	r6, r7, d0
 800ed18:	2f00      	cmp	r7, #0
 800ed1a:	460c      	mov	r4, r1
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	463b      	mov	r3, r7
 800ed20:	bfbb      	ittet	lt
 800ed22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ed26:	461f      	movlt	r7, r3
 800ed28:	2300      	movge	r3, #0
 800ed2a:	232d      	movlt	r3, #45	@ 0x2d
 800ed2c:	700b      	strb	r3, [r1, #0]
 800ed2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ed34:	4691      	mov	r9, r2
 800ed36:	f023 0820 	bic.w	r8, r3, #32
 800ed3a:	bfbc      	itt	lt
 800ed3c:	4632      	movlt	r2, r6
 800ed3e:	4616      	movlt	r6, r2
 800ed40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ed44:	d005      	beq.n	800ed52 <__cvt+0x42>
 800ed46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ed4a:	d100      	bne.n	800ed4e <__cvt+0x3e>
 800ed4c:	3401      	adds	r4, #1
 800ed4e:	2102      	movs	r1, #2
 800ed50:	e000      	b.n	800ed54 <__cvt+0x44>
 800ed52:	2103      	movs	r1, #3
 800ed54:	ab03      	add	r3, sp, #12
 800ed56:	9301      	str	r3, [sp, #4]
 800ed58:	ab02      	add	r3, sp, #8
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	ec47 6b10 	vmov	d0, r6, r7
 800ed60:	4653      	mov	r3, sl
 800ed62:	4622      	mov	r2, r4
 800ed64:	f001 f904 	bl	800ff70 <_dtoa_r>
 800ed68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ed6c:	4605      	mov	r5, r0
 800ed6e:	d119      	bne.n	800eda4 <__cvt+0x94>
 800ed70:	f019 0f01 	tst.w	r9, #1
 800ed74:	d00e      	beq.n	800ed94 <__cvt+0x84>
 800ed76:	eb00 0904 	add.w	r9, r0, r4
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	4630      	mov	r0, r6
 800ed80:	4639      	mov	r1, r7
 800ed82:	f7f1 feb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed86:	b108      	cbz	r0, 800ed8c <__cvt+0x7c>
 800ed88:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed8c:	2230      	movs	r2, #48	@ 0x30
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	454b      	cmp	r3, r9
 800ed92:	d31e      	bcc.n	800edd2 <__cvt+0xc2>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed98:	1b5b      	subs	r3, r3, r5
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	6013      	str	r3, [r2, #0]
 800ed9e:	b004      	add	sp, #16
 800eda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eda8:	eb00 0904 	add.w	r9, r0, r4
 800edac:	d1e5      	bne.n	800ed7a <__cvt+0x6a>
 800edae:	7803      	ldrb	r3, [r0, #0]
 800edb0:	2b30      	cmp	r3, #48	@ 0x30
 800edb2:	d10a      	bne.n	800edca <__cvt+0xba>
 800edb4:	2200      	movs	r2, #0
 800edb6:	2300      	movs	r3, #0
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 fe94 	bl	8000ae8 <__aeabi_dcmpeq>
 800edc0:	b918      	cbnz	r0, 800edca <__cvt+0xba>
 800edc2:	f1c4 0401 	rsb	r4, r4, #1
 800edc6:	f8ca 4000 	str.w	r4, [sl]
 800edca:	f8da 3000 	ldr.w	r3, [sl]
 800edce:	4499      	add	r9, r3
 800edd0:	e7d3      	b.n	800ed7a <__cvt+0x6a>
 800edd2:	1c59      	adds	r1, r3, #1
 800edd4:	9103      	str	r1, [sp, #12]
 800edd6:	701a      	strb	r2, [r3, #0]
 800edd8:	e7d9      	b.n	800ed8e <__cvt+0x7e>

0800edda <__exponent>:
 800edda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eddc:	2900      	cmp	r1, #0
 800edde:	bfba      	itte	lt
 800ede0:	4249      	neglt	r1, r1
 800ede2:	232d      	movlt	r3, #45	@ 0x2d
 800ede4:	232b      	movge	r3, #43	@ 0x2b
 800ede6:	2909      	cmp	r1, #9
 800ede8:	7002      	strb	r2, [r0, #0]
 800edea:	7043      	strb	r3, [r0, #1]
 800edec:	dd29      	ble.n	800ee42 <__exponent+0x68>
 800edee:	f10d 0307 	add.w	r3, sp, #7
 800edf2:	461d      	mov	r5, r3
 800edf4:	270a      	movs	r7, #10
 800edf6:	461a      	mov	r2, r3
 800edf8:	fbb1 f6f7 	udiv	r6, r1, r7
 800edfc:	fb07 1416 	mls	r4, r7, r6, r1
 800ee00:	3430      	adds	r4, #48	@ 0x30
 800ee02:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee06:	460c      	mov	r4, r1
 800ee08:	2c63      	cmp	r4, #99	@ 0x63
 800ee0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee0e:	4631      	mov	r1, r6
 800ee10:	dcf1      	bgt.n	800edf6 <__exponent+0x1c>
 800ee12:	3130      	adds	r1, #48	@ 0x30
 800ee14:	1e94      	subs	r4, r2, #2
 800ee16:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee1a:	1c41      	adds	r1, r0, #1
 800ee1c:	4623      	mov	r3, r4
 800ee1e:	42ab      	cmp	r3, r5
 800ee20:	d30a      	bcc.n	800ee38 <__exponent+0x5e>
 800ee22:	f10d 0309 	add.w	r3, sp, #9
 800ee26:	1a9b      	subs	r3, r3, r2
 800ee28:	42ac      	cmp	r4, r5
 800ee2a:	bf88      	it	hi
 800ee2c:	2300      	movhi	r3, #0
 800ee2e:	3302      	adds	r3, #2
 800ee30:	4403      	add	r3, r0
 800ee32:	1a18      	subs	r0, r3, r0
 800ee34:	b003      	add	sp, #12
 800ee36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee38:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ee3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ee40:	e7ed      	b.n	800ee1e <__exponent+0x44>
 800ee42:	2330      	movs	r3, #48	@ 0x30
 800ee44:	3130      	adds	r1, #48	@ 0x30
 800ee46:	7083      	strb	r3, [r0, #2]
 800ee48:	70c1      	strb	r1, [r0, #3]
 800ee4a:	1d03      	adds	r3, r0, #4
 800ee4c:	e7f1      	b.n	800ee32 <__exponent+0x58>
	...

0800ee50 <_printf_float>:
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	b08d      	sub	sp, #52	@ 0x34
 800ee56:	460c      	mov	r4, r1
 800ee58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ee5c:	4616      	mov	r6, r2
 800ee5e:	461f      	mov	r7, r3
 800ee60:	4605      	mov	r5, r0
 800ee62:	f000 ff61 	bl	800fd28 <_localeconv_r>
 800ee66:	6803      	ldr	r3, [r0, #0]
 800ee68:	9304      	str	r3, [sp, #16]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f1 fa10 	bl	8000290 <strlen>
 800ee70:	2300      	movs	r3, #0
 800ee72:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee74:	f8d8 3000 	ldr.w	r3, [r8]
 800ee78:	9005      	str	r0, [sp, #20]
 800ee7a:	3307      	adds	r3, #7
 800ee7c:	f023 0307 	bic.w	r3, r3, #7
 800ee80:	f103 0208 	add.w	r2, r3, #8
 800ee84:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ee88:	f8d4 b000 	ldr.w	fp, [r4]
 800ee8c:	f8c8 2000 	str.w	r2, [r8]
 800ee90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ee98:	9307      	str	r3, [sp, #28]
 800ee9a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eea6:	4b9c      	ldr	r3, [pc, #624]	@ (800f118 <_printf_float+0x2c8>)
 800eea8:	f04f 32ff 	mov.w	r2, #4294967295
 800eeac:	f7f1 fe4e 	bl	8000b4c <__aeabi_dcmpun>
 800eeb0:	bb70      	cbnz	r0, 800ef10 <_printf_float+0xc0>
 800eeb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeb6:	4b98      	ldr	r3, [pc, #608]	@ (800f118 <_printf_float+0x2c8>)
 800eeb8:	f04f 32ff 	mov.w	r2, #4294967295
 800eebc:	f7f1 fe28 	bl	8000b10 <__aeabi_dcmple>
 800eec0:	bb30      	cbnz	r0, 800ef10 <_printf_float+0xc0>
 800eec2:	2200      	movs	r2, #0
 800eec4:	2300      	movs	r3, #0
 800eec6:	4640      	mov	r0, r8
 800eec8:	4649      	mov	r1, r9
 800eeca:	f7f1 fe17 	bl	8000afc <__aeabi_dcmplt>
 800eece:	b110      	cbz	r0, 800eed6 <_printf_float+0x86>
 800eed0:	232d      	movs	r3, #45	@ 0x2d
 800eed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eed6:	4a91      	ldr	r2, [pc, #580]	@ (800f11c <_printf_float+0x2cc>)
 800eed8:	4b91      	ldr	r3, [pc, #580]	@ (800f120 <_printf_float+0x2d0>)
 800eeda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eede:	bf8c      	ite	hi
 800eee0:	4690      	movhi	r8, r2
 800eee2:	4698      	movls	r8, r3
 800eee4:	2303      	movs	r3, #3
 800eee6:	6123      	str	r3, [r4, #16]
 800eee8:	f02b 0304 	bic.w	r3, fp, #4
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	f04f 0900 	mov.w	r9, #0
 800eef2:	9700      	str	r7, [sp, #0]
 800eef4:	4633      	mov	r3, r6
 800eef6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eef8:	4621      	mov	r1, r4
 800eefa:	4628      	mov	r0, r5
 800eefc:	f000 f9d2 	bl	800f2a4 <_printf_common>
 800ef00:	3001      	adds	r0, #1
 800ef02:	f040 808d 	bne.w	800f020 <_printf_float+0x1d0>
 800ef06:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0a:	b00d      	add	sp, #52	@ 0x34
 800ef0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef10:	4642      	mov	r2, r8
 800ef12:	464b      	mov	r3, r9
 800ef14:	4640      	mov	r0, r8
 800ef16:	4649      	mov	r1, r9
 800ef18:	f7f1 fe18 	bl	8000b4c <__aeabi_dcmpun>
 800ef1c:	b140      	cbz	r0, 800ef30 <_printf_float+0xe0>
 800ef1e:	464b      	mov	r3, r9
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	bfbc      	itt	lt
 800ef24:	232d      	movlt	r3, #45	@ 0x2d
 800ef26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ef2a:	4a7e      	ldr	r2, [pc, #504]	@ (800f124 <_printf_float+0x2d4>)
 800ef2c:	4b7e      	ldr	r3, [pc, #504]	@ (800f128 <_printf_float+0x2d8>)
 800ef2e:	e7d4      	b.n	800eeda <_printf_float+0x8a>
 800ef30:	6863      	ldr	r3, [r4, #4]
 800ef32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ef36:	9206      	str	r2, [sp, #24]
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	d13b      	bne.n	800efb4 <_printf_float+0x164>
 800ef3c:	2306      	movs	r3, #6
 800ef3e:	6063      	str	r3, [r4, #4]
 800ef40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ef44:	2300      	movs	r3, #0
 800ef46:	6022      	str	r2, [r4, #0]
 800ef48:	9303      	str	r3, [sp, #12]
 800ef4a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ef4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ef50:	ab09      	add	r3, sp, #36	@ 0x24
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	6861      	ldr	r1, [r4, #4]
 800ef56:	ec49 8b10 	vmov	d0, r8, r9
 800ef5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ef5e:	4628      	mov	r0, r5
 800ef60:	f7ff fed6 	bl	800ed10 <__cvt>
 800ef64:	9b06      	ldr	r3, [sp, #24]
 800ef66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef68:	2b47      	cmp	r3, #71	@ 0x47
 800ef6a:	4680      	mov	r8, r0
 800ef6c:	d129      	bne.n	800efc2 <_printf_float+0x172>
 800ef6e:	1cc8      	adds	r0, r1, #3
 800ef70:	db02      	blt.n	800ef78 <_printf_float+0x128>
 800ef72:	6863      	ldr	r3, [r4, #4]
 800ef74:	4299      	cmp	r1, r3
 800ef76:	dd41      	ble.n	800effc <_printf_float+0x1ac>
 800ef78:	f1aa 0a02 	sub.w	sl, sl, #2
 800ef7c:	fa5f fa8a 	uxtb.w	sl, sl
 800ef80:	3901      	subs	r1, #1
 800ef82:	4652      	mov	r2, sl
 800ef84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ef88:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef8a:	f7ff ff26 	bl	800edda <__exponent>
 800ef8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef90:	1813      	adds	r3, r2, r0
 800ef92:	2a01      	cmp	r2, #1
 800ef94:	4681      	mov	r9, r0
 800ef96:	6123      	str	r3, [r4, #16]
 800ef98:	dc02      	bgt.n	800efa0 <_printf_float+0x150>
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	07d2      	lsls	r2, r2, #31
 800ef9e:	d501      	bpl.n	800efa4 <_printf_float+0x154>
 800efa0:	3301      	adds	r3, #1
 800efa2:	6123      	str	r3, [r4, #16]
 800efa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d0a2      	beq.n	800eef2 <_printf_float+0xa2>
 800efac:	232d      	movs	r3, #45	@ 0x2d
 800efae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efb2:	e79e      	b.n	800eef2 <_printf_float+0xa2>
 800efb4:	9a06      	ldr	r2, [sp, #24]
 800efb6:	2a47      	cmp	r2, #71	@ 0x47
 800efb8:	d1c2      	bne.n	800ef40 <_printf_float+0xf0>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1c0      	bne.n	800ef40 <_printf_float+0xf0>
 800efbe:	2301      	movs	r3, #1
 800efc0:	e7bd      	b.n	800ef3e <_printf_float+0xee>
 800efc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800efc6:	d9db      	bls.n	800ef80 <_printf_float+0x130>
 800efc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800efcc:	d118      	bne.n	800f000 <_printf_float+0x1b0>
 800efce:	2900      	cmp	r1, #0
 800efd0:	6863      	ldr	r3, [r4, #4]
 800efd2:	dd0b      	ble.n	800efec <_printf_float+0x19c>
 800efd4:	6121      	str	r1, [r4, #16]
 800efd6:	b913      	cbnz	r3, 800efde <_printf_float+0x18e>
 800efd8:	6822      	ldr	r2, [r4, #0]
 800efda:	07d0      	lsls	r0, r2, #31
 800efdc:	d502      	bpl.n	800efe4 <_printf_float+0x194>
 800efde:	3301      	adds	r3, #1
 800efe0:	440b      	add	r3, r1
 800efe2:	6123      	str	r3, [r4, #16]
 800efe4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800efe6:	f04f 0900 	mov.w	r9, #0
 800efea:	e7db      	b.n	800efa4 <_printf_float+0x154>
 800efec:	b913      	cbnz	r3, 800eff4 <_printf_float+0x1a4>
 800efee:	6822      	ldr	r2, [r4, #0]
 800eff0:	07d2      	lsls	r2, r2, #31
 800eff2:	d501      	bpl.n	800eff8 <_printf_float+0x1a8>
 800eff4:	3302      	adds	r3, #2
 800eff6:	e7f4      	b.n	800efe2 <_printf_float+0x192>
 800eff8:	2301      	movs	r3, #1
 800effa:	e7f2      	b.n	800efe2 <_printf_float+0x192>
 800effc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f002:	4299      	cmp	r1, r3
 800f004:	db05      	blt.n	800f012 <_printf_float+0x1c2>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	6121      	str	r1, [r4, #16]
 800f00a:	07d8      	lsls	r0, r3, #31
 800f00c:	d5ea      	bpl.n	800efe4 <_printf_float+0x194>
 800f00e:	1c4b      	adds	r3, r1, #1
 800f010:	e7e7      	b.n	800efe2 <_printf_float+0x192>
 800f012:	2900      	cmp	r1, #0
 800f014:	bfd4      	ite	le
 800f016:	f1c1 0202 	rsble	r2, r1, #2
 800f01a:	2201      	movgt	r2, #1
 800f01c:	4413      	add	r3, r2
 800f01e:	e7e0      	b.n	800efe2 <_printf_float+0x192>
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	055a      	lsls	r2, r3, #21
 800f024:	d407      	bmi.n	800f036 <_printf_float+0x1e6>
 800f026:	6923      	ldr	r3, [r4, #16]
 800f028:	4642      	mov	r2, r8
 800f02a:	4631      	mov	r1, r6
 800f02c:	4628      	mov	r0, r5
 800f02e:	47b8      	blx	r7
 800f030:	3001      	adds	r0, #1
 800f032:	d12b      	bne.n	800f08c <_printf_float+0x23c>
 800f034:	e767      	b.n	800ef06 <_printf_float+0xb6>
 800f036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f03a:	f240 80dd 	bls.w	800f1f8 <_printf_float+0x3a8>
 800f03e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f042:	2200      	movs	r2, #0
 800f044:	2300      	movs	r3, #0
 800f046:	f7f1 fd4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d033      	beq.n	800f0b6 <_printf_float+0x266>
 800f04e:	4a37      	ldr	r2, [pc, #220]	@ (800f12c <_printf_float+0x2dc>)
 800f050:	2301      	movs	r3, #1
 800f052:	4631      	mov	r1, r6
 800f054:	4628      	mov	r0, r5
 800f056:	47b8      	blx	r7
 800f058:	3001      	adds	r0, #1
 800f05a:	f43f af54 	beq.w	800ef06 <_printf_float+0xb6>
 800f05e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f062:	4543      	cmp	r3, r8
 800f064:	db02      	blt.n	800f06c <_printf_float+0x21c>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	07d8      	lsls	r0, r3, #31
 800f06a:	d50f      	bpl.n	800f08c <_printf_float+0x23c>
 800f06c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f070:	4631      	mov	r1, r6
 800f072:	4628      	mov	r0, r5
 800f074:	47b8      	blx	r7
 800f076:	3001      	adds	r0, #1
 800f078:	f43f af45 	beq.w	800ef06 <_printf_float+0xb6>
 800f07c:	f04f 0900 	mov.w	r9, #0
 800f080:	f108 38ff 	add.w	r8, r8, #4294967295
 800f084:	f104 0a1a 	add.w	sl, r4, #26
 800f088:	45c8      	cmp	r8, r9
 800f08a:	dc09      	bgt.n	800f0a0 <_printf_float+0x250>
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	079b      	lsls	r3, r3, #30
 800f090:	f100 8103 	bmi.w	800f29a <_printf_float+0x44a>
 800f094:	68e0      	ldr	r0, [r4, #12]
 800f096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f098:	4298      	cmp	r0, r3
 800f09a:	bfb8      	it	lt
 800f09c:	4618      	movlt	r0, r3
 800f09e:	e734      	b.n	800ef0a <_printf_float+0xba>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	4652      	mov	r2, sl
 800f0a4:	4631      	mov	r1, r6
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	47b8      	blx	r7
 800f0aa:	3001      	adds	r0, #1
 800f0ac:	f43f af2b 	beq.w	800ef06 <_printf_float+0xb6>
 800f0b0:	f109 0901 	add.w	r9, r9, #1
 800f0b4:	e7e8      	b.n	800f088 <_printf_float+0x238>
 800f0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	dc39      	bgt.n	800f130 <_printf_float+0x2e0>
 800f0bc:	4a1b      	ldr	r2, [pc, #108]	@ (800f12c <_printf_float+0x2dc>)
 800f0be:	2301      	movs	r3, #1
 800f0c0:	4631      	mov	r1, r6
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	47b8      	blx	r7
 800f0c6:	3001      	adds	r0, #1
 800f0c8:	f43f af1d 	beq.w	800ef06 <_printf_float+0xb6>
 800f0cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f0d0:	ea59 0303 	orrs.w	r3, r9, r3
 800f0d4:	d102      	bne.n	800f0dc <_printf_float+0x28c>
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	07d9      	lsls	r1, r3, #31
 800f0da:	d5d7      	bpl.n	800f08c <_printf_float+0x23c>
 800f0dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0e0:	4631      	mov	r1, r6
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	47b8      	blx	r7
 800f0e6:	3001      	adds	r0, #1
 800f0e8:	f43f af0d 	beq.w	800ef06 <_printf_float+0xb6>
 800f0ec:	f04f 0a00 	mov.w	sl, #0
 800f0f0:	f104 0b1a 	add.w	fp, r4, #26
 800f0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0f6:	425b      	negs	r3, r3
 800f0f8:	4553      	cmp	r3, sl
 800f0fa:	dc01      	bgt.n	800f100 <_printf_float+0x2b0>
 800f0fc:	464b      	mov	r3, r9
 800f0fe:	e793      	b.n	800f028 <_printf_float+0x1d8>
 800f100:	2301      	movs	r3, #1
 800f102:	465a      	mov	r2, fp
 800f104:	4631      	mov	r1, r6
 800f106:	4628      	mov	r0, r5
 800f108:	47b8      	blx	r7
 800f10a:	3001      	adds	r0, #1
 800f10c:	f43f aefb 	beq.w	800ef06 <_printf_float+0xb6>
 800f110:	f10a 0a01 	add.w	sl, sl, #1
 800f114:	e7ee      	b.n	800f0f4 <_printf_float+0x2a4>
 800f116:	bf00      	nop
 800f118:	7fefffff 	.word	0x7fefffff
 800f11c:	0803e08d 	.word	0x0803e08d
 800f120:	0803e089 	.word	0x0803e089
 800f124:	0803e095 	.word	0x0803e095
 800f128:	0803e091 	.word	0x0803e091
 800f12c:	0803e099 	.word	0x0803e099
 800f130:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f132:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f136:	4553      	cmp	r3, sl
 800f138:	bfa8      	it	ge
 800f13a:	4653      	movge	r3, sl
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	4699      	mov	r9, r3
 800f140:	dc36      	bgt.n	800f1b0 <_printf_float+0x360>
 800f142:	f04f 0b00 	mov.w	fp, #0
 800f146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f14a:	f104 021a 	add.w	r2, r4, #26
 800f14e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f150:	9306      	str	r3, [sp, #24]
 800f152:	eba3 0309 	sub.w	r3, r3, r9
 800f156:	455b      	cmp	r3, fp
 800f158:	dc31      	bgt.n	800f1be <_printf_float+0x36e>
 800f15a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f15c:	459a      	cmp	sl, r3
 800f15e:	dc3a      	bgt.n	800f1d6 <_printf_float+0x386>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	07da      	lsls	r2, r3, #31
 800f164:	d437      	bmi.n	800f1d6 <_printf_float+0x386>
 800f166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f168:	ebaa 0903 	sub.w	r9, sl, r3
 800f16c:	9b06      	ldr	r3, [sp, #24]
 800f16e:	ebaa 0303 	sub.w	r3, sl, r3
 800f172:	4599      	cmp	r9, r3
 800f174:	bfa8      	it	ge
 800f176:	4699      	movge	r9, r3
 800f178:	f1b9 0f00 	cmp.w	r9, #0
 800f17c:	dc33      	bgt.n	800f1e6 <_printf_float+0x396>
 800f17e:	f04f 0800 	mov.w	r8, #0
 800f182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f186:	f104 0b1a 	add.w	fp, r4, #26
 800f18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f18c:	ebaa 0303 	sub.w	r3, sl, r3
 800f190:	eba3 0309 	sub.w	r3, r3, r9
 800f194:	4543      	cmp	r3, r8
 800f196:	f77f af79 	ble.w	800f08c <_printf_float+0x23c>
 800f19a:	2301      	movs	r3, #1
 800f19c:	465a      	mov	r2, fp
 800f19e:	4631      	mov	r1, r6
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	47b8      	blx	r7
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	f43f aeae 	beq.w	800ef06 <_printf_float+0xb6>
 800f1aa:	f108 0801 	add.w	r8, r8, #1
 800f1ae:	e7ec      	b.n	800f18a <_printf_float+0x33a>
 800f1b0:	4642      	mov	r2, r8
 800f1b2:	4631      	mov	r1, r6
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	47b8      	blx	r7
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d1c2      	bne.n	800f142 <_printf_float+0x2f2>
 800f1bc:	e6a3      	b.n	800ef06 <_printf_float+0xb6>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	4631      	mov	r1, r6
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	9206      	str	r2, [sp, #24]
 800f1c6:	47b8      	blx	r7
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	f43f ae9c 	beq.w	800ef06 <_printf_float+0xb6>
 800f1ce:	9a06      	ldr	r2, [sp, #24]
 800f1d0:	f10b 0b01 	add.w	fp, fp, #1
 800f1d4:	e7bb      	b.n	800f14e <_printf_float+0x2fe>
 800f1d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1da:	4631      	mov	r1, r6
 800f1dc:	4628      	mov	r0, r5
 800f1de:	47b8      	blx	r7
 800f1e0:	3001      	adds	r0, #1
 800f1e2:	d1c0      	bne.n	800f166 <_printf_float+0x316>
 800f1e4:	e68f      	b.n	800ef06 <_printf_float+0xb6>
 800f1e6:	9a06      	ldr	r2, [sp, #24]
 800f1e8:	464b      	mov	r3, r9
 800f1ea:	4442      	add	r2, r8
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	47b8      	blx	r7
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	d1c3      	bne.n	800f17e <_printf_float+0x32e>
 800f1f6:	e686      	b.n	800ef06 <_printf_float+0xb6>
 800f1f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f1fc:	f1ba 0f01 	cmp.w	sl, #1
 800f200:	dc01      	bgt.n	800f206 <_printf_float+0x3b6>
 800f202:	07db      	lsls	r3, r3, #31
 800f204:	d536      	bpl.n	800f274 <_printf_float+0x424>
 800f206:	2301      	movs	r3, #1
 800f208:	4642      	mov	r2, r8
 800f20a:	4631      	mov	r1, r6
 800f20c:	4628      	mov	r0, r5
 800f20e:	47b8      	blx	r7
 800f210:	3001      	adds	r0, #1
 800f212:	f43f ae78 	beq.w	800ef06 <_printf_float+0xb6>
 800f216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f21a:	4631      	mov	r1, r6
 800f21c:	4628      	mov	r0, r5
 800f21e:	47b8      	blx	r7
 800f220:	3001      	adds	r0, #1
 800f222:	f43f ae70 	beq.w	800ef06 <_printf_float+0xb6>
 800f226:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f22a:	2200      	movs	r2, #0
 800f22c:	2300      	movs	r3, #0
 800f22e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f232:	f7f1 fc59 	bl	8000ae8 <__aeabi_dcmpeq>
 800f236:	b9c0      	cbnz	r0, 800f26a <_printf_float+0x41a>
 800f238:	4653      	mov	r3, sl
 800f23a:	f108 0201 	add.w	r2, r8, #1
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	d10c      	bne.n	800f262 <_printf_float+0x412>
 800f248:	e65d      	b.n	800ef06 <_printf_float+0xb6>
 800f24a:	2301      	movs	r3, #1
 800f24c:	465a      	mov	r2, fp
 800f24e:	4631      	mov	r1, r6
 800f250:	4628      	mov	r0, r5
 800f252:	47b8      	blx	r7
 800f254:	3001      	adds	r0, #1
 800f256:	f43f ae56 	beq.w	800ef06 <_printf_float+0xb6>
 800f25a:	f108 0801 	add.w	r8, r8, #1
 800f25e:	45d0      	cmp	r8, sl
 800f260:	dbf3      	blt.n	800f24a <_printf_float+0x3fa>
 800f262:	464b      	mov	r3, r9
 800f264:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f268:	e6df      	b.n	800f02a <_printf_float+0x1da>
 800f26a:	f04f 0800 	mov.w	r8, #0
 800f26e:	f104 0b1a 	add.w	fp, r4, #26
 800f272:	e7f4      	b.n	800f25e <_printf_float+0x40e>
 800f274:	2301      	movs	r3, #1
 800f276:	4642      	mov	r2, r8
 800f278:	e7e1      	b.n	800f23e <_printf_float+0x3ee>
 800f27a:	2301      	movs	r3, #1
 800f27c:	464a      	mov	r2, r9
 800f27e:	4631      	mov	r1, r6
 800f280:	4628      	mov	r0, r5
 800f282:	47b8      	blx	r7
 800f284:	3001      	adds	r0, #1
 800f286:	f43f ae3e 	beq.w	800ef06 <_printf_float+0xb6>
 800f28a:	f108 0801 	add.w	r8, r8, #1
 800f28e:	68e3      	ldr	r3, [r4, #12]
 800f290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f292:	1a5b      	subs	r3, r3, r1
 800f294:	4543      	cmp	r3, r8
 800f296:	dcf0      	bgt.n	800f27a <_printf_float+0x42a>
 800f298:	e6fc      	b.n	800f094 <_printf_float+0x244>
 800f29a:	f04f 0800 	mov.w	r8, #0
 800f29e:	f104 0919 	add.w	r9, r4, #25
 800f2a2:	e7f4      	b.n	800f28e <_printf_float+0x43e>

0800f2a4 <_printf_common>:
 800f2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a8:	4616      	mov	r6, r2
 800f2aa:	4698      	mov	r8, r3
 800f2ac:	688a      	ldr	r2, [r1, #8]
 800f2ae:	690b      	ldr	r3, [r1, #16]
 800f2b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	bfb8      	it	lt
 800f2b8:	4613      	movlt	r3, r2
 800f2ba:	6033      	str	r3, [r6, #0]
 800f2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f2c0:	4607      	mov	r7, r0
 800f2c2:	460c      	mov	r4, r1
 800f2c4:	b10a      	cbz	r2, 800f2ca <_printf_common+0x26>
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	6033      	str	r3, [r6, #0]
 800f2ca:	6823      	ldr	r3, [r4, #0]
 800f2cc:	0699      	lsls	r1, r3, #26
 800f2ce:	bf42      	ittt	mi
 800f2d0:	6833      	ldrmi	r3, [r6, #0]
 800f2d2:	3302      	addmi	r3, #2
 800f2d4:	6033      	strmi	r3, [r6, #0]
 800f2d6:	6825      	ldr	r5, [r4, #0]
 800f2d8:	f015 0506 	ands.w	r5, r5, #6
 800f2dc:	d106      	bne.n	800f2ec <_printf_common+0x48>
 800f2de:	f104 0a19 	add.w	sl, r4, #25
 800f2e2:	68e3      	ldr	r3, [r4, #12]
 800f2e4:	6832      	ldr	r2, [r6, #0]
 800f2e6:	1a9b      	subs	r3, r3, r2
 800f2e8:	42ab      	cmp	r3, r5
 800f2ea:	dc26      	bgt.n	800f33a <_printf_common+0x96>
 800f2ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f2f0:	6822      	ldr	r2, [r4, #0]
 800f2f2:	3b00      	subs	r3, #0
 800f2f4:	bf18      	it	ne
 800f2f6:	2301      	movne	r3, #1
 800f2f8:	0692      	lsls	r2, r2, #26
 800f2fa:	d42b      	bmi.n	800f354 <_printf_common+0xb0>
 800f2fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f300:	4641      	mov	r1, r8
 800f302:	4638      	mov	r0, r7
 800f304:	47c8      	blx	r9
 800f306:	3001      	adds	r0, #1
 800f308:	d01e      	beq.n	800f348 <_printf_common+0xa4>
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	6922      	ldr	r2, [r4, #16]
 800f30e:	f003 0306 	and.w	r3, r3, #6
 800f312:	2b04      	cmp	r3, #4
 800f314:	bf02      	ittt	eq
 800f316:	68e5      	ldreq	r5, [r4, #12]
 800f318:	6833      	ldreq	r3, [r6, #0]
 800f31a:	1aed      	subeq	r5, r5, r3
 800f31c:	68a3      	ldr	r3, [r4, #8]
 800f31e:	bf0c      	ite	eq
 800f320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f324:	2500      	movne	r5, #0
 800f326:	4293      	cmp	r3, r2
 800f328:	bfc4      	itt	gt
 800f32a:	1a9b      	subgt	r3, r3, r2
 800f32c:	18ed      	addgt	r5, r5, r3
 800f32e:	2600      	movs	r6, #0
 800f330:	341a      	adds	r4, #26
 800f332:	42b5      	cmp	r5, r6
 800f334:	d11a      	bne.n	800f36c <_printf_common+0xc8>
 800f336:	2000      	movs	r0, #0
 800f338:	e008      	b.n	800f34c <_printf_common+0xa8>
 800f33a:	2301      	movs	r3, #1
 800f33c:	4652      	mov	r2, sl
 800f33e:	4641      	mov	r1, r8
 800f340:	4638      	mov	r0, r7
 800f342:	47c8      	blx	r9
 800f344:	3001      	adds	r0, #1
 800f346:	d103      	bne.n	800f350 <_printf_common+0xac>
 800f348:	f04f 30ff 	mov.w	r0, #4294967295
 800f34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f350:	3501      	adds	r5, #1
 800f352:	e7c6      	b.n	800f2e2 <_printf_common+0x3e>
 800f354:	18e1      	adds	r1, r4, r3
 800f356:	1c5a      	adds	r2, r3, #1
 800f358:	2030      	movs	r0, #48	@ 0x30
 800f35a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f35e:	4422      	add	r2, r4
 800f360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f368:	3302      	adds	r3, #2
 800f36a:	e7c7      	b.n	800f2fc <_printf_common+0x58>
 800f36c:	2301      	movs	r3, #1
 800f36e:	4622      	mov	r2, r4
 800f370:	4641      	mov	r1, r8
 800f372:	4638      	mov	r0, r7
 800f374:	47c8      	blx	r9
 800f376:	3001      	adds	r0, #1
 800f378:	d0e6      	beq.n	800f348 <_printf_common+0xa4>
 800f37a:	3601      	adds	r6, #1
 800f37c:	e7d9      	b.n	800f332 <_printf_common+0x8e>
	...

0800f380 <_printf_i>:
 800f380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f384:	7e0f      	ldrb	r7, [r1, #24]
 800f386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f388:	2f78      	cmp	r7, #120	@ 0x78
 800f38a:	4691      	mov	r9, r2
 800f38c:	4680      	mov	r8, r0
 800f38e:	460c      	mov	r4, r1
 800f390:	469a      	mov	sl, r3
 800f392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f396:	d807      	bhi.n	800f3a8 <_printf_i+0x28>
 800f398:	2f62      	cmp	r7, #98	@ 0x62
 800f39a:	d80a      	bhi.n	800f3b2 <_printf_i+0x32>
 800f39c:	2f00      	cmp	r7, #0
 800f39e:	f000 80d1 	beq.w	800f544 <_printf_i+0x1c4>
 800f3a2:	2f58      	cmp	r7, #88	@ 0x58
 800f3a4:	f000 80b8 	beq.w	800f518 <_printf_i+0x198>
 800f3a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f3ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f3b0:	e03a      	b.n	800f428 <_printf_i+0xa8>
 800f3b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f3b6:	2b15      	cmp	r3, #21
 800f3b8:	d8f6      	bhi.n	800f3a8 <_printf_i+0x28>
 800f3ba:	a101      	add	r1, pc, #4	@ (adr r1, 800f3c0 <_printf_i+0x40>)
 800f3bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3c0:	0800f419 	.word	0x0800f419
 800f3c4:	0800f42d 	.word	0x0800f42d
 800f3c8:	0800f3a9 	.word	0x0800f3a9
 800f3cc:	0800f3a9 	.word	0x0800f3a9
 800f3d0:	0800f3a9 	.word	0x0800f3a9
 800f3d4:	0800f3a9 	.word	0x0800f3a9
 800f3d8:	0800f42d 	.word	0x0800f42d
 800f3dc:	0800f3a9 	.word	0x0800f3a9
 800f3e0:	0800f3a9 	.word	0x0800f3a9
 800f3e4:	0800f3a9 	.word	0x0800f3a9
 800f3e8:	0800f3a9 	.word	0x0800f3a9
 800f3ec:	0800f52b 	.word	0x0800f52b
 800f3f0:	0800f457 	.word	0x0800f457
 800f3f4:	0800f4e5 	.word	0x0800f4e5
 800f3f8:	0800f3a9 	.word	0x0800f3a9
 800f3fc:	0800f3a9 	.word	0x0800f3a9
 800f400:	0800f54d 	.word	0x0800f54d
 800f404:	0800f3a9 	.word	0x0800f3a9
 800f408:	0800f457 	.word	0x0800f457
 800f40c:	0800f3a9 	.word	0x0800f3a9
 800f410:	0800f3a9 	.word	0x0800f3a9
 800f414:	0800f4ed 	.word	0x0800f4ed
 800f418:	6833      	ldr	r3, [r6, #0]
 800f41a:	1d1a      	adds	r2, r3, #4
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6032      	str	r2, [r6, #0]
 800f420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f428:	2301      	movs	r3, #1
 800f42a:	e09c      	b.n	800f566 <_printf_i+0x1e6>
 800f42c:	6833      	ldr	r3, [r6, #0]
 800f42e:	6820      	ldr	r0, [r4, #0]
 800f430:	1d19      	adds	r1, r3, #4
 800f432:	6031      	str	r1, [r6, #0]
 800f434:	0606      	lsls	r6, r0, #24
 800f436:	d501      	bpl.n	800f43c <_printf_i+0xbc>
 800f438:	681d      	ldr	r5, [r3, #0]
 800f43a:	e003      	b.n	800f444 <_printf_i+0xc4>
 800f43c:	0645      	lsls	r5, r0, #25
 800f43e:	d5fb      	bpl.n	800f438 <_printf_i+0xb8>
 800f440:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f444:	2d00      	cmp	r5, #0
 800f446:	da03      	bge.n	800f450 <_printf_i+0xd0>
 800f448:	232d      	movs	r3, #45	@ 0x2d
 800f44a:	426d      	negs	r5, r5
 800f44c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f450:	4858      	ldr	r0, [pc, #352]	@ (800f5b4 <_printf_i+0x234>)
 800f452:	230a      	movs	r3, #10
 800f454:	e011      	b.n	800f47a <_printf_i+0xfa>
 800f456:	6821      	ldr	r1, [r4, #0]
 800f458:	6833      	ldr	r3, [r6, #0]
 800f45a:	0608      	lsls	r0, r1, #24
 800f45c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f460:	d402      	bmi.n	800f468 <_printf_i+0xe8>
 800f462:	0649      	lsls	r1, r1, #25
 800f464:	bf48      	it	mi
 800f466:	b2ad      	uxthmi	r5, r5
 800f468:	2f6f      	cmp	r7, #111	@ 0x6f
 800f46a:	4852      	ldr	r0, [pc, #328]	@ (800f5b4 <_printf_i+0x234>)
 800f46c:	6033      	str	r3, [r6, #0]
 800f46e:	bf14      	ite	ne
 800f470:	230a      	movne	r3, #10
 800f472:	2308      	moveq	r3, #8
 800f474:	2100      	movs	r1, #0
 800f476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f47a:	6866      	ldr	r6, [r4, #4]
 800f47c:	60a6      	str	r6, [r4, #8]
 800f47e:	2e00      	cmp	r6, #0
 800f480:	db05      	blt.n	800f48e <_printf_i+0x10e>
 800f482:	6821      	ldr	r1, [r4, #0]
 800f484:	432e      	orrs	r6, r5
 800f486:	f021 0104 	bic.w	r1, r1, #4
 800f48a:	6021      	str	r1, [r4, #0]
 800f48c:	d04b      	beq.n	800f526 <_printf_i+0x1a6>
 800f48e:	4616      	mov	r6, r2
 800f490:	fbb5 f1f3 	udiv	r1, r5, r3
 800f494:	fb03 5711 	mls	r7, r3, r1, r5
 800f498:	5dc7      	ldrb	r7, [r0, r7]
 800f49a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f49e:	462f      	mov	r7, r5
 800f4a0:	42bb      	cmp	r3, r7
 800f4a2:	460d      	mov	r5, r1
 800f4a4:	d9f4      	bls.n	800f490 <_printf_i+0x110>
 800f4a6:	2b08      	cmp	r3, #8
 800f4a8:	d10b      	bne.n	800f4c2 <_printf_i+0x142>
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	07df      	lsls	r7, r3, #31
 800f4ae:	d508      	bpl.n	800f4c2 <_printf_i+0x142>
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	6861      	ldr	r1, [r4, #4]
 800f4b4:	4299      	cmp	r1, r3
 800f4b6:	bfde      	ittt	le
 800f4b8:	2330      	movle	r3, #48	@ 0x30
 800f4ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4be:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f4c2:	1b92      	subs	r2, r2, r6
 800f4c4:	6122      	str	r2, [r4, #16]
 800f4c6:	f8cd a000 	str.w	sl, [sp]
 800f4ca:	464b      	mov	r3, r9
 800f4cc:	aa03      	add	r2, sp, #12
 800f4ce:	4621      	mov	r1, r4
 800f4d0:	4640      	mov	r0, r8
 800f4d2:	f7ff fee7 	bl	800f2a4 <_printf_common>
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	d14a      	bne.n	800f570 <_printf_i+0x1f0>
 800f4da:	f04f 30ff 	mov.w	r0, #4294967295
 800f4de:	b004      	add	sp, #16
 800f4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e4:	6823      	ldr	r3, [r4, #0]
 800f4e6:	f043 0320 	orr.w	r3, r3, #32
 800f4ea:	6023      	str	r3, [r4, #0]
 800f4ec:	4832      	ldr	r0, [pc, #200]	@ (800f5b8 <_printf_i+0x238>)
 800f4ee:	2778      	movs	r7, #120	@ 0x78
 800f4f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f4f4:	6823      	ldr	r3, [r4, #0]
 800f4f6:	6831      	ldr	r1, [r6, #0]
 800f4f8:	061f      	lsls	r7, r3, #24
 800f4fa:	f851 5b04 	ldr.w	r5, [r1], #4
 800f4fe:	d402      	bmi.n	800f506 <_printf_i+0x186>
 800f500:	065f      	lsls	r7, r3, #25
 800f502:	bf48      	it	mi
 800f504:	b2ad      	uxthmi	r5, r5
 800f506:	6031      	str	r1, [r6, #0]
 800f508:	07d9      	lsls	r1, r3, #31
 800f50a:	bf44      	itt	mi
 800f50c:	f043 0320 	orrmi.w	r3, r3, #32
 800f510:	6023      	strmi	r3, [r4, #0]
 800f512:	b11d      	cbz	r5, 800f51c <_printf_i+0x19c>
 800f514:	2310      	movs	r3, #16
 800f516:	e7ad      	b.n	800f474 <_printf_i+0xf4>
 800f518:	4826      	ldr	r0, [pc, #152]	@ (800f5b4 <_printf_i+0x234>)
 800f51a:	e7e9      	b.n	800f4f0 <_printf_i+0x170>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	f023 0320 	bic.w	r3, r3, #32
 800f522:	6023      	str	r3, [r4, #0]
 800f524:	e7f6      	b.n	800f514 <_printf_i+0x194>
 800f526:	4616      	mov	r6, r2
 800f528:	e7bd      	b.n	800f4a6 <_printf_i+0x126>
 800f52a:	6833      	ldr	r3, [r6, #0]
 800f52c:	6825      	ldr	r5, [r4, #0]
 800f52e:	6961      	ldr	r1, [r4, #20]
 800f530:	1d18      	adds	r0, r3, #4
 800f532:	6030      	str	r0, [r6, #0]
 800f534:	062e      	lsls	r6, r5, #24
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	d501      	bpl.n	800f53e <_printf_i+0x1be>
 800f53a:	6019      	str	r1, [r3, #0]
 800f53c:	e002      	b.n	800f544 <_printf_i+0x1c4>
 800f53e:	0668      	lsls	r0, r5, #25
 800f540:	d5fb      	bpl.n	800f53a <_printf_i+0x1ba>
 800f542:	8019      	strh	r1, [r3, #0]
 800f544:	2300      	movs	r3, #0
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	4616      	mov	r6, r2
 800f54a:	e7bc      	b.n	800f4c6 <_printf_i+0x146>
 800f54c:	6833      	ldr	r3, [r6, #0]
 800f54e:	1d1a      	adds	r2, r3, #4
 800f550:	6032      	str	r2, [r6, #0]
 800f552:	681e      	ldr	r6, [r3, #0]
 800f554:	6862      	ldr	r2, [r4, #4]
 800f556:	2100      	movs	r1, #0
 800f558:	4630      	mov	r0, r6
 800f55a:	f7f0 fe49 	bl	80001f0 <memchr>
 800f55e:	b108      	cbz	r0, 800f564 <_printf_i+0x1e4>
 800f560:	1b80      	subs	r0, r0, r6
 800f562:	6060      	str	r0, [r4, #4]
 800f564:	6863      	ldr	r3, [r4, #4]
 800f566:	6123      	str	r3, [r4, #16]
 800f568:	2300      	movs	r3, #0
 800f56a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f56e:	e7aa      	b.n	800f4c6 <_printf_i+0x146>
 800f570:	6923      	ldr	r3, [r4, #16]
 800f572:	4632      	mov	r2, r6
 800f574:	4649      	mov	r1, r9
 800f576:	4640      	mov	r0, r8
 800f578:	47d0      	blx	sl
 800f57a:	3001      	adds	r0, #1
 800f57c:	d0ad      	beq.n	800f4da <_printf_i+0x15a>
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	079b      	lsls	r3, r3, #30
 800f582:	d413      	bmi.n	800f5ac <_printf_i+0x22c>
 800f584:	68e0      	ldr	r0, [r4, #12]
 800f586:	9b03      	ldr	r3, [sp, #12]
 800f588:	4298      	cmp	r0, r3
 800f58a:	bfb8      	it	lt
 800f58c:	4618      	movlt	r0, r3
 800f58e:	e7a6      	b.n	800f4de <_printf_i+0x15e>
 800f590:	2301      	movs	r3, #1
 800f592:	4632      	mov	r2, r6
 800f594:	4649      	mov	r1, r9
 800f596:	4640      	mov	r0, r8
 800f598:	47d0      	blx	sl
 800f59a:	3001      	adds	r0, #1
 800f59c:	d09d      	beq.n	800f4da <_printf_i+0x15a>
 800f59e:	3501      	adds	r5, #1
 800f5a0:	68e3      	ldr	r3, [r4, #12]
 800f5a2:	9903      	ldr	r1, [sp, #12]
 800f5a4:	1a5b      	subs	r3, r3, r1
 800f5a6:	42ab      	cmp	r3, r5
 800f5a8:	dcf2      	bgt.n	800f590 <_printf_i+0x210>
 800f5aa:	e7eb      	b.n	800f584 <_printf_i+0x204>
 800f5ac:	2500      	movs	r5, #0
 800f5ae:	f104 0619 	add.w	r6, r4, #25
 800f5b2:	e7f5      	b.n	800f5a0 <_printf_i+0x220>
 800f5b4:	0803e09b 	.word	0x0803e09b
 800f5b8:	0803e0ac 	.word	0x0803e0ac

0800f5bc <_scanf_float>:
 800f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c0:	b087      	sub	sp, #28
 800f5c2:	4691      	mov	r9, r2
 800f5c4:	9303      	str	r3, [sp, #12]
 800f5c6:	688b      	ldr	r3, [r1, #8]
 800f5c8:	1e5a      	subs	r2, r3, #1
 800f5ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f5ce:	bf81      	itttt	hi
 800f5d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f5d4:	eb03 0b05 	addhi.w	fp, r3, r5
 800f5d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f5dc:	608b      	strhi	r3, [r1, #8]
 800f5de:	680b      	ldr	r3, [r1, #0]
 800f5e0:	460a      	mov	r2, r1
 800f5e2:	f04f 0500 	mov.w	r5, #0
 800f5e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f5ea:	f842 3b1c 	str.w	r3, [r2], #28
 800f5ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f5f2:	4680      	mov	r8, r0
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	bf98      	it	ls
 800f5f8:	f04f 0b00 	movls.w	fp, #0
 800f5fc:	9201      	str	r2, [sp, #4]
 800f5fe:	4616      	mov	r6, r2
 800f600:	46aa      	mov	sl, r5
 800f602:	462f      	mov	r7, r5
 800f604:	9502      	str	r5, [sp, #8]
 800f606:	68a2      	ldr	r2, [r4, #8]
 800f608:	b15a      	cbz	r2, 800f622 <_scanf_float+0x66>
 800f60a:	f8d9 3000 	ldr.w	r3, [r9]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	2b4e      	cmp	r3, #78	@ 0x4e
 800f612:	d863      	bhi.n	800f6dc <_scanf_float+0x120>
 800f614:	2b40      	cmp	r3, #64	@ 0x40
 800f616:	d83b      	bhi.n	800f690 <_scanf_float+0xd4>
 800f618:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f61c:	b2c8      	uxtb	r0, r1
 800f61e:	280e      	cmp	r0, #14
 800f620:	d939      	bls.n	800f696 <_scanf_float+0xda>
 800f622:	b11f      	cbz	r7, 800f62c <_scanf_float+0x70>
 800f624:	6823      	ldr	r3, [r4, #0]
 800f626:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f62a:	6023      	str	r3, [r4, #0]
 800f62c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f630:	f1ba 0f01 	cmp.w	sl, #1
 800f634:	f200 8114 	bhi.w	800f860 <_scanf_float+0x2a4>
 800f638:	9b01      	ldr	r3, [sp, #4]
 800f63a:	429e      	cmp	r6, r3
 800f63c:	f200 8105 	bhi.w	800f84a <_scanf_float+0x28e>
 800f640:	2001      	movs	r0, #1
 800f642:	b007      	add	sp, #28
 800f644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f648:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f64c:	2a0d      	cmp	r2, #13
 800f64e:	d8e8      	bhi.n	800f622 <_scanf_float+0x66>
 800f650:	a101      	add	r1, pc, #4	@ (adr r1, 800f658 <_scanf_float+0x9c>)
 800f652:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f656:	bf00      	nop
 800f658:	0800f7a1 	.word	0x0800f7a1
 800f65c:	0800f623 	.word	0x0800f623
 800f660:	0800f623 	.word	0x0800f623
 800f664:	0800f623 	.word	0x0800f623
 800f668:	0800f7fd 	.word	0x0800f7fd
 800f66c:	0800f7d7 	.word	0x0800f7d7
 800f670:	0800f623 	.word	0x0800f623
 800f674:	0800f623 	.word	0x0800f623
 800f678:	0800f7af 	.word	0x0800f7af
 800f67c:	0800f623 	.word	0x0800f623
 800f680:	0800f623 	.word	0x0800f623
 800f684:	0800f623 	.word	0x0800f623
 800f688:	0800f623 	.word	0x0800f623
 800f68c:	0800f76b 	.word	0x0800f76b
 800f690:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f694:	e7da      	b.n	800f64c <_scanf_float+0x90>
 800f696:	290e      	cmp	r1, #14
 800f698:	d8c3      	bhi.n	800f622 <_scanf_float+0x66>
 800f69a:	a001      	add	r0, pc, #4	@ (adr r0, 800f6a0 <_scanf_float+0xe4>)
 800f69c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f6a0:	0800f75b 	.word	0x0800f75b
 800f6a4:	0800f623 	.word	0x0800f623
 800f6a8:	0800f75b 	.word	0x0800f75b
 800f6ac:	0800f7eb 	.word	0x0800f7eb
 800f6b0:	0800f623 	.word	0x0800f623
 800f6b4:	0800f6fd 	.word	0x0800f6fd
 800f6b8:	0800f741 	.word	0x0800f741
 800f6bc:	0800f741 	.word	0x0800f741
 800f6c0:	0800f741 	.word	0x0800f741
 800f6c4:	0800f741 	.word	0x0800f741
 800f6c8:	0800f741 	.word	0x0800f741
 800f6cc:	0800f741 	.word	0x0800f741
 800f6d0:	0800f741 	.word	0x0800f741
 800f6d4:	0800f741 	.word	0x0800f741
 800f6d8:	0800f741 	.word	0x0800f741
 800f6dc:	2b6e      	cmp	r3, #110	@ 0x6e
 800f6de:	d809      	bhi.n	800f6f4 <_scanf_float+0x138>
 800f6e0:	2b60      	cmp	r3, #96	@ 0x60
 800f6e2:	d8b1      	bhi.n	800f648 <_scanf_float+0x8c>
 800f6e4:	2b54      	cmp	r3, #84	@ 0x54
 800f6e6:	d07b      	beq.n	800f7e0 <_scanf_float+0x224>
 800f6e8:	2b59      	cmp	r3, #89	@ 0x59
 800f6ea:	d19a      	bne.n	800f622 <_scanf_float+0x66>
 800f6ec:	2d07      	cmp	r5, #7
 800f6ee:	d198      	bne.n	800f622 <_scanf_float+0x66>
 800f6f0:	2508      	movs	r5, #8
 800f6f2:	e02f      	b.n	800f754 <_scanf_float+0x198>
 800f6f4:	2b74      	cmp	r3, #116	@ 0x74
 800f6f6:	d073      	beq.n	800f7e0 <_scanf_float+0x224>
 800f6f8:	2b79      	cmp	r3, #121	@ 0x79
 800f6fa:	e7f6      	b.n	800f6ea <_scanf_float+0x12e>
 800f6fc:	6821      	ldr	r1, [r4, #0]
 800f6fe:	05c8      	lsls	r0, r1, #23
 800f700:	d51e      	bpl.n	800f740 <_scanf_float+0x184>
 800f702:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f706:	6021      	str	r1, [r4, #0]
 800f708:	3701      	adds	r7, #1
 800f70a:	f1bb 0f00 	cmp.w	fp, #0
 800f70e:	d003      	beq.n	800f718 <_scanf_float+0x15c>
 800f710:	3201      	adds	r2, #1
 800f712:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f716:	60a2      	str	r2, [r4, #8]
 800f718:	68a3      	ldr	r3, [r4, #8]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	60a3      	str	r3, [r4, #8]
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	3301      	adds	r3, #1
 800f722:	6123      	str	r3, [r4, #16]
 800f724:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f728:	3b01      	subs	r3, #1
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f8c9 3004 	str.w	r3, [r9, #4]
 800f730:	f340 8082 	ble.w	800f838 <_scanf_float+0x27c>
 800f734:	f8d9 3000 	ldr.w	r3, [r9]
 800f738:	3301      	adds	r3, #1
 800f73a:	f8c9 3000 	str.w	r3, [r9]
 800f73e:	e762      	b.n	800f606 <_scanf_float+0x4a>
 800f740:	eb1a 0105 	adds.w	r1, sl, r5
 800f744:	f47f af6d 	bne.w	800f622 <_scanf_float+0x66>
 800f748:	6822      	ldr	r2, [r4, #0]
 800f74a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f74e:	6022      	str	r2, [r4, #0]
 800f750:	460d      	mov	r5, r1
 800f752:	468a      	mov	sl, r1
 800f754:	f806 3b01 	strb.w	r3, [r6], #1
 800f758:	e7de      	b.n	800f718 <_scanf_float+0x15c>
 800f75a:	6822      	ldr	r2, [r4, #0]
 800f75c:	0610      	lsls	r0, r2, #24
 800f75e:	f57f af60 	bpl.w	800f622 <_scanf_float+0x66>
 800f762:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f766:	6022      	str	r2, [r4, #0]
 800f768:	e7f4      	b.n	800f754 <_scanf_float+0x198>
 800f76a:	f1ba 0f00 	cmp.w	sl, #0
 800f76e:	d10c      	bne.n	800f78a <_scanf_float+0x1ce>
 800f770:	b977      	cbnz	r7, 800f790 <_scanf_float+0x1d4>
 800f772:	6822      	ldr	r2, [r4, #0]
 800f774:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f778:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f77c:	d108      	bne.n	800f790 <_scanf_float+0x1d4>
 800f77e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f782:	6022      	str	r2, [r4, #0]
 800f784:	f04f 0a01 	mov.w	sl, #1
 800f788:	e7e4      	b.n	800f754 <_scanf_float+0x198>
 800f78a:	f1ba 0f02 	cmp.w	sl, #2
 800f78e:	d050      	beq.n	800f832 <_scanf_float+0x276>
 800f790:	2d01      	cmp	r5, #1
 800f792:	d002      	beq.n	800f79a <_scanf_float+0x1de>
 800f794:	2d04      	cmp	r5, #4
 800f796:	f47f af44 	bne.w	800f622 <_scanf_float+0x66>
 800f79a:	3501      	adds	r5, #1
 800f79c:	b2ed      	uxtb	r5, r5
 800f79e:	e7d9      	b.n	800f754 <_scanf_float+0x198>
 800f7a0:	f1ba 0f01 	cmp.w	sl, #1
 800f7a4:	f47f af3d 	bne.w	800f622 <_scanf_float+0x66>
 800f7a8:	f04f 0a02 	mov.w	sl, #2
 800f7ac:	e7d2      	b.n	800f754 <_scanf_float+0x198>
 800f7ae:	b975      	cbnz	r5, 800f7ce <_scanf_float+0x212>
 800f7b0:	2f00      	cmp	r7, #0
 800f7b2:	f47f af37 	bne.w	800f624 <_scanf_float+0x68>
 800f7b6:	6822      	ldr	r2, [r4, #0]
 800f7b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f7bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f7c0:	f040 8103 	bne.w	800f9ca <_scanf_float+0x40e>
 800f7c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f7c8:	6022      	str	r2, [r4, #0]
 800f7ca:	2501      	movs	r5, #1
 800f7cc:	e7c2      	b.n	800f754 <_scanf_float+0x198>
 800f7ce:	2d03      	cmp	r5, #3
 800f7d0:	d0e3      	beq.n	800f79a <_scanf_float+0x1de>
 800f7d2:	2d05      	cmp	r5, #5
 800f7d4:	e7df      	b.n	800f796 <_scanf_float+0x1da>
 800f7d6:	2d02      	cmp	r5, #2
 800f7d8:	f47f af23 	bne.w	800f622 <_scanf_float+0x66>
 800f7dc:	2503      	movs	r5, #3
 800f7de:	e7b9      	b.n	800f754 <_scanf_float+0x198>
 800f7e0:	2d06      	cmp	r5, #6
 800f7e2:	f47f af1e 	bne.w	800f622 <_scanf_float+0x66>
 800f7e6:	2507      	movs	r5, #7
 800f7e8:	e7b4      	b.n	800f754 <_scanf_float+0x198>
 800f7ea:	6822      	ldr	r2, [r4, #0]
 800f7ec:	0591      	lsls	r1, r2, #22
 800f7ee:	f57f af18 	bpl.w	800f622 <_scanf_float+0x66>
 800f7f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f7f6:	6022      	str	r2, [r4, #0]
 800f7f8:	9702      	str	r7, [sp, #8]
 800f7fa:	e7ab      	b.n	800f754 <_scanf_float+0x198>
 800f7fc:	6822      	ldr	r2, [r4, #0]
 800f7fe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f802:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f806:	d005      	beq.n	800f814 <_scanf_float+0x258>
 800f808:	0550      	lsls	r0, r2, #21
 800f80a:	f57f af0a 	bpl.w	800f622 <_scanf_float+0x66>
 800f80e:	2f00      	cmp	r7, #0
 800f810:	f000 80db 	beq.w	800f9ca <_scanf_float+0x40e>
 800f814:	0591      	lsls	r1, r2, #22
 800f816:	bf58      	it	pl
 800f818:	9902      	ldrpl	r1, [sp, #8]
 800f81a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f81e:	bf58      	it	pl
 800f820:	1a79      	subpl	r1, r7, r1
 800f822:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f826:	bf58      	it	pl
 800f828:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f82c:	6022      	str	r2, [r4, #0]
 800f82e:	2700      	movs	r7, #0
 800f830:	e790      	b.n	800f754 <_scanf_float+0x198>
 800f832:	f04f 0a03 	mov.w	sl, #3
 800f836:	e78d      	b.n	800f754 <_scanf_float+0x198>
 800f838:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f83c:	4649      	mov	r1, r9
 800f83e:	4640      	mov	r0, r8
 800f840:	4798      	blx	r3
 800f842:	2800      	cmp	r0, #0
 800f844:	f43f aedf 	beq.w	800f606 <_scanf_float+0x4a>
 800f848:	e6eb      	b.n	800f622 <_scanf_float+0x66>
 800f84a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f84e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f852:	464a      	mov	r2, r9
 800f854:	4640      	mov	r0, r8
 800f856:	4798      	blx	r3
 800f858:	6923      	ldr	r3, [r4, #16]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	6123      	str	r3, [r4, #16]
 800f85e:	e6eb      	b.n	800f638 <_scanf_float+0x7c>
 800f860:	1e6b      	subs	r3, r5, #1
 800f862:	2b06      	cmp	r3, #6
 800f864:	d824      	bhi.n	800f8b0 <_scanf_float+0x2f4>
 800f866:	2d02      	cmp	r5, #2
 800f868:	d836      	bhi.n	800f8d8 <_scanf_float+0x31c>
 800f86a:	9b01      	ldr	r3, [sp, #4]
 800f86c:	429e      	cmp	r6, r3
 800f86e:	f67f aee7 	bls.w	800f640 <_scanf_float+0x84>
 800f872:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f876:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f87a:	464a      	mov	r2, r9
 800f87c:	4640      	mov	r0, r8
 800f87e:	4798      	blx	r3
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	3b01      	subs	r3, #1
 800f884:	6123      	str	r3, [r4, #16]
 800f886:	e7f0      	b.n	800f86a <_scanf_float+0x2ae>
 800f888:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f88c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f890:	464a      	mov	r2, r9
 800f892:	4640      	mov	r0, r8
 800f894:	4798      	blx	r3
 800f896:	6923      	ldr	r3, [r4, #16]
 800f898:	3b01      	subs	r3, #1
 800f89a:	6123      	str	r3, [r4, #16]
 800f89c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8a0:	fa5f fa8a 	uxtb.w	sl, sl
 800f8a4:	f1ba 0f02 	cmp.w	sl, #2
 800f8a8:	d1ee      	bne.n	800f888 <_scanf_float+0x2cc>
 800f8aa:	3d03      	subs	r5, #3
 800f8ac:	b2ed      	uxtb	r5, r5
 800f8ae:	1b76      	subs	r6, r6, r5
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	05da      	lsls	r2, r3, #23
 800f8b4:	d530      	bpl.n	800f918 <_scanf_float+0x35c>
 800f8b6:	055b      	lsls	r3, r3, #21
 800f8b8:	d511      	bpl.n	800f8de <_scanf_float+0x322>
 800f8ba:	9b01      	ldr	r3, [sp, #4]
 800f8bc:	429e      	cmp	r6, r3
 800f8be:	f67f aebf 	bls.w	800f640 <_scanf_float+0x84>
 800f8c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8ca:	464a      	mov	r2, r9
 800f8cc:	4640      	mov	r0, r8
 800f8ce:	4798      	blx	r3
 800f8d0:	6923      	ldr	r3, [r4, #16]
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	6123      	str	r3, [r4, #16]
 800f8d6:	e7f0      	b.n	800f8ba <_scanf_float+0x2fe>
 800f8d8:	46aa      	mov	sl, r5
 800f8da:	46b3      	mov	fp, r6
 800f8dc:	e7de      	b.n	800f89c <_scanf_float+0x2e0>
 800f8de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f8e2:	6923      	ldr	r3, [r4, #16]
 800f8e4:	2965      	cmp	r1, #101	@ 0x65
 800f8e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8ea:	f106 35ff 	add.w	r5, r6, #4294967295
 800f8ee:	6123      	str	r3, [r4, #16]
 800f8f0:	d00c      	beq.n	800f90c <_scanf_float+0x350>
 800f8f2:	2945      	cmp	r1, #69	@ 0x45
 800f8f4:	d00a      	beq.n	800f90c <_scanf_float+0x350>
 800f8f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8fa:	464a      	mov	r2, r9
 800f8fc:	4640      	mov	r0, r8
 800f8fe:	4798      	blx	r3
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f906:	3b01      	subs	r3, #1
 800f908:	1eb5      	subs	r5, r6, #2
 800f90a:	6123      	str	r3, [r4, #16]
 800f90c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f910:	464a      	mov	r2, r9
 800f912:	4640      	mov	r0, r8
 800f914:	4798      	blx	r3
 800f916:	462e      	mov	r6, r5
 800f918:	6822      	ldr	r2, [r4, #0]
 800f91a:	f012 0210 	ands.w	r2, r2, #16
 800f91e:	d001      	beq.n	800f924 <_scanf_float+0x368>
 800f920:	2000      	movs	r0, #0
 800f922:	e68e      	b.n	800f642 <_scanf_float+0x86>
 800f924:	7032      	strb	r2, [r6, #0]
 800f926:	6823      	ldr	r3, [r4, #0]
 800f928:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f92c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f930:	d125      	bne.n	800f97e <_scanf_float+0x3c2>
 800f932:	9b02      	ldr	r3, [sp, #8]
 800f934:	429f      	cmp	r7, r3
 800f936:	d00a      	beq.n	800f94e <_scanf_float+0x392>
 800f938:	1bda      	subs	r2, r3, r7
 800f93a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f93e:	429e      	cmp	r6, r3
 800f940:	bf28      	it	cs
 800f942:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f946:	4922      	ldr	r1, [pc, #136]	@ (800f9d0 <_scanf_float+0x414>)
 800f948:	4630      	mov	r0, r6
 800f94a:	f000 f93d 	bl	800fbc8 <siprintf>
 800f94e:	9901      	ldr	r1, [sp, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	4640      	mov	r0, r8
 800f954:	f002 fbd4 	bl	8012100 <_strtod_r>
 800f958:	9b03      	ldr	r3, [sp, #12]
 800f95a:	6821      	ldr	r1, [r4, #0]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f011 0f02 	tst.w	r1, #2
 800f962:	ec57 6b10 	vmov	r6, r7, d0
 800f966:	f103 0204 	add.w	r2, r3, #4
 800f96a:	d015      	beq.n	800f998 <_scanf_float+0x3dc>
 800f96c:	9903      	ldr	r1, [sp, #12]
 800f96e:	600a      	str	r2, [r1, #0]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	e9c3 6700 	strd	r6, r7, [r3]
 800f976:	68e3      	ldr	r3, [r4, #12]
 800f978:	3301      	adds	r3, #1
 800f97a:	60e3      	str	r3, [r4, #12]
 800f97c:	e7d0      	b.n	800f920 <_scanf_float+0x364>
 800f97e:	9b04      	ldr	r3, [sp, #16]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d0e4      	beq.n	800f94e <_scanf_float+0x392>
 800f984:	9905      	ldr	r1, [sp, #20]
 800f986:	230a      	movs	r3, #10
 800f988:	3101      	adds	r1, #1
 800f98a:	4640      	mov	r0, r8
 800f98c:	f7ff f9b4 	bl	800ecf8 <_strtol_r>
 800f990:	9b04      	ldr	r3, [sp, #16]
 800f992:	9e05      	ldr	r6, [sp, #20]
 800f994:	1ac2      	subs	r2, r0, r3
 800f996:	e7d0      	b.n	800f93a <_scanf_float+0x37e>
 800f998:	f011 0f04 	tst.w	r1, #4
 800f99c:	9903      	ldr	r1, [sp, #12]
 800f99e:	600a      	str	r2, [r1, #0]
 800f9a0:	d1e6      	bne.n	800f970 <_scanf_float+0x3b4>
 800f9a2:	681d      	ldr	r5, [r3, #0]
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	463b      	mov	r3, r7
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	4639      	mov	r1, r7
 800f9ac:	f7f1 f8ce 	bl	8000b4c <__aeabi_dcmpun>
 800f9b0:	b128      	cbz	r0, 800f9be <_scanf_float+0x402>
 800f9b2:	4808      	ldr	r0, [pc, #32]	@ (800f9d4 <_scanf_float+0x418>)
 800f9b4:	f000 fa4e 	bl	800fe54 <nanf>
 800f9b8:	ed85 0a00 	vstr	s0, [r5]
 800f9bc:	e7db      	b.n	800f976 <_scanf_float+0x3ba>
 800f9be:	4630      	mov	r0, r6
 800f9c0:	4639      	mov	r1, r7
 800f9c2:	f7f1 f921 	bl	8000c08 <__aeabi_d2f>
 800f9c6:	6028      	str	r0, [r5, #0]
 800f9c8:	e7d5      	b.n	800f976 <_scanf_float+0x3ba>
 800f9ca:	2700      	movs	r7, #0
 800f9cc:	e62e      	b.n	800f62c <_scanf_float+0x70>
 800f9ce:	bf00      	nop
 800f9d0:	0803e0bd 	.word	0x0803e0bd
 800f9d4:	0803e1fe 	.word	0x0803e1fe

0800f9d8 <std>:
 800f9d8:	2300      	movs	r3, #0
 800f9da:	b510      	push	{r4, lr}
 800f9dc:	4604      	mov	r4, r0
 800f9de:	e9c0 3300 	strd	r3, r3, [r0]
 800f9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9e6:	6083      	str	r3, [r0, #8]
 800f9e8:	8181      	strh	r1, [r0, #12]
 800f9ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800f9ec:	81c2      	strh	r2, [r0, #14]
 800f9ee:	6183      	str	r3, [r0, #24]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	2208      	movs	r2, #8
 800f9f4:	305c      	adds	r0, #92	@ 0x5c
 800f9f6:	f000 f966 	bl	800fcc6 <memset>
 800f9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800fa30 <std+0x58>)
 800f9fc:	6263      	str	r3, [r4, #36]	@ 0x24
 800f9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800fa34 <std+0x5c>)
 800fa00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa02:	4b0d      	ldr	r3, [pc, #52]	@ (800fa38 <std+0x60>)
 800fa04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa06:	4b0d      	ldr	r3, [pc, #52]	@ (800fa3c <std+0x64>)
 800fa08:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa40 <std+0x68>)
 800fa0c:	6224      	str	r4, [r4, #32]
 800fa0e:	429c      	cmp	r4, r3
 800fa10:	d006      	beq.n	800fa20 <std+0x48>
 800fa12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa16:	4294      	cmp	r4, r2
 800fa18:	d002      	beq.n	800fa20 <std+0x48>
 800fa1a:	33d0      	adds	r3, #208	@ 0xd0
 800fa1c:	429c      	cmp	r4, r3
 800fa1e:	d105      	bne.n	800fa2c <std+0x54>
 800fa20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa28:	f000 ba02 	b.w	800fe30 <__retarget_lock_init_recursive>
 800fa2c:	bd10      	pop	{r4, pc}
 800fa2e:	bf00      	nop
 800fa30:	0800fc0d 	.word	0x0800fc0d
 800fa34:	0800fc2f 	.word	0x0800fc2f
 800fa38:	0800fc67 	.word	0x0800fc67
 800fa3c:	0800fc8b 	.word	0x0800fc8b
 800fa40:	20001250 	.word	0x20001250

0800fa44 <stdio_exit_handler>:
 800fa44:	4a02      	ldr	r2, [pc, #8]	@ (800fa50 <stdio_exit_handler+0xc>)
 800fa46:	4903      	ldr	r1, [pc, #12]	@ (800fa54 <stdio_exit_handler+0x10>)
 800fa48:	4803      	ldr	r0, [pc, #12]	@ (800fa58 <stdio_exit_handler+0x14>)
 800fa4a:	f000 b869 	b.w	800fb20 <_fwalk_sglue>
 800fa4e:	bf00      	nop
 800fa50:	20000054 	.word	0x20000054
 800fa54:	080124c5 	.word	0x080124c5
 800fa58:	20000064 	.word	0x20000064

0800fa5c <cleanup_stdio>:
 800fa5c:	6841      	ldr	r1, [r0, #4]
 800fa5e:	4b0c      	ldr	r3, [pc, #48]	@ (800fa90 <cleanup_stdio+0x34>)
 800fa60:	4299      	cmp	r1, r3
 800fa62:	b510      	push	{r4, lr}
 800fa64:	4604      	mov	r4, r0
 800fa66:	d001      	beq.n	800fa6c <cleanup_stdio+0x10>
 800fa68:	f002 fd2c 	bl	80124c4 <_fflush_r>
 800fa6c:	68a1      	ldr	r1, [r4, #8]
 800fa6e:	4b09      	ldr	r3, [pc, #36]	@ (800fa94 <cleanup_stdio+0x38>)
 800fa70:	4299      	cmp	r1, r3
 800fa72:	d002      	beq.n	800fa7a <cleanup_stdio+0x1e>
 800fa74:	4620      	mov	r0, r4
 800fa76:	f002 fd25 	bl	80124c4 <_fflush_r>
 800fa7a:	68e1      	ldr	r1, [r4, #12]
 800fa7c:	4b06      	ldr	r3, [pc, #24]	@ (800fa98 <cleanup_stdio+0x3c>)
 800fa7e:	4299      	cmp	r1, r3
 800fa80:	d004      	beq.n	800fa8c <cleanup_stdio+0x30>
 800fa82:	4620      	mov	r0, r4
 800fa84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa88:	f002 bd1c 	b.w	80124c4 <_fflush_r>
 800fa8c:	bd10      	pop	{r4, pc}
 800fa8e:	bf00      	nop
 800fa90:	20001250 	.word	0x20001250
 800fa94:	200012b8 	.word	0x200012b8
 800fa98:	20001320 	.word	0x20001320

0800fa9c <global_stdio_init.part.0>:
 800fa9c:	b510      	push	{r4, lr}
 800fa9e:	4b0b      	ldr	r3, [pc, #44]	@ (800facc <global_stdio_init.part.0+0x30>)
 800faa0:	4c0b      	ldr	r4, [pc, #44]	@ (800fad0 <global_stdio_init.part.0+0x34>)
 800faa2:	4a0c      	ldr	r2, [pc, #48]	@ (800fad4 <global_stdio_init.part.0+0x38>)
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	4620      	mov	r0, r4
 800faa8:	2200      	movs	r2, #0
 800faaa:	2104      	movs	r1, #4
 800faac:	f7ff ff94 	bl	800f9d8 <std>
 800fab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fab4:	2201      	movs	r2, #1
 800fab6:	2109      	movs	r1, #9
 800fab8:	f7ff ff8e 	bl	800f9d8 <std>
 800fabc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fac0:	2202      	movs	r2, #2
 800fac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fac6:	2112      	movs	r1, #18
 800fac8:	f7ff bf86 	b.w	800f9d8 <std>
 800facc:	20001388 	.word	0x20001388
 800fad0:	20001250 	.word	0x20001250
 800fad4:	0800fa45 	.word	0x0800fa45

0800fad8 <__sfp_lock_acquire>:
 800fad8:	4801      	ldr	r0, [pc, #4]	@ (800fae0 <__sfp_lock_acquire+0x8>)
 800fada:	f000 b9aa 	b.w	800fe32 <__retarget_lock_acquire_recursive>
 800fade:	bf00      	nop
 800fae0:	20001391 	.word	0x20001391

0800fae4 <__sfp_lock_release>:
 800fae4:	4801      	ldr	r0, [pc, #4]	@ (800faec <__sfp_lock_release+0x8>)
 800fae6:	f000 b9a5 	b.w	800fe34 <__retarget_lock_release_recursive>
 800faea:	bf00      	nop
 800faec:	20001391 	.word	0x20001391

0800faf0 <__sinit>:
 800faf0:	b510      	push	{r4, lr}
 800faf2:	4604      	mov	r4, r0
 800faf4:	f7ff fff0 	bl	800fad8 <__sfp_lock_acquire>
 800faf8:	6a23      	ldr	r3, [r4, #32]
 800fafa:	b11b      	cbz	r3, 800fb04 <__sinit+0x14>
 800fafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb00:	f7ff bff0 	b.w	800fae4 <__sfp_lock_release>
 800fb04:	4b04      	ldr	r3, [pc, #16]	@ (800fb18 <__sinit+0x28>)
 800fb06:	6223      	str	r3, [r4, #32]
 800fb08:	4b04      	ldr	r3, [pc, #16]	@ (800fb1c <__sinit+0x2c>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1f5      	bne.n	800fafc <__sinit+0xc>
 800fb10:	f7ff ffc4 	bl	800fa9c <global_stdio_init.part.0>
 800fb14:	e7f2      	b.n	800fafc <__sinit+0xc>
 800fb16:	bf00      	nop
 800fb18:	0800fa5d 	.word	0x0800fa5d
 800fb1c:	20001388 	.word	0x20001388

0800fb20 <_fwalk_sglue>:
 800fb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb24:	4607      	mov	r7, r0
 800fb26:	4688      	mov	r8, r1
 800fb28:	4614      	mov	r4, r2
 800fb2a:	2600      	movs	r6, #0
 800fb2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb30:	f1b9 0901 	subs.w	r9, r9, #1
 800fb34:	d505      	bpl.n	800fb42 <_fwalk_sglue+0x22>
 800fb36:	6824      	ldr	r4, [r4, #0]
 800fb38:	2c00      	cmp	r4, #0
 800fb3a:	d1f7      	bne.n	800fb2c <_fwalk_sglue+0xc>
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb42:	89ab      	ldrh	r3, [r5, #12]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d907      	bls.n	800fb58 <_fwalk_sglue+0x38>
 800fb48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	d003      	beq.n	800fb58 <_fwalk_sglue+0x38>
 800fb50:	4629      	mov	r1, r5
 800fb52:	4638      	mov	r0, r7
 800fb54:	47c0      	blx	r8
 800fb56:	4306      	orrs	r6, r0
 800fb58:	3568      	adds	r5, #104	@ 0x68
 800fb5a:	e7e9      	b.n	800fb30 <_fwalk_sglue+0x10>

0800fb5c <sniprintf>:
 800fb5c:	b40c      	push	{r2, r3}
 800fb5e:	b530      	push	{r4, r5, lr}
 800fb60:	4b18      	ldr	r3, [pc, #96]	@ (800fbc4 <sniprintf+0x68>)
 800fb62:	1e0c      	subs	r4, r1, #0
 800fb64:	681d      	ldr	r5, [r3, #0]
 800fb66:	b09d      	sub	sp, #116	@ 0x74
 800fb68:	da08      	bge.n	800fb7c <sniprintf+0x20>
 800fb6a:	238b      	movs	r3, #139	@ 0x8b
 800fb6c:	602b      	str	r3, [r5, #0]
 800fb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb72:	b01d      	add	sp, #116	@ 0x74
 800fb74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb78:	b002      	add	sp, #8
 800fb7a:	4770      	bx	lr
 800fb7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fb80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb84:	f04f 0300 	mov.w	r3, #0
 800fb88:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fb8a:	bf14      	ite	ne
 800fb8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb90:	4623      	moveq	r3, r4
 800fb92:	9304      	str	r3, [sp, #16]
 800fb94:	9307      	str	r3, [sp, #28]
 800fb96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb9a:	9002      	str	r0, [sp, #8]
 800fb9c:	9006      	str	r0, [sp, #24]
 800fb9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fba2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fba4:	ab21      	add	r3, sp, #132	@ 0x84
 800fba6:	a902      	add	r1, sp, #8
 800fba8:	4628      	mov	r0, r5
 800fbaa:	9301      	str	r3, [sp, #4]
 800fbac:	f002 fb0a 	bl	80121c4 <_svfiprintf_r>
 800fbb0:	1c43      	adds	r3, r0, #1
 800fbb2:	bfbc      	itt	lt
 800fbb4:	238b      	movlt	r3, #139	@ 0x8b
 800fbb6:	602b      	strlt	r3, [r5, #0]
 800fbb8:	2c00      	cmp	r4, #0
 800fbba:	d0da      	beq.n	800fb72 <sniprintf+0x16>
 800fbbc:	9b02      	ldr	r3, [sp, #8]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	701a      	strb	r2, [r3, #0]
 800fbc2:	e7d6      	b.n	800fb72 <sniprintf+0x16>
 800fbc4:	20000060 	.word	0x20000060

0800fbc8 <siprintf>:
 800fbc8:	b40e      	push	{r1, r2, r3}
 800fbca:	b510      	push	{r4, lr}
 800fbcc:	b09d      	sub	sp, #116	@ 0x74
 800fbce:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fbd0:	9002      	str	r0, [sp, #8]
 800fbd2:	9006      	str	r0, [sp, #24]
 800fbd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fbd8:	480a      	ldr	r0, [pc, #40]	@ (800fc04 <siprintf+0x3c>)
 800fbda:	9107      	str	r1, [sp, #28]
 800fbdc:	9104      	str	r1, [sp, #16]
 800fbde:	490a      	ldr	r1, [pc, #40]	@ (800fc08 <siprintf+0x40>)
 800fbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbe4:	9105      	str	r1, [sp, #20]
 800fbe6:	2400      	movs	r4, #0
 800fbe8:	a902      	add	r1, sp, #8
 800fbea:	6800      	ldr	r0, [r0, #0]
 800fbec:	9301      	str	r3, [sp, #4]
 800fbee:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fbf0:	f002 fae8 	bl	80121c4 <_svfiprintf_r>
 800fbf4:	9b02      	ldr	r3, [sp, #8]
 800fbf6:	701c      	strb	r4, [r3, #0]
 800fbf8:	b01d      	add	sp, #116	@ 0x74
 800fbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbfe:	b003      	add	sp, #12
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	20000060 	.word	0x20000060
 800fc08:	ffff0208 	.word	0xffff0208

0800fc0c <__sread>:
 800fc0c:	b510      	push	{r4, lr}
 800fc0e:	460c      	mov	r4, r1
 800fc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc14:	f000 f8ae 	bl	800fd74 <_read_r>
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	bfab      	itete	ge
 800fc1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc1e:	89a3      	ldrhlt	r3, [r4, #12]
 800fc20:	181b      	addge	r3, r3, r0
 800fc22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc26:	bfac      	ite	ge
 800fc28:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc2a:	81a3      	strhlt	r3, [r4, #12]
 800fc2c:	bd10      	pop	{r4, pc}

0800fc2e <__swrite>:
 800fc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc32:	461f      	mov	r7, r3
 800fc34:	898b      	ldrh	r3, [r1, #12]
 800fc36:	05db      	lsls	r3, r3, #23
 800fc38:	4605      	mov	r5, r0
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	4616      	mov	r6, r2
 800fc3e:	d505      	bpl.n	800fc4c <__swrite+0x1e>
 800fc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc44:	2302      	movs	r3, #2
 800fc46:	2200      	movs	r2, #0
 800fc48:	f000 f882 	bl	800fd50 <_lseek_r>
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc56:	81a3      	strh	r3, [r4, #12]
 800fc58:	4632      	mov	r2, r6
 800fc5a:	463b      	mov	r3, r7
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc62:	f000 b8a9 	b.w	800fdb8 <_write_r>

0800fc66 <__sseek>:
 800fc66:	b510      	push	{r4, lr}
 800fc68:	460c      	mov	r4, r1
 800fc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc6e:	f000 f86f 	bl	800fd50 <_lseek_r>
 800fc72:	1c43      	adds	r3, r0, #1
 800fc74:	89a3      	ldrh	r3, [r4, #12]
 800fc76:	bf15      	itete	ne
 800fc78:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc82:	81a3      	strheq	r3, [r4, #12]
 800fc84:	bf18      	it	ne
 800fc86:	81a3      	strhne	r3, [r4, #12]
 800fc88:	bd10      	pop	{r4, pc}

0800fc8a <__sclose>:
 800fc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc8e:	f000 b84f 	b.w	800fd30 <_close_r>

0800fc92 <memmove>:
 800fc92:	4288      	cmp	r0, r1
 800fc94:	b510      	push	{r4, lr}
 800fc96:	eb01 0402 	add.w	r4, r1, r2
 800fc9a:	d902      	bls.n	800fca2 <memmove+0x10>
 800fc9c:	4284      	cmp	r4, r0
 800fc9e:	4623      	mov	r3, r4
 800fca0:	d807      	bhi.n	800fcb2 <memmove+0x20>
 800fca2:	1e43      	subs	r3, r0, #1
 800fca4:	42a1      	cmp	r1, r4
 800fca6:	d008      	beq.n	800fcba <memmove+0x28>
 800fca8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcb0:	e7f8      	b.n	800fca4 <memmove+0x12>
 800fcb2:	4402      	add	r2, r0
 800fcb4:	4601      	mov	r1, r0
 800fcb6:	428a      	cmp	r2, r1
 800fcb8:	d100      	bne.n	800fcbc <memmove+0x2a>
 800fcba:	bd10      	pop	{r4, pc}
 800fcbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcc4:	e7f7      	b.n	800fcb6 <memmove+0x24>

0800fcc6 <memset>:
 800fcc6:	4402      	add	r2, r0
 800fcc8:	4603      	mov	r3, r0
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d100      	bne.n	800fcd0 <memset+0xa>
 800fcce:	4770      	bx	lr
 800fcd0:	f803 1b01 	strb.w	r1, [r3], #1
 800fcd4:	e7f9      	b.n	800fcca <memset+0x4>

0800fcd6 <strncmp>:
 800fcd6:	b510      	push	{r4, lr}
 800fcd8:	b16a      	cbz	r2, 800fcf6 <strncmp+0x20>
 800fcda:	3901      	subs	r1, #1
 800fcdc:	1884      	adds	r4, r0, r2
 800fcde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fce2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d103      	bne.n	800fcf2 <strncmp+0x1c>
 800fcea:	42a0      	cmp	r0, r4
 800fcec:	d001      	beq.n	800fcf2 <strncmp+0x1c>
 800fcee:	2a00      	cmp	r2, #0
 800fcf0:	d1f5      	bne.n	800fcde <strncmp+0x8>
 800fcf2:	1ad0      	subs	r0, r2, r3
 800fcf4:	bd10      	pop	{r4, pc}
 800fcf6:	4610      	mov	r0, r2
 800fcf8:	e7fc      	b.n	800fcf4 <strncmp+0x1e>

0800fcfa <strstr>:
 800fcfa:	780a      	ldrb	r2, [r1, #0]
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	b96a      	cbnz	r2, 800fd1c <strstr+0x22>
 800fd00:	bd70      	pop	{r4, r5, r6, pc}
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d109      	bne.n	800fd1a <strstr+0x20>
 800fd06:	460c      	mov	r4, r1
 800fd08:	4605      	mov	r5, r0
 800fd0a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d0f6      	beq.n	800fd00 <strstr+0x6>
 800fd12:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fd16:	429e      	cmp	r6, r3
 800fd18:	d0f7      	beq.n	800fd0a <strstr+0x10>
 800fd1a:	3001      	adds	r0, #1
 800fd1c:	7803      	ldrb	r3, [r0, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d1ef      	bne.n	800fd02 <strstr+0x8>
 800fd22:	4618      	mov	r0, r3
 800fd24:	e7ec      	b.n	800fd00 <strstr+0x6>
	...

0800fd28 <_localeconv_r>:
 800fd28:	4800      	ldr	r0, [pc, #0]	@ (800fd2c <_localeconv_r+0x4>)
 800fd2a:	4770      	bx	lr
 800fd2c:	200001a0 	.word	0x200001a0

0800fd30 <_close_r>:
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	4d06      	ldr	r5, [pc, #24]	@ (800fd4c <_close_r+0x1c>)
 800fd34:	2300      	movs	r3, #0
 800fd36:	4604      	mov	r4, r0
 800fd38:	4608      	mov	r0, r1
 800fd3a:	602b      	str	r3, [r5, #0]
 800fd3c:	f7f2 fcce 	bl	80026dc <_close>
 800fd40:	1c43      	adds	r3, r0, #1
 800fd42:	d102      	bne.n	800fd4a <_close_r+0x1a>
 800fd44:	682b      	ldr	r3, [r5, #0]
 800fd46:	b103      	cbz	r3, 800fd4a <_close_r+0x1a>
 800fd48:	6023      	str	r3, [r4, #0]
 800fd4a:	bd38      	pop	{r3, r4, r5, pc}
 800fd4c:	2000138c 	.word	0x2000138c

0800fd50 <_lseek_r>:
 800fd50:	b538      	push	{r3, r4, r5, lr}
 800fd52:	4d07      	ldr	r5, [pc, #28]	@ (800fd70 <_lseek_r+0x20>)
 800fd54:	4604      	mov	r4, r0
 800fd56:	4608      	mov	r0, r1
 800fd58:	4611      	mov	r1, r2
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	602a      	str	r2, [r5, #0]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	f7f2 fce3 	bl	800272a <_lseek>
 800fd64:	1c43      	adds	r3, r0, #1
 800fd66:	d102      	bne.n	800fd6e <_lseek_r+0x1e>
 800fd68:	682b      	ldr	r3, [r5, #0]
 800fd6a:	b103      	cbz	r3, 800fd6e <_lseek_r+0x1e>
 800fd6c:	6023      	str	r3, [r4, #0]
 800fd6e:	bd38      	pop	{r3, r4, r5, pc}
 800fd70:	2000138c 	.word	0x2000138c

0800fd74 <_read_r>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	4d07      	ldr	r5, [pc, #28]	@ (800fd94 <_read_r+0x20>)
 800fd78:	4604      	mov	r4, r0
 800fd7a:	4608      	mov	r0, r1
 800fd7c:	4611      	mov	r1, r2
 800fd7e:	2200      	movs	r2, #0
 800fd80:	602a      	str	r2, [r5, #0]
 800fd82:	461a      	mov	r2, r3
 800fd84:	f7f2 fc8d 	bl	80026a2 <_read>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d102      	bne.n	800fd92 <_read_r+0x1e>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b103      	cbz	r3, 800fd92 <_read_r+0x1e>
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	2000138c 	.word	0x2000138c

0800fd98 <_sbrk_r>:
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	4d06      	ldr	r5, [pc, #24]	@ (800fdb4 <_sbrk_r+0x1c>)
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	4604      	mov	r4, r0
 800fda0:	4608      	mov	r0, r1
 800fda2:	602b      	str	r3, [r5, #0]
 800fda4:	f7f2 fcce 	bl	8002744 <_sbrk>
 800fda8:	1c43      	adds	r3, r0, #1
 800fdaa:	d102      	bne.n	800fdb2 <_sbrk_r+0x1a>
 800fdac:	682b      	ldr	r3, [r5, #0]
 800fdae:	b103      	cbz	r3, 800fdb2 <_sbrk_r+0x1a>
 800fdb0:	6023      	str	r3, [r4, #0]
 800fdb2:	bd38      	pop	{r3, r4, r5, pc}
 800fdb4:	2000138c 	.word	0x2000138c

0800fdb8 <_write_r>:
 800fdb8:	b538      	push	{r3, r4, r5, lr}
 800fdba:	4d07      	ldr	r5, [pc, #28]	@ (800fdd8 <_write_r+0x20>)
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	4608      	mov	r0, r1
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	602a      	str	r2, [r5, #0]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	f7f1 fb0a 	bl	80013e0 <_write>
 800fdcc:	1c43      	adds	r3, r0, #1
 800fdce:	d102      	bne.n	800fdd6 <_write_r+0x1e>
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	b103      	cbz	r3, 800fdd6 <_write_r+0x1e>
 800fdd4:	6023      	str	r3, [r4, #0]
 800fdd6:	bd38      	pop	{r3, r4, r5, pc}
 800fdd8:	2000138c 	.word	0x2000138c

0800fddc <__errno>:
 800fddc:	4b01      	ldr	r3, [pc, #4]	@ (800fde4 <__errno+0x8>)
 800fdde:	6818      	ldr	r0, [r3, #0]
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	20000060 	.word	0x20000060

0800fde8 <__libc_init_array>:
 800fde8:	b570      	push	{r4, r5, r6, lr}
 800fdea:	4d0d      	ldr	r5, [pc, #52]	@ (800fe20 <__libc_init_array+0x38>)
 800fdec:	4c0d      	ldr	r4, [pc, #52]	@ (800fe24 <__libc_init_array+0x3c>)
 800fdee:	1b64      	subs	r4, r4, r5
 800fdf0:	10a4      	asrs	r4, r4, #2
 800fdf2:	2600      	movs	r6, #0
 800fdf4:	42a6      	cmp	r6, r4
 800fdf6:	d109      	bne.n	800fe0c <__libc_init_array+0x24>
 800fdf8:	4d0b      	ldr	r5, [pc, #44]	@ (800fe28 <__libc_init_array+0x40>)
 800fdfa:	4c0c      	ldr	r4, [pc, #48]	@ (800fe2c <__libc_init_array+0x44>)
 800fdfc:	f003 fa0a 	bl	8013214 <_init>
 800fe00:	1b64      	subs	r4, r4, r5
 800fe02:	10a4      	asrs	r4, r4, #2
 800fe04:	2600      	movs	r6, #0
 800fe06:	42a6      	cmp	r6, r4
 800fe08:	d105      	bne.n	800fe16 <__libc_init_array+0x2e>
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe10:	4798      	blx	r3
 800fe12:	3601      	adds	r6, #1
 800fe14:	e7ee      	b.n	800fdf4 <__libc_init_array+0xc>
 800fe16:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe1a:	4798      	blx	r3
 800fe1c:	3601      	adds	r6, #1
 800fe1e:	e7f2      	b.n	800fe06 <__libc_init_array+0x1e>
 800fe20:	0803e3b8 	.word	0x0803e3b8
 800fe24:	0803e3b8 	.word	0x0803e3b8
 800fe28:	0803e3b8 	.word	0x0803e3b8
 800fe2c:	0803e3bc 	.word	0x0803e3bc

0800fe30 <__retarget_lock_init_recursive>:
 800fe30:	4770      	bx	lr

0800fe32 <__retarget_lock_acquire_recursive>:
 800fe32:	4770      	bx	lr

0800fe34 <__retarget_lock_release_recursive>:
 800fe34:	4770      	bx	lr

0800fe36 <memcpy>:
 800fe36:	440a      	add	r2, r1
 800fe38:	4291      	cmp	r1, r2
 800fe3a:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe3e:	d100      	bne.n	800fe42 <memcpy+0xc>
 800fe40:	4770      	bx	lr
 800fe42:	b510      	push	{r4, lr}
 800fe44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe4c:	4291      	cmp	r1, r2
 800fe4e:	d1f9      	bne.n	800fe44 <memcpy+0xe>
 800fe50:	bd10      	pop	{r4, pc}
	...

0800fe54 <nanf>:
 800fe54:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fe5c <nanf+0x8>
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	7fc00000 	.word	0x7fc00000

0800fe60 <quorem>:
 800fe60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	6903      	ldr	r3, [r0, #16]
 800fe66:	690c      	ldr	r4, [r1, #16]
 800fe68:	42a3      	cmp	r3, r4
 800fe6a:	4607      	mov	r7, r0
 800fe6c:	db7e      	blt.n	800ff6c <quorem+0x10c>
 800fe6e:	3c01      	subs	r4, #1
 800fe70:	f101 0814 	add.w	r8, r1, #20
 800fe74:	00a3      	lsls	r3, r4, #2
 800fe76:	f100 0514 	add.w	r5, r0, #20
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe80:	9301      	str	r3, [sp, #4]
 800fe82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe92:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe96:	d32e      	bcc.n	800fef6 <quorem+0x96>
 800fe98:	f04f 0a00 	mov.w	sl, #0
 800fe9c:	46c4      	mov	ip, r8
 800fe9e:	46ae      	mov	lr, r5
 800fea0:	46d3      	mov	fp, sl
 800fea2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fea6:	b298      	uxth	r0, r3
 800fea8:	fb06 a000 	mla	r0, r6, r0, sl
 800feac:	0c02      	lsrs	r2, r0, #16
 800feae:	0c1b      	lsrs	r3, r3, #16
 800feb0:	fb06 2303 	mla	r3, r6, r3, r2
 800feb4:	f8de 2000 	ldr.w	r2, [lr]
 800feb8:	b280      	uxth	r0, r0
 800feba:	b292      	uxth	r2, r2
 800febc:	1a12      	subs	r2, r2, r0
 800febe:	445a      	add	r2, fp
 800fec0:	f8de 0000 	ldr.w	r0, [lr]
 800fec4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fec8:	b29b      	uxth	r3, r3
 800feca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fece:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fed2:	b292      	uxth	r2, r2
 800fed4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fed8:	45e1      	cmp	r9, ip
 800feda:	f84e 2b04 	str.w	r2, [lr], #4
 800fede:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fee2:	d2de      	bcs.n	800fea2 <quorem+0x42>
 800fee4:	9b00      	ldr	r3, [sp, #0]
 800fee6:	58eb      	ldr	r3, [r5, r3]
 800fee8:	b92b      	cbnz	r3, 800fef6 <quorem+0x96>
 800feea:	9b01      	ldr	r3, [sp, #4]
 800feec:	3b04      	subs	r3, #4
 800feee:	429d      	cmp	r5, r3
 800fef0:	461a      	mov	r2, r3
 800fef2:	d32f      	bcc.n	800ff54 <quorem+0xf4>
 800fef4:	613c      	str	r4, [r7, #16]
 800fef6:	4638      	mov	r0, r7
 800fef8:	f001 f910 	bl	801111c <__mcmp>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	db25      	blt.n	800ff4c <quorem+0xec>
 800ff00:	4629      	mov	r1, r5
 800ff02:	2000      	movs	r0, #0
 800ff04:	f858 2b04 	ldr.w	r2, [r8], #4
 800ff08:	f8d1 c000 	ldr.w	ip, [r1]
 800ff0c:	fa1f fe82 	uxth.w	lr, r2
 800ff10:	fa1f f38c 	uxth.w	r3, ip
 800ff14:	eba3 030e 	sub.w	r3, r3, lr
 800ff18:	4403      	add	r3, r0
 800ff1a:	0c12      	lsrs	r2, r2, #16
 800ff1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ff20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff2a:	45c1      	cmp	r9, r8
 800ff2c:	f841 3b04 	str.w	r3, [r1], #4
 800ff30:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ff34:	d2e6      	bcs.n	800ff04 <quorem+0xa4>
 800ff36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff3e:	b922      	cbnz	r2, 800ff4a <quorem+0xea>
 800ff40:	3b04      	subs	r3, #4
 800ff42:	429d      	cmp	r5, r3
 800ff44:	461a      	mov	r2, r3
 800ff46:	d30b      	bcc.n	800ff60 <quorem+0x100>
 800ff48:	613c      	str	r4, [r7, #16]
 800ff4a:	3601      	adds	r6, #1
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	b003      	add	sp, #12
 800ff50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff54:	6812      	ldr	r2, [r2, #0]
 800ff56:	3b04      	subs	r3, #4
 800ff58:	2a00      	cmp	r2, #0
 800ff5a:	d1cb      	bne.n	800fef4 <quorem+0x94>
 800ff5c:	3c01      	subs	r4, #1
 800ff5e:	e7c6      	b.n	800feee <quorem+0x8e>
 800ff60:	6812      	ldr	r2, [r2, #0]
 800ff62:	3b04      	subs	r3, #4
 800ff64:	2a00      	cmp	r2, #0
 800ff66:	d1ef      	bne.n	800ff48 <quorem+0xe8>
 800ff68:	3c01      	subs	r4, #1
 800ff6a:	e7ea      	b.n	800ff42 <quorem+0xe2>
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	e7ee      	b.n	800ff4e <quorem+0xee>

0800ff70 <_dtoa_r>:
 800ff70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff74:	69c7      	ldr	r7, [r0, #28]
 800ff76:	b097      	sub	sp, #92	@ 0x5c
 800ff78:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ff7c:	ec55 4b10 	vmov	r4, r5, d0
 800ff80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ff82:	9107      	str	r1, [sp, #28]
 800ff84:	4681      	mov	r9, r0
 800ff86:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff88:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff8a:	b97f      	cbnz	r7, 800ffac <_dtoa_r+0x3c>
 800ff8c:	2010      	movs	r0, #16
 800ff8e:	f7fe fd7b 	bl	800ea88 <malloc>
 800ff92:	4602      	mov	r2, r0
 800ff94:	f8c9 001c 	str.w	r0, [r9, #28]
 800ff98:	b920      	cbnz	r0, 800ffa4 <_dtoa_r+0x34>
 800ff9a:	4ba9      	ldr	r3, [pc, #676]	@ (8010240 <_dtoa_r+0x2d0>)
 800ff9c:	21ef      	movs	r1, #239	@ 0xef
 800ff9e:	48a9      	ldr	r0, [pc, #676]	@ (8010244 <_dtoa_r+0x2d4>)
 800ffa0:	f002 fac2 	bl	8012528 <__assert_func>
 800ffa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ffa8:	6007      	str	r7, [r0, #0]
 800ffaa:	60c7      	str	r7, [r0, #12]
 800ffac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ffb0:	6819      	ldr	r1, [r3, #0]
 800ffb2:	b159      	cbz	r1, 800ffcc <_dtoa_r+0x5c>
 800ffb4:	685a      	ldr	r2, [r3, #4]
 800ffb6:	604a      	str	r2, [r1, #4]
 800ffb8:	2301      	movs	r3, #1
 800ffba:	4093      	lsls	r3, r2
 800ffbc:	608b      	str	r3, [r1, #8]
 800ffbe:	4648      	mov	r0, r9
 800ffc0:	f000 fe30 	bl	8010c24 <_Bfree>
 800ffc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	601a      	str	r2, [r3, #0]
 800ffcc:	1e2b      	subs	r3, r5, #0
 800ffce:	bfb9      	ittee	lt
 800ffd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ffd4:	9305      	strlt	r3, [sp, #20]
 800ffd6:	2300      	movge	r3, #0
 800ffd8:	6033      	strge	r3, [r6, #0]
 800ffda:	9f05      	ldr	r7, [sp, #20]
 800ffdc:	4b9a      	ldr	r3, [pc, #616]	@ (8010248 <_dtoa_r+0x2d8>)
 800ffde:	bfbc      	itt	lt
 800ffe0:	2201      	movlt	r2, #1
 800ffe2:	6032      	strlt	r2, [r6, #0]
 800ffe4:	43bb      	bics	r3, r7
 800ffe6:	d112      	bne.n	801000e <_dtoa_r+0x9e>
 800ffe8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ffea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ffee:	6013      	str	r3, [r2, #0]
 800fff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fff4:	4323      	orrs	r3, r4
 800fff6:	f000 855a 	beq.w	8010aae <_dtoa_r+0xb3e>
 800fffa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fffc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801025c <_dtoa_r+0x2ec>
 8010000:	2b00      	cmp	r3, #0
 8010002:	f000 855c 	beq.w	8010abe <_dtoa_r+0xb4e>
 8010006:	f10a 0303 	add.w	r3, sl, #3
 801000a:	f000 bd56 	b.w	8010aba <_dtoa_r+0xb4a>
 801000e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010012:	2200      	movs	r2, #0
 8010014:	ec51 0b17 	vmov	r0, r1, d7
 8010018:	2300      	movs	r3, #0
 801001a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801001e:	f7f0 fd63 	bl	8000ae8 <__aeabi_dcmpeq>
 8010022:	4680      	mov	r8, r0
 8010024:	b158      	cbz	r0, 801003e <_dtoa_r+0xce>
 8010026:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010028:	2301      	movs	r3, #1
 801002a:	6013      	str	r3, [r2, #0]
 801002c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801002e:	b113      	cbz	r3, 8010036 <_dtoa_r+0xc6>
 8010030:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010032:	4b86      	ldr	r3, [pc, #536]	@ (801024c <_dtoa_r+0x2dc>)
 8010034:	6013      	str	r3, [r2, #0]
 8010036:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010260 <_dtoa_r+0x2f0>
 801003a:	f000 bd40 	b.w	8010abe <_dtoa_r+0xb4e>
 801003e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010042:	aa14      	add	r2, sp, #80	@ 0x50
 8010044:	a915      	add	r1, sp, #84	@ 0x54
 8010046:	4648      	mov	r0, r9
 8010048:	f001 f988 	bl	801135c <__d2b>
 801004c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010050:	9002      	str	r0, [sp, #8]
 8010052:	2e00      	cmp	r6, #0
 8010054:	d078      	beq.n	8010148 <_dtoa_r+0x1d8>
 8010056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010058:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801005c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010064:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010068:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801006c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010070:	4619      	mov	r1, r3
 8010072:	2200      	movs	r2, #0
 8010074:	4b76      	ldr	r3, [pc, #472]	@ (8010250 <_dtoa_r+0x2e0>)
 8010076:	f7f0 f917 	bl	80002a8 <__aeabi_dsub>
 801007a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010228 <_dtoa_r+0x2b8>)
 801007c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010080:	f7f0 faca 	bl	8000618 <__aeabi_dmul>
 8010084:	a36a      	add	r3, pc, #424	@ (adr r3, 8010230 <_dtoa_r+0x2c0>)
 8010086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008a:	f7f0 f90f 	bl	80002ac <__adddf3>
 801008e:	4604      	mov	r4, r0
 8010090:	4630      	mov	r0, r6
 8010092:	460d      	mov	r5, r1
 8010094:	f7f0 fa56 	bl	8000544 <__aeabi_i2d>
 8010098:	a367      	add	r3, pc, #412	@ (adr r3, 8010238 <_dtoa_r+0x2c8>)
 801009a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009e:	f7f0 fabb 	bl	8000618 <__aeabi_dmul>
 80100a2:	4602      	mov	r2, r0
 80100a4:	460b      	mov	r3, r1
 80100a6:	4620      	mov	r0, r4
 80100a8:	4629      	mov	r1, r5
 80100aa:	f7f0 f8ff 	bl	80002ac <__adddf3>
 80100ae:	4604      	mov	r4, r0
 80100b0:	460d      	mov	r5, r1
 80100b2:	f7f0 fd61 	bl	8000b78 <__aeabi_d2iz>
 80100b6:	2200      	movs	r2, #0
 80100b8:	4607      	mov	r7, r0
 80100ba:	2300      	movs	r3, #0
 80100bc:	4620      	mov	r0, r4
 80100be:	4629      	mov	r1, r5
 80100c0:	f7f0 fd1c 	bl	8000afc <__aeabi_dcmplt>
 80100c4:	b140      	cbz	r0, 80100d8 <_dtoa_r+0x168>
 80100c6:	4638      	mov	r0, r7
 80100c8:	f7f0 fa3c 	bl	8000544 <__aeabi_i2d>
 80100cc:	4622      	mov	r2, r4
 80100ce:	462b      	mov	r3, r5
 80100d0:	f7f0 fd0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80100d4:	b900      	cbnz	r0, 80100d8 <_dtoa_r+0x168>
 80100d6:	3f01      	subs	r7, #1
 80100d8:	2f16      	cmp	r7, #22
 80100da:	d852      	bhi.n	8010182 <_dtoa_r+0x212>
 80100dc:	4b5d      	ldr	r3, [pc, #372]	@ (8010254 <_dtoa_r+0x2e4>)
 80100de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80100ea:	f7f0 fd07 	bl	8000afc <__aeabi_dcmplt>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d049      	beq.n	8010186 <_dtoa_r+0x216>
 80100f2:	3f01      	subs	r7, #1
 80100f4:	2300      	movs	r3, #0
 80100f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80100f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80100fa:	1b9b      	subs	r3, r3, r6
 80100fc:	1e5a      	subs	r2, r3, #1
 80100fe:	bf45      	ittet	mi
 8010100:	f1c3 0301 	rsbmi	r3, r3, #1
 8010104:	9300      	strmi	r3, [sp, #0]
 8010106:	2300      	movpl	r3, #0
 8010108:	2300      	movmi	r3, #0
 801010a:	9206      	str	r2, [sp, #24]
 801010c:	bf54      	ite	pl
 801010e:	9300      	strpl	r3, [sp, #0]
 8010110:	9306      	strmi	r3, [sp, #24]
 8010112:	2f00      	cmp	r7, #0
 8010114:	db39      	blt.n	801018a <_dtoa_r+0x21a>
 8010116:	9b06      	ldr	r3, [sp, #24]
 8010118:	970d      	str	r7, [sp, #52]	@ 0x34
 801011a:	443b      	add	r3, r7
 801011c:	9306      	str	r3, [sp, #24]
 801011e:	2300      	movs	r3, #0
 8010120:	9308      	str	r3, [sp, #32]
 8010122:	9b07      	ldr	r3, [sp, #28]
 8010124:	2b09      	cmp	r3, #9
 8010126:	d863      	bhi.n	80101f0 <_dtoa_r+0x280>
 8010128:	2b05      	cmp	r3, #5
 801012a:	bfc4      	itt	gt
 801012c:	3b04      	subgt	r3, #4
 801012e:	9307      	strgt	r3, [sp, #28]
 8010130:	9b07      	ldr	r3, [sp, #28]
 8010132:	f1a3 0302 	sub.w	r3, r3, #2
 8010136:	bfcc      	ite	gt
 8010138:	2400      	movgt	r4, #0
 801013a:	2401      	movle	r4, #1
 801013c:	2b03      	cmp	r3, #3
 801013e:	d863      	bhi.n	8010208 <_dtoa_r+0x298>
 8010140:	e8df f003 	tbb	[pc, r3]
 8010144:	2b375452 	.word	0x2b375452
 8010148:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801014c:	441e      	add	r6, r3
 801014e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010152:	2b20      	cmp	r3, #32
 8010154:	bfc1      	itttt	gt
 8010156:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801015a:	409f      	lslgt	r7, r3
 801015c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010160:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010164:	bfd6      	itet	le
 8010166:	f1c3 0320 	rsble	r3, r3, #32
 801016a:	ea47 0003 	orrgt.w	r0, r7, r3
 801016e:	fa04 f003 	lslle.w	r0, r4, r3
 8010172:	f7f0 f9d7 	bl	8000524 <__aeabi_ui2d>
 8010176:	2201      	movs	r2, #1
 8010178:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801017c:	3e01      	subs	r6, #1
 801017e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010180:	e776      	b.n	8010070 <_dtoa_r+0x100>
 8010182:	2301      	movs	r3, #1
 8010184:	e7b7      	b.n	80100f6 <_dtoa_r+0x186>
 8010186:	9010      	str	r0, [sp, #64]	@ 0x40
 8010188:	e7b6      	b.n	80100f8 <_dtoa_r+0x188>
 801018a:	9b00      	ldr	r3, [sp, #0]
 801018c:	1bdb      	subs	r3, r3, r7
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	427b      	negs	r3, r7
 8010192:	9308      	str	r3, [sp, #32]
 8010194:	2300      	movs	r3, #0
 8010196:	930d      	str	r3, [sp, #52]	@ 0x34
 8010198:	e7c3      	b.n	8010122 <_dtoa_r+0x1b2>
 801019a:	2301      	movs	r3, #1
 801019c:	9309      	str	r3, [sp, #36]	@ 0x24
 801019e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101a0:	eb07 0b03 	add.w	fp, r7, r3
 80101a4:	f10b 0301 	add.w	r3, fp, #1
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	9303      	str	r3, [sp, #12]
 80101ac:	bfb8      	it	lt
 80101ae:	2301      	movlt	r3, #1
 80101b0:	e006      	b.n	80101c0 <_dtoa_r+0x250>
 80101b2:	2301      	movs	r3, #1
 80101b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80101b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	dd28      	ble.n	801020e <_dtoa_r+0x29e>
 80101bc:	469b      	mov	fp, r3
 80101be:	9303      	str	r3, [sp, #12]
 80101c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80101c4:	2100      	movs	r1, #0
 80101c6:	2204      	movs	r2, #4
 80101c8:	f102 0514 	add.w	r5, r2, #20
 80101cc:	429d      	cmp	r5, r3
 80101ce:	d926      	bls.n	801021e <_dtoa_r+0x2ae>
 80101d0:	6041      	str	r1, [r0, #4]
 80101d2:	4648      	mov	r0, r9
 80101d4:	f000 fce6 	bl	8010ba4 <_Balloc>
 80101d8:	4682      	mov	sl, r0
 80101da:	2800      	cmp	r0, #0
 80101dc:	d142      	bne.n	8010264 <_dtoa_r+0x2f4>
 80101de:	4b1e      	ldr	r3, [pc, #120]	@ (8010258 <_dtoa_r+0x2e8>)
 80101e0:	4602      	mov	r2, r0
 80101e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80101e6:	e6da      	b.n	800ff9e <_dtoa_r+0x2e>
 80101e8:	2300      	movs	r3, #0
 80101ea:	e7e3      	b.n	80101b4 <_dtoa_r+0x244>
 80101ec:	2300      	movs	r3, #0
 80101ee:	e7d5      	b.n	801019c <_dtoa_r+0x22c>
 80101f0:	2401      	movs	r4, #1
 80101f2:	2300      	movs	r3, #0
 80101f4:	9307      	str	r3, [sp, #28]
 80101f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80101f8:	f04f 3bff 	mov.w	fp, #4294967295
 80101fc:	2200      	movs	r2, #0
 80101fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8010202:	2312      	movs	r3, #18
 8010204:	920c      	str	r2, [sp, #48]	@ 0x30
 8010206:	e7db      	b.n	80101c0 <_dtoa_r+0x250>
 8010208:	2301      	movs	r3, #1
 801020a:	9309      	str	r3, [sp, #36]	@ 0x24
 801020c:	e7f4      	b.n	80101f8 <_dtoa_r+0x288>
 801020e:	f04f 0b01 	mov.w	fp, #1
 8010212:	f8cd b00c 	str.w	fp, [sp, #12]
 8010216:	465b      	mov	r3, fp
 8010218:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801021c:	e7d0      	b.n	80101c0 <_dtoa_r+0x250>
 801021e:	3101      	adds	r1, #1
 8010220:	0052      	lsls	r2, r2, #1
 8010222:	e7d1      	b.n	80101c8 <_dtoa_r+0x258>
 8010224:	f3af 8000 	nop.w
 8010228:	636f4361 	.word	0x636f4361
 801022c:	3fd287a7 	.word	0x3fd287a7
 8010230:	8b60c8b3 	.word	0x8b60c8b3
 8010234:	3fc68a28 	.word	0x3fc68a28
 8010238:	509f79fb 	.word	0x509f79fb
 801023c:	3fd34413 	.word	0x3fd34413
 8010240:	0803e0cf 	.word	0x0803e0cf
 8010244:	0803e0e6 	.word	0x0803e0e6
 8010248:	7ff00000 	.word	0x7ff00000
 801024c:	0803e09a 	.word	0x0803e09a
 8010250:	3ff80000 	.word	0x3ff80000
 8010254:	0803e298 	.word	0x0803e298
 8010258:	0803e13e 	.word	0x0803e13e
 801025c:	0803e0cb 	.word	0x0803e0cb
 8010260:	0803e099 	.word	0x0803e099
 8010264:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010268:	6018      	str	r0, [r3, #0]
 801026a:	9b03      	ldr	r3, [sp, #12]
 801026c:	2b0e      	cmp	r3, #14
 801026e:	f200 80a1 	bhi.w	80103b4 <_dtoa_r+0x444>
 8010272:	2c00      	cmp	r4, #0
 8010274:	f000 809e 	beq.w	80103b4 <_dtoa_r+0x444>
 8010278:	2f00      	cmp	r7, #0
 801027a:	dd33      	ble.n	80102e4 <_dtoa_r+0x374>
 801027c:	4b9c      	ldr	r3, [pc, #624]	@ (80104f0 <_dtoa_r+0x580>)
 801027e:	f007 020f 	and.w	r2, r7, #15
 8010282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010286:	ed93 7b00 	vldr	d7, [r3]
 801028a:	05f8      	lsls	r0, r7, #23
 801028c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010290:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010294:	d516      	bpl.n	80102c4 <_dtoa_r+0x354>
 8010296:	4b97      	ldr	r3, [pc, #604]	@ (80104f4 <_dtoa_r+0x584>)
 8010298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801029c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80102a0:	f7f0 fae4 	bl	800086c <__aeabi_ddiv>
 80102a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102a8:	f004 040f 	and.w	r4, r4, #15
 80102ac:	2603      	movs	r6, #3
 80102ae:	4d91      	ldr	r5, [pc, #580]	@ (80104f4 <_dtoa_r+0x584>)
 80102b0:	b954      	cbnz	r4, 80102c8 <_dtoa_r+0x358>
 80102b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80102b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102ba:	f7f0 fad7 	bl	800086c <__aeabi_ddiv>
 80102be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102c2:	e028      	b.n	8010316 <_dtoa_r+0x3a6>
 80102c4:	2602      	movs	r6, #2
 80102c6:	e7f2      	b.n	80102ae <_dtoa_r+0x33e>
 80102c8:	07e1      	lsls	r1, r4, #31
 80102ca:	d508      	bpl.n	80102de <_dtoa_r+0x36e>
 80102cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80102d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80102d4:	f7f0 f9a0 	bl	8000618 <__aeabi_dmul>
 80102d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80102dc:	3601      	adds	r6, #1
 80102de:	1064      	asrs	r4, r4, #1
 80102e0:	3508      	adds	r5, #8
 80102e2:	e7e5      	b.n	80102b0 <_dtoa_r+0x340>
 80102e4:	f000 80af 	beq.w	8010446 <_dtoa_r+0x4d6>
 80102e8:	427c      	negs	r4, r7
 80102ea:	4b81      	ldr	r3, [pc, #516]	@ (80104f0 <_dtoa_r+0x580>)
 80102ec:	4d81      	ldr	r5, [pc, #516]	@ (80104f4 <_dtoa_r+0x584>)
 80102ee:	f004 020f 	and.w	r2, r4, #15
 80102f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80102fe:	f7f0 f98b 	bl	8000618 <__aeabi_dmul>
 8010302:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010306:	1124      	asrs	r4, r4, #4
 8010308:	2300      	movs	r3, #0
 801030a:	2602      	movs	r6, #2
 801030c:	2c00      	cmp	r4, #0
 801030e:	f040 808f 	bne.w	8010430 <_dtoa_r+0x4c0>
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1d3      	bne.n	80102be <_dtoa_r+0x34e>
 8010316:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010318:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 8094 	beq.w	801044a <_dtoa_r+0x4da>
 8010322:	4b75      	ldr	r3, [pc, #468]	@ (80104f8 <_dtoa_r+0x588>)
 8010324:	2200      	movs	r2, #0
 8010326:	4620      	mov	r0, r4
 8010328:	4629      	mov	r1, r5
 801032a:	f7f0 fbe7 	bl	8000afc <__aeabi_dcmplt>
 801032e:	2800      	cmp	r0, #0
 8010330:	f000 808b 	beq.w	801044a <_dtoa_r+0x4da>
 8010334:	9b03      	ldr	r3, [sp, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	f000 8087 	beq.w	801044a <_dtoa_r+0x4da>
 801033c:	f1bb 0f00 	cmp.w	fp, #0
 8010340:	dd34      	ble.n	80103ac <_dtoa_r+0x43c>
 8010342:	4620      	mov	r0, r4
 8010344:	4b6d      	ldr	r3, [pc, #436]	@ (80104fc <_dtoa_r+0x58c>)
 8010346:	2200      	movs	r2, #0
 8010348:	4629      	mov	r1, r5
 801034a:	f7f0 f965 	bl	8000618 <__aeabi_dmul>
 801034e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010352:	f107 38ff 	add.w	r8, r7, #4294967295
 8010356:	3601      	adds	r6, #1
 8010358:	465c      	mov	r4, fp
 801035a:	4630      	mov	r0, r6
 801035c:	f7f0 f8f2 	bl	8000544 <__aeabi_i2d>
 8010360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010364:	f7f0 f958 	bl	8000618 <__aeabi_dmul>
 8010368:	4b65      	ldr	r3, [pc, #404]	@ (8010500 <_dtoa_r+0x590>)
 801036a:	2200      	movs	r2, #0
 801036c:	f7ef ff9e 	bl	80002ac <__adddf3>
 8010370:	4605      	mov	r5, r0
 8010372:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010376:	2c00      	cmp	r4, #0
 8010378:	d16a      	bne.n	8010450 <_dtoa_r+0x4e0>
 801037a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801037e:	4b61      	ldr	r3, [pc, #388]	@ (8010504 <_dtoa_r+0x594>)
 8010380:	2200      	movs	r2, #0
 8010382:	f7ef ff91 	bl	80002a8 <__aeabi_dsub>
 8010386:	4602      	mov	r2, r0
 8010388:	460b      	mov	r3, r1
 801038a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801038e:	462a      	mov	r2, r5
 8010390:	4633      	mov	r3, r6
 8010392:	f7f0 fbd1 	bl	8000b38 <__aeabi_dcmpgt>
 8010396:	2800      	cmp	r0, #0
 8010398:	f040 8298 	bne.w	80108cc <_dtoa_r+0x95c>
 801039c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103a0:	462a      	mov	r2, r5
 80103a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80103a6:	f7f0 fba9 	bl	8000afc <__aeabi_dcmplt>
 80103aa:	bb38      	cbnz	r0, 80103fc <_dtoa_r+0x48c>
 80103ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80103b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80103b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f2c0 8157 	blt.w	801066a <_dtoa_r+0x6fa>
 80103bc:	2f0e      	cmp	r7, #14
 80103be:	f300 8154 	bgt.w	801066a <_dtoa_r+0x6fa>
 80103c2:	4b4b      	ldr	r3, [pc, #300]	@ (80104f0 <_dtoa_r+0x580>)
 80103c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80103c8:	ed93 7b00 	vldr	d7, [r3]
 80103cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	ed8d 7b00 	vstr	d7, [sp]
 80103d4:	f280 80e5 	bge.w	80105a2 <_dtoa_r+0x632>
 80103d8:	9b03      	ldr	r3, [sp, #12]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f300 80e1 	bgt.w	80105a2 <_dtoa_r+0x632>
 80103e0:	d10c      	bne.n	80103fc <_dtoa_r+0x48c>
 80103e2:	4b48      	ldr	r3, [pc, #288]	@ (8010504 <_dtoa_r+0x594>)
 80103e4:	2200      	movs	r2, #0
 80103e6:	ec51 0b17 	vmov	r0, r1, d7
 80103ea:	f7f0 f915 	bl	8000618 <__aeabi_dmul>
 80103ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103f2:	f7f0 fb97 	bl	8000b24 <__aeabi_dcmpge>
 80103f6:	2800      	cmp	r0, #0
 80103f8:	f000 8266 	beq.w	80108c8 <_dtoa_r+0x958>
 80103fc:	2400      	movs	r4, #0
 80103fe:	4625      	mov	r5, r4
 8010400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010402:	4656      	mov	r6, sl
 8010404:	ea6f 0803 	mvn.w	r8, r3
 8010408:	2700      	movs	r7, #0
 801040a:	4621      	mov	r1, r4
 801040c:	4648      	mov	r0, r9
 801040e:	f000 fc09 	bl	8010c24 <_Bfree>
 8010412:	2d00      	cmp	r5, #0
 8010414:	f000 80bd 	beq.w	8010592 <_dtoa_r+0x622>
 8010418:	b12f      	cbz	r7, 8010426 <_dtoa_r+0x4b6>
 801041a:	42af      	cmp	r7, r5
 801041c:	d003      	beq.n	8010426 <_dtoa_r+0x4b6>
 801041e:	4639      	mov	r1, r7
 8010420:	4648      	mov	r0, r9
 8010422:	f000 fbff 	bl	8010c24 <_Bfree>
 8010426:	4629      	mov	r1, r5
 8010428:	4648      	mov	r0, r9
 801042a:	f000 fbfb 	bl	8010c24 <_Bfree>
 801042e:	e0b0      	b.n	8010592 <_dtoa_r+0x622>
 8010430:	07e2      	lsls	r2, r4, #31
 8010432:	d505      	bpl.n	8010440 <_dtoa_r+0x4d0>
 8010434:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010438:	f7f0 f8ee 	bl	8000618 <__aeabi_dmul>
 801043c:	3601      	adds	r6, #1
 801043e:	2301      	movs	r3, #1
 8010440:	1064      	asrs	r4, r4, #1
 8010442:	3508      	adds	r5, #8
 8010444:	e762      	b.n	801030c <_dtoa_r+0x39c>
 8010446:	2602      	movs	r6, #2
 8010448:	e765      	b.n	8010316 <_dtoa_r+0x3a6>
 801044a:	9c03      	ldr	r4, [sp, #12]
 801044c:	46b8      	mov	r8, r7
 801044e:	e784      	b.n	801035a <_dtoa_r+0x3ea>
 8010450:	4b27      	ldr	r3, [pc, #156]	@ (80104f0 <_dtoa_r+0x580>)
 8010452:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010454:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010458:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801045c:	4454      	add	r4, sl
 801045e:	2900      	cmp	r1, #0
 8010460:	d054      	beq.n	801050c <_dtoa_r+0x59c>
 8010462:	4929      	ldr	r1, [pc, #164]	@ (8010508 <_dtoa_r+0x598>)
 8010464:	2000      	movs	r0, #0
 8010466:	f7f0 fa01 	bl	800086c <__aeabi_ddiv>
 801046a:	4633      	mov	r3, r6
 801046c:	462a      	mov	r2, r5
 801046e:	f7ef ff1b 	bl	80002a8 <__aeabi_dsub>
 8010472:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010476:	4656      	mov	r6, sl
 8010478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801047c:	f7f0 fb7c 	bl	8000b78 <__aeabi_d2iz>
 8010480:	4605      	mov	r5, r0
 8010482:	f7f0 f85f 	bl	8000544 <__aeabi_i2d>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801048e:	f7ef ff0b 	bl	80002a8 <__aeabi_dsub>
 8010492:	3530      	adds	r5, #48	@ 0x30
 8010494:	4602      	mov	r2, r0
 8010496:	460b      	mov	r3, r1
 8010498:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801049c:	f806 5b01 	strb.w	r5, [r6], #1
 80104a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104a4:	f7f0 fb2a 	bl	8000afc <__aeabi_dcmplt>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d172      	bne.n	8010592 <_dtoa_r+0x622>
 80104ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104b0:	4911      	ldr	r1, [pc, #68]	@ (80104f8 <_dtoa_r+0x588>)
 80104b2:	2000      	movs	r0, #0
 80104b4:	f7ef fef8 	bl	80002a8 <__aeabi_dsub>
 80104b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104bc:	f7f0 fb1e 	bl	8000afc <__aeabi_dcmplt>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	f040 80b4 	bne.w	801062e <_dtoa_r+0x6be>
 80104c6:	42a6      	cmp	r6, r4
 80104c8:	f43f af70 	beq.w	80103ac <_dtoa_r+0x43c>
 80104cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80104d0:	4b0a      	ldr	r3, [pc, #40]	@ (80104fc <_dtoa_r+0x58c>)
 80104d2:	2200      	movs	r2, #0
 80104d4:	f7f0 f8a0 	bl	8000618 <__aeabi_dmul>
 80104d8:	4b08      	ldr	r3, [pc, #32]	@ (80104fc <_dtoa_r+0x58c>)
 80104da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80104de:	2200      	movs	r2, #0
 80104e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104e4:	f7f0 f898 	bl	8000618 <__aeabi_dmul>
 80104e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104ec:	e7c4      	b.n	8010478 <_dtoa_r+0x508>
 80104ee:	bf00      	nop
 80104f0:	0803e298 	.word	0x0803e298
 80104f4:	0803e270 	.word	0x0803e270
 80104f8:	3ff00000 	.word	0x3ff00000
 80104fc:	40240000 	.word	0x40240000
 8010500:	401c0000 	.word	0x401c0000
 8010504:	40140000 	.word	0x40140000
 8010508:	3fe00000 	.word	0x3fe00000
 801050c:	4631      	mov	r1, r6
 801050e:	4628      	mov	r0, r5
 8010510:	f7f0 f882 	bl	8000618 <__aeabi_dmul>
 8010514:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010518:	9413      	str	r4, [sp, #76]	@ 0x4c
 801051a:	4656      	mov	r6, sl
 801051c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010520:	f7f0 fb2a 	bl	8000b78 <__aeabi_d2iz>
 8010524:	4605      	mov	r5, r0
 8010526:	f7f0 f80d 	bl	8000544 <__aeabi_i2d>
 801052a:	4602      	mov	r2, r0
 801052c:	460b      	mov	r3, r1
 801052e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010532:	f7ef feb9 	bl	80002a8 <__aeabi_dsub>
 8010536:	3530      	adds	r5, #48	@ 0x30
 8010538:	f806 5b01 	strb.w	r5, [r6], #1
 801053c:	4602      	mov	r2, r0
 801053e:	460b      	mov	r3, r1
 8010540:	42a6      	cmp	r6, r4
 8010542:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010546:	f04f 0200 	mov.w	r2, #0
 801054a:	d124      	bne.n	8010596 <_dtoa_r+0x626>
 801054c:	4baf      	ldr	r3, [pc, #700]	@ (801080c <_dtoa_r+0x89c>)
 801054e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010552:	f7ef feab 	bl	80002ac <__adddf3>
 8010556:	4602      	mov	r2, r0
 8010558:	460b      	mov	r3, r1
 801055a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801055e:	f7f0 faeb 	bl	8000b38 <__aeabi_dcmpgt>
 8010562:	2800      	cmp	r0, #0
 8010564:	d163      	bne.n	801062e <_dtoa_r+0x6be>
 8010566:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801056a:	49a8      	ldr	r1, [pc, #672]	@ (801080c <_dtoa_r+0x89c>)
 801056c:	2000      	movs	r0, #0
 801056e:	f7ef fe9b 	bl	80002a8 <__aeabi_dsub>
 8010572:	4602      	mov	r2, r0
 8010574:	460b      	mov	r3, r1
 8010576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801057a:	f7f0 fabf 	bl	8000afc <__aeabi_dcmplt>
 801057e:	2800      	cmp	r0, #0
 8010580:	f43f af14 	beq.w	80103ac <_dtoa_r+0x43c>
 8010584:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010586:	1e73      	subs	r3, r6, #1
 8010588:	9313      	str	r3, [sp, #76]	@ 0x4c
 801058a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801058e:	2b30      	cmp	r3, #48	@ 0x30
 8010590:	d0f8      	beq.n	8010584 <_dtoa_r+0x614>
 8010592:	4647      	mov	r7, r8
 8010594:	e03b      	b.n	801060e <_dtoa_r+0x69e>
 8010596:	4b9e      	ldr	r3, [pc, #632]	@ (8010810 <_dtoa_r+0x8a0>)
 8010598:	f7f0 f83e 	bl	8000618 <__aeabi_dmul>
 801059c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105a0:	e7bc      	b.n	801051c <_dtoa_r+0x5ac>
 80105a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80105a6:	4656      	mov	r6, sl
 80105a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105ac:	4620      	mov	r0, r4
 80105ae:	4629      	mov	r1, r5
 80105b0:	f7f0 f95c 	bl	800086c <__aeabi_ddiv>
 80105b4:	f7f0 fae0 	bl	8000b78 <__aeabi_d2iz>
 80105b8:	4680      	mov	r8, r0
 80105ba:	f7ef ffc3 	bl	8000544 <__aeabi_i2d>
 80105be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105c2:	f7f0 f829 	bl	8000618 <__aeabi_dmul>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4620      	mov	r0, r4
 80105cc:	4629      	mov	r1, r5
 80105ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80105d2:	f7ef fe69 	bl	80002a8 <__aeabi_dsub>
 80105d6:	f806 4b01 	strb.w	r4, [r6], #1
 80105da:	9d03      	ldr	r5, [sp, #12]
 80105dc:	eba6 040a 	sub.w	r4, r6, sl
 80105e0:	42a5      	cmp	r5, r4
 80105e2:	4602      	mov	r2, r0
 80105e4:	460b      	mov	r3, r1
 80105e6:	d133      	bne.n	8010650 <_dtoa_r+0x6e0>
 80105e8:	f7ef fe60 	bl	80002ac <__adddf3>
 80105ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105f0:	4604      	mov	r4, r0
 80105f2:	460d      	mov	r5, r1
 80105f4:	f7f0 faa0 	bl	8000b38 <__aeabi_dcmpgt>
 80105f8:	b9c0      	cbnz	r0, 801062c <_dtoa_r+0x6bc>
 80105fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105fe:	4620      	mov	r0, r4
 8010600:	4629      	mov	r1, r5
 8010602:	f7f0 fa71 	bl	8000ae8 <__aeabi_dcmpeq>
 8010606:	b110      	cbz	r0, 801060e <_dtoa_r+0x69e>
 8010608:	f018 0f01 	tst.w	r8, #1
 801060c:	d10e      	bne.n	801062c <_dtoa_r+0x6bc>
 801060e:	9902      	ldr	r1, [sp, #8]
 8010610:	4648      	mov	r0, r9
 8010612:	f000 fb07 	bl	8010c24 <_Bfree>
 8010616:	2300      	movs	r3, #0
 8010618:	7033      	strb	r3, [r6, #0]
 801061a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801061c:	3701      	adds	r7, #1
 801061e:	601f      	str	r7, [r3, #0]
 8010620:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 824b 	beq.w	8010abe <_dtoa_r+0xb4e>
 8010628:	601e      	str	r6, [r3, #0]
 801062a:	e248      	b.n	8010abe <_dtoa_r+0xb4e>
 801062c:	46b8      	mov	r8, r7
 801062e:	4633      	mov	r3, r6
 8010630:	461e      	mov	r6, r3
 8010632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010636:	2a39      	cmp	r2, #57	@ 0x39
 8010638:	d106      	bne.n	8010648 <_dtoa_r+0x6d8>
 801063a:	459a      	cmp	sl, r3
 801063c:	d1f8      	bne.n	8010630 <_dtoa_r+0x6c0>
 801063e:	2230      	movs	r2, #48	@ 0x30
 8010640:	f108 0801 	add.w	r8, r8, #1
 8010644:	f88a 2000 	strb.w	r2, [sl]
 8010648:	781a      	ldrb	r2, [r3, #0]
 801064a:	3201      	adds	r2, #1
 801064c:	701a      	strb	r2, [r3, #0]
 801064e:	e7a0      	b.n	8010592 <_dtoa_r+0x622>
 8010650:	4b6f      	ldr	r3, [pc, #444]	@ (8010810 <_dtoa_r+0x8a0>)
 8010652:	2200      	movs	r2, #0
 8010654:	f7ef ffe0 	bl	8000618 <__aeabi_dmul>
 8010658:	2200      	movs	r2, #0
 801065a:	2300      	movs	r3, #0
 801065c:	4604      	mov	r4, r0
 801065e:	460d      	mov	r5, r1
 8010660:	f7f0 fa42 	bl	8000ae8 <__aeabi_dcmpeq>
 8010664:	2800      	cmp	r0, #0
 8010666:	d09f      	beq.n	80105a8 <_dtoa_r+0x638>
 8010668:	e7d1      	b.n	801060e <_dtoa_r+0x69e>
 801066a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801066c:	2a00      	cmp	r2, #0
 801066e:	f000 80ea 	beq.w	8010846 <_dtoa_r+0x8d6>
 8010672:	9a07      	ldr	r2, [sp, #28]
 8010674:	2a01      	cmp	r2, #1
 8010676:	f300 80cd 	bgt.w	8010814 <_dtoa_r+0x8a4>
 801067a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801067c:	2a00      	cmp	r2, #0
 801067e:	f000 80c1 	beq.w	8010804 <_dtoa_r+0x894>
 8010682:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010686:	9c08      	ldr	r4, [sp, #32]
 8010688:	9e00      	ldr	r6, [sp, #0]
 801068a:	9a00      	ldr	r2, [sp, #0]
 801068c:	441a      	add	r2, r3
 801068e:	9200      	str	r2, [sp, #0]
 8010690:	9a06      	ldr	r2, [sp, #24]
 8010692:	2101      	movs	r1, #1
 8010694:	441a      	add	r2, r3
 8010696:	4648      	mov	r0, r9
 8010698:	9206      	str	r2, [sp, #24]
 801069a:	f000 fbc1 	bl	8010e20 <__i2b>
 801069e:	4605      	mov	r5, r0
 80106a0:	b166      	cbz	r6, 80106bc <_dtoa_r+0x74c>
 80106a2:	9b06      	ldr	r3, [sp, #24]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	dd09      	ble.n	80106bc <_dtoa_r+0x74c>
 80106a8:	42b3      	cmp	r3, r6
 80106aa:	9a00      	ldr	r2, [sp, #0]
 80106ac:	bfa8      	it	ge
 80106ae:	4633      	movge	r3, r6
 80106b0:	1ad2      	subs	r2, r2, r3
 80106b2:	9200      	str	r2, [sp, #0]
 80106b4:	9a06      	ldr	r2, [sp, #24]
 80106b6:	1af6      	subs	r6, r6, r3
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	9306      	str	r3, [sp, #24]
 80106bc:	9b08      	ldr	r3, [sp, #32]
 80106be:	b30b      	cbz	r3, 8010704 <_dtoa_r+0x794>
 80106c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f000 80c6 	beq.w	8010854 <_dtoa_r+0x8e4>
 80106c8:	2c00      	cmp	r4, #0
 80106ca:	f000 80c0 	beq.w	801084e <_dtoa_r+0x8de>
 80106ce:	4629      	mov	r1, r5
 80106d0:	4622      	mov	r2, r4
 80106d2:	4648      	mov	r0, r9
 80106d4:	f000 fc5c 	bl	8010f90 <__pow5mult>
 80106d8:	9a02      	ldr	r2, [sp, #8]
 80106da:	4601      	mov	r1, r0
 80106dc:	4605      	mov	r5, r0
 80106de:	4648      	mov	r0, r9
 80106e0:	f000 fbb4 	bl	8010e4c <__multiply>
 80106e4:	9902      	ldr	r1, [sp, #8]
 80106e6:	4680      	mov	r8, r0
 80106e8:	4648      	mov	r0, r9
 80106ea:	f000 fa9b 	bl	8010c24 <_Bfree>
 80106ee:	9b08      	ldr	r3, [sp, #32]
 80106f0:	1b1b      	subs	r3, r3, r4
 80106f2:	9308      	str	r3, [sp, #32]
 80106f4:	f000 80b1 	beq.w	801085a <_dtoa_r+0x8ea>
 80106f8:	9a08      	ldr	r2, [sp, #32]
 80106fa:	4641      	mov	r1, r8
 80106fc:	4648      	mov	r0, r9
 80106fe:	f000 fc47 	bl	8010f90 <__pow5mult>
 8010702:	9002      	str	r0, [sp, #8]
 8010704:	2101      	movs	r1, #1
 8010706:	4648      	mov	r0, r9
 8010708:	f000 fb8a 	bl	8010e20 <__i2b>
 801070c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801070e:	4604      	mov	r4, r0
 8010710:	2b00      	cmp	r3, #0
 8010712:	f000 81d8 	beq.w	8010ac6 <_dtoa_r+0xb56>
 8010716:	461a      	mov	r2, r3
 8010718:	4601      	mov	r1, r0
 801071a:	4648      	mov	r0, r9
 801071c:	f000 fc38 	bl	8010f90 <__pow5mult>
 8010720:	9b07      	ldr	r3, [sp, #28]
 8010722:	2b01      	cmp	r3, #1
 8010724:	4604      	mov	r4, r0
 8010726:	f300 809f 	bgt.w	8010868 <_dtoa_r+0x8f8>
 801072a:	9b04      	ldr	r3, [sp, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	f040 8097 	bne.w	8010860 <_dtoa_r+0x8f0>
 8010732:	9b05      	ldr	r3, [sp, #20]
 8010734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010738:	2b00      	cmp	r3, #0
 801073a:	f040 8093 	bne.w	8010864 <_dtoa_r+0x8f4>
 801073e:	9b05      	ldr	r3, [sp, #20]
 8010740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010744:	0d1b      	lsrs	r3, r3, #20
 8010746:	051b      	lsls	r3, r3, #20
 8010748:	b133      	cbz	r3, 8010758 <_dtoa_r+0x7e8>
 801074a:	9b00      	ldr	r3, [sp, #0]
 801074c:	3301      	adds	r3, #1
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	9b06      	ldr	r3, [sp, #24]
 8010752:	3301      	adds	r3, #1
 8010754:	9306      	str	r3, [sp, #24]
 8010756:	2301      	movs	r3, #1
 8010758:	9308      	str	r3, [sp, #32]
 801075a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 81b8 	beq.w	8010ad2 <_dtoa_r+0xb62>
 8010762:	6923      	ldr	r3, [r4, #16]
 8010764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010768:	6918      	ldr	r0, [r3, #16]
 801076a:	f000 fb0d 	bl	8010d88 <__hi0bits>
 801076e:	f1c0 0020 	rsb	r0, r0, #32
 8010772:	9b06      	ldr	r3, [sp, #24]
 8010774:	4418      	add	r0, r3
 8010776:	f010 001f 	ands.w	r0, r0, #31
 801077a:	f000 8082 	beq.w	8010882 <_dtoa_r+0x912>
 801077e:	f1c0 0320 	rsb	r3, r0, #32
 8010782:	2b04      	cmp	r3, #4
 8010784:	dd73      	ble.n	801086e <_dtoa_r+0x8fe>
 8010786:	9b00      	ldr	r3, [sp, #0]
 8010788:	f1c0 001c 	rsb	r0, r0, #28
 801078c:	4403      	add	r3, r0
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	9b06      	ldr	r3, [sp, #24]
 8010792:	4403      	add	r3, r0
 8010794:	4406      	add	r6, r0
 8010796:	9306      	str	r3, [sp, #24]
 8010798:	9b00      	ldr	r3, [sp, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	dd05      	ble.n	80107aa <_dtoa_r+0x83a>
 801079e:	9902      	ldr	r1, [sp, #8]
 80107a0:	461a      	mov	r2, r3
 80107a2:	4648      	mov	r0, r9
 80107a4:	f000 fc4e 	bl	8011044 <__lshift>
 80107a8:	9002      	str	r0, [sp, #8]
 80107aa:	9b06      	ldr	r3, [sp, #24]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	dd05      	ble.n	80107bc <_dtoa_r+0x84c>
 80107b0:	4621      	mov	r1, r4
 80107b2:	461a      	mov	r2, r3
 80107b4:	4648      	mov	r0, r9
 80107b6:	f000 fc45 	bl	8011044 <__lshift>
 80107ba:	4604      	mov	r4, r0
 80107bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d061      	beq.n	8010886 <_dtoa_r+0x916>
 80107c2:	9802      	ldr	r0, [sp, #8]
 80107c4:	4621      	mov	r1, r4
 80107c6:	f000 fca9 	bl	801111c <__mcmp>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	da5b      	bge.n	8010886 <_dtoa_r+0x916>
 80107ce:	2300      	movs	r3, #0
 80107d0:	9902      	ldr	r1, [sp, #8]
 80107d2:	220a      	movs	r2, #10
 80107d4:	4648      	mov	r0, r9
 80107d6:	f000 fa47 	bl	8010c68 <__multadd>
 80107da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107dc:	9002      	str	r0, [sp, #8]
 80107de:	f107 38ff 	add.w	r8, r7, #4294967295
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f000 8177 	beq.w	8010ad6 <_dtoa_r+0xb66>
 80107e8:	4629      	mov	r1, r5
 80107ea:	2300      	movs	r3, #0
 80107ec:	220a      	movs	r2, #10
 80107ee:	4648      	mov	r0, r9
 80107f0:	f000 fa3a 	bl	8010c68 <__multadd>
 80107f4:	f1bb 0f00 	cmp.w	fp, #0
 80107f8:	4605      	mov	r5, r0
 80107fa:	dc6f      	bgt.n	80108dc <_dtoa_r+0x96c>
 80107fc:	9b07      	ldr	r3, [sp, #28]
 80107fe:	2b02      	cmp	r3, #2
 8010800:	dc49      	bgt.n	8010896 <_dtoa_r+0x926>
 8010802:	e06b      	b.n	80108dc <_dtoa_r+0x96c>
 8010804:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010806:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801080a:	e73c      	b.n	8010686 <_dtoa_r+0x716>
 801080c:	3fe00000 	.word	0x3fe00000
 8010810:	40240000 	.word	0x40240000
 8010814:	9b03      	ldr	r3, [sp, #12]
 8010816:	1e5c      	subs	r4, r3, #1
 8010818:	9b08      	ldr	r3, [sp, #32]
 801081a:	42a3      	cmp	r3, r4
 801081c:	db09      	blt.n	8010832 <_dtoa_r+0x8c2>
 801081e:	1b1c      	subs	r4, r3, r4
 8010820:	9b03      	ldr	r3, [sp, #12]
 8010822:	2b00      	cmp	r3, #0
 8010824:	f6bf af30 	bge.w	8010688 <_dtoa_r+0x718>
 8010828:	9b00      	ldr	r3, [sp, #0]
 801082a:	9a03      	ldr	r2, [sp, #12]
 801082c:	1a9e      	subs	r6, r3, r2
 801082e:	2300      	movs	r3, #0
 8010830:	e72b      	b.n	801068a <_dtoa_r+0x71a>
 8010832:	9b08      	ldr	r3, [sp, #32]
 8010834:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010836:	9408      	str	r4, [sp, #32]
 8010838:	1ae3      	subs	r3, r4, r3
 801083a:	441a      	add	r2, r3
 801083c:	9e00      	ldr	r6, [sp, #0]
 801083e:	9b03      	ldr	r3, [sp, #12]
 8010840:	920d      	str	r2, [sp, #52]	@ 0x34
 8010842:	2400      	movs	r4, #0
 8010844:	e721      	b.n	801068a <_dtoa_r+0x71a>
 8010846:	9c08      	ldr	r4, [sp, #32]
 8010848:	9e00      	ldr	r6, [sp, #0]
 801084a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801084c:	e728      	b.n	80106a0 <_dtoa_r+0x730>
 801084e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010852:	e751      	b.n	80106f8 <_dtoa_r+0x788>
 8010854:	9a08      	ldr	r2, [sp, #32]
 8010856:	9902      	ldr	r1, [sp, #8]
 8010858:	e750      	b.n	80106fc <_dtoa_r+0x78c>
 801085a:	f8cd 8008 	str.w	r8, [sp, #8]
 801085e:	e751      	b.n	8010704 <_dtoa_r+0x794>
 8010860:	2300      	movs	r3, #0
 8010862:	e779      	b.n	8010758 <_dtoa_r+0x7e8>
 8010864:	9b04      	ldr	r3, [sp, #16]
 8010866:	e777      	b.n	8010758 <_dtoa_r+0x7e8>
 8010868:	2300      	movs	r3, #0
 801086a:	9308      	str	r3, [sp, #32]
 801086c:	e779      	b.n	8010762 <_dtoa_r+0x7f2>
 801086e:	d093      	beq.n	8010798 <_dtoa_r+0x828>
 8010870:	9a00      	ldr	r2, [sp, #0]
 8010872:	331c      	adds	r3, #28
 8010874:	441a      	add	r2, r3
 8010876:	9200      	str	r2, [sp, #0]
 8010878:	9a06      	ldr	r2, [sp, #24]
 801087a:	441a      	add	r2, r3
 801087c:	441e      	add	r6, r3
 801087e:	9206      	str	r2, [sp, #24]
 8010880:	e78a      	b.n	8010798 <_dtoa_r+0x828>
 8010882:	4603      	mov	r3, r0
 8010884:	e7f4      	b.n	8010870 <_dtoa_r+0x900>
 8010886:	9b03      	ldr	r3, [sp, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	46b8      	mov	r8, r7
 801088c:	dc20      	bgt.n	80108d0 <_dtoa_r+0x960>
 801088e:	469b      	mov	fp, r3
 8010890:	9b07      	ldr	r3, [sp, #28]
 8010892:	2b02      	cmp	r3, #2
 8010894:	dd1e      	ble.n	80108d4 <_dtoa_r+0x964>
 8010896:	f1bb 0f00 	cmp.w	fp, #0
 801089a:	f47f adb1 	bne.w	8010400 <_dtoa_r+0x490>
 801089e:	4621      	mov	r1, r4
 80108a0:	465b      	mov	r3, fp
 80108a2:	2205      	movs	r2, #5
 80108a4:	4648      	mov	r0, r9
 80108a6:	f000 f9df 	bl	8010c68 <__multadd>
 80108aa:	4601      	mov	r1, r0
 80108ac:	4604      	mov	r4, r0
 80108ae:	9802      	ldr	r0, [sp, #8]
 80108b0:	f000 fc34 	bl	801111c <__mcmp>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	f77f ada3 	ble.w	8010400 <_dtoa_r+0x490>
 80108ba:	4656      	mov	r6, sl
 80108bc:	2331      	movs	r3, #49	@ 0x31
 80108be:	f806 3b01 	strb.w	r3, [r6], #1
 80108c2:	f108 0801 	add.w	r8, r8, #1
 80108c6:	e59f      	b.n	8010408 <_dtoa_r+0x498>
 80108c8:	9c03      	ldr	r4, [sp, #12]
 80108ca:	46b8      	mov	r8, r7
 80108cc:	4625      	mov	r5, r4
 80108ce:	e7f4      	b.n	80108ba <_dtoa_r+0x94a>
 80108d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80108d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f000 8101 	beq.w	8010ade <_dtoa_r+0xb6e>
 80108dc:	2e00      	cmp	r6, #0
 80108de:	dd05      	ble.n	80108ec <_dtoa_r+0x97c>
 80108e0:	4629      	mov	r1, r5
 80108e2:	4632      	mov	r2, r6
 80108e4:	4648      	mov	r0, r9
 80108e6:	f000 fbad 	bl	8011044 <__lshift>
 80108ea:	4605      	mov	r5, r0
 80108ec:	9b08      	ldr	r3, [sp, #32]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d05c      	beq.n	80109ac <_dtoa_r+0xa3c>
 80108f2:	6869      	ldr	r1, [r5, #4]
 80108f4:	4648      	mov	r0, r9
 80108f6:	f000 f955 	bl	8010ba4 <_Balloc>
 80108fa:	4606      	mov	r6, r0
 80108fc:	b928      	cbnz	r0, 801090a <_dtoa_r+0x99a>
 80108fe:	4b82      	ldr	r3, [pc, #520]	@ (8010b08 <_dtoa_r+0xb98>)
 8010900:	4602      	mov	r2, r0
 8010902:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010906:	f7ff bb4a 	b.w	800ff9e <_dtoa_r+0x2e>
 801090a:	692a      	ldr	r2, [r5, #16]
 801090c:	3202      	adds	r2, #2
 801090e:	0092      	lsls	r2, r2, #2
 8010910:	f105 010c 	add.w	r1, r5, #12
 8010914:	300c      	adds	r0, #12
 8010916:	f7ff fa8e 	bl	800fe36 <memcpy>
 801091a:	2201      	movs	r2, #1
 801091c:	4631      	mov	r1, r6
 801091e:	4648      	mov	r0, r9
 8010920:	f000 fb90 	bl	8011044 <__lshift>
 8010924:	f10a 0301 	add.w	r3, sl, #1
 8010928:	9300      	str	r3, [sp, #0]
 801092a:	eb0a 030b 	add.w	r3, sl, fp
 801092e:	9308      	str	r3, [sp, #32]
 8010930:	9b04      	ldr	r3, [sp, #16]
 8010932:	f003 0301 	and.w	r3, r3, #1
 8010936:	462f      	mov	r7, r5
 8010938:	9306      	str	r3, [sp, #24]
 801093a:	4605      	mov	r5, r0
 801093c:	9b00      	ldr	r3, [sp, #0]
 801093e:	9802      	ldr	r0, [sp, #8]
 8010940:	4621      	mov	r1, r4
 8010942:	f103 3bff 	add.w	fp, r3, #4294967295
 8010946:	f7ff fa8b 	bl	800fe60 <quorem>
 801094a:	4603      	mov	r3, r0
 801094c:	3330      	adds	r3, #48	@ 0x30
 801094e:	9003      	str	r0, [sp, #12]
 8010950:	4639      	mov	r1, r7
 8010952:	9802      	ldr	r0, [sp, #8]
 8010954:	9309      	str	r3, [sp, #36]	@ 0x24
 8010956:	f000 fbe1 	bl	801111c <__mcmp>
 801095a:	462a      	mov	r2, r5
 801095c:	9004      	str	r0, [sp, #16]
 801095e:	4621      	mov	r1, r4
 8010960:	4648      	mov	r0, r9
 8010962:	f000 fbf7 	bl	8011154 <__mdiff>
 8010966:	68c2      	ldr	r2, [r0, #12]
 8010968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801096a:	4606      	mov	r6, r0
 801096c:	bb02      	cbnz	r2, 80109b0 <_dtoa_r+0xa40>
 801096e:	4601      	mov	r1, r0
 8010970:	9802      	ldr	r0, [sp, #8]
 8010972:	f000 fbd3 	bl	801111c <__mcmp>
 8010976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010978:	4602      	mov	r2, r0
 801097a:	4631      	mov	r1, r6
 801097c:	4648      	mov	r0, r9
 801097e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010980:	9309      	str	r3, [sp, #36]	@ 0x24
 8010982:	f000 f94f 	bl	8010c24 <_Bfree>
 8010986:	9b07      	ldr	r3, [sp, #28]
 8010988:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801098a:	9e00      	ldr	r6, [sp, #0]
 801098c:	ea42 0103 	orr.w	r1, r2, r3
 8010990:	9b06      	ldr	r3, [sp, #24]
 8010992:	4319      	orrs	r1, r3
 8010994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010996:	d10d      	bne.n	80109b4 <_dtoa_r+0xa44>
 8010998:	2b39      	cmp	r3, #57	@ 0x39
 801099a:	d027      	beq.n	80109ec <_dtoa_r+0xa7c>
 801099c:	9a04      	ldr	r2, [sp, #16]
 801099e:	2a00      	cmp	r2, #0
 80109a0:	dd01      	ble.n	80109a6 <_dtoa_r+0xa36>
 80109a2:	9b03      	ldr	r3, [sp, #12]
 80109a4:	3331      	adds	r3, #49	@ 0x31
 80109a6:	f88b 3000 	strb.w	r3, [fp]
 80109aa:	e52e      	b.n	801040a <_dtoa_r+0x49a>
 80109ac:	4628      	mov	r0, r5
 80109ae:	e7b9      	b.n	8010924 <_dtoa_r+0x9b4>
 80109b0:	2201      	movs	r2, #1
 80109b2:	e7e2      	b.n	801097a <_dtoa_r+0xa0a>
 80109b4:	9904      	ldr	r1, [sp, #16]
 80109b6:	2900      	cmp	r1, #0
 80109b8:	db04      	blt.n	80109c4 <_dtoa_r+0xa54>
 80109ba:	9807      	ldr	r0, [sp, #28]
 80109bc:	4301      	orrs	r1, r0
 80109be:	9806      	ldr	r0, [sp, #24]
 80109c0:	4301      	orrs	r1, r0
 80109c2:	d120      	bne.n	8010a06 <_dtoa_r+0xa96>
 80109c4:	2a00      	cmp	r2, #0
 80109c6:	ddee      	ble.n	80109a6 <_dtoa_r+0xa36>
 80109c8:	9902      	ldr	r1, [sp, #8]
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	2201      	movs	r2, #1
 80109ce:	4648      	mov	r0, r9
 80109d0:	f000 fb38 	bl	8011044 <__lshift>
 80109d4:	4621      	mov	r1, r4
 80109d6:	9002      	str	r0, [sp, #8]
 80109d8:	f000 fba0 	bl	801111c <__mcmp>
 80109dc:	2800      	cmp	r0, #0
 80109de:	9b00      	ldr	r3, [sp, #0]
 80109e0:	dc02      	bgt.n	80109e8 <_dtoa_r+0xa78>
 80109e2:	d1e0      	bne.n	80109a6 <_dtoa_r+0xa36>
 80109e4:	07da      	lsls	r2, r3, #31
 80109e6:	d5de      	bpl.n	80109a6 <_dtoa_r+0xa36>
 80109e8:	2b39      	cmp	r3, #57	@ 0x39
 80109ea:	d1da      	bne.n	80109a2 <_dtoa_r+0xa32>
 80109ec:	2339      	movs	r3, #57	@ 0x39
 80109ee:	f88b 3000 	strb.w	r3, [fp]
 80109f2:	4633      	mov	r3, r6
 80109f4:	461e      	mov	r6, r3
 80109f6:	3b01      	subs	r3, #1
 80109f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80109fc:	2a39      	cmp	r2, #57	@ 0x39
 80109fe:	d04e      	beq.n	8010a9e <_dtoa_r+0xb2e>
 8010a00:	3201      	adds	r2, #1
 8010a02:	701a      	strb	r2, [r3, #0]
 8010a04:	e501      	b.n	801040a <_dtoa_r+0x49a>
 8010a06:	2a00      	cmp	r2, #0
 8010a08:	dd03      	ble.n	8010a12 <_dtoa_r+0xaa2>
 8010a0a:	2b39      	cmp	r3, #57	@ 0x39
 8010a0c:	d0ee      	beq.n	80109ec <_dtoa_r+0xa7c>
 8010a0e:	3301      	adds	r3, #1
 8010a10:	e7c9      	b.n	80109a6 <_dtoa_r+0xa36>
 8010a12:	9a00      	ldr	r2, [sp, #0]
 8010a14:	9908      	ldr	r1, [sp, #32]
 8010a16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010a1a:	428a      	cmp	r2, r1
 8010a1c:	d028      	beq.n	8010a70 <_dtoa_r+0xb00>
 8010a1e:	9902      	ldr	r1, [sp, #8]
 8010a20:	2300      	movs	r3, #0
 8010a22:	220a      	movs	r2, #10
 8010a24:	4648      	mov	r0, r9
 8010a26:	f000 f91f 	bl	8010c68 <__multadd>
 8010a2a:	42af      	cmp	r7, r5
 8010a2c:	9002      	str	r0, [sp, #8]
 8010a2e:	f04f 0300 	mov.w	r3, #0
 8010a32:	f04f 020a 	mov.w	r2, #10
 8010a36:	4639      	mov	r1, r7
 8010a38:	4648      	mov	r0, r9
 8010a3a:	d107      	bne.n	8010a4c <_dtoa_r+0xadc>
 8010a3c:	f000 f914 	bl	8010c68 <__multadd>
 8010a40:	4607      	mov	r7, r0
 8010a42:	4605      	mov	r5, r0
 8010a44:	9b00      	ldr	r3, [sp, #0]
 8010a46:	3301      	adds	r3, #1
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	e777      	b.n	801093c <_dtoa_r+0x9cc>
 8010a4c:	f000 f90c 	bl	8010c68 <__multadd>
 8010a50:	4629      	mov	r1, r5
 8010a52:	4607      	mov	r7, r0
 8010a54:	2300      	movs	r3, #0
 8010a56:	220a      	movs	r2, #10
 8010a58:	4648      	mov	r0, r9
 8010a5a:	f000 f905 	bl	8010c68 <__multadd>
 8010a5e:	4605      	mov	r5, r0
 8010a60:	e7f0      	b.n	8010a44 <_dtoa_r+0xad4>
 8010a62:	f1bb 0f00 	cmp.w	fp, #0
 8010a66:	bfcc      	ite	gt
 8010a68:	465e      	movgt	r6, fp
 8010a6a:	2601      	movle	r6, #1
 8010a6c:	4456      	add	r6, sl
 8010a6e:	2700      	movs	r7, #0
 8010a70:	9902      	ldr	r1, [sp, #8]
 8010a72:	9300      	str	r3, [sp, #0]
 8010a74:	2201      	movs	r2, #1
 8010a76:	4648      	mov	r0, r9
 8010a78:	f000 fae4 	bl	8011044 <__lshift>
 8010a7c:	4621      	mov	r1, r4
 8010a7e:	9002      	str	r0, [sp, #8]
 8010a80:	f000 fb4c 	bl	801111c <__mcmp>
 8010a84:	2800      	cmp	r0, #0
 8010a86:	dcb4      	bgt.n	80109f2 <_dtoa_r+0xa82>
 8010a88:	d102      	bne.n	8010a90 <_dtoa_r+0xb20>
 8010a8a:	9b00      	ldr	r3, [sp, #0]
 8010a8c:	07db      	lsls	r3, r3, #31
 8010a8e:	d4b0      	bmi.n	80109f2 <_dtoa_r+0xa82>
 8010a90:	4633      	mov	r3, r6
 8010a92:	461e      	mov	r6, r3
 8010a94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a98:	2a30      	cmp	r2, #48	@ 0x30
 8010a9a:	d0fa      	beq.n	8010a92 <_dtoa_r+0xb22>
 8010a9c:	e4b5      	b.n	801040a <_dtoa_r+0x49a>
 8010a9e:	459a      	cmp	sl, r3
 8010aa0:	d1a8      	bne.n	80109f4 <_dtoa_r+0xa84>
 8010aa2:	2331      	movs	r3, #49	@ 0x31
 8010aa4:	f108 0801 	add.w	r8, r8, #1
 8010aa8:	f88a 3000 	strb.w	r3, [sl]
 8010aac:	e4ad      	b.n	801040a <_dtoa_r+0x49a>
 8010aae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ab0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010b0c <_dtoa_r+0xb9c>
 8010ab4:	b11b      	cbz	r3, 8010abe <_dtoa_r+0xb4e>
 8010ab6:	f10a 0308 	add.w	r3, sl, #8
 8010aba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010abc:	6013      	str	r3, [r2, #0]
 8010abe:	4650      	mov	r0, sl
 8010ac0:	b017      	add	sp, #92	@ 0x5c
 8010ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac6:	9b07      	ldr	r3, [sp, #28]
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	f77f ae2e 	ble.w	801072a <_dtoa_r+0x7ba>
 8010ace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ad0:	9308      	str	r3, [sp, #32]
 8010ad2:	2001      	movs	r0, #1
 8010ad4:	e64d      	b.n	8010772 <_dtoa_r+0x802>
 8010ad6:	f1bb 0f00 	cmp.w	fp, #0
 8010ada:	f77f aed9 	ble.w	8010890 <_dtoa_r+0x920>
 8010ade:	4656      	mov	r6, sl
 8010ae0:	9802      	ldr	r0, [sp, #8]
 8010ae2:	4621      	mov	r1, r4
 8010ae4:	f7ff f9bc 	bl	800fe60 <quorem>
 8010ae8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010aec:	f806 3b01 	strb.w	r3, [r6], #1
 8010af0:	eba6 020a 	sub.w	r2, r6, sl
 8010af4:	4593      	cmp	fp, r2
 8010af6:	ddb4      	ble.n	8010a62 <_dtoa_r+0xaf2>
 8010af8:	9902      	ldr	r1, [sp, #8]
 8010afa:	2300      	movs	r3, #0
 8010afc:	220a      	movs	r2, #10
 8010afe:	4648      	mov	r0, r9
 8010b00:	f000 f8b2 	bl	8010c68 <__multadd>
 8010b04:	9002      	str	r0, [sp, #8]
 8010b06:	e7eb      	b.n	8010ae0 <_dtoa_r+0xb70>
 8010b08:	0803e13e 	.word	0x0803e13e
 8010b0c:	0803e0c2 	.word	0x0803e0c2

08010b10 <_free_r>:
 8010b10:	b538      	push	{r3, r4, r5, lr}
 8010b12:	4605      	mov	r5, r0
 8010b14:	2900      	cmp	r1, #0
 8010b16:	d041      	beq.n	8010b9c <_free_r+0x8c>
 8010b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b1c:	1f0c      	subs	r4, r1, #4
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	bfb8      	it	lt
 8010b22:	18e4      	addlt	r4, r4, r3
 8010b24:	f7fe f862 	bl	800ebec <__malloc_lock>
 8010b28:	4a1d      	ldr	r2, [pc, #116]	@ (8010ba0 <_free_r+0x90>)
 8010b2a:	6813      	ldr	r3, [r2, #0]
 8010b2c:	b933      	cbnz	r3, 8010b3c <_free_r+0x2c>
 8010b2e:	6063      	str	r3, [r4, #4]
 8010b30:	6014      	str	r4, [r2, #0]
 8010b32:	4628      	mov	r0, r5
 8010b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b38:	f7fe b85e 	b.w	800ebf8 <__malloc_unlock>
 8010b3c:	42a3      	cmp	r3, r4
 8010b3e:	d908      	bls.n	8010b52 <_free_r+0x42>
 8010b40:	6820      	ldr	r0, [r4, #0]
 8010b42:	1821      	adds	r1, r4, r0
 8010b44:	428b      	cmp	r3, r1
 8010b46:	bf01      	itttt	eq
 8010b48:	6819      	ldreq	r1, [r3, #0]
 8010b4a:	685b      	ldreq	r3, [r3, #4]
 8010b4c:	1809      	addeq	r1, r1, r0
 8010b4e:	6021      	streq	r1, [r4, #0]
 8010b50:	e7ed      	b.n	8010b2e <_free_r+0x1e>
 8010b52:	461a      	mov	r2, r3
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	b10b      	cbz	r3, 8010b5c <_free_r+0x4c>
 8010b58:	42a3      	cmp	r3, r4
 8010b5a:	d9fa      	bls.n	8010b52 <_free_r+0x42>
 8010b5c:	6811      	ldr	r1, [r2, #0]
 8010b5e:	1850      	adds	r0, r2, r1
 8010b60:	42a0      	cmp	r0, r4
 8010b62:	d10b      	bne.n	8010b7c <_free_r+0x6c>
 8010b64:	6820      	ldr	r0, [r4, #0]
 8010b66:	4401      	add	r1, r0
 8010b68:	1850      	adds	r0, r2, r1
 8010b6a:	4283      	cmp	r3, r0
 8010b6c:	6011      	str	r1, [r2, #0]
 8010b6e:	d1e0      	bne.n	8010b32 <_free_r+0x22>
 8010b70:	6818      	ldr	r0, [r3, #0]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	6053      	str	r3, [r2, #4]
 8010b76:	4408      	add	r0, r1
 8010b78:	6010      	str	r0, [r2, #0]
 8010b7a:	e7da      	b.n	8010b32 <_free_r+0x22>
 8010b7c:	d902      	bls.n	8010b84 <_free_r+0x74>
 8010b7e:	230c      	movs	r3, #12
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	e7d6      	b.n	8010b32 <_free_r+0x22>
 8010b84:	6820      	ldr	r0, [r4, #0]
 8010b86:	1821      	adds	r1, r4, r0
 8010b88:	428b      	cmp	r3, r1
 8010b8a:	bf04      	itt	eq
 8010b8c:	6819      	ldreq	r1, [r3, #0]
 8010b8e:	685b      	ldreq	r3, [r3, #4]
 8010b90:	6063      	str	r3, [r4, #4]
 8010b92:	bf04      	itt	eq
 8010b94:	1809      	addeq	r1, r1, r0
 8010b96:	6021      	streq	r1, [r4, #0]
 8010b98:	6054      	str	r4, [r2, #4]
 8010b9a:	e7ca      	b.n	8010b32 <_free_r+0x22>
 8010b9c:	bd38      	pop	{r3, r4, r5, pc}
 8010b9e:	bf00      	nop
 8010ba0:	2000124c 	.word	0x2000124c

08010ba4 <_Balloc>:
 8010ba4:	b570      	push	{r4, r5, r6, lr}
 8010ba6:	69c6      	ldr	r6, [r0, #28]
 8010ba8:	4604      	mov	r4, r0
 8010baa:	460d      	mov	r5, r1
 8010bac:	b976      	cbnz	r6, 8010bcc <_Balloc+0x28>
 8010bae:	2010      	movs	r0, #16
 8010bb0:	f7fd ff6a 	bl	800ea88 <malloc>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	61e0      	str	r0, [r4, #28]
 8010bb8:	b920      	cbnz	r0, 8010bc4 <_Balloc+0x20>
 8010bba:	4b18      	ldr	r3, [pc, #96]	@ (8010c1c <_Balloc+0x78>)
 8010bbc:	4818      	ldr	r0, [pc, #96]	@ (8010c20 <_Balloc+0x7c>)
 8010bbe:	216b      	movs	r1, #107	@ 0x6b
 8010bc0:	f001 fcb2 	bl	8012528 <__assert_func>
 8010bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bc8:	6006      	str	r6, [r0, #0]
 8010bca:	60c6      	str	r6, [r0, #12]
 8010bcc:	69e6      	ldr	r6, [r4, #28]
 8010bce:	68f3      	ldr	r3, [r6, #12]
 8010bd0:	b183      	cbz	r3, 8010bf4 <_Balloc+0x50>
 8010bd2:	69e3      	ldr	r3, [r4, #28]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010bda:	b9b8      	cbnz	r0, 8010c0c <_Balloc+0x68>
 8010bdc:	2101      	movs	r1, #1
 8010bde:	fa01 f605 	lsl.w	r6, r1, r5
 8010be2:	1d72      	adds	r2, r6, #5
 8010be4:	0092      	lsls	r2, r2, #2
 8010be6:	4620      	mov	r0, r4
 8010be8:	f001 fcbc 	bl	8012564 <_calloc_r>
 8010bec:	b160      	cbz	r0, 8010c08 <_Balloc+0x64>
 8010bee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bf2:	e00e      	b.n	8010c12 <_Balloc+0x6e>
 8010bf4:	2221      	movs	r2, #33	@ 0x21
 8010bf6:	2104      	movs	r1, #4
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f001 fcb3 	bl	8012564 <_calloc_r>
 8010bfe:	69e3      	ldr	r3, [r4, #28]
 8010c00:	60f0      	str	r0, [r6, #12]
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1e4      	bne.n	8010bd2 <_Balloc+0x2e>
 8010c08:	2000      	movs	r0, #0
 8010c0a:	bd70      	pop	{r4, r5, r6, pc}
 8010c0c:	6802      	ldr	r2, [r0, #0]
 8010c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c12:	2300      	movs	r3, #0
 8010c14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c18:	e7f7      	b.n	8010c0a <_Balloc+0x66>
 8010c1a:	bf00      	nop
 8010c1c:	0803e0cf 	.word	0x0803e0cf
 8010c20:	0803e14f 	.word	0x0803e14f

08010c24 <_Bfree>:
 8010c24:	b570      	push	{r4, r5, r6, lr}
 8010c26:	69c6      	ldr	r6, [r0, #28]
 8010c28:	4605      	mov	r5, r0
 8010c2a:	460c      	mov	r4, r1
 8010c2c:	b976      	cbnz	r6, 8010c4c <_Bfree+0x28>
 8010c2e:	2010      	movs	r0, #16
 8010c30:	f7fd ff2a 	bl	800ea88 <malloc>
 8010c34:	4602      	mov	r2, r0
 8010c36:	61e8      	str	r0, [r5, #28]
 8010c38:	b920      	cbnz	r0, 8010c44 <_Bfree+0x20>
 8010c3a:	4b09      	ldr	r3, [pc, #36]	@ (8010c60 <_Bfree+0x3c>)
 8010c3c:	4809      	ldr	r0, [pc, #36]	@ (8010c64 <_Bfree+0x40>)
 8010c3e:	218f      	movs	r1, #143	@ 0x8f
 8010c40:	f001 fc72 	bl	8012528 <__assert_func>
 8010c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c48:	6006      	str	r6, [r0, #0]
 8010c4a:	60c6      	str	r6, [r0, #12]
 8010c4c:	b13c      	cbz	r4, 8010c5e <_Bfree+0x3a>
 8010c4e:	69eb      	ldr	r3, [r5, #28]
 8010c50:	6862      	ldr	r2, [r4, #4]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c58:	6021      	str	r1, [r4, #0]
 8010c5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c5e:	bd70      	pop	{r4, r5, r6, pc}
 8010c60:	0803e0cf 	.word	0x0803e0cf
 8010c64:	0803e14f 	.word	0x0803e14f

08010c68 <__multadd>:
 8010c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c6c:	690d      	ldr	r5, [r1, #16]
 8010c6e:	4607      	mov	r7, r0
 8010c70:	460c      	mov	r4, r1
 8010c72:	461e      	mov	r6, r3
 8010c74:	f101 0c14 	add.w	ip, r1, #20
 8010c78:	2000      	movs	r0, #0
 8010c7a:	f8dc 3000 	ldr.w	r3, [ip]
 8010c7e:	b299      	uxth	r1, r3
 8010c80:	fb02 6101 	mla	r1, r2, r1, r6
 8010c84:	0c1e      	lsrs	r6, r3, #16
 8010c86:	0c0b      	lsrs	r3, r1, #16
 8010c88:	fb02 3306 	mla	r3, r2, r6, r3
 8010c8c:	b289      	uxth	r1, r1
 8010c8e:	3001      	adds	r0, #1
 8010c90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c94:	4285      	cmp	r5, r0
 8010c96:	f84c 1b04 	str.w	r1, [ip], #4
 8010c9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c9e:	dcec      	bgt.n	8010c7a <__multadd+0x12>
 8010ca0:	b30e      	cbz	r6, 8010ce6 <__multadd+0x7e>
 8010ca2:	68a3      	ldr	r3, [r4, #8]
 8010ca4:	42ab      	cmp	r3, r5
 8010ca6:	dc19      	bgt.n	8010cdc <__multadd+0x74>
 8010ca8:	6861      	ldr	r1, [r4, #4]
 8010caa:	4638      	mov	r0, r7
 8010cac:	3101      	adds	r1, #1
 8010cae:	f7ff ff79 	bl	8010ba4 <_Balloc>
 8010cb2:	4680      	mov	r8, r0
 8010cb4:	b928      	cbnz	r0, 8010cc2 <__multadd+0x5a>
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8010cec <__multadd+0x84>)
 8010cba:	480d      	ldr	r0, [pc, #52]	@ (8010cf0 <__multadd+0x88>)
 8010cbc:	21ba      	movs	r1, #186	@ 0xba
 8010cbe:	f001 fc33 	bl	8012528 <__assert_func>
 8010cc2:	6922      	ldr	r2, [r4, #16]
 8010cc4:	3202      	adds	r2, #2
 8010cc6:	f104 010c 	add.w	r1, r4, #12
 8010cca:	0092      	lsls	r2, r2, #2
 8010ccc:	300c      	adds	r0, #12
 8010cce:	f7ff f8b2 	bl	800fe36 <memcpy>
 8010cd2:	4621      	mov	r1, r4
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	f7ff ffa5 	bl	8010c24 <_Bfree>
 8010cda:	4644      	mov	r4, r8
 8010cdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ce0:	3501      	adds	r5, #1
 8010ce2:	615e      	str	r6, [r3, #20]
 8010ce4:	6125      	str	r5, [r4, #16]
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cec:	0803e13e 	.word	0x0803e13e
 8010cf0:	0803e14f 	.word	0x0803e14f

08010cf4 <__s2b>:
 8010cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cf8:	460c      	mov	r4, r1
 8010cfa:	4615      	mov	r5, r2
 8010cfc:	461f      	mov	r7, r3
 8010cfe:	2209      	movs	r2, #9
 8010d00:	3308      	adds	r3, #8
 8010d02:	4606      	mov	r6, r0
 8010d04:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d08:	2100      	movs	r1, #0
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	db09      	blt.n	8010d24 <__s2b+0x30>
 8010d10:	4630      	mov	r0, r6
 8010d12:	f7ff ff47 	bl	8010ba4 <_Balloc>
 8010d16:	b940      	cbnz	r0, 8010d2a <__s2b+0x36>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	4b19      	ldr	r3, [pc, #100]	@ (8010d80 <__s2b+0x8c>)
 8010d1c:	4819      	ldr	r0, [pc, #100]	@ (8010d84 <__s2b+0x90>)
 8010d1e:	21d3      	movs	r1, #211	@ 0xd3
 8010d20:	f001 fc02 	bl	8012528 <__assert_func>
 8010d24:	0052      	lsls	r2, r2, #1
 8010d26:	3101      	adds	r1, #1
 8010d28:	e7f0      	b.n	8010d0c <__s2b+0x18>
 8010d2a:	9b08      	ldr	r3, [sp, #32]
 8010d2c:	6143      	str	r3, [r0, #20]
 8010d2e:	2d09      	cmp	r5, #9
 8010d30:	f04f 0301 	mov.w	r3, #1
 8010d34:	6103      	str	r3, [r0, #16]
 8010d36:	dd16      	ble.n	8010d66 <__s2b+0x72>
 8010d38:	f104 0909 	add.w	r9, r4, #9
 8010d3c:	46c8      	mov	r8, r9
 8010d3e:	442c      	add	r4, r5
 8010d40:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010d44:	4601      	mov	r1, r0
 8010d46:	3b30      	subs	r3, #48	@ 0x30
 8010d48:	220a      	movs	r2, #10
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f7ff ff8c 	bl	8010c68 <__multadd>
 8010d50:	45a0      	cmp	r8, r4
 8010d52:	d1f5      	bne.n	8010d40 <__s2b+0x4c>
 8010d54:	f1a5 0408 	sub.w	r4, r5, #8
 8010d58:	444c      	add	r4, r9
 8010d5a:	1b2d      	subs	r5, r5, r4
 8010d5c:	1963      	adds	r3, r4, r5
 8010d5e:	42bb      	cmp	r3, r7
 8010d60:	db04      	blt.n	8010d6c <__s2b+0x78>
 8010d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d66:	340a      	adds	r4, #10
 8010d68:	2509      	movs	r5, #9
 8010d6a:	e7f6      	b.n	8010d5a <__s2b+0x66>
 8010d6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d70:	4601      	mov	r1, r0
 8010d72:	3b30      	subs	r3, #48	@ 0x30
 8010d74:	220a      	movs	r2, #10
 8010d76:	4630      	mov	r0, r6
 8010d78:	f7ff ff76 	bl	8010c68 <__multadd>
 8010d7c:	e7ee      	b.n	8010d5c <__s2b+0x68>
 8010d7e:	bf00      	nop
 8010d80:	0803e13e 	.word	0x0803e13e
 8010d84:	0803e14f 	.word	0x0803e14f

08010d88 <__hi0bits>:
 8010d88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	bf36      	itet	cc
 8010d90:	0403      	lslcc	r3, r0, #16
 8010d92:	2000      	movcs	r0, #0
 8010d94:	2010      	movcc	r0, #16
 8010d96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d9a:	bf3c      	itt	cc
 8010d9c:	021b      	lslcc	r3, r3, #8
 8010d9e:	3008      	addcc	r0, #8
 8010da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010da4:	bf3c      	itt	cc
 8010da6:	011b      	lslcc	r3, r3, #4
 8010da8:	3004      	addcc	r0, #4
 8010daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010dae:	bf3c      	itt	cc
 8010db0:	009b      	lslcc	r3, r3, #2
 8010db2:	3002      	addcc	r0, #2
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	db05      	blt.n	8010dc4 <__hi0bits+0x3c>
 8010db8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010dbc:	f100 0001 	add.w	r0, r0, #1
 8010dc0:	bf08      	it	eq
 8010dc2:	2020      	moveq	r0, #32
 8010dc4:	4770      	bx	lr

08010dc6 <__lo0bits>:
 8010dc6:	6803      	ldr	r3, [r0, #0]
 8010dc8:	4602      	mov	r2, r0
 8010dca:	f013 0007 	ands.w	r0, r3, #7
 8010dce:	d00b      	beq.n	8010de8 <__lo0bits+0x22>
 8010dd0:	07d9      	lsls	r1, r3, #31
 8010dd2:	d421      	bmi.n	8010e18 <__lo0bits+0x52>
 8010dd4:	0798      	lsls	r0, r3, #30
 8010dd6:	bf49      	itett	mi
 8010dd8:	085b      	lsrmi	r3, r3, #1
 8010dda:	089b      	lsrpl	r3, r3, #2
 8010ddc:	2001      	movmi	r0, #1
 8010dde:	6013      	strmi	r3, [r2, #0]
 8010de0:	bf5c      	itt	pl
 8010de2:	6013      	strpl	r3, [r2, #0]
 8010de4:	2002      	movpl	r0, #2
 8010de6:	4770      	bx	lr
 8010de8:	b299      	uxth	r1, r3
 8010dea:	b909      	cbnz	r1, 8010df0 <__lo0bits+0x2a>
 8010dec:	0c1b      	lsrs	r3, r3, #16
 8010dee:	2010      	movs	r0, #16
 8010df0:	b2d9      	uxtb	r1, r3
 8010df2:	b909      	cbnz	r1, 8010df8 <__lo0bits+0x32>
 8010df4:	3008      	adds	r0, #8
 8010df6:	0a1b      	lsrs	r3, r3, #8
 8010df8:	0719      	lsls	r1, r3, #28
 8010dfa:	bf04      	itt	eq
 8010dfc:	091b      	lsreq	r3, r3, #4
 8010dfe:	3004      	addeq	r0, #4
 8010e00:	0799      	lsls	r1, r3, #30
 8010e02:	bf04      	itt	eq
 8010e04:	089b      	lsreq	r3, r3, #2
 8010e06:	3002      	addeq	r0, #2
 8010e08:	07d9      	lsls	r1, r3, #31
 8010e0a:	d403      	bmi.n	8010e14 <__lo0bits+0x4e>
 8010e0c:	085b      	lsrs	r3, r3, #1
 8010e0e:	f100 0001 	add.w	r0, r0, #1
 8010e12:	d003      	beq.n	8010e1c <__lo0bits+0x56>
 8010e14:	6013      	str	r3, [r2, #0]
 8010e16:	4770      	bx	lr
 8010e18:	2000      	movs	r0, #0
 8010e1a:	4770      	bx	lr
 8010e1c:	2020      	movs	r0, #32
 8010e1e:	4770      	bx	lr

08010e20 <__i2b>:
 8010e20:	b510      	push	{r4, lr}
 8010e22:	460c      	mov	r4, r1
 8010e24:	2101      	movs	r1, #1
 8010e26:	f7ff febd 	bl	8010ba4 <_Balloc>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	b928      	cbnz	r0, 8010e3a <__i2b+0x1a>
 8010e2e:	4b05      	ldr	r3, [pc, #20]	@ (8010e44 <__i2b+0x24>)
 8010e30:	4805      	ldr	r0, [pc, #20]	@ (8010e48 <__i2b+0x28>)
 8010e32:	f240 1145 	movw	r1, #325	@ 0x145
 8010e36:	f001 fb77 	bl	8012528 <__assert_func>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	6144      	str	r4, [r0, #20]
 8010e3e:	6103      	str	r3, [r0, #16]
 8010e40:	bd10      	pop	{r4, pc}
 8010e42:	bf00      	nop
 8010e44:	0803e13e 	.word	0x0803e13e
 8010e48:	0803e14f 	.word	0x0803e14f

08010e4c <__multiply>:
 8010e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e50:	4617      	mov	r7, r2
 8010e52:	690a      	ldr	r2, [r1, #16]
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	bfa8      	it	ge
 8010e5a:	463b      	movge	r3, r7
 8010e5c:	4689      	mov	r9, r1
 8010e5e:	bfa4      	itt	ge
 8010e60:	460f      	movge	r7, r1
 8010e62:	4699      	movge	r9, r3
 8010e64:	693d      	ldr	r5, [r7, #16]
 8010e66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	6879      	ldr	r1, [r7, #4]
 8010e6e:	eb05 060a 	add.w	r6, r5, sl
 8010e72:	42b3      	cmp	r3, r6
 8010e74:	b085      	sub	sp, #20
 8010e76:	bfb8      	it	lt
 8010e78:	3101      	addlt	r1, #1
 8010e7a:	f7ff fe93 	bl	8010ba4 <_Balloc>
 8010e7e:	b930      	cbnz	r0, 8010e8e <__multiply+0x42>
 8010e80:	4602      	mov	r2, r0
 8010e82:	4b41      	ldr	r3, [pc, #260]	@ (8010f88 <__multiply+0x13c>)
 8010e84:	4841      	ldr	r0, [pc, #260]	@ (8010f8c <__multiply+0x140>)
 8010e86:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010e8a:	f001 fb4d 	bl	8012528 <__assert_func>
 8010e8e:	f100 0414 	add.w	r4, r0, #20
 8010e92:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010e96:	4623      	mov	r3, r4
 8010e98:	2200      	movs	r2, #0
 8010e9a:	4573      	cmp	r3, lr
 8010e9c:	d320      	bcc.n	8010ee0 <__multiply+0x94>
 8010e9e:	f107 0814 	add.w	r8, r7, #20
 8010ea2:	f109 0114 	add.w	r1, r9, #20
 8010ea6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010eaa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010eae:	9302      	str	r3, [sp, #8]
 8010eb0:	1beb      	subs	r3, r5, r7
 8010eb2:	3b15      	subs	r3, #21
 8010eb4:	f023 0303 	bic.w	r3, r3, #3
 8010eb8:	3304      	adds	r3, #4
 8010eba:	3715      	adds	r7, #21
 8010ebc:	42bd      	cmp	r5, r7
 8010ebe:	bf38      	it	cc
 8010ec0:	2304      	movcc	r3, #4
 8010ec2:	9301      	str	r3, [sp, #4]
 8010ec4:	9b02      	ldr	r3, [sp, #8]
 8010ec6:	9103      	str	r1, [sp, #12]
 8010ec8:	428b      	cmp	r3, r1
 8010eca:	d80c      	bhi.n	8010ee6 <__multiply+0x9a>
 8010ecc:	2e00      	cmp	r6, #0
 8010ece:	dd03      	ble.n	8010ed8 <__multiply+0x8c>
 8010ed0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d055      	beq.n	8010f84 <__multiply+0x138>
 8010ed8:	6106      	str	r6, [r0, #16]
 8010eda:	b005      	add	sp, #20
 8010edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee0:	f843 2b04 	str.w	r2, [r3], #4
 8010ee4:	e7d9      	b.n	8010e9a <__multiply+0x4e>
 8010ee6:	f8b1 a000 	ldrh.w	sl, [r1]
 8010eea:	f1ba 0f00 	cmp.w	sl, #0
 8010eee:	d01f      	beq.n	8010f30 <__multiply+0xe4>
 8010ef0:	46c4      	mov	ip, r8
 8010ef2:	46a1      	mov	r9, r4
 8010ef4:	2700      	movs	r7, #0
 8010ef6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010efa:	f8d9 3000 	ldr.w	r3, [r9]
 8010efe:	fa1f fb82 	uxth.w	fp, r2
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	fb0a 330b 	mla	r3, sl, fp, r3
 8010f08:	443b      	add	r3, r7
 8010f0a:	f8d9 7000 	ldr.w	r7, [r9]
 8010f0e:	0c12      	lsrs	r2, r2, #16
 8010f10:	0c3f      	lsrs	r7, r7, #16
 8010f12:	fb0a 7202 	mla	r2, sl, r2, r7
 8010f16:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f20:	4565      	cmp	r5, ip
 8010f22:	f849 3b04 	str.w	r3, [r9], #4
 8010f26:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010f2a:	d8e4      	bhi.n	8010ef6 <__multiply+0xaa>
 8010f2c:	9b01      	ldr	r3, [sp, #4]
 8010f2e:	50e7      	str	r7, [r4, r3]
 8010f30:	9b03      	ldr	r3, [sp, #12]
 8010f32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010f36:	3104      	adds	r1, #4
 8010f38:	f1b9 0f00 	cmp.w	r9, #0
 8010f3c:	d020      	beq.n	8010f80 <__multiply+0x134>
 8010f3e:	6823      	ldr	r3, [r4, #0]
 8010f40:	4647      	mov	r7, r8
 8010f42:	46a4      	mov	ip, r4
 8010f44:	f04f 0a00 	mov.w	sl, #0
 8010f48:	f8b7 b000 	ldrh.w	fp, [r7]
 8010f4c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010f50:	fb09 220b 	mla	r2, r9, fp, r2
 8010f54:	4452      	add	r2, sl
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f5c:	f84c 3b04 	str.w	r3, [ip], #4
 8010f60:	f857 3b04 	ldr.w	r3, [r7], #4
 8010f64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f68:	f8bc 3000 	ldrh.w	r3, [ip]
 8010f6c:	fb09 330a 	mla	r3, r9, sl, r3
 8010f70:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010f74:	42bd      	cmp	r5, r7
 8010f76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f7a:	d8e5      	bhi.n	8010f48 <__multiply+0xfc>
 8010f7c:	9a01      	ldr	r2, [sp, #4]
 8010f7e:	50a3      	str	r3, [r4, r2]
 8010f80:	3404      	adds	r4, #4
 8010f82:	e79f      	b.n	8010ec4 <__multiply+0x78>
 8010f84:	3e01      	subs	r6, #1
 8010f86:	e7a1      	b.n	8010ecc <__multiply+0x80>
 8010f88:	0803e13e 	.word	0x0803e13e
 8010f8c:	0803e14f 	.word	0x0803e14f

08010f90 <__pow5mult>:
 8010f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f94:	4615      	mov	r5, r2
 8010f96:	f012 0203 	ands.w	r2, r2, #3
 8010f9a:	4607      	mov	r7, r0
 8010f9c:	460e      	mov	r6, r1
 8010f9e:	d007      	beq.n	8010fb0 <__pow5mult+0x20>
 8010fa0:	4c25      	ldr	r4, [pc, #148]	@ (8011038 <__pow5mult+0xa8>)
 8010fa2:	3a01      	subs	r2, #1
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010faa:	f7ff fe5d 	bl	8010c68 <__multadd>
 8010fae:	4606      	mov	r6, r0
 8010fb0:	10ad      	asrs	r5, r5, #2
 8010fb2:	d03d      	beq.n	8011030 <__pow5mult+0xa0>
 8010fb4:	69fc      	ldr	r4, [r7, #28]
 8010fb6:	b97c      	cbnz	r4, 8010fd8 <__pow5mult+0x48>
 8010fb8:	2010      	movs	r0, #16
 8010fba:	f7fd fd65 	bl	800ea88 <malloc>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	61f8      	str	r0, [r7, #28]
 8010fc2:	b928      	cbnz	r0, 8010fd0 <__pow5mult+0x40>
 8010fc4:	4b1d      	ldr	r3, [pc, #116]	@ (801103c <__pow5mult+0xac>)
 8010fc6:	481e      	ldr	r0, [pc, #120]	@ (8011040 <__pow5mult+0xb0>)
 8010fc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010fcc:	f001 faac 	bl	8012528 <__assert_func>
 8010fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fd4:	6004      	str	r4, [r0, #0]
 8010fd6:	60c4      	str	r4, [r0, #12]
 8010fd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fe0:	b94c      	cbnz	r4, 8010ff6 <__pow5mult+0x66>
 8010fe2:	f240 2171 	movw	r1, #625	@ 0x271
 8010fe6:	4638      	mov	r0, r7
 8010fe8:	f7ff ff1a 	bl	8010e20 <__i2b>
 8010fec:	2300      	movs	r3, #0
 8010fee:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	6003      	str	r3, [r0, #0]
 8010ff6:	f04f 0900 	mov.w	r9, #0
 8010ffa:	07eb      	lsls	r3, r5, #31
 8010ffc:	d50a      	bpl.n	8011014 <__pow5mult+0x84>
 8010ffe:	4631      	mov	r1, r6
 8011000:	4622      	mov	r2, r4
 8011002:	4638      	mov	r0, r7
 8011004:	f7ff ff22 	bl	8010e4c <__multiply>
 8011008:	4631      	mov	r1, r6
 801100a:	4680      	mov	r8, r0
 801100c:	4638      	mov	r0, r7
 801100e:	f7ff fe09 	bl	8010c24 <_Bfree>
 8011012:	4646      	mov	r6, r8
 8011014:	106d      	asrs	r5, r5, #1
 8011016:	d00b      	beq.n	8011030 <__pow5mult+0xa0>
 8011018:	6820      	ldr	r0, [r4, #0]
 801101a:	b938      	cbnz	r0, 801102c <__pow5mult+0x9c>
 801101c:	4622      	mov	r2, r4
 801101e:	4621      	mov	r1, r4
 8011020:	4638      	mov	r0, r7
 8011022:	f7ff ff13 	bl	8010e4c <__multiply>
 8011026:	6020      	str	r0, [r4, #0]
 8011028:	f8c0 9000 	str.w	r9, [r0]
 801102c:	4604      	mov	r4, r0
 801102e:	e7e4      	b.n	8010ffa <__pow5mult+0x6a>
 8011030:	4630      	mov	r0, r6
 8011032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011036:	bf00      	nop
 8011038:	0803e260 	.word	0x0803e260
 801103c:	0803e0cf 	.word	0x0803e0cf
 8011040:	0803e14f 	.word	0x0803e14f

08011044 <__lshift>:
 8011044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011048:	460c      	mov	r4, r1
 801104a:	6849      	ldr	r1, [r1, #4]
 801104c:	6923      	ldr	r3, [r4, #16]
 801104e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011052:	68a3      	ldr	r3, [r4, #8]
 8011054:	4607      	mov	r7, r0
 8011056:	4691      	mov	r9, r2
 8011058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801105c:	f108 0601 	add.w	r6, r8, #1
 8011060:	42b3      	cmp	r3, r6
 8011062:	db0b      	blt.n	801107c <__lshift+0x38>
 8011064:	4638      	mov	r0, r7
 8011066:	f7ff fd9d 	bl	8010ba4 <_Balloc>
 801106a:	4605      	mov	r5, r0
 801106c:	b948      	cbnz	r0, 8011082 <__lshift+0x3e>
 801106e:	4602      	mov	r2, r0
 8011070:	4b28      	ldr	r3, [pc, #160]	@ (8011114 <__lshift+0xd0>)
 8011072:	4829      	ldr	r0, [pc, #164]	@ (8011118 <__lshift+0xd4>)
 8011074:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011078:	f001 fa56 	bl	8012528 <__assert_func>
 801107c:	3101      	adds	r1, #1
 801107e:	005b      	lsls	r3, r3, #1
 8011080:	e7ee      	b.n	8011060 <__lshift+0x1c>
 8011082:	2300      	movs	r3, #0
 8011084:	f100 0114 	add.w	r1, r0, #20
 8011088:	f100 0210 	add.w	r2, r0, #16
 801108c:	4618      	mov	r0, r3
 801108e:	4553      	cmp	r3, sl
 8011090:	db33      	blt.n	80110fa <__lshift+0xb6>
 8011092:	6920      	ldr	r0, [r4, #16]
 8011094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011098:	f104 0314 	add.w	r3, r4, #20
 801109c:	f019 091f 	ands.w	r9, r9, #31
 80110a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110a8:	d02b      	beq.n	8011102 <__lshift+0xbe>
 80110aa:	f1c9 0e20 	rsb	lr, r9, #32
 80110ae:	468a      	mov	sl, r1
 80110b0:	2200      	movs	r2, #0
 80110b2:	6818      	ldr	r0, [r3, #0]
 80110b4:	fa00 f009 	lsl.w	r0, r0, r9
 80110b8:	4310      	orrs	r0, r2
 80110ba:	f84a 0b04 	str.w	r0, [sl], #4
 80110be:	f853 2b04 	ldr.w	r2, [r3], #4
 80110c2:	459c      	cmp	ip, r3
 80110c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80110c8:	d8f3      	bhi.n	80110b2 <__lshift+0x6e>
 80110ca:	ebac 0304 	sub.w	r3, ip, r4
 80110ce:	3b15      	subs	r3, #21
 80110d0:	f023 0303 	bic.w	r3, r3, #3
 80110d4:	3304      	adds	r3, #4
 80110d6:	f104 0015 	add.w	r0, r4, #21
 80110da:	4560      	cmp	r0, ip
 80110dc:	bf88      	it	hi
 80110de:	2304      	movhi	r3, #4
 80110e0:	50ca      	str	r2, [r1, r3]
 80110e2:	b10a      	cbz	r2, 80110e8 <__lshift+0xa4>
 80110e4:	f108 0602 	add.w	r6, r8, #2
 80110e8:	3e01      	subs	r6, #1
 80110ea:	4638      	mov	r0, r7
 80110ec:	612e      	str	r6, [r5, #16]
 80110ee:	4621      	mov	r1, r4
 80110f0:	f7ff fd98 	bl	8010c24 <_Bfree>
 80110f4:	4628      	mov	r0, r5
 80110f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80110fe:	3301      	adds	r3, #1
 8011100:	e7c5      	b.n	801108e <__lshift+0x4a>
 8011102:	3904      	subs	r1, #4
 8011104:	f853 2b04 	ldr.w	r2, [r3], #4
 8011108:	f841 2f04 	str.w	r2, [r1, #4]!
 801110c:	459c      	cmp	ip, r3
 801110e:	d8f9      	bhi.n	8011104 <__lshift+0xc0>
 8011110:	e7ea      	b.n	80110e8 <__lshift+0xa4>
 8011112:	bf00      	nop
 8011114:	0803e13e 	.word	0x0803e13e
 8011118:	0803e14f 	.word	0x0803e14f

0801111c <__mcmp>:
 801111c:	690a      	ldr	r2, [r1, #16]
 801111e:	4603      	mov	r3, r0
 8011120:	6900      	ldr	r0, [r0, #16]
 8011122:	1a80      	subs	r0, r0, r2
 8011124:	b530      	push	{r4, r5, lr}
 8011126:	d10e      	bne.n	8011146 <__mcmp+0x2a>
 8011128:	3314      	adds	r3, #20
 801112a:	3114      	adds	r1, #20
 801112c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011130:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011134:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011138:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801113c:	4295      	cmp	r5, r2
 801113e:	d003      	beq.n	8011148 <__mcmp+0x2c>
 8011140:	d205      	bcs.n	801114e <__mcmp+0x32>
 8011142:	f04f 30ff 	mov.w	r0, #4294967295
 8011146:	bd30      	pop	{r4, r5, pc}
 8011148:	42a3      	cmp	r3, r4
 801114a:	d3f3      	bcc.n	8011134 <__mcmp+0x18>
 801114c:	e7fb      	b.n	8011146 <__mcmp+0x2a>
 801114e:	2001      	movs	r0, #1
 8011150:	e7f9      	b.n	8011146 <__mcmp+0x2a>
	...

08011154 <__mdiff>:
 8011154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011158:	4689      	mov	r9, r1
 801115a:	4606      	mov	r6, r0
 801115c:	4611      	mov	r1, r2
 801115e:	4648      	mov	r0, r9
 8011160:	4614      	mov	r4, r2
 8011162:	f7ff ffdb 	bl	801111c <__mcmp>
 8011166:	1e05      	subs	r5, r0, #0
 8011168:	d112      	bne.n	8011190 <__mdiff+0x3c>
 801116a:	4629      	mov	r1, r5
 801116c:	4630      	mov	r0, r6
 801116e:	f7ff fd19 	bl	8010ba4 <_Balloc>
 8011172:	4602      	mov	r2, r0
 8011174:	b928      	cbnz	r0, 8011182 <__mdiff+0x2e>
 8011176:	4b3f      	ldr	r3, [pc, #252]	@ (8011274 <__mdiff+0x120>)
 8011178:	f240 2137 	movw	r1, #567	@ 0x237
 801117c:	483e      	ldr	r0, [pc, #248]	@ (8011278 <__mdiff+0x124>)
 801117e:	f001 f9d3 	bl	8012528 <__assert_func>
 8011182:	2301      	movs	r3, #1
 8011184:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011188:	4610      	mov	r0, r2
 801118a:	b003      	add	sp, #12
 801118c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011190:	bfbc      	itt	lt
 8011192:	464b      	movlt	r3, r9
 8011194:	46a1      	movlt	r9, r4
 8011196:	4630      	mov	r0, r6
 8011198:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801119c:	bfba      	itte	lt
 801119e:	461c      	movlt	r4, r3
 80111a0:	2501      	movlt	r5, #1
 80111a2:	2500      	movge	r5, #0
 80111a4:	f7ff fcfe 	bl	8010ba4 <_Balloc>
 80111a8:	4602      	mov	r2, r0
 80111aa:	b918      	cbnz	r0, 80111b4 <__mdiff+0x60>
 80111ac:	4b31      	ldr	r3, [pc, #196]	@ (8011274 <__mdiff+0x120>)
 80111ae:	f240 2145 	movw	r1, #581	@ 0x245
 80111b2:	e7e3      	b.n	801117c <__mdiff+0x28>
 80111b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80111b8:	6926      	ldr	r6, [r4, #16]
 80111ba:	60c5      	str	r5, [r0, #12]
 80111bc:	f109 0310 	add.w	r3, r9, #16
 80111c0:	f109 0514 	add.w	r5, r9, #20
 80111c4:	f104 0e14 	add.w	lr, r4, #20
 80111c8:	f100 0b14 	add.w	fp, r0, #20
 80111cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80111d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80111d4:	9301      	str	r3, [sp, #4]
 80111d6:	46d9      	mov	r9, fp
 80111d8:	f04f 0c00 	mov.w	ip, #0
 80111dc:	9b01      	ldr	r3, [sp, #4]
 80111de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80111e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80111e6:	9301      	str	r3, [sp, #4]
 80111e8:	fa1f f38a 	uxth.w	r3, sl
 80111ec:	4619      	mov	r1, r3
 80111ee:	b283      	uxth	r3, r0
 80111f0:	1acb      	subs	r3, r1, r3
 80111f2:	0c00      	lsrs	r0, r0, #16
 80111f4:	4463      	add	r3, ip
 80111f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80111fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80111fe:	b29b      	uxth	r3, r3
 8011200:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011204:	4576      	cmp	r6, lr
 8011206:	f849 3b04 	str.w	r3, [r9], #4
 801120a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801120e:	d8e5      	bhi.n	80111dc <__mdiff+0x88>
 8011210:	1b33      	subs	r3, r6, r4
 8011212:	3b15      	subs	r3, #21
 8011214:	f023 0303 	bic.w	r3, r3, #3
 8011218:	3415      	adds	r4, #21
 801121a:	3304      	adds	r3, #4
 801121c:	42a6      	cmp	r6, r4
 801121e:	bf38      	it	cc
 8011220:	2304      	movcc	r3, #4
 8011222:	441d      	add	r5, r3
 8011224:	445b      	add	r3, fp
 8011226:	461e      	mov	r6, r3
 8011228:	462c      	mov	r4, r5
 801122a:	4544      	cmp	r4, r8
 801122c:	d30e      	bcc.n	801124c <__mdiff+0xf8>
 801122e:	f108 0103 	add.w	r1, r8, #3
 8011232:	1b49      	subs	r1, r1, r5
 8011234:	f021 0103 	bic.w	r1, r1, #3
 8011238:	3d03      	subs	r5, #3
 801123a:	45a8      	cmp	r8, r5
 801123c:	bf38      	it	cc
 801123e:	2100      	movcc	r1, #0
 8011240:	440b      	add	r3, r1
 8011242:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011246:	b191      	cbz	r1, 801126e <__mdiff+0x11a>
 8011248:	6117      	str	r7, [r2, #16]
 801124a:	e79d      	b.n	8011188 <__mdiff+0x34>
 801124c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011250:	46e6      	mov	lr, ip
 8011252:	0c08      	lsrs	r0, r1, #16
 8011254:	fa1c fc81 	uxtah	ip, ip, r1
 8011258:	4471      	add	r1, lr
 801125a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801125e:	b289      	uxth	r1, r1
 8011260:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011264:	f846 1b04 	str.w	r1, [r6], #4
 8011268:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801126c:	e7dd      	b.n	801122a <__mdiff+0xd6>
 801126e:	3f01      	subs	r7, #1
 8011270:	e7e7      	b.n	8011242 <__mdiff+0xee>
 8011272:	bf00      	nop
 8011274:	0803e13e 	.word	0x0803e13e
 8011278:	0803e14f 	.word	0x0803e14f

0801127c <__ulp>:
 801127c:	b082      	sub	sp, #8
 801127e:	ed8d 0b00 	vstr	d0, [sp]
 8011282:	9a01      	ldr	r2, [sp, #4]
 8011284:	4b0f      	ldr	r3, [pc, #60]	@ (80112c4 <__ulp+0x48>)
 8011286:	4013      	ands	r3, r2
 8011288:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801128c:	2b00      	cmp	r3, #0
 801128e:	dc08      	bgt.n	80112a2 <__ulp+0x26>
 8011290:	425b      	negs	r3, r3
 8011292:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011296:	ea4f 5223 	mov.w	r2, r3, asr #20
 801129a:	da04      	bge.n	80112a6 <__ulp+0x2a>
 801129c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80112a0:	4113      	asrs	r3, r2
 80112a2:	2200      	movs	r2, #0
 80112a4:	e008      	b.n	80112b8 <__ulp+0x3c>
 80112a6:	f1a2 0314 	sub.w	r3, r2, #20
 80112aa:	2b1e      	cmp	r3, #30
 80112ac:	bfda      	itte	le
 80112ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80112b2:	40da      	lsrle	r2, r3
 80112b4:	2201      	movgt	r2, #1
 80112b6:	2300      	movs	r3, #0
 80112b8:	4619      	mov	r1, r3
 80112ba:	4610      	mov	r0, r2
 80112bc:	ec41 0b10 	vmov	d0, r0, r1
 80112c0:	b002      	add	sp, #8
 80112c2:	4770      	bx	lr
 80112c4:	7ff00000 	.word	0x7ff00000

080112c8 <__b2d>:
 80112c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112cc:	6906      	ldr	r6, [r0, #16]
 80112ce:	f100 0814 	add.w	r8, r0, #20
 80112d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80112d6:	1f37      	subs	r7, r6, #4
 80112d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80112dc:	4610      	mov	r0, r2
 80112de:	f7ff fd53 	bl	8010d88 <__hi0bits>
 80112e2:	f1c0 0320 	rsb	r3, r0, #32
 80112e6:	280a      	cmp	r0, #10
 80112e8:	600b      	str	r3, [r1, #0]
 80112ea:	491b      	ldr	r1, [pc, #108]	@ (8011358 <__b2d+0x90>)
 80112ec:	dc15      	bgt.n	801131a <__b2d+0x52>
 80112ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80112f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80112f6:	45b8      	cmp	r8, r7
 80112f8:	ea43 0501 	orr.w	r5, r3, r1
 80112fc:	bf34      	ite	cc
 80112fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011302:	2300      	movcs	r3, #0
 8011304:	3015      	adds	r0, #21
 8011306:	fa02 f000 	lsl.w	r0, r2, r0
 801130a:	fa23 f30c 	lsr.w	r3, r3, ip
 801130e:	4303      	orrs	r3, r0
 8011310:	461c      	mov	r4, r3
 8011312:	ec45 4b10 	vmov	d0, r4, r5
 8011316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801131a:	45b8      	cmp	r8, r7
 801131c:	bf3a      	itte	cc
 801131e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011322:	f1a6 0708 	subcc.w	r7, r6, #8
 8011326:	2300      	movcs	r3, #0
 8011328:	380b      	subs	r0, #11
 801132a:	d012      	beq.n	8011352 <__b2d+0x8a>
 801132c:	f1c0 0120 	rsb	r1, r0, #32
 8011330:	fa23 f401 	lsr.w	r4, r3, r1
 8011334:	4082      	lsls	r2, r0
 8011336:	4322      	orrs	r2, r4
 8011338:	4547      	cmp	r7, r8
 801133a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801133e:	bf8c      	ite	hi
 8011340:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011344:	2200      	movls	r2, #0
 8011346:	4083      	lsls	r3, r0
 8011348:	40ca      	lsrs	r2, r1
 801134a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801134e:	4313      	orrs	r3, r2
 8011350:	e7de      	b.n	8011310 <__b2d+0x48>
 8011352:	ea42 0501 	orr.w	r5, r2, r1
 8011356:	e7db      	b.n	8011310 <__b2d+0x48>
 8011358:	3ff00000 	.word	0x3ff00000

0801135c <__d2b>:
 801135c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011360:	460f      	mov	r7, r1
 8011362:	2101      	movs	r1, #1
 8011364:	ec59 8b10 	vmov	r8, r9, d0
 8011368:	4616      	mov	r6, r2
 801136a:	f7ff fc1b 	bl	8010ba4 <_Balloc>
 801136e:	4604      	mov	r4, r0
 8011370:	b930      	cbnz	r0, 8011380 <__d2b+0x24>
 8011372:	4602      	mov	r2, r0
 8011374:	4b23      	ldr	r3, [pc, #140]	@ (8011404 <__d2b+0xa8>)
 8011376:	4824      	ldr	r0, [pc, #144]	@ (8011408 <__d2b+0xac>)
 8011378:	f240 310f 	movw	r1, #783	@ 0x30f
 801137c:	f001 f8d4 	bl	8012528 <__assert_func>
 8011380:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011388:	b10d      	cbz	r5, 801138e <__d2b+0x32>
 801138a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	f1b8 0300 	subs.w	r3, r8, #0
 8011394:	d023      	beq.n	80113de <__d2b+0x82>
 8011396:	4668      	mov	r0, sp
 8011398:	9300      	str	r3, [sp, #0]
 801139a:	f7ff fd14 	bl	8010dc6 <__lo0bits>
 801139e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80113a2:	b1d0      	cbz	r0, 80113da <__d2b+0x7e>
 80113a4:	f1c0 0320 	rsb	r3, r0, #32
 80113a8:	fa02 f303 	lsl.w	r3, r2, r3
 80113ac:	430b      	orrs	r3, r1
 80113ae:	40c2      	lsrs	r2, r0
 80113b0:	6163      	str	r3, [r4, #20]
 80113b2:	9201      	str	r2, [sp, #4]
 80113b4:	9b01      	ldr	r3, [sp, #4]
 80113b6:	61a3      	str	r3, [r4, #24]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	bf0c      	ite	eq
 80113bc:	2201      	moveq	r2, #1
 80113be:	2202      	movne	r2, #2
 80113c0:	6122      	str	r2, [r4, #16]
 80113c2:	b1a5      	cbz	r5, 80113ee <__d2b+0x92>
 80113c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80113c8:	4405      	add	r5, r0
 80113ca:	603d      	str	r5, [r7, #0]
 80113cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80113d0:	6030      	str	r0, [r6, #0]
 80113d2:	4620      	mov	r0, r4
 80113d4:	b003      	add	sp, #12
 80113d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113da:	6161      	str	r1, [r4, #20]
 80113dc:	e7ea      	b.n	80113b4 <__d2b+0x58>
 80113de:	a801      	add	r0, sp, #4
 80113e0:	f7ff fcf1 	bl	8010dc6 <__lo0bits>
 80113e4:	9b01      	ldr	r3, [sp, #4]
 80113e6:	6163      	str	r3, [r4, #20]
 80113e8:	3020      	adds	r0, #32
 80113ea:	2201      	movs	r2, #1
 80113ec:	e7e8      	b.n	80113c0 <__d2b+0x64>
 80113ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80113f6:	6038      	str	r0, [r7, #0]
 80113f8:	6918      	ldr	r0, [r3, #16]
 80113fa:	f7ff fcc5 	bl	8010d88 <__hi0bits>
 80113fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011402:	e7e5      	b.n	80113d0 <__d2b+0x74>
 8011404:	0803e13e 	.word	0x0803e13e
 8011408:	0803e14f 	.word	0x0803e14f

0801140c <__ratio>:
 801140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011410:	b085      	sub	sp, #20
 8011412:	e9cd 1000 	strd	r1, r0, [sp]
 8011416:	a902      	add	r1, sp, #8
 8011418:	f7ff ff56 	bl	80112c8 <__b2d>
 801141c:	9800      	ldr	r0, [sp, #0]
 801141e:	a903      	add	r1, sp, #12
 8011420:	ec55 4b10 	vmov	r4, r5, d0
 8011424:	f7ff ff50 	bl	80112c8 <__b2d>
 8011428:	9b01      	ldr	r3, [sp, #4]
 801142a:	6919      	ldr	r1, [r3, #16]
 801142c:	9b00      	ldr	r3, [sp, #0]
 801142e:	691b      	ldr	r3, [r3, #16]
 8011430:	1ac9      	subs	r1, r1, r3
 8011432:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011436:	1a9b      	subs	r3, r3, r2
 8011438:	ec5b ab10 	vmov	sl, fp, d0
 801143c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011440:	2b00      	cmp	r3, #0
 8011442:	bfce      	itee	gt
 8011444:	462a      	movgt	r2, r5
 8011446:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801144a:	465a      	movle	r2, fp
 801144c:	462f      	mov	r7, r5
 801144e:	46d9      	mov	r9, fp
 8011450:	bfcc      	ite	gt
 8011452:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011456:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801145a:	464b      	mov	r3, r9
 801145c:	4652      	mov	r2, sl
 801145e:	4620      	mov	r0, r4
 8011460:	4639      	mov	r1, r7
 8011462:	f7ef fa03 	bl	800086c <__aeabi_ddiv>
 8011466:	ec41 0b10 	vmov	d0, r0, r1
 801146a:	b005      	add	sp, #20
 801146c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011470 <__copybits>:
 8011470:	3901      	subs	r1, #1
 8011472:	b570      	push	{r4, r5, r6, lr}
 8011474:	1149      	asrs	r1, r1, #5
 8011476:	6914      	ldr	r4, [r2, #16]
 8011478:	3101      	adds	r1, #1
 801147a:	f102 0314 	add.w	r3, r2, #20
 801147e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011482:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011486:	1f05      	subs	r5, r0, #4
 8011488:	42a3      	cmp	r3, r4
 801148a:	d30c      	bcc.n	80114a6 <__copybits+0x36>
 801148c:	1aa3      	subs	r3, r4, r2
 801148e:	3b11      	subs	r3, #17
 8011490:	f023 0303 	bic.w	r3, r3, #3
 8011494:	3211      	adds	r2, #17
 8011496:	42a2      	cmp	r2, r4
 8011498:	bf88      	it	hi
 801149a:	2300      	movhi	r3, #0
 801149c:	4418      	add	r0, r3
 801149e:	2300      	movs	r3, #0
 80114a0:	4288      	cmp	r0, r1
 80114a2:	d305      	bcc.n	80114b0 <__copybits+0x40>
 80114a4:	bd70      	pop	{r4, r5, r6, pc}
 80114a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80114aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80114ae:	e7eb      	b.n	8011488 <__copybits+0x18>
 80114b0:	f840 3b04 	str.w	r3, [r0], #4
 80114b4:	e7f4      	b.n	80114a0 <__copybits+0x30>

080114b6 <__any_on>:
 80114b6:	f100 0214 	add.w	r2, r0, #20
 80114ba:	6900      	ldr	r0, [r0, #16]
 80114bc:	114b      	asrs	r3, r1, #5
 80114be:	4298      	cmp	r0, r3
 80114c0:	b510      	push	{r4, lr}
 80114c2:	db11      	blt.n	80114e8 <__any_on+0x32>
 80114c4:	dd0a      	ble.n	80114dc <__any_on+0x26>
 80114c6:	f011 011f 	ands.w	r1, r1, #31
 80114ca:	d007      	beq.n	80114dc <__any_on+0x26>
 80114cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80114d0:	fa24 f001 	lsr.w	r0, r4, r1
 80114d4:	fa00 f101 	lsl.w	r1, r0, r1
 80114d8:	428c      	cmp	r4, r1
 80114da:	d10b      	bne.n	80114f4 <__any_on+0x3e>
 80114dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d803      	bhi.n	80114ec <__any_on+0x36>
 80114e4:	2000      	movs	r0, #0
 80114e6:	bd10      	pop	{r4, pc}
 80114e8:	4603      	mov	r3, r0
 80114ea:	e7f7      	b.n	80114dc <__any_on+0x26>
 80114ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114f0:	2900      	cmp	r1, #0
 80114f2:	d0f5      	beq.n	80114e0 <__any_on+0x2a>
 80114f4:	2001      	movs	r0, #1
 80114f6:	e7f6      	b.n	80114e6 <__any_on+0x30>

080114f8 <sulp>:
 80114f8:	b570      	push	{r4, r5, r6, lr}
 80114fa:	4604      	mov	r4, r0
 80114fc:	460d      	mov	r5, r1
 80114fe:	ec45 4b10 	vmov	d0, r4, r5
 8011502:	4616      	mov	r6, r2
 8011504:	f7ff feba 	bl	801127c <__ulp>
 8011508:	ec51 0b10 	vmov	r0, r1, d0
 801150c:	b17e      	cbz	r6, 801152e <sulp+0x36>
 801150e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011512:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011516:	2b00      	cmp	r3, #0
 8011518:	dd09      	ble.n	801152e <sulp+0x36>
 801151a:	051b      	lsls	r3, r3, #20
 801151c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011520:	2400      	movs	r4, #0
 8011522:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011526:	4622      	mov	r2, r4
 8011528:	462b      	mov	r3, r5
 801152a:	f7ef f875 	bl	8000618 <__aeabi_dmul>
 801152e:	ec41 0b10 	vmov	d0, r0, r1
 8011532:	bd70      	pop	{r4, r5, r6, pc}
 8011534:	0000      	movs	r0, r0
	...

08011538 <_strtod_l>:
 8011538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153c:	b09f      	sub	sp, #124	@ 0x7c
 801153e:	460c      	mov	r4, r1
 8011540:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011542:	2200      	movs	r2, #0
 8011544:	921a      	str	r2, [sp, #104]	@ 0x68
 8011546:	9005      	str	r0, [sp, #20]
 8011548:	f04f 0a00 	mov.w	sl, #0
 801154c:	f04f 0b00 	mov.w	fp, #0
 8011550:	460a      	mov	r2, r1
 8011552:	9219      	str	r2, [sp, #100]	@ 0x64
 8011554:	7811      	ldrb	r1, [r2, #0]
 8011556:	292b      	cmp	r1, #43	@ 0x2b
 8011558:	d04a      	beq.n	80115f0 <_strtod_l+0xb8>
 801155a:	d838      	bhi.n	80115ce <_strtod_l+0x96>
 801155c:	290d      	cmp	r1, #13
 801155e:	d832      	bhi.n	80115c6 <_strtod_l+0x8e>
 8011560:	2908      	cmp	r1, #8
 8011562:	d832      	bhi.n	80115ca <_strtod_l+0x92>
 8011564:	2900      	cmp	r1, #0
 8011566:	d03b      	beq.n	80115e0 <_strtod_l+0xa8>
 8011568:	2200      	movs	r2, #0
 801156a:	920e      	str	r2, [sp, #56]	@ 0x38
 801156c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801156e:	782a      	ldrb	r2, [r5, #0]
 8011570:	2a30      	cmp	r2, #48	@ 0x30
 8011572:	f040 80b2 	bne.w	80116da <_strtod_l+0x1a2>
 8011576:	786a      	ldrb	r2, [r5, #1]
 8011578:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801157c:	2a58      	cmp	r2, #88	@ 0x58
 801157e:	d16e      	bne.n	801165e <_strtod_l+0x126>
 8011580:	9302      	str	r3, [sp, #8]
 8011582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011584:	9301      	str	r3, [sp, #4]
 8011586:	ab1a      	add	r3, sp, #104	@ 0x68
 8011588:	9300      	str	r3, [sp, #0]
 801158a:	4a8f      	ldr	r2, [pc, #572]	@ (80117c8 <_strtod_l+0x290>)
 801158c:	9805      	ldr	r0, [sp, #20]
 801158e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011590:	a919      	add	r1, sp, #100	@ 0x64
 8011592:	f001 f863 	bl	801265c <__gethex>
 8011596:	f010 060f 	ands.w	r6, r0, #15
 801159a:	4604      	mov	r4, r0
 801159c:	d005      	beq.n	80115aa <_strtod_l+0x72>
 801159e:	2e06      	cmp	r6, #6
 80115a0:	d128      	bne.n	80115f4 <_strtod_l+0xbc>
 80115a2:	3501      	adds	r5, #1
 80115a4:	2300      	movs	r3, #0
 80115a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80115a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80115aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	f040 858e 	bne.w	80120ce <_strtod_l+0xb96>
 80115b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115b4:	b1cb      	cbz	r3, 80115ea <_strtod_l+0xb2>
 80115b6:	4652      	mov	r2, sl
 80115b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80115bc:	ec43 2b10 	vmov	d0, r2, r3
 80115c0:	b01f      	add	sp, #124	@ 0x7c
 80115c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115c6:	2920      	cmp	r1, #32
 80115c8:	d1ce      	bne.n	8011568 <_strtod_l+0x30>
 80115ca:	3201      	adds	r2, #1
 80115cc:	e7c1      	b.n	8011552 <_strtod_l+0x1a>
 80115ce:	292d      	cmp	r1, #45	@ 0x2d
 80115d0:	d1ca      	bne.n	8011568 <_strtod_l+0x30>
 80115d2:	2101      	movs	r1, #1
 80115d4:	910e      	str	r1, [sp, #56]	@ 0x38
 80115d6:	1c51      	adds	r1, r2, #1
 80115d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80115da:	7852      	ldrb	r2, [r2, #1]
 80115dc:	2a00      	cmp	r2, #0
 80115de:	d1c5      	bne.n	801156c <_strtod_l+0x34>
 80115e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80115e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f040 8570 	bne.w	80120ca <_strtod_l+0xb92>
 80115ea:	4652      	mov	r2, sl
 80115ec:	465b      	mov	r3, fp
 80115ee:	e7e5      	b.n	80115bc <_strtod_l+0x84>
 80115f0:	2100      	movs	r1, #0
 80115f2:	e7ef      	b.n	80115d4 <_strtod_l+0x9c>
 80115f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80115f6:	b13a      	cbz	r2, 8011608 <_strtod_l+0xd0>
 80115f8:	2135      	movs	r1, #53	@ 0x35
 80115fa:	a81c      	add	r0, sp, #112	@ 0x70
 80115fc:	f7ff ff38 	bl	8011470 <__copybits>
 8011600:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011602:	9805      	ldr	r0, [sp, #20]
 8011604:	f7ff fb0e 	bl	8010c24 <_Bfree>
 8011608:	3e01      	subs	r6, #1
 801160a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801160c:	2e04      	cmp	r6, #4
 801160e:	d806      	bhi.n	801161e <_strtod_l+0xe6>
 8011610:	e8df f006 	tbb	[pc, r6]
 8011614:	201d0314 	.word	0x201d0314
 8011618:	14          	.byte	0x14
 8011619:	00          	.byte	0x00
 801161a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801161e:	05e1      	lsls	r1, r4, #23
 8011620:	bf48      	it	mi
 8011622:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801162a:	0d1b      	lsrs	r3, r3, #20
 801162c:	051b      	lsls	r3, r3, #20
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1bb      	bne.n	80115aa <_strtod_l+0x72>
 8011632:	f7fe fbd3 	bl	800fddc <__errno>
 8011636:	2322      	movs	r3, #34	@ 0x22
 8011638:	6003      	str	r3, [r0, #0]
 801163a:	e7b6      	b.n	80115aa <_strtod_l+0x72>
 801163c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011640:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011648:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801164c:	e7e7      	b.n	801161e <_strtod_l+0xe6>
 801164e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80117d0 <_strtod_l+0x298>
 8011652:	e7e4      	b.n	801161e <_strtod_l+0xe6>
 8011654:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011658:	f04f 3aff 	mov.w	sl, #4294967295
 801165c:	e7df      	b.n	801161e <_strtod_l+0xe6>
 801165e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011660:	1c5a      	adds	r2, r3, #1
 8011662:	9219      	str	r2, [sp, #100]	@ 0x64
 8011664:	785b      	ldrb	r3, [r3, #1]
 8011666:	2b30      	cmp	r3, #48	@ 0x30
 8011668:	d0f9      	beq.n	801165e <_strtod_l+0x126>
 801166a:	2b00      	cmp	r3, #0
 801166c:	d09d      	beq.n	80115aa <_strtod_l+0x72>
 801166e:	2301      	movs	r3, #1
 8011670:	2700      	movs	r7, #0
 8011672:	9308      	str	r3, [sp, #32]
 8011674:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011676:	930c      	str	r3, [sp, #48]	@ 0x30
 8011678:	970b      	str	r7, [sp, #44]	@ 0x2c
 801167a:	46b9      	mov	r9, r7
 801167c:	220a      	movs	r2, #10
 801167e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011680:	7805      	ldrb	r5, [r0, #0]
 8011682:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011686:	b2d9      	uxtb	r1, r3
 8011688:	2909      	cmp	r1, #9
 801168a:	d928      	bls.n	80116de <_strtod_l+0x1a6>
 801168c:	494f      	ldr	r1, [pc, #316]	@ (80117cc <_strtod_l+0x294>)
 801168e:	2201      	movs	r2, #1
 8011690:	f7fe fb21 	bl	800fcd6 <strncmp>
 8011694:	2800      	cmp	r0, #0
 8011696:	d032      	beq.n	80116fe <_strtod_l+0x1c6>
 8011698:	2000      	movs	r0, #0
 801169a:	462a      	mov	r2, r5
 801169c:	900a      	str	r0, [sp, #40]	@ 0x28
 801169e:	464d      	mov	r5, r9
 80116a0:	4603      	mov	r3, r0
 80116a2:	2a65      	cmp	r2, #101	@ 0x65
 80116a4:	d001      	beq.n	80116aa <_strtod_l+0x172>
 80116a6:	2a45      	cmp	r2, #69	@ 0x45
 80116a8:	d114      	bne.n	80116d4 <_strtod_l+0x19c>
 80116aa:	b91d      	cbnz	r5, 80116b4 <_strtod_l+0x17c>
 80116ac:	9a08      	ldr	r2, [sp, #32]
 80116ae:	4302      	orrs	r2, r0
 80116b0:	d096      	beq.n	80115e0 <_strtod_l+0xa8>
 80116b2:	2500      	movs	r5, #0
 80116b4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80116b6:	1c62      	adds	r2, r4, #1
 80116b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80116ba:	7862      	ldrb	r2, [r4, #1]
 80116bc:	2a2b      	cmp	r2, #43	@ 0x2b
 80116be:	d07a      	beq.n	80117b6 <_strtod_l+0x27e>
 80116c0:	2a2d      	cmp	r2, #45	@ 0x2d
 80116c2:	d07e      	beq.n	80117c2 <_strtod_l+0x28a>
 80116c4:	f04f 0c00 	mov.w	ip, #0
 80116c8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80116cc:	2909      	cmp	r1, #9
 80116ce:	f240 8085 	bls.w	80117dc <_strtod_l+0x2a4>
 80116d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80116d4:	f04f 0800 	mov.w	r8, #0
 80116d8:	e0a5      	b.n	8011826 <_strtod_l+0x2ee>
 80116da:	2300      	movs	r3, #0
 80116dc:	e7c8      	b.n	8011670 <_strtod_l+0x138>
 80116de:	f1b9 0f08 	cmp.w	r9, #8
 80116e2:	bfd8      	it	le
 80116e4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80116e6:	f100 0001 	add.w	r0, r0, #1
 80116ea:	bfda      	itte	le
 80116ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80116f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80116f2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80116f6:	f109 0901 	add.w	r9, r9, #1
 80116fa:	9019      	str	r0, [sp, #100]	@ 0x64
 80116fc:	e7bf      	b.n	801167e <_strtod_l+0x146>
 80116fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011700:	1c5a      	adds	r2, r3, #1
 8011702:	9219      	str	r2, [sp, #100]	@ 0x64
 8011704:	785a      	ldrb	r2, [r3, #1]
 8011706:	f1b9 0f00 	cmp.w	r9, #0
 801170a:	d03b      	beq.n	8011784 <_strtod_l+0x24c>
 801170c:	900a      	str	r0, [sp, #40]	@ 0x28
 801170e:	464d      	mov	r5, r9
 8011710:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011714:	2b09      	cmp	r3, #9
 8011716:	d912      	bls.n	801173e <_strtod_l+0x206>
 8011718:	2301      	movs	r3, #1
 801171a:	e7c2      	b.n	80116a2 <_strtod_l+0x16a>
 801171c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801171e:	1c5a      	adds	r2, r3, #1
 8011720:	9219      	str	r2, [sp, #100]	@ 0x64
 8011722:	785a      	ldrb	r2, [r3, #1]
 8011724:	3001      	adds	r0, #1
 8011726:	2a30      	cmp	r2, #48	@ 0x30
 8011728:	d0f8      	beq.n	801171c <_strtod_l+0x1e4>
 801172a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801172e:	2b08      	cmp	r3, #8
 8011730:	f200 84d2 	bhi.w	80120d8 <_strtod_l+0xba0>
 8011734:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011736:	900a      	str	r0, [sp, #40]	@ 0x28
 8011738:	2000      	movs	r0, #0
 801173a:	930c      	str	r3, [sp, #48]	@ 0x30
 801173c:	4605      	mov	r5, r0
 801173e:	3a30      	subs	r2, #48	@ 0x30
 8011740:	f100 0301 	add.w	r3, r0, #1
 8011744:	d018      	beq.n	8011778 <_strtod_l+0x240>
 8011746:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011748:	4419      	add	r1, r3
 801174a:	910a      	str	r1, [sp, #40]	@ 0x28
 801174c:	462e      	mov	r6, r5
 801174e:	f04f 0e0a 	mov.w	lr, #10
 8011752:	1c71      	adds	r1, r6, #1
 8011754:	eba1 0c05 	sub.w	ip, r1, r5
 8011758:	4563      	cmp	r3, ip
 801175a:	dc15      	bgt.n	8011788 <_strtod_l+0x250>
 801175c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011760:	182b      	adds	r3, r5, r0
 8011762:	2b08      	cmp	r3, #8
 8011764:	f105 0501 	add.w	r5, r5, #1
 8011768:	4405      	add	r5, r0
 801176a:	dc1a      	bgt.n	80117a2 <_strtod_l+0x26a>
 801176c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801176e:	230a      	movs	r3, #10
 8011770:	fb03 2301 	mla	r3, r3, r1, r2
 8011774:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011776:	2300      	movs	r3, #0
 8011778:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801177a:	1c51      	adds	r1, r2, #1
 801177c:	9119      	str	r1, [sp, #100]	@ 0x64
 801177e:	7852      	ldrb	r2, [r2, #1]
 8011780:	4618      	mov	r0, r3
 8011782:	e7c5      	b.n	8011710 <_strtod_l+0x1d8>
 8011784:	4648      	mov	r0, r9
 8011786:	e7ce      	b.n	8011726 <_strtod_l+0x1ee>
 8011788:	2e08      	cmp	r6, #8
 801178a:	dc05      	bgt.n	8011798 <_strtod_l+0x260>
 801178c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801178e:	fb0e f606 	mul.w	r6, lr, r6
 8011792:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011794:	460e      	mov	r6, r1
 8011796:	e7dc      	b.n	8011752 <_strtod_l+0x21a>
 8011798:	2910      	cmp	r1, #16
 801179a:	bfd8      	it	le
 801179c:	fb0e f707 	mulle.w	r7, lr, r7
 80117a0:	e7f8      	b.n	8011794 <_strtod_l+0x25c>
 80117a2:	2b0f      	cmp	r3, #15
 80117a4:	bfdc      	itt	le
 80117a6:	230a      	movle	r3, #10
 80117a8:	fb03 2707 	mlale	r7, r3, r7, r2
 80117ac:	e7e3      	b.n	8011776 <_strtod_l+0x23e>
 80117ae:	2300      	movs	r3, #0
 80117b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80117b2:	2301      	movs	r3, #1
 80117b4:	e77a      	b.n	80116ac <_strtod_l+0x174>
 80117b6:	f04f 0c00 	mov.w	ip, #0
 80117ba:	1ca2      	adds	r2, r4, #2
 80117bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80117be:	78a2      	ldrb	r2, [r4, #2]
 80117c0:	e782      	b.n	80116c8 <_strtod_l+0x190>
 80117c2:	f04f 0c01 	mov.w	ip, #1
 80117c6:	e7f8      	b.n	80117ba <_strtod_l+0x282>
 80117c8:	0803e374 	.word	0x0803e374
 80117cc:	0803e1a8 	.word	0x0803e1a8
 80117d0:	7ff00000 	.word	0x7ff00000
 80117d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80117d6:	1c51      	adds	r1, r2, #1
 80117d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80117da:	7852      	ldrb	r2, [r2, #1]
 80117dc:	2a30      	cmp	r2, #48	@ 0x30
 80117de:	d0f9      	beq.n	80117d4 <_strtod_l+0x29c>
 80117e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80117e4:	2908      	cmp	r1, #8
 80117e6:	f63f af75 	bhi.w	80116d4 <_strtod_l+0x19c>
 80117ea:	3a30      	subs	r2, #48	@ 0x30
 80117ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80117ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80117f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80117f2:	f04f 080a 	mov.w	r8, #10
 80117f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80117f8:	1c56      	adds	r6, r2, #1
 80117fa:	9619      	str	r6, [sp, #100]	@ 0x64
 80117fc:	7852      	ldrb	r2, [r2, #1]
 80117fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011802:	f1be 0f09 	cmp.w	lr, #9
 8011806:	d939      	bls.n	801187c <_strtod_l+0x344>
 8011808:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801180a:	1a76      	subs	r6, r6, r1
 801180c:	2e08      	cmp	r6, #8
 801180e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011812:	dc03      	bgt.n	801181c <_strtod_l+0x2e4>
 8011814:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011816:	4588      	cmp	r8, r1
 8011818:	bfa8      	it	ge
 801181a:	4688      	movge	r8, r1
 801181c:	f1bc 0f00 	cmp.w	ip, #0
 8011820:	d001      	beq.n	8011826 <_strtod_l+0x2ee>
 8011822:	f1c8 0800 	rsb	r8, r8, #0
 8011826:	2d00      	cmp	r5, #0
 8011828:	d14e      	bne.n	80118c8 <_strtod_l+0x390>
 801182a:	9908      	ldr	r1, [sp, #32]
 801182c:	4308      	orrs	r0, r1
 801182e:	f47f aebc 	bne.w	80115aa <_strtod_l+0x72>
 8011832:	2b00      	cmp	r3, #0
 8011834:	f47f aed4 	bne.w	80115e0 <_strtod_l+0xa8>
 8011838:	2a69      	cmp	r2, #105	@ 0x69
 801183a:	d028      	beq.n	801188e <_strtod_l+0x356>
 801183c:	dc25      	bgt.n	801188a <_strtod_l+0x352>
 801183e:	2a49      	cmp	r2, #73	@ 0x49
 8011840:	d025      	beq.n	801188e <_strtod_l+0x356>
 8011842:	2a4e      	cmp	r2, #78	@ 0x4e
 8011844:	f47f aecc 	bne.w	80115e0 <_strtod_l+0xa8>
 8011848:	499a      	ldr	r1, [pc, #616]	@ (8011ab4 <_strtod_l+0x57c>)
 801184a:	a819      	add	r0, sp, #100	@ 0x64
 801184c:	f001 f928 	bl	8012aa0 <__match>
 8011850:	2800      	cmp	r0, #0
 8011852:	f43f aec5 	beq.w	80115e0 <_strtod_l+0xa8>
 8011856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	2b28      	cmp	r3, #40	@ 0x28
 801185c:	d12e      	bne.n	80118bc <_strtod_l+0x384>
 801185e:	4996      	ldr	r1, [pc, #600]	@ (8011ab8 <_strtod_l+0x580>)
 8011860:	aa1c      	add	r2, sp, #112	@ 0x70
 8011862:	a819      	add	r0, sp, #100	@ 0x64
 8011864:	f001 f930 	bl	8012ac8 <__hexnan>
 8011868:	2805      	cmp	r0, #5
 801186a:	d127      	bne.n	80118bc <_strtod_l+0x384>
 801186c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801186e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011872:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011876:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801187a:	e696      	b.n	80115aa <_strtod_l+0x72>
 801187c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801187e:	fb08 2101 	mla	r1, r8, r1, r2
 8011882:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011886:	9209      	str	r2, [sp, #36]	@ 0x24
 8011888:	e7b5      	b.n	80117f6 <_strtod_l+0x2be>
 801188a:	2a6e      	cmp	r2, #110	@ 0x6e
 801188c:	e7da      	b.n	8011844 <_strtod_l+0x30c>
 801188e:	498b      	ldr	r1, [pc, #556]	@ (8011abc <_strtod_l+0x584>)
 8011890:	a819      	add	r0, sp, #100	@ 0x64
 8011892:	f001 f905 	bl	8012aa0 <__match>
 8011896:	2800      	cmp	r0, #0
 8011898:	f43f aea2 	beq.w	80115e0 <_strtod_l+0xa8>
 801189c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801189e:	4988      	ldr	r1, [pc, #544]	@ (8011ac0 <_strtod_l+0x588>)
 80118a0:	3b01      	subs	r3, #1
 80118a2:	a819      	add	r0, sp, #100	@ 0x64
 80118a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80118a6:	f001 f8fb 	bl	8012aa0 <__match>
 80118aa:	b910      	cbnz	r0, 80118b2 <_strtod_l+0x37a>
 80118ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80118ae:	3301      	adds	r3, #1
 80118b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80118b2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011ad0 <_strtod_l+0x598>
 80118b6:	f04f 0a00 	mov.w	sl, #0
 80118ba:	e676      	b.n	80115aa <_strtod_l+0x72>
 80118bc:	4881      	ldr	r0, [pc, #516]	@ (8011ac4 <_strtod_l+0x58c>)
 80118be:	f000 fe2b 	bl	8012518 <nan>
 80118c2:	ec5b ab10 	vmov	sl, fp, d0
 80118c6:	e670      	b.n	80115aa <_strtod_l+0x72>
 80118c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80118cc:	eba8 0303 	sub.w	r3, r8, r3
 80118d0:	f1b9 0f00 	cmp.w	r9, #0
 80118d4:	bf08      	it	eq
 80118d6:	46a9      	moveq	r9, r5
 80118d8:	2d10      	cmp	r5, #16
 80118da:	9309      	str	r3, [sp, #36]	@ 0x24
 80118dc:	462c      	mov	r4, r5
 80118de:	bfa8      	it	ge
 80118e0:	2410      	movge	r4, #16
 80118e2:	f7ee fe1f 	bl	8000524 <__aeabi_ui2d>
 80118e6:	2d09      	cmp	r5, #9
 80118e8:	4682      	mov	sl, r0
 80118ea:	468b      	mov	fp, r1
 80118ec:	dc13      	bgt.n	8011916 <_strtod_l+0x3de>
 80118ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f43f ae5a 	beq.w	80115aa <_strtod_l+0x72>
 80118f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118f8:	dd78      	ble.n	80119ec <_strtod_l+0x4b4>
 80118fa:	2b16      	cmp	r3, #22
 80118fc:	dc5f      	bgt.n	80119be <_strtod_l+0x486>
 80118fe:	4972      	ldr	r1, [pc, #456]	@ (8011ac8 <_strtod_l+0x590>)
 8011900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011908:	4652      	mov	r2, sl
 801190a:	465b      	mov	r3, fp
 801190c:	f7ee fe84 	bl	8000618 <__aeabi_dmul>
 8011910:	4682      	mov	sl, r0
 8011912:	468b      	mov	fp, r1
 8011914:	e649      	b.n	80115aa <_strtod_l+0x72>
 8011916:	4b6c      	ldr	r3, [pc, #432]	@ (8011ac8 <_strtod_l+0x590>)
 8011918:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801191c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011920:	f7ee fe7a 	bl	8000618 <__aeabi_dmul>
 8011924:	4682      	mov	sl, r0
 8011926:	4638      	mov	r0, r7
 8011928:	468b      	mov	fp, r1
 801192a:	f7ee fdfb 	bl	8000524 <__aeabi_ui2d>
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	4650      	mov	r0, sl
 8011934:	4659      	mov	r1, fp
 8011936:	f7ee fcb9 	bl	80002ac <__adddf3>
 801193a:	2d0f      	cmp	r5, #15
 801193c:	4682      	mov	sl, r0
 801193e:	468b      	mov	fp, r1
 8011940:	ddd5      	ble.n	80118ee <_strtod_l+0x3b6>
 8011942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011944:	1b2c      	subs	r4, r5, r4
 8011946:	441c      	add	r4, r3
 8011948:	2c00      	cmp	r4, #0
 801194a:	f340 8093 	ble.w	8011a74 <_strtod_l+0x53c>
 801194e:	f014 030f 	ands.w	r3, r4, #15
 8011952:	d00a      	beq.n	801196a <_strtod_l+0x432>
 8011954:	495c      	ldr	r1, [pc, #368]	@ (8011ac8 <_strtod_l+0x590>)
 8011956:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801195a:	4652      	mov	r2, sl
 801195c:	465b      	mov	r3, fp
 801195e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011962:	f7ee fe59 	bl	8000618 <__aeabi_dmul>
 8011966:	4682      	mov	sl, r0
 8011968:	468b      	mov	fp, r1
 801196a:	f034 040f 	bics.w	r4, r4, #15
 801196e:	d073      	beq.n	8011a58 <_strtod_l+0x520>
 8011970:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011974:	dd49      	ble.n	8011a0a <_strtod_l+0x4d2>
 8011976:	2400      	movs	r4, #0
 8011978:	46a0      	mov	r8, r4
 801197a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801197c:	46a1      	mov	r9, r4
 801197e:	9a05      	ldr	r2, [sp, #20]
 8011980:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011ad0 <_strtod_l+0x598>
 8011984:	2322      	movs	r3, #34	@ 0x22
 8011986:	6013      	str	r3, [r2, #0]
 8011988:	f04f 0a00 	mov.w	sl, #0
 801198c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801198e:	2b00      	cmp	r3, #0
 8011990:	f43f ae0b 	beq.w	80115aa <_strtod_l+0x72>
 8011994:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011996:	9805      	ldr	r0, [sp, #20]
 8011998:	f7ff f944 	bl	8010c24 <_Bfree>
 801199c:	9805      	ldr	r0, [sp, #20]
 801199e:	4649      	mov	r1, r9
 80119a0:	f7ff f940 	bl	8010c24 <_Bfree>
 80119a4:	9805      	ldr	r0, [sp, #20]
 80119a6:	4641      	mov	r1, r8
 80119a8:	f7ff f93c 	bl	8010c24 <_Bfree>
 80119ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80119ae:	9805      	ldr	r0, [sp, #20]
 80119b0:	f7ff f938 	bl	8010c24 <_Bfree>
 80119b4:	9805      	ldr	r0, [sp, #20]
 80119b6:	4621      	mov	r1, r4
 80119b8:	f7ff f934 	bl	8010c24 <_Bfree>
 80119bc:	e5f5      	b.n	80115aa <_strtod_l+0x72>
 80119be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80119c4:	4293      	cmp	r3, r2
 80119c6:	dbbc      	blt.n	8011942 <_strtod_l+0x40a>
 80119c8:	4c3f      	ldr	r4, [pc, #252]	@ (8011ac8 <_strtod_l+0x590>)
 80119ca:	f1c5 050f 	rsb	r5, r5, #15
 80119ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80119d2:	4652      	mov	r2, sl
 80119d4:	465b      	mov	r3, fp
 80119d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119da:	f7ee fe1d 	bl	8000618 <__aeabi_dmul>
 80119de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119e0:	1b5d      	subs	r5, r3, r5
 80119e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80119e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80119ea:	e78f      	b.n	801190c <_strtod_l+0x3d4>
 80119ec:	3316      	adds	r3, #22
 80119ee:	dba8      	blt.n	8011942 <_strtod_l+0x40a>
 80119f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119f2:	eba3 0808 	sub.w	r8, r3, r8
 80119f6:	4b34      	ldr	r3, [pc, #208]	@ (8011ac8 <_strtod_l+0x590>)
 80119f8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80119fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011a00:	4650      	mov	r0, sl
 8011a02:	4659      	mov	r1, fp
 8011a04:	f7ee ff32 	bl	800086c <__aeabi_ddiv>
 8011a08:	e782      	b.n	8011910 <_strtod_l+0x3d8>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	4f2f      	ldr	r7, [pc, #188]	@ (8011acc <_strtod_l+0x594>)
 8011a0e:	1124      	asrs	r4, r4, #4
 8011a10:	4650      	mov	r0, sl
 8011a12:	4659      	mov	r1, fp
 8011a14:	461e      	mov	r6, r3
 8011a16:	2c01      	cmp	r4, #1
 8011a18:	dc21      	bgt.n	8011a5e <_strtod_l+0x526>
 8011a1a:	b10b      	cbz	r3, 8011a20 <_strtod_l+0x4e8>
 8011a1c:	4682      	mov	sl, r0
 8011a1e:	468b      	mov	fp, r1
 8011a20:	492a      	ldr	r1, [pc, #168]	@ (8011acc <_strtod_l+0x594>)
 8011a22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011a26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011a2a:	4652      	mov	r2, sl
 8011a2c:	465b      	mov	r3, fp
 8011a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a32:	f7ee fdf1 	bl	8000618 <__aeabi_dmul>
 8011a36:	4b26      	ldr	r3, [pc, #152]	@ (8011ad0 <_strtod_l+0x598>)
 8011a38:	460a      	mov	r2, r1
 8011a3a:	400b      	ands	r3, r1
 8011a3c:	4925      	ldr	r1, [pc, #148]	@ (8011ad4 <_strtod_l+0x59c>)
 8011a3e:	428b      	cmp	r3, r1
 8011a40:	4682      	mov	sl, r0
 8011a42:	d898      	bhi.n	8011976 <_strtod_l+0x43e>
 8011a44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011a48:	428b      	cmp	r3, r1
 8011a4a:	bf86      	itte	hi
 8011a4c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011ad8 <_strtod_l+0x5a0>
 8011a50:	f04f 3aff 	movhi.w	sl, #4294967295
 8011a54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011a58:	2300      	movs	r3, #0
 8011a5a:	9308      	str	r3, [sp, #32]
 8011a5c:	e076      	b.n	8011b4c <_strtod_l+0x614>
 8011a5e:	07e2      	lsls	r2, r4, #31
 8011a60:	d504      	bpl.n	8011a6c <_strtod_l+0x534>
 8011a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a66:	f7ee fdd7 	bl	8000618 <__aeabi_dmul>
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	3601      	adds	r6, #1
 8011a6e:	1064      	asrs	r4, r4, #1
 8011a70:	3708      	adds	r7, #8
 8011a72:	e7d0      	b.n	8011a16 <_strtod_l+0x4de>
 8011a74:	d0f0      	beq.n	8011a58 <_strtod_l+0x520>
 8011a76:	4264      	negs	r4, r4
 8011a78:	f014 020f 	ands.w	r2, r4, #15
 8011a7c:	d00a      	beq.n	8011a94 <_strtod_l+0x55c>
 8011a7e:	4b12      	ldr	r3, [pc, #72]	@ (8011ac8 <_strtod_l+0x590>)
 8011a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a84:	4650      	mov	r0, sl
 8011a86:	4659      	mov	r1, fp
 8011a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8c:	f7ee feee 	bl	800086c <__aeabi_ddiv>
 8011a90:	4682      	mov	sl, r0
 8011a92:	468b      	mov	fp, r1
 8011a94:	1124      	asrs	r4, r4, #4
 8011a96:	d0df      	beq.n	8011a58 <_strtod_l+0x520>
 8011a98:	2c1f      	cmp	r4, #31
 8011a9a:	dd1f      	ble.n	8011adc <_strtod_l+0x5a4>
 8011a9c:	2400      	movs	r4, #0
 8011a9e:	46a0      	mov	r8, r4
 8011aa0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011aa2:	46a1      	mov	r9, r4
 8011aa4:	9a05      	ldr	r2, [sp, #20]
 8011aa6:	2322      	movs	r3, #34	@ 0x22
 8011aa8:	f04f 0a00 	mov.w	sl, #0
 8011aac:	f04f 0b00 	mov.w	fp, #0
 8011ab0:	6013      	str	r3, [r2, #0]
 8011ab2:	e76b      	b.n	801198c <_strtod_l+0x454>
 8011ab4:	0803e096 	.word	0x0803e096
 8011ab8:	0803e360 	.word	0x0803e360
 8011abc:	0803e08e 	.word	0x0803e08e
 8011ac0:	0803e0c5 	.word	0x0803e0c5
 8011ac4:	0803e1fe 	.word	0x0803e1fe
 8011ac8:	0803e298 	.word	0x0803e298
 8011acc:	0803e270 	.word	0x0803e270
 8011ad0:	7ff00000 	.word	0x7ff00000
 8011ad4:	7ca00000 	.word	0x7ca00000
 8011ad8:	7fefffff 	.word	0x7fefffff
 8011adc:	f014 0310 	ands.w	r3, r4, #16
 8011ae0:	bf18      	it	ne
 8011ae2:	236a      	movne	r3, #106	@ 0x6a
 8011ae4:	4ea9      	ldr	r6, [pc, #676]	@ (8011d8c <_strtod_l+0x854>)
 8011ae6:	9308      	str	r3, [sp, #32]
 8011ae8:	4650      	mov	r0, sl
 8011aea:	4659      	mov	r1, fp
 8011aec:	2300      	movs	r3, #0
 8011aee:	07e7      	lsls	r7, r4, #31
 8011af0:	d504      	bpl.n	8011afc <_strtod_l+0x5c4>
 8011af2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011af6:	f7ee fd8f 	bl	8000618 <__aeabi_dmul>
 8011afa:	2301      	movs	r3, #1
 8011afc:	1064      	asrs	r4, r4, #1
 8011afe:	f106 0608 	add.w	r6, r6, #8
 8011b02:	d1f4      	bne.n	8011aee <_strtod_l+0x5b6>
 8011b04:	b10b      	cbz	r3, 8011b0a <_strtod_l+0x5d2>
 8011b06:	4682      	mov	sl, r0
 8011b08:	468b      	mov	fp, r1
 8011b0a:	9b08      	ldr	r3, [sp, #32]
 8011b0c:	b1b3      	cbz	r3, 8011b3c <_strtod_l+0x604>
 8011b0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011b12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	4659      	mov	r1, fp
 8011b1a:	dd0f      	ble.n	8011b3c <_strtod_l+0x604>
 8011b1c:	2b1f      	cmp	r3, #31
 8011b1e:	dd56      	ble.n	8011bce <_strtod_l+0x696>
 8011b20:	2b34      	cmp	r3, #52	@ 0x34
 8011b22:	bfde      	ittt	le
 8011b24:	f04f 33ff 	movle.w	r3, #4294967295
 8011b28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011b2c:	4093      	lslle	r3, r2
 8011b2e:	f04f 0a00 	mov.w	sl, #0
 8011b32:	bfcc      	ite	gt
 8011b34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011b38:	ea03 0b01 	andle.w	fp, r3, r1
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	2300      	movs	r3, #0
 8011b40:	4650      	mov	r0, sl
 8011b42:	4659      	mov	r1, fp
 8011b44:	f7ee ffd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d1a7      	bne.n	8011a9c <_strtod_l+0x564>
 8011b4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b4e:	9300      	str	r3, [sp, #0]
 8011b50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011b52:	9805      	ldr	r0, [sp, #20]
 8011b54:	462b      	mov	r3, r5
 8011b56:	464a      	mov	r2, r9
 8011b58:	f7ff f8cc 	bl	8010cf4 <__s2b>
 8011b5c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	f43f af09 	beq.w	8011976 <_strtod_l+0x43e>
 8011b64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b68:	2a00      	cmp	r2, #0
 8011b6a:	eba3 0308 	sub.w	r3, r3, r8
 8011b6e:	bfa8      	it	ge
 8011b70:	2300      	movge	r3, #0
 8011b72:	9312      	str	r3, [sp, #72]	@ 0x48
 8011b74:	2400      	movs	r4, #0
 8011b76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011b7a:	9316      	str	r3, [sp, #88]	@ 0x58
 8011b7c:	46a0      	mov	r8, r4
 8011b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b80:	9805      	ldr	r0, [sp, #20]
 8011b82:	6859      	ldr	r1, [r3, #4]
 8011b84:	f7ff f80e 	bl	8010ba4 <_Balloc>
 8011b88:	4681      	mov	r9, r0
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	f43f aef7 	beq.w	801197e <_strtod_l+0x446>
 8011b90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b92:	691a      	ldr	r2, [r3, #16]
 8011b94:	3202      	adds	r2, #2
 8011b96:	f103 010c 	add.w	r1, r3, #12
 8011b9a:	0092      	lsls	r2, r2, #2
 8011b9c:	300c      	adds	r0, #12
 8011b9e:	f7fe f94a 	bl	800fe36 <memcpy>
 8011ba2:	ec4b ab10 	vmov	d0, sl, fp
 8011ba6:	9805      	ldr	r0, [sp, #20]
 8011ba8:	aa1c      	add	r2, sp, #112	@ 0x70
 8011baa:	a91b      	add	r1, sp, #108	@ 0x6c
 8011bac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011bb0:	f7ff fbd4 	bl	801135c <__d2b>
 8011bb4:	901a      	str	r0, [sp, #104]	@ 0x68
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	f43f aee1 	beq.w	801197e <_strtod_l+0x446>
 8011bbc:	9805      	ldr	r0, [sp, #20]
 8011bbe:	2101      	movs	r1, #1
 8011bc0:	f7ff f92e 	bl	8010e20 <__i2b>
 8011bc4:	4680      	mov	r8, r0
 8011bc6:	b948      	cbnz	r0, 8011bdc <_strtod_l+0x6a4>
 8011bc8:	f04f 0800 	mov.w	r8, #0
 8011bcc:	e6d7      	b.n	801197e <_strtod_l+0x446>
 8011bce:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8011bd6:	ea03 0a0a 	and.w	sl, r3, sl
 8011bda:	e7af      	b.n	8011b3c <_strtod_l+0x604>
 8011bdc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011bde:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011be0:	2d00      	cmp	r5, #0
 8011be2:	bfab      	itete	ge
 8011be4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011be6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011be8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011bea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011bec:	bfac      	ite	ge
 8011bee:	18ef      	addge	r7, r5, r3
 8011bf0:	1b5e      	sublt	r6, r3, r5
 8011bf2:	9b08      	ldr	r3, [sp, #32]
 8011bf4:	1aed      	subs	r5, r5, r3
 8011bf6:	4415      	add	r5, r2
 8011bf8:	4b65      	ldr	r3, [pc, #404]	@ (8011d90 <_strtod_l+0x858>)
 8011bfa:	3d01      	subs	r5, #1
 8011bfc:	429d      	cmp	r5, r3
 8011bfe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011c02:	da50      	bge.n	8011ca6 <_strtod_l+0x76e>
 8011c04:	1b5b      	subs	r3, r3, r5
 8011c06:	2b1f      	cmp	r3, #31
 8011c08:	eba2 0203 	sub.w	r2, r2, r3
 8011c0c:	f04f 0101 	mov.w	r1, #1
 8011c10:	dc3d      	bgt.n	8011c8e <_strtod_l+0x756>
 8011c12:	fa01 f303 	lsl.w	r3, r1, r3
 8011c16:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011c18:	2300      	movs	r3, #0
 8011c1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c1c:	18bd      	adds	r5, r7, r2
 8011c1e:	9b08      	ldr	r3, [sp, #32]
 8011c20:	42af      	cmp	r7, r5
 8011c22:	4416      	add	r6, r2
 8011c24:	441e      	add	r6, r3
 8011c26:	463b      	mov	r3, r7
 8011c28:	bfa8      	it	ge
 8011c2a:	462b      	movge	r3, r5
 8011c2c:	42b3      	cmp	r3, r6
 8011c2e:	bfa8      	it	ge
 8011c30:	4633      	movge	r3, r6
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	bfc2      	ittt	gt
 8011c36:	1aed      	subgt	r5, r5, r3
 8011c38:	1af6      	subgt	r6, r6, r3
 8011c3a:	1aff      	subgt	r7, r7, r3
 8011c3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	dd16      	ble.n	8011c70 <_strtod_l+0x738>
 8011c42:	4641      	mov	r1, r8
 8011c44:	9805      	ldr	r0, [sp, #20]
 8011c46:	461a      	mov	r2, r3
 8011c48:	f7ff f9a2 	bl	8010f90 <__pow5mult>
 8011c4c:	4680      	mov	r8, r0
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	d0ba      	beq.n	8011bc8 <_strtod_l+0x690>
 8011c52:	4601      	mov	r1, r0
 8011c54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011c56:	9805      	ldr	r0, [sp, #20]
 8011c58:	f7ff f8f8 	bl	8010e4c <__multiply>
 8011c5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	f43f ae8d 	beq.w	801197e <_strtod_l+0x446>
 8011c64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011c66:	9805      	ldr	r0, [sp, #20]
 8011c68:	f7fe ffdc 	bl	8010c24 <_Bfree>
 8011c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c70:	2d00      	cmp	r5, #0
 8011c72:	dc1d      	bgt.n	8011cb0 <_strtod_l+0x778>
 8011c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	dd23      	ble.n	8011cc2 <_strtod_l+0x78a>
 8011c7a:	4649      	mov	r1, r9
 8011c7c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011c7e:	9805      	ldr	r0, [sp, #20]
 8011c80:	f7ff f986 	bl	8010f90 <__pow5mult>
 8011c84:	4681      	mov	r9, r0
 8011c86:	b9e0      	cbnz	r0, 8011cc2 <_strtod_l+0x78a>
 8011c88:	f04f 0900 	mov.w	r9, #0
 8011c8c:	e677      	b.n	801197e <_strtod_l+0x446>
 8011c8e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011c92:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011c96:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011c9a:	35e2      	adds	r5, #226	@ 0xe2
 8011c9c:	fa01 f305 	lsl.w	r3, r1, r5
 8011ca0:	9310      	str	r3, [sp, #64]	@ 0x40
 8011ca2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011ca4:	e7ba      	b.n	8011c1c <_strtod_l+0x6e4>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	9310      	str	r3, [sp, #64]	@ 0x40
 8011caa:	2301      	movs	r3, #1
 8011cac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011cae:	e7b5      	b.n	8011c1c <_strtod_l+0x6e4>
 8011cb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011cb2:	9805      	ldr	r0, [sp, #20]
 8011cb4:	462a      	mov	r2, r5
 8011cb6:	f7ff f9c5 	bl	8011044 <__lshift>
 8011cba:	901a      	str	r0, [sp, #104]	@ 0x68
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d1d9      	bne.n	8011c74 <_strtod_l+0x73c>
 8011cc0:	e65d      	b.n	801197e <_strtod_l+0x446>
 8011cc2:	2e00      	cmp	r6, #0
 8011cc4:	dd07      	ble.n	8011cd6 <_strtod_l+0x79e>
 8011cc6:	4649      	mov	r1, r9
 8011cc8:	9805      	ldr	r0, [sp, #20]
 8011cca:	4632      	mov	r2, r6
 8011ccc:	f7ff f9ba 	bl	8011044 <__lshift>
 8011cd0:	4681      	mov	r9, r0
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d0d8      	beq.n	8011c88 <_strtod_l+0x750>
 8011cd6:	2f00      	cmp	r7, #0
 8011cd8:	dd08      	ble.n	8011cec <_strtod_l+0x7b4>
 8011cda:	4641      	mov	r1, r8
 8011cdc:	9805      	ldr	r0, [sp, #20]
 8011cde:	463a      	mov	r2, r7
 8011ce0:	f7ff f9b0 	bl	8011044 <__lshift>
 8011ce4:	4680      	mov	r8, r0
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	f43f ae49 	beq.w	801197e <_strtod_l+0x446>
 8011cec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011cee:	9805      	ldr	r0, [sp, #20]
 8011cf0:	464a      	mov	r2, r9
 8011cf2:	f7ff fa2f 	bl	8011154 <__mdiff>
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	f43f ae40 	beq.w	801197e <_strtod_l+0x446>
 8011cfe:	68c3      	ldr	r3, [r0, #12]
 8011d00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011d02:	2300      	movs	r3, #0
 8011d04:	60c3      	str	r3, [r0, #12]
 8011d06:	4641      	mov	r1, r8
 8011d08:	f7ff fa08 	bl	801111c <__mcmp>
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	da45      	bge.n	8011d9c <_strtod_l+0x864>
 8011d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d12:	ea53 030a 	orrs.w	r3, r3, sl
 8011d16:	d16b      	bne.n	8011df0 <_strtod_l+0x8b8>
 8011d18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d167      	bne.n	8011df0 <_strtod_l+0x8b8>
 8011d20:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011d24:	0d1b      	lsrs	r3, r3, #20
 8011d26:	051b      	lsls	r3, r3, #20
 8011d28:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011d2c:	d960      	bls.n	8011df0 <_strtod_l+0x8b8>
 8011d2e:	6963      	ldr	r3, [r4, #20]
 8011d30:	b913      	cbnz	r3, 8011d38 <_strtod_l+0x800>
 8011d32:	6923      	ldr	r3, [r4, #16]
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	dd5b      	ble.n	8011df0 <_strtod_l+0x8b8>
 8011d38:	4621      	mov	r1, r4
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	9805      	ldr	r0, [sp, #20]
 8011d3e:	f7ff f981 	bl	8011044 <__lshift>
 8011d42:	4641      	mov	r1, r8
 8011d44:	4604      	mov	r4, r0
 8011d46:	f7ff f9e9 	bl	801111c <__mcmp>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	dd50      	ble.n	8011df0 <_strtod_l+0x8b8>
 8011d4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011d52:	9a08      	ldr	r2, [sp, #32]
 8011d54:	0d1b      	lsrs	r3, r3, #20
 8011d56:	051b      	lsls	r3, r3, #20
 8011d58:	2a00      	cmp	r2, #0
 8011d5a:	d06a      	beq.n	8011e32 <_strtod_l+0x8fa>
 8011d5c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011d60:	d867      	bhi.n	8011e32 <_strtod_l+0x8fa>
 8011d62:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011d66:	f67f ae9d 	bls.w	8011aa4 <_strtod_l+0x56c>
 8011d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8011d94 <_strtod_l+0x85c>)
 8011d6c:	4650      	mov	r0, sl
 8011d6e:	4659      	mov	r1, fp
 8011d70:	2200      	movs	r2, #0
 8011d72:	f7ee fc51 	bl	8000618 <__aeabi_dmul>
 8011d76:	4b08      	ldr	r3, [pc, #32]	@ (8011d98 <_strtod_l+0x860>)
 8011d78:	400b      	ands	r3, r1
 8011d7a:	4682      	mov	sl, r0
 8011d7c:	468b      	mov	fp, r1
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	f47f ae08 	bne.w	8011994 <_strtod_l+0x45c>
 8011d84:	9a05      	ldr	r2, [sp, #20]
 8011d86:	2322      	movs	r3, #34	@ 0x22
 8011d88:	6013      	str	r3, [r2, #0]
 8011d8a:	e603      	b.n	8011994 <_strtod_l+0x45c>
 8011d8c:	0803e388 	.word	0x0803e388
 8011d90:	fffffc02 	.word	0xfffffc02
 8011d94:	39500000 	.word	0x39500000
 8011d98:	7ff00000 	.word	0x7ff00000
 8011d9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011da0:	d165      	bne.n	8011e6e <_strtod_l+0x936>
 8011da2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011da8:	b35a      	cbz	r2, 8011e02 <_strtod_l+0x8ca>
 8011daa:	4a9f      	ldr	r2, [pc, #636]	@ (8012028 <_strtod_l+0xaf0>)
 8011dac:	4293      	cmp	r3, r2
 8011dae:	d12b      	bne.n	8011e08 <_strtod_l+0x8d0>
 8011db0:	9b08      	ldr	r3, [sp, #32]
 8011db2:	4651      	mov	r1, sl
 8011db4:	b303      	cbz	r3, 8011df8 <_strtod_l+0x8c0>
 8011db6:	4b9d      	ldr	r3, [pc, #628]	@ (801202c <_strtod_l+0xaf4>)
 8011db8:	465a      	mov	r2, fp
 8011dba:	4013      	ands	r3, r2
 8011dbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc4:	d81b      	bhi.n	8011dfe <_strtod_l+0x8c6>
 8011dc6:	0d1b      	lsrs	r3, r3, #20
 8011dc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8011dd0:	4299      	cmp	r1, r3
 8011dd2:	d119      	bne.n	8011e08 <_strtod_l+0x8d0>
 8011dd4:	4b96      	ldr	r3, [pc, #600]	@ (8012030 <_strtod_l+0xaf8>)
 8011dd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d102      	bne.n	8011de2 <_strtod_l+0x8aa>
 8011ddc:	3101      	adds	r1, #1
 8011dde:	f43f adce 	beq.w	801197e <_strtod_l+0x446>
 8011de2:	4b92      	ldr	r3, [pc, #584]	@ (801202c <_strtod_l+0xaf4>)
 8011de4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011de6:	401a      	ands	r2, r3
 8011de8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011dec:	f04f 0a00 	mov.w	sl, #0
 8011df0:	9b08      	ldr	r3, [sp, #32]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1b9      	bne.n	8011d6a <_strtod_l+0x832>
 8011df6:	e5cd      	b.n	8011994 <_strtod_l+0x45c>
 8011df8:	f04f 33ff 	mov.w	r3, #4294967295
 8011dfc:	e7e8      	b.n	8011dd0 <_strtod_l+0x898>
 8011dfe:	4613      	mov	r3, r2
 8011e00:	e7e6      	b.n	8011dd0 <_strtod_l+0x898>
 8011e02:	ea53 030a 	orrs.w	r3, r3, sl
 8011e06:	d0a2      	beq.n	8011d4e <_strtod_l+0x816>
 8011e08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e0a:	b1db      	cbz	r3, 8011e44 <_strtod_l+0x90c>
 8011e0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e0e:	4213      	tst	r3, r2
 8011e10:	d0ee      	beq.n	8011df0 <_strtod_l+0x8b8>
 8011e12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e14:	9a08      	ldr	r2, [sp, #32]
 8011e16:	4650      	mov	r0, sl
 8011e18:	4659      	mov	r1, fp
 8011e1a:	b1bb      	cbz	r3, 8011e4c <_strtod_l+0x914>
 8011e1c:	f7ff fb6c 	bl	80114f8 <sulp>
 8011e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e24:	ec53 2b10 	vmov	r2, r3, d0
 8011e28:	f7ee fa40 	bl	80002ac <__adddf3>
 8011e2c:	4682      	mov	sl, r0
 8011e2e:	468b      	mov	fp, r1
 8011e30:	e7de      	b.n	8011df0 <_strtod_l+0x8b8>
 8011e32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011e36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011e3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011e3e:	f04f 3aff 	mov.w	sl, #4294967295
 8011e42:	e7d5      	b.n	8011df0 <_strtod_l+0x8b8>
 8011e44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011e46:	ea13 0f0a 	tst.w	r3, sl
 8011e4a:	e7e1      	b.n	8011e10 <_strtod_l+0x8d8>
 8011e4c:	f7ff fb54 	bl	80114f8 <sulp>
 8011e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e54:	ec53 2b10 	vmov	r2, r3, d0
 8011e58:	f7ee fa26 	bl	80002a8 <__aeabi_dsub>
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	2300      	movs	r3, #0
 8011e60:	4682      	mov	sl, r0
 8011e62:	468b      	mov	fp, r1
 8011e64:	f7ee fe40 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	d0c1      	beq.n	8011df0 <_strtod_l+0x8b8>
 8011e6c:	e61a      	b.n	8011aa4 <_strtod_l+0x56c>
 8011e6e:	4641      	mov	r1, r8
 8011e70:	4620      	mov	r0, r4
 8011e72:	f7ff facb 	bl	801140c <__ratio>
 8011e76:	ec57 6b10 	vmov	r6, r7, d0
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011e80:	4630      	mov	r0, r6
 8011e82:	4639      	mov	r1, r7
 8011e84:	f7ee fe44 	bl	8000b10 <__aeabi_dcmple>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	d06f      	beq.n	8011f6c <_strtod_l+0xa34>
 8011e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d17a      	bne.n	8011f88 <_strtod_l+0xa50>
 8011e92:	f1ba 0f00 	cmp.w	sl, #0
 8011e96:	d158      	bne.n	8011f4a <_strtod_l+0xa12>
 8011e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d15a      	bne.n	8011f58 <_strtod_l+0xa20>
 8011ea2:	4b64      	ldr	r3, [pc, #400]	@ (8012034 <_strtod_l+0xafc>)
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	4639      	mov	r1, r7
 8011eaa:	f7ee fe27 	bl	8000afc <__aeabi_dcmplt>
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	d159      	bne.n	8011f66 <_strtod_l+0xa2e>
 8011eb2:	4630      	mov	r0, r6
 8011eb4:	4639      	mov	r1, r7
 8011eb6:	4b60      	ldr	r3, [pc, #384]	@ (8012038 <_strtod_l+0xb00>)
 8011eb8:	2200      	movs	r2, #0
 8011eba:	f7ee fbad 	bl	8000618 <__aeabi_dmul>
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	460f      	mov	r7, r1
 8011ec2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011ec6:	9606      	str	r6, [sp, #24]
 8011ec8:	9307      	str	r3, [sp, #28]
 8011eca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ece:	4d57      	ldr	r5, [pc, #348]	@ (801202c <_strtod_l+0xaf4>)
 8011ed0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ed6:	401d      	ands	r5, r3
 8011ed8:	4b58      	ldr	r3, [pc, #352]	@ (801203c <_strtod_l+0xb04>)
 8011eda:	429d      	cmp	r5, r3
 8011edc:	f040 80b2 	bne.w	8012044 <_strtod_l+0xb0c>
 8011ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ee2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011ee6:	ec4b ab10 	vmov	d0, sl, fp
 8011eea:	f7ff f9c7 	bl	801127c <__ulp>
 8011eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ef2:	ec51 0b10 	vmov	r0, r1, d0
 8011ef6:	f7ee fb8f 	bl	8000618 <__aeabi_dmul>
 8011efa:	4652      	mov	r2, sl
 8011efc:	465b      	mov	r3, fp
 8011efe:	f7ee f9d5 	bl	80002ac <__adddf3>
 8011f02:	460b      	mov	r3, r1
 8011f04:	4949      	ldr	r1, [pc, #292]	@ (801202c <_strtod_l+0xaf4>)
 8011f06:	4a4e      	ldr	r2, [pc, #312]	@ (8012040 <_strtod_l+0xb08>)
 8011f08:	4019      	ands	r1, r3
 8011f0a:	4291      	cmp	r1, r2
 8011f0c:	4682      	mov	sl, r0
 8011f0e:	d942      	bls.n	8011f96 <_strtod_l+0xa5e>
 8011f10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f12:	4b47      	ldr	r3, [pc, #284]	@ (8012030 <_strtod_l+0xaf8>)
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d103      	bne.n	8011f20 <_strtod_l+0x9e8>
 8011f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	f43f ad2f 	beq.w	801197e <_strtod_l+0x446>
 8011f20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012030 <_strtod_l+0xaf8>
 8011f24:	f04f 3aff 	mov.w	sl, #4294967295
 8011f28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f2a:	9805      	ldr	r0, [sp, #20]
 8011f2c:	f7fe fe7a 	bl	8010c24 <_Bfree>
 8011f30:	9805      	ldr	r0, [sp, #20]
 8011f32:	4649      	mov	r1, r9
 8011f34:	f7fe fe76 	bl	8010c24 <_Bfree>
 8011f38:	9805      	ldr	r0, [sp, #20]
 8011f3a:	4641      	mov	r1, r8
 8011f3c:	f7fe fe72 	bl	8010c24 <_Bfree>
 8011f40:	9805      	ldr	r0, [sp, #20]
 8011f42:	4621      	mov	r1, r4
 8011f44:	f7fe fe6e 	bl	8010c24 <_Bfree>
 8011f48:	e619      	b.n	8011b7e <_strtod_l+0x646>
 8011f4a:	f1ba 0f01 	cmp.w	sl, #1
 8011f4e:	d103      	bne.n	8011f58 <_strtod_l+0xa20>
 8011f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	f43f ada6 	beq.w	8011aa4 <_strtod_l+0x56c>
 8011f58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012008 <_strtod_l+0xad0>
 8011f5c:	4f35      	ldr	r7, [pc, #212]	@ (8012034 <_strtod_l+0xafc>)
 8011f5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f62:	2600      	movs	r6, #0
 8011f64:	e7b1      	b.n	8011eca <_strtod_l+0x992>
 8011f66:	4f34      	ldr	r7, [pc, #208]	@ (8012038 <_strtod_l+0xb00>)
 8011f68:	2600      	movs	r6, #0
 8011f6a:	e7aa      	b.n	8011ec2 <_strtod_l+0x98a>
 8011f6c:	4b32      	ldr	r3, [pc, #200]	@ (8012038 <_strtod_l+0xb00>)
 8011f6e:	4630      	mov	r0, r6
 8011f70:	4639      	mov	r1, r7
 8011f72:	2200      	movs	r2, #0
 8011f74:	f7ee fb50 	bl	8000618 <__aeabi_dmul>
 8011f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	460f      	mov	r7, r1
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d09f      	beq.n	8011ec2 <_strtod_l+0x98a>
 8011f82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011f86:	e7a0      	b.n	8011eca <_strtod_l+0x992>
 8011f88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012010 <_strtod_l+0xad8>
 8011f8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f90:	ec57 6b17 	vmov	r6, r7, d7
 8011f94:	e799      	b.n	8011eca <_strtod_l+0x992>
 8011f96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011f9a:	9b08      	ldr	r3, [sp, #32]
 8011f9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d1c1      	bne.n	8011f28 <_strtod_l+0x9f0>
 8011fa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011fa8:	0d1b      	lsrs	r3, r3, #20
 8011faa:	051b      	lsls	r3, r3, #20
 8011fac:	429d      	cmp	r5, r3
 8011fae:	d1bb      	bne.n	8011f28 <_strtod_l+0x9f0>
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	4639      	mov	r1, r7
 8011fb4:	f7ee fe90 	bl	8000cd8 <__aeabi_d2lz>
 8011fb8:	f7ee fb00 	bl	80005bc <__aeabi_l2d>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	4639      	mov	r1, r7
 8011fc4:	f7ee f970 	bl	80002a8 <__aeabi_dsub>
 8011fc8:	460b      	mov	r3, r1
 8011fca:	4602      	mov	r2, r0
 8011fcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011fd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fd6:	ea46 060a 	orr.w	r6, r6, sl
 8011fda:	431e      	orrs	r6, r3
 8011fdc:	d06f      	beq.n	80120be <_strtod_l+0xb86>
 8011fde:	a30e      	add	r3, pc, #56	@ (adr r3, 8012018 <_strtod_l+0xae0>)
 8011fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe4:	f7ee fd8a 	bl	8000afc <__aeabi_dcmplt>
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	f47f acd3 	bne.w	8011994 <_strtod_l+0x45c>
 8011fee:	a30c      	add	r3, pc, #48	@ (adr r3, 8012020 <_strtod_l+0xae8>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ff8:	f7ee fd9e 	bl	8000b38 <__aeabi_dcmpgt>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	d093      	beq.n	8011f28 <_strtod_l+0x9f0>
 8012000:	e4c8      	b.n	8011994 <_strtod_l+0x45c>
 8012002:	bf00      	nop
 8012004:	f3af 8000 	nop.w
 8012008:	00000000 	.word	0x00000000
 801200c:	bff00000 	.word	0xbff00000
 8012010:	00000000 	.word	0x00000000
 8012014:	3ff00000 	.word	0x3ff00000
 8012018:	94a03595 	.word	0x94a03595
 801201c:	3fdfffff 	.word	0x3fdfffff
 8012020:	35afe535 	.word	0x35afe535
 8012024:	3fe00000 	.word	0x3fe00000
 8012028:	000fffff 	.word	0x000fffff
 801202c:	7ff00000 	.word	0x7ff00000
 8012030:	7fefffff 	.word	0x7fefffff
 8012034:	3ff00000 	.word	0x3ff00000
 8012038:	3fe00000 	.word	0x3fe00000
 801203c:	7fe00000 	.word	0x7fe00000
 8012040:	7c9fffff 	.word	0x7c9fffff
 8012044:	9b08      	ldr	r3, [sp, #32]
 8012046:	b323      	cbz	r3, 8012092 <_strtod_l+0xb5a>
 8012048:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801204c:	d821      	bhi.n	8012092 <_strtod_l+0xb5a>
 801204e:	a328      	add	r3, pc, #160	@ (adr r3, 80120f0 <_strtod_l+0xbb8>)
 8012050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012054:	4630      	mov	r0, r6
 8012056:	4639      	mov	r1, r7
 8012058:	f7ee fd5a 	bl	8000b10 <__aeabi_dcmple>
 801205c:	b1a0      	cbz	r0, 8012088 <_strtod_l+0xb50>
 801205e:	4639      	mov	r1, r7
 8012060:	4630      	mov	r0, r6
 8012062:	f7ee fdb1 	bl	8000bc8 <__aeabi_d2uiz>
 8012066:	2801      	cmp	r0, #1
 8012068:	bf38      	it	cc
 801206a:	2001      	movcc	r0, #1
 801206c:	f7ee fa5a 	bl	8000524 <__aeabi_ui2d>
 8012070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012072:	4606      	mov	r6, r0
 8012074:	460f      	mov	r7, r1
 8012076:	b9fb      	cbnz	r3, 80120b8 <_strtod_l+0xb80>
 8012078:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801207c:	9014      	str	r0, [sp, #80]	@ 0x50
 801207e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012080:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012084:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012088:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801208a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801208e:	1b5b      	subs	r3, r3, r5
 8012090:	9311      	str	r3, [sp, #68]	@ 0x44
 8012092:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012096:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801209a:	f7ff f8ef 	bl	801127c <__ulp>
 801209e:	4650      	mov	r0, sl
 80120a0:	ec53 2b10 	vmov	r2, r3, d0
 80120a4:	4659      	mov	r1, fp
 80120a6:	f7ee fab7 	bl	8000618 <__aeabi_dmul>
 80120aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80120ae:	f7ee f8fd 	bl	80002ac <__adddf3>
 80120b2:	4682      	mov	sl, r0
 80120b4:	468b      	mov	fp, r1
 80120b6:	e770      	b.n	8011f9a <_strtod_l+0xa62>
 80120b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80120bc:	e7e0      	b.n	8012080 <_strtod_l+0xb48>
 80120be:	a30e      	add	r3, pc, #56	@ (adr r3, 80120f8 <_strtod_l+0xbc0>)
 80120c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c4:	f7ee fd1a 	bl	8000afc <__aeabi_dcmplt>
 80120c8:	e798      	b.n	8011ffc <_strtod_l+0xac4>
 80120ca:	2300      	movs	r3, #0
 80120cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80120ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80120d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80120d2:	6013      	str	r3, [r2, #0]
 80120d4:	f7ff ba6d 	b.w	80115b2 <_strtod_l+0x7a>
 80120d8:	2a65      	cmp	r2, #101	@ 0x65
 80120da:	f43f ab68 	beq.w	80117ae <_strtod_l+0x276>
 80120de:	2a45      	cmp	r2, #69	@ 0x45
 80120e0:	f43f ab65 	beq.w	80117ae <_strtod_l+0x276>
 80120e4:	2301      	movs	r3, #1
 80120e6:	f7ff bba0 	b.w	801182a <_strtod_l+0x2f2>
 80120ea:	bf00      	nop
 80120ec:	f3af 8000 	nop.w
 80120f0:	ffc00000 	.word	0xffc00000
 80120f4:	41dfffff 	.word	0x41dfffff
 80120f8:	94a03595 	.word	0x94a03595
 80120fc:	3fcfffff 	.word	0x3fcfffff

08012100 <_strtod_r>:
 8012100:	4b01      	ldr	r3, [pc, #4]	@ (8012108 <_strtod_r+0x8>)
 8012102:	f7ff ba19 	b.w	8011538 <_strtod_l>
 8012106:	bf00      	nop
 8012108:	200000b0 	.word	0x200000b0

0801210c <__ssputs_r>:
 801210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012110:	688e      	ldr	r6, [r1, #8]
 8012112:	461f      	mov	r7, r3
 8012114:	42be      	cmp	r6, r7
 8012116:	680b      	ldr	r3, [r1, #0]
 8012118:	4682      	mov	sl, r0
 801211a:	460c      	mov	r4, r1
 801211c:	4690      	mov	r8, r2
 801211e:	d82d      	bhi.n	801217c <__ssputs_r+0x70>
 8012120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012128:	d026      	beq.n	8012178 <__ssputs_r+0x6c>
 801212a:	6965      	ldr	r5, [r4, #20]
 801212c:	6909      	ldr	r1, [r1, #16]
 801212e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012132:	eba3 0901 	sub.w	r9, r3, r1
 8012136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801213a:	1c7b      	adds	r3, r7, #1
 801213c:	444b      	add	r3, r9
 801213e:	106d      	asrs	r5, r5, #1
 8012140:	429d      	cmp	r5, r3
 8012142:	bf38      	it	cc
 8012144:	461d      	movcc	r5, r3
 8012146:	0553      	lsls	r3, r2, #21
 8012148:	d527      	bpl.n	801219a <__ssputs_r+0x8e>
 801214a:	4629      	mov	r1, r5
 801214c:	f7fc fcce 	bl	800eaec <_malloc_r>
 8012150:	4606      	mov	r6, r0
 8012152:	b360      	cbz	r0, 80121ae <__ssputs_r+0xa2>
 8012154:	6921      	ldr	r1, [r4, #16]
 8012156:	464a      	mov	r2, r9
 8012158:	f7fd fe6d 	bl	800fe36 <memcpy>
 801215c:	89a3      	ldrh	r3, [r4, #12]
 801215e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012166:	81a3      	strh	r3, [r4, #12]
 8012168:	6126      	str	r6, [r4, #16]
 801216a:	6165      	str	r5, [r4, #20]
 801216c:	444e      	add	r6, r9
 801216e:	eba5 0509 	sub.w	r5, r5, r9
 8012172:	6026      	str	r6, [r4, #0]
 8012174:	60a5      	str	r5, [r4, #8]
 8012176:	463e      	mov	r6, r7
 8012178:	42be      	cmp	r6, r7
 801217a:	d900      	bls.n	801217e <__ssputs_r+0x72>
 801217c:	463e      	mov	r6, r7
 801217e:	6820      	ldr	r0, [r4, #0]
 8012180:	4632      	mov	r2, r6
 8012182:	4641      	mov	r1, r8
 8012184:	f7fd fd85 	bl	800fc92 <memmove>
 8012188:	68a3      	ldr	r3, [r4, #8]
 801218a:	1b9b      	subs	r3, r3, r6
 801218c:	60a3      	str	r3, [r4, #8]
 801218e:	6823      	ldr	r3, [r4, #0]
 8012190:	4433      	add	r3, r6
 8012192:	6023      	str	r3, [r4, #0]
 8012194:	2000      	movs	r0, #0
 8012196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801219a:	462a      	mov	r2, r5
 801219c:	f000 fd41 	bl	8012c22 <_realloc_r>
 80121a0:	4606      	mov	r6, r0
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d1e0      	bne.n	8012168 <__ssputs_r+0x5c>
 80121a6:	6921      	ldr	r1, [r4, #16]
 80121a8:	4650      	mov	r0, sl
 80121aa:	f7fe fcb1 	bl	8010b10 <_free_r>
 80121ae:	230c      	movs	r3, #12
 80121b0:	f8ca 3000 	str.w	r3, [sl]
 80121b4:	89a3      	ldrh	r3, [r4, #12]
 80121b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121ba:	81a3      	strh	r3, [r4, #12]
 80121bc:	f04f 30ff 	mov.w	r0, #4294967295
 80121c0:	e7e9      	b.n	8012196 <__ssputs_r+0x8a>
	...

080121c4 <_svfiprintf_r>:
 80121c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c8:	4698      	mov	r8, r3
 80121ca:	898b      	ldrh	r3, [r1, #12]
 80121cc:	061b      	lsls	r3, r3, #24
 80121ce:	b09d      	sub	sp, #116	@ 0x74
 80121d0:	4607      	mov	r7, r0
 80121d2:	460d      	mov	r5, r1
 80121d4:	4614      	mov	r4, r2
 80121d6:	d510      	bpl.n	80121fa <_svfiprintf_r+0x36>
 80121d8:	690b      	ldr	r3, [r1, #16]
 80121da:	b973      	cbnz	r3, 80121fa <_svfiprintf_r+0x36>
 80121dc:	2140      	movs	r1, #64	@ 0x40
 80121de:	f7fc fc85 	bl	800eaec <_malloc_r>
 80121e2:	6028      	str	r0, [r5, #0]
 80121e4:	6128      	str	r0, [r5, #16]
 80121e6:	b930      	cbnz	r0, 80121f6 <_svfiprintf_r+0x32>
 80121e8:	230c      	movs	r3, #12
 80121ea:	603b      	str	r3, [r7, #0]
 80121ec:	f04f 30ff 	mov.w	r0, #4294967295
 80121f0:	b01d      	add	sp, #116	@ 0x74
 80121f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f6:	2340      	movs	r3, #64	@ 0x40
 80121f8:	616b      	str	r3, [r5, #20]
 80121fa:	2300      	movs	r3, #0
 80121fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80121fe:	2320      	movs	r3, #32
 8012200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012204:	f8cd 800c 	str.w	r8, [sp, #12]
 8012208:	2330      	movs	r3, #48	@ 0x30
 801220a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80123a8 <_svfiprintf_r+0x1e4>
 801220e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012212:	f04f 0901 	mov.w	r9, #1
 8012216:	4623      	mov	r3, r4
 8012218:	469a      	mov	sl, r3
 801221a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801221e:	b10a      	cbz	r2, 8012224 <_svfiprintf_r+0x60>
 8012220:	2a25      	cmp	r2, #37	@ 0x25
 8012222:	d1f9      	bne.n	8012218 <_svfiprintf_r+0x54>
 8012224:	ebba 0b04 	subs.w	fp, sl, r4
 8012228:	d00b      	beq.n	8012242 <_svfiprintf_r+0x7e>
 801222a:	465b      	mov	r3, fp
 801222c:	4622      	mov	r2, r4
 801222e:	4629      	mov	r1, r5
 8012230:	4638      	mov	r0, r7
 8012232:	f7ff ff6b 	bl	801210c <__ssputs_r>
 8012236:	3001      	adds	r0, #1
 8012238:	f000 80a7 	beq.w	801238a <_svfiprintf_r+0x1c6>
 801223c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801223e:	445a      	add	r2, fp
 8012240:	9209      	str	r2, [sp, #36]	@ 0x24
 8012242:	f89a 3000 	ldrb.w	r3, [sl]
 8012246:	2b00      	cmp	r3, #0
 8012248:	f000 809f 	beq.w	801238a <_svfiprintf_r+0x1c6>
 801224c:	2300      	movs	r3, #0
 801224e:	f04f 32ff 	mov.w	r2, #4294967295
 8012252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012256:	f10a 0a01 	add.w	sl, sl, #1
 801225a:	9304      	str	r3, [sp, #16]
 801225c:	9307      	str	r3, [sp, #28]
 801225e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012262:	931a      	str	r3, [sp, #104]	@ 0x68
 8012264:	4654      	mov	r4, sl
 8012266:	2205      	movs	r2, #5
 8012268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801226c:	484e      	ldr	r0, [pc, #312]	@ (80123a8 <_svfiprintf_r+0x1e4>)
 801226e:	f7ed ffbf 	bl	80001f0 <memchr>
 8012272:	9a04      	ldr	r2, [sp, #16]
 8012274:	b9d8      	cbnz	r0, 80122ae <_svfiprintf_r+0xea>
 8012276:	06d0      	lsls	r0, r2, #27
 8012278:	bf44      	itt	mi
 801227a:	2320      	movmi	r3, #32
 801227c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012280:	0711      	lsls	r1, r2, #28
 8012282:	bf44      	itt	mi
 8012284:	232b      	movmi	r3, #43	@ 0x2b
 8012286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801228a:	f89a 3000 	ldrb.w	r3, [sl]
 801228e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012290:	d015      	beq.n	80122be <_svfiprintf_r+0xfa>
 8012292:	9a07      	ldr	r2, [sp, #28]
 8012294:	4654      	mov	r4, sl
 8012296:	2000      	movs	r0, #0
 8012298:	f04f 0c0a 	mov.w	ip, #10
 801229c:	4621      	mov	r1, r4
 801229e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122a2:	3b30      	subs	r3, #48	@ 0x30
 80122a4:	2b09      	cmp	r3, #9
 80122a6:	d94b      	bls.n	8012340 <_svfiprintf_r+0x17c>
 80122a8:	b1b0      	cbz	r0, 80122d8 <_svfiprintf_r+0x114>
 80122aa:	9207      	str	r2, [sp, #28]
 80122ac:	e014      	b.n	80122d8 <_svfiprintf_r+0x114>
 80122ae:	eba0 0308 	sub.w	r3, r0, r8
 80122b2:	fa09 f303 	lsl.w	r3, r9, r3
 80122b6:	4313      	orrs	r3, r2
 80122b8:	9304      	str	r3, [sp, #16]
 80122ba:	46a2      	mov	sl, r4
 80122bc:	e7d2      	b.n	8012264 <_svfiprintf_r+0xa0>
 80122be:	9b03      	ldr	r3, [sp, #12]
 80122c0:	1d19      	adds	r1, r3, #4
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	9103      	str	r1, [sp, #12]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	bfbb      	ittet	lt
 80122ca:	425b      	neglt	r3, r3
 80122cc:	f042 0202 	orrlt.w	r2, r2, #2
 80122d0:	9307      	strge	r3, [sp, #28]
 80122d2:	9307      	strlt	r3, [sp, #28]
 80122d4:	bfb8      	it	lt
 80122d6:	9204      	strlt	r2, [sp, #16]
 80122d8:	7823      	ldrb	r3, [r4, #0]
 80122da:	2b2e      	cmp	r3, #46	@ 0x2e
 80122dc:	d10a      	bne.n	80122f4 <_svfiprintf_r+0x130>
 80122de:	7863      	ldrb	r3, [r4, #1]
 80122e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80122e2:	d132      	bne.n	801234a <_svfiprintf_r+0x186>
 80122e4:	9b03      	ldr	r3, [sp, #12]
 80122e6:	1d1a      	adds	r2, r3, #4
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	9203      	str	r2, [sp, #12]
 80122ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80122f0:	3402      	adds	r4, #2
 80122f2:	9305      	str	r3, [sp, #20]
 80122f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80123b8 <_svfiprintf_r+0x1f4>
 80122f8:	7821      	ldrb	r1, [r4, #0]
 80122fa:	2203      	movs	r2, #3
 80122fc:	4650      	mov	r0, sl
 80122fe:	f7ed ff77 	bl	80001f0 <memchr>
 8012302:	b138      	cbz	r0, 8012314 <_svfiprintf_r+0x150>
 8012304:	9b04      	ldr	r3, [sp, #16]
 8012306:	eba0 000a 	sub.w	r0, r0, sl
 801230a:	2240      	movs	r2, #64	@ 0x40
 801230c:	4082      	lsls	r2, r0
 801230e:	4313      	orrs	r3, r2
 8012310:	3401      	adds	r4, #1
 8012312:	9304      	str	r3, [sp, #16]
 8012314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012318:	4824      	ldr	r0, [pc, #144]	@ (80123ac <_svfiprintf_r+0x1e8>)
 801231a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801231e:	2206      	movs	r2, #6
 8012320:	f7ed ff66 	bl	80001f0 <memchr>
 8012324:	2800      	cmp	r0, #0
 8012326:	d036      	beq.n	8012396 <_svfiprintf_r+0x1d2>
 8012328:	4b21      	ldr	r3, [pc, #132]	@ (80123b0 <_svfiprintf_r+0x1ec>)
 801232a:	bb1b      	cbnz	r3, 8012374 <_svfiprintf_r+0x1b0>
 801232c:	9b03      	ldr	r3, [sp, #12]
 801232e:	3307      	adds	r3, #7
 8012330:	f023 0307 	bic.w	r3, r3, #7
 8012334:	3308      	adds	r3, #8
 8012336:	9303      	str	r3, [sp, #12]
 8012338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801233a:	4433      	add	r3, r6
 801233c:	9309      	str	r3, [sp, #36]	@ 0x24
 801233e:	e76a      	b.n	8012216 <_svfiprintf_r+0x52>
 8012340:	fb0c 3202 	mla	r2, ip, r2, r3
 8012344:	460c      	mov	r4, r1
 8012346:	2001      	movs	r0, #1
 8012348:	e7a8      	b.n	801229c <_svfiprintf_r+0xd8>
 801234a:	2300      	movs	r3, #0
 801234c:	3401      	adds	r4, #1
 801234e:	9305      	str	r3, [sp, #20]
 8012350:	4619      	mov	r1, r3
 8012352:	f04f 0c0a 	mov.w	ip, #10
 8012356:	4620      	mov	r0, r4
 8012358:	f810 2b01 	ldrb.w	r2, [r0], #1
 801235c:	3a30      	subs	r2, #48	@ 0x30
 801235e:	2a09      	cmp	r2, #9
 8012360:	d903      	bls.n	801236a <_svfiprintf_r+0x1a6>
 8012362:	2b00      	cmp	r3, #0
 8012364:	d0c6      	beq.n	80122f4 <_svfiprintf_r+0x130>
 8012366:	9105      	str	r1, [sp, #20]
 8012368:	e7c4      	b.n	80122f4 <_svfiprintf_r+0x130>
 801236a:	fb0c 2101 	mla	r1, ip, r1, r2
 801236e:	4604      	mov	r4, r0
 8012370:	2301      	movs	r3, #1
 8012372:	e7f0      	b.n	8012356 <_svfiprintf_r+0x192>
 8012374:	ab03      	add	r3, sp, #12
 8012376:	9300      	str	r3, [sp, #0]
 8012378:	462a      	mov	r2, r5
 801237a:	4b0e      	ldr	r3, [pc, #56]	@ (80123b4 <_svfiprintf_r+0x1f0>)
 801237c:	a904      	add	r1, sp, #16
 801237e:	4638      	mov	r0, r7
 8012380:	f7fc fd66 	bl	800ee50 <_printf_float>
 8012384:	1c42      	adds	r2, r0, #1
 8012386:	4606      	mov	r6, r0
 8012388:	d1d6      	bne.n	8012338 <_svfiprintf_r+0x174>
 801238a:	89ab      	ldrh	r3, [r5, #12]
 801238c:	065b      	lsls	r3, r3, #25
 801238e:	f53f af2d 	bmi.w	80121ec <_svfiprintf_r+0x28>
 8012392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012394:	e72c      	b.n	80121f0 <_svfiprintf_r+0x2c>
 8012396:	ab03      	add	r3, sp, #12
 8012398:	9300      	str	r3, [sp, #0]
 801239a:	462a      	mov	r2, r5
 801239c:	4b05      	ldr	r3, [pc, #20]	@ (80123b4 <_svfiprintf_r+0x1f0>)
 801239e:	a904      	add	r1, sp, #16
 80123a0:	4638      	mov	r0, r7
 80123a2:	f7fc ffed 	bl	800f380 <_printf_i>
 80123a6:	e7ed      	b.n	8012384 <_svfiprintf_r+0x1c0>
 80123a8:	0803e1aa 	.word	0x0803e1aa
 80123ac:	0803e1b4 	.word	0x0803e1b4
 80123b0:	0800ee51 	.word	0x0800ee51
 80123b4:	0801210d 	.word	0x0801210d
 80123b8:	0803e1b0 	.word	0x0803e1b0

080123bc <__sflush_r>:
 80123bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80123c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123c4:	0716      	lsls	r6, r2, #28
 80123c6:	4605      	mov	r5, r0
 80123c8:	460c      	mov	r4, r1
 80123ca:	d454      	bmi.n	8012476 <__sflush_r+0xba>
 80123cc:	684b      	ldr	r3, [r1, #4]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	dc02      	bgt.n	80123d8 <__sflush_r+0x1c>
 80123d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	dd48      	ble.n	801246a <__sflush_r+0xae>
 80123d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123da:	2e00      	cmp	r6, #0
 80123dc:	d045      	beq.n	801246a <__sflush_r+0xae>
 80123de:	2300      	movs	r3, #0
 80123e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80123e4:	682f      	ldr	r7, [r5, #0]
 80123e6:	6a21      	ldr	r1, [r4, #32]
 80123e8:	602b      	str	r3, [r5, #0]
 80123ea:	d030      	beq.n	801244e <__sflush_r+0x92>
 80123ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80123ee:	89a3      	ldrh	r3, [r4, #12]
 80123f0:	0759      	lsls	r1, r3, #29
 80123f2:	d505      	bpl.n	8012400 <__sflush_r+0x44>
 80123f4:	6863      	ldr	r3, [r4, #4]
 80123f6:	1ad2      	subs	r2, r2, r3
 80123f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80123fa:	b10b      	cbz	r3, 8012400 <__sflush_r+0x44>
 80123fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80123fe:	1ad2      	subs	r2, r2, r3
 8012400:	2300      	movs	r3, #0
 8012402:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012404:	6a21      	ldr	r1, [r4, #32]
 8012406:	4628      	mov	r0, r5
 8012408:	47b0      	blx	r6
 801240a:	1c43      	adds	r3, r0, #1
 801240c:	89a3      	ldrh	r3, [r4, #12]
 801240e:	d106      	bne.n	801241e <__sflush_r+0x62>
 8012410:	6829      	ldr	r1, [r5, #0]
 8012412:	291d      	cmp	r1, #29
 8012414:	d82b      	bhi.n	801246e <__sflush_r+0xb2>
 8012416:	4a2a      	ldr	r2, [pc, #168]	@ (80124c0 <__sflush_r+0x104>)
 8012418:	40ca      	lsrs	r2, r1
 801241a:	07d6      	lsls	r6, r2, #31
 801241c:	d527      	bpl.n	801246e <__sflush_r+0xb2>
 801241e:	2200      	movs	r2, #0
 8012420:	6062      	str	r2, [r4, #4]
 8012422:	04d9      	lsls	r1, r3, #19
 8012424:	6922      	ldr	r2, [r4, #16]
 8012426:	6022      	str	r2, [r4, #0]
 8012428:	d504      	bpl.n	8012434 <__sflush_r+0x78>
 801242a:	1c42      	adds	r2, r0, #1
 801242c:	d101      	bne.n	8012432 <__sflush_r+0x76>
 801242e:	682b      	ldr	r3, [r5, #0]
 8012430:	b903      	cbnz	r3, 8012434 <__sflush_r+0x78>
 8012432:	6560      	str	r0, [r4, #84]	@ 0x54
 8012434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012436:	602f      	str	r7, [r5, #0]
 8012438:	b1b9      	cbz	r1, 801246a <__sflush_r+0xae>
 801243a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801243e:	4299      	cmp	r1, r3
 8012440:	d002      	beq.n	8012448 <__sflush_r+0x8c>
 8012442:	4628      	mov	r0, r5
 8012444:	f7fe fb64 	bl	8010b10 <_free_r>
 8012448:	2300      	movs	r3, #0
 801244a:	6363      	str	r3, [r4, #52]	@ 0x34
 801244c:	e00d      	b.n	801246a <__sflush_r+0xae>
 801244e:	2301      	movs	r3, #1
 8012450:	4628      	mov	r0, r5
 8012452:	47b0      	blx	r6
 8012454:	4602      	mov	r2, r0
 8012456:	1c50      	adds	r0, r2, #1
 8012458:	d1c9      	bne.n	80123ee <__sflush_r+0x32>
 801245a:	682b      	ldr	r3, [r5, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d0c6      	beq.n	80123ee <__sflush_r+0x32>
 8012460:	2b1d      	cmp	r3, #29
 8012462:	d001      	beq.n	8012468 <__sflush_r+0xac>
 8012464:	2b16      	cmp	r3, #22
 8012466:	d11e      	bne.n	80124a6 <__sflush_r+0xea>
 8012468:	602f      	str	r7, [r5, #0]
 801246a:	2000      	movs	r0, #0
 801246c:	e022      	b.n	80124b4 <__sflush_r+0xf8>
 801246e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012472:	b21b      	sxth	r3, r3
 8012474:	e01b      	b.n	80124ae <__sflush_r+0xf2>
 8012476:	690f      	ldr	r7, [r1, #16]
 8012478:	2f00      	cmp	r7, #0
 801247a:	d0f6      	beq.n	801246a <__sflush_r+0xae>
 801247c:	0793      	lsls	r3, r2, #30
 801247e:	680e      	ldr	r6, [r1, #0]
 8012480:	bf08      	it	eq
 8012482:	694b      	ldreq	r3, [r1, #20]
 8012484:	600f      	str	r7, [r1, #0]
 8012486:	bf18      	it	ne
 8012488:	2300      	movne	r3, #0
 801248a:	eba6 0807 	sub.w	r8, r6, r7
 801248e:	608b      	str	r3, [r1, #8]
 8012490:	f1b8 0f00 	cmp.w	r8, #0
 8012494:	dde9      	ble.n	801246a <__sflush_r+0xae>
 8012496:	6a21      	ldr	r1, [r4, #32]
 8012498:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801249a:	4643      	mov	r3, r8
 801249c:	463a      	mov	r2, r7
 801249e:	4628      	mov	r0, r5
 80124a0:	47b0      	blx	r6
 80124a2:	2800      	cmp	r0, #0
 80124a4:	dc08      	bgt.n	80124b8 <__sflush_r+0xfc>
 80124a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124ae:	81a3      	strh	r3, [r4, #12]
 80124b0:	f04f 30ff 	mov.w	r0, #4294967295
 80124b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b8:	4407      	add	r7, r0
 80124ba:	eba8 0800 	sub.w	r8, r8, r0
 80124be:	e7e7      	b.n	8012490 <__sflush_r+0xd4>
 80124c0:	20400001 	.word	0x20400001

080124c4 <_fflush_r>:
 80124c4:	b538      	push	{r3, r4, r5, lr}
 80124c6:	690b      	ldr	r3, [r1, #16]
 80124c8:	4605      	mov	r5, r0
 80124ca:	460c      	mov	r4, r1
 80124cc:	b913      	cbnz	r3, 80124d4 <_fflush_r+0x10>
 80124ce:	2500      	movs	r5, #0
 80124d0:	4628      	mov	r0, r5
 80124d2:	bd38      	pop	{r3, r4, r5, pc}
 80124d4:	b118      	cbz	r0, 80124de <_fflush_r+0x1a>
 80124d6:	6a03      	ldr	r3, [r0, #32]
 80124d8:	b90b      	cbnz	r3, 80124de <_fflush_r+0x1a>
 80124da:	f7fd fb09 	bl	800faf0 <__sinit>
 80124de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d0f3      	beq.n	80124ce <_fflush_r+0xa>
 80124e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80124e8:	07d0      	lsls	r0, r2, #31
 80124ea:	d404      	bmi.n	80124f6 <_fflush_r+0x32>
 80124ec:	0599      	lsls	r1, r3, #22
 80124ee:	d402      	bmi.n	80124f6 <_fflush_r+0x32>
 80124f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124f2:	f7fd fc9e 	bl	800fe32 <__retarget_lock_acquire_recursive>
 80124f6:	4628      	mov	r0, r5
 80124f8:	4621      	mov	r1, r4
 80124fa:	f7ff ff5f 	bl	80123bc <__sflush_r>
 80124fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012500:	07da      	lsls	r2, r3, #31
 8012502:	4605      	mov	r5, r0
 8012504:	d4e4      	bmi.n	80124d0 <_fflush_r+0xc>
 8012506:	89a3      	ldrh	r3, [r4, #12]
 8012508:	059b      	lsls	r3, r3, #22
 801250a:	d4e1      	bmi.n	80124d0 <_fflush_r+0xc>
 801250c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801250e:	f7fd fc91 	bl	800fe34 <__retarget_lock_release_recursive>
 8012512:	e7dd      	b.n	80124d0 <_fflush_r+0xc>
 8012514:	0000      	movs	r0, r0
	...

08012518 <nan>:
 8012518:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012520 <nan+0x8>
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop
 8012520:	00000000 	.word	0x00000000
 8012524:	7ff80000 	.word	0x7ff80000

08012528 <__assert_func>:
 8012528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801252a:	4614      	mov	r4, r2
 801252c:	461a      	mov	r2, r3
 801252e:	4b09      	ldr	r3, [pc, #36]	@ (8012554 <__assert_func+0x2c>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	4605      	mov	r5, r0
 8012534:	68d8      	ldr	r0, [r3, #12]
 8012536:	b14c      	cbz	r4, 801254c <__assert_func+0x24>
 8012538:	4b07      	ldr	r3, [pc, #28]	@ (8012558 <__assert_func+0x30>)
 801253a:	9100      	str	r1, [sp, #0]
 801253c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012540:	4906      	ldr	r1, [pc, #24]	@ (801255c <__assert_func+0x34>)
 8012542:	462b      	mov	r3, r5
 8012544:	f000 fba8 	bl	8012c98 <fiprintf>
 8012548:	f000 fbb8 	bl	8012cbc <abort>
 801254c:	4b04      	ldr	r3, [pc, #16]	@ (8012560 <__assert_func+0x38>)
 801254e:	461c      	mov	r4, r3
 8012550:	e7f3      	b.n	801253a <__assert_func+0x12>
 8012552:	bf00      	nop
 8012554:	20000060 	.word	0x20000060
 8012558:	0803e1c3 	.word	0x0803e1c3
 801255c:	0803e1d0 	.word	0x0803e1d0
 8012560:	0803e1fe 	.word	0x0803e1fe

08012564 <_calloc_r>:
 8012564:	b570      	push	{r4, r5, r6, lr}
 8012566:	fba1 5402 	umull	r5, r4, r1, r2
 801256a:	b934      	cbnz	r4, 801257a <_calloc_r+0x16>
 801256c:	4629      	mov	r1, r5
 801256e:	f7fc fabd 	bl	800eaec <_malloc_r>
 8012572:	4606      	mov	r6, r0
 8012574:	b928      	cbnz	r0, 8012582 <_calloc_r+0x1e>
 8012576:	4630      	mov	r0, r6
 8012578:	bd70      	pop	{r4, r5, r6, pc}
 801257a:	220c      	movs	r2, #12
 801257c:	6002      	str	r2, [r0, #0]
 801257e:	2600      	movs	r6, #0
 8012580:	e7f9      	b.n	8012576 <_calloc_r+0x12>
 8012582:	462a      	mov	r2, r5
 8012584:	4621      	mov	r1, r4
 8012586:	f7fd fb9e 	bl	800fcc6 <memset>
 801258a:	e7f4      	b.n	8012576 <_calloc_r+0x12>

0801258c <rshift>:
 801258c:	6903      	ldr	r3, [r0, #16]
 801258e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012592:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012596:	ea4f 1261 	mov.w	r2, r1, asr #5
 801259a:	f100 0414 	add.w	r4, r0, #20
 801259e:	dd45      	ble.n	801262c <rshift+0xa0>
 80125a0:	f011 011f 	ands.w	r1, r1, #31
 80125a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80125a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80125ac:	d10c      	bne.n	80125c8 <rshift+0x3c>
 80125ae:	f100 0710 	add.w	r7, r0, #16
 80125b2:	4629      	mov	r1, r5
 80125b4:	42b1      	cmp	r1, r6
 80125b6:	d334      	bcc.n	8012622 <rshift+0x96>
 80125b8:	1a9b      	subs	r3, r3, r2
 80125ba:	009b      	lsls	r3, r3, #2
 80125bc:	1eea      	subs	r2, r5, #3
 80125be:	4296      	cmp	r6, r2
 80125c0:	bf38      	it	cc
 80125c2:	2300      	movcc	r3, #0
 80125c4:	4423      	add	r3, r4
 80125c6:	e015      	b.n	80125f4 <rshift+0x68>
 80125c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80125cc:	f1c1 0820 	rsb	r8, r1, #32
 80125d0:	40cf      	lsrs	r7, r1
 80125d2:	f105 0e04 	add.w	lr, r5, #4
 80125d6:	46a1      	mov	r9, r4
 80125d8:	4576      	cmp	r6, lr
 80125da:	46f4      	mov	ip, lr
 80125dc:	d815      	bhi.n	801260a <rshift+0x7e>
 80125de:	1a9a      	subs	r2, r3, r2
 80125e0:	0092      	lsls	r2, r2, #2
 80125e2:	3a04      	subs	r2, #4
 80125e4:	3501      	adds	r5, #1
 80125e6:	42ae      	cmp	r6, r5
 80125e8:	bf38      	it	cc
 80125ea:	2200      	movcc	r2, #0
 80125ec:	18a3      	adds	r3, r4, r2
 80125ee:	50a7      	str	r7, [r4, r2]
 80125f0:	b107      	cbz	r7, 80125f4 <rshift+0x68>
 80125f2:	3304      	adds	r3, #4
 80125f4:	1b1a      	subs	r2, r3, r4
 80125f6:	42a3      	cmp	r3, r4
 80125f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80125fc:	bf08      	it	eq
 80125fe:	2300      	moveq	r3, #0
 8012600:	6102      	str	r2, [r0, #16]
 8012602:	bf08      	it	eq
 8012604:	6143      	streq	r3, [r0, #20]
 8012606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801260a:	f8dc c000 	ldr.w	ip, [ip]
 801260e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012612:	ea4c 0707 	orr.w	r7, ip, r7
 8012616:	f849 7b04 	str.w	r7, [r9], #4
 801261a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801261e:	40cf      	lsrs	r7, r1
 8012620:	e7da      	b.n	80125d8 <rshift+0x4c>
 8012622:	f851 cb04 	ldr.w	ip, [r1], #4
 8012626:	f847 cf04 	str.w	ip, [r7, #4]!
 801262a:	e7c3      	b.n	80125b4 <rshift+0x28>
 801262c:	4623      	mov	r3, r4
 801262e:	e7e1      	b.n	80125f4 <rshift+0x68>

08012630 <__hexdig_fun>:
 8012630:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012634:	2b09      	cmp	r3, #9
 8012636:	d802      	bhi.n	801263e <__hexdig_fun+0xe>
 8012638:	3820      	subs	r0, #32
 801263a:	b2c0      	uxtb	r0, r0
 801263c:	4770      	bx	lr
 801263e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012642:	2b05      	cmp	r3, #5
 8012644:	d801      	bhi.n	801264a <__hexdig_fun+0x1a>
 8012646:	3847      	subs	r0, #71	@ 0x47
 8012648:	e7f7      	b.n	801263a <__hexdig_fun+0xa>
 801264a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801264e:	2b05      	cmp	r3, #5
 8012650:	d801      	bhi.n	8012656 <__hexdig_fun+0x26>
 8012652:	3827      	subs	r0, #39	@ 0x27
 8012654:	e7f1      	b.n	801263a <__hexdig_fun+0xa>
 8012656:	2000      	movs	r0, #0
 8012658:	4770      	bx	lr
	...

0801265c <__gethex>:
 801265c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012660:	b085      	sub	sp, #20
 8012662:	468a      	mov	sl, r1
 8012664:	9302      	str	r3, [sp, #8]
 8012666:	680b      	ldr	r3, [r1, #0]
 8012668:	9001      	str	r0, [sp, #4]
 801266a:	4690      	mov	r8, r2
 801266c:	1c9c      	adds	r4, r3, #2
 801266e:	46a1      	mov	r9, r4
 8012670:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012674:	2830      	cmp	r0, #48	@ 0x30
 8012676:	d0fa      	beq.n	801266e <__gethex+0x12>
 8012678:	eba9 0303 	sub.w	r3, r9, r3
 801267c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012680:	f7ff ffd6 	bl	8012630 <__hexdig_fun>
 8012684:	4605      	mov	r5, r0
 8012686:	2800      	cmp	r0, #0
 8012688:	d168      	bne.n	801275c <__gethex+0x100>
 801268a:	49a0      	ldr	r1, [pc, #640]	@ (801290c <__gethex+0x2b0>)
 801268c:	2201      	movs	r2, #1
 801268e:	4648      	mov	r0, r9
 8012690:	f7fd fb21 	bl	800fcd6 <strncmp>
 8012694:	4607      	mov	r7, r0
 8012696:	2800      	cmp	r0, #0
 8012698:	d167      	bne.n	801276a <__gethex+0x10e>
 801269a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801269e:	4626      	mov	r6, r4
 80126a0:	f7ff ffc6 	bl	8012630 <__hexdig_fun>
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d062      	beq.n	801276e <__gethex+0x112>
 80126a8:	4623      	mov	r3, r4
 80126aa:	7818      	ldrb	r0, [r3, #0]
 80126ac:	2830      	cmp	r0, #48	@ 0x30
 80126ae:	4699      	mov	r9, r3
 80126b0:	f103 0301 	add.w	r3, r3, #1
 80126b4:	d0f9      	beq.n	80126aa <__gethex+0x4e>
 80126b6:	f7ff ffbb 	bl	8012630 <__hexdig_fun>
 80126ba:	fab0 f580 	clz	r5, r0
 80126be:	096d      	lsrs	r5, r5, #5
 80126c0:	f04f 0b01 	mov.w	fp, #1
 80126c4:	464a      	mov	r2, r9
 80126c6:	4616      	mov	r6, r2
 80126c8:	3201      	adds	r2, #1
 80126ca:	7830      	ldrb	r0, [r6, #0]
 80126cc:	f7ff ffb0 	bl	8012630 <__hexdig_fun>
 80126d0:	2800      	cmp	r0, #0
 80126d2:	d1f8      	bne.n	80126c6 <__gethex+0x6a>
 80126d4:	498d      	ldr	r1, [pc, #564]	@ (801290c <__gethex+0x2b0>)
 80126d6:	2201      	movs	r2, #1
 80126d8:	4630      	mov	r0, r6
 80126da:	f7fd fafc 	bl	800fcd6 <strncmp>
 80126de:	2800      	cmp	r0, #0
 80126e0:	d13f      	bne.n	8012762 <__gethex+0x106>
 80126e2:	b944      	cbnz	r4, 80126f6 <__gethex+0x9a>
 80126e4:	1c74      	adds	r4, r6, #1
 80126e6:	4622      	mov	r2, r4
 80126e8:	4616      	mov	r6, r2
 80126ea:	3201      	adds	r2, #1
 80126ec:	7830      	ldrb	r0, [r6, #0]
 80126ee:	f7ff ff9f 	bl	8012630 <__hexdig_fun>
 80126f2:	2800      	cmp	r0, #0
 80126f4:	d1f8      	bne.n	80126e8 <__gethex+0x8c>
 80126f6:	1ba4      	subs	r4, r4, r6
 80126f8:	00a7      	lsls	r7, r4, #2
 80126fa:	7833      	ldrb	r3, [r6, #0]
 80126fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012700:	2b50      	cmp	r3, #80	@ 0x50
 8012702:	d13e      	bne.n	8012782 <__gethex+0x126>
 8012704:	7873      	ldrb	r3, [r6, #1]
 8012706:	2b2b      	cmp	r3, #43	@ 0x2b
 8012708:	d033      	beq.n	8012772 <__gethex+0x116>
 801270a:	2b2d      	cmp	r3, #45	@ 0x2d
 801270c:	d034      	beq.n	8012778 <__gethex+0x11c>
 801270e:	1c71      	adds	r1, r6, #1
 8012710:	2400      	movs	r4, #0
 8012712:	7808      	ldrb	r0, [r1, #0]
 8012714:	f7ff ff8c 	bl	8012630 <__hexdig_fun>
 8012718:	1e43      	subs	r3, r0, #1
 801271a:	b2db      	uxtb	r3, r3
 801271c:	2b18      	cmp	r3, #24
 801271e:	d830      	bhi.n	8012782 <__gethex+0x126>
 8012720:	f1a0 0210 	sub.w	r2, r0, #16
 8012724:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012728:	f7ff ff82 	bl	8012630 <__hexdig_fun>
 801272c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012730:	fa5f fc8c 	uxtb.w	ip, ip
 8012734:	f1bc 0f18 	cmp.w	ip, #24
 8012738:	f04f 030a 	mov.w	r3, #10
 801273c:	d91e      	bls.n	801277c <__gethex+0x120>
 801273e:	b104      	cbz	r4, 8012742 <__gethex+0xe6>
 8012740:	4252      	negs	r2, r2
 8012742:	4417      	add	r7, r2
 8012744:	f8ca 1000 	str.w	r1, [sl]
 8012748:	b1ed      	cbz	r5, 8012786 <__gethex+0x12a>
 801274a:	f1bb 0f00 	cmp.w	fp, #0
 801274e:	bf0c      	ite	eq
 8012750:	2506      	moveq	r5, #6
 8012752:	2500      	movne	r5, #0
 8012754:	4628      	mov	r0, r5
 8012756:	b005      	add	sp, #20
 8012758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801275c:	2500      	movs	r5, #0
 801275e:	462c      	mov	r4, r5
 8012760:	e7b0      	b.n	80126c4 <__gethex+0x68>
 8012762:	2c00      	cmp	r4, #0
 8012764:	d1c7      	bne.n	80126f6 <__gethex+0x9a>
 8012766:	4627      	mov	r7, r4
 8012768:	e7c7      	b.n	80126fa <__gethex+0x9e>
 801276a:	464e      	mov	r6, r9
 801276c:	462f      	mov	r7, r5
 801276e:	2501      	movs	r5, #1
 8012770:	e7c3      	b.n	80126fa <__gethex+0x9e>
 8012772:	2400      	movs	r4, #0
 8012774:	1cb1      	adds	r1, r6, #2
 8012776:	e7cc      	b.n	8012712 <__gethex+0xb6>
 8012778:	2401      	movs	r4, #1
 801277a:	e7fb      	b.n	8012774 <__gethex+0x118>
 801277c:	fb03 0002 	mla	r0, r3, r2, r0
 8012780:	e7ce      	b.n	8012720 <__gethex+0xc4>
 8012782:	4631      	mov	r1, r6
 8012784:	e7de      	b.n	8012744 <__gethex+0xe8>
 8012786:	eba6 0309 	sub.w	r3, r6, r9
 801278a:	3b01      	subs	r3, #1
 801278c:	4629      	mov	r1, r5
 801278e:	2b07      	cmp	r3, #7
 8012790:	dc0a      	bgt.n	80127a8 <__gethex+0x14c>
 8012792:	9801      	ldr	r0, [sp, #4]
 8012794:	f7fe fa06 	bl	8010ba4 <_Balloc>
 8012798:	4604      	mov	r4, r0
 801279a:	b940      	cbnz	r0, 80127ae <__gethex+0x152>
 801279c:	4b5c      	ldr	r3, [pc, #368]	@ (8012910 <__gethex+0x2b4>)
 801279e:	4602      	mov	r2, r0
 80127a0:	21e4      	movs	r1, #228	@ 0xe4
 80127a2:	485c      	ldr	r0, [pc, #368]	@ (8012914 <__gethex+0x2b8>)
 80127a4:	f7ff fec0 	bl	8012528 <__assert_func>
 80127a8:	3101      	adds	r1, #1
 80127aa:	105b      	asrs	r3, r3, #1
 80127ac:	e7ef      	b.n	801278e <__gethex+0x132>
 80127ae:	f100 0a14 	add.w	sl, r0, #20
 80127b2:	2300      	movs	r3, #0
 80127b4:	4655      	mov	r5, sl
 80127b6:	469b      	mov	fp, r3
 80127b8:	45b1      	cmp	r9, r6
 80127ba:	d337      	bcc.n	801282c <__gethex+0x1d0>
 80127bc:	f845 bb04 	str.w	fp, [r5], #4
 80127c0:	eba5 050a 	sub.w	r5, r5, sl
 80127c4:	10ad      	asrs	r5, r5, #2
 80127c6:	6125      	str	r5, [r4, #16]
 80127c8:	4658      	mov	r0, fp
 80127ca:	f7fe fadd 	bl	8010d88 <__hi0bits>
 80127ce:	016d      	lsls	r5, r5, #5
 80127d0:	f8d8 6000 	ldr.w	r6, [r8]
 80127d4:	1a2d      	subs	r5, r5, r0
 80127d6:	42b5      	cmp	r5, r6
 80127d8:	dd54      	ble.n	8012884 <__gethex+0x228>
 80127da:	1bad      	subs	r5, r5, r6
 80127dc:	4629      	mov	r1, r5
 80127de:	4620      	mov	r0, r4
 80127e0:	f7fe fe69 	bl	80114b6 <__any_on>
 80127e4:	4681      	mov	r9, r0
 80127e6:	b178      	cbz	r0, 8012808 <__gethex+0x1ac>
 80127e8:	1e6b      	subs	r3, r5, #1
 80127ea:	1159      	asrs	r1, r3, #5
 80127ec:	f003 021f 	and.w	r2, r3, #31
 80127f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80127f4:	f04f 0901 	mov.w	r9, #1
 80127f8:	fa09 f202 	lsl.w	r2, r9, r2
 80127fc:	420a      	tst	r2, r1
 80127fe:	d003      	beq.n	8012808 <__gethex+0x1ac>
 8012800:	454b      	cmp	r3, r9
 8012802:	dc36      	bgt.n	8012872 <__gethex+0x216>
 8012804:	f04f 0902 	mov.w	r9, #2
 8012808:	4629      	mov	r1, r5
 801280a:	4620      	mov	r0, r4
 801280c:	f7ff febe 	bl	801258c <rshift>
 8012810:	442f      	add	r7, r5
 8012812:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012816:	42bb      	cmp	r3, r7
 8012818:	da42      	bge.n	80128a0 <__gethex+0x244>
 801281a:	9801      	ldr	r0, [sp, #4]
 801281c:	4621      	mov	r1, r4
 801281e:	f7fe fa01 	bl	8010c24 <_Bfree>
 8012822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012824:	2300      	movs	r3, #0
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	25a3      	movs	r5, #163	@ 0xa3
 801282a:	e793      	b.n	8012754 <__gethex+0xf8>
 801282c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012830:	2a2e      	cmp	r2, #46	@ 0x2e
 8012832:	d012      	beq.n	801285a <__gethex+0x1fe>
 8012834:	2b20      	cmp	r3, #32
 8012836:	d104      	bne.n	8012842 <__gethex+0x1e6>
 8012838:	f845 bb04 	str.w	fp, [r5], #4
 801283c:	f04f 0b00 	mov.w	fp, #0
 8012840:	465b      	mov	r3, fp
 8012842:	7830      	ldrb	r0, [r6, #0]
 8012844:	9303      	str	r3, [sp, #12]
 8012846:	f7ff fef3 	bl	8012630 <__hexdig_fun>
 801284a:	9b03      	ldr	r3, [sp, #12]
 801284c:	f000 000f 	and.w	r0, r0, #15
 8012850:	4098      	lsls	r0, r3
 8012852:	ea4b 0b00 	orr.w	fp, fp, r0
 8012856:	3304      	adds	r3, #4
 8012858:	e7ae      	b.n	80127b8 <__gethex+0x15c>
 801285a:	45b1      	cmp	r9, r6
 801285c:	d8ea      	bhi.n	8012834 <__gethex+0x1d8>
 801285e:	492b      	ldr	r1, [pc, #172]	@ (801290c <__gethex+0x2b0>)
 8012860:	9303      	str	r3, [sp, #12]
 8012862:	2201      	movs	r2, #1
 8012864:	4630      	mov	r0, r6
 8012866:	f7fd fa36 	bl	800fcd6 <strncmp>
 801286a:	9b03      	ldr	r3, [sp, #12]
 801286c:	2800      	cmp	r0, #0
 801286e:	d1e1      	bne.n	8012834 <__gethex+0x1d8>
 8012870:	e7a2      	b.n	80127b8 <__gethex+0x15c>
 8012872:	1ea9      	subs	r1, r5, #2
 8012874:	4620      	mov	r0, r4
 8012876:	f7fe fe1e 	bl	80114b6 <__any_on>
 801287a:	2800      	cmp	r0, #0
 801287c:	d0c2      	beq.n	8012804 <__gethex+0x1a8>
 801287e:	f04f 0903 	mov.w	r9, #3
 8012882:	e7c1      	b.n	8012808 <__gethex+0x1ac>
 8012884:	da09      	bge.n	801289a <__gethex+0x23e>
 8012886:	1b75      	subs	r5, r6, r5
 8012888:	4621      	mov	r1, r4
 801288a:	9801      	ldr	r0, [sp, #4]
 801288c:	462a      	mov	r2, r5
 801288e:	f7fe fbd9 	bl	8011044 <__lshift>
 8012892:	1b7f      	subs	r7, r7, r5
 8012894:	4604      	mov	r4, r0
 8012896:	f100 0a14 	add.w	sl, r0, #20
 801289a:	f04f 0900 	mov.w	r9, #0
 801289e:	e7b8      	b.n	8012812 <__gethex+0x1b6>
 80128a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80128a4:	42bd      	cmp	r5, r7
 80128a6:	dd6f      	ble.n	8012988 <__gethex+0x32c>
 80128a8:	1bed      	subs	r5, r5, r7
 80128aa:	42ae      	cmp	r6, r5
 80128ac:	dc34      	bgt.n	8012918 <__gethex+0x2bc>
 80128ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d022      	beq.n	80128fc <__gethex+0x2a0>
 80128b6:	2b03      	cmp	r3, #3
 80128b8:	d024      	beq.n	8012904 <__gethex+0x2a8>
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	d115      	bne.n	80128ea <__gethex+0x28e>
 80128be:	42ae      	cmp	r6, r5
 80128c0:	d113      	bne.n	80128ea <__gethex+0x28e>
 80128c2:	2e01      	cmp	r6, #1
 80128c4:	d10b      	bne.n	80128de <__gethex+0x282>
 80128c6:	9a02      	ldr	r2, [sp, #8]
 80128c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80128cc:	6013      	str	r3, [r2, #0]
 80128ce:	2301      	movs	r3, #1
 80128d0:	6123      	str	r3, [r4, #16]
 80128d2:	f8ca 3000 	str.w	r3, [sl]
 80128d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128d8:	2562      	movs	r5, #98	@ 0x62
 80128da:	601c      	str	r4, [r3, #0]
 80128dc:	e73a      	b.n	8012754 <__gethex+0xf8>
 80128de:	1e71      	subs	r1, r6, #1
 80128e0:	4620      	mov	r0, r4
 80128e2:	f7fe fde8 	bl	80114b6 <__any_on>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d1ed      	bne.n	80128c6 <__gethex+0x26a>
 80128ea:	9801      	ldr	r0, [sp, #4]
 80128ec:	4621      	mov	r1, r4
 80128ee:	f7fe f999 	bl	8010c24 <_Bfree>
 80128f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128f4:	2300      	movs	r3, #0
 80128f6:	6013      	str	r3, [r2, #0]
 80128f8:	2550      	movs	r5, #80	@ 0x50
 80128fa:	e72b      	b.n	8012754 <__gethex+0xf8>
 80128fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d1f3      	bne.n	80128ea <__gethex+0x28e>
 8012902:	e7e0      	b.n	80128c6 <__gethex+0x26a>
 8012904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1dd      	bne.n	80128c6 <__gethex+0x26a>
 801290a:	e7ee      	b.n	80128ea <__gethex+0x28e>
 801290c:	0803e1a8 	.word	0x0803e1a8
 8012910:	0803e13e 	.word	0x0803e13e
 8012914:	0803e1ff 	.word	0x0803e1ff
 8012918:	1e6f      	subs	r7, r5, #1
 801291a:	f1b9 0f00 	cmp.w	r9, #0
 801291e:	d130      	bne.n	8012982 <__gethex+0x326>
 8012920:	b127      	cbz	r7, 801292c <__gethex+0x2d0>
 8012922:	4639      	mov	r1, r7
 8012924:	4620      	mov	r0, r4
 8012926:	f7fe fdc6 	bl	80114b6 <__any_on>
 801292a:	4681      	mov	r9, r0
 801292c:	117a      	asrs	r2, r7, #5
 801292e:	2301      	movs	r3, #1
 8012930:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012934:	f007 071f 	and.w	r7, r7, #31
 8012938:	40bb      	lsls	r3, r7
 801293a:	4213      	tst	r3, r2
 801293c:	4629      	mov	r1, r5
 801293e:	4620      	mov	r0, r4
 8012940:	bf18      	it	ne
 8012942:	f049 0902 	orrne.w	r9, r9, #2
 8012946:	f7ff fe21 	bl	801258c <rshift>
 801294a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801294e:	1b76      	subs	r6, r6, r5
 8012950:	2502      	movs	r5, #2
 8012952:	f1b9 0f00 	cmp.w	r9, #0
 8012956:	d047      	beq.n	80129e8 <__gethex+0x38c>
 8012958:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801295c:	2b02      	cmp	r3, #2
 801295e:	d015      	beq.n	801298c <__gethex+0x330>
 8012960:	2b03      	cmp	r3, #3
 8012962:	d017      	beq.n	8012994 <__gethex+0x338>
 8012964:	2b01      	cmp	r3, #1
 8012966:	d109      	bne.n	801297c <__gethex+0x320>
 8012968:	f019 0f02 	tst.w	r9, #2
 801296c:	d006      	beq.n	801297c <__gethex+0x320>
 801296e:	f8da 3000 	ldr.w	r3, [sl]
 8012972:	ea49 0903 	orr.w	r9, r9, r3
 8012976:	f019 0f01 	tst.w	r9, #1
 801297a:	d10e      	bne.n	801299a <__gethex+0x33e>
 801297c:	f045 0510 	orr.w	r5, r5, #16
 8012980:	e032      	b.n	80129e8 <__gethex+0x38c>
 8012982:	f04f 0901 	mov.w	r9, #1
 8012986:	e7d1      	b.n	801292c <__gethex+0x2d0>
 8012988:	2501      	movs	r5, #1
 801298a:	e7e2      	b.n	8012952 <__gethex+0x2f6>
 801298c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801298e:	f1c3 0301 	rsb	r3, r3, #1
 8012992:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012996:	2b00      	cmp	r3, #0
 8012998:	d0f0      	beq.n	801297c <__gethex+0x320>
 801299a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801299e:	f104 0314 	add.w	r3, r4, #20
 80129a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80129a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80129aa:	f04f 0c00 	mov.w	ip, #0
 80129ae:	4618      	mov	r0, r3
 80129b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80129b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80129b8:	d01b      	beq.n	80129f2 <__gethex+0x396>
 80129ba:	3201      	adds	r2, #1
 80129bc:	6002      	str	r2, [r0, #0]
 80129be:	2d02      	cmp	r5, #2
 80129c0:	f104 0314 	add.w	r3, r4, #20
 80129c4:	d13c      	bne.n	8012a40 <__gethex+0x3e4>
 80129c6:	f8d8 2000 	ldr.w	r2, [r8]
 80129ca:	3a01      	subs	r2, #1
 80129cc:	42b2      	cmp	r2, r6
 80129ce:	d109      	bne.n	80129e4 <__gethex+0x388>
 80129d0:	1171      	asrs	r1, r6, #5
 80129d2:	2201      	movs	r2, #1
 80129d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80129d8:	f006 061f 	and.w	r6, r6, #31
 80129dc:	fa02 f606 	lsl.w	r6, r2, r6
 80129e0:	421e      	tst	r6, r3
 80129e2:	d13a      	bne.n	8012a5a <__gethex+0x3fe>
 80129e4:	f045 0520 	orr.w	r5, r5, #32
 80129e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129ea:	601c      	str	r4, [r3, #0]
 80129ec:	9b02      	ldr	r3, [sp, #8]
 80129ee:	601f      	str	r7, [r3, #0]
 80129f0:	e6b0      	b.n	8012754 <__gethex+0xf8>
 80129f2:	4299      	cmp	r1, r3
 80129f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80129f8:	d8d9      	bhi.n	80129ae <__gethex+0x352>
 80129fa:	68a3      	ldr	r3, [r4, #8]
 80129fc:	459b      	cmp	fp, r3
 80129fe:	db17      	blt.n	8012a30 <__gethex+0x3d4>
 8012a00:	6861      	ldr	r1, [r4, #4]
 8012a02:	9801      	ldr	r0, [sp, #4]
 8012a04:	3101      	adds	r1, #1
 8012a06:	f7fe f8cd 	bl	8010ba4 <_Balloc>
 8012a0a:	4681      	mov	r9, r0
 8012a0c:	b918      	cbnz	r0, 8012a16 <__gethex+0x3ba>
 8012a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8012a78 <__gethex+0x41c>)
 8012a10:	4602      	mov	r2, r0
 8012a12:	2184      	movs	r1, #132	@ 0x84
 8012a14:	e6c5      	b.n	80127a2 <__gethex+0x146>
 8012a16:	6922      	ldr	r2, [r4, #16]
 8012a18:	3202      	adds	r2, #2
 8012a1a:	f104 010c 	add.w	r1, r4, #12
 8012a1e:	0092      	lsls	r2, r2, #2
 8012a20:	300c      	adds	r0, #12
 8012a22:	f7fd fa08 	bl	800fe36 <memcpy>
 8012a26:	4621      	mov	r1, r4
 8012a28:	9801      	ldr	r0, [sp, #4]
 8012a2a:	f7fe f8fb 	bl	8010c24 <_Bfree>
 8012a2e:	464c      	mov	r4, r9
 8012a30:	6923      	ldr	r3, [r4, #16]
 8012a32:	1c5a      	adds	r2, r3, #1
 8012a34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012a38:	6122      	str	r2, [r4, #16]
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	615a      	str	r2, [r3, #20]
 8012a3e:	e7be      	b.n	80129be <__gethex+0x362>
 8012a40:	6922      	ldr	r2, [r4, #16]
 8012a42:	455a      	cmp	r2, fp
 8012a44:	dd0b      	ble.n	8012a5e <__gethex+0x402>
 8012a46:	2101      	movs	r1, #1
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f7ff fd9f 	bl	801258c <rshift>
 8012a4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a52:	3701      	adds	r7, #1
 8012a54:	42bb      	cmp	r3, r7
 8012a56:	f6ff aee0 	blt.w	801281a <__gethex+0x1be>
 8012a5a:	2501      	movs	r5, #1
 8012a5c:	e7c2      	b.n	80129e4 <__gethex+0x388>
 8012a5e:	f016 061f 	ands.w	r6, r6, #31
 8012a62:	d0fa      	beq.n	8012a5a <__gethex+0x3fe>
 8012a64:	4453      	add	r3, sl
 8012a66:	f1c6 0620 	rsb	r6, r6, #32
 8012a6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012a6e:	f7fe f98b 	bl	8010d88 <__hi0bits>
 8012a72:	42b0      	cmp	r0, r6
 8012a74:	dbe7      	blt.n	8012a46 <__gethex+0x3ea>
 8012a76:	e7f0      	b.n	8012a5a <__gethex+0x3fe>
 8012a78:	0803e13e 	.word	0x0803e13e

08012a7c <L_shift>:
 8012a7c:	f1c2 0208 	rsb	r2, r2, #8
 8012a80:	0092      	lsls	r2, r2, #2
 8012a82:	b570      	push	{r4, r5, r6, lr}
 8012a84:	f1c2 0620 	rsb	r6, r2, #32
 8012a88:	6843      	ldr	r3, [r0, #4]
 8012a8a:	6804      	ldr	r4, [r0, #0]
 8012a8c:	fa03 f506 	lsl.w	r5, r3, r6
 8012a90:	432c      	orrs	r4, r5
 8012a92:	40d3      	lsrs	r3, r2
 8012a94:	6004      	str	r4, [r0, #0]
 8012a96:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a9a:	4288      	cmp	r0, r1
 8012a9c:	d3f4      	bcc.n	8012a88 <L_shift+0xc>
 8012a9e:	bd70      	pop	{r4, r5, r6, pc}

08012aa0 <__match>:
 8012aa0:	b530      	push	{r4, r5, lr}
 8012aa2:	6803      	ldr	r3, [r0, #0]
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012aaa:	b914      	cbnz	r4, 8012ab2 <__match+0x12>
 8012aac:	6003      	str	r3, [r0, #0]
 8012aae:	2001      	movs	r0, #1
 8012ab0:	bd30      	pop	{r4, r5, pc}
 8012ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ab6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012aba:	2d19      	cmp	r5, #25
 8012abc:	bf98      	it	ls
 8012abe:	3220      	addls	r2, #32
 8012ac0:	42a2      	cmp	r2, r4
 8012ac2:	d0f0      	beq.n	8012aa6 <__match+0x6>
 8012ac4:	2000      	movs	r0, #0
 8012ac6:	e7f3      	b.n	8012ab0 <__match+0x10>

08012ac8 <__hexnan>:
 8012ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012acc:	680b      	ldr	r3, [r1, #0]
 8012ace:	6801      	ldr	r1, [r0, #0]
 8012ad0:	115e      	asrs	r6, r3, #5
 8012ad2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012ad6:	f013 031f 	ands.w	r3, r3, #31
 8012ada:	b087      	sub	sp, #28
 8012adc:	bf18      	it	ne
 8012ade:	3604      	addne	r6, #4
 8012ae0:	2500      	movs	r5, #0
 8012ae2:	1f37      	subs	r7, r6, #4
 8012ae4:	4682      	mov	sl, r0
 8012ae6:	4690      	mov	r8, r2
 8012ae8:	9301      	str	r3, [sp, #4]
 8012aea:	f846 5c04 	str.w	r5, [r6, #-4]
 8012aee:	46b9      	mov	r9, r7
 8012af0:	463c      	mov	r4, r7
 8012af2:	9502      	str	r5, [sp, #8]
 8012af4:	46ab      	mov	fp, r5
 8012af6:	784a      	ldrb	r2, [r1, #1]
 8012af8:	1c4b      	adds	r3, r1, #1
 8012afa:	9303      	str	r3, [sp, #12]
 8012afc:	b342      	cbz	r2, 8012b50 <__hexnan+0x88>
 8012afe:	4610      	mov	r0, r2
 8012b00:	9105      	str	r1, [sp, #20]
 8012b02:	9204      	str	r2, [sp, #16]
 8012b04:	f7ff fd94 	bl	8012630 <__hexdig_fun>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	d151      	bne.n	8012bb0 <__hexnan+0xe8>
 8012b0c:	9a04      	ldr	r2, [sp, #16]
 8012b0e:	9905      	ldr	r1, [sp, #20]
 8012b10:	2a20      	cmp	r2, #32
 8012b12:	d818      	bhi.n	8012b46 <__hexnan+0x7e>
 8012b14:	9b02      	ldr	r3, [sp, #8]
 8012b16:	459b      	cmp	fp, r3
 8012b18:	dd13      	ble.n	8012b42 <__hexnan+0x7a>
 8012b1a:	454c      	cmp	r4, r9
 8012b1c:	d206      	bcs.n	8012b2c <__hexnan+0x64>
 8012b1e:	2d07      	cmp	r5, #7
 8012b20:	dc04      	bgt.n	8012b2c <__hexnan+0x64>
 8012b22:	462a      	mov	r2, r5
 8012b24:	4649      	mov	r1, r9
 8012b26:	4620      	mov	r0, r4
 8012b28:	f7ff ffa8 	bl	8012a7c <L_shift>
 8012b2c:	4544      	cmp	r4, r8
 8012b2e:	d952      	bls.n	8012bd6 <__hexnan+0x10e>
 8012b30:	2300      	movs	r3, #0
 8012b32:	f1a4 0904 	sub.w	r9, r4, #4
 8012b36:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b3a:	f8cd b008 	str.w	fp, [sp, #8]
 8012b3e:	464c      	mov	r4, r9
 8012b40:	461d      	mov	r5, r3
 8012b42:	9903      	ldr	r1, [sp, #12]
 8012b44:	e7d7      	b.n	8012af6 <__hexnan+0x2e>
 8012b46:	2a29      	cmp	r2, #41	@ 0x29
 8012b48:	d157      	bne.n	8012bfa <__hexnan+0x132>
 8012b4a:	3102      	adds	r1, #2
 8012b4c:	f8ca 1000 	str.w	r1, [sl]
 8012b50:	f1bb 0f00 	cmp.w	fp, #0
 8012b54:	d051      	beq.n	8012bfa <__hexnan+0x132>
 8012b56:	454c      	cmp	r4, r9
 8012b58:	d206      	bcs.n	8012b68 <__hexnan+0xa0>
 8012b5a:	2d07      	cmp	r5, #7
 8012b5c:	dc04      	bgt.n	8012b68 <__hexnan+0xa0>
 8012b5e:	462a      	mov	r2, r5
 8012b60:	4649      	mov	r1, r9
 8012b62:	4620      	mov	r0, r4
 8012b64:	f7ff ff8a 	bl	8012a7c <L_shift>
 8012b68:	4544      	cmp	r4, r8
 8012b6a:	d936      	bls.n	8012bda <__hexnan+0x112>
 8012b6c:	f1a8 0204 	sub.w	r2, r8, #4
 8012b70:	4623      	mov	r3, r4
 8012b72:	f853 1b04 	ldr.w	r1, [r3], #4
 8012b76:	f842 1f04 	str.w	r1, [r2, #4]!
 8012b7a:	429f      	cmp	r7, r3
 8012b7c:	d2f9      	bcs.n	8012b72 <__hexnan+0xaa>
 8012b7e:	1b3b      	subs	r3, r7, r4
 8012b80:	f023 0303 	bic.w	r3, r3, #3
 8012b84:	3304      	adds	r3, #4
 8012b86:	3401      	adds	r4, #1
 8012b88:	3e03      	subs	r6, #3
 8012b8a:	42b4      	cmp	r4, r6
 8012b8c:	bf88      	it	hi
 8012b8e:	2304      	movhi	r3, #4
 8012b90:	4443      	add	r3, r8
 8012b92:	2200      	movs	r2, #0
 8012b94:	f843 2b04 	str.w	r2, [r3], #4
 8012b98:	429f      	cmp	r7, r3
 8012b9a:	d2fb      	bcs.n	8012b94 <__hexnan+0xcc>
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	b91b      	cbnz	r3, 8012ba8 <__hexnan+0xe0>
 8012ba0:	4547      	cmp	r7, r8
 8012ba2:	d128      	bne.n	8012bf6 <__hexnan+0x12e>
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	603b      	str	r3, [r7, #0]
 8012ba8:	2005      	movs	r0, #5
 8012baa:	b007      	add	sp, #28
 8012bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb0:	3501      	adds	r5, #1
 8012bb2:	2d08      	cmp	r5, #8
 8012bb4:	f10b 0b01 	add.w	fp, fp, #1
 8012bb8:	dd06      	ble.n	8012bc8 <__hexnan+0x100>
 8012bba:	4544      	cmp	r4, r8
 8012bbc:	d9c1      	bls.n	8012b42 <__hexnan+0x7a>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8012bc4:	2501      	movs	r5, #1
 8012bc6:	3c04      	subs	r4, #4
 8012bc8:	6822      	ldr	r2, [r4, #0]
 8012bca:	f000 000f 	and.w	r0, r0, #15
 8012bce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012bd2:	6020      	str	r0, [r4, #0]
 8012bd4:	e7b5      	b.n	8012b42 <__hexnan+0x7a>
 8012bd6:	2508      	movs	r5, #8
 8012bd8:	e7b3      	b.n	8012b42 <__hexnan+0x7a>
 8012bda:	9b01      	ldr	r3, [sp, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d0dd      	beq.n	8012b9c <__hexnan+0xd4>
 8012be0:	f1c3 0320 	rsb	r3, r3, #32
 8012be4:	f04f 32ff 	mov.w	r2, #4294967295
 8012be8:	40da      	lsrs	r2, r3
 8012bea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012bee:	4013      	ands	r3, r2
 8012bf0:	f846 3c04 	str.w	r3, [r6, #-4]
 8012bf4:	e7d2      	b.n	8012b9c <__hexnan+0xd4>
 8012bf6:	3f04      	subs	r7, #4
 8012bf8:	e7d0      	b.n	8012b9c <__hexnan+0xd4>
 8012bfa:	2004      	movs	r0, #4
 8012bfc:	e7d5      	b.n	8012baa <__hexnan+0xe2>

08012bfe <__ascii_mbtowc>:
 8012bfe:	b082      	sub	sp, #8
 8012c00:	b901      	cbnz	r1, 8012c04 <__ascii_mbtowc+0x6>
 8012c02:	a901      	add	r1, sp, #4
 8012c04:	b142      	cbz	r2, 8012c18 <__ascii_mbtowc+0x1a>
 8012c06:	b14b      	cbz	r3, 8012c1c <__ascii_mbtowc+0x1e>
 8012c08:	7813      	ldrb	r3, [r2, #0]
 8012c0a:	600b      	str	r3, [r1, #0]
 8012c0c:	7812      	ldrb	r2, [r2, #0]
 8012c0e:	1e10      	subs	r0, r2, #0
 8012c10:	bf18      	it	ne
 8012c12:	2001      	movne	r0, #1
 8012c14:	b002      	add	sp, #8
 8012c16:	4770      	bx	lr
 8012c18:	4610      	mov	r0, r2
 8012c1a:	e7fb      	b.n	8012c14 <__ascii_mbtowc+0x16>
 8012c1c:	f06f 0001 	mvn.w	r0, #1
 8012c20:	e7f8      	b.n	8012c14 <__ascii_mbtowc+0x16>

08012c22 <_realloc_r>:
 8012c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c26:	4607      	mov	r7, r0
 8012c28:	4614      	mov	r4, r2
 8012c2a:	460d      	mov	r5, r1
 8012c2c:	b921      	cbnz	r1, 8012c38 <_realloc_r+0x16>
 8012c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c32:	4611      	mov	r1, r2
 8012c34:	f7fb bf5a 	b.w	800eaec <_malloc_r>
 8012c38:	b92a      	cbnz	r2, 8012c46 <_realloc_r+0x24>
 8012c3a:	f7fd ff69 	bl	8010b10 <_free_r>
 8012c3e:	4625      	mov	r5, r4
 8012c40:	4628      	mov	r0, r5
 8012c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c46:	f000 f840 	bl	8012cca <_malloc_usable_size_r>
 8012c4a:	4284      	cmp	r4, r0
 8012c4c:	4606      	mov	r6, r0
 8012c4e:	d802      	bhi.n	8012c56 <_realloc_r+0x34>
 8012c50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c54:	d8f4      	bhi.n	8012c40 <_realloc_r+0x1e>
 8012c56:	4621      	mov	r1, r4
 8012c58:	4638      	mov	r0, r7
 8012c5a:	f7fb ff47 	bl	800eaec <_malloc_r>
 8012c5e:	4680      	mov	r8, r0
 8012c60:	b908      	cbnz	r0, 8012c66 <_realloc_r+0x44>
 8012c62:	4645      	mov	r5, r8
 8012c64:	e7ec      	b.n	8012c40 <_realloc_r+0x1e>
 8012c66:	42b4      	cmp	r4, r6
 8012c68:	4622      	mov	r2, r4
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	bf28      	it	cs
 8012c6e:	4632      	movcs	r2, r6
 8012c70:	f7fd f8e1 	bl	800fe36 <memcpy>
 8012c74:	4629      	mov	r1, r5
 8012c76:	4638      	mov	r0, r7
 8012c78:	f7fd ff4a 	bl	8010b10 <_free_r>
 8012c7c:	e7f1      	b.n	8012c62 <_realloc_r+0x40>

08012c7e <__ascii_wctomb>:
 8012c7e:	4603      	mov	r3, r0
 8012c80:	4608      	mov	r0, r1
 8012c82:	b141      	cbz	r1, 8012c96 <__ascii_wctomb+0x18>
 8012c84:	2aff      	cmp	r2, #255	@ 0xff
 8012c86:	d904      	bls.n	8012c92 <__ascii_wctomb+0x14>
 8012c88:	228a      	movs	r2, #138	@ 0x8a
 8012c8a:	601a      	str	r2, [r3, #0]
 8012c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c90:	4770      	bx	lr
 8012c92:	700a      	strb	r2, [r1, #0]
 8012c94:	2001      	movs	r0, #1
 8012c96:	4770      	bx	lr

08012c98 <fiprintf>:
 8012c98:	b40e      	push	{r1, r2, r3}
 8012c9a:	b503      	push	{r0, r1, lr}
 8012c9c:	4601      	mov	r1, r0
 8012c9e:	ab03      	add	r3, sp, #12
 8012ca0:	4805      	ldr	r0, [pc, #20]	@ (8012cb8 <fiprintf+0x20>)
 8012ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ca6:	6800      	ldr	r0, [r0, #0]
 8012ca8:	9301      	str	r3, [sp, #4]
 8012caa:	f000 f83f 	bl	8012d2c <_vfiprintf_r>
 8012cae:	b002      	add	sp, #8
 8012cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cb4:	b003      	add	sp, #12
 8012cb6:	4770      	bx	lr
 8012cb8:	20000060 	.word	0x20000060

08012cbc <abort>:
 8012cbc:	b508      	push	{r3, lr}
 8012cbe:	2006      	movs	r0, #6
 8012cc0:	f000 fa08 	bl	80130d4 <raise>
 8012cc4:	2001      	movs	r0, #1
 8012cc6:	f7ef fce1 	bl	800268c <_exit>

08012cca <_malloc_usable_size_r>:
 8012cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cce:	1f18      	subs	r0, r3, #4
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	bfbc      	itt	lt
 8012cd4:	580b      	ldrlt	r3, [r1, r0]
 8012cd6:	18c0      	addlt	r0, r0, r3
 8012cd8:	4770      	bx	lr

08012cda <__sfputc_r>:
 8012cda:	6893      	ldr	r3, [r2, #8]
 8012cdc:	3b01      	subs	r3, #1
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	b410      	push	{r4}
 8012ce2:	6093      	str	r3, [r2, #8]
 8012ce4:	da08      	bge.n	8012cf8 <__sfputc_r+0x1e>
 8012ce6:	6994      	ldr	r4, [r2, #24]
 8012ce8:	42a3      	cmp	r3, r4
 8012cea:	db01      	blt.n	8012cf0 <__sfputc_r+0x16>
 8012cec:	290a      	cmp	r1, #10
 8012cee:	d103      	bne.n	8012cf8 <__sfputc_r+0x1e>
 8012cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cf4:	f000 b932 	b.w	8012f5c <__swbuf_r>
 8012cf8:	6813      	ldr	r3, [r2, #0]
 8012cfa:	1c58      	adds	r0, r3, #1
 8012cfc:	6010      	str	r0, [r2, #0]
 8012cfe:	7019      	strb	r1, [r3, #0]
 8012d00:	4608      	mov	r0, r1
 8012d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <__sfputs_r>:
 8012d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d0a:	4606      	mov	r6, r0
 8012d0c:	460f      	mov	r7, r1
 8012d0e:	4614      	mov	r4, r2
 8012d10:	18d5      	adds	r5, r2, r3
 8012d12:	42ac      	cmp	r4, r5
 8012d14:	d101      	bne.n	8012d1a <__sfputs_r+0x12>
 8012d16:	2000      	movs	r0, #0
 8012d18:	e007      	b.n	8012d2a <__sfputs_r+0x22>
 8012d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d1e:	463a      	mov	r2, r7
 8012d20:	4630      	mov	r0, r6
 8012d22:	f7ff ffda 	bl	8012cda <__sfputc_r>
 8012d26:	1c43      	adds	r3, r0, #1
 8012d28:	d1f3      	bne.n	8012d12 <__sfputs_r+0xa>
 8012d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d2c <_vfiprintf_r>:
 8012d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d30:	460d      	mov	r5, r1
 8012d32:	b09d      	sub	sp, #116	@ 0x74
 8012d34:	4614      	mov	r4, r2
 8012d36:	4698      	mov	r8, r3
 8012d38:	4606      	mov	r6, r0
 8012d3a:	b118      	cbz	r0, 8012d44 <_vfiprintf_r+0x18>
 8012d3c:	6a03      	ldr	r3, [r0, #32]
 8012d3e:	b90b      	cbnz	r3, 8012d44 <_vfiprintf_r+0x18>
 8012d40:	f7fc fed6 	bl	800faf0 <__sinit>
 8012d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d46:	07d9      	lsls	r1, r3, #31
 8012d48:	d405      	bmi.n	8012d56 <_vfiprintf_r+0x2a>
 8012d4a:	89ab      	ldrh	r3, [r5, #12]
 8012d4c:	059a      	lsls	r2, r3, #22
 8012d4e:	d402      	bmi.n	8012d56 <_vfiprintf_r+0x2a>
 8012d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d52:	f7fd f86e 	bl	800fe32 <__retarget_lock_acquire_recursive>
 8012d56:	89ab      	ldrh	r3, [r5, #12]
 8012d58:	071b      	lsls	r3, r3, #28
 8012d5a:	d501      	bpl.n	8012d60 <_vfiprintf_r+0x34>
 8012d5c:	692b      	ldr	r3, [r5, #16]
 8012d5e:	b99b      	cbnz	r3, 8012d88 <_vfiprintf_r+0x5c>
 8012d60:	4629      	mov	r1, r5
 8012d62:	4630      	mov	r0, r6
 8012d64:	f000 f938 	bl	8012fd8 <__swsetup_r>
 8012d68:	b170      	cbz	r0, 8012d88 <_vfiprintf_r+0x5c>
 8012d6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d6c:	07dc      	lsls	r4, r3, #31
 8012d6e:	d504      	bpl.n	8012d7a <_vfiprintf_r+0x4e>
 8012d70:	f04f 30ff 	mov.w	r0, #4294967295
 8012d74:	b01d      	add	sp, #116	@ 0x74
 8012d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7a:	89ab      	ldrh	r3, [r5, #12]
 8012d7c:	0598      	lsls	r0, r3, #22
 8012d7e:	d4f7      	bmi.n	8012d70 <_vfiprintf_r+0x44>
 8012d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d82:	f7fd f857 	bl	800fe34 <__retarget_lock_release_recursive>
 8012d86:	e7f3      	b.n	8012d70 <_vfiprintf_r+0x44>
 8012d88:	2300      	movs	r3, #0
 8012d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d8c:	2320      	movs	r3, #32
 8012d8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d96:	2330      	movs	r3, #48	@ 0x30
 8012d98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012f48 <_vfiprintf_r+0x21c>
 8012d9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012da0:	f04f 0901 	mov.w	r9, #1
 8012da4:	4623      	mov	r3, r4
 8012da6:	469a      	mov	sl, r3
 8012da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dac:	b10a      	cbz	r2, 8012db2 <_vfiprintf_r+0x86>
 8012dae:	2a25      	cmp	r2, #37	@ 0x25
 8012db0:	d1f9      	bne.n	8012da6 <_vfiprintf_r+0x7a>
 8012db2:	ebba 0b04 	subs.w	fp, sl, r4
 8012db6:	d00b      	beq.n	8012dd0 <_vfiprintf_r+0xa4>
 8012db8:	465b      	mov	r3, fp
 8012dba:	4622      	mov	r2, r4
 8012dbc:	4629      	mov	r1, r5
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	f7ff ffa2 	bl	8012d08 <__sfputs_r>
 8012dc4:	3001      	adds	r0, #1
 8012dc6:	f000 80a7 	beq.w	8012f18 <_vfiprintf_r+0x1ec>
 8012dca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012dcc:	445a      	add	r2, fp
 8012dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8012dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	f000 809f 	beq.w	8012f18 <_vfiprintf_r+0x1ec>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8012de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012de4:	f10a 0a01 	add.w	sl, sl, #1
 8012de8:	9304      	str	r3, [sp, #16]
 8012dea:	9307      	str	r3, [sp, #28]
 8012dec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012df0:	931a      	str	r3, [sp, #104]	@ 0x68
 8012df2:	4654      	mov	r4, sl
 8012df4:	2205      	movs	r2, #5
 8012df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dfa:	4853      	ldr	r0, [pc, #332]	@ (8012f48 <_vfiprintf_r+0x21c>)
 8012dfc:	f7ed f9f8 	bl	80001f0 <memchr>
 8012e00:	9a04      	ldr	r2, [sp, #16]
 8012e02:	b9d8      	cbnz	r0, 8012e3c <_vfiprintf_r+0x110>
 8012e04:	06d1      	lsls	r1, r2, #27
 8012e06:	bf44      	itt	mi
 8012e08:	2320      	movmi	r3, #32
 8012e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e0e:	0713      	lsls	r3, r2, #28
 8012e10:	bf44      	itt	mi
 8012e12:	232b      	movmi	r3, #43	@ 0x2b
 8012e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e18:	f89a 3000 	ldrb.w	r3, [sl]
 8012e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e1e:	d015      	beq.n	8012e4c <_vfiprintf_r+0x120>
 8012e20:	9a07      	ldr	r2, [sp, #28]
 8012e22:	4654      	mov	r4, sl
 8012e24:	2000      	movs	r0, #0
 8012e26:	f04f 0c0a 	mov.w	ip, #10
 8012e2a:	4621      	mov	r1, r4
 8012e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e30:	3b30      	subs	r3, #48	@ 0x30
 8012e32:	2b09      	cmp	r3, #9
 8012e34:	d94b      	bls.n	8012ece <_vfiprintf_r+0x1a2>
 8012e36:	b1b0      	cbz	r0, 8012e66 <_vfiprintf_r+0x13a>
 8012e38:	9207      	str	r2, [sp, #28]
 8012e3a:	e014      	b.n	8012e66 <_vfiprintf_r+0x13a>
 8012e3c:	eba0 0308 	sub.w	r3, r0, r8
 8012e40:	fa09 f303 	lsl.w	r3, r9, r3
 8012e44:	4313      	orrs	r3, r2
 8012e46:	9304      	str	r3, [sp, #16]
 8012e48:	46a2      	mov	sl, r4
 8012e4a:	e7d2      	b.n	8012df2 <_vfiprintf_r+0xc6>
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	1d19      	adds	r1, r3, #4
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	9103      	str	r1, [sp, #12]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	bfbb      	ittet	lt
 8012e58:	425b      	neglt	r3, r3
 8012e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8012e5e:	9307      	strge	r3, [sp, #28]
 8012e60:	9307      	strlt	r3, [sp, #28]
 8012e62:	bfb8      	it	lt
 8012e64:	9204      	strlt	r2, [sp, #16]
 8012e66:	7823      	ldrb	r3, [r4, #0]
 8012e68:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e6a:	d10a      	bne.n	8012e82 <_vfiprintf_r+0x156>
 8012e6c:	7863      	ldrb	r3, [r4, #1]
 8012e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e70:	d132      	bne.n	8012ed8 <_vfiprintf_r+0x1ac>
 8012e72:	9b03      	ldr	r3, [sp, #12]
 8012e74:	1d1a      	adds	r2, r3, #4
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	9203      	str	r2, [sp, #12]
 8012e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e7e:	3402      	adds	r4, #2
 8012e80:	9305      	str	r3, [sp, #20]
 8012e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012f58 <_vfiprintf_r+0x22c>
 8012e86:	7821      	ldrb	r1, [r4, #0]
 8012e88:	2203      	movs	r2, #3
 8012e8a:	4650      	mov	r0, sl
 8012e8c:	f7ed f9b0 	bl	80001f0 <memchr>
 8012e90:	b138      	cbz	r0, 8012ea2 <_vfiprintf_r+0x176>
 8012e92:	9b04      	ldr	r3, [sp, #16]
 8012e94:	eba0 000a 	sub.w	r0, r0, sl
 8012e98:	2240      	movs	r2, #64	@ 0x40
 8012e9a:	4082      	lsls	r2, r0
 8012e9c:	4313      	orrs	r3, r2
 8012e9e:	3401      	adds	r4, #1
 8012ea0:	9304      	str	r3, [sp, #16]
 8012ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ea6:	4829      	ldr	r0, [pc, #164]	@ (8012f4c <_vfiprintf_r+0x220>)
 8012ea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012eac:	2206      	movs	r2, #6
 8012eae:	f7ed f99f 	bl	80001f0 <memchr>
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	d03f      	beq.n	8012f36 <_vfiprintf_r+0x20a>
 8012eb6:	4b26      	ldr	r3, [pc, #152]	@ (8012f50 <_vfiprintf_r+0x224>)
 8012eb8:	bb1b      	cbnz	r3, 8012f02 <_vfiprintf_r+0x1d6>
 8012eba:	9b03      	ldr	r3, [sp, #12]
 8012ebc:	3307      	adds	r3, #7
 8012ebe:	f023 0307 	bic.w	r3, r3, #7
 8012ec2:	3308      	adds	r3, #8
 8012ec4:	9303      	str	r3, [sp, #12]
 8012ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec8:	443b      	add	r3, r7
 8012eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ecc:	e76a      	b.n	8012da4 <_vfiprintf_r+0x78>
 8012ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ed2:	460c      	mov	r4, r1
 8012ed4:	2001      	movs	r0, #1
 8012ed6:	e7a8      	b.n	8012e2a <_vfiprintf_r+0xfe>
 8012ed8:	2300      	movs	r3, #0
 8012eda:	3401      	adds	r4, #1
 8012edc:	9305      	str	r3, [sp, #20]
 8012ede:	4619      	mov	r1, r3
 8012ee0:	f04f 0c0a 	mov.w	ip, #10
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012eea:	3a30      	subs	r2, #48	@ 0x30
 8012eec:	2a09      	cmp	r2, #9
 8012eee:	d903      	bls.n	8012ef8 <_vfiprintf_r+0x1cc>
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d0c6      	beq.n	8012e82 <_vfiprintf_r+0x156>
 8012ef4:	9105      	str	r1, [sp, #20]
 8012ef6:	e7c4      	b.n	8012e82 <_vfiprintf_r+0x156>
 8012ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012efc:	4604      	mov	r4, r0
 8012efe:	2301      	movs	r3, #1
 8012f00:	e7f0      	b.n	8012ee4 <_vfiprintf_r+0x1b8>
 8012f02:	ab03      	add	r3, sp, #12
 8012f04:	9300      	str	r3, [sp, #0]
 8012f06:	462a      	mov	r2, r5
 8012f08:	4b12      	ldr	r3, [pc, #72]	@ (8012f54 <_vfiprintf_r+0x228>)
 8012f0a:	a904      	add	r1, sp, #16
 8012f0c:	4630      	mov	r0, r6
 8012f0e:	f7fb ff9f 	bl	800ee50 <_printf_float>
 8012f12:	4607      	mov	r7, r0
 8012f14:	1c78      	adds	r0, r7, #1
 8012f16:	d1d6      	bne.n	8012ec6 <_vfiprintf_r+0x19a>
 8012f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012f1a:	07d9      	lsls	r1, r3, #31
 8012f1c:	d405      	bmi.n	8012f2a <_vfiprintf_r+0x1fe>
 8012f1e:	89ab      	ldrh	r3, [r5, #12]
 8012f20:	059a      	lsls	r2, r3, #22
 8012f22:	d402      	bmi.n	8012f2a <_vfiprintf_r+0x1fe>
 8012f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012f26:	f7fc ff85 	bl	800fe34 <__retarget_lock_release_recursive>
 8012f2a:	89ab      	ldrh	r3, [r5, #12]
 8012f2c:	065b      	lsls	r3, r3, #25
 8012f2e:	f53f af1f 	bmi.w	8012d70 <_vfiprintf_r+0x44>
 8012f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012f34:	e71e      	b.n	8012d74 <_vfiprintf_r+0x48>
 8012f36:	ab03      	add	r3, sp, #12
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	462a      	mov	r2, r5
 8012f3c:	4b05      	ldr	r3, [pc, #20]	@ (8012f54 <_vfiprintf_r+0x228>)
 8012f3e:	a904      	add	r1, sp, #16
 8012f40:	4630      	mov	r0, r6
 8012f42:	f7fc fa1d 	bl	800f380 <_printf_i>
 8012f46:	e7e4      	b.n	8012f12 <_vfiprintf_r+0x1e6>
 8012f48:	0803e1aa 	.word	0x0803e1aa
 8012f4c:	0803e1b4 	.word	0x0803e1b4
 8012f50:	0800ee51 	.word	0x0800ee51
 8012f54:	08012d09 	.word	0x08012d09
 8012f58:	0803e1b0 	.word	0x0803e1b0

08012f5c <__swbuf_r>:
 8012f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f5e:	460e      	mov	r6, r1
 8012f60:	4614      	mov	r4, r2
 8012f62:	4605      	mov	r5, r0
 8012f64:	b118      	cbz	r0, 8012f6e <__swbuf_r+0x12>
 8012f66:	6a03      	ldr	r3, [r0, #32]
 8012f68:	b90b      	cbnz	r3, 8012f6e <__swbuf_r+0x12>
 8012f6a:	f7fc fdc1 	bl	800faf0 <__sinit>
 8012f6e:	69a3      	ldr	r3, [r4, #24]
 8012f70:	60a3      	str	r3, [r4, #8]
 8012f72:	89a3      	ldrh	r3, [r4, #12]
 8012f74:	071a      	lsls	r2, r3, #28
 8012f76:	d501      	bpl.n	8012f7c <__swbuf_r+0x20>
 8012f78:	6923      	ldr	r3, [r4, #16]
 8012f7a:	b943      	cbnz	r3, 8012f8e <__swbuf_r+0x32>
 8012f7c:	4621      	mov	r1, r4
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f000 f82a 	bl	8012fd8 <__swsetup_r>
 8012f84:	b118      	cbz	r0, 8012f8e <__swbuf_r+0x32>
 8012f86:	f04f 37ff 	mov.w	r7, #4294967295
 8012f8a:	4638      	mov	r0, r7
 8012f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f8e:	6823      	ldr	r3, [r4, #0]
 8012f90:	6922      	ldr	r2, [r4, #16]
 8012f92:	1a98      	subs	r0, r3, r2
 8012f94:	6963      	ldr	r3, [r4, #20]
 8012f96:	b2f6      	uxtb	r6, r6
 8012f98:	4283      	cmp	r3, r0
 8012f9a:	4637      	mov	r7, r6
 8012f9c:	dc05      	bgt.n	8012faa <__swbuf_r+0x4e>
 8012f9e:	4621      	mov	r1, r4
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	f7ff fa8f 	bl	80124c4 <_fflush_r>
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	d1ed      	bne.n	8012f86 <__swbuf_r+0x2a>
 8012faa:	68a3      	ldr	r3, [r4, #8]
 8012fac:	3b01      	subs	r3, #1
 8012fae:	60a3      	str	r3, [r4, #8]
 8012fb0:	6823      	ldr	r3, [r4, #0]
 8012fb2:	1c5a      	adds	r2, r3, #1
 8012fb4:	6022      	str	r2, [r4, #0]
 8012fb6:	701e      	strb	r6, [r3, #0]
 8012fb8:	6962      	ldr	r2, [r4, #20]
 8012fba:	1c43      	adds	r3, r0, #1
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d004      	beq.n	8012fca <__swbuf_r+0x6e>
 8012fc0:	89a3      	ldrh	r3, [r4, #12]
 8012fc2:	07db      	lsls	r3, r3, #31
 8012fc4:	d5e1      	bpl.n	8012f8a <__swbuf_r+0x2e>
 8012fc6:	2e0a      	cmp	r6, #10
 8012fc8:	d1df      	bne.n	8012f8a <__swbuf_r+0x2e>
 8012fca:	4621      	mov	r1, r4
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f7ff fa79 	bl	80124c4 <_fflush_r>
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d0d9      	beq.n	8012f8a <__swbuf_r+0x2e>
 8012fd6:	e7d6      	b.n	8012f86 <__swbuf_r+0x2a>

08012fd8 <__swsetup_r>:
 8012fd8:	b538      	push	{r3, r4, r5, lr}
 8012fda:	4b29      	ldr	r3, [pc, #164]	@ (8013080 <__swsetup_r+0xa8>)
 8012fdc:	4605      	mov	r5, r0
 8012fde:	6818      	ldr	r0, [r3, #0]
 8012fe0:	460c      	mov	r4, r1
 8012fe2:	b118      	cbz	r0, 8012fec <__swsetup_r+0x14>
 8012fe4:	6a03      	ldr	r3, [r0, #32]
 8012fe6:	b90b      	cbnz	r3, 8012fec <__swsetup_r+0x14>
 8012fe8:	f7fc fd82 	bl	800faf0 <__sinit>
 8012fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ff0:	0719      	lsls	r1, r3, #28
 8012ff2:	d422      	bmi.n	801303a <__swsetup_r+0x62>
 8012ff4:	06da      	lsls	r2, r3, #27
 8012ff6:	d407      	bmi.n	8013008 <__swsetup_r+0x30>
 8012ff8:	2209      	movs	r2, #9
 8012ffa:	602a      	str	r2, [r5, #0]
 8012ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013000:	81a3      	strh	r3, [r4, #12]
 8013002:	f04f 30ff 	mov.w	r0, #4294967295
 8013006:	e033      	b.n	8013070 <__swsetup_r+0x98>
 8013008:	0758      	lsls	r0, r3, #29
 801300a:	d512      	bpl.n	8013032 <__swsetup_r+0x5a>
 801300c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801300e:	b141      	cbz	r1, 8013022 <__swsetup_r+0x4a>
 8013010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013014:	4299      	cmp	r1, r3
 8013016:	d002      	beq.n	801301e <__swsetup_r+0x46>
 8013018:	4628      	mov	r0, r5
 801301a:	f7fd fd79 	bl	8010b10 <_free_r>
 801301e:	2300      	movs	r3, #0
 8013020:	6363      	str	r3, [r4, #52]	@ 0x34
 8013022:	89a3      	ldrh	r3, [r4, #12]
 8013024:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013028:	81a3      	strh	r3, [r4, #12]
 801302a:	2300      	movs	r3, #0
 801302c:	6063      	str	r3, [r4, #4]
 801302e:	6923      	ldr	r3, [r4, #16]
 8013030:	6023      	str	r3, [r4, #0]
 8013032:	89a3      	ldrh	r3, [r4, #12]
 8013034:	f043 0308 	orr.w	r3, r3, #8
 8013038:	81a3      	strh	r3, [r4, #12]
 801303a:	6923      	ldr	r3, [r4, #16]
 801303c:	b94b      	cbnz	r3, 8013052 <__swsetup_r+0x7a>
 801303e:	89a3      	ldrh	r3, [r4, #12]
 8013040:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013048:	d003      	beq.n	8013052 <__swsetup_r+0x7a>
 801304a:	4621      	mov	r1, r4
 801304c:	4628      	mov	r0, r5
 801304e:	f000 f883 	bl	8013158 <__smakebuf_r>
 8013052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013056:	f013 0201 	ands.w	r2, r3, #1
 801305a:	d00a      	beq.n	8013072 <__swsetup_r+0x9a>
 801305c:	2200      	movs	r2, #0
 801305e:	60a2      	str	r2, [r4, #8]
 8013060:	6962      	ldr	r2, [r4, #20]
 8013062:	4252      	negs	r2, r2
 8013064:	61a2      	str	r2, [r4, #24]
 8013066:	6922      	ldr	r2, [r4, #16]
 8013068:	b942      	cbnz	r2, 801307c <__swsetup_r+0xa4>
 801306a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801306e:	d1c5      	bne.n	8012ffc <__swsetup_r+0x24>
 8013070:	bd38      	pop	{r3, r4, r5, pc}
 8013072:	0799      	lsls	r1, r3, #30
 8013074:	bf58      	it	pl
 8013076:	6962      	ldrpl	r2, [r4, #20]
 8013078:	60a2      	str	r2, [r4, #8]
 801307a:	e7f4      	b.n	8013066 <__swsetup_r+0x8e>
 801307c:	2000      	movs	r0, #0
 801307e:	e7f7      	b.n	8013070 <__swsetup_r+0x98>
 8013080:	20000060 	.word	0x20000060

08013084 <_raise_r>:
 8013084:	291f      	cmp	r1, #31
 8013086:	b538      	push	{r3, r4, r5, lr}
 8013088:	4605      	mov	r5, r0
 801308a:	460c      	mov	r4, r1
 801308c:	d904      	bls.n	8013098 <_raise_r+0x14>
 801308e:	2316      	movs	r3, #22
 8013090:	6003      	str	r3, [r0, #0]
 8013092:	f04f 30ff 	mov.w	r0, #4294967295
 8013096:	bd38      	pop	{r3, r4, r5, pc}
 8013098:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801309a:	b112      	cbz	r2, 80130a2 <_raise_r+0x1e>
 801309c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130a0:	b94b      	cbnz	r3, 80130b6 <_raise_r+0x32>
 80130a2:	4628      	mov	r0, r5
 80130a4:	f000 f830 	bl	8013108 <_getpid_r>
 80130a8:	4622      	mov	r2, r4
 80130aa:	4601      	mov	r1, r0
 80130ac:	4628      	mov	r0, r5
 80130ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130b2:	f000 b817 	b.w	80130e4 <_kill_r>
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d00a      	beq.n	80130d0 <_raise_r+0x4c>
 80130ba:	1c59      	adds	r1, r3, #1
 80130bc:	d103      	bne.n	80130c6 <_raise_r+0x42>
 80130be:	2316      	movs	r3, #22
 80130c0:	6003      	str	r3, [r0, #0]
 80130c2:	2001      	movs	r0, #1
 80130c4:	e7e7      	b.n	8013096 <_raise_r+0x12>
 80130c6:	2100      	movs	r1, #0
 80130c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80130cc:	4620      	mov	r0, r4
 80130ce:	4798      	blx	r3
 80130d0:	2000      	movs	r0, #0
 80130d2:	e7e0      	b.n	8013096 <_raise_r+0x12>

080130d4 <raise>:
 80130d4:	4b02      	ldr	r3, [pc, #8]	@ (80130e0 <raise+0xc>)
 80130d6:	4601      	mov	r1, r0
 80130d8:	6818      	ldr	r0, [r3, #0]
 80130da:	f7ff bfd3 	b.w	8013084 <_raise_r>
 80130de:	bf00      	nop
 80130e0:	20000060 	.word	0x20000060

080130e4 <_kill_r>:
 80130e4:	b538      	push	{r3, r4, r5, lr}
 80130e6:	4d07      	ldr	r5, [pc, #28]	@ (8013104 <_kill_r+0x20>)
 80130e8:	2300      	movs	r3, #0
 80130ea:	4604      	mov	r4, r0
 80130ec:	4608      	mov	r0, r1
 80130ee:	4611      	mov	r1, r2
 80130f0:	602b      	str	r3, [r5, #0]
 80130f2:	f7ef fabb 	bl	800266c <_kill>
 80130f6:	1c43      	adds	r3, r0, #1
 80130f8:	d102      	bne.n	8013100 <_kill_r+0x1c>
 80130fa:	682b      	ldr	r3, [r5, #0]
 80130fc:	b103      	cbz	r3, 8013100 <_kill_r+0x1c>
 80130fe:	6023      	str	r3, [r4, #0]
 8013100:	bd38      	pop	{r3, r4, r5, pc}
 8013102:	bf00      	nop
 8013104:	2000138c 	.word	0x2000138c

08013108 <_getpid_r>:
 8013108:	f7ef baa8 	b.w	800265c <_getpid>

0801310c <__swhatbuf_r>:
 801310c:	b570      	push	{r4, r5, r6, lr}
 801310e:	460c      	mov	r4, r1
 8013110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013114:	2900      	cmp	r1, #0
 8013116:	b096      	sub	sp, #88	@ 0x58
 8013118:	4615      	mov	r5, r2
 801311a:	461e      	mov	r6, r3
 801311c:	da0d      	bge.n	801313a <__swhatbuf_r+0x2e>
 801311e:	89a3      	ldrh	r3, [r4, #12]
 8013120:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013124:	f04f 0100 	mov.w	r1, #0
 8013128:	bf14      	ite	ne
 801312a:	2340      	movne	r3, #64	@ 0x40
 801312c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013130:	2000      	movs	r0, #0
 8013132:	6031      	str	r1, [r6, #0]
 8013134:	602b      	str	r3, [r5, #0]
 8013136:	b016      	add	sp, #88	@ 0x58
 8013138:	bd70      	pop	{r4, r5, r6, pc}
 801313a:	466a      	mov	r2, sp
 801313c:	f000 f848 	bl	80131d0 <_fstat_r>
 8013140:	2800      	cmp	r0, #0
 8013142:	dbec      	blt.n	801311e <__swhatbuf_r+0x12>
 8013144:	9901      	ldr	r1, [sp, #4]
 8013146:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801314a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801314e:	4259      	negs	r1, r3
 8013150:	4159      	adcs	r1, r3
 8013152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013156:	e7eb      	b.n	8013130 <__swhatbuf_r+0x24>

08013158 <__smakebuf_r>:
 8013158:	898b      	ldrh	r3, [r1, #12]
 801315a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801315c:	079d      	lsls	r5, r3, #30
 801315e:	4606      	mov	r6, r0
 8013160:	460c      	mov	r4, r1
 8013162:	d507      	bpl.n	8013174 <__smakebuf_r+0x1c>
 8013164:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013168:	6023      	str	r3, [r4, #0]
 801316a:	6123      	str	r3, [r4, #16]
 801316c:	2301      	movs	r3, #1
 801316e:	6163      	str	r3, [r4, #20]
 8013170:	b003      	add	sp, #12
 8013172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013174:	ab01      	add	r3, sp, #4
 8013176:	466a      	mov	r2, sp
 8013178:	f7ff ffc8 	bl	801310c <__swhatbuf_r>
 801317c:	9f00      	ldr	r7, [sp, #0]
 801317e:	4605      	mov	r5, r0
 8013180:	4639      	mov	r1, r7
 8013182:	4630      	mov	r0, r6
 8013184:	f7fb fcb2 	bl	800eaec <_malloc_r>
 8013188:	b948      	cbnz	r0, 801319e <__smakebuf_r+0x46>
 801318a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801318e:	059a      	lsls	r2, r3, #22
 8013190:	d4ee      	bmi.n	8013170 <__smakebuf_r+0x18>
 8013192:	f023 0303 	bic.w	r3, r3, #3
 8013196:	f043 0302 	orr.w	r3, r3, #2
 801319a:	81a3      	strh	r3, [r4, #12]
 801319c:	e7e2      	b.n	8013164 <__smakebuf_r+0xc>
 801319e:	89a3      	ldrh	r3, [r4, #12]
 80131a0:	6020      	str	r0, [r4, #0]
 80131a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80131a6:	81a3      	strh	r3, [r4, #12]
 80131a8:	9b01      	ldr	r3, [sp, #4]
 80131aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80131ae:	b15b      	cbz	r3, 80131c8 <__smakebuf_r+0x70>
 80131b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131b4:	4630      	mov	r0, r6
 80131b6:	f000 f81d 	bl	80131f4 <_isatty_r>
 80131ba:	b128      	cbz	r0, 80131c8 <__smakebuf_r+0x70>
 80131bc:	89a3      	ldrh	r3, [r4, #12]
 80131be:	f023 0303 	bic.w	r3, r3, #3
 80131c2:	f043 0301 	orr.w	r3, r3, #1
 80131c6:	81a3      	strh	r3, [r4, #12]
 80131c8:	89a3      	ldrh	r3, [r4, #12]
 80131ca:	431d      	orrs	r5, r3
 80131cc:	81a5      	strh	r5, [r4, #12]
 80131ce:	e7cf      	b.n	8013170 <__smakebuf_r+0x18>

080131d0 <_fstat_r>:
 80131d0:	b538      	push	{r3, r4, r5, lr}
 80131d2:	4d07      	ldr	r5, [pc, #28]	@ (80131f0 <_fstat_r+0x20>)
 80131d4:	2300      	movs	r3, #0
 80131d6:	4604      	mov	r4, r0
 80131d8:	4608      	mov	r0, r1
 80131da:	4611      	mov	r1, r2
 80131dc:	602b      	str	r3, [r5, #0]
 80131de:	f7ef fa89 	bl	80026f4 <_fstat>
 80131e2:	1c43      	adds	r3, r0, #1
 80131e4:	d102      	bne.n	80131ec <_fstat_r+0x1c>
 80131e6:	682b      	ldr	r3, [r5, #0]
 80131e8:	b103      	cbz	r3, 80131ec <_fstat_r+0x1c>
 80131ea:	6023      	str	r3, [r4, #0]
 80131ec:	bd38      	pop	{r3, r4, r5, pc}
 80131ee:	bf00      	nop
 80131f0:	2000138c 	.word	0x2000138c

080131f4 <_isatty_r>:
 80131f4:	b538      	push	{r3, r4, r5, lr}
 80131f6:	4d06      	ldr	r5, [pc, #24]	@ (8013210 <_isatty_r+0x1c>)
 80131f8:	2300      	movs	r3, #0
 80131fa:	4604      	mov	r4, r0
 80131fc:	4608      	mov	r0, r1
 80131fe:	602b      	str	r3, [r5, #0]
 8013200:	f7ef fa88 	bl	8002714 <_isatty>
 8013204:	1c43      	adds	r3, r0, #1
 8013206:	d102      	bne.n	801320e <_isatty_r+0x1a>
 8013208:	682b      	ldr	r3, [r5, #0]
 801320a:	b103      	cbz	r3, 801320e <_isatty_r+0x1a>
 801320c:	6023      	str	r3, [r4, #0]
 801320e:	bd38      	pop	{r3, r4, r5, pc}
 8013210:	2000138c 	.word	0x2000138c

08013214 <_init>:
 8013214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013216:	bf00      	nop
 8013218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801321a:	bc08      	pop	{r3}
 801321c:	469e      	mov	lr, r3
 801321e:	4770      	bx	lr

08013220 <_fini>:
 8013220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013222:	bf00      	nop
 8013224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013226:	bc08      	pop	{r3}
 8013228:	469e      	mov	lr, r3
 801322a:	4770      	bx	lr
