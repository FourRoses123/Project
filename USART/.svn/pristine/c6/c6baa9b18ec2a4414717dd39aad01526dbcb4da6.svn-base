
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baa4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800bc38  0800bc38  0000cc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c138  0800c138  0000e208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c138  0800c138  0000d138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c140  0800c140  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c140  0800c140  0000d140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c144  0800c144  0000d144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800c148  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000208  0800c350  0000e208  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200008c0  0800c350  0000e8c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134a7  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003485  00000000  00000000  000216df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00024b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b37  00000000  00000000  00025a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ae1  00000000  00000000  00026577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017248  00000000  00000000  0004d058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d23e5  00000000  00000000  000642a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f50  00000000  00000000  001366c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0013b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc1c 	.word	0x0800bc1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800bc1c 	.word	0x0800bc1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b9be 	b.w	8001238 <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f83c 	bl	8000f40 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2lz>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	f7ff fdfd 	bl	8000adc <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x1c>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb73 	bl	80005f8 <__aeabi_dmul>
 8000f12:	f7ff fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff faf4 	bl	8000504 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb6a 	bl	80005f8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9ac 	bl	8000288 <__aeabi_dsub>
 8000f30:	f7ff fe3a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	468e      	mov	lr, r1
 8000f48:	4604      	mov	r4, r0
 8000f4a:	4688      	mov	r8, r1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d14a      	bne.n	8000fe6 <__udivmoddi4+0xa6>
 8000f50:	428a      	cmp	r2, r1
 8000f52:	4617      	mov	r7, r2
 8000f54:	d962      	bls.n	800101c <__udivmoddi4+0xdc>
 8000f56:	fab2 f682 	clz	r6, r2
 8000f5a:	b14e      	cbz	r6, 8000f70 <__udivmoddi4+0x30>
 8000f5c:	f1c6 0320 	rsb	r3, r6, #32
 8000f60:	fa01 f806 	lsl.w	r8, r1, r6
 8000f64:	fa20 f303 	lsr.w	r3, r0, r3
 8000f68:	40b7      	lsls	r7, r6
 8000f6a:	ea43 0808 	orr.w	r8, r3, r8
 8000f6e:	40b4      	lsls	r4, r6
 8000f70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f74:	fa1f fc87 	uxth.w	ip, r7
 8000f78:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f7c:	0c23      	lsrs	r3, r4, #16
 8000f7e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f86:	fb01 f20c 	mul.w	r2, r1, ip
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d909      	bls.n	8000fa2 <__udivmoddi4+0x62>
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f94:	f080 80ea 	bcs.w	800116c <__udivmoddi4+0x22c>
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f240 80e7 	bls.w	800116c <__udivmoddi4+0x22c>
 8000f9e:	3902      	subs	r1, #2
 8000fa0:	443b      	add	r3, r7
 8000fa2:	1a9a      	subs	r2, r3, r2
 8000fa4:	b2a3      	uxth	r3, r4
 8000fa6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000faa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fb2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fb6:	459c      	cmp	ip, r3
 8000fb8:	d909      	bls.n	8000fce <__udivmoddi4+0x8e>
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fc0:	f080 80d6 	bcs.w	8001170 <__udivmoddi4+0x230>
 8000fc4:	459c      	cmp	ip, r3
 8000fc6:	f240 80d3 	bls.w	8001170 <__udivmoddi4+0x230>
 8000fca:	443b      	add	r3, r7
 8000fcc:	3802      	subs	r0, #2
 8000fce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fd2:	eba3 030c 	sub.w	r3, r3, ip
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	b11d      	cbz	r5, 8000fe2 <__udivmoddi4+0xa2>
 8000fda:	40f3      	lsrs	r3, r6
 8000fdc:	2200      	movs	r2, #0
 8000fde:	e9c5 3200 	strd	r3, r2, [r5]
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d905      	bls.n	8000ff6 <__udivmoddi4+0xb6>
 8000fea:	b10d      	cbz	r5, 8000ff0 <__udivmoddi4+0xb0>
 8000fec:	e9c5 0100 	strd	r0, r1, [r5]
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e7f5      	b.n	8000fe2 <__udivmoddi4+0xa2>
 8000ff6:	fab3 f183 	clz	r1, r3
 8000ffa:	2900      	cmp	r1, #0
 8000ffc:	d146      	bne.n	800108c <__udivmoddi4+0x14c>
 8000ffe:	4573      	cmp	r3, lr
 8001000:	d302      	bcc.n	8001008 <__udivmoddi4+0xc8>
 8001002:	4282      	cmp	r2, r0
 8001004:	f200 8105 	bhi.w	8001212 <__udivmoddi4+0x2d2>
 8001008:	1a84      	subs	r4, r0, r2
 800100a:	eb6e 0203 	sbc.w	r2, lr, r3
 800100e:	2001      	movs	r0, #1
 8001010:	4690      	mov	r8, r2
 8001012:	2d00      	cmp	r5, #0
 8001014:	d0e5      	beq.n	8000fe2 <__udivmoddi4+0xa2>
 8001016:	e9c5 4800 	strd	r4, r8, [r5]
 800101a:	e7e2      	b.n	8000fe2 <__udivmoddi4+0xa2>
 800101c:	2a00      	cmp	r2, #0
 800101e:	f000 8090 	beq.w	8001142 <__udivmoddi4+0x202>
 8001022:	fab2 f682 	clz	r6, r2
 8001026:	2e00      	cmp	r6, #0
 8001028:	f040 80a4 	bne.w	8001174 <__udivmoddi4+0x234>
 800102c:	1a8a      	subs	r2, r1, r2
 800102e:	0c03      	lsrs	r3, r0, #16
 8001030:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001034:	b280      	uxth	r0, r0
 8001036:	b2bc      	uxth	r4, r7
 8001038:	2101      	movs	r1, #1
 800103a:	fbb2 fcfe 	udiv	ip, r2, lr
 800103e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001046:	fb04 f20c 	mul.w	r2, r4, ip
 800104a:	429a      	cmp	r2, r3
 800104c:	d907      	bls.n	800105e <__udivmoddi4+0x11e>
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001054:	d202      	bcs.n	800105c <__udivmoddi4+0x11c>
 8001056:	429a      	cmp	r2, r3
 8001058:	f200 80e0 	bhi.w	800121c <__udivmoddi4+0x2dc>
 800105c:	46c4      	mov	ip, r8
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	fbb3 f2fe 	udiv	r2, r3, lr
 8001064:	fb0e 3312 	mls	r3, lr, r2, r3
 8001068:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800106c:	fb02 f404 	mul.w	r4, r2, r4
 8001070:	429c      	cmp	r4, r3
 8001072:	d907      	bls.n	8001084 <__udivmoddi4+0x144>
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	f102 30ff 	add.w	r0, r2, #4294967295
 800107a:	d202      	bcs.n	8001082 <__udivmoddi4+0x142>
 800107c:	429c      	cmp	r4, r3
 800107e:	f200 80ca 	bhi.w	8001216 <__udivmoddi4+0x2d6>
 8001082:	4602      	mov	r2, r0
 8001084:	1b1b      	subs	r3, r3, r4
 8001086:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800108a:	e7a5      	b.n	8000fd8 <__udivmoddi4+0x98>
 800108c:	f1c1 0620 	rsb	r6, r1, #32
 8001090:	408b      	lsls	r3, r1
 8001092:	fa22 f706 	lsr.w	r7, r2, r6
 8001096:	431f      	orrs	r7, r3
 8001098:	fa0e f401 	lsl.w	r4, lr, r1
 800109c:	fa20 f306 	lsr.w	r3, r0, r6
 80010a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80010a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010a8:	4323      	orrs	r3, r4
 80010aa:	fa00 f801 	lsl.w	r8, r0, r1
 80010ae:	fa1f fc87 	uxth.w	ip, r7
 80010b2:	fbbe f0f9 	udiv	r0, lr, r9
 80010b6:	0c1c      	lsrs	r4, r3, #16
 80010b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80010bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80010c4:	45a6      	cmp	lr, r4
 80010c6:	fa02 f201 	lsl.w	r2, r2, r1
 80010ca:	d909      	bls.n	80010e0 <__udivmoddi4+0x1a0>
 80010cc:	193c      	adds	r4, r7, r4
 80010ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80010d2:	f080 809c 	bcs.w	800120e <__udivmoddi4+0x2ce>
 80010d6:	45a6      	cmp	lr, r4
 80010d8:	f240 8099 	bls.w	800120e <__udivmoddi4+0x2ce>
 80010dc:	3802      	subs	r0, #2
 80010de:	443c      	add	r4, r7
 80010e0:	eba4 040e 	sub.w	r4, r4, lr
 80010e4:	fa1f fe83 	uxth.w	lr, r3
 80010e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010ec:	fb09 4413 	mls	r4, r9, r3, r4
 80010f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80010f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80010f8:	45a4      	cmp	ip, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x1ce>
 80010fc:	193c      	adds	r4, r7, r4
 80010fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8001102:	f080 8082 	bcs.w	800120a <__udivmoddi4+0x2ca>
 8001106:	45a4      	cmp	ip, r4
 8001108:	d97f      	bls.n	800120a <__udivmoddi4+0x2ca>
 800110a:	3b02      	subs	r3, #2
 800110c:	443c      	add	r4, r7
 800110e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001112:	eba4 040c 	sub.w	r4, r4, ip
 8001116:	fba0 ec02 	umull	lr, ip, r0, r2
 800111a:	4564      	cmp	r4, ip
 800111c:	4673      	mov	r3, lr
 800111e:	46e1      	mov	r9, ip
 8001120:	d362      	bcc.n	80011e8 <__udivmoddi4+0x2a8>
 8001122:	d05f      	beq.n	80011e4 <__udivmoddi4+0x2a4>
 8001124:	b15d      	cbz	r5, 800113e <__udivmoddi4+0x1fe>
 8001126:	ebb8 0203 	subs.w	r2, r8, r3
 800112a:	eb64 0409 	sbc.w	r4, r4, r9
 800112e:	fa04 f606 	lsl.w	r6, r4, r6
 8001132:	fa22 f301 	lsr.w	r3, r2, r1
 8001136:	431e      	orrs	r6, r3
 8001138:	40cc      	lsrs	r4, r1
 800113a:	e9c5 6400 	strd	r6, r4, [r5]
 800113e:	2100      	movs	r1, #0
 8001140:	e74f      	b.n	8000fe2 <__udivmoddi4+0xa2>
 8001142:	fbb1 fcf2 	udiv	ip, r1, r2
 8001146:	0c01      	lsrs	r1, r0, #16
 8001148:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800114c:	b280      	uxth	r0, r0
 800114e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001152:	463b      	mov	r3, r7
 8001154:	4638      	mov	r0, r7
 8001156:	463c      	mov	r4, r7
 8001158:	46b8      	mov	r8, r7
 800115a:	46be      	mov	lr, r7
 800115c:	2620      	movs	r6, #32
 800115e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001162:	eba2 0208 	sub.w	r2, r2, r8
 8001166:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800116a:	e766      	b.n	800103a <__udivmoddi4+0xfa>
 800116c:	4601      	mov	r1, r0
 800116e:	e718      	b.n	8000fa2 <__udivmoddi4+0x62>
 8001170:	4610      	mov	r0, r2
 8001172:	e72c      	b.n	8000fce <__udivmoddi4+0x8e>
 8001174:	f1c6 0220 	rsb	r2, r6, #32
 8001178:	fa2e f302 	lsr.w	r3, lr, r2
 800117c:	40b7      	lsls	r7, r6
 800117e:	40b1      	lsls	r1, r6
 8001180:	fa20 f202 	lsr.w	r2, r0, r2
 8001184:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001188:	430a      	orrs	r2, r1
 800118a:	fbb3 f8fe 	udiv	r8, r3, lr
 800118e:	b2bc      	uxth	r4, r7
 8001190:	fb0e 3318 	mls	r3, lr, r8, r3
 8001194:	0c11      	lsrs	r1, r2, #16
 8001196:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800119a:	fb08 f904 	mul.w	r9, r8, r4
 800119e:	40b0      	lsls	r0, r6
 80011a0:	4589      	cmp	r9, r1
 80011a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011a6:	b280      	uxth	r0, r0
 80011a8:	d93e      	bls.n	8001228 <__udivmoddi4+0x2e8>
 80011aa:	1879      	adds	r1, r7, r1
 80011ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80011b0:	d201      	bcs.n	80011b6 <__udivmoddi4+0x276>
 80011b2:	4589      	cmp	r9, r1
 80011b4:	d81f      	bhi.n	80011f6 <__udivmoddi4+0x2b6>
 80011b6:	eba1 0109 	sub.w	r1, r1, r9
 80011ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80011be:	fb09 f804 	mul.w	r8, r9, r4
 80011c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80011c6:	b292      	uxth	r2, r2
 80011c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011cc:	4542      	cmp	r2, r8
 80011ce:	d229      	bcs.n	8001224 <__udivmoddi4+0x2e4>
 80011d0:	18ba      	adds	r2, r7, r2
 80011d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80011d6:	d2c4      	bcs.n	8001162 <__udivmoddi4+0x222>
 80011d8:	4542      	cmp	r2, r8
 80011da:	d2c2      	bcs.n	8001162 <__udivmoddi4+0x222>
 80011dc:	f1a9 0102 	sub.w	r1, r9, #2
 80011e0:	443a      	add	r2, r7
 80011e2:	e7be      	b.n	8001162 <__udivmoddi4+0x222>
 80011e4:	45f0      	cmp	r8, lr
 80011e6:	d29d      	bcs.n	8001124 <__udivmoddi4+0x1e4>
 80011e8:	ebbe 0302 	subs.w	r3, lr, r2
 80011ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011f0:	3801      	subs	r0, #1
 80011f2:	46e1      	mov	r9, ip
 80011f4:	e796      	b.n	8001124 <__udivmoddi4+0x1e4>
 80011f6:	eba7 0909 	sub.w	r9, r7, r9
 80011fa:	4449      	add	r1, r9
 80011fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8001200:	fbb1 f9fe 	udiv	r9, r1, lr
 8001204:	fb09 f804 	mul.w	r8, r9, r4
 8001208:	e7db      	b.n	80011c2 <__udivmoddi4+0x282>
 800120a:	4673      	mov	r3, lr
 800120c:	e77f      	b.n	800110e <__udivmoddi4+0x1ce>
 800120e:	4650      	mov	r0, sl
 8001210:	e766      	b.n	80010e0 <__udivmoddi4+0x1a0>
 8001212:	4608      	mov	r0, r1
 8001214:	e6fd      	b.n	8001012 <__udivmoddi4+0xd2>
 8001216:	443b      	add	r3, r7
 8001218:	3a02      	subs	r2, #2
 800121a:	e733      	b.n	8001084 <__udivmoddi4+0x144>
 800121c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001220:	443b      	add	r3, r7
 8001222:	e71c      	b.n	800105e <__udivmoddi4+0x11e>
 8001224:	4649      	mov	r1, r9
 8001226:	e79c      	b.n	8001162 <__udivmoddi4+0x222>
 8001228:	eba1 0109 	sub.w	r1, r1, r9
 800122c:	46c4      	mov	ip, r8
 800122e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001232:	fb09 f804 	mul.w	r8, r9, r4
 8001236:	e7c4      	b.n	80011c2 <__udivmoddi4+0x282>

08001238 <__aeabi_idiv0>:
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <MX_DMA_Init+0xa0>)
 8001244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001246:	4a25      	ldr	r2, [pc, #148]	@ (80012dc <MX_DMA_Init+0xa0>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6493      	str	r3, [r2, #72]	@ 0x48
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <MX_DMA_Init+0xa0>)
 8001250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <MX_DMA_Init+0xa0>)
 800125c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800125e:	4a1f      	ldr	r2, [pc, #124]	@ (80012dc <MX_DMA_Init+0xa0>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6493      	str	r3, [r2, #72]	@ 0x48
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <MX_DMA_Init+0xa0>)
 8001268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	200c      	movs	r0, #12
 8001278:	f002 f80f 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800127c:	200c      	movs	r0, #12
 800127e:	f002 f828 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	200d      	movs	r0, #13
 8001288:	f002 f807 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800128c:	200d      	movs	r0, #13
 800128e:	f002 f820 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200e      	movs	r0, #14
 8001298:	f001 ffff 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800129c:	200e      	movs	r0, #14
 800129e:	f002 f818 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	200f      	movs	r0, #15
 80012a8:	f001 fff7 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012ac:	200f      	movs	r0, #15
 80012ae:	f002 f810 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2044      	movs	r0, #68	@ 0x44
 80012b8:	f001 ffef 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80012bc:	2044      	movs	r0, #68	@ 0x44
 80012be:	f002 f808 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2045      	movs	r0, #69	@ 0x45
 80012c8:	f001 ffe7 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80012cc:	2045      	movs	r0, #69	@ 0x45
 80012ce:	f002 f800 	bl	80032d2 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	4b38      	ldr	r3, [pc, #224]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4a37      	ldr	r2, [pc, #220]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 80012fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4b35      	ldr	r3, [pc, #212]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b32      	ldr	r3, [pc, #200]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a31      	ldr	r2, [pc, #196]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a2b      	ldr	r2, [pc, #172]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <MX_GPIO_Init+0xf8>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2103      	movs	r1, #3
 8001342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001346:	f002 fbdb 	bl	8003b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2110      	movs	r1, #16
 800134e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001352:	f002 fbd5 	bl	8003b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	f241 0101 	movw	r1, #4097	@ 0x1001
 800135c:	481f      	ldr	r0, [pc, #124]	@ (80013dc <MX_GPIO_Init+0xfc>)
 800135e:	f002 fbcf 	bl	8003b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin ASIC_RST_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|ASIC_RST_Pin;
 8001362:	2313      	movs	r3, #19
 8001364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137c:	f002 fa46 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8001380:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	4619      	mov	r1, r3
 8001398:	4810      	ldr	r0, [pc, #64]	@ (80013dc <MX_GPIO_Init+0xfc>)
 800139a:	f002 fa37 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : AFULL_Pin EMPTY_Pin */
  GPIO_InitStruct.Pin = AFULL_Pin|EMPTY_Pin;
 800139e:	2306      	movs	r3, #6
 80013a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a6:	2302      	movs	r3, #2
 80013a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	480a      	ldr	r0, [pc, #40]	@ (80013dc <MX_GPIO_Init+0xfc>)
 80013b2:	f002 fa2b 	bl	800380c <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S3_Pin|S4_Pin;
 80013b6:	f640 4318 	movw	r3, #3096	@ 0xc18
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_GPIO_Init+0xfc>)
 80013cc:	f002 fa1e 	bl	800380c <HAL_GPIO_Init>

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000400 	.word	0x48000400

080013e0 <main>:
uint8_t res = 0;
uint8_t open = 0;
SD_Config current_config;

int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  HAL_Init();
 80013e4:	f001 fde5 	bl	8002fb2 <HAL_Init>
  SystemClock_Config();
 80013e8:	f000 f83a 	bl	8001460 <SystemClock_Config>
  MX_GPIO_Init();
 80013ec:	f7ff ff78 	bl	80012e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f0:	f7ff ff24 	bl	800123c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013f4:	f000 ff24 	bl	8002240 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80013f8:	f000 fbf6 	bl	8001be8 <MX_SPI2_Init>
  MX_FATFS_Init();
 80013fc:	f005 ff02 	bl	8007204 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001400:	f000 fbb4 	bl	8001b6c <MX_SPI1_Init>
  if(f_open(&fil, current_log_file, FA_OPEN_APPEND | FA_WRITE) == FR_OK)
  {
	  open = 1;
  }
  current_config = load_and_apply_config();*/
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)rx_buffer, sizeof(rx_buffer));
 8001404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001408:	4911      	ldr	r1, [pc, #68]	@ (8001450 <main+0x70>)
 800140a:	4812      	ldr	r0, [pc, #72]	@ (8001454 <main+0x74>)
 800140c:	f004 fc02 	bl	8005c14 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <main+0x74>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <main+0x74>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0210 	orr.w	r2, r2, #16
 800141e:	601a      	str	r2, [r3, #0]
  //rx_length = 23;
  //if(CMD_Judge() == CMD_OK)
  			   //CMD_Execute();
  ON_R();
 8001420:	2201      	movs	r2, #1
 8001422:	2101      	movs	r1, #1
 8001424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001428:	f002 fb6a 	bl	8003b00 <HAL_GPIO_WritePin>

  while (1)
  {
	  if(data_ready)
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <main+0x78>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0fa      	beq.n	800142c <main+0x4c>
	  {
		  if(CMD_Judge() == CMD_OK)
 8001436:	f001 fa31 	bl	800289c <CMD_Judge>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <main+0x66>
			   CMD_Execute();
 8001440:	f001 fab2 	bl	80029a8 <CMD_Execute>
 8001444:	e7f2      	b.n	800142c <main+0x4c>
		  else
			  printf("retry\n");
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <main+0x7c>)
 8001448:	f007 f8d0 	bl	80085ec <puts>
	  if(data_ready)
 800144c:	e7ee      	b.n	800142c <main+0x4c>
 800144e:	bf00      	nop
 8001450:	20000224 	.word	0x20000224
 8001454:	20000618 	.word	0x20000618
 8001458:	20000428 	.word	0x20000428
 800145c:	0800bc38 	.word	0x0800bc38

08001460 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b096      	sub	sp, #88	@ 0x58
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2244      	movs	r2, #68	@ 0x44
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f007 f9be 	bl	80087f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001482:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001486:	f002 fb61 	bl	8003b4c <HAL_PWREx_ControlVoltageScaling>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001490:	f000 f836 	bl	8001500 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	2301      	movs	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001498:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a2:	2303      	movs	r3, #3
 80014a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80014aa:	2314      	movs	r3, #20
 80014ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ae:	2307      	movs	r3, #7
 80014b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fb9a 	bl	8003bf8 <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014ca:	f000 f819 	bl	8001500 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	230f      	movs	r3, #15
 80014d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d2:	2303      	movs	r3, #3
 80014d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	2104      	movs	r1, #4
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 ff9a 	bl	8004420 <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014f2:	f000 f805 	bl	8001500 <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3758      	adds	r7, #88	@ 0x58
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <Error_Handler>:

void Error_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  printf("Error\n");
 8001508:	4804      	ldr	r0, [pc, #16]	@ (800151c <Error_Handler+0x1c>)
 800150a:	f007 f86f 	bl	80085ec <puts>
	  HAL_Delay(1000);
 800150e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001512:	f001 fdc3 	bl	800309c <HAL_Delay>
	  printf("Error\n");
 8001516:	bf00      	nop
 8001518:	e7f6      	b.n	8001508 <Error_Handler+0x8>
 800151a:	bf00      	nop
 800151c:	0800bc40 	.word	0x0800bc40

08001520 <SPI_TransmitReceive>:
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}

uint8_t SPI_TransmitReceive(uint8_t data) //发送接收函数封装
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1 ,100);
 800152a:	f107 020f 	add.w	r2, r7, #15
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	4804      	ldr	r0, [pc, #16]	@ (8001548 <SPI_TransmitReceive+0x28>)
 8001538:	f003 fd75 	bl	8005026 <HAL_SPI_TransmitReceive>
    return rx_data;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000490 	.word	0x20000490

0800154c <SD_PowerOnSeq>:

void SD_PowerOnSeq(void) //80个时钟周期
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <SD_PowerOnSeq+0x34>)
 800155a:	f002 fad1 	bl	8003b00 <HAL_GPIO_WritePin>
    for(uint8_t i=0; i<10; i++)
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	e005      	b.n	8001570 <SD_PowerOnSeq+0x24>
    {
        SPI_TransmitReceive(0xFF);
 8001564:	20ff      	movs	r0, #255	@ 0xff
 8001566:	f7ff ffdb 	bl	8001520 <SPI_TransmitReceive>
    for(uint8_t i=0; i<10; i++)
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	3301      	adds	r3, #1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b09      	cmp	r3, #9
 8001574:	d9f6      	bls.n	8001564 <SD_PowerOnSeq+0x18>
    }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	48000400 	.word	0x48000400

08001584 <SD_SendCmd>:

uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)  //发送cmd命令，arg参数及crc校准
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	4613      	mov	r3, r2
 8001592:	71bb      	strb	r3, [r7, #6]
	uint8_t retry = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
	uint8_t response;
	do{
		retry=SPI_TransmitReceive(0xFF);
 8001598:	20ff      	movs	r0, #255	@ 0xff
 800159a:	f7ff ffc1 	bl	8001520 <SPI_TransmitReceive>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
	}while(retry!=0xFF);  //这段如果不加，发送CMD8返回值会错误
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2bff      	cmp	r3, #255	@ 0xff
 80015a6:	d1f7      	bne.n	8001598 <SD_SendCmd+0x14>

    SPI_TransmitReceive(0x40 | cmd);
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ffb5 	bl	8001520 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 24) & 0xFF);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	0e1b      	lsrs	r3, r3, #24
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ffaf 	bl	8001520 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 16) & 0xFF);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	0c1b      	lsrs	r3, r3, #16
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ffa9 	bl	8001520 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 8)  & 0xFF);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ffa3 	bl	8001520 <SPI_TransmitReceive>
    SPI_TransmitReceive(arg & 0xFF);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff9e 	bl	8001520 <SPI_TransmitReceive>
    SPI_TransmitReceive(crc | 0x01);
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff97 	bl	8001520 <SPI_TransmitReceive>
    retry = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]

	do {
	response = SPI_TransmitReceive(0xFF);
 80015f6:	20ff      	movs	r0, #255	@ 0xff
 80015f8:	f7ff ff92 	bl	8001520 <SPI_TransmitReceive>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73bb      	strb	r3, [r7, #14]
	retry++;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3301      	adds	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
	} while ((response & 0x80) && (retry < 0xFF));
 8001606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800160a:	2b00      	cmp	r3, #0
 800160c:	da02      	bge.n	8001614 <SD_SendCmd+0x90>
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2bff      	cmp	r3, #255	@ 0xff
 8001612:	d1f0      	bne.n	80015f6 <SD_SendCmd+0x72>
	return response;
 8001614:	7bbb      	ldrb	r3, [r7, #14]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <SD_Init>:

SD_Status SD_Init(void) //SD卡初始化
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
	uint8_t r1;
	uint8_t buff[6] = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	809a      	strh	r2, [r3, #4]
	uint16_t retry;
	uint8_t i;

	SD_PowerOnSeq();
 800162e:	f7ff ff8d 	bl	800154c <SD_PowerOnSeq>
	SD_CS_LOW();
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001638:	486f      	ldr	r0, [pc, #444]	@ (80017f8 <SD_Init+0x1d8>)
 800163a:	f002 fa61 	bl	8003b00 <HAL_GPIO_WritePin>

	do{
		r1 = SD_SendCmd(CMD0 ,0, 0x95);
 800163e:	2295      	movs	r2, #149	@ 0x95
 8001640:	2100      	movs	r1, #0
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff ff9e 	bl	8001584 <SD_SendCmd>
 8001648:	4603      	mov	r3, r0
 800164a:	733b      	strb	r3, [r7, #12]
	}while(r1!=0x01);
 800164c:	7b3b      	ldrb	r3, [r7, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d1f5      	bne.n	800163e <SD_Init+0x1e>

	SD_TYPE=0;
 8001652:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <SD_Init+0x1dc>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	r1 = SD_SendCmd(CMD8, 0x1AA, 0x87);
 8001658:	2287      	movs	r2, #135	@ 0x87
 800165a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800165e:	2008      	movs	r0, #8
 8001660:	f7ff ff90 	bl	8001584 <SD_SendCmd>
 8001664:	4603      	mov	r3, r0
 8001666:	733b      	strb	r3, [r7, #12]
	if(r1==0x01)
 8001668:	7b3b      	ldrb	r3, [r7, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d161      	bne.n	8001732 <SD_Init+0x112>
	{
		for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0xFF);
 800166e:	2300      	movs	r3, #0
 8001670:	737b      	strb	r3, [r7, #13]
 8001672:	e00d      	b.n	8001690 <SD_Init+0x70>
 8001674:	7b7c      	ldrb	r4, [r7, #13]
 8001676:	20ff      	movs	r0, #255	@ 0xff
 8001678:	f7ff ff52 	bl	8001520 <SPI_TransmitReceive>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	f104 0310 	add.w	r3, r4, #16
 8001684:	443b      	add	r3, r7
 8001686:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800168a:	7b7b      	ldrb	r3, [r7, #13]
 800168c:	3301      	adds	r3, #1
 800168e:	737b      	strb	r3, [r7, #13]
 8001690:	7b7b      	ldrb	r3, [r7, #13]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d9ee      	bls.n	8001674 <SD_Init+0x54>
		if(buff[2]==0X01&&buff[3]==0XAA)
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	2b01      	cmp	r3, #1
 800169a:	f040 8098 	bne.w	80017ce <SD_Init+0x1ae>
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2baa      	cmp	r3, #170	@ 0xaa
 80016a2:	f040 8094 	bne.w	80017ce <SD_Init+0x1ae>
		{
			retry=0XFFFE;
 80016a6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80016aa:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2037      	movs	r0, #55	@ 0x37
 80016b2:	f7ff ff67 	bl	8001584 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0x40000000,0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016bc:	2029      	movs	r0, #41	@ 0x29
 80016be:	f7ff ff61 	bl	8001584 <SD_SendCmd>
 80016c2:	4603      	mov	r3, r0
 80016c4:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 80016c6:	7b3b      	ldrb	r3, [r7, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <SD_Init+0xb6>
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	1e5a      	subs	r2, r3, #1
 80016d0:	81fa      	strh	r2, [r7, #14]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ea      	bne.n	80016ac <SD_Init+0x8c>
			r1=SD_SendCmd(CMD58,0,0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	203a      	movs	r0, #58	@ 0x3a
 80016dc:	f7ff ff52 	bl	8001584 <SD_SendCmd>
 80016e0:	4603      	mov	r3, r0
 80016e2:	733b      	strb	r3, [r7, #12]
			if(retry&&r1==0)
 80016e4:	89fb      	ldrh	r3, [r7, #14]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d071      	beq.n	80017ce <SD_Init+0x1ae>
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d16e      	bne.n	80017ce <SD_Init+0x1ae>
			{
				for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0XFF);
 80016f0:	2300      	movs	r3, #0
 80016f2:	737b      	strb	r3, [r7, #13]
 80016f4:	e00d      	b.n	8001712 <SD_Init+0xf2>
 80016f6:	7b7c      	ldrb	r4, [r7, #13]
 80016f8:	20ff      	movs	r0, #255	@ 0xff
 80016fa:	f7ff ff11 	bl	8001520 <SPI_TransmitReceive>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	f104 0310 	add.w	r3, r4, #16
 8001706:	443b      	add	r3, r7
 8001708:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800170c:	7b7b      	ldrb	r3, [r7, #13]
 800170e:	3301      	adds	r3, #1
 8001710:	737b      	strb	r3, [r7, #13]
 8001712:	7b7b      	ldrb	r3, [r7, #13]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d9ee      	bls.n	80016f6 <SD_Init+0xd6>
				if(buff[0]&0x40){
 8001718:	793b      	ldrb	r3, [r7, #4]
 800171a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <SD_Init+0x10a>
					SD_TYPE=V2HC;
 8001722:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <SD_Init+0x1dc>)
 8001724:	2206      	movs	r2, #6
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e051      	b.n	80017ce <SD_Init+0x1ae>
				}else {
					SD_TYPE=V2;
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <SD_Init+0x1dc>)
 800172c:	2204      	movs	r2, #4
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e04d      	b.n	80017ce <SD_Init+0x1ae>
			}
		}
	}
	else
	{
		SD_SendCmd(CMD55,0,0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2037      	movs	r0, #55	@ 0x37
 8001738:	f7ff ff24 	bl	8001584 <SD_SendCmd>
		r1=SD_SendCmd(ACMD41,0,0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2029      	movs	r0, #41	@ 0x29
 8001742:	f7ff ff1f 	bl	8001584 <SD_SendCmd>
 8001746:	4603      	mov	r3, r0
 8001748:	733b      	strb	r3, [r7, #12]
		if(r1<=1)
 800174a:	7b3b      	ldrb	r3, [r7, #12]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d81a      	bhi.n	8001786 <SD_Init+0x166>
		{
			SD_TYPE=V1;
 8001750:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <SD_Init+0x1dc>)
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 8001756:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800175a:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	2037      	movs	r0, #55	@ 0x37
 8001762:	f7ff ff0f 	bl	8001584 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0,0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2029      	movs	r0, #41	@ 0x29
 800176c:	f7ff ff0a 	bl	8001584 <SD_SendCmd>
 8001770:	4603      	mov	r3, r0
 8001772:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d01a      	beq.n	80017b0 <SD_Init+0x190>
 800177a:	89fb      	ldrh	r3, [r7, #14]
 800177c:	1e5a      	subs	r2, r3, #1
 800177e:	81fa      	strh	r2, [r7, #14]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1eb      	bne.n	800175c <SD_Init+0x13c>
 8001784:	e014      	b.n	80017b0 <SD_Init+0x190>
		}else
		{
			SD_TYPE=MMC;
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <SD_Init+0x1dc>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 800178c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001790:	81fb      	strh	r3, [r7, #14]
			do
			{
				r1=SD_SendCmd(CMD1,0,0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fef4 	bl	8001584 <SD_SendCmd>
 800179c:	4603      	mov	r3, r0
 800179e:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 80017a0:	7b3b      	ldrb	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <SD_Init+0x190>
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	81fa      	strh	r2, [r7, #14]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <SD_Init+0x172>
		}
		if(retry==0||SD_SendCmd(CMD16,512,0)!=0)SD_TYPE=ERR;
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <SD_Init+0x1a8>
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017bc:	2010      	movs	r0, #16
 80017be:	f7ff fee1 	bl	8001584 <SD_SendCmd>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <SD_Init+0x1ae>
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <SD_Init+0x1dc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
	}
	SD_CS_HIGH();
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017d4:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <SD_Init+0x1d8>)
 80017d6:	f002 f993 	bl	8003b00 <HAL_GPIO_WritePin>
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <SD_Init+0x1e0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]

    if(SD_TYPE != ERR)
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <SD_Init+0x1dc>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SD_Init+0x1cc>
    	return SD_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e000      	b.n	80017ee <SD_Init+0x1ce>
    else
    	return SD_ERROR;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd90      	pop	{r4, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	48000400 	.word	0x48000400
 80017fc:	2000042a 	.word	0x2000042a
 8001800:	20000490 	.word	0x20000490

08001804 <SD_ReceiveData>:

uint8_t SD_ReceiveData(uint8_t *data, uint16_t len) //从SD卡读取指定长度的数据块，len为512时为单块大小
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
   uint8_t r1;
   SD_CS_LOW();
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001816:	4817      	ldr	r0, [pc, #92]	@ (8001874 <SD_ReceiveData+0x70>)
 8001818:	f002 f972 	bl	8003b00 <HAL_GPIO_WritePin>
   do
   {
      r1 = SPI_TransmitReceive(0xFF);
 800181c:	20ff      	movs	r0, #255	@ 0xff
 800181e:	f7ff fe7f 	bl	8001520 <SPI_TransmitReceive>
 8001822:	4603      	mov	r3, r0
 8001824:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(100);
 8001826:	2064      	movs	r0, #100	@ 0x64
 8001828:	f001 fc38 	bl	800309c <HAL_Delay>
		}while(r1 != 0xFE); // sd卡spi模式单块读取的起始令牌是0xFE
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001830:	d1f4      	bne.n	800181c <SD_ReceiveData+0x18>
  while(len--)
 8001832:	e009      	b.n	8001848 <SD_ReceiveData+0x44>
  {
   *data = SPI_TransmitReceive(0xFF);
 8001834:	20ff      	movs	r0, #255	@ 0xff
 8001836:	f7ff fe73 	bl	8001520 <SPI_TransmitReceive>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	701a      	strb	r2, [r3, #0]
   data++;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	607b      	str	r3, [r7, #4]
  while(len--)
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	1e5a      	subs	r2, r3, #1
 800184c:	807a      	strh	r2, [r7, #2]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <SD_ReceiveData+0x30>
  }
  SPI_TransmitReceive(0xFF);
 8001852:	20ff      	movs	r0, #255	@ 0xff
 8001854:	f7ff fe64 	bl	8001520 <SPI_TransmitReceive>
  SPI_TransmitReceive(0xFF);
 8001858:	20ff      	movs	r0, #255	@ 0xff
 800185a:	f7ff fe61 	bl	8001520 <SPI_TransmitReceive>
  SD_CS_HIGH();
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001864:	4803      	ldr	r0, [pc, #12]	@ (8001874 <SD_ReceiveData+0x70>)
 8001866:	f002 f94b 	bl	8003b00 <HAL_GPIO_WritePin>
  return 0;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	48000400 	.word	0x48000400

08001878 <SD_SendBlock>:

uint8_t SD_SendBlock(uint8_t*buf,uint8_t cmd) //写入扇区内容，512字节
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint8_t r1;
	do{
		r1=SPI_TransmitReceive(0xFF);
 8001884:	20ff      	movs	r0, #255	@ 0xff
 8001886:	f7ff fe4b 	bl	8001520 <SPI_TransmitReceive>
 800188a:	4603      	mov	r3, r0
 800188c:	737b      	strb	r3, [r7, #13]
	}while(r1!=0xFF);
 800188e:	7b7b      	ldrb	r3, [r7, #13]
 8001890:	2bff      	cmp	r3, #255	@ 0xff
 8001892:	d1f7      	bne.n	8001884 <SD_SendBlock+0xc>

	SPI_TransmitReceive(cmd);
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fe42 	bl	8001520 <SPI_TransmitReceive>
	if(cmd!=0xFD) //0xFD为多块写入停止令牌
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	2bfd      	cmp	r3, #253	@ 0xfd
 80018a0:	d022      	beq.n	80018e8 <SD_SendBlock+0x70>
	{
		for(i = 0;i < 512;i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	81fb      	strh	r3, [r7, #14]
 80018a6:	e009      	b.n	80018bc <SD_SendBlock+0x44>
			SPI_TransmitReceive(buf[i]);
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe35 	bl	8001520 <SPI_TransmitReceive>
		for(i = 0;i < 512;i++)
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	3301      	adds	r3, #1
 80018ba:	81fb      	strh	r3, [r7, #14]
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018c2:	d3f1      	bcc.n	80018a8 <SD_SendBlock+0x30>
		SPI_TransmitReceive(0xFF);
 80018c4:	20ff      	movs	r0, #255	@ 0xff
 80018c6:	f7ff fe2b 	bl	8001520 <SPI_TransmitReceive>
		SPI_TransmitReceive(0xFF);
 80018ca:	20ff      	movs	r0, #255	@ 0xff
 80018cc:	f7ff fe28 	bl	8001520 <SPI_TransmitReceive>
		i=SPI_TransmitReceive(0xFF);
 80018d0:	20ff      	movs	r0, #255	@ 0xff
 80018d2:	f7ff fe25 	bl	8001520 <SPI_TransmitReceive>
 80018d6:	4603      	mov	r3, r0
 80018d8:	81fb      	strh	r3, [r7, #14]
		if((i&0x1F)!=0x05) //低5位为状态码，高3位为保留，应舍弃，0x05表示接收正确
 80018da:	89fb      	ldrh	r3, [r7, #14]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d001      	beq.n	80018e8 <SD_SendBlock+0x70>
			return 2;
 80018e4:	2302      	movs	r3, #2
 80018e6:	e000      	b.n	80018ea <SD_SendBlock+0x72>
	}
    return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <SD_ReadDisk>:

uint8_t SD_ReadDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //读SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001908:	4824      	ldr	r0, [pc, #144]	@ (800199c <SD_ReadDisk+0xa8>)
 800190a:	f002 f8f9 	bl	8003b00 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <SD_ReadDisk+0xac>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b06      	cmp	r3, #6
 8001914:	d002      	beq.n	800191c <SD_ReadDisk+0x28>
		sector *= 512;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	025b      	lsls	r3, r3, #9
 800191a:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d111      	bne.n	8001946 <SD_ReadDisk+0x52>
	{
		r1=SD_SendCmd(CMD17,sector,0);
 8001922:	2200      	movs	r2, #0
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	2011      	movs	r0, #17
 8001928:	f7ff fe2c 	bl	8001584 <SD_SendCmd>
 800192c:	4603      	mov	r3, r0
 800192e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d127      	bne.n	8001986 <SD_ReadDisk+0x92>
			r1=SD_ReceiveData(buf,512);
 8001936:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff ff62 	bl	8001804 <SD_ReceiveData>
 8001940:	4603      	mov	r3, r0
 8001942:	75fb      	strb	r3, [r7, #23]
 8001944:	e01f      	b.n	8001986 <SD_ReadDisk+0x92>
	}
	else
	{
		r1=SD_SendCmd(CMD18,sector,0);
 8001946:	2200      	movs	r2, #0
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	2012      	movs	r0, #18
 800194c:	f7ff fe1a 	bl	8001584 <SD_SendCmd>
 8001950:	4603      	mov	r3, r0
 8001952:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_ReceiveData(buf,512);
 8001954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff ff53 	bl	8001804 <SD_ReceiveData>
 800195e:	4603      	mov	r3, r0
 8001960:	75fb      	strb	r3, [r7, #23]
			buf+=512;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001968:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	3b01      	subs	r3, #1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <SD_ReadDisk+0x88>
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0eb      	beq.n	8001954 <SD_ReadDisk+0x60>
		SD_SendCmd(CMD12,0,0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	200c      	movs	r0, #12
 8001982:	f7ff fdff 	bl	8001584 <SD_SendCmd>
	}
	SD_CS_HIGH();
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <SD_ReadDisk+0xa8>)
 800198e:	f002 f8b7 	bl	8003b00 <HAL_GPIO_WritePin>
	return r1;
 8001992:	7dfb      	ldrb	r3, [r7, #23]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	48000400 	.word	0x48000400
 80019a0:	2000042a 	.word	0x2000042a

080019a4 <SD_WriteDisk>:

uint8_t SD_WriteDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //写SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	4613      	mov	r3, r2
 80019b0:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019b8:	482d      	ldr	r0, [pc, #180]	@ (8001a70 <SD_WriteDisk+0xcc>)
 80019ba:	f002 f8a1 	bl	8003b00 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 80019be:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <SD_WriteDisk+0xd0>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d002      	beq.n	80019cc <SD_WriteDisk+0x28>
		sector *= 512;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	025b      	lsls	r3, r3, #9
 80019ca:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d110      	bne.n	80019f4 <SD_WriteDisk+0x50>
	{
		r1=SD_SendCmd(CMD24,sector,0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	2018      	movs	r0, #24
 80019d8:	f7ff fdd4 	bl	8001584 <SD_SendCmd>
 80019dc:	4603      	mov	r3, r0
 80019de:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d138      	bne.n	8001a58 <SD_WriteDisk+0xb4>
		{
			r1=SD_SendBlock(buf,0xFE);
 80019e6:	21fe      	movs	r1, #254	@ 0xfe
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff ff45 	bl	8001878 <SD_SendBlock>
 80019ee:	4603      	mov	r3, r0
 80019f0:	75fb      	strb	r3, [r7, #23]
 80019f2:	e031      	b.n	8001a58 <SD_WriteDisk+0xb4>
		}
	}
	else
	{
		if(SD_TYPE!=MMC)
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <SD_WriteDisk+0xd0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d00a      	beq.n	8001a12 <SD_WriteDisk+0x6e>
		{
			SD_SendCmd(CMD55,0,0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	2037      	movs	r0, #55	@ 0x37
 8001a02:	f7ff fdbf 	bl	8001584 <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	2017      	movs	r0, #23
 8001a0e:	f7ff fdb9 	bl	8001584 <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	2019      	movs	r0, #25
 8001a18:	f7ff fdb4 	bl	8001584 <SD_SendCmd>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d118      	bne.n	8001a58 <SD_WriteDisk+0xb4>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); //0xFC为多块写入起始令牌
 8001a26:	21fc      	movs	r1, #252	@ 0xfc
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff ff25 	bl	8001878 <SD_SendBlock>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	75fb      	strb	r3, [r7, #23]
				buf+=512;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001a38:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <SD_WriteDisk+0xa8>
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ec      	beq.n	8001a26 <SD_WriteDisk+0x82>
			r1=SD_SendBlock(0,0xFD);
 8001a4c:	21fd      	movs	r1, #253	@ 0xfd
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff ff12 	bl	8001878 <SD_SendBlock>
 8001a54:	4603      	mov	r3, r0
 8001a56:	75fb      	strb	r3, [r7, #23]
		}
	}
	SD_CS_HIGH();
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a5e:	4804      	ldr	r0, [pc, #16]	@ (8001a70 <SD_WriteDisk+0xcc>)
 8001a60:	f002 f84e 	bl	8003b00 <HAL_GPIO_WritePin>
	return r1;
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	48000400 	.word	0x48000400
 8001a74:	2000042a 	.word	0x2000042a

08001a78 <SD_GETCSD>:

uint8_t SD_GETCSD(uint8_t *csd_data) //获取CSD数据
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	SD_CS_LOW();
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a86:	4810      	ldr	r0, [pc, #64]	@ (8001ac8 <SD_GETCSD+0x50>)
 8001a88:	f002 f83a 	bl	8003b00 <HAL_GPIO_WritePin>
	uint8_t r1;
    if(SD_SendCmd(CMD9,0,0) == 0)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2009      	movs	r0, #9
 8001a92:	f7ff fd77 	bl	8001584 <SD_SendCmd>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <SD_GETCSD+0x30>
    {
    	r1=SD_ReceiveData(csd_data, 16);
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff feb0 	bl	8001804 <SD_ReceiveData>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
    }
	SD_CS_HIGH();
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aae:	4806      	ldr	r0, [pc, #24]	@ (8001ac8 <SD_GETCSD+0x50>)
 8001ab0:	f002 f826 	bl	8003b00 <HAL_GPIO_WritePin>
	if(r1)
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SD_GETCSD+0x46>
		return 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <SD_GETCSD+0x48>
	else
		return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	48000400 	.word	0x48000400

08001acc <SD_GetSectorCount>:

uint32_t SD_GetSectorCount(void) //获取SD卡总扇区数
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
    uint8_t csd[16];
    uint32_t Capacity;
    uint8_t n;
	uint16_t csize;
    if(SD_GETCSD(csd)!=0)
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ffcf 	bl	8001a78 <SD_GETCSD>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SD_GetSectorCount+0x18>
    	return 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e03e      	b.n	8001b62 <SD_GetSectorCount+0x96>
    if((csd[0]&0xC0)==0x40)
 8001ae4:	783b      	ldrb	r3, [r7, #0]
 8001ae6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001aea:	2b40      	cmp	r3, #64	@ 0x40
 8001aec:	d10c      	bne.n	8001b08 <SD_GetSectorCount+0x3c>
    {
		csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
 8001aee:	7a7b      	ldrb	r3, [r7, #9]
 8001af0:	461a      	mov	r2, r3
 8001af2:	7a3b      	ldrb	r3, [r7, #8]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	823b      	strh	r3, [r7, #16]
		Capacity = (uint32_t)csize << 10;
 8001b00:	8a3b      	ldrh	r3, [r7, #16]
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e02b      	b.n	8001b60 <SD_GetSectorCount+0x94>
    }
    else
    {
		n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b08:	797b      	ldrb	r3, [r7, #5]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	7abb      	ldrb	r3, [r7, #10]
 8001b12:	09db      	lsrs	r3, r3, #7
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	7a7b      	ldrb	r3, [r7, #9]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f003 0306 	and.w	r3, r3, #6
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	74fb      	strb	r3, [r7, #19]
		csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8001b2e:	7a3b      	ldrb	r3, [r7, #8]
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	823b      	strh	r3, [r7, #16]
		Capacity= (uint32_t)csize << (n - 9);
 8001b54:	8a3a      	ldrh	r2, [r7, #16]
 8001b56:	7cfb      	ldrb	r3, [r7, #19]
 8001b58:	3b09      	subs	r3, #9
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
    }
    return Capacity;
 8001b60:	697b      	ldr	r3, [r7, #20]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <MX_SPI1_Init+0x78>)
 8001b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001b78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b84:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001b86:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001ba2:	2228      	movs	r2, #40	@ 0x28
 8001ba4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001bba:	2207      	movs	r2, #7
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <MX_SPI1_Init+0x74>)
 8001bcc:	f003 f988 	bl	8004ee0 <HAL_SPI_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bd6:	f7ff fc93 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000042c 	.word	0x2000042c
 8001be4:	40013000 	.word	0x40013000

08001be8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001bee:	4a1c      	ldr	r2, [pc, #112]	@ (8001c60 <MX_SPI2_Init+0x78>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001bf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c02:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c1e:	2238      	movs	r2, #56	@ 0x38
 8001c20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c34:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c36:	2207      	movs	r2, #7
 8001c38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c42:	2208      	movs	r2, #8
 8001c44:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <MX_SPI2_Init+0x74>)
 8001c48:	f003 f94a 	bl	8004ee0 <HAL_SPI_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c52:	f7ff fc55 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000490 	.word	0x20000490
 8001c60:	40003800 	.word	0x40003800

08001c64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	@ 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a9b      	ldr	r2, [pc, #620]	@ (8001ef0 <HAL_SPI_MspInit+0x28c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	f040 8095 	bne.w	8001db2 <HAL_SPI_MspInit+0x14e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c88:	4b9a      	ldr	r3, [pc, #616]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8c:	4a99      	ldr	r2, [pc, #612]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001c8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c92:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c94:	4b97      	ldr	r3, [pc, #604]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	4b94      	ldr	r3, [pc, #592]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	4a93      	ldr	r2, [pc, #588]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cac:	4b91      	ldr	r3, [pc, #580]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cb8:	23a0      	movs	r3, #160	@ 0xa0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc8:	2305      	movs	r3, #5
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd6:	f001 fd99 	bl	800380c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cda:	2340      	movs	r3, #64	@ 0x40
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cea:	2305      	movs	r3, #5
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf8:	f001 fd88 	bl	800380c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	@ (8001efc <HAL_SPI_MspInit+0x298>)
 8001d00:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001d02:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d08:	4b7b      	ldr	r3, [pc, #492]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d14:	4b78      	ldr	r3, [pc, #480]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d16:	2280      	movs	r2, #128	@ 0x80
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d1a:	4b77      	ldr	r3, [pc, #476]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d20:	4b75      	ldr	r3, [pc, #468]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001d26:	4b74      	ldr	r3, [pc, #464]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2c:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d32:	4871      	ldr	r0, [pc, #452]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d34:	f001 fae8 	bl	8003308 <HAL_DMA_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8001d3e:	f7ff fbdf 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a6c      	ldr	r2, [pc, #432]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d46:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d48:	4a6b      	ldr	r2, [pc, #428]	@ (8001ef8 <HAL_SPI_MspInit+0x294>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d50:	4a6c      	ldr	r2, [pc, #432]	@ (8001f04 <HAL_SPI_MspInit+0x2a0>)
 8001d52:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d5a:	4b69      	ldr	r3, [pc, #420]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d60:	4b67      	ldr	r3, [pc, #412]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d66:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d68:	2280      	movs	r2, #128	@ 0x80
 8001d6a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6c:	4b64      	ldr	r3, [pc, #400]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d72:	4b63      	ldr	r3, [pc, #396]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d78:	4b61      	ldr	r3, [pc, #388]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7e:	4b60      	ldr	r3, [pc, #384]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d84:	485e      	ldr	r0, [pc, #376]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d86:	f001 fabf 	bl	8003308 <HAL_DMA_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8001d90:	f7ff fbb6 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a5a      	ldr	r2, [pc, #360]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d9a:	4a59      	ldr	r2, [pc, #356]	@ (8001f00 <HAL_SPI_MspInit+0x29c>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2023      	movs	r0, #35	@ 0x23
 8001da6:	f001 fa78 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001daa:	2023      	movs	r0, #35	@ 0x23
 8001dac:	f001 fa91 	bl	80032d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001db0:	e099      	b.n	8001ee6 <HAL_SPI_MspInit+0x282>
  else if(spiHandle->Instance==SPI2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a54      	ldr	r2, [pc, #336]	@ (8001f08 <HAL_SPI_MspInit+0x2a4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	f040 8094 	bne.w	8001ee6 <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	4a4c      	ldr	r2, [pc, #304]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dca:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	4b47      	ldr	r3, [pc, #284]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	4a46      	ldr	r2, [pc, #280]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de2:	4b44      	ldr	r3, [pc, #272]	@ (8001ef4 <HAL_SPI_MspInit+0x290>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001dee:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e00:	2305      	movs	r3, #5
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4840      	ldr	r0, [pc, #256]	@ (8001f0c <HAL_SPI_MspInit+0x2a8>)
 8001e0c:	f001 fcfe 	bl	800380c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e22:	2305      	movs	r3, #5
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4837      	ldr	r0, [pc, #220]	@ (8001f0c <HAL_SPI_MspInit+0x2a8>)
 8001e2e:	f001 fced 	bl	800380c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001e32:	4b37      	ldr	r3, [pc, #220]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e34:	4a37      	ldr	r2, [pc, #220]	@ (8001f14 <HAL_SPI_MspInit+0x2b0>)
 8001e36:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8001e38:	4b35      	ldr	r3, [pc, #212]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3e:	4b34      	ldr	r3, [pc, #208]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e44:	4b32      	ldr	r3, [pc, #200]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4a:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e4c:	2280      	movs	r2, #128	@ 0x80
 8001e4e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e50:	4b2f      	ldr	r3, [pc, #188]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e56:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e62:	4b2b      	ldr	r3, [pc, #172]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001e68:	4829      	ldr	r0, [pc, #164]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e6a:	f001 fa4d 	bl	8003308 <HAL_DMA_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001e74:	f7ff fb44 	bl	8001500 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a25      	ldr	r2, [pc, #148]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e7e:	4a24      	ldr	r2, [pc, #144]	@ (8001f10 <HAL_SPI_MspInit+0x2ac>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001e86:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <HAL_SPI_MspInit+0x2b8>)
 8001e88:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001e8a:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001e92:	2210      	movs	r2, #16
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb4:	4b18      	ldr	r3, [pc, #96]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001eba:	4817      	ldr	r0, [pc, #92]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001ebc:	f001 fa24 	bl	8003308 <HAL_DMA_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_SPI_MspInit+0x266>
      Error_Handler();
 8001ec6:	f7ff fb1b 	bl	8001500 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ed0:	4a11      	ldr	r2, [pc, #68]	@ (8001f18 <HAL_SPI_MspInit+0x2b4>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2024      	movs	r0, #36	@ 0x24
 8001edc:	f001 f9dd 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ee0:	2024      	movs	r0, #36	@ 0x24
 8001ee2:	f001 f9f6 	bl	80032d2 <HAL_NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3730      	adds	r7, #48	@ 0x30
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40013000 	.word	0x40013000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	200004f4 	.word	0x200004f4
 8001efc:	4002001c 	.word	0x4002001c
 8001f00:	2000053c 	.word	0x2000053c
 8001f04:	40020030 	.word	0x40020030
 8001f08:	40003800 	.word	0x40003800
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	20000584 	.word	0x20000584
 8001f14:	40020044 	.word	0x40020044
 8001f18:	200005cc 	.word	0x200005cc
 8001f1c:	40020058 	.word	0x40020058

08001f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <HAL_MspInit+0x44>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <HAL_MspInit+0x44>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f32:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <HAL_MspInit+0x44>)
 8001f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_MspInit+0x44>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <HAL_MspInit+0x44>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_MspInit+0x44>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <NMI_Handler+0x4>

08001f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <MemManage_Handler+0x4>

08001f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbe:	f001 f84d 	bl	800305c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <DMA1_Channel2_IRQHandler+0x10>)
 8001fce:	f001 fb32 	bl	8003636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200004f4 	.word	0x200004f4

08001fdc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <DMA1_Channel3_IRQHandler+0x10>)
 8001fe2:	f001 fb28 	bl	8003636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000053c 	.word	0x2000053c

08001ff0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DMA1_Channel4_IRQHandler+0x10>)
 8001ff6:	f001 fb1e 	bl	8003636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000584 	.word	0x20000584

08002004 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <DMA1_Channel5_IRQHandler+0x10>)
 800200a:	f001 fb14 	bl	8003636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200005cc 	.word	0x200005cc

08002018 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <SPI1_IRQHandler+0x10>)
 800201e:	f003 fa21 	bl	8005464 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000042c 	.word	0x2000042c

0800202c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <SPI2_IRQHandler+0x10>)
 8002032:	f003 fa17 	bl	8005464 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000490 	.word	0x20000490

08002040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8002044:	4812      	ldr	r0, [pc, #72]	@ (8002090 <USART1_IRQHandler+0x50>)
 8002046:	f003 fec3 	bl	8005dd0 <HAL_UART_IRQHandler>
	  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <USART1_IRQHandler+0x50>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b10      	cmp	r3, #16
 8002056:	d119      	bne.n	800208c <USART1_IRQHandler+0x4c>
	  {
		  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <USART1_IRQHandler+0x50>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2210      	movs	r2, #16
 800205e:	621a      	str	r2, [r3, #32]
		  HAL_UART_DMAStop(&huart1);
 8002060:	480b      	ldr	r0, [pc, #44]	@ (8002090 <USART1_IRQHandler+0x50>)
 8002062:	f003 fe23 	bl	8005cac <HAL_UART_DMAStop>
		  rx_length = sizeof(rx_buffer) - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <USART1_IRQHandler+0x50>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	b29b      	uxth	r3, r3
 8002070:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <USART1_IRQHandler+0x54>)
 8002078:	801a      	strh	r2, [r3, #0]
		  data_ready = 1; // 标记数据就绪
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <USART1_IRQHandler+0x58>)
 800207c:	2201      	movs	r2, #1
 800207e:	801a      	strh	r2, [r3, #0]
	      HAL_UART_Receive_DMA(&huart1, (uint8_t *)rx_buffer, sizeof(rx_buffer));
 8002080:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002084:	4905      	ldr	r1, [pc, #20]	@ (800209c <USART1_IRQHandler+0x5c>)
 8002086:	4802      	ldr	r0, [pc, #8]	@ (8002090 <USART1_IRQHandler+0x50>)
 8002088:	f003 fdc4 	bl	8005c14 <HAL_UART_Receive_DMA>
	  }
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000618 	.word	0x20000618
 8002094:	20000424 	.word	0x20000424
 8002098:	20000428 	.word	0x20000428
 800209c:	20000224 	.word	0x20000224

080020a0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <DMA2_Channel6_IRQHandler+0x10>)
 80020a6:	f001 fac6 	bl	8003636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200006e8 	.word	0x200006e8

080020b4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <DMA2_Channel7_IRQHandler+0x10>)
 80020ba:	f001 fabc 	bl	8003636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200006a0 	.word	0x200006a0

080020c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_kill>:

int _kill(int pid, int sig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e2:	f006 fbf9 	bl	80088d8 <__errno>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2216      	movs	r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
  return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_exit>:

void _exit (int status)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ffe7 	bl	80020d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800210a:	bf00      	nop
 800210c:	e7fd      	b.n	800210a <_exit+0x12>

0800210e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e00a      	b.n	8002136 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002120:	f3af 8000 	nop.w
 8002124:	4601      	mov	r1, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	60ba      	str	r2, [r7, #8]
 800212c:	b2ca      	uxtb	r2, r1
 800212e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dbf0      	blt.n	8002120 <_read+0x12>
  }

  return len;
 800213e:	687b      	ldr	r3, [r7, #4]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002170:	605a      	str	r2, [r3, #4]
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_isatty>:

int _isatty(int file)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002188:	2301      	movs	r3, #1
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f006 fb7a 	bl	80088d8 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000c000 	.word	0x2000c000
 8002210:	00000400 	.word	0x00000400
 8002214:	20000614 	.word	0x20000614
 8002218:	200008c0 	.word	0x200008c0

0800221c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 8002246:	4a15      	ldr	r2, [pc, #84]	@ (800229c <MX_USART1_UART_Init+0x5c>)
 8002248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	@ (8002298 <MX_USART1_UART_Init+0x58>)
 8002284:	f003 fb72 	bl	800596c <HAL_UART_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800228e:	f7ff f937 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000618 	.word	0x20000618
 800229c:	40013800 	.word	0x40013800

080022a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0a2      	sub	sp, #136	@ 0x88
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2260      	movs	r2, #96	@ 0x60
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f006 fa95 	bl	80087f0 <memset>
  if(uartHandle->Instance==USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002408 <HAL_UART_MspInit+0x168>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 8096 	bne.w	80023fe <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022d6:	2300      	movs	r3, #0
 80022d8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 fac2 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022ea:	f7ff f909 	bl	8001500 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ee:	4b47      	ldr	r3, [pc, #284]	@ (800240c <HAL_UART_MspInit+0x16c>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	4a46      	ldr	r2, [pc, #280]	@ (800240c <HAL_UART_MspInit+0x16c>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fa:	4b44      	ldr	r3, [pc, #272]	@ (800240c <HAL_UART_MspInit+0x16c>)
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b41      	ldr	r3, [pc, #260]	@ (800240c <HAL_UART_MspInit+0x16c>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	4a40      	ldr	r2, [pc, #256]	@ (800240c <HAL_UART_MspInit+0x16c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002312:	4b3e      	ldr	r3, [pc, #248]	@ (800240c <HAL_UART_MspInit+0x16c>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800231e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002322:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002328:	2301      	movs	r3, #1
 800232a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002332:	2307      	movs	r3, #7
 8002334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800233c:	4619      	mov	r1, r3
 800233e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002342:	f001 fa63 	bl	800380c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8002346:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002348:	4a32      	ldr	r2, [pc, #200]	@ (8002414 <HAL_UART_MspInit+0x174>)
 800234a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800234c:	4b30      	ldr	r3, [pc, #192]	@ (8002410 <HAL_UART_MspInit+0x170>)
 800234e:	2202      	movs	r2, #2
 8002350:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002352:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002358:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_UART_MspInit+0x170>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800235e:	4b2c      	ldr	r3, [pc, #176]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002360:	2280      	movs	r2, #128	@ 0x80
 8002362:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800236a:	4b29      	ldr	r3, [pc, #164]	@ (8002410 <HAL_UART_MspInit+0x170>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002370:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002372:	2220      	movs	r2, #32
 8002374:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002378:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800237c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800237e:	4824      	ldr	r0, [pc, #144]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002380:	f000 ffc2 	bl	8003308 <HAL_DMA_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800238a:	f7ff f8b9 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1f      	ldr	r2, [pc, #124]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002392:	675a      	str	r2, [r3, #116]	@ 0x74
 8002394:	4a1e      	ldr	r2, [pc, #120]	@ (8002410 <HAL_UART_MspInit+0x170>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 800239a:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_UART_MspInit+0x178>)
 800239c:	4a1f      	ldr	r2, [pc, #124]	@ (800241c <HAL_UART_MspInit+0x17c>)
 800239e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023a2:	2202      	movs	r2, #2
 80023a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023a8:	2210      	movs	r2, #16
 80023aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023b2:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023b4:	2280      	movs	r2, #128	@ 0x80
 80023b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b8:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023c4:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023d2:	4811      	ldr	r0, [pc, #68]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023d4:	f000 ff98 	bl	8003308 <HAL_DMA_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80023de:	f7ff f88f 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023e6:	671a      	str	r2, [r3, #112]	@ 0x70
 80023e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002418 <HAL_UART_MspInit+0x178>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2025      	movs	r0, #37	@ 0x25
 80023f4:	f000 ff51 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023f8:	2025      	movs	r0, #37	@ 0x25
 80023fa:	f000 ff6a 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023fe:	bf00      	nop
 8002400:	3788      	adds	r7, #136	@ 0x88
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40013800 	.word	0x40013800
 800240c:	40021000 	.word	0x40021000
 8002410:	200006a0 	.word	0x200006a0
 8002414:	40020480 	.word	0x40020480
 8002418:	200006e8 	.word	0x200006e8
 800241c:	4002046c 	.word	0x4002046c

08002420 <ASIC_TransmitReceive>:
uint16_t peaklevel = 200;
uint64_t peaktime = 0;
uint8_t result[6];

uint8_t ASIC_TransmitReceive(uint8_t data) //发送接收函数封装
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af02      	add	r7, sp, #8
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1 ,100);
 800242a:	f107 020f 	add.w	r2, r7, #15
 800242e:	1df9      	adds	r1, r7, #7
 8002430:	2364      	movs	r3, #100	@ 0x64
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2301      	movs	r3, #1
 8002436:	4804      	ldr	r0, [pc, #16]	@ (8002448 <ASIC_TransmitReceive+0x28>)
 8002438:	f002 fdf5 	bl	8005026 <HAL_SPI_TransmitReceive>
    return rx_data;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000042c 	.word	0x2000042c

0800244c <ASIC_CMD>:

HAL_StatusTypeDef ASIC_CMD(uint8_t address, uint16_t data) //ASIC发送参数到指定地址
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	460a      	mov	r2, r1
 8002456:	71fb      	strb	r3, [r7, #7]
 8002458:	4613      	mov	r3, r2
 800245a:	80bb      	strh	r3, [r7, #4]
	//ASIC_CS_LOW();
	uint8_t Address[5] = {0x01,0x02,0x04,0x10,0x20};
 800245c:	4a25      	ldr	r2, [pc, #148]	@ (80024f4 <ASIC_CMD+0xa8>)
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002466:	6018      	str	r0, [r3, #0]
 8002468:	3304      	adds	r3, #4
 800246a:	7019      	strb	r1, [r3, #0]
	uint16_t i;
	for(i = 0;i < 5;++i)
 800246c:	2300      	movs	r3, #0
 800246e:	81fb      	strh	r3, [r7, #14]
 8002470:	e00a      	b.n	8002488 <ASIC_CMD+0x3c>
	{
		if(address == Address[i])
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	3310      	adds	r3, #16
 8002476:	443b      	add	r3, r7
 8002478:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800247c:	79fa      	ldrb	r2, [r7, #7]
 800247e:	429a      	cmp	r2, r3
 8002480:	d006      	beq.n	8002490 <ASIC_CMD+0x44>
	for(i = 0;i < 5;++i)
 8002482:	89fb      	ldrh	r3, [r7, #14]
 8002484:	3301      	adds	r3, #1
 8002486:	81fb      	strh	r3, [r7, #14]
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d9f1      	bls.n	8002472 <ASIC_CMD+0x26>
 800248e:	e000      	b.n	8002492 <ASIC_CMD+0x46>
			break;
 8002490:	bf00      	nop
	}
	if(i == 5)
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d106      	bne.n	80024a6 <ASIC_CMD+0x5a>
	{
		printf("retry\n");
 8002498:	4817      	ldr	r0, [pc, #92]	@ (80024f8 <ASIC_CMD+0xac>)
 800249a:	f006 f8a7 	bl	80085ec <puts>
		ASIC_RST();
 800249e:	f000 f88f 	bl	80025c0 <ASIC_RST>
		return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e021      	b.n	80024ea <ASIC_CMD+0x9e>
	}
	ASIC_TransmitReceive(address);
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ffb9 	bl	8002420 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7ff ffb6 	bl	8002420 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7ff ffb3 	bl	8002420 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff ffb0 	bl	8002420 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7ff ffad 	bl	8002420 <ASIC_TransmitReceive>
	ASIC_TransmitReceive((data >> 8) & 0xFF);
 80024c6:	88bb      	ldrh	r3, [r7, #4]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ffa6 	bl	8002420 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(data & 0xFF);
 80024d4:	88bb      	ldrh	r3, [r7, #4]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ffa1 	bl	8002420 <ASIC_TransmitReceive>
	ASIC_CS_HIGH();
 80024de:	2201      	movs	r2, #1
 80024e0:	2101      	movs	r1, #1
 80024e2:	4806      	ldr	r0, [pc, #24]	@ (80024fc <ASIC_CMD+0xb0>)
 80024e4:	f001 fb0c 	bl	8003b00 <HAL_GPIO_WritePin>
	return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	0800bc50 	.word	0x0800bc50
 80024f8:	0800bc48 	.word	0x0800bc48
 80024fc:	48000400 	.word	0x48000400

08002500 <ReadResult>:

HAL_StatusTypeDef ReadResult(void) //读取相关结果
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
	//if(HAL_GPIO_ReadPin(EMPTY_GPIO_Port, EMPTY_Pin) == GPIO_PIN_SET)
		//return HAL_ERROR;
	//else
	{
		ASIC_CS_LOW();
 8002506:	2200      	movs	r2, #0
 8002508:	2101      	movs	r1, #1
 800250a:	4828      	ldr	r0, [pc, #160]	@ (80025ac <ReadResult+0xac>)
 800250c:	f001 faf8 	bl	8003b00 <HAL_GPIO_WritePin>
		uint16_t i;
		uint8_t address = 0x80;
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	717b      	strb	r3, [r7, #5]
		ASIC_TransmitReceive(address);
 8002514:	797b      	ldrb	r3, [r7, #5]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff82 	bl	8002420 <ASIC_TransmitReceive>
		for(i = 0;i < 6;i++)
 800251c:	2300      	movs	r3, #0
 800251e:	80fb      	strh	r3, [r7, #6]
 8002520:	e00a      	b.n	8002538 <ReadResult+0x38>
			result[i] = ASIC_TransmitReceive(0x00);
 8002522:	88fe      	ldrh	r6, [r7, #6]
 8002524:	2000      	movs	r0, #0
 8002526:	f7ff ff7b 	bl	8002420 <ASIC_TransmitReceive>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <ReadResult+0xb0>)
 8002530:	559a      	strb	r2, [r3, r6]
		for(i = 0;i < 6;i++)
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	3301      	adds	r3, #1
 8002536:	80fb      	strh	r3, [r7, #6]
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	2b05      	cmp	r3, #5
 800253c:	d9f1      	bls.n	8002522 <ReadResult+0x22>
		codeid = result[0] >> 3;
 800253e:	4b1c      	ldr	r3, [pc, #112]	@ (80025b0 <ReadResult+0xb0>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	08db      	lsrs	r3, r3, #3
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <ReadResult+0xb4>)
 8002548:	701a      	strb	r2, [r3, #0]
		peaklevel = (result[1] >> 1) | ((result[0] & 0x07 ) << 7);
 800254a:	4b19      	ldr	r3, [pc, #100]	@ (80025b0 <ReadResult+0xb0>)
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	b21a      	sxth	r2, r3
 8002554:	4b16      	ldr	r3, [pc, #88]	@ (80025b0 <ReadResult+0xb0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b21b      	sxth	r3, r3
 800255a:	01db      	lsls	r3, r3, #7
 800255c:	b21b      	sxth	r3, r3
 800255e:	f403 7360 	and.w	r3, r3, #896	@ 0x380
 8002562:	b21b      	sxth	r3, r3
 8002564:	4313      	orrs	r3, r2
 8002566:	b21b      	sxth	r3, r3
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <ReadResult+0xb8>)
 800256c:	801a      	strh	r2, [r3, #0]
		peaktime = ((result[1] & 0x01) << 32) | (result[2] << 24) | (result[3] << 16) | (result[4] << 8) | result[5];
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <ReadResult+0xb0>)
 8002570:	789b      	ldrb	r3, [r3, #2]
 8002572:	061a      	lsls	r2, r3, #24
 8002574:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <ReadResult+0xb0>)
 8002576:	78db      	ldrb	r3, [r3, #3]
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <ReadResult+0xb0>)
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	4313      	orrs	r3, r2
 8002584:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <ReadResult+0xb0>)
 8002586:	7952      	ldrb	r2, [r2, #5]
 8002588:	4313      	orrs	r3, r2
 800258a:	17da      	asrs	r2, r3, #31
 800258c:	461c      	mov	r4, r3
 800258e:	4615      	mov	r5, r2
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <ReadResult+0xbc>)
 8002592:	e9c3 4500 	strd	r4, r5, [r3]
		ASIC_CS_HIGH();
 8002596:	2201      	movs	r2, #1
 8002598:	2101      	movs	r1, #1
 800259a:	4804      	ldr	r0, [pc, #16]	@ (80025ac <ReadResult+0xac>)
 800259c:	f001 fab0 	bl	8003b00 <HAL_GPIO_WritePin>
		return HAL_OK;
 80025a0:	2300      	movs	r3, #0
	}
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	48000400 	.word	0x48000400
 80025b0:	20000740 	.word	0x20000740
 80025b4:	20000730 	.word	0x20000730
 80025b8:	2000000a 	.word	0x2000000a
 80025bc:	20000738 	.word	0x20000738

080025c0 <ASIC_RST>:

void ASIC_RST(void) //ASIC芯片复位
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2110      	movs	r1, #16
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025cc:	f001 fa98 	bl	8003b00 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80025d0:	2032      	movs	r0, #50	@ 0x32
 80025d2:	f000 fd63 	bl	800309c <HAL_Delay>
	HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 80025d6:	2201      	movs	r2, #1
 80025d8:	2110      	movs	r1, #16
 80025da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025de:	f001 fa8f 	bl	8003b00 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80025e2:	2032      	movs	r0, #50	@ 0x32
 80025e4:	f000 fd5a 	bl	800309c <HAL_Delay>
}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_write>:

int _write(int file, char *ptr, int len)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	2364      	movs	r3, #100	@ 0x64
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	4803      	ldr	r0, [pc, #12]	@ (8002610 <_write+0x24>)
 8002602:	f003 fa01 	bl	8005a08 <HAL_UART_Transmit>
    return len;
 8002606:	687b      	ldr	r3, [r7, #4]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000618 	.word	0x20000618

08002614 <read_be16>:
PACKAGE_TypeDef *package;
PACKAGE_TypeDef *txpackage;
volatile uint32_t receivercode;

uint16_t read_be16(const uint8_t *data)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    return (data[0] << 8) | data[1];
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b21b      	sxth	r3, r3
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	b21a      	sxth	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3301      	adds	r3, #1
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b21b      	sxth	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b21b      	sxth	r3, r3
 8002632:	b29b      	uxth	r3, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <exchange>:
uint16_t exchange(uint16_t *data) // 改为小端序
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	uint8_t front = (*data) & 0xFF;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	73fb      	strb	r3, [r7, #15]
	uint8_t back = (*data) >> 8;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	b29b      	uxth	r3, r3
 8002656:	73bb      	strb	r3, [r7, #14]
	uint16_t sum = (front << 8) | back;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	b21b      	sxth	r3, r3
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	b21a      	sxth	r2, r3
 8002660:	7bbb      	ldrb	r3, [r7, #14]
 8002662:	b21b      	sxth	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b21b      	sxth	r3, r3
 8002668:	81bb      	strh	r3, [r7, #12]
	return sum;
 800266a:	89bb      	ldrh	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <Checksum>:

uint16_t Checksum(uint8_t *data, int16_t length) //校检和
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
	uint16_t sum;
    if(length <= 1)
 8002684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002688:	2b01      	cmp	r3, #1
 800268a:	dc04      	bgt.n	8002696 <Checksum+0x1e>
    {
    	sum = (uint16_t)data[0];
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002692:	89fb      	ldrh	r3, [r7, #14]
 8002694:	e012      	b.n	80026bc <Checksum+0x44>
    }
    else
    {
    	sum = (uint16_t)data[length-1]+Checksum(data, length - 1);
 8002696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800269a:	3b01      	subs	r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461c      	mov	r4, r3
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b21b      	sxth	r3, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffe2 	bl	8002678 <Checksum>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4423      	add	r3, r4
 80026b8:	81fb      	strh	r3, [r7, #14]
    	return sum;
 80026ba:	89fb      	ldrh	r3, [r7, #14]
    }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}

080026c4 <Receive_Data>:

void Receive_Data(void) //将接收数据填入结构体
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
	package = (PACKAGE_TypeDef *)malloc(rx_length - 4);
 80026ca:	4b3b      	ldr	r3, [pc, #236]	@ (80027b8 <Receive_Data+0xf4>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b04      	subs	r3, #4
 80026d2:	4618      	mov	r0, r3
 80026d4:	f004 fed4 	bl	8007480 <malloc>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <Receive_Data+0xf8>)
 80026de:	601a      	str	r2, [r3, #0]
	package->head = read_be16(rx_buffer);
 80026e0:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <Receive_Data+0xf8>)
 80026e2:	681c      	ldr	r4, [r3, #0]
 80026e4:	4836      	ldr	r0, [pc, #216]	@ (80027c0 <Receive_Data+0xfc>)
 80026e6:	f7ff ff95 	bl	8002614 <read_be16>
 80026ea:	4603      	mov	r3, r0
 80026ec:	8023      	strh	r3, [r4, #0]
	package->version = read_be16(&rx_buffer[2]);
 80026ee:	4b33      	ldr	r3, [pc, #204]	@ (80027bc <Receive_Data+0xf8>)
 80026f0:	681c      	ldr	r4, [r3, #0]
 80026f2:	4834      	ldr	r0, [pc, #208]	@ (80027c4 <Receive_Data+0x100>)
 80026f4:	f7ff ff8e 	bl	8002614 <read_be16>
 80026f8:	4603      	mov	r3, r0
 80026fa:	8063      	strh	r3, [r4, #2]
	package->code = read_be16(&rx_buffer[4]);
 80026fc:	4b2f      	ldr	r3, [pc, #188]	@ (80027bc <Receive_Data+0xf8>)
 80026fe:	681c      	ldr	r4, [r3, #0]
 8002700:	4831      	ldr	r0, [pc, #196]	@ (80027c8 <Receive_Data+0x104>)
 8002702:	f7ff ff87 	bl	8002614 <read_be16>
 8002706:	4603      	mov	r3, r0
 8002708:	80a3      	strh	r3, [r4, #4]
	package->command = read_be16(&rx_buffer[6]);
 800270a:	4b2c      	ldr	r3, [pc, #176]	@ (80027bc <Receive_Data+0xf8>)
 800270c:	681c      	ldr	r4, [r3, #0]
 800270e:	482f      	ldr	r0, [pc, #188]	@ (80027cc <Receive_Data+0x108>)
 8002710:	f7ff ff80 	bl	8002614 <read_be16>
 8002714:	4603      	mov	r3, r0
 8002716:	80e3      	strh	r3, [r4, #6]
	package->datalength = rx_buffer[8];
 8002718:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <Receive_Data+0xf8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a28      	ldr	r2, [pc, #160]	@ (80027c0 <Receive_Data+0xfc>)
 800271e:	7a12      	ldrb	r2, [r2, #8]
 8002720:	721a      	strb	r2, [r3, #8]
	memcpy(package->data, &rx_buffer[9], package->datalength);
 8002722:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <Receive_Data+0xf8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f103 0009 	add.w	r0, r3, #9
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <Receive_Data+0xf8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	7a1b      	ldrb	r3, [r3, #8]
 8002730:	461a      	mov	r2, r3
 8002732:	4927      	ldr	r1, [pc, #156]	@ (80027d0 <Receive_Data+0x10c>)
 8002734:	f006 f8fd 	bl	8008932 <memcpy>
	checksum = read_be16(&rx_buffer[9 + package->datalength]);
 8002738:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <Receive_Data+0xf8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	7a1b      	ldrb	r3, [r3, #8]
 800273e:	3309      	adds	r3, #9
 8002740:	4a1f      	ldr	r2, [pc, #124]	@ (80027c0 <Receive_Data+0xfc>)
 8002742:	4413      	add	r3, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff65 	bl	8002614 <read_be16>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <Receive_Data+0x110>)
 8002750:	801a      	strh	r2, [r3, #0]
	tail = read_be16(&rx_buffer[9 + package->datalength + 2]);
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <Receive_Data+0xf8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	7a1b      	ldrb	r3, [r3, #8]
 8002758:	330b      	adds	r3, #11
 800275a:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <Receive_Data+0xfc>)
 800275c:	4413      	add	r3, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff58 	bl	8002614 <read_be16>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <Receive_Data+0x114>)
 800276a:	801a      	strh	r2, [r3, #0]
	int16_t checklength = (int16_t)rx_length - 6; // 必须改为有符号16位，否则初始化时rxlength = 0导致checklength变为0xfffa，checksum函数运行错误
 800276c:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <Receive_Data+0xf4>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b06      	subs	r3, #6
 8002774:	b29b      	uxth	r3, r3
 8002776:	80fb      	strh	r3, [r7, #6]
	SUM = Checksum(&rx_buffer[2], checklength);
 8002778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800277c:	4619      	mov	r1, r3
 800277e:	4811      	ldr	r0, [pc, #68]	@ (80027c4 <Receive_Data+0x100>)
 8002780:	f7ff ff7a 	bl	8002678 <Checksum>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <Receive_Data+0x118>)
 800278a:	801a      	strh	r2, [r3, #0]
	receivercode = (package->version << 16) | package->code;
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <Receive_Data+0xf8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	885b      	ldrh	r3, [r3, #2]
 8002792:	b29b      	uxth	r3, r3
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <Receive_Data+0xf8>)
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	8892      	ldrh	r2, [r2, #4]
 800279c:	b292      	uxth	r2, r2
 800279e:	4313      	orrs	r3, r2
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <Receive_Data+0x11c>)
 80027a4:	601a      	str	r2, [r3, #0]
	free(package);
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <Receive_Data+0xf8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fe70 	bl	8007490 <free>
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd90      	pop	{r4, r7, pc}
 80027b8:	20000424 	.word	0x20000424
 80027bc:	20000750 	.word	0x20000750
 80027c0:	20000224 	.word	0x20000224
 80027c4:	20000226 	.word	0x20000226
 80027c8:	20000228 	.word	0x20000228
 80027cc:	2000022a 	.word	0x2000022a
 80027d0:	2000022d 	.word	0x2000022d
 80027d4:	20000746 	.word	0x20000746
 80027d8:	20000748 	.word	0x20000748
 80027dc:	2000074a 	.word	0x2000074a
 80027e0:	20000758 	.word	0x20000758

080027e4 <Send_Data>:

void Send_Data(uint8_t *rxdata, uint8_t *txdata, uint16_t length) //发送心跳和采样相关的应答命令
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0;i < length;i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	82fb      	strh	r3, [r7, #22]
 80027f6:	e03f      	b.n	8002878 <Send_Data+0x94>
	{
		if(i == 6)
 80027f8:	8afb      	ldrh	r3, [r7, #22]
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d105      	bne.n	800280a <Send_Data+0x26>
			txdata[i] = 0x01;
 80027fe:	8afb      	ldrh	r3, [r7, #22]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	4413      	add	r3, r2
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	e033      	b.n	8002872 <Send_Data+0x8e>
		else if(i == length - 3)
 800280a:	8afa      	ldrh	r2, [r7, #22]
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	3b03      	subs	r3, #3
 8002810:	429a      	cmp	r2, r3
 8002812:	d108      	bne.n	8002826 <Send_Data+0x42>
			txdata[i] = SUM & 0xFF;
 8002814:	4b1f      	ldr	r3, [pc, #124]	@ (8002894 <Send_Data+0xb0>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b299      	uxth	r1, r3
 800281a:	8afb      	ldrh	r3, [r7, #22]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	4413      	add	r3, r2
 8002820:	b2ca      	uxtb	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e025      	b.n	8002872 <Send_Data+0x8e>
		else if(i == length - 4)
 8002826:	8afa      	ldrh	r2, [r7, #22]
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	3b04      	subs	r3, #4
 800282c:	429a      	cmp	r2, r3
 800282e:	d118      	bne.n	8002862 <Send_Data+0x7e>
		{
			SUM = Checksum(&txdata[2], i - 2);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1c9a      	adds	r2, r3, #2
 8002834:	8afb      	ldrh	r3, [r7, #22]
 8002836:	3b02      	subs	r3, #2
 8002838:	b29b      	uxth	r3, r3
 800283a:	b21b      	sxth	r3, r3
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f7ff ff1a 	bl	8002678 <Checksum>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <Send_Data+0xb0>)
 800284a:	801a      	strh	r2, [r3, #0]
			txdata[i] = (SUM >> 8) & 0xFF;
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <Send_Data+0xb0>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b299      	uxth	r1, r3
 8002856:	8afb      	ldrh	r3, [r7, #22]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	4413      	add	r3, r2
 800285c:	b2ca      	uxtb	r2, r1
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e007      	b.n	8002872 <Send_Data+0x8e>
		}
		else
			txdata[i] = rxdata[i];
 8002862:	8afb      	ldrh	r3, [r7, #22]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	441a      	add	r2, r3
 8002868:	8afb      	ldrh	r3, [r7, #22]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	440b      	add	r3, r1
 800286e:	7812      	ldrb	r2, [r2, #0]
 8002870:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0;i < length;i++)
 8002872:	8afb      	ldrh	r3, [r7, #22]
 8002874:	3301      	adds	r3, #1
 8002876:	82fb      	strh	r3, [r7, #22]
 8002878:	8afa      	ldrh	r2, [r7, #22]
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	429a      	cmp	r2, r3
 800287e:	d3bb      	bcc.n	80027f8 <Send_Data+0x14>
	}
	HAL_UART_Transmit_DMA(&huart1, txdata, length);
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	461a      	mov	r2, r3
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	4804      	ldr	r0, [pc, #16]	@ (8002898 <Send_Data+0xb4>)
 8002888:	f003 f948 	bl	8005b1c <HAL_UART_Transmit_DMA>
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	2000074a 	.word	0x2000074a
 8002898:	20000618 	.word	0x20000618

0800289c <CMD_Judge>:

CMD_Status CMD_Judge(void) //判断发送数据格式正确与否，错误舍弃
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
	Receive_Data();
 80028a2:	f7ff ff0f 	bl	80026c4 <Receive_Data>
	uint16_t i;
	for(i = 0;i < cmd_number;i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	80fb      	strh	r3, [r7, #6]
 80028aa:	e00c      	b.n	80028c6 <CMD_Judge+0x2a>
	{
		if(package->command == cmd[i])
 80028ac:	4b32      	ldr	r3, [pc, #200]	@ (8002978 <CMD_Judge+0xdc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	88db      	ldrh	r3, [r3, #6]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	4931      	ldr	r1, [pc, #196]	@ (800297c <CMD_Judge+0xe0>)
 80028b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d006      	beq.n	80028ce <CMD_Judge+0x32>
	for(i = 0;i < cmd_number;i++)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	3301      	adds	r3, #1
 80028c4:	80fb      	strh	r3, [r7, #6]
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d9ef      	bls.n	80028ac <CMD_Judge+0x10>
 80028cc:	e000      	b.n	80028d0 <CMD_Judge+0x34>
		break;
 80028ce:	bf00      	nop
	}
	uint8_t length = rx_length - 13;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <CMD_Judge+0xe4>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3b0d      	subs	r3, #13
 80028da:	717b      	strb	r3, [r7, #5]
	if(package->command == HEAD) //包头不对，舍弃
 80028dc:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <CMD_Judge+0xdc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	88db      	ldrh	r3, [r3, #6]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d107      	bne.n	80028fc <CMD_Judge+0x60>
	{
		printf("head error\n");
 80028ec:	4825      	ldr	r0, [pc, #148]	@ (8002984 <CMD_Judge+0xe8>)
 80028ee:	f005 fe7d 	bl	80085ec <puts>
		data_ready = 0;
 80028f2:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <CMD_Judge+0xec>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	801a      	strh	r2, [r3, #0]
		return CMD_FORMAT_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e038      	b.n	800296e <CMD_Judge+0xd2>
	}
	else if(i == cmd_number) //命令格式不对，舍弃
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d107      	bne.n	8002912 <CMD_Judge+0x76>
	{
		printf("not supported\n");
 8002902:	4822      	ldr	r0, [pc, #136]	@ (800298c <CMD_Judge+0xf0>)
 8002904:	f005 fe72 	bl	80085ec <puts>
		data_ready = 0;
 8002908:	4b1f      	ldr	r3, [pc, #124]	@ (8002988 <CMD_Judge+0xec>)
 800290a:	2200      	movs	r2, #0
 800290c:	801a      	strh	r2, [r3, #0]
		return CMD_NOT_SUPPORTED;
 800290e:	2302      	movs	r3, #2
 8002910:	e02d      	b.n	800296e <CMD_Judge+0xd2>
	}
	else if(package->datalength != length) //数据长度不匹配，舍弃
 8002912:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <CMD_Judge+0xdc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	7a1b      	ldrb	r3, [r3, #8]
 8002918:	797a      	ldrb	r2, [r7, #5]
 800291a:	429a      	cmp	r2, r3
 800291c:	d007      	beq.n	800292e <CMD_Judge+0x92>
	{
		printf("invalid\n");
 800291e:	481c      	ldr	r0, [pc, #112]	@ (8002990 <CMD_Judge+0xf4>)
 8002920:	f005 fe64 	bl	80085ec <puts>
		data_ready = 0;
 8002924:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <CMD_Judge+0xec>)
 8002926:	2200      	movs	r2, #0
 8002928:	801a      	strh	r2, [r3, #0]
		return CMD_INVALID_DATA;
 800292a:	2304      	movs	r3, #4
 800292c:	e01f      	b.n	800296e <CMD_Judge+0xd2>
	}
	else if(checksum != SUM) //校检不对，舍弃
 800292e:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <CMD_Judge+0xf8>)
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b18      	ldr	r3, [pc, #96]	@ (8002998 <CMD_Judge+0xfc>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	429a      	cmp	r2, r3
 800293c:	d007      	beq.n	800294e <CMD_Judge+0xb2>
	{
		printf("check error\n");
 800293e:	4817      	ldr	r0, [pc, #92]	@ (800299c <CMD_Judge+0x100>)
 8002940:	f005 fe54 	bl	80085ec <puts>
		data_ready = 0;
 8002944:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <CMD_Judge+0xec>)
 8002946:	2200      	movs	r2, #0
 8002948:	801a      	strh	r2, [r3, #0]
		return CMD_CHECK_ERROR;
 800294a:	2306      	movs	r3, #6
 800294c:	e00f      	b.n	800296e <CMD_Judge+0xd2>
	}
	else if(tail != TAIL) //包尾不对，舍弃
 800294e:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <CMD_Judge+0x104>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	f647 62fe 	movw	r2, #32510	@ 0x7efe
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <CMD_Judge+0xd0>
	{
		printf("tail error\n");
 800295c:	4811      	ldr	r0, [pc, #68]	@ (80029a4 <CMD_Judge+0x108>)
 800295e:	f005 fe45 	bl	80085ec <puts>
		data_ready = 0;
 8002962:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <CMD_Judge+0xec>)
 8002964:	2200      	movs	r2, #0
 8002966:	801a      	strh	r2, [r3, #0]
		return CMD_FORMAT_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <CMD_Judge+0xd2>
	}
	else
		return CMD_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000750 	.word	0x20000750
 800297c:	20000018 	.word	0x20000018
 8002980:	20000424 	.word	0x20000424
 8002984:	0800bc58 	.word	0x0800bc58
 8002988:	20000428 	.word	0x20000428
 800298c:	0800bc64 	.word	0x0800bc64
 8002990:	0800bc74 	.word	0x0800bc74
 8002994:	20000746 	.word	0x20000746
 8002998:	2000074a 	.word	0x2000074a
 800299c:	0800bc7c 	.word	0x0800bc7c
 80029a0:	20000748 	.word	0x20000748
 80029a4:	0800bc88 	.word	0x0800bc88

080029a8 <CMD_Execute>:

CMD_Status CMD_Execute(void) //根据命令部分数据实现对应内容
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
	if(receivercode != rxcode)
 80029ae:	4b98      	ldr	r3, [pc, #608]	@ (8002c10 <CMD_Execute+0x268>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b98      	ldr	r3, [pc, #608]	@ (8002c14 <CMD_Execute+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d007      	beq.n	80029ca <CMD_Execute+0x22>
	{
		printf("receivercode error\n");
 80029ba:	4897      	ldr	r0, [pc, #604]	@ (8002c18 <CMD_Execute+0x270>)
 80029bc:	f005 fe16 	bl	80085ec <puts>
		data_ready = 0;
 80029c0:	4b96      	ldr	r3, [pc, #600]	@ (8002c1c <CMD_Execute+0x274>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]
		return CMD_INVALID_DATA;
 80029c6:	2304      	movs	r3, #4
 80029c8:	e175      	b.n	8002cb6 <CMD_Execute+0x30e>
	}
	else
	{
		if(package->command == cmd0)
 80029ca:	4b95      	ldr	r3, [pc, #596]	@ (8002c20 <CMD_Execute+0x278>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	88db      	ldrh	r3, [r3, #6]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d12b      	bne.n	8002a2e <CMD_Execute+0x86>
		{
			if(package->datalength != 0x01 || package->data[0] != 0)
 80029d6:	4b92      	ldr	r3, [pc, #584]	@ (8002c20 <CMD_Execute+0x278>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	7a1b      	ldrb	r3, [r3, #8]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d104      	bne.n	80029ea <CMD_Execute+0x42>
 80029e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c20 <CMD_Execute+0x278>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	7a5b      	ldrb	r3, [r3, #9]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <CMD_Execute+0x52>
			{
				printf("invalid\n");
 80029ea:	488e      	ldr	r0, [pc, #568]	@ (8002c24 <CMD_Execute+0x27c>)
 80029ec:	f005 fdfe 	bl	80085ec <puts>
				data_ready = 0;
 80029f0:	4b8a      	ldr	r3, [pc, #552]	@ (8002c1c <CMD_Execute+0x274>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	801a      	strh	r2, [r3, #0]
				return CMD_INVALID_DATA;
 80029f6:	2304      	movs	r3, #4
 80029f8:	e15d      	b.n	8002cb6 <CMD_Execute+0x30e>
			}
			else
			{
				Send_Data(rx_buffer, tx_buffer, rx_length);
 80029fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002c28 <CMD_Execute+0x280>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	498a      	ldr	r1, [pc, #552]	@ (8002c2c <CMD_Execute+0x284>)
 8002a04:	488a      	ldr	r0, [pc, #552]	@ (8002c30 <CMD_Execute+0x288>)
 8002a06:	f7ff feed 	bl	80027e4 <Send_Data>
				tx_length = rx_length;
 8002a0a:	4b87      	ldr	r3, [pc, #540]	@ (8002c28 <CMD_Execute+0x280>)
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4b88      	ldr	r3, [pc, #544]	@ (8002c34 <CMD_Execute+0x28c>)
 8002a12:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, tx_buffer, tx_length);
 8002a14:	4b87      	ldr	r3, [pc, #540]	@ (8002c34 <CMD_Execute+0x28c>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4983      	ldr	r1, [pc, #524]	@ (8002c2c <CMD_Execute+0x284>)
 8002a1e:	4886      	ldr	r0, [pc, #536]	@ (8002c38 <CMD_Execute+0x290>)
 8002a20:	f003 f87c 	bl	8005b1c <HAL_UART_Transmit_DMA>
				data_ready = 0;
 8002a24:	4b7d      	ldr	r3, [pc, #500]	@ (8002c1c <CMD_Execute+0x274>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	801a      	strh	r2, [r3, #0]
				return CMD_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e143      	b.n	8002cb6 <CMD_Execute+0x30e>
			}
		}
		else if(package->command == cmd1)
 8002a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c20 <CMD_Execute+0x278>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	88db      	ldrh	r3, [r3, #6]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 80a2 	bne.w	8002b80 <CMD_Execute+0x1d8>
		{
			if(package->datalength != 0x01 || package->data[0] != 0)
 8002a3c:	4b78      	ldr	r3, [pc, #480]	@ (8002c20 <CMD_Execute+0x278>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	7a1b      	ldrb	r3, [r3, #8]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d104      	bne.n	8002a50 <CMD_Execute+0xa8>
 8002a46:	4b76      	ldr	r3, [pc, #472]	@ (8002c20 <CMD_Execute+0x278>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	7a5b      	ldrb	r3, [r3, #9]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <CMD_Execute+0xb8>
			{
				printf("invalid\n");
 8002a50:	4874      	ldr	r0, [pc, #464]	@ (8002c24 <CMD_Execute+0x27c>)
 8002a52:	f005 fdcb 	bl	80085ec <puts>
				data_ready = 0;
 8002a56:	4b71      	ldr	r3, [pc, #452]	@ (8002c1c <CMD_Execute+0x274>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	801a      	strh	r2, [r3, #0]
				return CMD_INVALID_DATA;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e12a      	b.n	8002cb6 <CMD_Execute+0x30e>
			}
			else
			{
				if(ready)
 8002a60:	4b76      	ldr	r3, [pc, #472]	@ (8002c3c <CMD_Execute+0x294>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01a      	beq.n	8002a9e <CMD_Execute+0xf6>
				{
					Send_Data(rx_buffer, tx_buffer, rx_length);
 8002a68:	4b6f      	ldr	r3, [pc, #444]	@ (8002c28 <CMD_Execute+0x280>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	496e      	ldr	r1, [pc, #440]	@ (8002c2c <CMD_Execute+0x284>)
 8002a72:	486f      	ldr	r0, [pc, #444]	@ (8002c30 <CMD_Execute+0x288>)
 8002a74:	f7ff feb6 	bl	80027e4 <Send_Data>
					tx_length = rx_length;
 8002a78:	4b6b      	ldr	r3, [pc, #428]	@ (8002c28 <CMD_Execute+0x280>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c34 <CMD_Execute+0x28c>)
 8002a80:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart1, tx_buffer, tx_length);
 8002a82:	4b6c      	ldr	r3, [pc, #432]	@ (8002c34 <CMD_Execute+0x28c>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4968      	ldr	r1, [pc, #416]	@ (8002c2c <CMD_Execute+0x284>)
 8002a8c:	486a      	ldr	r0, [pc, #424]	@ (8002c38 <CMD_Execute+0x290>)
 8002a8e:	f003 f845 	bl	8005b1c <HAL_UART_Transmit_DMA>
					HAL_Delay(100);
 8002a92:	2064      	movs	r0, #100	@ 0x64
 8002a94:	f000 fb02 	bl	800309c <HAL_Delay>
					ready = 0;
 8002a98:	4b68      	ldr	r3, [pc, #416]	@ (8002c3c <CMD_Execute+0x294>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
				}
				codeid = 28;
 8002a9e:	4b68      	ldr	r3, [pc, #416]	@ (8002c40 <CMD_Execute+0x298>)
 8002aa0:	221c      	movs	r2, #28
 8002aa2:	701a      	strb	r2, [r3, #0]
				peaktime = 1014438;
 8002aa4:	4967      	ldr	r1, [pc, #412]	@ (8002c44 <CMD_Execute+0x29c>)
 8002aa6:	4a68      	ldr	r2, [pc, #416]	@ (8002c48 <CMD_Execute+0x2a0>)
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9c1 2300 	strd	r2, r3, [r1]
				peaklevel = 218;
 8002ab0:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <CMD_Execute+0x2a4>)
 8002ab2:	22da      	movs	r2, #218	@ 0xda
 8002ab4:	801a      	strh	r2, [r3, #0]
				confidence = peaklevel;
 8002ab6:	4b65      	ldr	r3, [pc, #404]	@ (8002c4c <CMD_Execute+0x2a4>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b64      	ldr	r3, [pc, #400]	@ (8002c50 <CMD_Execute+0x2a8>)
 8002abe:	701a      	strb	r2, [r3, #0]
				float time = ((float)peaktime)/1000000;
 8002ac0:	4b60      	ldr	r3, [pc, #384]	@ (8002c44 <CMD_Execute+0x29c>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f7fe f9a5 	bl	8000e18 <__aeabi_ul2f>
 8002ace:	ee06 0a90 	vmov	s13, r0
 8002ad2:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002c54 <CMD_Execute+0x2ac>
 8002ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ada:	edc7 7a01 	vstr	s15, [r7, #4]
				uint8_t *ptr = tx_buffer;
 8002ade:	4b53      	ldr	r3, [pc, #332]	@ (8002c2c <CMD_Execute+0x284>)
 8002ae0:	603b      	str	r3, [r7, #0]
				ptr += sprintf(ptr, "%u,", codeid);
 8002ae2:	4b57      	ldr	r3, [pc, #348]	@ (8002c40 <CMD_Execute+0x298>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	495b      	ldr	r1, [pc, #364]	@ (8002c58 <CMD_Execute+0x2b0>)
 8002aea:	6838      	ldr	r0, [r7, #0]
 8002aec:	f005 fd86 	bl	80085fc <siprintf>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	603b      	str	r3, [r7, #0]
				ptr += sprintf(ptr, "%u,", rxcode);
 8002afa:	4b46      	ldr	r3, [pc, #280]	@ (8002c14 <CMD_Execute+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4955      	ldr	r1, [pc, #340]	@ (8002c58 <CMD_Execute+0x2b0>)
 8002b02:	6838      	ldr	r0, [r7, #0]
 8002b04:	f005 fd7a 	bl	80085fc <siprintf>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	603b      	str	r3, [r7, #0]
				ptr += sprintf(ptr, "%u,", frequency);
 8002b12:	4b52      	ldr	r3, [pc, #328]	@ (8002c5c <CMD_Execute+0x2b4>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	494f      	ldr	r1, [pc, #316]	@ (8002c58 <CMD_Execute+0x2b0>)
 8002b1c:	6838      	ldr	r0, [r7, #0]
 8002b1e:	f005 fd6d 	bl	80085fc <siprintf>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4413      	add	r3, r2
 8002b2a:	603b      	str	r3, [r7, #0]
				ptr += sprintf(ptr, "%06f,", time);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fd fd0b 	bl	8000548 <__aeabi_f2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	494a      	ldr	r1, [pc, #296]	@ (8002c60 <CMD_Execute+0x2b8>)
 8002b38:	6838      	ldr	r0, [r7, #0]
 8002b3a:	f005 fd5f 	bl	80085fc <siprintf>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	4413      	add	r3, r2
 8002b46:	603b      	str	r3, [r7, #0]
				ptr += sprintf(ptr, "%u\r\n", confidence);
 8002b48:	4b41      	ldr	r3, [pc, #260]	@ (8002c50 <CMD_Execute+0x2a8>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4944      	ldr	r1, [pc, #272]	@ (8002c64 <CMD_Execute+0x2bc>)
 8002b52:	6838      	ldr	r0, [r7, #0]
 8002b54:	f005 fd52 	bl	80085fc <siprintf>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	603b      	str	r3, [r7, #0]
				HAL_UART_Transmit_DMA(&huart1, tx_buffer, ptr - tx_buffer);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	4a31      	ldr	r2, [pc, #196]	@ (8002c2c <CMD_Execute+0x284>)
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	492f      	ldr	r1, [pc, #188]	@ (8002c2c <CMD_Execute+0x284>)
 8002b6e:	4832      	ldr	r0, [pc, #200]	@ (8002c38 <CMD_Execute+0x290>)
 8002b70:	f002 ffd4 	bl	8005b1c <HAL_UART_Transmit_DMA>
				HAL_Delay(1000);
 8002b74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b78:	f000 fa90 	bl	800309c <HAL_Delay>
				return CMD_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e09a      	b.n	8002cb6 <CMD_Execute+0x30e>
			}
		}
		else if(package->command == cmd2)
 8002b80:	4b27      	ldr	r3, [pc, #156]	@ (8002c20 <CMD_Execute+0x278>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	88db      	ldrh	r3, [r3, #6]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d12b      	bne.n	8002be4 <CMD_Execute+0x23c>
		{
			if(package->datalength != 0x01 || package->data[0] != 0x00)
 8002b8c:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <CMD_Execute+0x278>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	7a1b      	ldrb	r3, [r3, #8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d104      	bne.n	8002ba0 <CMD_Execute+0x1f8>
 8002b96:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <CMD_Execute+0x278>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	7a5b      	ldrb	r3, [r3, #9]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <CMD_Execute+0x208>
			{
				printf("invalid\n");
 8002ba0:	4820      	ldr	r0, [pc, #128]	@ (8002c24 <CMD_Execute+0x27c>)
 8002ba2:	f005 fd23 	bl	80085ec <puts>
				data_ready = 0;
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <CMD_Execute+0x274>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
				return CMD_INVALID_DATA;
 8002bac:	2304      	movs	r3, #4
 8002bae:	e082      	b.n	8002cb6 <CMD_Execute+0x30e>
			}
			else
			{
				Send_Data(rx_buffer, tx_buffer, rx_length);
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <CMD_Execute+0x280>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	491c      	ldr	r1, [pc, #112]	@ (8002c2c <CMD_Execute+0x284>)
 8002bba:	481d      	ldr	r0, [pc, #116]	@ (8002c30 <CMD_Execute+0x288>)
 8002bbc:	f7ff fe12 	bl	80027e4 <Send_Data>
				tx_length = rx_length;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <CMD_Execute+0x280>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <CMD_Execute+0x28c>)
 8002bc8:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, tx_buffer, tx_length);
 8002bca:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <CMD_Execute+0x28c>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4916      	ldr	r1, [pc, #88]	@ (8002c2c <CMD_Execute+0x284>)
 8002bd4:	4818      	ldr	r0, [pc, #96]	@ (8002c38 <CMD_Execute+0x290>)
 8002bd6:	f002 ffa1 	bl	8005b1c <HAL_UART_Transmit_DMA>
				data_ready = 0;
 8002bda:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <CMD_Execute+0x274>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	801a      	strh	r2, [r3, #0]
				return CMD_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e068      	b.n	8002cb6 <CMD_Execute+0x30e>
			}
		}
		else if(package->command == cmd3)
 8002be4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <CMD_Execute+0x278>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	88db      	ldrh	r3, [r3, #6]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d13b      	bne.n	8002c68 <CMD_Execute+0x2c0>
		{
			Parameterset_query();
 8002bf0:	f000 f872 	bl	8002cd8 <Parameterset_query>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, tx_length);
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <CMD_Execute+0x28c>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	490b      	ldr	r1, [pc, #44]	@ (8002c2c <CMD_Execute+0x284>)
 8002bfe:	480e      	ldr	r0, [pc, #56]	@ (8002c38 <CMD_Execute+0x290>)
 8002c00:	f002 ff8c 	bl	8005b1c <HAL_UART_Transmit_DMA>
			data_ready = 0;
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <CMD_Execute+0x274>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e053      	b.n	8002cb6 <CMD_Execute+0x30e>
 8002c0e:	bf00      	nop
 8002c10:	20000758 	.word	0x20000758
 8002c14:	20000010 	.word	0x20000010
 8002c18:	0800bc94 	.word	0x0800bc94
 8002c1c:	20000428 	.word	0x20000428
 8002c20:	20000750 	.word	0x20000750
 8002c24:	0800bc74 	.word	0x0800bc74
 8002c28:	20000424 	.word	0x20000424
 8002c2c:	20000324 	.word	0x20000324
 8002c30:	20000224 	.word	0x20000224
 8002c34:	20000426 	.word	0x20000426
 8002c38:	20000618 	.word	0x20000618
 8002c3c:	2000000c 	.word	0x2000000c
 8002c40:	20000730 	.word	0x20000730
 8002c44:	20000738 	.word	0x20000738
 8002c48:	000f7aa6 	.word	0x000f7aa6
 8002c4c:	2000000a 	.word	0x2000000a
 8002c50:	2000074c 	.word	0x2000074c
 8002c54:	49742400 	.word	0x49742400
 8002c58:	0800bca8 	.word	0x0800bca8
 8002c5c:	20000014 	.word	0x20000014
 8002c60:	0800bcac 	.word	0x0800bcac
 8002c64:	0800bcb4 	.word	0x0800bcb4
		}
		else if(package->command == cmd4)
 8002c68:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <CMD_Execute+0x318>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	88db      	ldrh	r3, [r3, #6]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d120      	bne.n	8002cb6 <CMD_Execute+0x30e>
		{
			if(package->datalength != 0x01 || package->data[0] != 0)
 8002c74:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <CMD_Execute+0x318>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	7a1b      	ldrb	r3, [r3, #8]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d104      	bne.n	8002c88 <CMD_Execute+0x2e0>
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <CMD_Execute+0x318>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	7a5b      	ldrb	r3, [r3, #9]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <CMD_Execute+0x2f0>
			{
				printf("invalid\n");
 8002c88:	480e      	ldr	r0, [pc, #56]	@ (8002cc4 <CMD_Execute+0x31c>)
 8002c8a:	f005 fcaf 	bl	80085ec <puts>
				data_ready = 0;
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <CMD_Execute+0x320>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	801a      	strh	r2, [r3, #0]
				return CMD_INVALID_DATA;
 8002c94:	2304      	movs	r3, #4
 8002c96:	e00e      	b.n	8002cb6 <CMD_Execute+0x30e>
			}
			else
			{
				Parameterset_query();
 8002c98:	f000 f81e 	bl	8002cd8 <Parameterset_query>
				HAL_UART_Transmit_DMA(&huart1, tx_buffer, tx_length);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <CMD_Execute+0x324>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	490a      	ldr	r1, [pc, #40]	@ (8002cd0 <CMD_Execute+0x328>)
 8002ca6:	480b      	ldr	r0, [pc, #44]	@ (8002cd4 <CMD_Execute+0x32c>)
 8002ca8:	f002 ff38 	bl	8005b1c <HAL_UART_Transmit_DMA>
				data_ready = 0;
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <CMD_Execute+0x320>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	801a      	strh	r2, [r3, #0]
				return CMD_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e7ff      	b.n	8002cb6 <CMD_Execute+0x30e>
			}
		}
	}
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000750 	.word	0x20000750
 8002cc4:	0800bc74 	.word	0x0800bc74
 8002cc8:	20000428 	.word	0x20000428
 8002ccc:	20000426 	.word	0x20000426
 8002cd0:	20000324 	.word	0x20000324
 8002cd4:	20000618 	.word	0x20000618

08002cd8 <Parameterset_query>:
    memmove(ptr + new_line_len, line_end, tail_len);
    memcpy(ptr, new_line, new_line_len);
}*/

void Parameterset_query(void) //参数设置查询函数
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
	tx_length = sizeof(PACKAGE_TypeDef) + 6;
 8002cde:	4b93      	ldr	r3, [pc, #588]	@ (8002f2c <Parameterset_query+0x254>)
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	801a      	strh	r2, [r3, #0]
	txpackage = (PACKAGE_TypeDef *)malloc(tx_length);
 8002ce4:	4b91      	ldr	r3, [pc, #580]	@ (8002f2c <Parameterset_query+0x254>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fbc8 	bl	8007480 <malloc>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b8e      	ldr	r3, [pc, #568]	@ (8002f30 <Parameterset_query+0x258>)
 8002cf6:	601a      	str	r2, [r3, #0]
	if(package->command == cmd3)
 8002cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8002f34 <Parameterset_query+0x25c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	88db      	ldrh	r3, [r3, #6]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d161      	bne.n	8002dc8 <Parameterset_query+0xf0>
	{
		uint16_t version = read_be16(package->data);
 8002d04:	4b8b      	ldr	r3, [pc, #556]	@ (8002f34 <Parameterset_query+0x25c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3309      	adds	r3, #9
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fc82 	bl	8002614 <read_be16>
 8002d10:	4603      	mov	r3, r0
 8002d12:	807b      	strh	r3, [r7, #2]
		uint16_t code = read_be16(&(package->data[2]));
 8002d14:	4b87      	ldr	r3, [pc, #540]	@ (8002f34 <Parameterset_query+0x25c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330b      	adds	r3, #11
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fc7a 	bl	8002614 <read_be16>
 8002d20:	4603      	mov	r3, r0
 8002d22:	803b      	strh	r3, [r7, #0]
		rxcode = (version << 16) | code;
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	883a      	ldrh	r2, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b82      	ldr	r3, [pc, #520]	@ (8002f38 <Parameterset_query+0x260>)
 8002d30:	601a      	str	r2, [r3, #0]
		PEAKTH = read_be16(&(package->data[4]));
 8002d32:	4b80      	ldr	r3, [pc, #512]	@ (8002f34 <Parameterset_query+0x25c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330d      	adds	r3, #13
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fc6b 	bl	8002614 <read_be16>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b7e      	ldr	r3, [pc, #504]	@ (8002f3c <Parameterset_query+0x264>)
 8002d44:	801a      	strh	r2, [r3, #0]
		ALMSTTH = read_be16(&(package->data[6]));
 8002d46:	4b7b      	ldr	r3, [pc, #492]	@ (8002f34 <Parameterset_query+0x25c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330f      	adds	r3, #15
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fc61 	bl	8002614 <read_be16>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b7a      	ldr	r3, [pc, #488]	@ (8002f40 <Parameterset_query+0x268>)
 8002d58:	801a      	strh	r2, [r3, #0]
		PKWND = read_be16(&(package->data[8]));
 8002d5a:	4b76      	ldr	r3, [pc, #472]	@ (8002f34 <Parameterset_query+0x25c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3311      	adds	r3, #17
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fc57 	bl	8002614 <read_be16>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b76      	ldr	r3, [pc, #472]	@ (8002f44 <Parameterset_query+0x26c>)
 8002d6c:	801a      	strh	r2, [r3, #0]
		txpackage->version = exchange(&version);
 8002d6e:	4b70      	ldr	r3, [pc, #448]	@ (8002f30 <Parameterset_query+0x258>)
 8002d70:	681c      	ldr	r4, [r3, #0]
 8002d72:	1cbb      	adds	r3, r7, #2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fc63 	bl	8002640 <exchange>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	8063      	strh	r3, [r4, #2]
		txpackage->code = exchange(&code);
 8002d7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f30 <Parameterset_query+0x258>)
 8002d80:	681c      	ldr	r4, [r3, #0]
 8002d82:	463b      	mov	r3, r7
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fc5b 	bl	8002640 <exchange>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80a3      	strh	r3, [r4, #4]
		txpackage->command = 0x0301;
 8002d8e:	4b68      	ldr	r3, [pc, #416]	@ (8002f30 <Parameterset_query+0x258>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	719a      	strb	r2, [r3, #6]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f042 0203 	orr.w	r2, r2, #3
 8002da0:	71da      	strb	r2, [r3, #7]
		ASIC_CMD(0x01, PEAKTH);
 8002da2:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <Parameterset_query+0x264>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	2001      	movs	r0, #1
 8002daa:	f7ff fb4f 	bl	800244c <ASIC_CMD>
		ASIC_CMD(0x02, ALMSTTH);
 8002dae:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <Parameterset_query+0x268>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	4619      	mov	r1, r3
 8002db4:	2002      	movs	r0, #2
 8002db6:	f7ff fb49 	bl	800244c <ASIC_CMD>
		ASIC_CMD(0x04, PKWND);
 8002dba:	4b62      	ldr	r3, [pc, #392]	@ (8002f44 <Parameterset_query+0x26c>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	2004      	movs	r0, #4
 8002dc2:	f7ff fb43 	bl	800244c <ASIC_CMD>
 8002dc6:	e01f      	b.n	8002e08 <Parameterset_query+0x130>
		f_write(&fil, config_buf, strlen(config_buf), &bytes_written);
		f_close(&fil);*/
	}
	else
	{
		ReadResult();
 8002dc8:	f7ff fb9a 	bl	8002500 <ReadResult>
		txpackage->version = exchange(&(package->version));
 8002dcc:	4b59      	ldr	r3, [pc, #356]	@ (8002f34 <Parameterset_query+0x25c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	4a57      	ldr	r2, [pc, #348]	@ (8002f30 <Parameterset_query+0x258>)
 8002dd4:	6814      	ldr	r4, [r2, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fc32 	bl	8002640 <exchange>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	8063      	strh	r3, [r4, #2]
		txpackage->code = exchange(&(package->code));
 8002de0:	4b54      	ldr	r3, [pc, #336]	@ (8002f34 <Parameterset_query+0x25c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4a52      	ldr	r2, [pc, #328]	@ (8002f30 <Parameterset_query+0x258>)
 8002de8:	6814      	ldr	r4, [r2, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fc28 	bl	8002640 <exchange>
 8002df0:	4603      	mov	r3, r0
 8002df2:	80a3      	strh	r3, [r4, #4]
		txpackage->command = 0x0401;
 8002df4:	4b4e      	ldr	r3, [pc, #312]	@ (8002f30 <Parameterset_query+0x258>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	719a      	strb	r2, [r3, #6]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f042 0204 	orr.w	r2, r2, #4
 8002e06:	71da      	strb	r2, [r3, #7]
	}
	txpackage->datalength = 0x06;
 8002e08:	4b49      	ldr	r3, [pc, #292]	@ (8002f30 <Parameterset_query+0x258>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2206      	movs	r2, #6
 8002e0e:	721a      	strb	r2, [r3, #8]
	txpackage->head = exchange(&(package->head));
 8002e10:	4b48      	ldr	r3, [pc, #288]	@ (8002f34 <Parameterset_query+0x25c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b46      	ldr	r3, [pc, #280]	@ (8002f30 <Parameterset_query+0x258>)
 8002e18:	681c      	ldr	r4, [r3, #0]
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f7ff fc10 	bl	8002640 <exchange>
 8002e20:	4603      	mov	r3, r0
 8002e22:	8023      	strh	r3, [r4, #0]
	uint16_t PEAKTHS = exchange(&PEAKTH);
 8002e24:	4845      	ldr	r0, [pc, #276]	@ (8002f3c <Parameterset_query+0x264>)
 8002e26:	f7ff fc0b 	bl	8002640 <exchange>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	813b      	strh	r3, [r7, #8]
	uint16_t ALMSTTHS = exchange(&ALMSTTH);
 8002e2e:	4844      	ldr	r0, [pc, #272]	@ (8002f40 <Parameterset_query+0x268>)
 8002e30:	f7ff fc06 	bl	8002640 <exchange>
 8002e34:	4603      	mov	r3, r0
 8002e36:	80fb      	strh	r3, [r7, #6]
	uint16_t PKWNDS = exchange(&PKWND);
 8002e38:	4842      	ldr	r0, [pc, #264]	@ (8002f44 <Parameterset_query+0x26c>)
 8002e3a:	f7ff fc01 	bl	8002640 <exchange>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80bb      	strh	r3, [r7, #4]
	size_t length = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
	memcpy(txpackage->data, &PEAKTHS, sizeof(PEAKTH));
 8002e46:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <Parameterset_query+0x258>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3309      	adds	r3, #9
 8002e4c:	893a      	ldrh	r2, [r7, #8]
 8002e4e:	801a      	strh	r2, [r3, #0]
	length += sizeof(PEAKTH);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3302      	adds	r3, #2
 8002e54:	60fb      	str	r3, [r7, #12]
	memcpy(&(txpackage->data[length]), &ALMSTTHS, sizeof(ALMSTTH));
 8002e56:	4b36      	ldr	r3, [pc, #216]	@ (8002f30 <Parameterset_query+0x258>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	4413      	add	r3, r2
 8002e60:	3301      	adds	r3, #1
 8002e62:	88fa      	ldrh	r2, [r7, #6]
 8002e64:	801a      	strh	r2, [r3, #0]
	length += sizeof(ALMSTTH);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3302      	adds	r3, #2
 8002e6a:	60fb      	str	r3, [r7, #12]
	memcpy(&(txpackage->data[length]), &PKWNDS, sizeof(PKWND));
 8002e6c:	4b30      	ldr	r3, [pc, #192]	@ (8002f30 <Parameterset_query+0x258>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3308      	adds	r3, #8
 8002e74:	4413      	add	r3, r2
 8002e76:	3301      	adds	r3, #1
 8002e78:	88ba      	ldrh	r2, [r7, #4]
 8002e7a:	801a      	strh	r2, [r3, #0]
	length += sizeof(PKWND);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3302      	adds	r3, #2
 8002e80:	60fb      	str	r3, [r7, #12]
	if(length != txpackage->datalength)
 8002e82:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <Parameterset_query+0x258>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	7a1b      	ldrb	r3, [r3, #8]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <Parameterset_query+0x1c0>
	{
		printf("handle error\n");
 8002e90:	482d      	ldr	r0, [pc, #180]	@ (8002f48 <Parameterset_query+0x270>)
 8002e92:	f005 fbab 	bl	80085ec <puts>
 8002e96:	e046      	b.n	8002f26 <Parameterset_query+0x24e>
		return CMD_FORMAT_ERROR;
	}
	memcpy(tx_buffer, txpackage, tx_length);
 8002e98:	4b25      	ldr	r3, [pc, #148]	@ (8002f30 <Parameterset_query+0x258>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <Parameterset_query+0x254>)
 8002e9e:	8812      	ldrh	r2, [r2, #0]
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4829      	ldr	r0, [pc, #164]	@ (8002f4c <Parameterset_query+0x274>)
 8002ea6:	f005 fd44 	bl	8008932 <memcpy>
	int16_t checklength = (int16_t)tx_length - 2;
 8002eaa:	4b20      	ldr	r3, [pc, #128]	@ (8002f2c <Parameterset_query+0x254>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b02      	subs	r3, #2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	817b      	strh	r3, [r7, #10]
	SUM = Checksum(&tx_buffer[2], checklength);
 8002eb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4824      	ldr	r0, [pc, #144]	@ (8002f50 <Parameterset_query+0x278>)
 8002ebe:	f7ff fbdb 	bl	8002678 <Checksum>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b23      	ldr	r3, [pc, #140]	@ (8002f54 <Parameterset_query+0x27c>)
 8002ec8:	801a      	strh	r2, [r3, #0]
	checksum = exchange(&SUM);
 8002eca:	4822      	ldr	r0, [pc, #136]	@ (8002f54 <Parameterset_query+0x27c>)
 8002ecc:	f7ff fbb8 	bl	8002640 <exchange>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <Parameterset_query+0x280>)
 8002ed6:	801a      	strh	r2, [r3, #0]
	tail = exchange(&tail);
 8002ed8:	4820      	ldr	r0, [pc, #128]	@ (8002f5c <Parameterset_query+0x284>)
 8002eda:	f7ff fbb1 	bl	8002640 <exchange>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <Parameterset_query+0x284>)
 8002ee4:	801a      	strh	r2, [r3, #0]
	memcpy(&tx_buffer[tx_length], &checksum, 2);
 8002ee6:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <Parameterset_query+0x254>)
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <Parameterset_query+0x274>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4a19      	ldr	r2, [pc, #100]	@ (8002f58 <Parameterset_query+0x280>)
 8002ef4:	8812      	ldrh	r2, [r2, #0]
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	801a      	strh	r2, [r3, #0]
	memcpy(&tx_buffer[tx_length + 2], &tail, 2);
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <Parameterset_query+0x254>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3302      	adds	r3, #2
 8002f02:	4a12      	ldr	r2, [pc, #72]	@ (8002f4c <Parameterset_query+0x274>)
 8002f04:	4413      	add	r3, r2
 8002f06:	4a15      	ldr	r2, [pc, #84]	@ (8002f5c <Parameterset_query+0x284>)
 8002f08:	8812      	ldrh	r2, [r2, #0]
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	801a      	strh	r2, [r3, #0]
	tx_length += 4;
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <Parameterset_query+0x254>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3304      	adds	r3, #4
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <Parameterset_query+0x254>)
 8002f1a:	801a      	strh	r2, [r3, #0]
	free(txpackage);
 8002f1c:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <Parameterset_query+0x258>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 fab5 	bl	8007490 <free>
}
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd90      	pop	{r4, r7, pc}
 8002f2c:	20000426 	.word	0x20000426
 8002f30:	20000754 	.word	0x20000754
 8002f34:	20000750 	.word	0x20000750
 8002f38:	20000010 	.word	0x20000010
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	20000006 	.word	0x20000006
 8002f44:	20000008 	.word	0x20000008
 8002f48:	0800bcbc 	.word	0x0800bcbc
 8002f4c:	20000324 	.word	0x20000324
 8002f50:	20000326 	.word	0x20000326
 8002f54:	2000074a 	.word	0x2000074a
 8002f58:	20000746 	.word	0x20000746
 8002f5c:	20000748 	.word	0x20000748

08002f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f64:	f7ff f95a 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f68:	480c      	ldr	r0, [pc, #48]	@ (8002f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f6a:	490d      	ldr	r1, [pc, #52]	@ (8002fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa4 <LoopForever+0xe>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f70:	e002      	b.n	8002f78 <LoopCopyDataInit>

08002f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f76:	3304      	adds	r3, #4

08002f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f7c:	d3f9      	bcc.n	8002f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f80:	4c0a      	ldr	r4, [pc, #40]	@ (8002fac <LoopForever+0x16>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f84:	e001      	b.n	8002f8a <LoopFillZerobss>

08002f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f88:	3204      	adds	r2, #4

08002f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f8c:	d3fb      	bcc.n	8002f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f8e:	f005 fca9 	bl	80088e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f92:	f7fe fa25 	bl	80013e0 <main>

08002f96 <LoopForever>:

LoopForever:
    b LoopForever
 8002f96:	e7fe      	b.n	8002f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f98:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002fa4:	0800c148 	.word	0x0800c148
  ldr r2, =_sbss
 8002fa8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002fac:	200008c0 	.word	0x200008c0

08002fb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fb0:	e7fe      	b.n	8002fb0 <ADC1_IRQHandler>

08002fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f000 f961 	bl	8003284 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fc2:	200f      	movs	r0, #15
 8002fc4:	f000 f80e 	bl	8002fe4 <HAL_InitTick>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	71fb      	strb	r3, [r7, #7]
 8002fd2:	e001      	b.n	8002fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fd4:	f7fe ffa4 	bl	8001f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ff0:	4b17      	ldr	r3, [pc, #92]	@ (8003050 <HAL_InitTick+0x6c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ff8:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <HAL_InitTick+0x70>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <HAL_InitTick+0x6c>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003006:	fbb3 f3f1 	udiv	r3, r3, r1
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f96d 	bl	80032ee <HAL_SYSTICK_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b0f      	cmp	r3, #15
 800301e:	d809      	bhi.n	8003034 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f000 f937 	bl	800329a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800302c:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <HAL_InitTick+0x74>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e007      	b.n	8003044 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e004      	b.n	8003044 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e001      	b.n	8003044 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000028 	.word	0x20000028
 8003054:	20000000 	.word	0x20000000
 8003058:	20000024 	.word	0x20000024

0800305c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003060:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_IncTick+0x20>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_IncTick+0x24>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4413      	add	r3, r2
 800306c:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <HAL_IncTick+0x24>)
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000028 	.word	0x20000028
 8003080:	2000075c 	.word	0x2000075c

08003084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return uwTick;
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <HAL_GetTick+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	2000075c 	.word	0x2000075c

0800309c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff ffee 	bl	8003084 <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d005      	beq.n	80030c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <HAL_Delay+0x44>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030c2:	bf00      	nop
 80030c4:	f7ff ffde 	bl	8003084 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d8f7      	bhi.n	80030c4 <HAL_Delay+0x28>
  {
  }
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000028 	.word	0x20000028

080030e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0b      	blt.n	8003172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4907      	ldr	r1, [pc, #28]	@ (8003180 <__NVIC_EnableIRQ+0x38>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	490c      	ldr	r1, [pc, #48]	@ (80031d0 <__NVIC_SetPriority+0x4c>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4908      	ldr	r1, [pc, #32]	@ (80031d4 <__NVIC_SetPriority+0x50>)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	3b04      	subs	r3, #4
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf28      	it	cs
 80031f6:	2304      	movcs	r3, #4
 80031f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d902      	bls.n	8003208 <NVIC_EncodePriority+0x30>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b03      	subs	r3, #3
 8003206:	e000      	b.n	800320a <NVIC_EncodePriority+0x32>
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	401a      	ands	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43d9      	mvns	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	4313      	orrs	r3, r2
         );
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	@ 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003250:	d301      	bcc.n	8003256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003252:	2301      	movs	r3, #1
 8003254:	e00f      	b.n	8003276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003256:	4a0a      	ldr	r2, [pc, #40]	@ (8003280 <SysTick_Config+0x40>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325e:	210f      	movs	r1, #15
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	f7ff ff8e 	bl	8003184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003268:	4b05      	ldr	r3, [pc, #20]	@ (8003280 <SysTick_Config+0x40>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326e:	4b04      	ldr	r3, [pc, #16]	@ (8003280 <SysTick_Config+0x40>)
 8003270:	2207      	movs	r2, #7
 8003272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000e010 	.word	0xe000e010

08003284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff29 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032ac:	f7ff ff3e 	bl	800312c <__NVIC_GetPriorityGrouping>
 80032b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	6978      	ldr	r0, [r7, #20]
 80032b8:	f7ff ff8e 	bl	80031d8 <NVIC_EncodePriority>
 80032bc:	4602      	mov	r2, r0
 80032be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff5d 	bl	8003184 <__NVIC_SetPriority>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff31 	bl	8003148 <__NVIC_EnableIRQ>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffa2 	bl	8003240 <SysTick_Config>
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e098      	b.n	800344c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	4b4d      	ldr	r3, [pc, #308]	@ (8003458 <HAL_DMA_Init+0x150>)
 8003322:	429a      	cmp	r2, r3
 8003324:	d80f      	bhi.n	8003346 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <HAL_DMA_Init+0x154>)
 800332e:	4413      	add	r3, r2
 8003330:	4a4b      	ldr	r2, [pc, #300]	@ (8003460 <HAL_DMA_Init+0x158>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	009a      	lsls	r2, r3, #2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a48      	ldr	r2, [pc, #288]	@ (8003464 <HAL_DMA_Init+0x15c>)
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40
 8003344:	e00e      	b.n	8003364 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	4b46      	ldr	r3, [pc, #280]	@ (8003468 <HAL_DMA_Init+0x160>)
 800334e:	4413      	add	r3, r2
 8003350:	4a43      	ldr	r2, [pc, #268]	@ (8003460 <HAL_DMA_Init+0x158>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	009a      	lsls	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a42      	ldr	r2, [pc, #264]	@ (800346c <HAL_DMA_Init+0x164>)
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800337a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033be:	d039      	beq.n	8003434 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	4a27      	ldr	r2, [pc, #156]	@ (8003464 <HAL_DMA_Init+0x15c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d11a      	bne.n	8003400 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033ca:	4b29      	ldr	r3, [pc, #164]	@ (8003470 <HAL_DMA_Init+0x168>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	f003 031c 	and.w	r3, r3, #28
 80033d6:	210f      	movs	r1, #15
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	4924      	ldr	r1, [pc, #144]	@ (8003470 <HAL_DMA_Init+0x168>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033e4:	4b22      	ldr	r3, [pc, #136]	@ (8003470 <HAL_DMA_Init+0x168>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f0:	f003 031c 	and.w	r3, r3, #28
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	491d      	ldr	r1, [pc, #116]	@ (8003470 <HAL_DMA_Init+0x168>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
 80033fe:	e019      	b.n	8003434 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003400:	4b1c      	ldr	r3, [pc, #112]	@ (8003474 <HAL_DMA_Init+0x16c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003408:	f003 031c 	and.w	r3, r3, #28
 800340c:	210f      	movs	r1, #15
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	4917      	ldr	r1, [pc, #92]	@ (8003474 <HAL_DMA_Init+0x16c>)
 8003416:	4013      	ands	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800341a:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <HAL_DMA_Init+0x16c>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	f003 031c 	and.w	r3, r3, #28
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	4911      	ldr	r1, [pc, #68]	@ (8003474 <HAL_DMA_Init+0x16c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40020407 	.word	0x40020407
 800345c:	bffdfff8 	.word	0xbffdfff8
 8003460:	cccccccd 	.word	0xcccccccd
 8003464:	40020000 	.word	0x40020000
 8003468:	bffdfbf8 	.word	0xbffdfbf8
 800346c:	40020400 	.word	0x40020400
 8003470:	400200a8 	.word	0x400200a8
 8003474:	400204a8 	.word	0x400204a8

08003478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Start_IT+0x20>
 8003494:	2302      	movs	r3, #2
 8003496:	e04b      	b.n	8003530 <HAL_DMA_Start_IT+0xb8>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d13a      	bne.n	8003522 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f96b 	bl	80037ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 020e 	orr.w	r2, r2, #14
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e00f      	b.n	8003510 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 020a 	orr.w	r2, r2, #10
 800350e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e005      	b.n	800352e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800352e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d008      	beq.n	8003562 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2204      	movs	r2, #4
 8003554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e022      	b.n	80035a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 020e 	bic.w	r2, r2, #14
 8003570:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f003 021c 	and.w	r2, r3, #28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	2101      	movs	r1, #1
 8003590:	fa01 f202 	lsl.w	r2, r1, r2
 8003594:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d005      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2204      	movs	r2, #4
 80035d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e029      	b.n	800362c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 020e 	bic.w	r2, r2, #14
 80035e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fc:	f003 021c 	and.w	r2, r3, #28
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
    }
  }
  return status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	f003 031c 	and.w	r3, r3, #28
 8003656:	2204      	movs	r2, #4
 8003658:	409a      	lsls	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d026      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x7a>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d021      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0204 	bic.w	r2, r2, #4
 8003688:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f003 021c 	and.w	r2, r3, #28
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	2104      	movs	r1, #4
 8003698:	fa01 f202 	lsl.w	r2, r1, r2
 800369c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d071      	beq.n	800378a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036ae:	e06c      	b.n	800378a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b4:	f003 031c 	and.w	r3, r3, #28
 80036b8:	2202      	movs	r2, #2
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d02e      	beq.n	8003722 <HAL_DMA_IRQHandler+0xec>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d029      	beq.n	8003722 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 020a 	bic.w	r2, r2, #10
 80036ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f8:	f003 021c 	and.w	r2, r3, #28
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	2102      	movs	r1, #2
 8003702:	fa01 f202 	lsl.w	r2, r1, r2
 8003706:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d038      	beq.n	800378a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003720:	e033      	b.n	800378a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	f003 031c 	and.w	r3, r3, #28
 800372a:	2208      	movs	r2, #8
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d02a      	beq.n	800378c <HAL_DMA_IRQHandler+0x156>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d025      	beq.n	800378c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 020e 	bic.w	r2, r2, #14
 800374e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003754:	f003 021c 	and.w	r2, r3, #28
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800378a:	bf00      	nop
 800378c:	bf00      	nop
}
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	f003 021c 	and.w	r2, r3, #28
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d108      	bne.n	80037f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037ee:	e007      	b.n	8003800 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800381a:	e154      	b.n	8003ac6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2101      	movs	r1, #1
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	4013      	ands	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8146 	beq.w	8003ac0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d005      	beq.n	800384c <HAL_GPIO_Init+0x40>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d130      	bne.n	80038ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003882:	2201      	movs	r2, #1
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 0201 	and.w	r2, r3, #1
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d017      	beq.n	80038ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	2203      	movs	r2, #3
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d123      	bne.n	800393e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	08da      	lsrs	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3208      	adds	r2, #8
 80038fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003902:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	08da      	lsrs	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3208      	adds	r2, #8
 8003938:	6939      	ldr	r1, [r7, #16]
 800393a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	2203      	movs	r2, #3
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80a0 	beq.w	8003ac0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003980:	4b58      	ldr	r3, [pc, #352]	@ (8003ae4 <HAL_GPIO_Init+0x2d8>)
 8003982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003984:	4a57      	ldr	r2, [pc, #348]	@ (8003ae4 <HAL_GPIO_Init+0x2d8>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6613      	str	r3, [r2, #96]	@ 0x60
 800398c:	4b55      	ldr	r3, [pc, #340]	@ (8003ae4 <HAL_GPIO_Init+0x2d8>)
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003998:	4a53      	ldr	r2, [pc, #332]	@ (8003ae8 <HAL_GPIO_Init+0x2dc>)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	3302      	adds	r3, #2
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	220f      	movs	r2, #15
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039c2:	d019      	beq.n	80039f8 <HAL_GPIO_Init+0x1ec>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a49      	ldr	r2, [pc, #292]	@ (8003aec <HAL_GPIO_Init+0x2e0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_GPIO_Init+0x1e8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a48      	ldr	r2, [pc, #288]	@ (8003af0 <HAL_GPIO_Init+0x2e4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00d      	beq.n	80039f0 <HAL_GPIO_Init+0x1e4>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a47      	ldr	r2, [pc, #284]	@ (8003af4 <HAL_GPIO_Init+0x2e8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <HAL_GPIO_Init+0x1e0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a46      	ldr	r2, [pc, #280]	@ (8003af8 <HAL_GPIO_Init+0x2ec>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_GPIO_Init+0x1dc>
 80039e4:	2304      	movs	r3, #4
 80039e6:	e008      	b.n	80039fa <HAL_GPIO_Init+0x1ee>
 80039e8:	2307      	movs	r3, #7
 80039ea:	e006      	b.n	80039fa <HAL_GPIO_Init+0x1ee>
 80039ec:	2303      	movs	r3, #3
 80039ee:	e004      	b.n	80039fa <HAL_GPIO_Init+0x1ee>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e002      	b.n	80039fa <HAL_GPIO_Init+0x1ee>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_GPIO_Init+0x1ee>
 80039f8:	2300      	movs	r3, #0
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	f002 0203 	and.w	r2, r2, #3
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	4093      	lsls	r3, r2
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a0a:	4937      	ldr	r1, [pc, #220]	@ (8003ae8 <HAL_GPIO_Init+0x2dc>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a18:	4b38      	ldr	r3, [pc, #224]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a42:	4b2e      	ldr	r3, [pc, #184]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a66:	4a25      	ldr	r2, [pc, #148]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a6c:	4b23      	ldr	r3, [pc, #140]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a90:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a96:	4b19      	ldr	r3, [pc, #100]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003aba:	4a10      	ldr	r2, [pc, #64]	@ (8003afc <HAL_GPIO_Init+0x2f0>)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f47f aea3 	bne.w	800381c <HAL_GPIO_Init+0x10>
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40010000 	.word	0x40010000
 8003aec:	48000400 	.word	0x48000400
 8003af0:	48000800 	.word	0x48000800
 8003af4:	48000c00 	.word	0x48000c00
 8003af8:	48001000 	.word	0x48001000
 8003afc:	40010400 	.word	0x40010400

08003b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b10:	787b      	ldrb	r3, [r7, #1]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b1c:	e002      	b.n	8003b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40007000 	.word	0x40007000

08003b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b5a:	d130      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b5c:	4b23      	ldr	r3, [pc, #140]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b68:	d038      	beq.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b6a:	4b20      	ldr	r3, [pc, #128]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b72:	4a1e      	ldr	r2, [pc, #120]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2232      	movs	r2, #50	@ 0x32
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0c9b      	lsrs	r3, r3, #18
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b90:	e002      	b.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b98:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba4:	d102      	bne.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f2      	bne.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bac:	4b0f      	ldr	r3, [pc, #60]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb8:	d110      	bne.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e00f      	b.n	8003bde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bca:	d007      	beq.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bcc:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bd4:	4a05      	ldr	r2, [pc, #20]	@ (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	431bde83 	.word	0x431bde83

08003bf8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f000 bc02 	b.w	8004410 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0c:	4b96      	ldr	r3, [pc, #600]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c16:	4b94      	ldr	r3, [pc, #592]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80e4 	beq.w	8003df6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4c>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	f040 808b 	bne.w	8003d52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	f040 8087 	bne.w	8003d52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c44:	4b88      	ldr	r3, [pc, #544]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_OscConfig+0x64>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e3d9      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	4b81      	ldr	r3, [pc, #516]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_RCC_OscConfig+0x7e>
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c74:	e005      	b.n	8003c82 <HAL_RCC_OscConfig+0x8a>
 8003c76:	4b7c      	ldr	r3, [pc, #496]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d223      	bcs.n	8003cce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fd8c 	bl	80047a8 <RCC_SetFlashLatencyFromMSIRange>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e3ba      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c9a:	4b73      	ldr	r3, [pc, #460]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a72      	ldr	r2, [pc, #456]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	f043 0308 	orr.w	r3, r3, #8
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b70      	ldr	r3, [pc, #448]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	496d      	ldr	r1, [pc, #436]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	4968      	ldr	r1, [pc, #416]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
 8003ccc:	e025      	b.n	8003d1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cce:	4b66      	ldr	r3, [pc, #408]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a65      	ldr	r2, [pc, #404]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b63      	ldr	r3, [pc, #396]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4960      	ldr	r1, [pc, #384]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cec:	4b5e      	ldr	r3, [pc, #376]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	495b      	ldr	r1, [pc, #364]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fd4c 	bl	80047a8 <RCC_SetFlashLatencyFromMSIRange>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e37a      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d1a:	f000 fc81 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b51      	ldr	r3, [pc, #324]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	4950      	ldr	r1, [pc, #320]	@ (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a4e      	ldr	r2, [pc, #312]	@ (8003e70 <HAL_RCC_OscConfig+0x278>)
 8003d38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f950 	bl	8002fe4 <HAL_InitTick>
 8003d44:	4603      	mov	r3, r0
 8003d46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d052      	beq.n	8003df4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	e35e      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d032      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d5a:	4b43      	ldr	r3, [pc, #268]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a42      	ldr	r2, [pc, #264]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d66:	f7ff f98d 	bl	8003084 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6e:	f7ff f989 	bl	8003084 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e347      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d80:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a35      	ldr	r2, [pc, #212]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d92:	f043 0308 	orr.w	r3, r3, #8
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b33      	ldr	r3, [pc, #204]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4930      	ldr	r1, [pc, #192]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003daa:	4b2f      	ldr	r3, [pc, #188]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	492b      	ldr	r1, [pc, #172]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
 8003dbe:	e01a      	b.n	8003df6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dc0:	4b29      	ldr	r3, [pc, #164]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a28      	ldr	r2, [pc, #160]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dcc:	f7ff f95a 	bl	8003084 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd4:	f7ff f956 	bl	8003084 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e314      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de6:	4b20      	ldr	r3, [pc, #128]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1dc>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d073      	beq.n	8003eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_OscConfig+0x21c>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d10e      	bne.n	8003e2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d063      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d15f      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e2f1      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x24c>
 8003e36:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e025      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e4c:	d114      	bne.n	8003e78 <HAL_RCC_OscConfig+0x280>
 8003e4e:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a05      	ldr	r2, [pc, #20]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b03      	ldr	r3, [pc, #12]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a02      	ldr	r2, [pc, #8]	@ (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e013      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	0800bccc 	.word	0x0800bccc
 8003e70:	20000000 	.word	0x20000000
 8003e74:	20000024 	.word	0x20000024
 8003e78:	4ba0      	ldr	r3, [pc, #640]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a9f      	ldr	r2, [pc, #636]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b9d      	ldr	r3, [pc, #628]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a9c      	ldr	r2, [pc, #624]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7ff f8f4 	bl	8003084 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7ff f8f0 	bl	8003084 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	@ 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e2ae      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	4b92      	ldr	r3, [pc, #584]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x2a8>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7ff f8e0 	bl	8003084 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7ff f8dc 	bl	8003084 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	@ 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e29a      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eda:	4b88      	ldr	r3, [pc, #544]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d0>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d060      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x310>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d116      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f08:	4b7c      	ldr	r3, [pc, #496]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_OscConfig+0x328>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e277      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b76      	ldr	r3, [pc, #472]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	4973      	ldr	r1, [pc, #460]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	e040      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d023      	beq.n	8003f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6e      	ldr	r2, [pc, #440]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7ff f89b 	bl	8003084 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7ff f897 	bl	8003084 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e255      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f64:	4b65      	ldr	r3, [pc, #404]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b62      	ldr	r3, [pc, #392]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	495f      	ldr	r1, [pc, #380]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	e018      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b5d      	ldr	r3, [pc, #372]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7ff f877 	bl	8003084 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7ff f873 	bl	8003084 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e231      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fac:	4b53      	ldr	r3, [pc, #332]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d03c      	beq.n	800403e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01c      	beq.n	8004006 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7ff f852 	bl	8003084 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7ff f84e 	bl	8003084 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e20c      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff6:	4b41      	ldr	r3, [pc, #260]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3ec>
 8004004:	e01b      	b.n	800403e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	4b3d      	ldr	r3, [pc, #244]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400c:	4a3b      	ldr	r2, [pc, #236]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7ff f835 	bl	8003084 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401e:	f7ff f831 	bl	8003084 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1ef      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004030:	4b32      	ldr	r3, [pc, #200]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ef      	bne.n	800401e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a6 	beq.w	8004198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004050:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	4a26      	ldr	r2, [pc, #152]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	@ 0x58
 8004068:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004078:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <HAL_RCC_OscConfig+0x508>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004084:	4b1e      	ldr	r3, [pc, #120]	@ (8004100 <HAL_RCC_OscConfig+0x508>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	@ (8004100 <HAL_RCC_OscConfig+0x508>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004090:	f7fe fff8 	bl	8003084 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fe fff4 	bl	8003084 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1b2      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4b15      	ldr	r3, [pc, #84]	@ (8004100 <HAL_RCC_OscConfig+0x508>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4d8>
 80040be:	4b0f      	ldr	r3, [pc, #60]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c4:	4a0d      	ldr	r2, [pc, #52]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ce:	e029      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d115      	bne.n	8004104 <HAL_RCC_OscConfig+0x50c>
 80040d8:	4b08      	ldr	r3, [pc, #32]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040de:	4a07      	ldr	r2, [pc, #28]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040e8:	4b04      	ldr	r3, [pc, #16]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	4a03      	ldr	r2, [pc, #12]	@ (80040fc <HAL_RCC_OscConfig+0x504>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
 8004104:	4b9a      	ldr	r3, [pc, #616]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410a:	4a99      	ldr	r2, [pc, #612]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004114:	4b96      	ldr	r3, [pc, #600]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411a:	4a95      	ldr	r2, [pc, #596]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d016      	beq.n	800415a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe ffaa 	bl	8003084 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fe ffa6 	bl	8003084 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e162      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414a:	4b89      	ldr	r3, [pc, #548]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ed      	beq.n	8004134 <HAL_RCC_OscConfig+0x53c>
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fe ff93 	bl	8003084 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fe ff8f 	bl	8003084 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e14b      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004178:	4b7d      	ldr	r3, [pc, #500]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ed      	bne.n	8004162 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004186:	7ffb      	ldrb	r3, [r7, #31]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b78      	ldr	r3, [pc, #480]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004190:	4a77      	ldr	r2, [pc, #476]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03c      	beq.n	800421e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ac:	4b70      	ldr	r3, [pc, #448]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80041ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041b2:	4a6f      	ldr	r2, [pc, #444]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fe ff62 	bl	8003084 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c4:	f7fe ff5e 	bl	8003084 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e11c      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041d6:	4b66      	ldr	r3, [pc, #408]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80041d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ef      	beq.n	80041c4 <HAL_RCC_OscConfig+0x5cc>
 80041e4:	e01b      	b.n	800421e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041e6:	4b62      	ldr	r3, [pc, #392]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80041e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ec:	4a60      	ldr	r2, [pc, #384]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fe ff45 	bl	8003084 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041fe:	f7fe ff41 	bl	8003084 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e0ff      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004210:	4b57      	ldr	r3, [pc, #348]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 8004212:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ef      	bne.n	80041fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80f3 	beq.w	800440e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	2b02      	cmp	r3, #2
 800422e:	f040 80c9 	bne.w	80043c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004232:	4b4f      	ldr	r3, [pc, #316]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0203 	and.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	429a      	cmp	r2, r3
 8004244:	d12c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	3b01      	subs	r3, #1
 8004252:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d123      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004262:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d11b      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d113      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	3b01      	subs	r3, #1
 800429a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d06b      	beq.n	8004378 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d062      	beq.n	800436c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042a6:	4b32      	ldr	r3, [pc, #200]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e0ac      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80042bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042c2:	f7fe fedf 	bl	8003084 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fe fedb 	bl	8003084 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e099      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042dc:	4b24      	ldr	r3, [pc, #144]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e8:	4b21      	ldr	r3, [pc, #132]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <HAL_RCC_OscConfig+0x77c>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042f8:	3a01      	subs	r2, #1
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004302:	0212      	lsls	r2, r2, #8
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800430a:	0852      	lsrs	r2, r2, #1
 800430c:	3a01      	subs	r2, #1
 800430e:	0552      	lsls	r2, r2, #21
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004316:	0852      	lsrs	r2, r2, #1
 8004318:	3a01      	subs	r2, #1
 800431a:	0652      	lsls	r2, r2, #25
 800431c:	4311      	orrs	r1, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004322:	06d2      	lsls	r2, r2, #27
 8004324:	430a      	orrs	r2, r1
 8004326:	4912      	ldr	r1, [pc, #72]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 8004328:	4313      	orrs	r3, r2
 800432a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800432c:	4b10      	ldr	r3, [pc, #64]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0f      	ldr	r2, [pc, #60]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004336:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a0c      	ldr	r2, [pc, #48]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004342:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004344:	f7fe fe9e 	bl	8003084 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7fe fe9a 	bl	8003084 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e058      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435e:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <HAL_RCC_OscConfig+0x778>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800436a:	e050      	b.n	800440e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e04f      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
 8004370:	40021000 	.word	0x40021000
 8004374:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004378:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d144      	bne.n	800440e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004384:	4b24      	ldr	r3, [pc, #144]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a23      	ldr	r2, [pc, #140]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 800438a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800438e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004390:	4b21      	ldr	r3, [pc, #132]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a20      	ldr	r2, [pc, #128]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800439a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800439c:	f7fe fe72 	bl	8003084 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe fe6e 	bl	8003084 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e02c      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b6:	4b18      	ldr	r3, [pc, #96]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x7ac>
 80043c2:	e024      	b.n	800440e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b0c      	cmp	r3, #12
 80043c8:	d01f      	beq.n	800440a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b13      	ldr	r3, [pc, #76]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a12      	ldr	r2, [pc, #72]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 80043d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fe fe55 	bl	8003084 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043de:	f7fe fe51 	bl	8003084 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e00f      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f0:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	4905      	ldr	r1, [pc, #20]	@ (8004418 <HAL_RCC_OscConfig+0x820>)
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_OscConfig+0x824>)
 8004404:	4013      	ands	r3, r2
 8004406:	60cb      	str	r3, [r1, #12]
 8004408:	e001      	b.n	800440e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	feeefffc 	.word	0xfeeefffc

08004420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0e7      	b.n	8004604 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004434:	4b75      	ldr	r3, [pc, #468]	@ (800460c <HAL_RCC_ClockConfig+0x1ec>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d910      	bls.n	8004464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b72      	ldr	r3, [pc, #456]	@ (800460c <HAL_RCC_ClockConfig+0x1ec>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 0207 	bic.w	r2, r3, #7
 800444a:	4970      	ldr	r1, [pc, #448]	@ (800460c <HAL_RCC_ClockConfig+0x1ec>)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	4b6e      	ldr	r3, [pc, #440]	@ (800460c <HAL_RCC_ClockConfig+0x1ec>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0cf      	b.n	8004604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d010      	beq.n	8004492 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	4b66      	ldr	r3, [pc, #408]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800447c:	429a      	cmp	r2, r3
 800447e:	d908      	bls.n	8004492 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004480:	4b63      	ldr	r3, [pc, #396]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4960      	ldr	r1, [pc, #384]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d04c      	beq.n	8004538 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d121      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e0a6      	b.n	8004604 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044be:	4b54      	ldr	r3, [pc, #336]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d115      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e09a      	b.n	8004604 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e08e      	b.n	8004604 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e086      	b.n	8004604 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	4b46      	ldr	r3, [pc, #280]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4943      	ldr	r1, [pc, #268]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fe fdbc 	bl	8003084 <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fe fdb8 	bl	8003084 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e06e      	b.n	8004604 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b3a      	ldr	r3, [pc, #232]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 020c 	and.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1eb      	bne.n	8004510 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004550:	429a      	cmp	r2, r3
 8004552:	d208      	bcs.n	8004566 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b2e      	ldr	r3, [pc, #184]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	492b      	ldr	r1, [pc, #172]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004566:	4b29      	ldr	r3, [pc, #164]	@ (800460c <HAL_RCC_ClockConfig+0x1ec>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d210      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004574:	4b25      	ldr	r3, [pc, #148]	@ (800460c <HAL_RCC_ClockConfig+0x1ec>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 0207 	bic.w	r2, r3, #7
 800457c:	4923      	ldr	r1, [pc, #140]	@ (800460c <HAL_RCC_ClockConfig+0x1ec>)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004584:	4b21      	ldr	r3, [pc, #132]	@ (800460c <HAL_RCC_ClockConfig+0x1ec>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d001      	beq.n	8004596 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e036      	b.n	8004604 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4918      	ldr	r1, [pc, #96]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c0:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4910      	ldr	r1, [pc, #64]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045d4:	f000 f824 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	490b      	ldr	r1, [pc, #44]	@ (8004614 <HAL_RCC_ClockConfig+0x1f4>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	4a09      	ldr	r2, [pc, #36]	@ (8004618 <HAL_RCC_ClockConfig+0x1f8>)
 80045f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045f4:	4b09      	ldr	r3, [pc, #36]	@ (800461c <HAL_RCC_ClockConfig+0x1fc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fcf3 	bl	8002fe4 <HAL_InitTick>
 80045fe:	4603      	mov	r3, r0
 8004600:	72fb      	strb	r3, [r7, #11]

  return status;
 8004602:	7afb      	ldrb	r3, [r7, #11]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40022000 	.word	0x40022000
 8004610:	40021000 	.word	0x40021000
 8004614:	0800bccc 	.word	0x0800bccc
 8004618:	20000000 	.word	0x20000000
 800461c:	20000024 	.word	0x20000024

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	@ 0x24
 8004624:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462e:	4b3e      	ldr	r3, [pc, #248]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004638:	4b3b      	ldr	r3, [pc, #236]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x34>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d121      	bne.n	8004692 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d11e      	bne.n	8004692 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004654:	4b34      	ldr	r3, [pc, #208]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004660:	4b31      	ldr	r3, [pc, #196]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	e005      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004670:	4b2d      	ldr	r3, [pc, #180]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800467c:	4a2b      	ldr	r2, [pc, #172]	@ (800472c <HAL_RCC_GetSysClockFreq+0x10c>)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004684:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10d      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d102      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004698:	4b25      	ldr	r3, [pc, #148]	@ (8004730 <HAL_RCC_GetSysClockFreq+0x110>)
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e004      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046a4:	4b23      	ldr	r3, [pc, #140]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x114>)
 80046a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d134      	bne.n	8004718 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d003      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0xac>
 80046c4:	e005      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <HAL_RCC_GetSysClockFreq+0x110>)
 80046c8:	617b      	str	r3, [r7, #20]
      break;
 80046ca:	e005      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046cc:	4b19      	ldr	r3, [pc, #100]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x114>)
 80046ce:	617b      	str	r3, [r7, #20]
      break;
 80046d0:	e002      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	617b      	str	r3, [r7, #20]
      break;
 80046d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	3301      	adds	r3, #1
 80046e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046e6:	4b10      	ldr	r3, [pc, #64]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	fb03 f202 	mul.w	r2, r3, r2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x108>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	0e5b      	lsrs	r3, r3, #25
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	3301      	adds	r3, #1
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	fbb2 f3f3 	udiv	r3, r2, r3
 8004716:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004718:	69bb      	ldr	r3, [r7, #24]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	@ 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	0800bce4 	.word	0x0800bce4
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200

08004738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	@ (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000000 	.word	0x20000000

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4904      	ldr	r1, [pc, #16]	@ (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	0800bcdc 	.word	0x0800bcdc

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004780:	f7ff ffda 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0adb      	lsrs	r3, r3, #11
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	@ (80047a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800bcdc 	.word	0x0800bcdc

080047a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047c0:	f7ff f9b6 	bl	8003b30 <HAL_PWREx_GetVoltageRange>
 80047c4:	6178      	str	r0, [r7, #20]
 80047c6:	e014      	b.n	80047f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c8:	4b25      	ldr	r3, [pc, #148]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	4a24      	ldr	r2, [pc, #144]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d4:	4b22      	ldr	r3, [pc, #136]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047e0:	f7ff f9a6 	bl	8003b30 <HAL_PWREx_GetVoltageRange>
 80047e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f8:	d10b      	bne.n	8004812 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b80      	cmp	r3, #128	@ 0x80
 80047fe:	d919      	bls.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2ba0      	cmp	r3, #160	@ 0xa0
 8004804:	d902      	bls.n	800480c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004806:	2302      	movs	r3, #2
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	e013      	b.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800480c:	2301      	movs	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	e010      	b.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b80      	cmp	r3, #128	@ 0x80
 8004816:	d902      	bls.n	800481e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004818:	2303      	movs	r3, #3
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	e00a      	b.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b80      	cmp	r3, #128	@ 0x80
 8004822:	d102      	bne.n	800482a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004824:	2302      	movs	r3, #2
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e004      	b.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b70      	cmp	r3, #112	@ 0x70
 800482e:	d101      	bne.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004830:	2301      	movs	r3, #1
 8004832:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004834:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 0207 	bic.w	r2, r3, #7
 800483c:	4909      	ldr	r1, [pc, #36]	@ (8004864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004844:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	d001      	beq.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000
 8004864:	40022000 	.word	0x40022000

08004868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004870:	2300      	movs	r3, #0
 8004872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004874:	2300      	movs	r3, #0
 8004876:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004880:	2b00      	cmp	r3, #0
 8004882:	d031      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004888:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800488c:	d01a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800488e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004892:	d814      	bhi.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004898:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800489c:	d10f      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800489e:	4b5d      	ldr	r3, [pc, #372]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048aa:	e00c      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fa22 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	74fb      	strb	r3, [r7, #19]
      break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80048c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048cc:	4b51      	ldr	r3, [pc, #324]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	494e      	ldr	r1, [pc, #312]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048e2:	e001      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 809e 	beq.w	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048fa:	4b46      	ldr	r3, [pc, #280]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800490a:	2300      	movs	r3, #0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004910:	4b40      	ldr	r3, [pc, #256]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	4a3f      	ldr	r2, [pc, #252]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800491a:	6593      	str	r3, [r2, #88]	@ 0x58
 800491c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004928:	2301      	movs	r3, #1
 800492a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800492c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a39      	ldr	r2, [pc, #228]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004938:	f7fe fba4 	bl	8003084 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800493e:	e009      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fe fba0 	bl	8003084 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d902      	bls.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	74fb      	strb	r3, [r7, #19]
        break;
 8004952:	e005      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004954:	4b30      	ldr	r3, [pc, #192]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ef      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d15a      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004966:	4b2b      	ldr	r3, [pc, #172]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004970:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01e      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	429a      	cmp	r2, r3
 8004980:	d019      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004982:	4b24      	ldr	r3, [pc, #144]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800498c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800498e:	4b21      	ldr	r3, [pc, #132]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004994:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800499e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049ae:	4a19      	ldr	r2, [pc, #100]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d016      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fe fb60 	bl	8003084 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c6:	e00b      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fe fb5c 	bl	8003084 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d902      	bls.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	74fb      	strb	r3, [r7, #19]
            break;
 80049de:	e006      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0ec      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f4:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a02:	4904      	ldr	r1, [pc, #16]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a0a:	e009      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	74bb      	strb	r3, [r7, #18]
 8004a10:	e006      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a20:	7c7b      	ldrb	r3, [r7, #17]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b8d      	ldr	r3, [pc, #564]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2a:	4a8c      	ldr	r2, [pc, #560]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a3e:	4b87      	ldr	r3, [pc, #540]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a44:	f023 0203 	bic.w	r2, r3, #3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	4983      	ldr	r1, [pc, #524]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a60:	4b7e      	ldr	r3, [pc, #504]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a66:	f023 020c 	bic.w	r2, r3, #12
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	497b      	ldr	r1, [pc, #492]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a82:	4b76      	ldr	r3, [pc, #472]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	4972      	ldr	r1, [pc, #456]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aa4:	4b6d      	ldr	r3, [pc, #436]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aaa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab2:	496a      	ldr	r1, [pc, #424]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ac6:	4b65      	ldr	r3, [pc, #404]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004acc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	4961      	ldr	r1, [pc, #388]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ae8:	4b5c      	ldr	r3, [pc, #368]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	4959      	ldr	r1, [pc, #356]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b0a:	4b54      	ldr	r3, [pc, #336]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b18:	4950      	ldr	r1, [pc, #320]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	4948      	ldr	r1, [pc, #288]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b4e:	4b43      	ldr	r3, [pc, #268]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	493f      	ldr	r1, [pc, #252]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d028      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b70:	4b3a      	ldr	r3, [pc, #232]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7e:	4937      	ldr	r1, [pc, #220]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b90:	4b32      	ldr	r3, [pc, #200]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a31      	ldr	r2, [pc, #196]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9a:	60d3      	str	r3, [r2, #12]
 8004b9c:	e011      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3304      	adds	r3, #4
 8004bac:	2101      	movs	r1, #1
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f8a4 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
 8004bc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d028      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bce:	4b23      	ldr	r3, [pc, #140]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bdc:	491f      	ldr	r1, [pc, #124]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bec:	d106      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bee:	4b1b      	ldr	r3, [pc, #108]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bf8:	60d3      	str	r3, [r2, #12]
 8004bfa:	e011      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 f875 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c16:	7cfb      	ldrb	r3, [r7, #19]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02b      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3a:	4908      	ldr	r1, [pc, #32]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c4a:	d109      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4c:	4b03      	ldr	r3, [pc, #12]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a02      	ldr	r2, [pc, #8]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c56:	60d3      	str	r3, [r2, #12]
 8004c58:	e014      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 f843 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c7a:	7cfb      	ldrb	r3, [r7, #19]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01c      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c90:	4b19      	ldr	r3, [pc, #100]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9e:	4916      	ldr	r1, [pc, #88]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004caa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cae:	d10c      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	2102      	movs	r1, #2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f820 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd6:	4b08      	ldr	r3, [pc, #32]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cdc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce4:	4904      	ldr	r1, [pc, #16]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000

08004cfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d0a:	4b74      	ldr	r3, [pc, #464]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d018      	beq.n	8004d48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d16:	4b71      	ldr	r3, [pc, #452]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d10d      	bne.n	8004d42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
       ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d2e:	4b6b      	ldr	r3, [pc, #428]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d047      	beq.n	8004dd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
 8004d46:	e044      	b.n	8004dd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d018      	beq.n	8004d82 <RCCEx_PLLSAI1_Config+0x86>
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d825      	bhi.n	8004da0 <RCCEx_PLLSAI1_Config+0xa4>
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d002      	beq.n	8004d5e <RCCEx_PLLSAI1_Config+0x62>
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d009      	beq.n	8004d70 <RCCEx_PLLSAI1_Config+0x74>
 8004d5c:	e020      	b.n	8004da0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11d      	bne.n	8004da6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6e:	e01a      	b.n	8004da6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d70:	4b5a      	ldr	r3, [pc, #360]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d116      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d80:	e013      	b.n	8004daa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d82:	4b56      	ldr	r3, [pc, #344]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10f      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d8e:	4b53      	ldr	r3, [pc, #332]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d9e:	e006      	b.n	8004dae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e004      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dae:	bf00      	nop
    }

    if(status == HAL_OK)
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004db6:	4b49      	ldr	r3, [pc, #292]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	4943      	ldr	r1, [pc, #268]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d17c      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004dd8:	4b40      	ldr	r3, [pc, #256]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de4:	f7fe f94e 	bl	8003084 <HAL_GetTick>
 8004de8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dea:	e009      	b.n	8004e00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dec:	f7fe f94a 	bl	8003084 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d902      	bls.n	8004e00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dfe:	e005      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e00:	4b36      	ldr	r3, [pc, #216]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1ef      	bne.n	8004dec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d15f      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d110      	bne.n	8004e3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e18:	4b30      	ldr	r3, [pc, #192]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004e20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6892      	ldr	r2, [r2, #8]
 8004e28:	0211      	lsls	r1, r2, #8
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68d2      	ldr	r2, [r2, #12]
 8004e2e:	06d2      	lsls	r2, r2, #27
 8004e30:	430a      	orrs	r2, r1
 8004e32:	492a      	ldr	r1, [pc, #168]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	610b      	str	r3, [r1, #16]
 8004e38:	e027      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d112      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e40:	4b26      	ldr	r3, [pc, #152]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6892      	ldr	r2, [r2, #8]
 8004e50:	0211      	lsls	r1, r2, #8
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6912      	ldr	r2, [r2, #16]
 8004e56:	0852      	lsrs	r2, r2, #1
 8004e58:	3a01      	subs	r2, #1
 8004e5a:	0552      	lsls	r2, r2, #21
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	491f      	ldr	r1, [pc, #124]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	610b      	str	r3, [r1, #16]
 8004e64:	e011      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e66:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6892      	ldr	r2, [r2, #8]
 8004e76:	0211      	lsls	r1, r2, #8
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6952      	ldr	r2, [r2, #20]
 8004e7c:	0852      	lsrs	r2, r2, #1
 8004e7e:	3a01      	subs	r2, #1
 8004e80:	0652      	lsls	r2, r2, #25
 8004e82:	430a      	orrs	r2, r1
 8004e84:	4915      	ldr	r1, [pc, #84]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e8a:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e96:	f7fe f8f5 	bl	8003084 <HAL_GetTick>
 8004e9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e9c:	e009      	b.n	8004eb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e9e:	f7fe f8f1 	bl	8003084 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d902      	bls.n	8004eb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	73fb      	strb	r3, [r7, #15]
          break;
 8004eb0:	e005      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0ef      	beq.n	8004e9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	4903      	ldr	r1, [pc, #12]	@ (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000

08004ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e095      	b.n	800501e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d108      	bne.n	8004f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f02:	d009      	beq.n	8004f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]
 8004f0a:	e005      	b.n	8004f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc fe96 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f58:	d902      	bls.n	8004f60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e002      	b.n	8004f66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f6e:	d007      	beq.n	8004f80 <HAL_SPI_Init+0xa0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	ea42 0103 	orr.w	r1, r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f003 0204 	and.w	r2, r3, #4
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ffc:	ea42 0103 	orr.w	r1, r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b08a      	sub	sp, #40	@ 0x28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005034:	2301      	movs	r3, #1
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005038:	f7fe f824 	bl	8003084 <HAL_GetTick>
 800503c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005044:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800504c:	887b      	ldrh	r3, [r7, #2]
 800504e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005050:	887b      	ldrh	r3, [r7, #2]
 8005052:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005054:	7ffb      	ldrb	r3, [r7, #31]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d00c      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x4e>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005060:	d106      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x4a>
 800506a:	7ffb      	ldrb	r3, [r7, #31]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d001      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
 8005072:	e1f3      	b.n	800545c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x60>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x60>
 8005080:	887b      	ldrh	r3, [r7, #2]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e1e8      	b.n	800545c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x72>
 8005094:	2302      	movs	r3, #2
 8005096:	e1e1      	b.n	800545c <HAL_SPI_TransmitReceive+0x436>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d003      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2205      	movs	r2, #5
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	887a      	ldrh	r2, [r7, #2]
 80050da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	887a      	ldrh	r2, [r7, #2]
 80050e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050f6:	d802      	bhi.n	80050fe <HAL_SPI_TransmitReceive+0xd8>
 80050f8:	8abb      	ldrh	r3, [r7, #20]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d908      	bls.n	8005110 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	e007      	b.n	8005120 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800511e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b40      	cmp	r3, #64	@ 0x40
 800512c:	d007      	beq.n	800513e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005146:	f240 8083 	bls.w	8005250 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x132>
 8005152:	8afb      	ldrh	r3, [r7, #22]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d16f      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	881a      	ldrh	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	1c9a      	adds	r2, r3, #2
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517c:	e05c      	b.n	8005238 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d11b      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x19e>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x19e>
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	2b01      	cmp	r3, #1
 800519a:	d113      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	881a      	ldrh	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ac:	1c9a      	adds	r2, r3, #2
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d11c      	bne.n	800520c <HAL_SPI_TransmitReceive+0x1e6>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d016      	beq.n	800520c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	b292      	uxth	r2, r2
 80051ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	1c9a      	adds	r2, r3, #2
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005208:	2301      	movs	r3, #1
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800520c:	f7fd ff3a 	bl	8003084 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005218:	429a      	cmp	r2, r3
 800521a:	d80d      	bhi.n	8005238 <HAL_SPI_TransmitReceive+0x212>
 800521c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d009      	beq.n	8005238 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e111      	b.n	800545c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d19d      	bne.n	800517e <HAL_SPI_TransmitReceive+0x158>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d197      	bne.n	800517e <HAL_SPI_TransmitReceive+0x158>
 800524e:	e0e5      	b.n	800541c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x23a>
 8005258:	8afb      	ldrh	r3, [r7, #22]
 800525a:	2b01      	cmp	r3, #1
 800525c:	f040 80d1 	bne.w	8005402 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d912      	bls.n	8005290 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526e:	881a      	ldrh	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527a:	1c9a      	adds	r2, r3, #2
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b02      	subs	r3, #2
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800528e:	e0b8      	b.n	8005402 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b6:	e0a4      	b.n	8005402 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d134      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x30a>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02f      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x30a>
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d12c      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d912      	bls.n	8005306 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	881a      	ldrh	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b02      	subs	r3, #2
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005304:	e012      	b.n	800532c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d148      	bne.n	80053d0 <HAL_SPI_TransmitReceive+0x3aa>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d042      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	d923      	bls.n	800539e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005360:	b292      	uxth	r2, r2
 8005362:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	1c9a      	adds	r2, r3, #2
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b02      	subs	r3, #2
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d81f      	bhi.n	80053cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	e016      	b.n	80053cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f103 020c 	add.w	r2, r3, #12
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	7812      	ldrb	r2, [r2, #0]
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053cc:	2301      	movs	r3, #1
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053d0:	f7fd fe58 	bl	8003084 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053dc:	429a      	cmp	r2, r3
 80053de:	d803      	bhi.n	80053e8 <HAL_SPI_TransmitReceive+0x3c2>
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d102      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x3c8>
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e02c      	b.n	800545c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	f47f af55 	bne.w	80052b8 <HAL_SPI_TransmitReceive+0x292>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	f47f af4e 	bne.w	80052b8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fa5d 	bl	80058e0 <SPI_EndRxTxTransaction>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e00e      	b.n	800545c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800545a:	2300      	movs	r3, #0
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3728      	adds	r7, #40	@ 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	099b      	lsrs	r3, r3, #6
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
    return;
 80054a6:	e0d7      	b.n	8005658 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_SPI_IRQHandler+0x66>
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	09db      	lsrs	r3, r3, #7
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
    return;
 80054c8:	e0c6      	b.n	8005658 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10c      	bne.n	80054f0 <HAL_SPI_IRQHandler+0x8c>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	099b      	lsrs	r3, r3, #6
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	0a1b      	lsrs	r3, r3, #8
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80b4 	beq.w	8005658 <HAL_SPI_IRQHandler+0x1f4>
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80ad 	beq.w	8005658 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	099b      	lsrs	r3, r3, #6
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d023      	beq.n	8005552 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b03      	cmp	r3, #3
 8005514:	d011      	beq.n	800553a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551a:	f043 0204 	orr.w	r2, r3, #4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	e00b      	b.n	8005552 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	693b      	ldr	r3, [r7, #16]
        return;
 8005550:	e082      	b.n	8005658 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d014      	beq.n	8005588 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005562:	f043 0201 	orr.w	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00c      	beq.n	80055ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005598:	f043 0208 	orr.w	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055a0:	2300      	movs	r3, #0
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04f      	beq.n	8005656 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <HAL_SPI_IRQHandler+0x17e>
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d034      	beq.n	800564c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0203 	bic.w	r2, r2, #3
 80055f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d011      	beq.n	800561e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fe:	4a18      	ldr	r2, [pc, #96]	@ (8005660 <HAL_SPI_IRQHandler+0x1fc>)
 8005600:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005606:	4618      	mov	r0, r3
 8005608:	f7fd ffd4 	bl	80035b4 <HAL_DMA_Abort_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005616:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005622:	2b00      	cmp	r3, #0
 8005624:	d016      	beq.n	8005654 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562a:	4a0d      	ldr	r2, [pc, #52]	@ (8005660 <HAL_SPI_IRQHandler+0x1fc>)
 800562c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	4618      	mov	r0, r3
 8005634:	f7fd ffbe 	bl	80035b4 <HAL_DMA_Abort_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005642:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800564a:	e003      	b.n	8005654 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f809 	bl	8005664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005652:	e000      	b.n	8005656 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005654:	bf00      	nop
    return;
 8005656:	bf00      	nop
  }
}
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	08005679 	.word	0x08005679

08005664 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff ffe5 	bl	8005664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056b4:	f7fd fce6 	bl	8003084 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	4413      	add	r3, r2
 80056c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056c4:	f7fd fcde 	bl	8003084 <HAL_GetTick>
 80056c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ca:	4b39      	ldr	r3, [pc, #228]	@ (80057b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	015b      	lsls	r3, r3, #5
 80056d0:	0d1b      	lsrs	r3, r3, #20
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056da:	e054      	b.n	8005786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d050      	beq.n	8005786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056e4:	f7fd fcce 	bl	8003084 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d902      	bls.n	80056fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d13d      	bne.n	8005776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005712:	d111      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571c:	d004      	beq.n	8005728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005726:	d107      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005740:	d10f      	bne.n	8005762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e017      	b.n	80057a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	3b01      	subs	r3, #1
 8005784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	429a      	cmp	r2, r3
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d19b      	bne.n	80056dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000000 	.word	0x20000000

080057b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	@ 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057c6:	f7fd fc5d 	bl	8003084 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	4413      	add	r3, r2
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80057d6:	f7fd fc55 	bl	8003084 <HAL_GetTick>
 80057da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057e4:	4b3d      	ldr	r3, [pc, #244]	@ (80058dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	00da      	lsls	r2, r3, #3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	0d1b      	lsrs	r3, r3, #20
 80057f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057fc:	e060      	b.n	80058c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005804:	d107      	bne.n	8005816 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	b2db      	uxtb	r3, r3
 8005812:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005814:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581c:	d050      	beq.n	80058c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800581e:	f7fd fc31 	bl	8003084 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582a:	429a      	cmp	r2, r3
 800582c:	d902      	bls.n	8005834 <SPI_WaitFifoStateUntilTimeout+0x80>
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	d13d      	bne.n	80058b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005842:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800584c:	d111      	bne.n	8005872 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005856:	d004      	beq.n	8005862 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005860:	d107      	bne.n	8005872 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005870:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800587a:	d10f      	bne.n	800589c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800589a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e010      	b.n	80058d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	3b01      	subs	r3, #1
 80058be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4013      	ands	r3, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d196      	bne.n	80057fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3728      	adds	r7, #40	@ 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000000 	.word	0x20000000

080058e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff ff5b 	bl	80057b4 <SPI_WaitFifoStateUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005908:	f043 0220 	orr.w	r2, r3, #32
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e027      	b.n	8005964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2200      	movs	r2, #0
 800591c:	2180      	movs	r1, #128	@ 0x80
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7ff fec0 	bl	80056a4 <SPI_WaitFlagStateUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e014      	b.n	8005964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2200      	movs	r2, #0
 8005942:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff ff34 	bl	80057b4 <SPI_WaitFifoStateUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005956:	f043 0220 	orr.w	r2, r3, #32
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e000      	b.n	8005964 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e040      	b.n	8005a00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc fc86 	bl	80022a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	@ 0x24
 8005998:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 ffaa 	bl	800690c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fd4d 	bl	8006458 <UART_SetConfig>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e01b      	b.n	8005a00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 f829 	bl	8006a50 <UART_CheckIdleState>
 80059fe:	4603      	mov	r3, r0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	@ 0x28
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d177      	bne.n	8005b10 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_UART_Transmit+0x24>
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e070      	b.n	8005b12 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2221      	movs	r2, #33	@ 0x21
 8005a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a3e:	f7fd fb21 	bl	8003084 <HAL_GetTick>
 8005a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a5c:	d108      	bne.n	8005a70 <HAL_UART_Transmit+0x68>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e003      	b.n	8005a78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a78:	e02f      	b.n	8005ada <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f001 f88b 	bl	8006ba0 <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e03b      	b.n	8005b12 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	881a      	ldrh	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aac:	b292      	uxth	r2, r2
 8005aae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e007      	b.n	8005ac8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1c9      	bne.n	8005a7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2200      	movs	r2, #0
 8005aee:	2140      	movs	r1, #64	@ 0x40
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f001 f855 	bl	8006ba0 <UART_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e005      	b.n	8005b12 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	@ 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d165      	bne.n	8005bfe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_UART_Transmit_DMA+0x22>
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e05e      	b.n	8005c00 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	88fa      	ldrh	r2, [r7, #6]
 8005b54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2221      	movs	r2, #33	@ 0x21
 8005b64:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d027      	beq.n	8005bbe <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b72:	4a25      	ldr	r2, [pc, #148]	@ (8005c08 <HAL_UART_Transmit_DMA+0xec>)
 8005b74:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7a:	4a24      	ldr	r2, [pc, #144]	@ (8005c0c <HAL_UART_Transmit_DMA+0xf0>)
 8005b7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b82:	4a23      	ldr	r2, [pc, #140]	@ (8005c10 <HAL_UART_Transmit_DMA+0xf4>)
 8005b84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b96:	4619      	mov	r1, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3328      	adds	r3, #40	@ 0x28
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	88fb      	ldrh	r3, [r7, #6]
 8005ba2:	f7fd fc69 	bl	8003478 <HAL_DMA_Start_IT>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e020      	b.n	8005c00 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2240      	movs	r2, #64	@ 0x40
 8005bc4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3308      	adds	r3, #8
 8005bcc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be6:	623a      	str	r2, [r7, #32]
 8005be8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	69f9      	ldr	r1, [r7, #28]
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e5      	bne.n	8005bc6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e000      	b.n	8005c00 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005bfe:	2302      	movs	r3, #2
  }
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3728      	adds	r7, #40	@ 0x28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	08006ed1 	.word	0x08006ed1
 8005c0c:	08006f6b 	.word	0x08006f6b
 8005c10:	080070f1 	.word	0x080070f1

08005c14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	@ 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d137      	bne.n	8005c9c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_UART_Receive_DMA+0x24>
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e030      	b.n	8005c9e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a18      	ldr	r2, [pc, #96]	@ (8005ca8 <HAL_UART_Receive_DMA+0x94>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01f      	beq.n	8005c8c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	613b      	str	r3, [r7, #16]
   return(result);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	69f9      	ldr	r1, [r7, #28]
 8005c7e:	6a3a      	ldr	r2, [r7, #32]
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fff2 	bl	8006c7c <UART_Start_Receive_DMA>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	@ 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40008000 	.word	0x40008000

08005cac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b090      	sub	sp, #64	@ 0x40
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cc0:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ccc:	2b80      	cmp	r3, #128	@ 0x80
 8005cce:	d139      	bne.n	8005d44 <HAL_UART_DMAStop+0x98>
 8005cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd2:	2b21      	cmp	r3, #33	@ 0x21
 8005cd4:	d136      	bne.n	8005d44 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3308      	adds	r3, #8
 8005cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e5      	bne.n	8005cd6 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d015      	beq.n	8005d3e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fd fc0e 	bl	8003538 <HAL_DMA_Abort>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fd fd34 	bl	8003794 <HAL_DMA_GetError>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d105      	bne.n	8005d3e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2210      	movs	r2, #16
 8005d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e044      	b.n	8005dc8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 f83c 	bl	8006dbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d139      	bne.n	8005dc6 <HAL_UART_DMAStop+0x11a>
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	2b22      	cmp	r3, #34	@ 0x22
 8005d56:	d136      	bne.n	8005dc6 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d78:	61ba      	str	r2, [r7, #24]
 8005d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	613b      	str	r3, [r7, #16]
   return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e5      	bne.n	8005d58 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d015      	beq.n	8005dc0 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fd fbcd 	bl	8003538 <HAL_DMA_Abort>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00d      	beq.n	8005dc0 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fd fcf3 	bl	8003794 <HAL_DMA_GetError>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d105      	bne.n	8005dc0 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2210      	movs	r2, #16
 8005db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e003      	b.n	8005dc8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 f821 	bl	8006e08 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3740      	adds	r7, #64	@ 0x40
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b0ba      	sub	sp, #232	@ 0xe8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005df6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005dfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005dfe:	4013      	ands	r3, r2
 8005e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d115      	bne.n	8005e38 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00f      	beq.n	8005e38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 82ca 	beq.w	80063c2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
      }
      return;
 8005e36:	e2c4      	b.n	80063c2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8117 	beq.w	8006070 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e52:	4b85      	ldr	r3, [pc, #532]	@ (8006068 <HAL_UART_IRQHandler+0x298>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 810a 	beq.w	8006070 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d011      	beq.n	8005e8c <HAL_UART_IRQHandler+0xbc>
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00b      	beq.n	8005e8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_UART_IRQHandler+0xec>
 8005e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb2:	f043 0204 	orr.w	r2, r3, #4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d011      	beq.n	8005eec <HAL_UART_IRQHandler+0x11c>
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d017      	beq.n	8005f28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2208      	movs	r2, #8
 8005f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1e:	f043 0208 	orr.w	r2, r3, #8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d012      	beq.n	8005f5a <HAL_UART_IRQHandler+0x18a>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00c      	beq.n	8005f5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f50:	f043 0220 	orr.w	r2, r3, #32
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8230 	beq.w	80063c6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00d      	beq.n	8005f8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b40      	cmp	r3, #64	@ 0x40
 8005fa4:	d005      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005faa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d04f      	beq.n	8006052 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 ff28 	bl	8006e08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b40      	cmp	r3, #64	@ 0x40
 8005fc4:	d141      	bne.n	800604a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3308      	adds	r3, #8
 8005fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800600a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1d9      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006016:	2b00      	cmp	r3, #0
 8006018:	d013      	beq.n	8006042 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800601e:	4a13      	ldr	r2, [pc, #76]	@ (800606c <HAL_UART_IRQHandler+0x29c>)
 8006020:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006026:	4618      	mov	r0, r3
 8006028:	f7fd fac4 	bl	80035b4 <HAL_DMA_Abort_IT>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d017      	beq.n	8006062 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800603c:	4610      	mov	r0, r2
 800603e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e00f      	b.n	8006062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f9f2 	bl	800642c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	e00b      	b.n	8006062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f9ee 	bl	800642c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	e007      	b.n	8006062 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f9ea 	bl	800642c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006060:	e1b1      	b.n	80063c6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006062:	bf00      	nop
    return;
 8006064:	e1af      	b.n	80063c6 <HAL_UART_IRQHandler+0x5f6>
 8006066:	bf00      	nop
 8006068:	04000120 	.word	0x04000120
 800606c:	0800716f 	.word	0x0800716f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006074:	2b01      	cmp	r3, #1
 8006076:	f040 816a 	bne.w	800634e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8163 	beq.w	800634e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 815c 	beq.w	800634e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2210      	movs	r2, #16
 800609c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a8:	2b40      	cmp	r3, #64	@ 0x40
 80060aa:	f040 80d4 	bne.w	8006256 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 80ad 	beq.w	800621e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060ce:	429a      	cmp	r2, r3
 80060d0:	f080 80a5 	bcs.w	800621e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 8086 	bne.w	80061fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800610c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800611a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800611e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006126:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1da      	bne.n	80060f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3308      	adds	r3, #8
 8006140:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800614a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800615e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006162:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006166:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e1      	bne.n	800613a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800618c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3308      	adds	r3, #8
 8006196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800619a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800619c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e3      	bne.n	8006176 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061cc:	f023 0310 	bic.w	r3, r3, #16
 80061d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e4      	bne.n	80061bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fd f99e 	bl	8003538 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800620e:	b29b      	uxth	r3, r3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f912 	bl	8006440 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800621c:	e0d5      	b.n	80063ca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006224:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006228:	429a      	cmp	r2, r3
 800622a:	f040 80ce 	bne.w	80063ca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b20      	cmp	r3, #32
 800623c:	f040 80c5 	bne.w	80063ca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f8f6 	bl	8006440 <HAL_UARTEx_RxEventCallback>
      return;
 8006254:	e0b9      	b.n	80063ca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006262:	b29b      	uxth	r3, r3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80ab 	beq.w	80063ce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80a6 	beq.w	80063ce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006292:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006296:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e4      	bne.n	8006282 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3308      	adds	r3, #8
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	623b      	str	r3, [r7, #32]
   return(result);
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3308      	adds	r3, #8
 80062d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80062de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e3      	bne.n	80062b8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	60fb      	str	r3, [r7, #12]
   return(result);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 0310 	bic.w	r3, r3, #16
 8006318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	69b9      	ldr	r1, [r7, #24]
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	617b      	str	r3, [r7, #20]
   return(result);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e4      	bne.n	8006304 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2202      	movs	r2, #2
 800633e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f87a 	bl	8006440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800634c:	e03f      	b.n	80063ce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00e      	beq.n	8006378 <HAL_UART_IRQHandler+0x5a8>
 800635a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800635e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d008      	beq.n	8006378 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800636e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 ff3c 	bl	80071ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006376:	e02d      	b.n	80063d4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01c      	beq.n	80063d2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
    }
    return;
 80063a0:	e017      	b.n	80063d2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d012      	beq.n	80063d4 <HAL_UART_IRQHandler+0x604>
 80063ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00c      	beq.n	80063d4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 feed 	bl	800719a <UART_EndTransmit_IT>
    return;
 80063c0:	e008      	b.n	80063d4 <HAL_UART_IRQHandler+0x604>
      return;
 80063c2:	bf00      	nop
 80063c4:	e006      	b.n	80063d4 <HAL_UART_IRQHandler+0x604>
    return;
 80063c6:	bf00      	nop
 80063c8:	e004      	b.n	80063d4 <HAL_UART_IRQHandler+0x604>
      return;
 80063ca:	bf00      	nop
 80063cc:	e002      	b.n	80063d4 <HAL_UART_IRQHandler+0x604>
      return;
 80063ce:	bf00      	nop
 80063d0:	e000      	b.n	80063d4 <HAL_UART_IRQHandler+0x604>
    return;
 80063d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80063d4:	37e8      	adds	r7, #232	@ 0xe8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop

080063dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800645c:	b08a      	sub	sp, #40	@ 0x28
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	431a      	orrs	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	4313      	orrs	r3, r2
 800647e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b9e      	ldr	r3, [pc, #632]	@ (8006700 <UART_SetConfig+0x2a8>)
 8006488:	4013      	ands	r3, r2
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006490:	430b      	orrs	r3, r1
 8006492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a93      	ldr	r2, [pc, #588]	@ (8006704 <UART_SetConfig+0x2ac>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d004      	beq.n	80064c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c0:	4313      	orrs	r3, r2
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a8a      	ldr	r2, [pc, #552]	@ (8006708 <UART_SetConfig+0x2b0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d126      	bne.n	8006530 <UART_SetConfig+0xd8>
 80064e2:	4b8a      	ldr	r3, [pc, #552]	@ (800670c <UART_SetConfig+0x2b4>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d81b      	bhi.n	8006528 <UART_SetConfig+0xd0>
 80064f0:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <UART_SetConfig+0xa0>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006509 	.word	0x08006509
 80064fc:	08006519 	.word	0x08006519
 8006500:	08006511 	.word	0x08006511
 8006504:	08006521 	.word	0x08006521
 8006508:	2301      	movs	r3, #1
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e0ab      	b.n	8006668 <UART_SetConfig+0x210>
 8006510:	2302      	movs	r3, #2
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e0a7      	b.n	8006668 <UART_SetConfig+0x210>
 8006518:	2304      	movs	r3, #4
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e0a3      	b.n	8006668 <UART_SetConfig+0x210>
 8006520:	2308      	movs	r3, #8
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006526:	e09f      	b.n	8006668 <UART_SetConfig+0x210>
 8006528:	2310      	movs	r3, #16
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652e:	e09b      	b.n	8006668 <UART_SetConfig+0x210>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a76      	ldr	r2, [pc, #472]	@ (8006710 <UART_SetConfig+0x2b8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d138      	bne.n	80065ac <UART_SetConfig+0x154>
 800653a:	4b74      	ldr	r3, [pc, #464]	@ (800670c <UART_SetConfig+0x2b4>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006540:	f003 030c 	and.w	r3, r3, #12
 8006544:	2b0c      	cmp	r3, #12
 8006546:	d82d      	bhi.n	80065a4 <UART_SetConfig+0x14c>
 8006548:	a201      	add	r2, pc, #4	@ (adr r2, 8006550 <UART_SetConfig+0xf8>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006585 	.word	0x08006585
 8006554:	080065a5 	.word	0x080065a5
 8006558:	080065a5 	.word	0x080065a5
 800655c:	080065a5 	.word	0x080065a5
 8006560:	08006595 	.word	0x08006595
 8006564:	080065a5 	.word	0x080065a5
 8006568:	080065a5 	.word	0x080065a5
 800656c:	080065a5 	.word	0x080065a5
 8006570:	0800658d 	.word	0x0800658d
 8006574:	080065a5 	.word	0x080065a5
 8006578:	080065a5 	.word	0x080065a5
 800657c:	080065a5 	.word	0x080065a5
 8006580:	0800659d 	.word	0x0800659d
 8006584:	2300      	movs	r3, #0
 8006586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658a:	e06d      	b.n	8006668 <UART_SetConfig+0x210>
 800658c:	2302      	movs	r3, #2
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006592:	e069      	b.n	8006668 <UART_SetConfig+0x210>
 8006594:	2304      	movs	r3, #4
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659a:	e065      	b.n	8006668 <UART_SetConfig+0x210>
 800659c:	2308      	movs	r3, #8
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a2:	e061      	b.n	8006668 <UART_SetConfig+0x210>
 80065a4:	2310      	movs	r3, #16
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065aa:	e05d      	b.n	8006668 <UART_SetConfig+0x210>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a58      	ldr	r2, [pc, #352]	@ (8006714 <UART_SetConfig+0x2bc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d125      	bne.n	8006602 <UART_SetConfig+0x1aa>
 80065b6:	4b55      	ldr	r3, [pc, #340]	@ (800670c <UART_SetConfig+0x2b4>)
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065c0:	2b30      	cmp	r3, #48	@ 0x30
 80065c2:	d016      	beq.n	80065f2 <UART_SetConfig+0x19a>
 80065c4:	2b30      	cmp	r3, #48	@ 0x30
 80065c6:	d818      	bhi.n	80065fa <UART_SetConfig+0x1a2>
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d00a      	beq.n	80065e2 <UART_SetConfig+0x18a>
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d814      	bhi.n	80065fa <UART_SetConfig+0x1a2>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <UART_SetConfig+0x182>
 80065d4:	2b10      	cmp	r3, #16
 80065d6:	d008      	beq.n	80065ea <UART_SetConfig+0x192>
 80065d8:	e00f      	b.n	80065fa <UART_SetConfig+0x1a2>
 80065da:	2300      	movs	r3, #0
 80065dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e0:	e042      	b.n	8006668 <UART_SetConfig+0x210>
 80065e2:	2302      	movs	r3, #2
 80065e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e8:	e03e      	b.n	8006668 <UART_SetConfig+0x210>
 80065ea:	2304      	movs	r3, #4
 80065ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f0:	e03a      	b.n	8006668 <UART_SetConfig+0x210>
 80065f2:	2308      	movs	r3, #8
 80065f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f8:	e036      	b.n	8006668 <UART_SetConfig+0x210>
 80065fa:	2310      	movs	r3, #16
 80065fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006600:	e032      	b.n	8006668 <UART_SetConfig+0x210>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a3f      	ldr	r2, [pc, #252]	@ (8006704 <UART_SetConfig+0x2ac>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d12a      	bne.n	8006662 <UART_SetConfig+0x20a>
 800660c:	4b3f      	ldr	r3, [pc, #252]	@ (800670c <UART_SetConfig+0x2b4>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006612:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006616:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800661a:	d01a      	beq.n	8006652 <UART_SetConfig+0x1fa>
 800661c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006620:	d81b      	bhi.n	800665a <UART_SetConfig+0x202>
 8006622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006626:	d00c      	beq.n	8006642 <UART_SetConfig+0x1ea>
 8006628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800662c:	d815      	bhi.n	800665a <UART_SetConfig+0x202>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <UART_SetConfig+0x1e2>
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006636:	d008      	beq.n	800664a <UART_SetConfig+0x1f2>
 8006638:	e00f      	b.n	800665a <UART_SetConfig+0x202>
 800663a:	2300      	movs	r3, #0
 800663c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006640:	e012      	b.n	8006668 <UART_SetConfig+0x210>
 8006642:	2302      	movs	r3, #2
 8006644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006648:	e00e      	b.n	8006668 <UART_SetConfig+0x210>
 800664a:	2304      	movs	r3, #4
 800664c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006650:	e00a      	b.n	8006668 <UART_SetConfig+0x210>
 8006652:	2308      	movs	r3, #8
 8006654:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006658:	e006      	b.n	8006668 <UART_SetConfig+0x210>
 800665a:	2310      	movs	r3, #16
 800665c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006660:	e002      	b.n	8006668 <UART_SetConfig+0x210>
 8006662:	2310      	movs	r3, #16
 8006664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a25      	ldr	r2, [pc, #148]	@ (8006704 <UART_SetConfig+0x2ac>)
 800666e:	4293      	cmp	r3, r2
 8006670:	f040 808a 	bne.w	8006788 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006674:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006678:	2b08      	cmp	r3, #8
 800667a:	d824      	bhi.n	80066c6 <UART_SetConfig+0x26e>
 800667c:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <UART_SetConfig+0x22c>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066c7 	.word	0x080066c7
 800668c:	080066b1 	.word	0x080066b1
 8006690:	080066c7 	.word	0x080066c7
 8006694:	080066b7 	.word	0x080066b7
 8006698:	080066c7 	.word	0x080066c7
 800669c:	080066c7 	.word	0x080066c7
 80066a0:	080066c7 	.word	0x080066c7
 80066a4:	080066bf 	.word	0x080066bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a8:	f7fe f852 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80066ac:	61f8      	str	r0, [r7, #28]
        break;
 80066ae:	e010      	b.n	80066d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b0:	4b19      	ldr	r3, [pc, #100]	@ (8006718 <UART_SetConfig+0x2c0>)
 80066b2:	61fb      	str	r3, [r7, #28]
        break;
 80066b4:	e00d      	b.n	80066d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b6:	f7fd ffb3 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80066ba:	61f8      	str	r0, [r7, #28]
        break;
 80066bc:	e009      	b.n	80066d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c2:	61fb      	str	r3, [r7, #28]
        break;
 80066c4:	e005      	b.n	80066d2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8109 	beq.w	80068ec <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	4413      	add	r3, r2
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d305      	bcc.n	80066f6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d912      	bls.n	800671c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066fc:	e0f6      	b.n	80068ec <UART_SetConfig+0x494>
 80066fe:	bf00      	nop
 8006700:	efff69f3 	.word	0xefff69f3
 8006704:	40008000 	.word	0x40008000
 8006708:	40013800 	.word	0x40013800
 800670c:	40021000 	.word	0x40021000
 8006710:	40004400 	.word	0x40004400
 8006714:	40004800 	.word	0x40004800
 8006718:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2200      	movs	r2, #0
 8006720:	461c      	mov	r4, r3
 8006722:	4615      	mov	r5, r2
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	022b      	lsls	r3, r5, #8
 800672e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006732:	0222      	lsls	r2, r4, #8
 8006734:	68f9      	ldr	r1, [r7, #12]
 8006736:	6849      	ldr	r1, [r1, #4]
 8006738:	0849      	lsrs	r1, r1, #1
 800673a:	2000      	movs	r0, #0
 800673c:	4688      	mov	r8, r1
 800673e:	4681      	mov	r9, r0
 8006740:	eb12 0a08 	adds.w	sl, r2, r8
 8006744:	eb43 0b09 	adc.w	fp, r3, r9
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006756:	4650      	mov	r0, sl
 8006758:	4659      	mov	r1, fp
 800675a:	f7fa fba3 	bl	8000ea4 <__aeabi_uldivmod>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4613      	mov	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800676c:	d308      	bcc.n	8006780 <UART_SetConfig+0x328>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006774:	d204      	bcs.n	8006780 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	60da      	str	r2, [r3, #12]
 800677e:	e0b5      	b.n	80068ec <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006786:	e0b1      	b.n	80068ec <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006790:	d15d      	bne.n	800684e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006792:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006796:	2b08      	cmp	r3, #8
 8006798:	d827      	bhi.n	80067ea <UART_SetConfig+0x392>
 800679a:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <UART_SetConfig+0x348>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	080067eb 	.word	0x080067eb
 80067b0:	080067db 	.word	0x080067db
 80067b4:	080067eb 	.word	0x080067eb
 80067b8:	080067eb 	.word	0x080067eb
 80067bc:	080067eb 	.word	0x080067eb
 80067c0:	080067e3 	.word	0x080067e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fd ffc4 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80067c8:	61f8      	str	r0, [r7, #28]
        break;
 80067ca:	e014      	b.n	80067f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fd ffd6 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 80067d0:	61f8      	str	r0, [r7, #28]
        break;
 80067d2:	e010      	b.n	80067f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d4:	4b4c      	ldr	r3, [pc, #304]	@ (8006908 <UART_SetConfig+0x4b0>)
 80067d6:	61fb      	str	r3, [r7, #28]
        break;
 80067d8:	e00d      	b.n	80067f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067da:	f7fd ff21 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80067de:	61f8      	str	r0, [r7, #28]
        break;
 80067e0:	e009      	b.n	80067f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e6:	61fb      	str	r3, [r7, #28]
        break;
 80067e8:	e005      	b.n	80067f6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d077      	beq.n	80068ec <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	005a      	lsls	r2, r3, #1
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	441a      	add	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b0f      	cmp	r3, #15
 8006816:	d916      	bls.n	8006846 <UART_SetConfig+0x3ee>
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800681e:	d212      	bcs.n	8006846 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f023 030f 	bic.w	r3, r3, #15
 8006828:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	b29b      	uxth	r3, r3
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	b29a      	uxth	r2, r3
 8006836:	8afb      	ldrh	r3, [r7, #22]
 8006838:	4313      	orrs	r3, r2
 800683a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	8afa      	ldrh	r2, [r7, #22]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e052      	b.n	80068ec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800684c:	e04e      	b.n	80068ec <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800684e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006852:	2b08      	cmp	r3, #8
 8006854:	d827      	bhi.n	80068a6 <UART_SetConfig+0x44e>
 8006856:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <UART_SetConfig+0x404>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006881 	.word	0x08006881
 8006860:	08006889 	.word	0x08006889
 8006864:	08006891 	.word	0x08006891
 8006868:	080068a7 	.word	0x080068a7
 800686c:	08006897 	.word	0x08006897
 8006870:	080068a7 	.word	0x080068a7
 8006874:	080068a7 	.word	0x080068a7
 8006878:	080068a7 	.word	0x080068a7
 800687c:	0800689f 	.word	0x0800689f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006880:	f7fd ff66 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8006884:	61f8      	str	r0, [r7, #28]
        break;
 8006886:	e014      	b.n	80068b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006888:	f7fd ff78 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 800688c:	61f8      	str	r0, [r7, #28]
        break;
 800688e:	e010      	b.n	80068b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006890:	4b1d      	ldr	r3, [pc, #116]	@ (8006908 <UART_SetConfig+0x4b0>)
 8006892:	61fb      	str	r3, [r7, #28]
        break;
 8006894:	e00d      	b.n	80068b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006896:	f7fd fec3 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 800689a:	61f8      	str	r0, [r7, #28]
        break;
 800689c:	e009      	b.n	80068b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068a2:	61fb      	str	r3, [r7, #28]
        break;
 80068a4:	e005      	b.n	80068b2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068b0:	bf00      	nop
    }

    if (pclk != 0U)
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d019      	beq.n	80068ec <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	085a      	lsrs	r2, r3, #1
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	441a      	add	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	2b0f      	cmp	r3, #15
 80068d0:	d909      	bls.n	80068e6 <UART_SetConfig+0x48e>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d8:	d205      	bcs.n	80068e6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60da      	str	r2, [r3, #12]
 80068e4:	e002      	b.n	80068ec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3728      	adds	r7, #40	@ 0x28
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006906:	bf00      	nop
 8006908:	00f42400 	.word	0x00f42400

0800690c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01a      	beq.n	8006a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a0a:	d10a      	bne.n	8006a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
  }
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b098      	sub	sp, #96	@ 0x60
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a60:	f7fc fb10 	bl	8003084 <HAL_GetTick>
 8006a64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d12e      	bne.n	8006ad2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f88c 	bl	8006ba0 <UART_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d021      	beq.n	8006ad2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e062      	b.n	8006b98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d149      	bne.n	8006b74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f856 	bl	8006ba0 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d03c      	beq.n	8006b74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	623b      	str	r3, [r7, #32]
   return(result);
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b4c:	61fa      	str	r2, [r7, #28]
 8006b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	69b9      	ldr	r1, [r7, #24]
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	617b      	str	r3, [r7, #20]
   return(result);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e5      	bne.n	8006b2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e011      	b.n	8006b98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3758      	adds	r7, #88	@ 0x58
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb0:	e04f      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d04b      	beq.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bba:	f7fc fa63 	bl	8003084 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d302      	bcc.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e04e      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d037      	beq.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b80      	cmp	r3, #128	@ 0x80
 8006be6:	d034      	beq.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b40      	cmp	r3, #64	@ 0x40
 8006bec:	d031      	beq.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d110      	bne.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2208      	movs	r2, #8
 8006c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f8ff 	bl	8006e08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e029      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c2c:	d111      	bne.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f8e5 	bl	8006e08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e00f      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d0a0      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b096      	sub	sp, #88	@ 0x58
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	88fa      	ldrh	r2, [r7, #6]
 8006c94:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2222      	movs	r2, #34	@ 0x22
 8006ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d028      	beq.n	8006d02 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb4:	4a3e      	ldr	r2, [pc, #248]	@ (8006db0 <UART_Start_Receive_DMA+0x134>)
 8006cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8006db4 <UART_Start_Receive_DMA+0x138>)
 8006cbe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8006db8 <UART_Start_Receive_DMA+0x13c>)
 8006cc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ccc:	2200      	movs	r2, #0
 8006cce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3324      	adds	r3, #36	@ 0x24
 8006cda:	4619      	mov	r1, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	f7fc fbc8 	bl	8003478 <HAL_DMA_Start_IT>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e051      	b.n	8006da6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d018      	beq.n	8006d3c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d2a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e6      	bne.n	8006d0a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d5c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d90:	623a      	str	r2, [r7, #32]
 8006d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d94:	69f9      	ldr	r1, [r7, #28]
 8006d96:	6a3a      	ldr	r2, [r7, #32]
 8006d98:	e841 2300 	strex	r3, r2, [r1]
 8006d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e5      	bne.n	8006d70 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3758      	adds	r7, #88	@ 0x58
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	08006f87 	.word	0x08006f87
 8006db4:	080070b3 	.word	0x080070b3
 8006db8:	080070f1 	.word	0x080070f1

08006dbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b089      	sub	sp, #36	@ 0x24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006dd8:	61fb      	str	r3, [r7, #28]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6979      	ldr	r1, [r7, #20]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	613b      	str	r3, [r7, #16]
   return(result);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e6      	bne.n	8006dc4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006dfc:	bf00      	nop
 8006dfe:	3724      	adds	r7, #36	@ 0x24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b095      	sub	sp, #84	@ 0x54
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e6      	bne.n	8006e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e5      	bne.n	8006e42 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d118      	bne.n	8006eb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f023 0310 	bic.w	r3, r3, #16
 8006e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6979      	ldr	r1, [r7, #20]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e6      	bne.n	8006e7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ec4:	bf00      	nop
 8006ec6:	3754      	adds	r7, #84	@ 0x54
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b090      	sub	sp, #64	@ 0x40
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d137      	bne.n	8006f5c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	623b      	str	r3, [r7, #32]
   return(result);
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3308      	adds	r3, #8
 8006f12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f14:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e5      	bne.n	8006ef4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	617b      	str	r3, [r7, #20]
   return(result);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e6      	bne.n	8006f28 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f5a:	e002      	b.n	8006f62 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f5c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006f5e:	f7ff fa3d 	bl	80063dc <HAL_UART_TxCpltCallback>
}
 8006f62:	bf00      	nop
 8006f64:	3740      	adds	r7, #64	@ 0x40
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff fa39 	bl	80063f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b09c      	sub	sp, #112	@ 0x70
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d171      	bne.n	8007086 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fee:	f023 0301 	bic.w	r3, r3, #1
 8006ff2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ffc:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ffe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800700a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e5      	bne.n	8006fdc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	623b      	str	r3, [r7, #32]
   return(result);
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007026:	663b      	str	r3, [r7, #96]	@ 0x60
 8007028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007030:	633a      	str	r2, [r7, #48]	@ 0x30
 8007032:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e5      	bne.n	8007010 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800704e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007050:	2b01      	cmp	r3, #1
 8007052:	d118      	bne.n	8007086 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	60fb      	str	r3, [r7, #12]
   return(result);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f023 0310 	bic.w	r3, r3, #16
 8007068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800706a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	69b9      	ldr	r1, [r7, #24]
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	617b      	str	r3, [r7, #20]
   return(result);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e6      	bne.n	8007054 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007088:	2200      	movs	r2, #0
 800708a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800708e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007090:	2b01      	cmp	r3, #1
 8007092:	d107      	bne.n	80070a4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007096:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800709a:	4619      	mov	r1, r3
 800709c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800709e:	f7ff f9cf 	bl	8006440 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070a2:	e002      	b.n	80070aa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80070a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070a6:	f7ff f9ad 	bl	8006404 <HAL_UART_RxCpltCallback>
}
 80070aa:	bf00      	nop
 80070ac:	3770      	adds	r7, #112	@ 0x70
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070be:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d109      	bne.n	80070e2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	4619      	mov	r1, r3
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff f9b0 	bl	8006440 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070e0:	e002      	b.n	80070e8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff f998 	bl	8006418 <HAL_UART_RxHalfCpltCallback>
}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007102:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800710a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b80      	cmp	r3, #128	@ 0x80
 8007118:	d109      	bne.n	800712e <UART_DMAError+0x3e>
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b21      	cmp	r3, #33	@ 0x21
 800711e:	d106      	bne.n	800712e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f7ff fe47 	bl	8006dbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007138:	2b40      	cmp	r3, #64	@ 0x40
 800713a:	d109      	bne.n	8007150 <UART_DMAError+0x60>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b22      	cmp	r3, #34	@ 0x22
 8007140:	d106      	bne.n	8007150 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800714a:	6978      	ldr	r0, [r7, #20]
 800714c:	f7ff fe5c 	bl	8006e08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007156:	f043 0210 	orr.w	r2, r3, #16
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007160:	6978      	ldr	r0, [r7, #20]
 8007162:	f7ff f963 	bl	800642c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007166:	bf00      	nop
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7ff f94d 	bl	800642c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b088      	sub	sp, #32
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6979      	ldr	r1, [r7, #20]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	613b      	str	r3, [r7, #16]
   return(result);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e6      	bne.n	80071a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2220      	movs	r2, #32
 80071d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff f8fb 	bl	80063dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e6:	bf00      	nop
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007208:	4904      	ldr	r1, [pc, #16]	@ (800721c <MX_FATFS_Init+0x18>)
 800720a:	4805      	ldr	r0, [pc, #20]	@ (8007220 <MX_FATFS_Init+0x1c>)
 800720c:	f000 f928 	bl	8007460 <FATFS_LinkDriver>
 8007210:	4603      	mov	r3, r0
 8007212:	461a      	mov	r2, r3
 8007214:	4b03      	ldr	r3, [pc, #12]	@ (8007224 <MX_FATFS_Init+0x20>)
 8007216:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007218:	bf00      	nop
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000764 	.word	0x20000764
 8007220:	2000002c 	.word	0x2000002c
 8007224:	20000760 	.word	0x20000760

08007228 <USER_initialize>:
};

DSTATUS USER_initialize (
	BYTE pdrv
)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
	res = SD_Init();
 8007232:	f7fa f9f5 	bl	8001620 <SD_Init>
 8007236:	4603      	mov	r3, r0
 8007238:	73fb      	strb	r3, [r7, #15]
	if(res)
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d008      	beq.n	8007252 <USER_initialize+0x2a>
	{
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8007240:	4b09      	ldr	r3, [pc, #36]	@ (8007268 <USER_initialize+0x40>)
 8007242:	2238      	movs	r2, #56	@ 0x38
 8007244:	61da      	str	r2, [r3, #28]
		SPI_TransmitReceive(0xFF);
 8007246:	20ff      	movs	r0, #255	@ 0xff
 8007248:	f7fa f96a 	bl	8001520 <SPI_TransmitReceive>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800724c:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <USER_initialize+0x40>)
 800724e:	2200      	movs	r2, #0
 8007250:	61da      	str	r2, [r3, #28]
	}
	if(res)
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <USER_initialize+0x34>
		return  STA_NOINIT;
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <USER_initialize+0x36>
	else
		return RES_OK;
 800725c:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000490 	.word	0x20000490

0800726c <USER_status>:

DSTATUS USER_status (
	BYTE pdrv
)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	71fb      	strb	r3, [r7, #7]
	switch (pdrv)
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <USER_status+0x16>
 800727c:	2b01      	cmp	r3, #1
 800727e:	d002      	beq.n	8007286 <USER_status+0x1a>
 8007280:	e003      	b.n	800728a <USER_status+0x1e>
	{
		case 0 :
			return RES_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	e002      	b.n	800728c <USER_status+0x20>
		case 1 :
			return RES_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	e000      	b.n	800728c <USER_status+0x20>
		default:
			return STA_NOINIT;
 800728a:	2301      	movs	r3, #1
	}
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USER_read>:
	BYTE pdrv,
	BYTE *buff,
	DWORD sector,
	UINT count
)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]
	uint8_t res;
  if(count == 0)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <USER_read+0x1a>
	  return RES_PARERR;
 80072ae:	2304      	movs	r3, #4
 80072b0:	e013      	b.n	80072da <USER_read+0x42>
  switch (pdrv)
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10f      	bne.n	80072d8 <USER_read+0x40>
  	{
	case 0:
	{
		res=SD_ReadDisk(buff,sector,count);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	68b8      	ldr	r0, [r7, #8]
 80072c2:	f7fa fb17 	bl	80018f4 <SD_ReadDisk>
 80072c6:	4603      	mov	r3, r0
 80072c8:	75fb      	strb	r3, [r7, #23]
		if(res == 0)
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <USER_read+0x3c>
			return RES_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e002      	b.n	80072da <USER_read+0x42>
		else
			return RES_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <USER_read+0x42>
	}
	default:
		return RES_ERROR;
 80072d8:	2301      	movs	r3, #1
  	}
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USER_write>:
	BYTE pdrv,
	const BYTE *buff,
	DWORD sector,
	UINT count
)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]
	uint8_t  res;
	if( !count )
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <USER_write+0x1a>
	{
		return RES_PARERR;
 80072f8:	2304      	movs	r3, #4
 80072fa:	e013      	b.n	8007324 <USER_write+0x42>
	}
	switch (pdrv)
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10f      	bne.n	8007322 <USER_write+0x40>
	{
		case 0:
			res=SD_WriteDisk((uint8_t *)buff,sector,count);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	68b8      	ldr	r0, [r7, #8]
 800730c:	f7fa fb4a 	bl	80019a4 <SD_WriteDisk>
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]
				if(res == 0)
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <USER_write+0x3c>
					return RES_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	e002      	b.n	8007324 <USER_write+0x42>
				else
					return RES_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <USER_write+0x42>
		default:return RES_ERROR;
 8007322:	2301      	movs	r3, #1
	}
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,
	BYTE cmd,
	void *buff
)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	603a      	str	r2, [r7, #0]
 8007336:	71fb      	strb	r3, [r7, #7]
 8007338:	460b      	mov	r3, r1
 800733a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
		 switch(cmd)
 800733c:	79bb      	ldrb	r3, [r7, #6]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d837      	bhi.n	80073b2 <USER_ioctl+0x86>
 8007342:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <USER_ioctl+0x1c>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007359 	.word	0x08007359
 800734c:	080073a3 	.word	0x080073a3
 8007350:	08007389 	.word	0x08007389
 8007354:	08007397 	.word	0x08007397
		    {
			    case CTRL_SYNC:
					SD_CS_LOW();
 8007358:	2200      	movs	r2, #0
 800735a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800735e:	4819      	ldr	r0, [pc, #100]	@ (80073c4 <USER_ioctl+0x98>)
 8007360:	f7fc fbce 	bl	8003b00 <HAL_GPIO_WritePin>
					do{
						HAL_Delay(20);
 8007364:	2014      	movs	r0, #20
 8007366:	f7fb fe99 	bl	800309c <HAL_Delay>
					}while(SPI_TransmitReceive(0xFF)!=0xFF);
 800736a:	20ff      	movs	r0, #255	@ 0xff
 800736c:	f7fa f8d8 	bl	8001520 <SPI_TransmitReceive>
 8007370:	4603      	mov	r3, r0
 8007372:	2bff      	cmp	r3, #255	@ 0xff
 8007374:	d1f6      	bne.n	8007364 <USER_ioctl+0x38>
					res=RES_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
					SD_CS_HIGH();
 800737a:	2201      	movs	r2, #1
 800737c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007380:	4810      	ldr	r0, [pc, #64]	@ (80073c4 <USER_ioctl+0x98>)
 8007382:	f7fc fbbd 	bl	8003b00 <HAL_GPIO_WritePin>
			        break;
 8007386:	e017      	b.n	80073b8 <USER_ioctl+0x8c>
			    case GET_SECTOR_SIZE:
			        *(WORD*)buff = 512;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800738e:	801a      	strh	r2, [r3, #0]
			        res = RES_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	73fb      	strb	r3, [r7, #15]
			        break;
 8007394:	e010      	b.n	80073b8 <USER_ioctl+0x8c>
			    case GET_BLOCK_SIZE:
			        *(WORD*)buff = 8;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2208      	movs	r2, #8
 800739a:	801a      	strh	r2, [r3, #0]
			        res = RES_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
			        break;
 80073a0:	e00a      	b.n	80073b8 <USER_ioctl+0x8c>
			    case GET_SECTOR_COUNT:
			        *(DWORD*)buff = SD_GetSectorCount();
 80073a2:	f7fa fb93 	bl	8001acc <SD_GetSectorCount>
 80073a6:	4602      	mov	r2, r0
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	601a      	str	r2, [r3, #0]
			        res = RES_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
			        break;
 80073b0:	e002      	b.n	80073b8 <USER_ioctl+0x8c>
			    default:
			        res = RES_PARERR;
 80073b2:	2304      	movs	r3, #4
 80073b4:	73fb      	strb	r3, [r7, #15]
			        break;
 80073b6:	bf00      	nop
		    }
			return res;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	48000400 	.word	0x48000400

080073c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80073de:	4b1f      	ldr	r3, [pc, #124]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 80073e0:	7a5b      	ldrb	r3, [r3, #9]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d131      	bne.n	800744c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80073e8:	4b1c      	ldr	r3, [pc, #112]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 80073ea:	7a5b      	ldrb	r3, [r3, #9]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	4b1a      	ldr	r3, [pc, #104]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 80073f2:	2100      	movs	r1, #0
 80073f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80073f6:	4b19      	ldr	r3, [pc, #100]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 80073f8:	7a5b      	ldrb	r3, [r3, #9]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	4a17      	ldr	r2, [pc, #92]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007406:	4b15      	ldr	r3, [pc, #84]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 8007408:	7a5b      	ldrb	r3, [r3, #9]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	4b13      	ldr	r3, [pc, #76]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 8007410:	4413      	add	r3, r2
 8007412:	79fa      	ldrb	r2, [r7, #7]
 8007414:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007416:	4b11      	ldr	r3, [pc, #68]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 8007418:	7a5b      	ldrb	r3, [r3, #9]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	b2d1      	uxtb	r1, r2
 8007420:	4a0e      	ldr	r2, [pc, #56]	@ (800745c <FATFS_LinkDriverEx+0x94>)
 8007422:	7251      	strb	r1, [r2, #9]
 8007424:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007426:	7dbb      	ldrb	r3, [r7, #22]
 8007428:	3330      	adds	r3, #48	@ 0x30
 800742a:	b2da      	uxtb	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	3301      	adds	r3, #1
 8007434:	223a      	movs	r2, #58	@ 0x3a
 8007436:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	3302      	adds	r3, #2
 800743c:	222f      	movs	r2, #47	@ 0x2f
 800743e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	3303      	adds	r3, #3
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	20000768 	.word	0x20000768

08007460 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800746a:	2200      	movs	r2, #0
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff ffaa 	bl	80073c8 <FATFS_LinkDriverEx>
 8007474:	4603      	mov	r3, r0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <malloc>:
 8007480:	4b02      	ldr	r3, [pc, #8]	@ (800748c <malloc+0xc>)
 8007482:	4601      	mov	r1, r0
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	f000 b82d 	b.w	80074e4 <_malloc_r>
 800748a:	bf00      	nop
 800748c:	2000004c 	.word	0x2000004c

08007490 <free>:
 8007490:	4b02      	ldr	r3, [pc, #8]	@ (800749c <free+0xc>)
 8007492:	4601      	mov	r1, r0
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	f002 b8bb 	b.w	8009610 <_free_r>
 800749a:	bf00      	nop
 800749c:	2000004c 	.word	0x2000004c

080074a0 <sbrk_aligned>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4e0f      	ldr	r6, [pc, #60]	@ (80074e0 <sbrk_aligned+0x40>)
 80074a4:	460c      	mov	r4, r1
 80074a6:	6831      	ldr	r1, [r6, #0]
 80074a8:	4605      	mov	r5, r0
 80074aa:	b911      	cbnz	r1, 80074b2 <sbrk_aligned+0x12>
 80074ac:	f001 f9f2 	bl	8008894 <_sbrk_r>
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f001 f9ed 	bl	8008894 <_sbrk_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d103      	bne.n	80074c6 <sbrk_aligned+0x26>
 80074be:	f04f 34ff 	mov.w	r4, #4294967295
 80074c2:	4620      	mov	r0, r4
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	1cc4      	adds	r4, r0, #3
 80074c8:	f024 0403 	bic.w	r4, r4, #3
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	d0f8      	beq.n	80074c2 <sbrk_aligned+0x22>
 80074d0:	1a21      	subs	r1, r4, r0
 80074d2:	4628      	mov	r0, r5
 80074d4:	f001 f9de 	bl	8008894 <_sbrk_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	d1f2      	bne.n	80074c2 <sbrk_aligned+0x22>
 80074dc:	e7ef      	b.n	80074be <sbrk_aligned+0x1e>
 80074de:	bf00      	nop
 80074e0:	20000774 	.word	0x20000774

080074e4 <_malloc_r>:
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	1ccd      	adds	r5, r1, #3
 80074ea:	f025 0503 	bic.w	r5, r5, #3
 80074ee:	3508      	adds	r5, #8
 80074f0:	2d0c      	cmp	r5, #12
 80074f2:	bf38      	it	cc
 80074f4:	250c      	movcc	r5, #12
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	4606      	mov	r6, r0
 80074fa:	db01      	blt.n	8007500 <_malloc_r+0x1c>
 80074fc:	42a9      	cmp	r1, r5
 80074fe:	d904      	bls.n	800750a <_malloc_r+0x26>
 8007500:	230c      	movs	r3, #12
 8007502:	6033      	str	r3, [r6, #0]
 8007504:	2000      	movs	r0, #0
 8007506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075e0 <_malloc_r+0xfc>
 800750e:	f000 f869 	bl	80075e4 <__malloc_lock>
 8007512:	f8d8 3000 	ldr.w	r3, [r8]
 8007516:	461c      	mov	r4, r3
 8007518:	bb44      	cbnz	r4, 800756c <_malloc_r+0x88>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff ffbf 	bl	80074a0 <sbrk_aligned>
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	4604      	mov	r4, r0
 8007526:	d158      	bne.n	80075da <_malloc_r+0xf6>
 8007528:	f8d8 4000 	ldr.w	r4, [r8]
 800752c:	4627      	mov	r7, r4
 800752e:	2f00      	cmp	r7, #0
 8007530:	d143      	bne.n	80075ba <_malloc_r+0xd6>
 8007532:	2c00      	cmp	r4, #0
 8007534:	d04b      	beq.n	80075ce <_malloc_r+0xea>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	4639      	mov	r1, r7
 800753a:	4630      	mov	r0, r6
 800753c:	eb04 0903 	add.w	r9, r4, r3
 8007540:	f001 f9a8 	bl	8008894 <_sbrk_r>
 8007544:	4581      	cmp	r9, r0
 8007546:	d142      	bne.n	80075ce <_malloc_r+0xea>
 8007548:	6821      	ldr	r1, [r4, #0]
 800754a:	1a6d      	subs	r5, r5, r1
 800754c:	4629      	mov	r1, r5
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ffa6 	bl	80074a0 <sbrk_aligned>
 8007554:	3001      	adds	r0, #1
 8007556:	d03a      	beq.n	80075ce <_malloc_r+0xea>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	442b      	add	r3, r5
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	f8d8 3000 	ldr.w	r3, [r8]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	bb62      	cbnz	r2, 80075c0 <_malloc_r+0xdc>
 8007566:	f8c8 7000 	str.w	r7, [r8]
 800756a:	e00f      	b.n	800758c <_malloc_r+0xa8>
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	1b52      	subs	r2, r2, r5
 8007570:	d420      	bmi.n	80075b4 <_malloc_r+0xd0>
 8007572:	2a0b      	cmp	r2, #11
 8007574:	d917      	bls.n	80075a6 <_malloc_r+0xc2>
 8007576:	1961      	adds	r1, r4, r5
 8007578:	42a3      	cmp	r3, r4
 800757a:	6025      	str	r5, [r4, #0]
 800757c:	bf18      	it	ne
 800757e:	6059      	strne	r1, [r3, #4]
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	bf08      	it	eq
 8007584:	f8c8 1000 	streq.w	r1, [r8]
 8007588:	5162      	str	r2, [r4, r5]
 800758a:	604b      	str	r3, [r1, #4]
 800758c:	4630      	mov	r0, r6
 800758e:	f000 f82f 	bl	80075f0 <__malloc_unlock>
 8007592:	f104 000b 	add.w	r0, r4, #11
 8007596:	1d23      	adds	r3, r4, #4
 8007598:	f020 0007 	bic.w	r0, r0, #7
 800759c:	1ac2      	subs	r2, r0, r3
 800759e:	bf1c      	itt	ne
 80075a0:	1a1b      	subne	r3, r3, r0
 80075a2:	50a3      	strne	r3, [r4, r2]
 80075a4:	e7af      	b.n	8007506 <_malloc_r+0x22>
 80075a6:	6862      	ldr	r2, [r4, #4]
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	bf0c      	ite	eq
 80075ac:	f8c8 2000 	streq.w	r2, [r8]
 80075b0:	605a      	strne	r2, [r3, #4]
 80075b2:	e7eb      	b.n	800758c <_malloc_r+0xa8>
 80075b4:	4623      	mov	r3, r4
 80075b6:	6864      	ldr	r4, [r4, #4]
 80075b8:	e7ae      	b.n	8007518 <_malloc_r+0x34>
 80075ba:	463c      	mov	r4, r7
 80075bc:	687f      	ldr	r7, [r7, #4]
 80075be:	e7b6      	b.n	800752e <_malloc_r+0x4a>
 80075c0:	461a      	mov	r2, r3
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	d1fb      	bne.n	80075c0 <_malloc_r+0xdc>
 80075c8:	2300      	movs	r3, #0
 80075ca:	6053      	str	r3, [r2, #4]
 80075cc:	e7de      	b.n	800758c <_malloc_r+0xa8>
 80075ce:	230c      	movs	r3, #12
 80075d0:	6033      	str	r3, [r6, #0]
 80075d2:	4630      	mov	r0, r6
 80075d4:	f000 f80c 	bl	80075f0 <__malloc_unlock>
 80075d8:	e794      	b.n	8007504 <_malloc_r+0x20>
 80075da:	6005      	str	r5, [r0, #0]
 80075dc:	e7d6      	b.n	800758c <_malloc_r+0xa8>
 80075de:	bf00      	nop
 80075e0:	20000778 	.word	0x20000778

080075e4 <__malloc_lock>:
 80075e4:	4801      	ldr	r0, [pc, #4]	@ (80075ec <__malloc_lock+0x8>)
 80075e6:	f001 b9a2 	b.w	800892e <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	200008bc 	.word	0x200008bc

080075f0 <__malloc_unlock>:
 80075f0:	4801      	ldr	r0, [pc, #4]	@ (80075f8 <__malloc_unlock+0x8>)
 80075f2:	f001 b99d 	b.w	8008930 <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	200008bc 	.word	0x200008bc

080075fc <_strtol_l.isra.0>:
 80075fc:	2b24      	cmp	r3, #36	@ 0x24
 80075fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007602:	4686      	mov	lr, r0
 8007604:	4690      	mov	r8, r2
 8007606:	d801      	bhi.n	800760c <_strtol_l.isra.0+0x10>
 8007608:	2b01      	cmp	r3, #1
 800760a:	d106      	bne.n	800761a <_strtol_l.isra.0+0x1e>
 800760c:	f001 f964 	bl	80088d8 <__errno>
 8007610:	2316      	movs	r3, #22
 8007612:	6003      	str	r3, [r0, #0]
 8007614:	2000      	movs	r0, #0
 8007616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761a:	4834      	ldr	r0, [pc, #208]	@ (80076ec <_strtol_l.isra.0+0xf0>)
 800761c:	460d      	mov	r5, r1
 800761e:	462a      	mov	r2, r5
 8007620:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007624:	5d06      	ldrb	r6, [r0, r4]
 8007626:	f016 0608 	ands.w	r6, r6, #8
 800762a:	d1f8      	bne.n	800761e <_strtol_l.isra.0+0x22>
 800762c:	2c2d      	cmp	r4, #45	@ 0x2d
 800762e:	d110      	bne.n	8007652 <_strtol_l.isra.0+0x56>
 8007630:	782c      	ldrb	r4, [r5, #0]
 8007632:	2601      	movs	r6, #1
 8007634:	1c95      	adds	r5, r2, #2
 8007636:	f033 0210 	bics.w	r2, r3, #16
 800763a:	d115      	bne.n	8007668 <_strtol_l.isra.0+0x6c>
 800763c:	2c30      	cmp	r4, #48	@ 0x30
 800763e:	d10d      	bne.n	800765c <_strtol_l.isra.0+0x60>
 8007640:	782a      	ldrb	r2, [r5, #0]
 8007642:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007646:	2a58      	cmp	r2, #88	@ 0x58
 8007648:	d108      	bne.n	800765c <_strtol_l.isra.0+0x60>
 800764a:	786c      	ldrb	r4, [r5, #1]
 800764c:	3502      	adds	r5, #2
 800764e:	2310      	movs	r3, #16
 8007650:	e00a      	b.n	8007668 <_strtol_l.isra.0+0x6c>
 8007652:	2c2b      	cmp	r4, #43	@ 0x2b
 8007654:	bf04      	itt	eq
 8007656:	782c      	ldrbeq	r4, [r5, #0]
 8007658:	1c95      	addeq	r5, r2, #2
 800765a:	e7ec      	b.n	8007636 <_strtol_l.isra.0+0x3a>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f6      	bne.n	800764e <_strtol_l.isra.0+0x52>
 8007660:	2c30      	cmp	r4, #48	@ 0x30
 8007662:	bf14      	ite	ne
 8007664:	230a      	movne	r3, #10
 8007666:	2308      	moveq	r3, #8
 8007668:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800766c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007670:	2200      	movs	r2, #0
 8007672:	fbbc f9f3 	udiv	r9, ip, r3
 8007676:	4610      	mov	r0, r2
 8007678:	fb03 ca19 	mls	sl, r3, r9, ip
 800767c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007680:	2f09      	cmp	r7, #9
 8007682:	d80f      	bhi.n	80076a4 <_strtol_l.isra.0+0xa8>
 8007684:	463c      	mov	r4, r7
 8007686:	42a3      	cmp	r3, r4
 8007688:	dd1b      	ble.n	80076c2 <_strtol_l.isra.0+0xc6>
 800768a:	1c57      	adds	r7, r2, #1
 800768c:	d007      	beq.n	800769e <_strtol_l.isra.0+0xa2>
 800768e:	4581      	cmp	r9, r0
 8007690:	d314      	bcc.n	80076bc <_strtol_l.isra.0+0xc0>
 8007692:	d101      	bne.n	8007698 <_strtol_l.isra.0+0x9c>
 8007694:	45a2      	cmp	sl, r4
 8007696:	db11      	blt.n	80076bc <_strtol_l.isra.0+0xc0>
 8007698:	fb00 4003 	mla	r0, r0, r3, r4
 800769c:	2201      	movs	r2, #1
 800769e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076a2:	e7eb      	b.n	800767c <_strtol_l.isra.0+0x80>
 80076a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80076a8:	2f19      	cmp	r7, #25
 80076aa:	d801      	bhi.n	80076b0 <_strtol_l.isra.0+0xb4>
 80076ac:	3c37      	subs	r4, #55	@ 0x37
 80076ae:	e7ea      	b.n	8007686 <_strtol_l.isra.0+0x8a>
 80076b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80076b4:	2f19      	cmp	r7, #25
 80076b6:	d804      	bhi.n	80076c2 <_strtol_l.isra.0+0xc6>
 80076b8:	3c57      	subs	r4, #87	@ 0x57
 80076ba:	e7e4      	b.n	8007686 <_strtol_l.isra.0+0x8a>
 80076bc:	f04f 32ff 	mov.w	r2, #4294967295
 80076c0:	e7ed      	b.n	800769e <_strtol_l.isra.0+0xa2>
 80076c2:	1c53      	adds	r3, r2, #1
 80076c4:	d108      	bne.n	80076d8 <_strtol_l.isra.0+0xdc>
 80076c6:	2322      	movs	r3, #34	@ 0x22
 80076c8:	f8ce 3000 	str.w	r3, [lr]
 80076cc:	4660      	mov	r0, ip
 80076ce:	f1b8 0f00 	cmp.w	r8, #0
 80076d2:	d0a0      	beq.n	8007616 <_strtol_l.isra.0+0x1a>
 80076d4:	1e69      	subs	r1, r5, #1
 80076d6:	e006      	b.n	80076e6 <_strtol_l.isra.0+0xea>
 80076d8:	b106      	cbz	r6, 80076dc <_strtol_l.isra.0+0xe0>
 80076da:	4240      	negs	r0, r0
 80076dc:	f1b8 0f00 	cmp.w	r8, #0
 80076e0:	d099      	beq.n	8007616 <_strtol_l.isra.0+0x1a>
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	d1f6      	bne.n	80076d4 <_strtol_l.isra.0+0xd8>
 80076e6:	f8c8 1000 	str.w	r1, [r8]
 80076ea:	e794      	b.n	8007616 <_strtol_l.isra.0+0x1a>
 80076ec:	0800bd15 	.word	0x0800bd15

080076f0 <_strtol_r>:
 80076f0:	f7ff bf84 	b.w	80075fc <_strtol_l.isra.0>

080076f4 <__cvt>:
 80076f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	ec57 6b10 	vmov	r6, r7, d0
 80076fc:	2f00      	cmp	r7, #0
 80076fe:	460c      	mov	r4, r1
 8007700:	4619      	mov	r1, r3
 8007702:	463b      	mov	r3, r7
 8007704:	bfbb      	ittet	lt
 8007706:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800770a:	461f      	movlt	r7, r3
 800770c:	2300      	movge	r3, #0
 800770e:	232d      	movlt	r3, #45	@ 0x2d
 8007710:	700b      	strb	r3, [r1, #0]
 8007712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007714:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007718:	4691      	mov	r9, r2
 800771a:	f023 0820 	bic.w	r8, r3, #32
 800771e:	bfbc      	itt	lt
 8007720:	4632      	movlt	r2, r6
 8007722:	4616      	movlt	r6, r2
 8007724:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007728:	d005      	beq.n	8007736 <__cvt+0x42>
 800772a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800772e:	d100      	bne.n	8007732 <__cvt+0x3e>
 8007730:	3401      	adds	r4, #1
 8007732:	2102      	movs	r1, #2
 8007734:	e000      	b.n	8007738 <__cvt+0x44>
 8007736:	2103      	movs	r1, #3
 8007738:	ab03      	add	r3, sp, #12
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	ab02      	add	r3, sp, #8
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	ec47 6b10 	vmov	d0, r6, r7
 8007744:	4653      	mov	r3, sl
 8007746:	4622      	mov	r2, r4
 8007748:	f001 f992 	bl	8008a70 <_dtoa_r>
 800774c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007750:	4605      	mov	r5, r0
 8007752:	d119      	bne.n	8007788 <__cvt+0x94>
 8007754:	f019 0f01 	tst.w	r9, #1
 8007758:	d00e      	beq.n	8007778 <__cvt+0x84>
 800775a:	eb00 0904 	add.w	r9, r0, r4
 800775e:	2200      	movs	r2, #0
 8007760:	2300      	movs	r3, #0
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f9 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800776a:	b108      	cbz	r0, 8007770 <__cvt+0x7c>
 800776c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007770:	2230      	movs	r2, #48	@ 0x30
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	454b      	cmp	r3, r9
 8007776:	d31e      	bcc.n	80077b6 <__cvt+0xc2>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800777c:	1b5b      	subs	r3, r3, r5
 800777e:	4628      	mov	r0, r5
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	b004      	add	sp, #16
 8007784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007788:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800778c:	eb00 0904 	add.w	r9, r0, r4
 8007790:	d1e5      	bne.n	800775e <__cvt+0x6a>
 8007792:	7803      	ldrb	r3, [r0, #0]
 8007794:	2b30      	cmp	r3, #48	@ 0x30
 8007796:	d10a      	bne.n	80077ae <__cvt+0xba>
 8007798:	2200      	movs	r2, #0
 800779a:	2300      	movs	r3, #0
 800779c:	4630      	mov	r0, r6
 800779e:	4639      	mov	r1, r7
 80077a0:	f7f9 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80077a4:	b918      	cbnz	r0, 80077ae <__cvt+0xba>
 80077a6:	f1c4 0401 	rsb	r4, r4, #1
 80077aa:	f8ca 4000 	str.w	r4, [sl]
 80077ae:	f8da 3000 	ldr.w	r3, [sl]
 80077b2:	4499      	add	r9, r3
 80077b4:	e7d3      	b.n	800775e <__cvt+0x6a>
 80077b6:	1c59      	adds	r1, r3, #1
 80077b8:	9103      	str	r1, [sp, #12]
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e7d9      	b.n	8007772 <__cvt+0x7e>

080077be <__exponent>:
 80077be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077c0:	2900      	cmp	r1, #0
 80077c2:	bfba      	itte	lt
 80077c4:	4249      	neglt	r1, r1
 80077c6:	232d      	movlt	r3, #45	@ 0x2d
 80077c8:	232b      	movge	r3, #43	@ 0x2b
 80077ca:	2909      	cmp	r1, #9
 80077cc:	7002      	strb	r2, [r0, #0]
 80077ce:	7043      	strb	r3, [r0, #1]
 80077d0:	dd29      	ble.n	8007826 <__exponent+0x68>
 80077d2:	f10d 0307 	add.w	r3, sp, #7
 80077d6:	461d      	mov	r5, r3
 80077d8:	270a      	movs	r7, #10
 80077da:	461a      	mov	r2, r3
 80077dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80077e0:	fb07 1416 	mls	r4, r7, r6, r1
 80077e4:	3430      	adds	r4, #48	@ 0x30
 80077e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077ea:	460c      	mov	r4, r1
 80077ec:	2c63      	cmp	r4, #99	@ 0x63
 80077ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80077f2:	4631      	mov	r1, r6
 80077f4:	dcf1      	bgt.n	80077da <__exponent+0x1c>
 80077f6:	3130      	adds	r1, #48	@ 0x30
 80077f8:	1e94      	subs	r4, r2, #2
 80077fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077fe:	1c41      	adds	r1, r0, #1
 8007800:	4623      	mov	r3, r4
 8007802:	42ab      	cmp	r3, r5
 8007804:	d30a      	bcc.n	800781c <__exponent+0x5e>
 8007806:	f10d 0309 	add.w	r3, sp, #9
 800780a:	1a9b      	subs	r3, r3, r2
 800780c:	42ac      	cmp	r4, r5
 800780e:	bf88      	it	hi
 8007810:	2300      	movhi	r3, #0
 8007812:	3302      	adds	r3, #2
 8007814:	4403      	add	r3, r0
 8007816:	1a18      	subs	r0, r3, r0
 8007818:	b003      	add	sp, #12
 800781a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800781c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007820:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007824:	e7ed      	b.n	8007802 <__exponent+0x44>
 8007826:	2330      	movs	r3, #48	@ 0x30
 8007828:	3130      	adds	r1, #48	@ 0x30
 800782a:	7083      	strb	r3, [r0, #2]
 800782c:	70c1      	strb	r1, [r0, #3]
 800782e:	1d03      	adds	r3, r0, #4
 8007830:	e7f1      	b.n	8007816 <__exponent+0x58>
	...

08007834 <_printf_float>:
 8007834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	b08d      	sub	sp, #52	@ 0x34
 800783a:	460c      	mov	r4, r1
 800783c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007840:	4616      	mov	r6, r2
 8007842:	461f      	mov	r7, r3
 8007844:	4605      	mov	r5, r0
 8007846:	f000 ffed 	bl	8008824 <_localeconv_r>
 800784a:	6803      	ldr	r3, [r0, #0]
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	4618      	mov	r0, r3
 8007850:	f7f8 fd0e 	bl	8000270 <strlen>
 8007854:	2300      	movs	r3, #0
 8007856:	930a      	str	r3, [sp, #40]	@ 0x28
 8007858:	f8d8 3000 	ldr.w	r3, [r8]
 800785c:	9005      	str	r0, [sp, #20]
 800785e:	3307      	adds	r3, #7
 8007860:	f023 0307 	bic.w	r3, r3, #7
 8007864:	f103 0208 	add.w	r2, r3, #8
 8007868:	f894 a018 	ldrb.w	sl, [r4, #24]
 800786c:	f8d4 b000 	ldr.w	fp, [r4]
 8007870:	f8c8 2000 	str.w	r2, [r8]
 8007874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007878:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800787c:	9307      	str	r3, [sp, #28]
 800787e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007882:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800788a:	4b9c      	ldr	r3, [pc, #624]	@ (8007afc <_printf_float+0x2c8>)
 800788c:	f04f 32ff 	mov.w	r2, #4294967295
 8007890:	f7f9 f94c 	bl	8000b2c <__aeabi_dcmpun>
 8007894:	bb70      	cbnz	r0, 80078f4 <_printf_float+0xc0>
 8007896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800789a:	4b98      	ldr	r3, [pc, #608]	@ (8007afc <_printf_float+0x2c8>)
 800789c:	f04f 32ff 	mov.w	r2, #4294967295
 80078a0:	f7f9 f926 	bl	8000af0 <__aeabi_dcmple>
 80078a4:	bb30      	cbnz	r0, 80078f4 <_printf_float+0xc0>
 80078a6:	2200      	movs	r2, #0
 80078a8:	2300      	movs	r3, #0
 80078aa:	4640      	mov	r0, r8
 80078ac:	4649      	mov	r1, r9
 80078ae:	f7f9 f915 	bl	8000adc <__aeabi_dcmplt>
 80078b2:	b110      	cbz	r0, 80078ba <_printf_float+0x86>
 80078b4:	232d      	movs	r3, #45	@ 0x2d
 80078b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ba:	4a91      	ldr	r2, [pc, #580]	@ (8007b00 <_printf_float+0x2cc>)
 80078bc:	4b91      	ldr	r3, [pc, #580]	@ (8007b04 <_printf_float+0x2d0>)
 80078be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078c2:	bf8c      	ite	hi
 80078c4:	4690      	movhi	r8, r2
 80078c6:	4698      	movls	r8, r3
 80078c8:	2303      	movs	r3, #3
 80078ca:	6123      	str	r3, [r4, #16]
 80078cc:	f02b 0304 	bic.w	r3, fp, #4
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	f04f 0900 	mov.w	r9, #0
 80078d6:	9700      	str	r7, [sp, #0]
 80078d8:	4633      	mov	r3, r6
 80078da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078dc:	4621      	mov	r1, r4
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 f9d2 	bl	8007c88 <_printf_common>
 80078e4:	3001      	adds	r0, #1
 80078e6:	f040 808d 	bne.w	8007a04 <_printf_float+0x1d0>
 80078ea:	f04f 30ff 	mov.w	r0, #4294967295
 80078ee:	b00d      	add	sp, #52	@ 0x34
 80078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	4640      	mov	r0, r8
 80078fa:	4649      	mov	r1, r9
 80078fc:	f7f9 f916 	bl	8000b2c <__aeabi_dcmpun>
 8007900:	b140      	cbz	r0, 8007914 <_printf_float+0xe0>
 8007902:	464b      	mov	r3, r9
 8007904:	2b00      	cmp	r3, #0
 8007906:	bfbc      	itt	lt
 8007908:	232d      	movlt	r3, #45	@ 0x2d
 800790a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800790e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b08 <_printf_float+0x2d4>)
 8007910:	4b7e      	ldr	r3, [pc, #504]	@ (8007b0c <_printf_float+0x2d8>)
 8007912:	e7d4      	b.n	80078be <_printf_float+0x8a>
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800791a:	9206      	str	r2, [sp, #24]
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	d13b      	bne.n	8007998 <_printf_float+0x164>
 8007920:	2306      	movs	r3, #6
 8007922:	6063      	str	r3, [r4, #4]
 8007924:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007928:	2300      	movs	r3, #0
 800792a:	6022      	str	r2, [r4, #0]
 800792c:	9303      	str	r3, [sp, #12]
 800792e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007930:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007934:	ab09      	add	r3, sp, #36	@ 0x24
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	6861      	ldr	r1, [r4, #4]
 800793a:	ec49 8b10 	vmov	d0, r8, r9
 800793e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007942:	4628      	mov	r0, r5
 8007944:	f7ff fed6 	bl	80076f4 <__cvt>
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800794c:	2b47      	cmp	r3, #71	@ 0x47
 800794e:	4680      	mov	r8, r0
 8007950:	d129      	bne.n	80079a6 <_printf_float+0x172>
 8007952:	1cc8      	adds	r0, r1, #3
 8007954:	db02      	blt.n	800795c <_printf_float+0x128>
 8007956:	6863      	ldr	r3, [r4, #4]
 8007958:	4299      	cmp	r1, r3
 800795a:	dd41      	ble.n	80079e0 <_printf_float+0x1ac>
 800795c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007960:	fa5f fa8a 	uxtb.w	sl, sl
 8007964:	3901      	subs	r1, #1
 8007966:	4652      	mov	r2, sl
 8007968:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800796c:	9109      	str	r1, [sp, #36]	@ 0x24
 800796e:	f7ff ff26 	bl	80077be <__exponent>
 8007972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007974:	1813      	adds	r3, r2, r0
 8007976:	2a01      	cmp	r2, #1
 8007978:	4681      	mov	r9, r0
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	dc02      	bgt.n	8007984 <_printf_float+0x150>
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	07d2      	lsls	r2, r2, #31
 8007982:	d501      	bpl.n	8007988 <_printf_float+0x154>
 8007984:	3301      	adds	r3, #1
 8007986:	6123      	str	r3, [r4, #16]
 8007988:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0a2      	beq.n	80078d6 <_printf_float+0xa2>
 8007990:	232d      	movs	r3, #45	@ 0x2d
 8007992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007996:	e79e      	b.n	80078d6 <_printf_float+0xa2>
 8007998:	9a06      	ldr	r2, [sp, #24]
 800799a:	2a47      	cmp	r2, #71	@ 0x47
 800799c:	d1c2      	bne.n	8007924 <_printf_float+0xf0>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1c0      	bne.n	8007924 <_printf_float+0xf0>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e7bd      	b.n	8007922 <_printf_float+0xee>
 80079a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079aa:	d9db      	bls.n	8007964 <_printf_float+0x130>
 80079ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079b0:	d118      	bne.n	80079e4 <_printf_float+0x1b0>
 80079b2:	2900      	cmp	r1, #0
 80079b4:	6863      	ldr	r3, [r4, #4]
 80079b6:	dd0b      	ble.n	80079d0 <_printf_float+0x19c>
 80079b8:	6121      	str	r1, [r4, #16]
 80079ba:	b913      	cbnz	r3, 80079c2 <_printf_float+0x18e>
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	07d0      	lsls	r0, r2, #31
 80079c0:	d502      	bpl.n	80079c8 <_printf_float+0x194>
 80079c2:	3301      	adds	r3, #1
 80079c4:	440b      	add	r3, r1
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079ca:	f04f 0900 	mov.w	r9, #0
 80079ce:	e7db      	b.n	8007988 <_printf_float+0x154>
 80079d0:	b913      	cbnz	r3, 80079d8 <_printf_float+0x1a4>
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	07d2      	lsls	r2, r2, #31
 80079d6:	d501      	bpl.n	80079dc <_printf_float+0x1a8>
 80079d8:	3302      	adds	r3, #2
 80079da:	e7f4      	b.n	80079c6 <_printf_float+0x192>
 80079dc:	2301      	movs	r3, #1
 80079de:	e7f2      	b.n	80079c6 <_printf_float+0x192>
 80079e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079e6:	4299      	cmp	r1, r3
 80079e8:	db05      	blt.n	80079f6 <_printf_float+0x1c2>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	6121      	str	r1, [r4, #16]
 80079ee:	07d8      	lsls	r0, r3, #31
 80079f0:	d5ea      	bpl.n	80079c8 <_printf_float+0x194>
 80079f2:	1c4b      	adds	r3, r1, #1
 80079f4:	e7e7      	b.n	80079c6 <_printf_float+0x192>
 80079f6:	2900      	cmp	r1, #0
 80079f8:	bfd4      	ite	le
 80079fa:	f1c1 0202 	rsble	r2, r1, #2
 80079fe:	2201      	movgt	r2, #1
 8007a00:	4413      	add	r3, r2
 8007a02:	e7e0      	b.n	80079c6 <_printf_float+0x192>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	055a      	lsls	r2, r3, #21
 8007a08:	d407      	bmi.n	8007a1a <_printf_float+0x1e6>
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b8      	blx	r7
 8007a14:	3001      	adds	r0, #1
 8007a16:	d12b      	bne.n	8007a70 <_printf_float+0x23c>
 8007a18:	e767      	b.n	80078ea <_printf_float+0xb6>
 8007a1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a1e:	f240 80dd 	bls.w	8007bdc <_printf_float+0x3a8>
 8007a22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a26:	2200      	movs	r2, #0
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f7f9 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d033      	beq.n	8007a9a <_printf_float+0x266>
 8007a32:	4a37      	ldr	r2, [pc, #220]	@ (8007b10 <_printf_float+0x2dc>)
 8007a34:	2301      	movs	r3, #1
 8007a36:	4631      	mov	r1, r6
 8007a38:	4628      	mov	r0, r5
 8007a3a:	47b8      	blx	r7
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	f43f af54 	beq.w	80078ea <_printf_float+0xb6>
 8007a42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a46:	4543      	cmp	r3, r8
 8007a48:	db02      	blt.n	8007a50 <_printf_float+0x21c>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	07d8      	lsls	r0, r3, #31
 8007a4e:	d50f      	bpl.n	8007a70 <_printf_float+0x23c>
 8007a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f af45 	beq.w	80078ea <_printf_float+0xb6>
 8007a60:	f04f 0900 	mov.w	r9, #0
 8007a64:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a68:	f104 0a1a 	add.w	sl, r4, #26
 8007a6c:	45c8      	cmp	r8, r9
 8007a6e:	dc09      	bgt.n	8007a84 <_printf_float+0x250>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	079b      	lsls	r3, r3, #30
 8007a74:	f100 8103 	bmi.w	8007c7e <_printf_float+0x44a>
 8007a78:	68e0      	ldr	r0, [r4, #12]
 8007a7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a7c:	4298      	cmp	r0, r3
 8007a7e:	bfb8      	it	lt
 8007a80:	4618      	movlt	r0, r3
 8007a82:	e734      	b.n	80078ee <_printf_float+0xba>
 8007a84:	2301      	movs	r3, #1
 8007a86:	4652      	mov	r2, sl
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	47b8      	blx	r7
 8007a8e:	3001      	adds	r0, #1
 8007a90:	f43f af2b 	beq.w	80078ea <_printf_float+0xb6>
 8007a94:	f109 0901 	add.w	r9, r9, #1
 8007a98:	e7e8      	b.n	8007a6c <_printf_float+0x238>
 8007a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dc39      	bgt.n	8007b14 <_printf_float+0x2e0>
 8007aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b10 <_printf_float+0x2dc>)
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b8      	blx	r7
 8007aaa:	3001      	adds	r0, #1
 8007aac:	f43f af1d 	beq.w	80078ea <_printf_float+0xb6>
 8007ab0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ab4:	ea59 0303 	orrs.w	r3, r9, r3
 8007ab8:	d102      	bne.n	8007ac0 <_printf_float+0x28c>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	07d9      	lsls	r1, r3, #31
 8007abe:	d5d7      	bpl.n	8007a70 <_printf_float+0x23c>
 8007ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	47b8      	blx	r7
 8007aca:	3001      	adds	r0, #1
 8007acc:	f43f af0d 	beq.w	80078ea <_printf_float+0xb6>
 8007ad0:	f04f 0a00 	mov.w	sl, #0
 8007ad4:	f104 0b1a 	add.w	fp, r4, #26
 8007ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ada:	425b      	negs	r3, r3
 8007adc:	4553      	cmp	r3, sl
 8007ade:	dc01      	bgt.n	8007ae4 <_printf_float+0x2b0>
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	e793      	b.n	8007a0c <_printf_float+0x1d8>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	465a      	mov	r2, fp
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f aefb 	beq.w	80078ea <_printf_float+0xb6>
 8007af4:	f10a 0a01 	add.w	sl, sl, #1
 8007af8:	e7ee      	b.n	8007ad8 <_printf_float+0x2a4>
 8007afa:	bf00      	nop
 8007afc:	7fefffff 	.word	0x7fefffff
 8007b00:	0800be19 	.word	0x0800be19
 8007b04:	0800be15 	.word	0x0800be15
 8007b08:	0800be21 	.word	0x0800be21
 8007b0c:	0800be1d 	.word	0x0800be1d
 8007b10:	0800be25 	.word	0x0800be25
 8007b14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b1a:	4553      	cmp	r3, sl
 8007b1c:	bfa8      	it	ge
 8007b1e:	4653      	movge	r3, sl
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	4699      	mov	r9, r3
 8007b24:	dc36      	bgt.n	8007b94 <_printf_float+0x360>
 8007b26:	f04f 0b00 	mov.w	fp, #0
 8007b2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b2e:	f104 021a 	add.w	r2, r4, #26
 8007b32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b34:	9306      	str	r3, [sp, #24]
 8007b36:	eba3 0309 	sub.w	r3, r3, r9
 8007b3a:	455b      	cmp	r3, fp
 8007b3c:	dc31      	bgt.n	8007ba2 <_printf_float+0x36e>
 8007b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b40:	459a      	cmp	sl, r3
 8007b42:	dc3a      	bgt.n	8007bba <_printf_float+0x386>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	07da      	lsls	r2, r3, #31
 8007b48:	d437      	bmi.n	8007bba <_printf_float+0x386>
 8007b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4c:	ebaa 0903 	sub.w	r9, sl, r3
 8007b50:	9b06      	ldr	r3, [sp, #24]
 8007b52:	ebaa 0303 	sub.w	r3, sl, r3
 8007b56:	4599      	cmp	r9, r3
 8007b58:	bfa8      	it	ge
 8007b5a:	4699      	movge	r9, r3
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	dc33      	bgt.n	8007bca <_printf_float+0x396>
 8007b62:	f04f 0800 	mov.w	r8, #0
 8007b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b6a:	f104 0b1a 	add.w	fp, r4, #26
 8007b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b70:	ebaa 0303 	sub.w	r3, sl, r3
 8007b74:	eba3 0309 	sub.w	r3, r3, r9
 8007b78:	4543      	cmp	r3, r8
 8007b7a:	f77f af79 	ble.w	8007a70 <_printf_float+0x23c>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	465a      	mov	r2, fp
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	f43f aeae 	beq.w	80078ea <_printf_float+0xb6>
 8007b8e:	f108 0801 	add.w	r8, r8, #1
 8007b92:	e7ec      	b.n	8007b6e <_printf_float+0x33a>
 8007b94:	4642      	mov	r2, r8
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d1c2      	bne.n	8007b26 <_printf_float+0x2f2>
 8007ba0:	e6a3      	b.n	80078ea <_printf_float+0xb6>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	9206      	str	r2, [sp, #24]
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae9c 	beq.w	80078ea <_printf_float+0xb6>
 8007bb2:	9a06      	ldr	r2, [sp, #24]
 8007bb4:	f10b 0b01 	add.w	fp, fp, #1
 8007bb8:	e7bb      	b.n	8007b32 <_printf_float+0x2fe>
 8007bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b8      	blx	r7
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d1c0      	bne.n	8007b4a <_printf_float+0x316>
 8007bc8:	e68f      	b.n	80078ea <_printf_float+0xb6>
 8007bca:	9a06      	ldr	r2, [sp, #24]
 8007bcc:	464b      	mov	r3, r9
 8007bce:	4442      	add	r2, r8
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d1c3      	bne.n	8007b62 <_printf_float+0x32e>
 8007bda:	e686      	b.n	80078ea <_printf_float+0xb6>
 8007bdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007be0:	f1ba 0f01 	cmp.w	sl, #1
 8007be4:	dc01      	bgt.n	8007bea <_printf_float+0x3b6>
 8007be6:	07db      	lsls	r3, r3, #31
 8007be8:	d536      	bpl.n	8007c58 <_printf_float+0x424>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4642      	mov	r2, r8
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	f43f ae78 	beq.w	80078ea <_printf_float+0xb6>
 8007bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f ae70 	beq.w	80078ea <_printf_float+0xb6>
 8007c0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2300      	movs	r3, #0
 8007c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c16:	f7f8 ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c1a:	b9c0      	cbnz	r0, 8007c4e <_printf_float+0x41a>
 8007c1c:	4653      	mov	r3, sl
 8007c1e:	f108 0201 	add.w	r2, r8, #1
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d10c      	bne.n	8007c46 <_printf_float+0x412>
 8007c2c:	e65d      	b.n	80078ea <_printf_float+0xb6>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	465a      	mov	r2, fp
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f ae56 	beq.w	80078ea <_printf_float+0xb6>
 8007c3e:	f108 0801 	add.w	r8, r8, #1
 8007c42:	45d0      	cmp	r8, sl
 8007c44:	dbf3      	blt.n	8007c2e <_printf_float+0x3fa>
 8007c46:	464b      	mov	r3, r9
 8007c48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c4c:	e6df      	b.n	8007a0e <_printf_float+0x1da>
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	f104 0b1a 	add.w	fp, r4, #26
 8007c56:	e7f4      	b.n	8007c42 <_printf_float+0x40e>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4642      	mov	r2, r8
 8007c5c:	e7e1      	b.n	8007c22 <_printf_float+0x3ee>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	464a      	mov	r2, r9
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	f43f ae3e 	beq.w	80078ea <_printf_float+0xb6>
 8007c6e:	f108 0801 	add.w	r8, r8, #1
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c76:	1a5b      	subs	r3, r3, r1
 8007c78:	4543      	cmp	r3, r8
 8007c7a:	dcf0      	bgt.n	8007c5e <_printf_float+0x42a>
 8007c7c:	e6fc      	b.n	8007a78 <_printf_float+0x244>
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	f104 0919 	add.w	r9, r4, #25
 8007c86:	e7f4      	b.n	8007c72 <_printf_float+0x43e>

08007c88 <_printf_common>:
 8007c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	4698      	mov	r8, r3
 8007c90:	688a      	ldr	r2, [r1, #8]
 8007c92:	690b      	ldr	r3, [r1, #16]
 8007c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	bfb8      	it	lt
 8007c9c:	4613      	movlt	r3, r2
 8007c9e:	6033      	str	r3, [r6, #0]
 8007ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	b10a      	cbz	r2, 8007cae <_printf_common+0x26>
 8007caa:	3301      	adds	r3, #1
 8007cac:	6033      	str	r3, [r6, #0]
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	0699      	lsls	r1, r3, #26
 8007cb2:	bf42      	ittt	mi
 8007cb4:	6833      	ldrmi	r3, [r6, #0]
 8007cb6:	3302      	addmi	r3, #2
 8007cb8:	6033      	strmi	r3, [r6, #0]
 8007cba:	6825      	ldr	r5, [r4, #0]
 8007cbc:	f015 0506 	ands.w	r5, r5, #6
 8007cc0:	d106      	bne.n	8007cd0 <_printf_common+0x48>
 8007cc2:	f104 0a19 	add.w	sl, r4, #25
 8007cc6:	68e3      	ldr	r3, [r4, #12]
 8007cc8:	6832      	ldr	r2, [r6, #0]
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	42ab      	cmp	r3, r5
 8007cce:	dc26      	bgt.n	8007d1e <_printf_common+0x96>
 8007cd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cd4:	6822      	ldr	r2, [r4, #0]
 8007cd6:	3b00      	subs	r3, #0
 8007cd8:	bf18      	it	ne
 8007cda:	2301      	movne	r3, #1
 8007cdc:	0692      	lsls	r2, r2, #26
 8007cde:	d42b      	bmi.n	8007d38 <_printf_common+0xb0>
 8007ce0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	47c8      	blx	r9
 8007cea:	3001      	adds	r0, #1
 8007cec:	d01e      	beq.n	8007d2c <_printf_common+0xa4>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	6922      	ldr	r2, [r4, #16]
 8007cf2:	f003 0306 	and.w	r3, r3, #6
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	bf02      	ittt	eq
 8007cfa:	68e5      	ldreq	r5, [r4, #12]
 8007cfc:	6833      	ldreq	r3, [r6, #0]
 8007cfe:	1aed      	subeq	r5, r5, r3
 8007d00:	68a3      	ldr	r3, [r4, #8]
 8007d02:	bf0c      	ite	eq
 8007d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d08:	2500      	movne	r5, #0
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	bfc4      	itt	gt
 8007d0e:	1a9b      	subgt	r3, r3, r2
 8007d10:	18ed      	addgt	r5, r5, r3
 8007d12:	2600      	movs	r6, #0
 8007d14:	341a      	adds	r4, #26
 8007d16:	42b5      	cmp	r5, r6
 8007d18:	d11a      	bne.n	8007d50 <_printf_common+0xc8>
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	e008      	b.n	8007d30 <_printf_common+0xa8>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4652      	mov	r2, sl
 8007d22:	4641      	mov	r1, r8
 8007d24:	4638      	mov	r0, r7
 8007d26:	47c8      	blx	r9
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d103      	bne.n	8007d34 <_printf_common+0xac>
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d34:	3501      	adds	r5, #1
 8007d36:	e7c6      	b.n	8007cc6 <_printf_common+0x3e>
 8007d38:	18e1      	adds	r1, r4, r3
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	2030      	movs	r0, #48	@ 0x30
 8007d3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d42:	4422      	add	r2, r4
 8007d44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d4c:	3302      	adds	r3, #2
 8007d4e:	e7c7      	b.n	8007ce0 <_printf_common+0x58>
 8007d50:	2301      	movs	r3, #1
 8007d52:	4622      	mov	r2, r4
 8007d54:	4641      	mov	r1, r8
 8007d56:	4638      	mov	r0, r7
 8007d58:	47c8      	blx	r9
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d0e6      	beq.n	8007d2c <_printf_common+0xa4>
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7d9      	b.n	8007d16 <_printf_common+0x8e>
	...

08007d64 <_printf_i>:
 8007d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d68:	7e0f      	ldrb	r7, [r1, #24]
 8007d6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d6c:	2f78      	cmp	r7, #120	@ 0x78
 8007d6e:	4691      	mov	r9, r2
 8007d70:	4680      	mov	r8, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	469a      	mov	sl, r3
 8007d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d7a:	d807      	bhi.n	8007d8c <_printf_i+0x28>
 8007d7c:	2f62      	cmp	r7, #98	@ 0x62
 8007d7e:	d80a      	bhi.n	8007d96 <_printf_i+0x32>
 8007d80:	2f00      	cmp	r7, #0
 8007d82:	f000 80d1 	beq.w	8007f28 <_printf_i+0x1c4>
 8007d86:	2f58      	cmp	r7, #88	@ 0x58
 8007d88:	f000 80b8 	beq.w	8007efc <_printf_i+0x198>
 8007d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d94:	e03a      	b.n	8007e0c <_printf_i+0xa8>
 8007d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d9a:	2b15      	cmp	r3, #21
 8007d9c:	d8f6      	bhi.n	8007d8c <_printf_i+0x28>
 8007d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8007da4 <_printf_i+0x40>)
 8007da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007da4:	08007dfd 	.word	0x08007dfd
 8007da8:	08007e11 	.word	0x08007e11
 8007dac:	08007d8d 	.word	0x08007d8d
 8007db0:	08007d8d 	.word	0x08007d8d
 8007db4:	08007d8d 	.word	0x08007d8d
 8007db8:	08007d8d 	.word	0x08007d8d
 8007dbc:	08007e11 	.word	0x08007e11
 8007dc0:	08007d8d 	.word	0x08007d8d
 8007dc4:	08007d8d 	.word	0x08007d8d
 8007dc8:	08007d8d 	.word	0x08007d8d
 8007dcc:	08007d8d 	.word	0x08007d8d
 8007dd0:	08007f0f 	.word	0x08007f0f
 8007dd4:	08007e3b 	.word	0x08007e3b
 8007dd8:	08007ec9 	.word	0x08007ec9
 8007ddc:	08007d8d 	.word	0x08007d8d
 8007de0:	08007d8d 	.word	0x08007d8d
 8007de4:	08007f31 	.word	0x08007f31
 8007de8:	08007d8d 	.word	0x08007d8d
 8007dec:	08007e3b 	.word	0x08007e3b
 8007df0:	08007d8d 	.word	0x08007d8d
 8007df4:	08007d8d 	.word	0x08007d8d
 8007df8:	08007ed1 	.word	0x08007ed1
 8007dfc:	6833      	ldr	r3, [r6, #0]
 8007dfe:	1d1a      	adds	r2, r3, #4
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6032      	str	r2, [r6, #0]
 8007e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e09c      	b.n	8007f4a <_printf_i+0x1e6>
 8007e10:	6833      	ldr	r3, [r6, #0]
 8007e12:	6820      	ldr	r0, [r4, #0]
 8007e14:	1d19      	adds	r1, r3, #4
 8007e16:	6031      	str	r1, [r6, #0]
 8007e18:	0606      	lsls	r6, r0, #24
 8007e1a:	d501      	bpl.n	8007e20 <_printf_i+0xbc>
 8007e1c:	681d      	ldr	r5, [r3, #0]
 8007e1e:	e003      	b.n	8007e28 <_printf_i+0xc4>
 8007e20:	0645      	lsls	r5, r0, #25
 8007e22:	d5fb      	bpl.n	8007e1c <_printf_i+0xb8>
 8007e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e28:	2d00      	cmp	r5, #0
 8007e2a:	da03      	bge.n	8007e34 <_printf_i+0xd0>
 8007e2c:	232d      	movs	r3, #45	@ 0x2d
 8007e2e:	426d      	negs	r5, r5
 8007e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e34:	4858      	ldr	r0, [pc, #352]	@ (8007f98 <_printf_i+0x234>)
 8007e36:	230a      	movs	r3, #10
 8007e38:	e011      	b.n	8007e5e <_printf_i+0xfa>
 8007e3a:	6821      	ldr	r1, [r4, #0]
 8007e3c:	6833      	ldr	r3, [r6, #0]
 8007e3e:	0608      	lsls	r0, r1, #24
 8007e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e44:	d402      	bmi.n	8007e4c <_printf_i+0xe8>
 8007e46:	0649      	lsls	r1, r1, #25
 8007e48:	bf48      	it	mi
 8007e4a:	b2ad      	uxthmi	r5, r5
 8007e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e4e:	4852      	ldr	r0, [pc, #328]	@ (8007f98 <_printf_i+0x234>)
 8007e50:	6033      	str	r3, [r6, #0]
 8007e52:	bf14      	ite	ne
 8007e54:	230a      	movne	r3, #10
 8007e56:	2308      	moveq	r3, #8
 8007e58:	2100      	movs	r1, #0
 8007e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e5e:	6866      	ldr	r6, [r4, #4]
 8007e60:	60a6      	str	r6, [r4, #8]
 8007e62:	2e00      	cmp	r6, #0
 8007e64:	db05      	blt.n	8007e72 <_printf_i+0x10e>
 8007e66:	6821      	ldr	r1, [r4, #0]
 8007e68:	432e      	orrs	r6, r5
 8007e6a:	f021 0104 	bic.w	r1, r1, #4
 8007e6e:	6021      	str	r1, [r4, #0]
 8007e70:	d04b      	beq.n	8007f0a <_printf_i+0x1a6>
 8007e72:	4616      	mov	r6, r2
 8007e74:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e78:	fb03 5711 	mls	r7, r3, r1, r5
 8007e7c:	5dc7      	ldrb	r7, [r0, r7]
 8007e7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e82:	462f      	mov	r7, r5
 8007e84:	42bb      	cmp	r3, r7
 8007e86:	460d      	mov	r5, r1
 8007e88:	d9f4      	bls.n	8007e74 <_printf_i+0x110>
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	d10b      	bne.n	8007ea6 <_printf_i+0x142>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	07df      	lsls	r7, r3, #31
 8007e92:	d508      	bpl.n	8007ea6 <_printf_i+0x142>
 8007e94:	6923      	ldr	r3, [r4, #16]
 8007e96:	6861      	ldr	r1, [r4, #4]
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	bfde      	ittt	le
 8007e9c:	2330      	movle	r3, #48	@ 0x30
 8007e9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ea2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ea6:	1b92      	subs	r2, r2, r6
 8007ea8:	6122      	str	r2, [r4, #16]
 8007eaa:	f8cd a000 	str.w	sl, [sp]
 8007eae:	464b      	mov	r3, r9
 8007eb0:	aa03      	add	r2, sp, #12
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	f7ff fee7 	bl	8007c88 <_printf_common>
 8007eba:	3001      	adds	r0, #1
 8007ebc:	d14a      	bne.n	8007f54 <_printf_i+0x1f0>
 8007ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec2:	b004      	add	sp, #16
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	f043 0320 	orr.w	r3, r3, #32
 8007ece:	6023      	str	r3, [r4, #0]
 8007ed0:	4832      	ldr	r0, [pc, #200]	@ (8007f9c <_printf_i+0x238>)
 8007ed2:	2778      	movs	r7, #120	@ 0x78
 8007ed4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	6831      	ldr	r1, [r6, #0]
 8007edc:	061f      	lsls	r7, r3, #24
 8007ede:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ee2:	d402      	bmi.n	8007eea <_printf_i+0x186>
 8007ee4:	065f      	lsls	r7, r3, #25
 8007ee6:	bf48      	it	mi
 8007ee8:	b2ad      	uxthmi	r5, r5
 8007eea:	6031      	str	r1, [r6, #0]
 8007eec:	07d9      	lsls	r1, r3, #31
 8007eee:	bf44      	itt	mi
 8007ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ef4:	6023      	strmi	r3, [r4, #0]
 8007ef6:	b11d      	cbz	r5, 8007f00 <_printf_i+0x19c>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	e7ad      	b.n	8007e58 <_printf_i+0xf4>
 8007efc:	4826      	ldr	r0, [pc, #152]	@ (8007f98 <_printf_i+0x234>)
 8007efe:	e7e9      	b.n	8007ed4 <_printf_i+0x170>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	f023 0320 	bic.w	r3, r3, #32
 8007f06:	6023      	str	r3, [r4, #0]
 8007f08:	e7f6      	b.n	8007ef8 <_printf_i+0x194>
 8007f0a:	4616      	mov	r6, r2
 8007f0c:	e7bd      	b.n	8007e8a <_printf_i+0x126>
 8007f0e:	6833      	ldr	r3, [r6, #0]
 8007f10:	6825      	ldr	r5, [r4, #0]
 8007f12:	6961      	ldr	r1, [r4, #20]
 8007f14:	1d18      	adds	r0, r3, #4
 8007f16:	6030      	str	r0, [r6, #0]
 8007f18:	062e      	lsls	r6, r5, #24
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	d501      	bpl.n	8007f22 <_printf_i+0x1be>
 8007f1e:	6019      	str	r1, [r3, #0]
 8007f20:	e002      	b.n	8007f28 <_printf_i+0x1c4>
 8007f22:	0668      	lsls	r0, r5, #25
 8007f24:	d5fb      	bpl.n	8007f1e <_printf_i+0x1ba>
 8007f26:	8019      	strh	r1, [r3, #0]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	4616      	mov	r6, r2
 8007f2e:	e7bc      	b.n	8007eaa <_printf_i+0x146>
 8007f30:	6833      	ldr	r3, [r6, #0]
 8007f32:	1d1a      	adds	r2, r3, #4
 8007f34:	6032      	str	r2, [r6, #0]
 8007f36:	681e      	ldr	r6, [r3, #0]
 8007f38:	6862      	ldr	r2, [r4, #4]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7f8 f947 	bl	80001d0 <memchr>
 8007f42:	b108      	cbz	r0, 8007f48 <_printf_i+0x1e4>
 8007f44:	1b80      	subs	r0, r0, r6
 8007f46:	6060      	str	r0, [r4, #4]
 8007f48:	6863      	ldr	r3, [r4, #4]
 8007f4a:	6123      	str	r3, [r4, #16]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f52:	e7aa      	b.n	8007eaa <_printf_i+0x146>
 8007f54:	6923      	ldr	r3, [r4, #16]
 8007f56:	4632      	mov	r2, r6
 8007f58:	4649      	mov	r1, r9
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	47d0      	blx	sl
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d0ad      	beq.n	8007ebe <_printf_i+0x15a>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	079b      	lsls	r3, r3, #30
 8007f66:	d413      	bmi.n	8007f90 <_printf_i+0x22c>
 8007f68:	68e0      	ldr	r0, [r4, #12]
 8007f6a:	9b03      	ldr	r3, [sp, #12]
 8007f6c:	4298      	cmp	r0, r3
 8007f6e:	bfb8      	it	lt
 8007f70:	4618      	movlt	r0, r3
 8007f72:	e7a6      	b.n	8007ec2 <_printf_i+0x15e>
 8007f74:	2301      	movs	r3, #1
 8007f76:	4632      	mov	r2, r6
 8007f78:	4649      	mov	r1, r9
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	47d0      	blx	sl
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d09d      	beq.n	8007ebe <_printf_i+0x15a>
 8007f82:	3501      	adds	r5, #1
 8007f84:	68e3      	ldr	r3, [r4, #12]
 8007f86:	9903      	ldr	r1, [sp, #12]
 8007f88:	1a5b      	subs	r3, r3, r1
 8007f8a:	42ab      	cmp	r3, r5
 8007f8c:	dcf2      	bgt.n	8007f74 <_printf_i+0x210>
 8007f8e:	e7eb      	b.n	8007f68 <_printf_i+0x204>
 8007f90:	2500      	movs	r5, #0
 8007f92:	f104 0619 	add.w	r6, r4, #25
 8007f96:	e7f5      	b.n	8007f84 <_printf_i+0x220>
 8007f98:	0800be27 	.word	0x0800be27
 8007f9c:	0800be38 	.word	0x0800be38

08007fa0 <_scanf_float>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	b087      	sub	sp, #28
 8007fa6:	4691      	mov	r9, r2
 8007fa8:	9303      	str	r3, [sp, #12]
 8007faa:	688b      	ldr	r3, [r1, #8]
 8007fac:	1e5a      	subs	r2, r3, #1
 8007fae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007fb2:	bf81      	itttt	hi
 8007fb4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007fb8:	eb03 0b05 	addhi.w	fp, r3, r5
 8007fbc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007fc0:	608b      	strhi	r3, [r1, #8]
 8007fc2:	680b      	ldr	r3, [r1, #0]
 8007fc4:	460a      	mov	r2, r1
 8007fc6:	f04f 0500 	mov.w	r5, #0
 8007fca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007fce:	f842 3b1c 	str.w	r3, [r2], #28
 8007fd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fd6:	4680      	mov	r8, r0
 8007fd8:	460c      	mov	r4, r1
 8007fda:	bf98      	it	ls
 8007fdc:	f04f 0b00 	movls.w	fp, #0
 8007fe0:	9201      	str	r2, [sp, #4]
 8007fe2:	4616      	mov	r6, r2
 8007fe4:	46aa      	mov	sl, r5
 8007fe6:	462f      	mov	r7, r5
 8007fe8:	9502      	str	r5, [sp, #8]
 8007fea:	68a2      	ldr	r2, [r4, #8]
 8007fec:	b15a      	cbz	r2, 8008006 <_scanf_float+0x66>
 8007fee:	f8d9 3000 	ldr.w	r3, [r9]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b4e      	cmp	r3, #78	@ 0x4e
 8007ff6:	d863      	bhi.n	80080c0 <_scanf_float+0x120>
 8007ff8:	2b40      	cmp	r3, #64	@ 0x40
 8007ffa:	d83b      	bhi.n	8008074 <_scanf_float+0xd4>
 8007ffc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008000:	b2c8      	uxtb	r0, r1
 8008002:	280e      	cmp	r0, #14
 8008004:	d939      	bls.n	800807a <_scanf_float+0xda>
 8008006:	b11f      	cbz	r7, 8008010 <_scanf_float+0x70>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008014:	f1ba 0f01 	cmp.w	sl, #1
 8008018:	f200 8114 	bhi.w	8008244 <_scanf_float+0x2a4>
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	429e      	cmp	r6, r3
 8008020:	f200 8105 	bhi.w	800822e <_scanf_float+0x28e>
 8008024:	2001      	movs	r0, #1
 8008026:	b007      	add	sp, #28
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008030:	2a0d      	cmp	r2, #13
 8008032:	d8e8      	bhi.n	8008006 <_scanf_float+0x66>
 8008034:	a101      	add	r1, pc, #4	@ (adr r1, 800803c <_scanf_float+0x9c>)
 8008036:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800803a:	bf00      	nop
 800803c:	08008185 	.word	0x08008185
 8008040:	08008007 	.word	0x08008007
 8008044:	08008007 	.word	0x08008007
 8008048:	08008007 	.word	0x08008007
 800804c:	080081e1 	.word	0x080081e1
 8008050:	080081bb 	.word	0x080081bb
 8008054:	08008007 	.word	0x08008007
 8008058:	08008007 	.word	0x08008007
 800805c:	08008193 	.word	0x08008193
 8008060:	08008007 	.word	0x08008007
 8008064:	08008007 	.word	0x08008007
 8008068:	08008007 	.word	0x08008007
 800806c:	08008007 	.word	0x08008007
 8008070:	0800814f 	.word	0x0800814f
 8008074:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008078:	e7da      	b.n	8008030 <_scanf_float+0x90>
 800807a:	290e      	cmp	r1, #14
 800807c:	d8c3      	bhi.n	8008006 <_scanf_float+0x66>
 800807e:	a001      	add	r0, pc, #4	@ (adr r0, 8008084 <_scanf_float+0xe4>)
 8008080:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008084:	0800813f 	.word	0x0800813f
 8008088:	08008007 	.word	0x08008007
 800808c:	0800813f 	.word	0x0800813f
 8008090:	080081cf 	.word	0x080081cf
 8008094:	08008007 	.word	0x08008007
 8008098:	080080e1 	.word	0x080080e1
 800809c:	08008125 	.word	0x08008125
 80080a0:	08008125 	.word	0x08008125
 80080a4:	08008125 	.word	0x08008125
 80080a8:	08008125 	.word	0x08008125
 80080ac:	08008125 	.word	0x08008125
 80080b0:	08008125 	.word	0x08008125
 80080b4:	08008125 	.word	0x08008125
 80080b8:	08008125 	.word	0x08008125
 80080bc:	08008125 	.word	0x08008125
 80080c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80080c2:	d809      	bhi.n	80080d8 <_scanf_float+0x138>
 80080c4:	2b60      	cmp	r3, #96	@ 0x60
 80080c6:	d8b1      	bhi.n	800802c <_scanf_float+0x8c>
 80080c8:	2b54      	cmp	r3, #84	@ 0x54
 80080ca:	d07b      	beq.n	80081c4 <_scanf_float+0x224>
 80080cc:	2b59      	cmp	r3, #89	@ 0x59
 80080ce:	d19a      	bne.n	8008006 <_scanf_float+0x66>
 80080d0:	2d07      	cmp	r5, #7
 80080d2:	d198      	bne.n	8008006 <_scanf_float+0x66>
 80080d4:	2508      	movs	r5, #8
 80080d6:	e02f      	b.n	8008138 <_scanf_float+0x198>
 80080d8:	2b74      	cmp	r3, #116	@ 0x74
 80080da:	d073      	beq.n	80081c4 <_scanf_float+0x224>
 80080dc:	2b79      	cmp	r3, #121	@ 0x79
 80080de:	e7f6      	b.n	80080ce <_scanf_float+0x12e>
 80080e0:	6821      	ldr	r1, [r4, #0]
 80080e2:	05c8      	lsls	r0, r1, #23
 80080e4:	d51e      	bpl.n	8008124 <_scanf_float+0x184>
 80080e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80080ea:	6021      	str	r1, [r4, #0]
 80080ec:	3701      	adds	r7, #1
 80080ee:	f1bb 0f00 	cmp.w	fp, #0
 80080f2:	d003      	beq.n	80080fc <_scanf_float+0x15c>
 80080f4:	3201      	adds	r2, #1
 80080f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080fa:	60a2      	str	r2, [r4, #8]
 80080fc:	68a3      	ldr	r3, [r4, #8]
 80080fe:	3b01      	subs	r3, #1
 8008100:	60a3      	str	r3, [r4, #8]
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	3301      	adds	r3, #1
 8008106:	6123      	str	r3, [r4, #16]
 8008108:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800810c:	3b01      	subs	r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	f8c9 3004 	str.w	r3, [r9, #4]
 8008114:	f340 8082 	ble.w	800821c <_scanf_float+0x27c>
 8008118:	f8d9 3000 	ldr.w	r3, [r9]
 800811c:	3301      	adds	r3, #1
 800811e:	f8c9 3000 	str.w	r3, [r9]
 8008122:	e762      	b.n	8007fea <_scanf_float+0x4a>
 8008124:	eb1a 0105 	adds.w	r1, sl, r5
 8008128:	f47f af6d 	bne.w	8008006 <_scanf_float+0x66>
 800812c:	6822      	ldr	r2, [r4, #0]
 800812e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008132:	6022      	str	r2, [r4, #0]
 8008134:	460d      	mov	r5, r1
 8008136:	468a      	mov	sl, r1
 8008138:	f806 3b01 	strb.w	r3, [r6], #1
 800813c:	e7de      	b.n	80080fc <_scanf_float+0x15c>
 800813e:	6822      	ldr	r2, [r4, #0]
 8008140:	0610      	lsls	r0, r2, #24
 8008142:	f57f af60 	bpl.w	8008006 <_scanf_float+0x66>
 8008146:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800814a:	6022      	str	r2, [r4, #0]
 800814c:	e7f4      	b.n	8008138 <_scanf_float+0x198>
 800814e:	f1ba 0f00 	cmp.w	sl, #0
 8008152:	d10c      	bne.n	800816e <_scanf_float+0x1ce>
 8008154:	b977      	cbnz	r7, 8008174 <_scanf_float+0x1d4>
 8008156:	6822      	ldr	r2, [r4, #0]
 8008158:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800815c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008160:	d108      	bne.n	8008174 <_scanf_float+0x1d4>
 8008162:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008166:	6022      	str	r2, [r4, #0]
 8008168:	f04f 0a01 	mov.w	sl, #1
 800816c:	e7e4      	b.n	8008138 <_scanf_float+0x198>
 800816e:	f1ba 0f02 	cmp.w	sl, #2
 8008172:	d050      	beq.n	8008216 <_scanf_float+0x276>
 8008174:	2d01      	cmp	r5, #1
 8008176:	d002      	beq.n	800817e <_scanf_float+0x1de>
 8008178:	2d04      	cmp	r5, #4
 800817a:	f47f af44 	bne.w	8008006 <_scanf_float+0x66>
 800817e:	3501      	adds	r5, #1
 8008180:	b2ed      	uxtb	r5, r5
 8008182:	e7d9      	b.n	8008138 <_scanf_float+0x198>
 8008184:	f1ba 0f01 	cmp.w	sl, #1
 8008188:	f47f af3d 	bne.w	8008006 <_scanf_float+0x66>
 800818c:	f04f 0a02 	mov.w	sl, #2
 8008190:	e7d2      	b.n	8008138 <_scanf_float+0x198>
 8008192:	b975      	cbnz	r5, 80081b2 <_scanf_float+0x212>
 8008194:	2f00      	cmp	r7, #0
 8008196:	f47f af37 	bne.w	8008008 <_scanf_float+0x68>
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80081a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081a4:	f040 8103 	bne.w	80083ae <_scanf_float+0x40e>
 80081a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081ac:	6022      	str	r2, [r4, #0]
 80081ae:	2501      	movs	r5, #1
 80081b0:	e7c2      	b.n	8008138 <_scanf_float+0x198>
 80081b2:	2d03      	cmp	r5, #3
 80081b4:	d0e3      	beq.n	800817e <_scanf_float+0x1de>
 80081b6:	2d05      	cmp	r5, #5
 80081b8:	e7df      	b.n	800817a <_scanf_float+0x1da>
 80081ba:	2d02      	cmp	r5, #2
 80081bc:	f47f af23 	bne.w	8008006 <_scanf_float+0x66>
 80081c0:	2503      	movs	r5, #3
 80081c2:	e7b9      	b.n	8008138 <_scanf_float+0x198>
 80081c4:	2d06      	cmp	r5, #6
 80081c6:	f47f af1e 	bne.w	8008006 <_scanf_float+0x66>
 80081ca:	2507      	movs	r5, #7
 80081cc:	e7b4      	b.n	8008138 <_scanf_float+0x198>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	0591      	lsls	r1, r2, #22
 80081d2:	f57f af18 	bpl.w	8008006 <_scanf_float+0x66>
 80081d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80081da:	6022      	str	r2, [r4, #0]
 80081dc:	9702      	str	r7, [sp, #8]
 80081de:	e7ab      	b.n	8008138 <_scanf_float+0x198>
 80081e0:	6822      	ldr	r2, [r4, #0]
 80081e2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80081e6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80081ea:	d005      	beq.n	80081f8 <_scanf_float+0x258>
 80081ec:	0550      	lsls	r0, r2, #21
 80081ee:	f57f af0a 	bpl.w	8008006 <_scanf_float+0x66>
 80081f2:	2f00      	cmp	r7, #0
 80081f4:	f000 80db 	beq.w	80083ae <_scanf_float+0x40e>
 80081f8:	0591      	lsls	r1, r2, #22
 80081fa:	bf58      	it	pl
 80081fc:	9902      	ldrpl	r1, [sp, #8]
 80081fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008202:	bf58      	it	pl
 8008204:	1a79      	subpl	r1, r7, r1
 8008206:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800820a:	bf58      	it	pl
 800820c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008210:	6022      	str	r2, [r4, #0]
 8008212:	2700      	movs	r7, #0
 8008214:	e790      	b.n	8008138 <_scanf_float+0x198>
 8008216:	f04f 0a03 	mov.w	sl, #3
 800821a:	e78d      	b.n	8008138 <_scanf_float+0x198>
 800821c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008220:	4649      	mov	r1, r9
 8008222:	4640      	mov	r0, r8
 8008224:	4798      	blx	r3
 8008226:	2800      	cmp	r0, #0
 8008228:	f43f aedf 	beq.w	8007fea <_scanf_float+0x4a>
 800822c:	e6eb      	b.n	8008006 <_scanf_float+0x66>
 800822e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008232:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008236:	464a      	mov	r2, r9
 8008238:	4640      	mov	r0, r8
 800823a:	4798      	blx	r3
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	3b01      	subs	r3, #1
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	e6eb      	b.n	800801c <_scanf_float+0x7c>
 8008244:	1e6b      	subs	r3, r5, #1
 8008246:	2b06      	cmp	r3, #6
 8008248:	d824      	bhi.n	8008294 <_scanf_float+0x2f4>
 800824a:	2d02      	cmp	r5, #2
 800824c:	d836      	bhi.n	80082bc <_scanf_float+0x31c>
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	429e      	cmp	r6, r3
 8008252:	f67f aee7 	bls.w	8008024 <_scanf_float+0x84>
 8008256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800825a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800825e:	464a      	mov	r2, r9
 8008260:	4640      	mov	r0, r8
 8008262:	4798      	blx	r3
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	3b01      	subs	r3, #1
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	e7f0      	b.n	800824e <_scanf_float+0x2ae>
 800826c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008270:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008274:	464a      	mov	r2, r9
 8008276:	4640      	mov	r0, r8
 8008278:	4798      	blx	r3
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	3b01      	subs	r3, #1
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008284:	fa5f fa8a 	uxtb.w	sl, sl
 8008288:	f1ba 0f02 	cmp.w	sl, #2
 800828c:	d1ee      	bne.n	800826c <_scanf_float+0x2cc>
 800828e:	3d03      	subs	r5, #3
 8008290:	b2ed      	uxtb	r5, r5
 8008292:	1b76      	subs	r6, r6, r5
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	05da      	lsls	r2, r3, #23
 8008298:	d530      	bpl.n	80082fc <_scanf_float+0x35c>
 800829a:	055b      	lsls	r3, r3, #21
 800829c:	d511      	bpl.n	80082c2 <_scanf_float+0x322>
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	429e      	cmp	r6, r3
 80082a2:	f67f aebf 	bls.w	8008024 <_scanf_float+0x84>
 80082a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082ae:	464a      	mov	r2, r9
 80082b0:	4640      	mov	r0, r8
 80082b2:	4798      	blx	r3
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	6123      	str	r3, [r4, #16]
 80082ba:	e7f0      	b.n	800829e <_scanf_float+0x2fe>
 80082bc:	46aa      	mov	sl, r5
 80082be:	46b3      	mov	fp, r6
 80082c0:	e7de      	b.n	8008280 <_scanf_float+0x2e0>
 80082c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	2965      	cmp	r1, #101	@ 0x65
 80082ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80082ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	d00c      	beq.n	80082f0 <_scanf_float+0x350>
 80082d6:	2945      	cmp	r1, #69	@ 0x45
 80082d8:	d00a      	beq.n	80082f0 <_scanf_float+0x350>
 80082da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082de:	464a      	mov	r2, r9
 80082e0:	4640      	mov	r0, r8
 80082e2:	4798      	blx	r3
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	1eb5      	subs	r5, r6, #2
 80082ee:	6123      	str	r3, [r4, #16]
 80082f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082f4:	464a      	mov	r2, r9
 80082f6:	4640      	mov	r0, r8
 80082f8:	4798      	blx	r3
 80082fa:	462e      	mov	r6, r5
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	f012 0210 	ands.w	r2, r2, #16
 8008302:	d001      	beq.n	8008308 <_scanf_float+0x368>
 8008304:	2000      	movs	r0, #0
 8008306:	e68e      	b.n	8008026 <_scanf_float+0x86>
 8008308:	7032      	strb	r2, [r6, #0]
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008314:	d125      	bne.n	8008362 <_scanf_float+0x3c2>
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	429f      	cmp	r7, r3
 800831a:	d00a      	beq.n	8008332 <_scanf_float+0x392>
 800831c:	1bda      	subs	r2, r3, r7
 800831e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008322:	429e      	cmp	r6, r3
 8008324:	bf28      	it	cs
 8008326:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800832a:	4922      	ldr	r1, [pc, #136]	@ (80083b4 <_scanf_float+0x414>)
 800832c:	4630      	mov	r0, r6
 800832e:	f000 f965 	bl	80085fc <siprintf>
 8008332:	9901      	ldr	r1, [sp, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	4640      	mov	r0, r8
 8008338:	f002 fc62 	bl	800ac00 <_strtod_r>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	6821      	ldr	r1, [r4, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f011 0f02 	tst.w	r1, #2
 8008346:	ec57 6b10 	vmov	r6, r7, d0
 800834a:	f103 0204 	add.w	r2, r3, #4
 800834e:	d015      	beq.n	800837c <_scanf_float+0x3dc>
 8008350:	9903      	ldr	r1, [sp, #12]
 8008352:	600a      	str	r2, [r1, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	e9c3 6700 	strd	r6, r7, [r3]
 800835a:	68e3      	ldr	r3, [r4, #12]
 800835c:	3301      	adds	r3, #1
 800835e:	60e3      	str	r3, [r4, #12]
 8008360:	e7d0      	b.n	8008304 <_scanf_float+0x364>
 8008362:	9b04      	ldr	r3, [sp, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0e4      	beq.n	8008332 <_scanf_float+0x392>
 8008368:	9905      	ldr	r1, [sp, #20]
 800836a:	230a      	movs	r3, #10
 800836c:	3101      	adds	r1, #1
 800836e:	4640      	mov	r0, r8
 8008370:	f7ff f9be 	bl	80076f0 <_strtol_r>
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	9e05      	ldr	r6, [sp, #20]
 8008378:	1ac2      	subs	r2, r0, r3
 800837a:	e7d0      	b.n	800831e <_scanf_float+0x37e>
 800837c:	f011 0f04 	tst.w	r1, #4
 8008380:	9903      	ldr	r1, [sp, #12]
 8008382:	600a      	str	r2, [r1, #0]
 8008384:	d1e6      	bne.n	8008354 <_scanf_float+0x3b4>
 8008386:	681d      	ldr	r5, [r3, #0]
 8008388:	4632      	mov	r2, r6
 800838a:	463b      	mov	r3, r7
 800838c:	4630      	mov	r0, r6
 800838e:	4639      	mov	r1, r7
 8008390:	f7f8 fbcc 	bl	8000b2c <__aeabi_dcmpun>
 8008394:	b128      	cbz	r0, 80083a2 <_scanf_float+0x402>
 8008396:	4808      	ldr	r0, [pc, #32]	@ (80083b8 <_scanf_float+0x418>)
 8008398:	f000 fada 	bl	8008950 <nanf>
 800839c:	ed85 0a00 	vstr	s0, [r5]
 80083a0:	e7db      	b.n	800835a <_scanf_float+0x3ba>
 80083a2:	4630      	mov	r0, r6
 80083a4:	4639      	mov	r1, r7
 80083a6:	f7f8 fc1f 	bl	8000be8 <__aeabi_d2f>
 80083aa:	6028      	str	r0, [r5, #0]
 80083ac:	e7d5      	b.n	800835a <_scanf_float+0x3ba>
 80083ae:	2700      	movs	r7, #0
 80083b0:	e62e      	b.n	8008010 <_scanf_float+0x70>
 80083b2:	bf00      	nop
 80083b4:	0800be49 	.word	0x0800be49
 80083b8:	0800bf8a 	.word	0x0800bf8a

080083bc <std>:
 80083bc:	2300      	movs	r3, #0
 80083be:	b510      	push	{r4, lr}
 80083c0:	4604      	mov	r4, r0
 80083c2:	e9c0 3300 	strd	r3, r3, [r0]
 80083c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ca:	6083      	str	r3, [r0, #8]
 80083cc:	8181      	strh	r1, [r0, #12]
 80083ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80083d0:	81c2      	strh	r2, [r0, #14]
 80083d2:	6183      	str	r3, [r0, #24]
 80083d4:	4619      	mov	r1, r3
 80083d6:	2208      	movs	r2, #8
 80083d8:	305c      	adds	r0, #92	@ 0x5c
 80083da:	f000 fa09 	bl	80087f0 <memset>
 80083de:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <std+0x58>)
 80083e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80083e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008418 <std+0x5c>)
 80083e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083e6:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <std+0x60>)
 80083e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008420 <std+0x64>)
 80083ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80083ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <std+0x68>)
 80083f0:	6224      	str	r4, [r4, #32]
 80083f2:	429c      	cmp	r4, r3
 80083f4:	d006      	beq.n	8008404 <std+0x48>
 80083f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083fa:	4294      	cmp	r4, r2
 80083fc:	d002      	beq.n	8008404 <std+0x48>
 80083fe:	33d0      	adds	r3, #208	@ 0xd0
 8008400:	429c      	cmp	r4, r3
 8008402:	d105      	bne.n	8008410 <std+0x54>
 8008404:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800840c:	f000 ba8e 	b.w	800892c <__retarget_lock_init_recursive>
 8008410:	bd10      	pop	{r4, pc}
 8008412:	bf00      	nop
 8008414:	08008641 	.word	0x08008641
 8008418:	08008663 	.word	0x08008663
 800841c:	0800869b 	.word	0x0800869b
 8008420:	080086bf 	.word	0x080086bf
 8008424:	2000077c 	.word	0x2000077c

08008428 <stdio_exit_handler>:
 8008428:	4a02      	ldr	r2, [pc, #8]	@ (8008434 <stdio_exit_handler+0xc>)
 800842a:	4903      	ldr	r1, [pc, #12]	@ (8008438 <stdio_exit_handler+0x10>)
 800842c:	4803      	ldr	r0, [pc, #12]	@ (800843c <stdio_exit_handler+0x14>)
 800842e:	f000 b869 	b.w	8008504 <_fwalk_sglue>
 8008432:	bf00      	nop
 8008434:	20000040 	.word	0x20000040
 8008438:	0800afc5 	.word	0x0800afc5
 800843c:	20000050 	.word	0x20000050

08008440 <cleanup_stdio>:
 8008440:	6841      	ldr	r1, [r0, #4]
 8008442:	4b0c      	ldr	r3, [pc, #48]	@ (8008474 <cleanup_stdio+0x34>)
 8008444:	4299      	cmp	r1, r3
 8008446:	b510      	push	{r4, lr}
 8008448:	4604      	mov	r4, r0
 800844a:	d001      	beq.n	8008450 <cleanup_stdio+0x10>
 800844c:	f002 fdba 	bl	800afc4 <_fflush_r>
 8008450:	68a1      	ldr	r1, [r4, #8]
 8008452:	4b09      	ldr	r3, [pc, #36]	@ (8008478 <cleanup_stdio+0x38>)
 8008454:	4299      	cmp	r1, r3
 8008456:	d002      	beq.n	800845e <cleanup_stdio+0x1e>
 8008458:	4620      	mov	r0, r4
 800845a:	f002 fdb3 	bl	800afc4 <_fflush_r>
 800845e:	68e1      	ldr	r1, [r4, #12]
 8008460:	4b06      	ldr	r3, [pc, #24]	@ (800847c <cleanup_stdio+0x3c>)
 8008462:	4299      	cmp	r1, r3
 8008464:	d004      	beq.n	8008470 <cleanup_stdio+0x30>
 8008466:	4620      	mov	r0, r4
 8008468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846c:	f002 bdaa 	b.w	800afc4 <_fflush_r>
 8008470:	bd10      	pop	{r4, pc}
 8008472:	bf00      	nop
 8008474:	2000077c 	.word	0x2000077c
 8008478:	200007e4 	.word	0x200007e4
 800847c:	2000084c 	.word	0x2000084c

08008480 <global_stdio_init.part.0>:
 8008480:	b510      	push	{r4, lr}
 8008482:	4b0b      	ldr	r3, [pc, #44]	@ (80084b0 <global_stdio_init.part.0+0x30>)
 8008484:	4c0b      	ldr	r4, [pc, #44]	@ (80084b4 <global_stdio_init.part.0+0x34>)
 8008486:	4a0c      	ldr	r2, [pc, #48]	@ (80084b8 <global_stdio_init.part.0+0x38>)
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	4620      	mov	r0, r4
 800848c:	2200      	movs	r2, #0
 800848e:	2104      	movs	r1, #4
 8008490:	f7ff ff94 	bl	80083bc <std>
 8008494:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008498:	2201      	movs	r2, #1
 800849a:	2109      	movs	r1, #9
 800849c:	f7ff ff8e 	bl	80083bc <std>
 80084a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084a4:	2202      	movs	r2, #2
 80084a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084aa:	2112      	movs	r1, #18
 80084ac:	f7ff bf86 	b.w	80083bc <std>
 80084b0:	200008b4 	.word	0x200008b4
 80084b4:	2000077c 	.word	0x2000077c
 80084b8:	08008429 	.word	0x08008429

080084bc <__sfp_lock_acquire>:
 80084bc:	4801      	ldr	r0, [pc, #4]	@ (80084c4 <__sfp_lock_acquire+0x8>)
 80084be:	f000 ba36 	b.w	800892e <__retarget_lock_acquire_recursive>
 80084c2:	bf00      	nop
 80084c4:	200008bd 	.word	0x200008bd

080084c8 <__sfp_lock_release>:
 80084c8:	4801      	ldr	r0, [pc, #4]	@ (80084d0 <__sfp_lock_release+0x8>)
 80084ca:	f000 ba31 	b.w	8008930 <__retarget_lock_release_recursive>
 80084ce:	bf00      	nop
 80084d0:	200008bd 	.word	0x200008bd

080084d4 <__sinit>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	4604      	mov	r4, r0
 80084d8:	f7ff fff0 	bl	80084bc <__sfp_lock_acquire>
 80084dc:	6a23      	ldr	r3, [r4, #32]
 80084de:	b11b      	cbz	r3, 80084e8 <__sinit+0x14>
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e4:	f7ff bff0 	b.w	80084c8 <__sfp_lock_release>
 80084e8:	4b04      	ldr	r3, [pc, #16]	@ (80084fc <__sinit+0x28>)
 80084ea:	6223      	str	r3, [r4, #32]
 80084ec:	4b04      	ldr	r3, [pc, #16]	@ (8008500 <__sinit+0x2c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1f5      	bne.n	80084e0 <__sinit+0xc>
 80084f4:	f7ff ffc4 	bl	8008480 <global_stdio_init.part.0>
 80084f8:	e7f2      	b.n	80084e0 <__sinit+0xc>
 80084fa:	bf00      	nop
 80084fc:	08008441 	.word	0x08008441
 8008500:	200008b4 	.word	0x200008b4

08008504 <_fwalk_sglue>:
 8008504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008508:	4607      	mov	r7, r0
 800850a:	4688      	mov	r8, r1
 800850c:	4614      	mov	r4, r2
 800850e:	2600      	movs	r6, #0
 8008510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008514:	f1b9 0901 	subs.w	r9, r9, #1
 8008518:	d505      	bpl.n	8008526 <_fwalk_sglue+0x22>
 800851a:	6824      	ldr	r4, [r4, #0]
 800851c:	2c00      	cmp	r4, #0
 800851e:	d1f7      	bne.n	8008510 <_fwalk_sglue+0xc>
 8008520:	4630      	mov	r0, r6
 8008522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d907      	bls.n	800853c <_fwalk_sglue+0x38>
 800852c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008530:	3301      	adds	r3, #1
 8008532:	d003      	beq.n	800853c <_fwalk_sglue+0x38>
 8008534:	4629      	mov	r1, r5
 8008536:	4638      	mov	r0, r7
 8008538:	47c0      	blx	r8
 800853a:	4306      	orrs	r6, r0
 800853c:	3568      	adds	r5, #104	@ 0x68
 800853e:	e7e9      	b.n	8008514 <_fwalk_sglue+0x10>

08008540 <_puts_r>:
 8008540:	6a03      	ldr	r3, [r0, #32]
 8008542:	b570      	push	{r4, r5, r6, lr}
 8008544:	6884      	ldr	r4, [r0, #8]
 8008546:	4605      	mov	r5, r0
 8008548:	460e      	mov	r6, r1
 800854a:	b90b      	cbnz	r3, 8008550 <_puts_r+0x10>
 800854c:	f7ff ffc2 	bl	80084d4 <__sinit>
 8008550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008552:	07db      	lsls	r3, r3, #31
 8008554:	d405      	bmi.n	8008562 <_puts_r+0x22>
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	0598      	lsls	r0, r3, #22
 800855a:	d402      	bmi.n	8008562 <_puts_r+0x22>
 800855c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800855e:	f000 f9e6 	bl	800892e <__retarget_lock_acquire_recursive>
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	0719      	lsls	r1, r3, #28
 8008566:	d502      	bpl.n	800856e <_puts_r+0x2e>
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d135      	bne.n	80085da <_puts_r+0x9a>
 800856e:	4621      	mov	r1, r4
 8008570:	4628      	mov	r0, r5
 8008572:	f000 f8e7 	bl	8008744 <__swsetup_r>
 8008576:	b380      	cbz	r0, 80085da <_puts_r+0x9a>
 8008578:	f04f 35ff 	mov.w	r5, #4294967295
 800857c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800857e:	07da      	lsls	r2, r3, #31
 8008580:	d405      	bmi.n	800858e <_puts_r+0x4e>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	059b      	lsls	r3, r3, #22
 8008586:	d402      	bmi.n	800858e <_puts_r+0x4e>
 8008588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800858a:	f000 f9d1 	bl	8008930 <__retarget_lock_release_recursive>
 800858e:	4628      	mov	r0, r5
 8008590:	bd70      	pop	{r4, r5, r6, pc}
 8008592:	2b00      	cmp	r3, #0
 8008594:	da04      	bge.n	80085a0 <_puts_r+0x60>
 8008596:	69a2      	ldr	r2, [r4, #24]
 8008598:	429a      	cmp	r2, r3
 800859a:	dc17      	bgt.n	80085cc <_puts_r+0x8c>
 800859c:	290a      	cmp	r1, #10
 800859e:	d015      	beq.n	80085cc <_puts_r+0x8c>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	6022      	str	r2, [r4, #0]
 80085a6:	7019      	strb	r1, [r3, #0]
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085ae:	3b01      	subs	r3, #1
 80085b0:	60a3      	str	r3, [r4, #8]
 80085b2:	2900      	cmp	r1, #0
 80085b4:	d1ed      	bne.n	8008592 <_puts_r+0x52>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	da11      	bge.n	80085de <_puts_r+0x9e>
 80085ba:	4622      	mov	r2, r4
 80085bc:	210a      	movs	r1, #10
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 f881 	bl	80086c6 <__swbuf_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	d0d7      	beq.n	8008578 <_puts_r+0x38>
 80085c8:	250a      	movs	r5, #10
 80085ca:	e7d7      	b.n	800857c <_puts_r+0x3c>
 80085cc:	4622      	mov	r2, r4
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 f879 	bl	80086c6 <__swbuf_r>
 80085d4:	3001      	adds	r0, #1
 80085d6:	d1e7      	bne.n	80085a8 <_puts_r+0x68>
 80085d8:	e7ce      	b.n	8008578 <_puts_r+0x38>
 80085da:	3e01      	subs	r6, #1
 80085dc:	e7e4      	b.n	80085a8 <_puts_r+0x68>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	220a      	movs	r2, #10
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	e7ee      	b.n	80085c8 <_puts_r+0x88>
	...

080085ec <puts>:
 80085ec:	4b02      	ldr	r3, [pc, #8]	@ (80085f8 <puts+0xc>)
 80085ee:	4601      	mov	r1, r0
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f7ff bfa5 	b.w	8008540 <_puts_r>
 80085f6:	bf00      	nop
 80085f8:	2000004c 	.word	0x2000004c

080085fc <siprintf>:
 80085fc:	b40e      	push	{r1, r2, r3}
 80085fe:	b510      	push	{r4, lr}
 8008600:	b09d      	sub	sp, #116	@ 0x74
 8008602:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008604:	9002      	str	r0, [sp, #8]
 8008606:	9006      	str	r0, [sp, #24]
 8008608:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800860c:	480a      	ldr	r0, [pc, #40]	@ (8008638 <siprintf+0x3c>)
 800860e:	9107      	str	r1, [sp, #28]
 8008610:	9104      	str	r1, [sp, #16]
 8008612:	490a      	ldr	r1, [pc, #40]	@ (800863c <siprintf+0x40>)
 8008614:	f853 2b04 	ldr.w	r2, [r3], #4
 8008618:	9105      	str	r1, [sp, #20]
 800861a:	2400      	movs	r4, #0
 800861c:	a902      	add	r1, sp, #8
 800861e:	6800      	ldr	r0, [r0, #0]
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008624:	f002 fb4e 	bl	800acc4 <_svfiprintf_r>
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	701c      	strb	r4, [r3, #0]
 800862c:	b01d      	add	sp, #116	@ 0x74
 800862e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008632:	b003      	add	sp, #12
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	2000004c 	.word	0x2000004c
 800863c:	ffff0208 	.word	0xffff0208

08008640 <__sread>:
 8008640:	b510      	push	{r4, lr}
 8008642:	460c      	mov	r4, r1
 8008644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008648:	f000 f912 	bl	8008870 <_read_r>
 800864c:	2800      	cmp	r0, #0
 800864e:	bfab      	itete	ge
 8008650:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008652:	89a3      	ldrhlt	r3, [r4, #12]
 8008654:	181b      	addge	r3, r3, r0
 8008656:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800865a:	bfac      	ite	ge
 800865c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800865e:	81a3      	strhlt	r3, [r4, #12]
 8008660:	bd10      	pop	{r4, pc}

08008662 <__swrite>:
 8008662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008666:	461f      	mov	r7, r3
 8008668:	898b      	ldrh	r3, [r1, #12]
 800866a:	05db      	lsls	r3, r3, #23
 800866c:	4605      	mov	r5, r0
 800866e:	460c      	mov	r4, r1
 8008670:	4616      	mov	r6, r2
 8008672:	d505      	bpl.n	8008680 <__swrite+0x1e>
 8008674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008678:	2302      	movs	r3, #2
 800867a:	2200      	movs	r2, #0
 800867c:	f000 f8e6 	bl	800884c <_lseek_r>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008686:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	4632      	mov	r2, r6
 800868e:	463b      	mov	r3, r7
 8008690:	4628      	mov	r0, r5
 8008692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008696:	f000 b90d 	b.w	80088b4 <_write_r>

0800869a <__sseek>:
 800869a:	b510      	push	{r4, lr}
 800869c:	460c      	mov	r4, r1
 800869e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a2:	f000 f8d3 	bl	800884c <_lseek_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	bf15      	itete	ne
 80086ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086b6:	81a3      	strheq	r3, [r4, #12]
 80086b8:	bf18      	it	ne
 80086ba:	81a3      	strhne	r3, [r4, #12]
 80086bc:	bd10      	pop	{r4, pc}

080086be <__sclose>:
 80086be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c2:	f000 b8b3 	b.w	800882c <_close_r>

080086c6 <__swbuf_r>:
 80086c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c8:	460e      	mov	r6, r1
 80086ca:	4614      	mov	r4, r2
 80086cc:	4605      	mov	r5, r0
 80086ce:	b118      	cbz	r0, 80086d8 <__swbuf_r+0x12>
 80086d0:	6a03      	ldr	r3, [r0, #32]
 80086d2:	b90b      	cbnz	r3, 80086d8 <__swbuf_r+0x12>
 80086d4:	f7ff fefe 	bl	80084d4 <__sinit>
 80086d8:	69a3      	ldr	r3, [r4, #24]
 80086da:	60a3      	str	r3, [r4, #8]
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	071a      	lsls	r2, r3, #28
 80086e0:	d501      	bpl.n	80086e6 <__swbuf_r+0x20>
 80086e2:	6923      	ldr	r3, [r4, #16]
 80086e4:	b943      	cbnz	r3, 80086f8 <__swbuf_r+0x32>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4628      	mov	r0, r5
 80086ea:	f000 f82b 	bl	8008744 <__swsetup_r>
 80086ee:	b118      	cbz	r0, 80086f8 <__swbuf_r+0x32>
 80086f0:	f04f 37ff 	mov.w	r7, #4294967295
 80086f4:	4638      	mov	r0, r7
 80086f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	6922      	ldr	r2, [r4, #16]
 80086fc:	1a98      	subs	r0, r3, r2
 80086fe:	6963      	ldr	r3, [r4, #20]
 8008700:	b2f6      	uxtb	r6, r6
 8008702:	4283      	cmp	r3, r0
 8008704:	4637      	mov	r7, r6
 8008706:	dc05      	bgt.n	8008714 <__swbuf_r+0x4e>
 8008708:	4621      	mov	r1, r4
 800870a:	4628      	mov	r0, r5
 800870c:	f002 fc5a 	bl	800afc4 <_fflush_r>
 8008710:	2800      	cmp	r0, #0
 8008712:	d1ed      	bne.n	80086f0 <__swbuf_r+0x2a>
 8008714:	68a3      	ldr	r3, [r4, #8]
 8008716:	3b01      	subs	r3, #1
 8008718:	60a3      	str	r3, [r4, #8]
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	701e      	strb	r6, [r3, #0]
 8008722:	6962      	ldr	r2, [r4, #20]
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	429a      	cmp	r2, r3
 8008728:	d004      	beq.n	8008734 <__swbuf_r+0x6e>
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	07db      	lsls	r3, r3, #31
 800872e:	d5e1      	bpl.n	80086f4 <__swbuf_r+0x2e>
 8008730:	2e0a      	cmp	r6, #10
 8008732:	d1df      	bne.n	80086f4 <__swbuf_r+0x2e>
 8008734:	4621      	mov	r1, r4
 8008736:	4628      	mov	r0, r5
 8008738:	f002 fc44 	bl	800afc4 <_fflush_r>
 800873c:	2800      	cmp	r0, #0
 800873e:	d0d9      	beq.n	80086f4 <__swbuf_r+0x2e>
 8008740:	e7d6      	b.n	80086f0 <__swbuf_r+0x2a>
	...

08008744 <__swsetup_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4b29      	ldr	r3, [pc, #164]	@ (80087ec <__swsetup_r+0xa8>)
 8008748:	4605      	mov	r5, r0
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	460c      	mov	r4, r1
 800874e:	b118      	cbz	r0, 8008758 <__swsetup_r+0x14>
 8008750:	6a03      	ldr	r3, [r0, #32]
 8008752:	b90b      	cbnz	r3, 8008758 <__swsetup_r+0x14>
 8008754:	f7ff febe 	bl	80084d4 <__sinit>
 8008758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875c:	0719      	lsls	r1, r3, #28
 800875e:	d422      	bmi.n	80087a6 <__swsetup_r+0x62>
 8008760:	06da      	lsls	r2, r3, #27
 8008762:	d407      	bmi.n	8008774 <__swsetup_r+0x30>
 8008764:	2209      	movs	r2, #9
 8008766:	602a      	str	r2, [r5, #0]
 8008768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	f04f 30ff 	mov.w	r0, #4294967295
 8008772:	e033      	b.n	80087dc <__swsetup_r+0x98>
 8008774:	0758      	lsls	r0, r3, #29
 8008776:	d512      	bpl.n	800879e <__swsetup_r+0x5a>
 8008778:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800877a:	b141      	cbz	r1, 800878e <__swsetup_r+0x4a>
 800877c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008780:	4299      	cmp	r1, r3
 8008782:	d002      	beq.n	800878a <__swsetup_r+0x46>
 8008784:	4628      	mov	r0, r5
 8008786:	f000 ff43 	bl	8009610 <_free_r>
 800878a:	2300      	movs	r3, #0
 800878c:	6363      	str	r3, [r4, #52]	@ 0x34
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	2300      	movs	r3, #0
 8008798:	6063      	str	r3, [r4, #4]
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	f043 0308 	orr.w	r3, r3, #8
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	b94b      	cbnz	r3, 80087be <__swsetup_r+0x7a>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b4:	d003      	beq.n	80087be <__swsetup_r+0x7a>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f002 fc51 	bl	800b060 <__smakebuf_r>
 80087be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c2:	f013 0201 	ands.w	r2, r3, #1
 80087c6:	d00a      	beq.n	80087de <__swsetup_r+0x9a>
 80087c8:	2200      	movs	r2, #0
 80087ca:	60a2      	str	r2, [r4, #8]
 80087cc:	6962      	ldr	r2, [r4, #20]
 80087ce:	4252      	negs	r2, r2
 80087d0:	61a2      	str	r2, [r4, #24]
 80087d2:	6922      	ldr	r2, [r4, #16]
 80087d4:	b942      	cbnz	r2, 80087e8 <__swsetup_r+0xa4>
 80087d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087da:	d1c5      	bne.n	8008768 <__swsetup_r+0x24>
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	0799      	lsls	r1, r3, #30
 80087e0:	bf58      	it	pl
 80087e2:	6962      	ldrpl	r2, [r4, #20]
 80087e4:	60a2      	str	r2, [r4, #8]
 80087e6:	e7f4      	b.n	80087d2 <__swsetup_r+0x8e>
 80087e8:	2000      	movs	r0, #0
 80087ea:	e7f7      	b.n	80087dc <__swsetup_r+0x98>
 80087ec:	2000004c 	.word	0x2000004c

080087f0 <memset>:
 80087f0:	4402      	add	r2, r0
 80087f2:	4603      	mov	r3, r0
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d100      	bne.n	80087fa <memset+0xa>
 80087f8:	4770      	bx	lr
 80087fa:	f803 1b01 	strb.w	r1, [r3], #1
 80087fe:	e7f9      	b.n	80087f4 <memset+0x4>

08008800 <strncmp>:
 8008800:	b510      	push	{r4, lr}
 8008802:	b16a      	cbz	r2, 8008820 <strncmp+0x20>
 8008804:	3901      	subs	r1, #1
 8008806:	1884      	adds	r4, r0, r2
 8008808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800880c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008810:	429a      	cmp	r2, r3
 8008812:	d103      	bne.n	800881c <strncmp+0x1c>
 8008814:	42a0      	cmp	r0, r4
 8008816:	d001      	beq.n	800881c <strncmp+0x1c>
 8008818:	2a00      	cmp	r2, #0
 800881a:	d1f5      	bne.n	8008808 <strncmp+0x8>
 800881c:	1ad0      	subs	r0, r2, r3
 800881e:	bd10      	pop	{r4, pc}
 8008820:	4610      	mov	r0, r2
 8008822:	e7fc      	b.n	800881e <strncmp+0x1e>

08008824 <_localeconv_r>:
 8008824:	4800      	ldr	r0, [pc, #0]	@ (8008828 <_localeconv_r+0x4>)
 8008826:	4770      	bx	lr
 8008828:	2000018c 	.word	0x2000018c

0800882c <_close_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d06      	ldr	r5, [pc, #24]	@ (8008848 <_close_r+0x1c>)
 8008830:	2300      	movs	r3, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	602b      	str	r3, [r5, #0]
 8008838:	f7f9 fc86 	bl	8002148 <_close>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_close_r+0x1a>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_close_r+0x1a>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	200008b8 	.word	0x200008b8

0800884c <_lseek_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d07      	ldr	r5, [pc, #28]	@ (800886c <_lseek_r+0x20>)
 8008850:	4604      	mov	r4, r0
 8008852:	4608      	mov	r0, r1
 8008854:	4611      	mov	r1, r2
 8008856:	2200      	movs	r2, #0
 8008858:	602a      	str	r2, [r5, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f7f9 fc9b 	bl	8002196 <_lseek>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_lseek_r+0x1e>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_lseek_r+0x1e>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	200008b8 	.word	0x200008b8

08008870 <_read_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	@ (8008890 <_read_r+0x20>)
 8008874:	4604      	mov	r4, r0
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	2200      	movs	r2, #0
 800887c:	602a      	str	r2, [r5, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	f7f9 fc45 	bl	800210e <_read>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_read_r+0x1e>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_read_r+0x1e>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	200008b8 	.word	0x200008b8

08008894 <_sbrk_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d06      	ldr	r5, [pc, #24]	@ (80088b0 <_sbrk_r+0x1c>)
 8008898:	2300      	movs	r3, #0
 800889a:	4604      	mov	r4, r0
 800889c:	4608      	mov	r0, r1
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	f7f9 fc86 	bl	80021b0 <_sbrk>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_sbrk_r+0x1a>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_sbrk_r+0x1a>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	200008b8 	.word	0x200008b8

080088b4 <_write_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d07      	ldr	r5, [pc, #28]	@ (80088d4 <_write_r+0x20>)
 80088b8:	4604      	mov	r4, r0
 80088ba:	4608      	mov	r0, r1
 80088bc:	4611      	mov	r1, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	602a      	str	r2, [r5, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f7f9 fe92 	bl	80025ec <_write>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_write_r+0x1e>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_write_r+0x1e>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	200008b8 	.word	0x200008b8

080088d8 <__errno>:
 80088d8:	4b01      	ldr	r3, [pc, #4]	@ (80088e0 <__errno+0x8>)
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	2000004c 	.word	0x2000004c

080088e4 <__libc_init_array>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	4d0d      	ldr	r5, [pc, #52]	@ (800891c <__libc_init_array+0x38>)
 80088e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008920 <__libc_init_array+0x3c>)
 80088ea:	1b64      	subs	r4, r4, r5
 80088ec:	10a4      	asrs	r4, r4, #2
 80088ee:	2600      	movs	r6, #0
 80088f0:	42a6      	cmp	r6, r4
 80088f2:	d109      	bne.n	8008908 <__libc_init_array+0x24>
 80088f4:	4d0b      	ldr	r5, [pc, #44]	@ (8008924 <__libc_init_array+0x40>)
 80088f6:	4c0c      	ldr	r4, [pc, #48]	@ (8008928 <__libc_init_array+0x44>)
 80088f8:	f003 f990 	bl	800bc1c <_init>
 80088fc:	1b64      	subs	r4, r4, r5
 80088fe:	10a4      	asrs	r4, r4, #2
 8008900:	2600      	movs	r6, #0
 8008902:	42a6      	cmp	r6, r4
 8008904:	d105      	bne.n	8008912 <__libc_init_array+0x2e>
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	f855 3b04 	ldr.w	r3, [r5], #4
 800890c:	4798      	blx	r3
 800890e:	3601      	adds	r6, #1
 8008910:	e7ee      	b.n	80088f0 <__libc_init_array+0xc>
 8008912:	f855 3b04 	ldr.w	r3, [r5], #4
 8008916:	4798      	blx	r3
 8008918:	3601      	adds	r6, #1
 800891a:	e7f2      	b.n	8008902 <__libc_init_array+0x1e>
 800891c:	0800c140 	.word	0x0800c140
 8008920:	0800c140 	.word	0x0800c140
 8008924:	0800c140 	.word	0x0800c140
 8008928:	0800c144 	.word	0x0800c144

0800892c <__retarget_lock_init_recursive>:
 800892c:	4770      	bx	lr

0800892e <__retarget_lock_acquire_recursive>:
 800892e:	4770      	bx	lr

08008930 <__retarget_lock_release_recursive>:
 8008930:	4770      	bx	lr

08008932 <memcpy>:
 8008932:	440a      	add	r2, r1
 8008934:	4291      	cmp	r1, r2
 8008936:	f100 33ff 	add.w	r3, r0, #4294967295
 800893a:	d100      	bne.n	800893e <memcpy+0xc>
 800893c:	4770      	bx	lr
 800893e:	b510      	push	{r4, lr}
 8008940:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008948:	4291      	cmp	r1, r2
 800894a:	d1f9      	bne.n	8008940 <memcpy+0xe>
 800894c:	bd10      	pop	{r4, pc}
	...

08008950 <nanf>:
 8008950:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008958 <nanf+0x8>
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	7fc00000 	.word	0x7fc00000

0800895c <quorem>:
 800895c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	6903      	ldr	r3, [r0, #16]
 8008962:	690c      	ldr	r4, [r1, #16]
 8008964:	42a3      	cmp	r3, r4
 8008966:	4607      	mov	r7, r0
 8008968:	db7e      	blt.n	8008a68 <quorem+0x10c>
 800896a:	3c01      	subs	r4, #1
 800896c:	f101 0814 	add.w	r8, r1, #20
 8008970:	00a3      	lsls	r3, r4, #2
 8008972:	f100 0514 	add.w	r5, r0, #20
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008986:	3301      	adds	r3, #1
 8008988:	429a      	cmp	r2, r3
 800898a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800898e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008992:	d32e      	bcc.n	80089f2 <quorem+0x96>
 8008994:	f04f 0a00 	mov.w	sl, #0
 8008998:	46c4      	mov	ip, r8
 800899a:	46ae      	mov	lr, r5
 800899c:	46d3      	mov	fp, sl
 800899e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089a2:	b298      	uxth	r0, r3
 80089a4:	fb06 a000 	mla	r0, r6, r0, sl
 80089a8:	0c02      	lsrs	r2, r0, #16
 80089aa:	0c1b      	lsrs	r3, r3, #16
 80089ac:	fb06 2303 	mla	r3, r6, r3, r2
 80089b0:	f8de 2000 	ldr.w	r2, [lr]
 80089b4:	b280      	uxth	r0, r0
 80089b6:	b292      	uxth	r2, r2
 80089b8:	1a12      	subs	r2, r2, r0
 80089ba:	445a      	add	r2, fp
 80089bc:	f8de 0000 	ldr.w	r0, [lr]
 80089c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80089ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80089ce:	b292      	uxth	r2, r2
 80089d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089d4:	45e1      	cmp	r9, ip
 80089d6:	f84e 2b04 	str.w	r2, [lr], #4
 80089da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80089de:	d2de      	bcs.n	800899e <quorem+0x42>
 80089e0:	9b00      	ldr	r3, [sp, #0]
 80089e2:	58eb      	ldr	r3, [r5, r3]
 80089e4:	b92b      	cbnz	r3, 80089f2 <quorem+0x96>
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	3b04      	subs	r3, #4
 80089ea:	429d      	cmp	r5, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	d32f      	bcc.n	8008a50 <quorem+0xf4>
 80089f0:	613c      	str	r4, [r7, #16]
 80089f2:	4638      	mov	r0, r7
 80089f4:	f001 f912 	bl	8009c1c <__mcmp>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	db25      	blt.n	8008a48 <quorem+0xec>
 80089fc:	4629      	mov	r1, r5
 80089fe:	2000      	movs	r0, #0
 8008a00:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a04:	f8d1 c000 	ldr.w	ip, [r1]
 8008a08:	fa1f fe82 	uxth.w	lr, r2
 8008a0c:	fa1f f38c 	uxth.w	r3, ip
 8008a10:	eba3 030e 	sub.w	r3, r3, lr
 8008a14:	4403      	add	r3, r0
 8008a16:	0c12      	lsrs	r2, r2, #16
 8008a18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a26:	45c1      	cmp	r9, r8
 8008a28:	f841 3b04 	str.w	r3, [r1], #4
 8008a2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a30:	d2e6      	bcs.n	8008a00 <quorem+0xa4>
 8008a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3a:	b922      	cbnz	r2, 8008a46 <quorem+0xea>
 8008a3c:	3b04      	subs	r3, #4
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	461a      	mov	r2, r3
 8008a42:	d30b      	bcc.n	8008a5c <quorem+0x100>
 8008a44:	613c      	str	r4, [r7, #16]
 8008a46:	3601      	adds	r6, #1
 8008a48:	4630      	mov	r0, r6
 8008a4a:	b003      	add	sp, #12
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	6812      	ldr	r2, [r2, #0]
 8008a52:	3b04      	subs	r3, #4
 8008a54:	2a00      	cmp	r2, #0
 8008a56:	d1cb      	bne.n	80089f0 <quorem+0x94>
 8008a58:	3c01      	subs	r4, #1
 8008a5a:	e7c6      	b.n	80089ea <quorem+0x8e>
 8008a5c:	6812      	ldr	r2, [r2, #0]
 8008a5e:	3b04      	subs	r3, #4
 8008a60:	2a00      	cmp	r2, #0
 8008a62:	d1ef      	bne.n	8008a44 <quorem+0xe8>
 8008a64:	3c01      	subs	r4, #1
 8008a66:	e7ea      	b.n	8008a3e <quorem+0xe2>
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7ee      	b.n	8008a4a <quorem+0xee>
 8008a6c:	0000      	movs	r0, r0
	...

08008a70 <_dtoa_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	69c7      	ldr	r7, [r0, #28]
 8008a76:	b097      	sub	sp, #92	@ 0x5c
 8008a78:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008a7c:	ec55 4b10 	vmov	r4, r5, d0
 8008a80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008a82:	9107      	str	r1, [sp, #28]
 8008a84:	4681      	mov	r9, r0
 8008a86:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a88:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a8a:	b97f      	cbnz	r7, 8008aac <_dtoa_r+0x3c>
 8008a8c:	2010      	movs	r0, #16
 8008a8e:	f7fe fcf7 	bl	8007480 <malloc>
 8008a92:	4602      	mov	r2, r0
 8008a94:	f8c9 001c 	str.w	r0, [r9, #28]
 8008a98:	b920      	cbnz	r0, 8008aa4 <_dtoa_r+0x34>
 8008a9a:	4ba9      	ldr	r3, [pc, #676]	@ (8008d40 <_dtoa_r+0x2d0>)
 8008a9c:	21ef      	movs	r1, #239	@ 0xef
 8008a9e:	48a9      	ldr	r0, [pc, #676]	@ (8008d44 <_dtoa_r+0x2d4>)
 8008aa0:	f002 fb5e 	bl	800b160 <__assert_func>
 8008aa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008aa8:	6007      	str	r7, [r0, #0]
 8008aaa:	60c7      	str	r7, [r0, #12]
 8008aac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ab0:	6819      	ldr	r1, [r3, #0]
 8008ab2:	b159      	cbz	r1, 8008acc <_dtoa_r+0x5c>
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	604a      	str	r2, [r1, #4]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4093      	lsls	r3, r2
 8008abc:	608b      	str	r3, [r1, #8]
 8008abe:	4648      	mov	r0, r9
 8008ac0:	f000 fe30 	bl	8009724 <_Bfree>
 8008ac4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	1e2b      	subs	r3, r5, #0
 8008ace:	bfb9      	ittee	lt
 8008ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ad4:	9305      	strlt	r3, [sp, #20]
 8008ad6:	2300      	movge	r3, #0
 8008ad8:	6033      	strge	r3, [r6, #0]
 8008ada:	9f05      	ldr	r7, [sp, #20]
 8008adc:	4b9a      	ldr	r3, [pc, #616]	@ (8008d48 <_dtoa_r+0x2d8>)
 8008ade:	bfbc      	itt	lt
 8008ae0:	2201      	movlt	r2, #1
 8008ae2:	6032      	strlt	r2, [r6, #0]
 8008ae4:	43bb      	bics	r3, r7
 8008ae6:	d112      	bne.n	8008b0e <_dtoa_r+0x9e>
 8008ae8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008aea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008af4:	4323      	orrs	r3, r4
 8008af6:	f000 855a 	beq.w	80095ae <_dtoa_r+0xb3e>
 8008afa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008afc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008d5c <_dtoa_r+0x2ec>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 855c 	beq.w	80095be <_dtoa_r+0xb4e>
 8008b06:	f10a 0303 	add.w	r3, sl, #3
 8008b0a:	f000 bd56 	b.w	80095ba <_dtoa_r+0xb4a>
 8008b0e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b12:	2200      	movs	r2, #0
 8008b14:	ec51 0b17 	vmov	r0, r1, d7
 8008b18:	2300      	movs	r3, #0
 8008b1a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008b1e:	f7f7 ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b22:	4680      	mov	r8, r0
 8008b24:	b158      	cbz	r0, 8008b3e <_dtoa_r+0xce>
 8008b26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b28:	2301      	movs	r3, #1
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b2e:	b113      	cbz	r3, 8008b36 <_dtoa_r+0xc6>
 8008b30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b32:	4b86      	ldr	r3, [pc, #536]	@ (8008d4c <_dtoa_r+0x2dc>)
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008d60 <_dtoa_r+0x2f0>
 8008b3a:	f000 bd40 	b.w	80095be <_dtoa_r+0xb4e>
 8008b3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008b42:	aa14      	add	r2, sp, #80	@ 0x50
 8008b44:	a915      	add	r1, sp, #84	@ 0x54
 8008b46:	4648      	mov	r0, r9
 8008b48:	f001 f988 	bl	8009e5c <__d2b>
 8008b4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b50:	9002      	str	r0, [sp, #8]
 8008b52:	2e00      	cmp	r6, #0
 8008b54:	d078      	beq.n	8008c48 <_dtoa_r+0x1d8>
 8008b56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b58:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b70:	4619      	mov	r1, r3
 8008b72:	2200      	movs	r2, #0
 8008b74:	4b76      	ldr	r3, [pc, #472]	@ (8008d50 <_dtoa_r+0x2e0>)
 8008b76:	f7f7 fb87 	bl	8000288 <__aeabi_dsub>
 8008b7a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008d28 <_dtoa_r+0x2b8>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fd3a 	bl	80005f8 <__aeabi_dmul>
 8008b84:	a36a      	add	r3, pc, #424	@ (adr r3, 8008d30 <_dtoa_r+0x2c0>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fb7f 	bl	800028c <__adddf3>
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4630      	mov	r0, r6
 8008b92:	460d      	mov	r5, r1
 8008b94:	f7f7 fcc6 	bl	8000524 <__aeabi_i2d>
 8008b98:	a367      	add	r3, pc, #412	@ (adr r3, 8008d38 <_dtoa_r+0x2c8>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fd2b 	bl	80005f8 <__aeabi_dmul>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f7f7 fb6f 	bl	800028c <__adddf3>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	f7f7 ffd1 	bl	8000b58 <__aeabi_d2iz>
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4607      	mov	r7, r0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7f7 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8008bc4:	b140      	cbz	r0, 8008bd8 <_dtoa_r+0x168>
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	f7f7 fcac 	bl	8000524 <__aeabi_i2d>
 8008bcc:	4622      	mov	r2, r4
 8008bce:	462b      	mov	r3, r5
 8008bd0:	f7f7 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bd4:	b900      	cbnz	r0, 8008bd8 <_dtoa_r+0x168>
 8008bd6:	3f01      	subs	r7, #1
 8008bd8:	2f16      	cmp	r7, #22
 8008bda:	d852      	bhi.n	8008c82 <_dtoa_r+0x212>
 8008bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8008d54 <_dtoa_r+0x2e4>)
 8008bde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008bea:	f7f7 ff77 	bl	8000adc <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d049      	beq.n	8008c86 <_dtoa_r+0x216>
 8008bf2:	3f01      	subs	r7, #1
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008bfa:	1b9b      	subs	r3, r3, r6
 8008bfc:	1e5a      	subs	r2, r3, #1
 8008bfe:	bf45      	ittet	mi
 8008c00:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c04:	9300      	strmi	r3, [sp, #0]
 8008c06:	2300      	movpl	r3, #0
 8008c08:	2300      	movmi	r3, #0
 8008c0a:	9206      	str	r2, [sp, #24]
 8008c0c:	bf54      	ite	pl
 8008c0e:	9300      	strpl	r3, [sp, #0]
 8008c10:	9306      	strmi	r3, [sp, #24]
 8008c12:	2f00      	cmp	r7, #0
 8008c14:	db39      	blt.n	8008c8a <_dtoa_r+0x21a>
 8008c16:	9b06      	ldr	r3, [sp, #24]
 8008c18:	970d      	str	r7, [sp, #52]	@ 0x34
 8008c1a:	443b      	add	r3, r7
 8008c1c:	9306      	str	r3, [sp, #24]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9308      	str	r3, [sp, #32]
 8008c22:	9b07      	ldr	r3, [sp, #28]
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d863      	bhi.n	8008cf0 <_dtoa_r+0x280>
 8008c28:	2b05      	cmp	r3, #5
 8008c2a:	bfc4      	itt	gt
 8008c2c:	3b04      	subgt	r3, #4
 8008c2e:	9307      	strgt	r3, [sp, #28]
 8008c30:	9b07      	ldr	r3, [sp, #28]
 8008c32:	f1a3 0302 	sub.w	r3, r3, #2
 8008c36:	bfcc      	ite	gt
 8008c38:	2400      	movgt	r4, #0
 8008c3a:	2401      	movle	r4, #1
 8008c3c:	2b03      	cmp	r3, #3
 8008c3e:	d863      	bhi.n	8008d08 <_dtoa_r+0x298>
 8008c40:	e8df f003 	tbb	[pc, r3]
 8008c44:	2b375452 	.word	0x2b375452
 8008c48:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008c4c:	441e      	add	r6, r3
 8008c4e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	bfc1      	itttt	gt
 8008c56:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c5a:	409f      	lslgt	r7, r3
 8008c5c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c60:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c64:	bfd6      	itet	le
 8008c66:	f1c3 0320 	rsble	r3, r3, #32
 8008c6a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008c6e:	fa04 f003 	lslle.w	r0, r4, r3
 8008c72:	f7f7 fc47 	bl	8000504 <__aeabi_ui2d>
 8008c76:	2201      	movs	r2, #1
 8008c78:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c7c:	3e01      	subs	r6, #1
 8008c7e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008c80:	e776      	b.n	8008b70 <_dtoa_r+0x100>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e7b7      	b.n	8008bf6 <_dtoa_r+0x186>
 8008c86:	9010      	str	r0, [sp, #64]	@ 0x40
 8008c88:	e7b6      	b.n	8008bf8 <_dtoa_r+0x188>
 8008c8a:	9b00      	ldr	r3, [sp, #0]
 8008c8c:	1bdb      	subs	r3, r3, r7
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	427b      	negs	r3, r7
 8008c92:	9308      	str	r3, [sp, #32]
 8008c94:	2300      	movs	r3, #0
 8008c96:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c98:	e7c3      	b.n	8008c22 <_dtoa_r+0x1b2>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ca0:	eb07 0b03 	add.w	fp, r7, r3
 8008ca4:	f10b 0301 	add.w	r3, fp, #1
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	bfb8      	it	lt
 8008cae:	2301      	movlt	r3, #1
 8008cb0:	e006      	b.n	8008cc0 <_dtoa_r+0x250>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	dd28      	ble.n	8008d0e <_dtoa_r+0x29e>
 8008cbc:	469b      	mov	fp, r3
 8008cbe:	9303      	str	r3, [sp, #12]
 8008cc0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	2204      	movs	r2, #4
 8008cc8:	f102 0514 	add.w	r5, r2, #20
 8008ccc:	429d      	cmp	r5, r3
 8008cce:	d926      	bls.n	8008d1e <_dtoa_r+0x2ae>
 8008cd0:	6041      	str	r1, [r0, #4]
 8008cd2:	4648      	mov	r0, r9
 8008cd4:	f000 fce6 	bl	80096a4 <_Balloc>
 8008cd8:	4682      	mov	sl, r0
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d142      	bne.n	8008d64 <_dtoa_r+0x2f4>
 8008cde:	4b1e      	ldr	r3, [pc, #120]	@ (8008d58 <_dtoa_r+0x2e8>)
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ce6:	e6da      	b.n	8008a9e <_dtoa_r+0x2e>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e7e3      	b.n	8008cb4 <_dtoa_r+0x244>
 8008cec:	2300      	movs	r3, #0
 8008cee:	e7d5      	b.n	8008c9c <_dtoa_r+0x22c>
 8008cf0:	2401      	movs	r4, #1
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9307      	str	r3, [sp, #28]
 8008cf6:	9409      	str	r4, [sp, #36]	@ 0x24
 8008cf8:	f04f 3bff 	mov.w	fp, #4294967295
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d02:	2312      	movs	r3, #18
 8008d04:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d06:	e7db      	b.n	8008cc0 <_dtoa_r+0x250>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d0c:	e7f4      	b.n	8008cf8 <_dtoa_r+0x288>
 8008d0e:	f04f 0b01 	mov.w	fp, #1
 8008d12:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d16:	465b      	mov	r3, fp
 8008d18:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008d1c:	e7d0      	b.n	8008cc0 <_dtoa_r+0x250>
 8008d1e:	3101      	adds	r1, #1
 8008d20:	0052      	lsls	r2, r2, #1
 8008d22:	e7d1      	b.n	8008cc8 <_dtoa_r+0x258>
 8008d24:	f3af 8000 	nop.w
 8008d28:	636f4361 	.word	0x636f4361
 8008d2c:	3fd287a7 	.word	0x3fd287a7
 8008d30:	8b60c8b3 	.word	0x8b60c8b3
 8008d34:	3fc68a28 	.word	0x3fc68a28
 8008d38:	509f79fb 	.word	0x509f79fb
 8008d3c:	3fd34413 	.word	0x3fd34413
 8008d40:	0800be5b 	.word	0x0800be5b
 8008d44:	0800be72 	.word	0x0800be72
 8008d48:	7ff00000 	.word	0x7ff00000
 8008d4c:	0800be26 	.word	0x0800be26
 8008d50:	3ff80000 	.word	0x3ff80000
 8008d54:	0800c020 	.word	0x0800c020
 8008d58:	0800beca 	.word	0x0800beca
 8008d5c:	0800be57 	.word	0x0800be57
 8008d60:	0800be25 	.word	0x0800be25
 8008d64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d68:	6018      	str	r0, [r3, #0]
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	2b0e      	cmp	r3, #14
 8008d6e:	f200 80a1 	bhi.w	8008eb4 <_dtoa_r+0x444>
 8008d72:	2c00      	cmp	r4, #0
 8008d74:	f000 809e 	beq.w	8008eb4 <_dtoa_r+0x444>
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	dd33      	ble.n	8008de4 <_dtoa_r+0x374>
 8008d7c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ff0 <_dtoa_r+0x580>)
 8008d7e:	f007 020f 	and.w	r2, r7, #15
 8008d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d86:	ed93 7b00 	vldr	d7, [r3]
 8008d8a:	05f8      	lsls	r0, r7, #23
 8008d8c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008d90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d94:	d516      	bpl.n	8008dc4 <_dtoa_r+0x354>
 8008d96:	4b97      	ldr	r3, [pc, #604]	@ (8008ff4 <_dtoa_r+0x584>)
 8008d98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008da0:	f7f7 fd54 	bl	800084c <__aeabi_ddiv>
 8008da4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008da8:	f004 040f 	and.w	r4, r4, #15
 8008dac:	2603      	movs	r6, #3
 8008dae:	4d91      	ldr	r5, [pc, #580]	@ (8008ff4 <_dtoa_r+0x584>)
 8008db0:	b954      	cbnz	r4, 8008dc8 <_dtoa_r+0x358>
 8008db2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008db6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dba:	f7f7 fd47 	bl	800084c <__aeabi_ddiv>
 8008dbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dc2:	e028      	b.n	8008e16 <_dtoa_r+0x3a6>
 8008dc4:	2602      	movs	r6, #2
 8008dc6:	e7f2      	b.n	8008dae <_dtoa_r+0x33e>
 8008dc8:	07e1      	lsls	r1, r4, #31
 8008dca:	d508      	bpl.n	8008dde <_dtoa_r+0x36e>
 8008dcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008dd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dd4:	f7f7 fc10 	bl	80005f8 <__aeabi_dmul>
 8008dd8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ddc:	3601      	adds	r6, #1
 8008dde:	1064      	asrs	r4, r4, #1
 8008de0:	3508      	adds	r5, #8
 8008de2:	e7e5      	b.n	8008db0 <_dtoa_r+0x340>
 8008de4:	f000 80af 	beq.w	8008f46 <_dtoa_r+0x4d6>
 8008de8:	427c      	negs	r4, r7
 8008dea:	4b81      	ldr	r3, [pc, #516]	@ (8008ff0 <_dtoa_r+0x580>)
 8008dec:	4d81      	ldr	r5, [pc, #516]	@ (8008ff4 <_dtoa_r+0x584>)
 8008dee:	f004 020f 	and.w	r2, r4, #15
 8008df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dfe:	f7f7 fbfb 	bl	80005f8 <__aeabi_dmul>
 8008e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e06:	1124      	asrs	r4, r4, #4
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2602      	movs	r6, #2
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	f040 808f 	bne.w	8008f30 <_dtoa_r+0x4c0>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1d3      	bne.n	8008dbe <_dtoa_r+0x34e>
 8008e16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 8094 	beq.w	8008f4a <_dtoa_r+0x4da>
 8008e22:	4b75      	ldr	r3, [pc, #468]	@ (8008ff8 <_dtoa_r+0x588>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fe57 	bl	8000adc <__aeabi_dcmplt>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f000 808b 	beq.w	8008f4a <_dtoa_r+0x4da>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8087 	beq.w	8008f4a <_dtoa_r+0x4da>
 8008e3c:	f1bb 0f00 	cmp.w	fp, #0
 8008e40:	dd34      	ble.n	8008eac <_dtoa_r+0x43c>
 8008e42:	4620      	mov	r0, r4
 8008e44:	4b6d      	ldr	r3, [pc, #436]	@ (8008ffc <_dtoa_r+0x58c>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7f7 fbd5 	bl	80005f8 <__aeabi_dmul>
 8008e4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e52:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e56:	3601      	adds	r6, #1
 8008e58:	465c      	mov	r4, fp
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7f7 fb62 	bl	8000524 <__aeabi_i2d>
 8008e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e64:	f7f7 fbc8 	bl	80005f8 <__aeabi_dmul>
 8008e68:	4b65      	ldr	r3, [pc, #404]	@ (8009000 <_dtoa_r+0x590>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f7f7 fa0e 	bl	800028c <__adddf3>
 8008e70:	4605      	mov	r5, r0
 8008e72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e76:	2c00      	cmp	r4, #0
 8008e78:	d16a      	bne.n	8008f50 <_dtoa_r+0x4e0>
 8008e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e7e:	4b61      	ldr	r3, [pc, #388]	@ (8009004 <_dtoa_r+0x594>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	f7f7 fa01 	bl	8000288 <__aeabi_dsub>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e8e:	462a      	mov	r2, r5
 8008e90:	4633      	mov	r3, r6
 8008e92:	f7f7 fe41 	bl	8000b18 <__aeabi_dcmpgt>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f040 8298 	bne.w	80093cc <_dtoa_r+0x95c>
 8008e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ea6:	f7f7 fe19 	bl	8000adc <__aeabi_dcmplt>
 8008eaa:	bb38      	cbnz	r0, 8008efc <_dtoa_r+0x48c>
 8008eac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008eb0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008eb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f2c0 8157 	blt.w	800916a <_dtoa_r+0x6fa>
 8008ebc:	2f0e      	cmp	r7, #14
 8008ebe:	f300 8154 	bgt.w	800916a <_dtoa_r+0x6fa>
 8008ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ff0 <_dtoa_r+0x580>)
 8008ec4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ec8:	ed93 7b00 	vldr	d7, [r3]
 8008ecc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	ed8d 7b00 	vstr	d7, [sp]
 8008ed4:	f280 80e5 	bge.w	80090a2 <_dtoa_r+0x632>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f300 80e1 	bgt.w	80090a2 <_dtoa_r+0x632>
 8008ee0:	d10c      	bne.n	8008efc <_dtoa_r+0x48c>
 8008ee2:	4b48      	ldr	r3, [pc, #288]	@ (8009004 <_dtoa_r+0x594>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	ec51 0b17 	vmov	r0, r1, d7
 8008eea:	f7f7 fb85 	bl	80005f8 <__aeabi_dmul>
 8008eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef2:	f7f7 fe07 	bl	8000b04 <__aeabi_dcmpge>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f000 8266 	beq.w	80093c8 <_dtoa_r+0x958>
 8008efc:	2400      	movs	r4, #0
 8008efe:	4625      	mov	r5, r4
 8008f00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f02:	4656      	mov	r6, sl
 8008f04:	ea6f 0803 	mvn.w	r8, r3
 8008f08:	2700      	movs	r7, #0
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	f000 fc09 	bl	8009724 <_Bfree>
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	f000 80bd 	beq.w	8009092 <_dtoa_r+0x622>
 8008f18:	b12f      	cbz	r7, 8008f26 <_dtoa_r+0x4b6>
 8008f1a:	42af      	cmp	r7, r5
 8008f1c:	d003      	beq.n	8008f26 <_dtoa_r+0x4b6>
 8008f1e:	4639      	mov	r1, r7
 8008f20:	4648      	mov	r0, r9
 8008f22:	f000 fbff 	bl	8009724 <_Bfree>
 8008f26:	4629      	mov	r1, r5
 8008f28:	4648      	mov	r0, r9
 8008f2a:	f000 fbfb 	bl	8009724 <_Bfree>
 8008f2e:	e0b0      	b.n	8009092 <_dtoa_r+0x622>
 8008f30:	07e2      	lsls	r2, r4, #31
 8008f32:	d505      	bpl.n	8008f40 <_dtoa_r+0x4d0>
 8008f34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f38:	f7f7 fb5e 	bl	80005f8 <__aeabi_dmul>
 8008f3c:	3601      	adds	r6, #1
 8008f3e:	2301      	movs	r3, #1
 8008f40:	1064      	asrs	r4, r4, #1
 8008f42:	3508      	adds	r5, #8
 8008f44:	e762      	b.n	8008e0c <_dtoa_r+0x39c>
 8008f46:	2602      	movs	r6, #2
 8008f48:	e765      	b.n	8008e16 <_dtoa_r+0x3a6>
 8008f4a:	9c03      	ldr	r4, [sp, #12]
 8008f4c:	46b8      	mov	r8, r7
 8008f4e:	e784      	b.n	8008e5a <_dtoa_r+0x3ea>
 8008f50:	4b27      	ldr	r3, [pc, #156]	@ (8008ff0 <_dtoa_r+0x580>)
 8008f52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f5c:	4454      	add	r4, sl
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	d054      	beq.n	800900c <_dtoa_r+0x59c>
 8008f62:	4929      	ldr	r1, [pc, #164]	@ (8009008 <_dtoa_r+0x598>)
 8008f64:	2000      	movs	r0, #0
 8008f66:	f7f7 fc71 	bl	800084c <__aeabi_ddiv>
 8008f6a:	4633      	mov	r3, r6
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	f7f7 f98b 	bl	8000288 <__aeabi_dsub>
 8008f72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f76:	4656      	mov	r6, sl
 8008f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f7c:	f7f7 fdec 	bl	8000b58 <__aeabi_d2iz>
 8008f80:	4605      	mov	r5, r0
 8008f82:	f7f7 facf 	bl	8000524 <__aeabi_i2d>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f8e:	f7f7 f97b 	bl	8000288 <__aeabi_dsub>
 8008f92:	3530      	adds	r5, #48	@ 0x30
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f9c:	f806 5b01 	strb.w	r5, [r6], #1
 8008fa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fa4:	f7f7 fd9a 	bl	8000adc <__aeabi_dcmplt>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d172      	bne.n	8009092 <_dtoa_r+0x622>
 8008fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fb0:	4911      	ldr	r1, [pc, #68]	@ (8008ff8 <_dtoa_r+0x588>)
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	f7f7 f968 	bl	8000288 <__aeabi_dsub>
 8008fb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fbc:	f7f7 fd8e 	bl	8000adc <__aeabi_dcmplt>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f040 80b4 	bne.w	800912e <_dtoa_r+0x6be>
 8008fc6:	42a6      	cmp	r6, r4
 8008fc8:	f43f af70 	beq.w	8008eac <_dtoa_r+0x43c>
 8008fcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ffc <_dtoa_r+0x58c>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f7f7 fb10 	bl	80005f8 <__aeabi_dmul>
 8008fd8:	4b08      	ldr	r3, [pc, #32]	@ (8008ffc <_dtoa_r+0x58c>)
 8008fda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008fde:	2200      	movs	r2, #0
 8008fe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fe4:	f7f7 fb08 	bl	80005f8 <__aeabi_dmul>
 8008fe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fec:	e7c4      	b.n	8008f78 <_dtoa_r+0x508>
 8008fee:	bf00      	nop
 8008ff0:	0800c020 	.word	0x0800c020
 8008ff4:	0800bff8 	.word	0x0800bff8
 8008ff8:	3ff00000 	.word	0x3ff00000
 8008ffc:	40240000 	.word	0x40240000
 8009000:	401c0000 	.word	0x401c0000
 8009004:	40140000 	.word	0x40140000
 8009008:	3fe00000 	.word	0x3fe00000
 800900c:	4631      	mov	r1, r6
 800900e:	4628      	mov	r0, r5
 8009010:	f7f7 faf2 	bl	80005f8 <__aeabi_dmul>
 8009014:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009018:	9413      	str	r4, [sp, #76]	@ 0x4c
 800901a:	4656      	mov	r6, sl
 800901c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009020:	f7f7 fd9a 	bl	8000b58 <__aeabi_d2iz>
 8009024:	4605      	mov	r5, r0
 8009026:	f7f7 fa7d 	bl	8000524 <__aeabi_i2d>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009032:	f7f7 f929 	bl	8000288 <__aeabi_dsub>
 8009036:	3530      	adds	r5, #48	@ 0x30
 8009038:	f806 5b01 	strb.w	r5, [r6], #1
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	42a6      	cmp	r6, r4
 8009042:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009046:	f04f 0200 	mov.w	r2, #0
 800904a:	d124      	bne.n	8009096 <_dtoa_r+0x626>
 800904c:	4baf      	ldr	r3, [pc, #700]	@ (800930c <_dtoa_r+0x89c>)
 800904e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009052:	f7f7 f91b 	bl	800028c <__adddf3>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800905e:	f7f7 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 8009062:	2800      	cmp	r0, #0
 8009064:	d163      	bne.n	800912e <_dtoa_r+0x6be>
 8009066:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800906a:	49a8      	ldr	r1, [pc, #672]	@ (800930c <_dtoa_r+0x89c>)
 800906c:	2000      	movs	r0, #0
 800906e:	f7f7 f90b 	bl	8000288 <__aeabi_dsub>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800907a:	f7f7 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800907e:	2800      	cmp	r0, #0
 8009080:	f43f af14 	beq.w	8008eac <_dtoa_r+0x43c>
 8009084:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009086:	1e73      	subs	r3, r6, #1
 8009088:	9313      	str	r3, [sp, #76]	@ 0x4c
 800908a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800908e:	2b30      	cmp	r3, #48	@ 0x30
 8009090:	d0f8      	beq.n	8009084 <_dtoa_r+0x614>
 8009092:	4647      	mov	r7, r8
 8009094:	e03b      	b.n	800910e <_dtoa_r+0x69e>
 8009096:	4b9e      	ldr	r3, [pc, #632]	@ (8009310 <_dtoa_r+0x8a0>)
 8009098:	f7f7 faae 	bl	80005f8 <__aeabi_dmul>
 800909c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090a0:	e7bc      	b.n	800901c <_dtoa_r+0x5ac>
 80090a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80090a6:	4656      	mov	r6, sl
 80090a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ac:	4620      	mov	r0, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7f7 fbcc 	bl	800084c <__aeabi_ddiv>
 80090b4:	f7f7 fd50 	bl	8000b58 <__aeabi_d2iz>
 80090b8:	4680      	mov	r8, r0
 80090ba:	f7f7 fa33 	bl	8000524 <__aeabi_i2d>
 80090be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090c2:	f7f7 fa99 	bl	80005f8 <__aeabi_dmul>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4620      	mov	r0, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80090d2:	f7f7 f8d9 	bl	8000288 <__aeabi_dsub>
 80090d6:	f806 4b01 	strb.w	r4, [r6], #1
 80090da:	9d03      	ldr	r5, [sp, #12]
 80090dc:	eba6 040a 	sub.w	r4, r6, sl
 80090e0:	42a5      	cmp	r5, r4
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	d133      	bne.n	8009150 <_dtoa_r+0x6e0>
 80090e8:	f7f7 f8d0 	bl	800028c <__adddf3>
 80090ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090f0:	4604      	mov	r4, r0
 80090f2:	460d      	mov	r5, r1
 80090f4:	f7f7 fd10 	bl	8000b18 <__aeabi_dcmpgt>
 80090f8:	b9c0      	cbnz	r0, 800912c <_dtoa_r+0x6bc>
 80090fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090fe:	4620      	mov	r0, r4
 8009100:	4629      	mov	r1, r5
 8009102:	f7f7 fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009106:	b110      	cbz	r0, 800910e <_dtoa_r+0x69e>
 8009108:	f018 0f01 	tst.w	r8, #1
 800910c:	d10e      	bne.n	800912c <_dtoa_r+0x6bc>
 800910e:	9902      	ldr	r1, [sp, #8]
 8009110:	4648      	mov	r0, r9
 8009112:	f000 fb07 	bl	8009724 <_Bfree>
 8009116:	2300      	movs	r3, #0
 8009118:	7033      	strb	r3, [r6, #0]
 800911a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800911c:	3701      	adds	r7, #1
 800911e:	601f      	str	r7, [r3, #0]
 8009120:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 824b 	beq.w	80095be <_dtoa_r+0xb4e>
 8009128:	601e      	str	r6, [r3, #0]
 800912a:	e248      	b.n	80095be <_dtoa_r+0xb4e>
 800912c:	46b8      	mov	r8, r7
 800912e:	4633      	mov	r3, r6
 8009130:	461e      	mov	r6, r3
 8009132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009136:	2a39      	cmp	r2, #57	@ 0x39
 8009138:	d106      	bne.n	8009148 <_dtoa_r+0x6d8>
 800913a:	459a      	cmp	sl, r3
 800913c:	d1f8      	bne.n	8009130 <_dtoa_r+0x6c0>
 800913e:	2230      	movs	r2, #48	@ 0x30
 8009140:	f108 0801 	add.w	r8, r8, #1
 8009144:	f88a 2000 	strb.w	r2, [sl]
 8009148:	781a      	ldrb	r2, [r3, #0]
 800914a:	3201      	adds	r2, #1
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	e7a0      	b.n	8009092 <_dtoa_r+0x622>
 8009150:	4b6f      	ldr	r3, [pc, #444]	@ (8009310 <_dtoa_r+0x8a0>)
 8009152:	2200      	movs	r2, #0
 8009154:	f7f7 fa50 	bl	80005f8 <__aeabi_dmul>
 8009158:	2200      	movs	r2, #0
 800915a:	2300      	movs	r3, #0
 800915c:	4604      	mov	r4, r0
 800915e:	460d      	mov	r5, r1
 8009160:	f7f7 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009164:	2800      	cmp	r0, #0
 8009166:	d09f      	beq.n	80090a8 <_dtoa_r+0x638>
 8009168:	e7d1      	b.n	800910e <_dtoa_r+0x69e>
 800916a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800916c:	2a00      	cmp	r2, #0
 800916e:	f000 80ea 	beq.w	8009346 <_dtoa_r+0x8d6>
 8009172:	9a07      	ldr	r2, [sp, #28]
 8009174:	2a01      	cmp	r2, #1
 8009176:	f300 80cd 	bgt.w	8009314 <_dtoa_r+0x8a4>
 800917a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800917c:	2a00      	cmp	r2, #0
 800917e:	f000 80c1 	beq.w	8009304 <_dtoa_r+0x894>
 8009182:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009186:	9c08      	ldr	r4, [sp, #32]
 8009188:	9e00      	ldr	r6, [sp, #0]
 800918a:	9a00      	ldr	r2, [sp, #0]
 800918c:	441a      	add	r2, r3
 800918e:	9200      	str	r2, [sp, #0]
 8009190:	9a06      	ldr	r2, [sp, #24]
 8009192:	2101      	movs	r1, #1
 8009194:	441a      	add	r2, r3
 8009196:	4648      	mov	r0, r9
 8009198:	9206      	str	r2, [sp, #24]
 800919a:	f000 fbc1 	bl	8009920 <__i2b>
 800919e:	4605      	mov	r5, r0
 80091a0:	b166      	cbz	r6, 80091bc <_dtoa_r+0x74c>
 80091a2:	9b06      	ldr	r3, [sp, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dd09      	ble.n	80091bc <_dtoa_r+0x74c>
 80091a8:	42b3      	cmp	r3, r6
 80091aa:	9a00      	ldr	r2, [sp, #0]
 80091ac:	bfa8      	it	ge
 80091ae:	4633      	movge	r3, r6
 80091b0:	1ad2      	subs	r2, r2, r3
 80091b2:	9200      	str	r2, [sp, #0]
 80091b4:	9a06      	ldr	r2, [sp, #24]
 80091b6:	1af6      	subs	r6, r6, r3
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	9306      	str	r3, [sp, #24]
 80091bc:	9b08      	ldr	r3, [sp, #32]
 80091be:	b30b      	cbz	r3, 8009204 <_dtoa_r+0x794>
 80091c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80c6 	beq.w	8009354 <_dtoa_r+0x8e4>
 80091c8:	2c00      	cmp	r4, #0
 80091ca:	f000 80c0 	beq.w	800934e <_dtoa_r+0x8de>
 80091ce:	4629      	mov	r1, r5
 80091d0:	4622      	mov	r2, r4
 80091d2:	4648      	mov	r0, r9
 80091d4:	f000 fc5c 	bl	8009a90 <__pow5mult>
 80091d8:	9a02      	ldr	r2, [sp, #8]
 80091da:	4601      	mov	r1, r0
 80091dc:	4605      	mov	r5, r0
 80091de:	4648      	mov	r0, r9
 80091e0:	f000 fbb4 	bl	800994c <__multiply>
 80091e4:	9902      	ldr	r1, [sp, #8]
 80091e6:	4680      	mov	r8, r0
 80091e8:	4648      	mov	r0, r9
 80091ea:	f000 fa9b 	bl	8009724 <_Bfree>
 80091ee:	9b08      	ldr	r3, [sp, #32]
 80091f0:	1b1b      	subs	r3, r3, r4
 80091f2:	9308      	str	r3, [sp, #32]
 80091f4:	f000 80b1 	beq.w	800935a <_dtoa_r+0x8ea>
 80091f8:	9a08      	ldr	r2, [sp, #32]
 80091fa:	4641      	mov	r1, r8
 80091fc:	4648      	mov	r0, r9
 80091fe:	f000 fc47 	bl	8009a90 <__pow5mult>
 8009202:	9002      	str	r0, [sp, #8]
 8009204:	2101      	movs	r1, #1
 8009206:	4648      	mov	r0, r9
 8009208:	f000 fb8a 	bl	8009920 <__i2b>
 800920c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800920e:	4604      	mov	r4, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 81d8 	beq.w	80095c6 <_dtoa_r+0xb56>
 8009216:	461a      	mov	r2, r3
 8009218:	4601      	mov	r1, r0
 800921a:	4648      	mov	r0, r9
 800921c:	f000 fc38 	bl	8009a90 <__pow5mult>
 8009220:	9b07      	ldr	r3, [sp, #28]
 8009222:	2b01      	cmp	r3, #1
 8009224:	4604      	mov	r4, r0
 8009226:	f300 809f 	bgt.w	8009368 <_dtoa_r+0x8f8>
 800922a:	9b04      	ldr	r3, [sp, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f040 8097 	bne.w	8009360 <_dtoa_r+0x8f0>
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009238:	2b00      	cmp	r3, #0
 800923a:	f040 8093 	bne.w	8009364 <_dtoa_r+0x8f4>
 800923e:	9b05      	ldr	r3, [sp, #20]
 8009240:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009244:	0d1b      	lsrs	r3, r3, #20
 8009246:	051b      	lsls	r3, r3, #20
 8009248:	b133      	cbz	r3, 8009258 <_dtoa_r+0x7e8>
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	3301      	adds	r3, #1
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	9b06      	ldr	r3, [sp, #24]
 8009252:	3301      	adds	r3, #1
 8009254:	9306      	str	r3, [sp, #24]
 8009256:	2301      	movs	r3, #1
 8009258:	9308      	str	r3, [sp, #32]
 800925a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 81b8 	beq.w	80095d2 <_dtoa_r+0xb62>
 8009262:	6923      	ldr	r3, [r4, #16]
 8009264:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009268:	6918      	ldr	r0, [r3, #16]
 800926a:	f000 fb0d 	bl	8009888 <__hi0bits>
 800926e:	f1c0 0020 	rsb	r0, r0, #32
 8009272:	9b06      	ldr	r3, [sp, #24]
 8009274:	4418      	add	r0, r3
 8009276:	f010 001f 	ands.w	r0, r0, #31
 800927a:	f000 8082 	beq.w	8009382 <_dtoa_r+0x912>
 800927e:	f1c0 0320 	rsb	r3, r0, #32
 8009282:	2b04      	cmp	r3, #4
 8009284:	dd73      	ble.n	800936e <_dtoa_r+0x8fe>
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	f1c0 001c 	rsb	r0, r0, #28
 800928c:	4403      	add	r3, r0
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	4403      	add	r3, r0
 8009294:	4406      	add	r6, r0
 8009296:	9306      	str	r3, [sp, #24]
 8009298:	9b00      	ldr	r3, [sp, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	dd05      	ble.n	80092aa <_dtoa_r+0x83a>
 800929e:	9902      	ldr	r1, [sp, #8]
 80092a0:	461a      	mov	r2, r3
 80092a2:	4648      	mov	r0, r9
 80092a4:	f000 fc4e 	bl	8009b44 <__lshift>
 80092a8:	9002      	str	r0, [sp, #8]
 80092aa:	9b06      	ldr	r3, [sp, #24]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	dd05      	ble.n	80092bc <_dtoa_r+0x84c>
 80092b0:	4621      	mov	r1, r4
 80092b2:	461a      	mov	r2, r3
 80092b4:	4648      	mov	r0, r9
 80092b6:	f000 fc45 	bl	8009b44 <__lshift>
 80092ba:	4604      	mov	r4, r0
 80092bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d061      	beq.n	8009386 <_dtoa_r+0x916>
 80092c2:	9802      	ldr	r0, [sp, #8]
 80092c4:	4621      	mov	r1, r4
 80092c6:	f000 fca9 	bl	8009c1c <__mcmp>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	da5b      	bge.n	8009386 <_dtoa_r+0x916>
 80092ce:	2300      	movs	r3, #0
 80092d0:	9902      	ldr	r1, [sp, #8]
 80092d2:	220a      	movs	r2, #10
 80092d4:	4648      	mov	r0, r9
 80092d6:	f000 fa47 	bl	8009768 <__multadd>
 80092da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092dc:	9002      	str	r0, [sp, #8]
 80092de:	f107 38ff 	add.w	r8, r7, #4294967295
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 8177 	beq.w	80095d6 <_dtoa_r+0xb66>
 80092e8:	4629      	mov	r1, r5
 80092ea:	2300      	movs	r3, #0
 80092ec:	220a      	movs	r2, #10
 80092ee:	4648      	mov	r0, r9
 80092f0:	f000 fa3a 	bl	8009768 <__multadd>
 80092f4:	f1bb 0f00 	cmp.w	fp, #0
 80092f8:	4605      	mov	r5, r0
 80092fa:	dc6f      	bgt.n	80093dc <_dtoa_r+0x96c>
 80092fc:	9b07      	ldr	r3, [sp, #28]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	dc49      	bgt.n	8009396 <_dtoa_r+0x926>
 8009302:	e06b      	b.n	80093dc <_dtoa_r+0x96c>
 8009304:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009306:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800930a:	e73c      	b.n	8009186 <_dtoa_r+0x716>
 800930c:	3fe00000 	.word	0x3fe00000
 8009310:	40240000 	.word	0x40240000
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	1e5c      	subs	r4, r3, #1
 8009318:	9b08      	ldr	r3, [sp, #32]
 800931a:	42a3      	cmp	r3, r4
 800931c:	db09      	blt.n	8009332 <_dtoa_r+0x8c2>
 800931e:	1b1c      	subs	r4, r3, r4
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f6bf af30 	bge.w	8009188 <_dtoa_r+0x718>
 8009328:	9b00      	ldr	r3, [sp, #0]
 800932a:	9a03      	ldr	r2, [sp, #12]
 800932c:	1a9e      	subs	r6, r3, r2
 800932e:	2300      	movs	r3, #0
 8009330:	e72b      	b.n	800918a <_dtoa_r+0x71a>
 8009332:	9b08      	ldr	r3, [sp, #32]
 8009334:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009336:	9408      	str	r4, [sp, #32]
 8009338:	1ae3      	subs	r3, r4, r3
 800933a:	441a      	add	r2, r3
 800933c:	9e00      	ldr	r6, [sp, #0]
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	920d      	str	r2, [sp, #52]	@ 0x34
 8009342:	2400      	movs	r4, #0
 8009344:	e721      	b.n	800918a <_dtoa_r+0x71a>
 8009346:	9c08      	ldr	r4, [sp, #32]
 8009348:	9e00      	ldr	r6, [sp, #0]
 800934a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800934c:	e728      	b.n	80091a0 <_dtoa_r+0x730>
 800934e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009352:	e751      	b.n	80091f8 <_dtoa_r+0x788>
 8009354:	9a08      	ldr	r2, [sp, #32]
 8009356:	9902      	ldr	r1, [sp, #8]
 8009358:	e750      	b.n	80091fc <_dtoa_r+0x78c>
 800935a:	f8cd 8008 	str.w	r8, [sp, #8]
 800935e:	e751      	b.n	8009204 <_dtoa_r+0x794>
 8009360:	2300      	movs	r3, #0
 8009362:	e779      	b.n	8009258 <_dtoa_r+0x7e8>
 8009364:	9b04      	ldr	r3, [sp, #16]
 8009366:	e777      	b.n	8009258 <_dtoa_r+0x7e8>
 8009368:	2300      	movs	r3, #0
 800936a:	9308      	str	r3, [sp, #32]
 800936c:	e779      	b.n	8009262 <_dtoa_r+0x7f2>
 800936e:	d093      	beq.n	8009298 <_dtoa_r+0x828>
 8009370:	9a00      	ldr	r2, [sp, #0]
 8009372:	331c      	adds	r3, #28
 8009374:	441a      	add	r2, r3
 8009376:	9200      	str	r2, [sp, #0]
 8009378:	9a06      	ldr	r2, [sp, #24]
 800937a:	441a      	add	r2, r3
 800937c:	441e      	add	r6, r3
 800937e:	9206      	str	r2, [sp, #24]
 8009380:	e78a      	b.n	8009298 <_dtoa_r+0x828>
 8009382:	4603      	mov	r3, r0
 8009384:	e7f4      	b.n	8009370 <_dtoa_r+0x900>
 8009386:	9b03      	ldr	r3, [sp, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	46b8      	mov	r8, r7
 800938c:	dc20      	bgt.n	80093d0 <_dtoa_r+0x960>
 800938e:	469b      	mov	fp, r3
 8009390:	9b07      	ldr	r3, [sp, #28]
 8009392:	2b02      	cmp	r3, #2
 8009394:	dd1e      	ble.n	80093d4 <_dtoa_r+0x964>
 8009396:	f1bb 0f00 	cmp.w	fp, #0
 800939a:	f47f adb1 	bne.w	8008f00 <_dtoa_r+0x490>
 800939e:	4621      	mov	r1, r4
 80093a0:	465b      	mov	r3, fp
 80093a2:	2205      	movs	r2, #5
 80093a4:	4648      	mov	r0, r9
 80093a6:	f000 f9df 	bl	8009768 <__multadd>
 80093aa:	4601      	mov	r1, r0
 80093ac:	4604      	mov	r4, r0
 80093ae:	9802      	ldr	r0, [sp, #8]
 80093b0:	f000 fc34 	bl	8009c1c <__mcmp>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f77f ada3 	ble.w	8008f00 <_dtoa_r+0x490>
 80093ba:	4656      	mov	r6, sl
 80093bc:	2331      	movs	r3, #49	@ 0x31
 80093be:	f806 3b01 	strb.w	r3, [r6], #1
 80093c2:	f108 0801 	add.w	r8, r8, #1
 80093c6:	e59f      	b.n	8008f08 <_dtoa_r+0x498>
 80093c8:	9c03      	ldr	r4, [sp, #12]
 80093ca:	46b8      	mov	r8, r7
 80093cc:	4625      	mov	r5, r4
 80093ce:	e7f4      	b.n	80093ba <_dtoa_r+0x94a>
 80093d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80093d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 8101 	beq.w	80095de <_dtoa_r+0xb6e>
 80093dc:	2e00      	cmp	r6, #0
 80093de:	dd05      	ble.n	80093ec <_dtoa_r+0x97c>
 80093e0:	4629      	mov	r1, r5
 80093e2:	4632      	mov	r2, r6
 80093e4:	4648      	mov	r0, r9
 80093e6:	f000 fbad 	bl	8009b44 <__lshift>
 80093ea:	4605      	mov	r5, r0
 80093ec:	9b08      	ldr	r3, [sp, #32]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d05c      	beq.n	80094ac <_dtoa_r+0xa3c>
 80093f2:	6869      	ldr	r1, [r5, #4]
 80093f4:	4648      	mov	r0, r9
 80093f6:	f000 f955 	bl	80096a4 <_Balloc>
 80093fa:	4606      	mov	r6, r0
 80093fc:	b928      	cbnz	r0, 800940a <_dtoa_r+0x99a>
 80093fe:	4b82      	ldr	r3, [pc, #520]	@ (8009608 <_dtoa_r+0xb98>)
 8009400:	4602      	mov	r2, r0
 8009402:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009406:	f7ff bb4a 	b.w	8008a9e <_dtoa_r+0x2e>
 800940a:	692a      	ldr	r2, [r5, #16]
 800940c:	3202      	adds	r2, #2
 800940e:	0092      	lsls	r2, r2, #2
 8009410:	f105 010c 	add.w	r1, r5, #12
 8009414:	300c      	adds	r0, #12
 8009416:	f7ff fa8c 	bl	8008932 <memcpy>
 800941a:	2201      	movs	r2, #1
 800941c:	4631      	mov	r1, r6
 800941e:	4648      	mov	r0, r9
 8009420:	f000 fb90 	bl	8009b44 <__lshift>
 8009424:	f10a 0301 	add.w	r3, sl, #1
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	eb0a 030b 	add.w	r3, sl, fp
 800942e:	9308      	str	r3, [sp, #32]
 8009430:	9b04      	ldr	r3, [sp, #16]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	462f      	mov	r7, r5
 8009438:	9306      	str	r3, [sp, #24]
 800943a:	4605      	mov	r5, r0
 800943c:	9b00      	ldr	r3, [sp, #0]
 800943e:	9802      	ldr	r0, [sp, #8]
 8009440:	4621      	mov	r1, r4
 8009442:	f103 3bff 	add.w	fp, r3, #4294967295
 8009446:	f7ff fa89 	bl	800895c <quorem>
 800944a:	4603      	mov	r3, r0
 800944c:	3330      	adds	r3, #48	@ 0x30
 800944e:	9003      	str	r0, [sp, #12]
 8009450:	4639      	mov	r1, r7
 8009452:	9802      	ldr	r0, [sp, #8]
 8009454:	9309      	str	r3, [sp, #36]	@ 0x24
 8009456:	f000 fbe1 	bl	8009c1c <__mcmp>
 800945a:	462a      	mov	r2, r5
 800945c:	9004      	str	r0, [sp, #16]
 800945e:	4621      	mov	r1, r4
 8009460:	4648      	mov	r0, r9
 8009462:	f000 fbf7 	bl	8009c54 <__mdiff>
 8009466:	68c2      	ldr	r2, [r0, #12]
 8009468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946a:	4606      	mov	r6, r0
 800946c:	bb02      	cbnz	r2, 80094b0 <_dtoa_r+0xa40>
 800946e:	4601      	mov	r1, r0
 8009470:	9802      	ldr	r0, [sp, #8]
 8009472:	f000 fbd3 	bl	8009c1c <__mcmp>
 8009476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009478:	4602      	mov	r2, r0
 800947a:	4631      	mov	r1, r6
 800947c:	4648      	mov	r0, r9
 800947e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009480:	9309      	str	r3, [sp, #36]	@ 0x24
 8009482:	f000 f94f 	bl	8009724 <_Bfree>
 8009486:	9b07      	ldr	r3, [sp, #28]
 8009488:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800948a:	9e00      	ldr	r6, [sp, #0]
 800948c:	ea42 0103 	orr.w	r1, r2, r3
 8009490:	9b06      	ldr	r3, [sp, #24]
 8009492:	4319      	orrs	r1, r3
 8009494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009496:	d10d      	bne.n	80094b4 <_dtoa_r+0xa44>
 8009498:	2b39      	cmp	r3, #57	@ 0x39
 800949a:	d027      	beq.n	80094ec <_dtoa_r+0xa7c>
 800949c:	9a04      	ldr	r2, [sp, #16]
 800949e:	2a00      	cmp	r2, #0
 80094a0:	dd01      	ble.n	80094a6 <_dtoa_r+0xa36>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	3331      	adds	r3, #49	@ 0x31
 80094a6:	f88b 3000 	strb.w	r3, [fp]
 80094aa:	e52e      	b.n	8008f0a <_dtoa_r+0x49a>
 80094ac:	4628      	mov	r0, r5
 80094ae:	e7b9      	b.n	8009424 <_dtoa_r+0x9b4>
 80094b0:	2201      	movs	r2, #1
 80094b2:	e7e2      	b.n	800947a <_dtoa_r+0xa0a>
 80094b4:	9904      	ldr	r1, [sp, #16]
 80094b6:	2900      	cmp	r1, #0
 80094b8:	db04      	blt.n	80094c4 <_dtoa_r+0xa54>
 80094ba:	9807      	ldr	r0, [sp, #28]
 80094bc:	4301      	orrs	r1, r0
 80094be:	9806      	ldr	r0, [sp, #24]
 80094c0:	4301      	orrs	r1, r0
 80094c2:	d120      	bne.n	8009506 <_dtoa_r+0xa96>
 80094c4:	2a00      	cmp	r2, #0
 80094c6:	ddee      	ble.n	80094a6 <_dtoa_r+0xa36>
 80094c8:	9902      	ldr	r1, [sp, #8]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	2201      	movs	r2, #1
 80094ce:	4648      	mov	r0, r9
 80094d0:	f000 fb38 	bl	8009b44 <__lshift>
 80094d4:	4621      	mov	r1, r4
 80094d6:	9002      	str	r0, [sp, #8]
 80094d8:	f000 fba0 	bl	8009c1c <__mcmp>
 80094dc:	2800      	cmp	r0, #0
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	dc02      	bgt.n	80094e8 <_dtoa_r+0xa78>
 80094e2:	d1e0      	bne.n	80094a6 <_dtoa_r+0xa36>
 80094e4:	07da      	lsls	r2, r3, #31
 80094e6:	d5de      	bpl.n	80094a6 <_dtoa_r+0xa36>
 80094e8:	2b39      	cmp	r3, #57	@ 0x39
 80094ea:	d1da      	bne.n	80094a2 <_dtoa_r+0xa32>
 80094ec:	2339      	movs	r3, #57	@ 0x39
 80094ee:	f88b 3000 	strb.w	r3, [fp]
 80094f2:	4633      	mov	r3, r6
 80094f4:	461e      	mov	r6, r3
 80094f6:	3b01      	subs	r3, #1
 80094f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80094fc:	2a39      	cmp	r2, #57	@ 0x39
 80094fe:	d04e      	beq.n	800959e <_dtoa_r+0xb2e>
 8009500:	3201      	adds	r2, #1
 8009502:	701a      	strb	r2, [r3, #0]
 8009504:	e501      	b.n	8008f0a <_dtoa_r+0x49a>
 8009506:	2a00      	cmp	r2, #0
 8009508:	dd03      	ble.n	8009512 <_dtoa_r+0xaa2>
 800950a:	2b39      	cmp	r3, #57	@ 0x39
 800950c:	d0ee      	beq.n	80094ec <_dtoa_r+0xa7c>
 800950e:	3301      	adds	r3, #1
 8009510:	e7c9      	b.n	80094a6 <_dtoa_r+0xa36>
 8009512:	9a00      	ldr	r2, [sp, #0]
 8009514:	9908      	ldr	r1, [sp, #32]
 8009516:	f802 3c01 	strb.w	r3, [r2, #-1]
 800951a:	428a      	cmp	r2, r1
 800951c:	d028      	beq.n	8009570 <_dtoa_r+0xb00>
 800951e:	9902      	ldr	r1, [sp, #8]
 8009520:	2300      	movs	r3, #0
 8009522:	220a      	movs	r2, #10
 8009524:	4648      	mov	r0, r9
 8009526:	f000 f91f 	bl	8009768 <__multadd>
 800952a:	42af      	cmp	r7, r5
 800952c:	9002      	str	r0, [sp, #8]
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	f04f 020a 	mov.w	r2, #10
 8009536:	4639      	mov	r1, r7
 8009538:	4648      	mov	r0, r9
 800953a:	d107      	bne.n	800954c <_dtoa_r+0xadc>
 800953c:	f000 f914 	bl	8009768 <__multadd>
 8009540:	4607      	mov	r7, r0
 8009542:	4605      	mov	r5, r0
 8009544:	9b00      	ldr	r3, [sp, #0]
 8009546:	3301      	adds	r3, #1
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	e777      	b.n	800943c <_dtoa_r+0x9cc>
 800954c:	f000 f90c 	bl	8009768 <__multadd>
 8009550:	4629      	mov	r1, r5
 8009552:	4607      	mov	r7, r0
 8009554:	2300      	movs	r3, #0
 8009556:	220a      	movs	r2, #10
 8009558:	4648      	mov	r0, r9
 800955a:	f000 f905 	bl	8009768 <__multadd>
 800955e:	4605      	mov	r5, r0
 8009560:	e7f0      	b.n	8009544 <_dtoa_r+0xad4>
 8009562:	f1bb 0f00 	cmp.w	fp, #0
 8009566:	bfcc      	ite	gt
 8009568:	465e      	movgt	r6, fp
 800956a:	2601      	movle	r6, #1
 800956c:	4456      	add	r6, sl
 800956e:	2700      	movs	r7, #0
 8009570:	9902      	ldr	r1, [sp, #8]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2201      	movs	r2, #1
 8009576:	4648      	mov	r0, r9
 8009578:	f000 fae4 	bl	8009b44 <__lshift>
 800957c:	4621      	mov	r1, r4
 800957e:	9002      	str	r0, [sp, #8]
 8009580:	f000 fb4c 	bl	8009c1c <__mcmp>
 8009584:	2800      	cmp	r0, #0
 8009586:	dcb4      	bgt.n	80094f2 <_dtoa_r+0xa82>
 8009588:	d102      	bne.n	8009590 <_dtoa_r+0xb20>
 800958a:	9b00      	ldr	r3, [sp, #0]
 800958c:	07db      	lsls	r3, r3, #31
 800958e:	d4b0      	bmi.n	80094f2 <_dtoa_r+0xa82>
 8009590:	4633      	mov	r3, r6
 8009592:	461e      	mov	r6, r3
 8009594:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009598:	2a30      	cmp	r2, #48	@ 0x30
 800959a:	d0fa      	beq.n	8009592 <_dtoa_r+0xb22>
 800959c:	e4b5      	b.n	8008f0a <_dtoa_r+0x49a>
 800959e:	459a      	cmp	sl, r3
 80095a0:	d1a8      	bne.n	80094f4 <_dtoa_r+0xa84>
 80095a2:	2331      	movs	r3, #49	@ 0x31
 80095a4:	f108 0801 	add.w	r8, r8, #1
 80095a8:	f88a 3000 	strb.w	r3, [sl]
 80095ac:	e4ad      	b.n	8008f0a <_dtoa_r+0x49a>
 80095ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800960c <_dtoa_r+0xb9c>
 80095b4:	b11b      	cbz	r3, 80095be <_dtoa_r+0xb4e>
 80095b6:	f10a 0308 	add.w	r3, sl, #8
 80095ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	4650      	mov	r0, sl
 80095c0:	b017      	add	sp, #92	@ 0x5c
 80095c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c6:	9b07      	ldr	r3, [sp, #28]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	f77f ae2e 	ble.w	800922a <_dtoa_r+0x7ba>
 80095ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095d0:	9308      	str	r3, [sp, #32]
 80095d2:	2001      	movs	r0, #1
 80095d4:	e64d      	b.n	8009272 <_dtoa_r+0x802>
 80095d6:	f1bb 0f00 	cmp.w	fp, #0
 80095da:	f77f aed9 	ble.w	8009390 <_dtoa_r+0x920>
 80095de:	4656      	mov	r6, sl
 80095e0:	9802      	ldr	r0, [sp, #8]
 80095e2:	4621      	mov	r1, r4
 80095e4:	f7ff f9ba 	bl	800895c <quorem>
 80095e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80095ec:	f806 3b01 	strb.w	r3, [r6], #1
 80095f0:	eba6 020a 	sub.w	r2, r6, sl
 80095f4:	4593      	cmp	fp, r2
 80095f6:	ddb4      	ble.n	8009562 <_dtoa_r+0xaf2>
 80095f8:	9902      	ldr	r1, [sp, #8]
 80095fa:	2300      	movs	r3, #0
 80095fc:	220a      	movs	r2, #10
 80095fe:	4648      	mov	r0, r9
 8009600:	f000 f8b2 	bl	8009768 <__multadd>
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	e7eb      	b.n	80095e0 <_dtoa_r+0xb70>
 8009608:	0800beca 	.word	0x0800beca
 800960c:	0800be4e 	.word	0x0800be4e

08009610 <_free_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4605      	mov	r5, r0
 8009614:	2900      	cmp	r1, #0
 8009616:	d041      	beq.n	800969c <_free_r+0x8c>
 8009618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800961c:	1f0c      	subs	r4, r1, #4
 800961e:	2b00      	cmp	r3, #0
 8009620:	bfb8      	it	lt
 8009622:	18e4      	addlt	r4, r4, r3
 8009624:	f7fd ffde 	bl	80075e4 <__malloc_lock>
 8009628:	4a1d      	ldr	r2, [pc, #116]	@ (80096a0 <_free_r+0x90>)
 800962a:	6813      	ldr	r3, [r2, #0]
 800962c:	b933      	cbnz	r3, 800963c <_free_r+0x2c>
 800962e:	6063      	str	r3, [r4, #4]
 8009630:	6014      	str	r4, [r2, #0]
 8009632:	4628      	mov	r0, r5
 8009634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009638:	f7fd bfda 	b.w	80075f0 <__malloc_unlock>
 800963c:	42a3      	cmp	r3, r4
 800963e:	d908      	bls.n	8009652 <_free_r+0x42>
 8009640:	6820      	ldr	r0, [r4, #0]
 8009642:	1821      	adds	r1, r4, r0
 8009644:	428b      	cmp	r3, r1
 8009646:	bf01      	itttt	eq
 8009648:	6819      	ldreq	r1, [r3, #0]
 800964a:	685b      	ldreq	r3, [r3, #4]
 800964c:	1809      	addeq	r1, r1, r0
 800964e:	6021      	streq	r1, [r4, #0]
 8009650:	e7ed      	b.n	800962e <_free_r+0x1e>
 8009652:	461a      	mov	r2, r3
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	b10b      	cbz	r3, 800965c <_free_r+0x4c>
 8009658:	42a3      	cmp	r3, r4
 800965a:	d9fa      	bls.n	8009652 <_free_r+0x42>
 800965c:	6811      	ldr	r1, [r2, #0]
 800965e:	1850      	adds	r0, r2, r1
 8009660:	42a0      	cmp	r0, r4
 8009662:	d10b      	bne.n	800967c <_free_r+0x6c>
 8009664:	6820      	ldr	r0, [r4, #0]
 8009666:	4401      	add	r1, r0
 8009668:	1850      	adds	r0, r2, r1
 800966a:	4283      	cmp	r3, r0
 800966c:	6011      	str	r1, [r2, #0]
 800966e:	d1e0      	bne.n	8009632 <_free_r+0x22>
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	6053      	str	r3, [r2, #4]
 8009676:	4408      	add	r0, r1
 8009678:	6010      	str	r0, [r2, #0]
 800967a:	e7da      	b.n	8009632 <_free_r+0x22>
 800967c:	d902      	bls.n	8009684 <_free_r+0x74>
 800967e:	230c      	movs	r3, #12
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	e7d6      	b.n	8009632 <_free_r+0x22>
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	1821      	adds	r1, r4, r0
 8009688:	428b      	cmp	r3, r1
 800968a:	bf04      	itt	eq
 800968c:	6819      	ldreq	r1, [r3, #0]
 800968e:	685b      	ldreq	r3, [r3, #4]
 8009690:	6063      	str	r3, [r4, #4]
 8009692:	bf04      	itt	eq
 8009694:	1809      	addeq	r1, r1, r0
 8009696:	6021      	streq	r1, [r4, #0]
 8009698:	6054      	str	r4, [r2, #4]
 800969a:	e7ca      	b.n	8009632 <_free_r+0x22>
 800969c:	bd38      	pop	{r3, r4, r5, pc}
 800969e:	bf00      	nop
 80096a0:	20000778 	.word	0x20000778

080096a4 <_Balloc>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	69c6      	ldr	r6, [r0, #28]
 80096a8:	4604      	mov	r4, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	b976      	cbnz	r6, 80096cc <_Balloc+0x28>
 80096ae:	2010      	movs	r0, #16
 80096b0:	f7fd fee6 	bl	8007480 <malloc>
 80096b4:	4602      	mov	r2, r0
 80096b6:	61e0      	str	r0, [r4, #28]
 80096b8:	b920      	cbnz	r0, 80096c4 <_Balloc+0x20>
 80096ba:	4b18      	ldr	r3, [pc, #96]	@ (800971c <_Balloc+0x78>)
 80096bc:	4818      	ldr	r0, [pc, #96]	@ (8009720 <_Balloc+0x7c>)
 80096be:	216b      	movs	r1, #107	@ 0x6b
 80096c0:	f001 fd4e 	bl	800b160 <__assert_func>
 80096c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096c8:	6006      	str	r6, [r0, #0]
 80096ca:	60c6      	str	r6, [r0, #12]
 80096cc:	69e6      	ldr	r6, [r4, #28]
 80096ce:	68f3      	ldr	r3, [r6, #12]
 80096d0:	b183      	cbz	r3, 80096f4 <_Balloc+0x50>
 80096d2:	69e3      	ldr	r3, [r4, #28]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096da:	b9b8      	cbnz	r0, 800970c <_Balloc+0x68>
 80096dc:	2101      	movs	r1, #1
 80096de:	fa01 f605 	lsl.w	r6, r1, r5
 80096e2:	1d72      	adds	r2, r6, #5
 80096e4:	0092      	lsls	r2, r2, #2
 80096e6:	4620      	mov	r0, r4
 80096e8:	f001 fd58 	bl	800b19c <_calloc_r>
 80096ec:	b160      	cbz	r0, 8009708 <_Balloc+0x64>
 80096ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096f2:	e00e      	b.n	8009712 <_Balloc+0x6e>
 80096f4:	2221      	movs	r2, #33	@ 0x21
 80096f6:	2104      	movs	r1, #4
 80096f8:	4620      	mov	r0, r4
 80096fa:	f001 fd4f 	bl	800b19c <_calloc_r>
 80096fe:	69e3      	ldr	r3, [r4, #28]
 8009700:	60f0      	str	r0, [r6, #12]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e4      	bne.n	80096d2 <_Balloc+0x2e>
 8009708:	2000      	movs	r0, #0
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	6802      	ldr	r2, [r0, #0]
 800970e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009712:	2300      	movs	r3, #0
 8009714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009718:	e7f7      	b.n	800970a <_Balloc+0x66>
 800971a:	bf00      	nop
 800971c:	0800be5b 	.word	0x0800be5b
 8009720:	0800bedb 	.word	0x0800bedb

08009724 <_Bfree>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	69c6      	ldr	r6, [r0, #28]
 8009728:	4605      	mov	r5, r0
 800972a:	460c      	mov	r4, r1
 800972c:	b976      	cbnz	r6, 800974c <_Bfree+0x28>
 800972e:	2010      	movs	r0, #16
 8009730:	f7fd fea6 	bl	8007480 <malloc>
 8009734:	4602      	mov	r2, r0
 8009736:	61e8      	str	r0, [r5, #28]
 8009738:	b920      	cbnz	r0, 8009744 <_Bfree+0x20>
 800973a:	4b09      	ldr	r3, [pc, #36]	@ (8009760 <_Bfree+0x3c>)
 800973c:	4809      	ldr	r0, [pc, #36]	@ (8009764 <_Bfree+0x40>)
 800973e:	218f      	movs	r1, #143	@ 0x8f
 8009740:	f001 fd0e 	bl	800b160 <__assert_func>
 8009744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009748:	6006      	str	r6, [r0, #0]
 800974a:	60c6      	str	r6, [r0, #12]
 800974c:	b13c      	cbz	r4, 800975e <_Bfree+0x3a>
 800974e:	69eb      	ldr	r3, [r5, #28]
 8009750:	6862      	ldr	r2, [r4, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009758:	6021      	str	r1, [r4, #0]
 800975a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	0800be5b 	.word	0x0800be5b
 8009764:	0800bedb 	.word	0x0800bedb

08009768 <__multadd>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	690d      	ldr	r5, [r1, #16]
 800976e:	4607      	mov	r7, r0
 8009770:	460c      	mov	r4, r1
 8009772:	461e      	mov	r6, r3
 8009774:	f101 0c14 	add.w	ip, r1, #20
 8009778:	2000      	movs	r0, #0
 800977a:	f8dc 3000 	ldr.w	r3, [ip]
 800977e:	b299      	uxth	r1, r3
 8009780:	fb02 6101 	mla	r1, r2, r1, r6
 8009784:	0c1e      	lsrs	r6, r3, #16
 8009786:	0c0b      	lsrs	r3, r1, #16
 8009788:	fb02 3306 	mla	r3, r2, r6, r3
 800978c:	b289      	uxth	r1, r1
 800978e:	3001      	adds	r0, #1
 8009790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009794:	4285      	cmp	r5, r0
 8009796:	f84c 1b04 	str.w	r1, [ip], #4
 800979a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800979e:	dcec      	bgt.n	800977a <__multadd+0x12>
 80097a0:	b30e      	cbz	r6, 80097e6 <__multadd+0x7e>
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	42ab      	cmp	r3, r5
 80097a6:	dc19      	bgt.n	80097dc <__multadd+0x74>
 80097a8:	6861      	ldr	r1, [r4, #4]
 80097aa:	4638      	mov	r0, r7
 80097ac:	3101      	adds	r1, #1
 80097ae:	f7ff ff79 	bl	80096a4 <_Balloc>
 80097b2:	4680      	mov	r8, r0
 80097b4:	b928      	cbnz	r0, 80097c2 <__multadd+0x5a>
 80097b6:	4602      	mov	r2, r0
 80097b8:	4b0c      	ldr	r3, [pc, #48]	@ (80097ec <__multadd+0x84>)
 80097ba:	480d      	ldr	r0, [pc, #52]	@ (80097f0 <__multadd+0x88>)
 80097bc:	21ba      	movs	r1, #186	@ 0xba
 80097be:	f001 fccf 	bl	800b160 <__assert_func>
 80097c2:	6922      	ldr	r2, [r4, #16]
 80097c4:	3202      	adds	r2, #2
 80097c6:	f104 010c 	add.w	r1, r4, #12
 80097ca:	0092      	lsls	r2, r2, #2
 80097cc:	300c      	adds	r0, #12
 80097ce:	f7ff f8b0 	bl	8008932 <memcpy>
 80097d2:	4621      	mov	r1, r4
 80097d4:	4638      	mov	r0, r7
 80097d6:	f7ff ffa5 	bl	8009724 <_Bfree>
 80097da:	4644      	mov	r4, r8
 80097dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097e0:	3501      	adds	r5, #1
 80097e2:	615e      	str	r6, [r3, #20]
 80097e4:	6125      	str	r5, [r4, #16]
 80097e6:	4620      	mov	r0, r4
 80097e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ec:	0800beca 	.word	0x0800beca
 80097f0:	0800bedb 	.word	0x0800bedb

080097f4 <__s2b>:
 80097f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f8:	460c      	mov	r4, r1
 80097fa:	4615      	mov	r5, r2
 80097fc:	461f      	mov	r7, r3
 80097fe:	2209      	movs	r2, #9
 8009800:	3308      	adds	r3, #8
 8009802:	4606      	mov	r6, r0
 8009804:	fb93 f3f2 	sdiv	r3, r3, r2
 8009808:	2100      	movs	r1, #0
 800980a:	2201      	movs	r2, #1
 800980c:	429a      	cmp	r2, r3
 800980e:	db09      	blt.n	8009824 <__s2b+0x30>
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff ff47 	bl	80096a4 <_Balloc>
 8009816:	b940      	cbnz	r0, 800982a <__s2b+0x36>
 8009818:	4602      	mov	r2, r0
 800981a:	4b19      	ldr	r3, [pc, #100]	@ (8009880 <__s2b+0x8c>)
 800981c:	4819      	ldr	r0, [pc, #100]	@ (8009884 <__s2b+0x90>)
 800981e:	21d3      	movs	r1, #211	@ 0xd3
 8009820:	f001 fc9e 	bl	800b160 <__assert_func>
 8009824:	0052      	lsls	r2, r2, #1
 8009826:	3101      	adds	r1, #1
 8009828:	e7f0      	b.n	800980c <__s2b+0x18>
 800982a:	9b08      	ldr	r3, [sp, #32]
 800982c:	6143      	str	r3, [r0, #20]
 800982e:	2d09      	cmp	r5, #9
 8009830:	f04f 0301 	mov.w	r3, #1
 8009834:	6103      	str	r3, [r0, #16]
 8009836:	dd16      	ble.n	8009866 <__s2b+0x72>
 8009838:	f104 0909 	add.w	r9, r4, #9
 800983c:	46c8      	mov	r8, r9
 800983e:	442c      	add	r4, r5
 8009840:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009844:	4601      	mov	r1, r0
 8009846:	3b30      	subs	r3, #48	@ 0x30
 8009848:	220a      	movs	r2, #10
 800984a:	4630      	mov	r0, r6
 800984c:	f7ff ff8c 	bl	8009768 <__multadd>
 8009850:	45a0      	cmp	r8, r4
 8009852:	d1f5      	bne.n	8009840 <__s2b+0x4c>
 8009854:	f1a5 0408 	sub.w	r4, r5, #8
 8009858:	444c      	add	r4, r9
 800985a:	1b2d      	subs	r5, r5, r4
 800985c:	1963      	adds	r3, r4, r5
 800985e:	42bb      	cmp	r3, r7
 8009860:	db04      	blt.n	800986c <__s2b+0x78>
 8009862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009866:	340a      	adds	r4, #10
 8009868:	2509      	movs	r5, #9
 800986a:	e7f6      	b.n	800985a <__s2b+0x66>
 800986c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009870:	4601      	mov	r1, r0
 8009872:	3b30      	subs	r3, #48	@ 0x30
 8009874:	220a      	movs	r2, #10
 8009876:	4630      	mov	r0, r6
 8009878:	f7ff ff76 	bl	8009768 <__multadd>
 800987c:	e7ee      	b.n	800985c <__s2b+0x68>
 800987e:	bf00      	nop
 8009880:	0800beca 	.word	0x0800beca
 8009884:	0800bedb 	.word	0x0800bedb

08009888 <__hi0bits>:
 8009888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800988c:	4603      	mov	r3, r0
 800988e:	bf36      	itet	cc
 8009890:	0403      	lslcc	r3, r0, #16
 8009892:	2000      	movcs	r0, #0
 8009894:	2010      	movcc	r0, #16
 8009896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800989a:	bf3c      	itt	cc
 800989c:	021b      	lslcc	r3, r3, #8
 800989e:	3008      	addcc	r0, #8
 80098a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098a4:	bf3c      	itt	cc
 80098a6:	011b      	lslcc	r3, r3, #4
 80098a8:	3004      	addcc	r0, #4
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ae:	bf3c      	itt	cc
 80098b0:	009b      	lslcc	r3, r3, #2
 80098b2:	3002      	addcc	r0, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	db05      	blt.n	80098c4 <__hi0bits+0x3c>
 80098b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80098bc:	f100 0001 	add.w	r0, r0, #1
 80098c0:	bf08      	it	eq
 80098c2:	2020      	moveq	r0, #32
 80098c4:	4770      	bx	lr

080098c6 <__lo0bits>:
 80098c6:	6803      	ldr	r3, [r0, #0]
 80098c8:	4602      	mov	r2, r0
 80098ca:	f013 0007 	ands.w	r0, r3, #7
 80098ce:	d00b      	beq.n	80098e8 <__lo0bits+0x22>
 80098d0:	07d9      	lsls	r1, r3, #31
 80098d2:	d421      	bmi.n	8009918 <__lo0bits+0x52>
 80098d4:	0798      	lsls	r0, r3, #30
 80098d6:	bf49      	itett	mi
 80098d8:	085b      	lsrmi	r3, r3, #1
 80098da:	089b      	lsrpl	r3, r3, #2
 80098dc:	2001      	movmi	r0, #1
 80098de:	6013      	strmi	r3, [r2, #0]
 80098e0:	bf5c      	itt	pl
 80098e2:	6013      	strpl	r3, [r2, #0]
 80098e4:	2002      	movpl	r0, #2
 80098e6:	4770      	bx	lr
 80098e8:	b299      	uxth	r1, r3
 80098ea:	b909      	cbnz	r1, 80098f0 <__lo0bits+0x2a>
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	2010      	movs	r0, #16
 80098f0:	b2d9      	uxtb	r1, r3
 80098f2:	b909      	cbnz	r1, 80098f8 <__lo0bits+0x32>
 80098f4:	3008      	adds	r0, #8
 80098f6:	0a1b      	lsrs	r3, r3, #8
 80098f8:	0719      	lsls	r1, r3, #28
 80098fa:	bf04      	itt	eq
 80098fc:	091b      	lsreq	r3, r3, #4
 80098fe:	3004      	addeq	r0, #4
 8009900:	0799      	lsls	r1, r3, #30
 8009902:	bf04      	itt	eq
 8009904:	089b      	lsreq	r3, r3, #2
 8009906:	3002      	addeq	r0, #2
 8009908:	07d9      	lsls	r1, r3, #31
 800990a:	d403      	bmi.n	8009914 <__lo0bits+0x4e>
 800990c:	085b      	lsrs	r3, r3, #1
 800990e:	f100 0001 	add.w	r0, r0, #1
 8009912:	d003      	beq.n	800991c <__lo0bits+0x56>
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	4770      	bx	lr
 8009918:	2000      	movs	r0, #0
 800991a:	4770      	bx	lr
 800991c:	2020      	movs	r0, #32
 800991e:	4770      	bx	lr

08009920 <__i2b>:
 8009920:	b510      	push	{r4, lr}
 8009922:	460c      	mov	r4, r1
 8009924:	2101      	movs	r1, #1
 8009926:	f7ff febd 	bl	80096a4 <_Balloc>
 800992a:	4602      	mov	r2, r0
 800992c:	b928      	cbnz	r0, 800993a <__i2b+0x1a>
 800992e:	4b05      	ldr	r3, [pc, #20]	@ (8009944 <__i2b+0x24>)
 8009930:	4805      	ldr	r0, [pc, #20]	@ (8009948 <__i2b+0x28>)
 8009932:	f240 1145 	movw	r1, #325	@ 0x145
 8009936:	f001 fc13 	bl	800b160 <__assert_func>
 800993a:	2301      	movs	r3, #1
 800993c:	6144      	str	r4, [r0, #20]
 800993e:	6103      	str	r3, [r0, #16]
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	0800beca 	.word	0x0800beca
 8009948:	0800bedb 	.word	0x0800bedb

0800994c <__multiply>:
 800994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009950:	4617      	mov	r7, r2
 8009952:	690a      	ldr	r2, [r1, #16]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	429a      	cmp	r2, r3
 8009958:	bfa8      	it	ge
 800995a:	463b      	movge	r3, r7
 800995c:	4689      	mov	r9, r1
 800995e:	bfa4      	itt	ge
 8009960:	460f      	movge	r7, r1
 8009962:	4699      	movge	r9, r3
 8009964:	693d      	ldr	r5, [r7, #16]
 8009966:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	eb05 060a 	add.w	r6, r5, sl
 8009972:	42b3      	cmp	r3, r6
 8009974:	b085      	sub	sp, #20
 8009976:	bfb8      	it	lt
 8009978:	3101      	addlt	r1, #1
 800997a:	f7ff fe93 	bl	80096a4 <_Balloc>
 800997e:	b930      	cbnz	r0, 800998e <__multiply+0x42>
 8009980:	4602      	mov	r2, r0
 8009982:	4b41      	ldr	r3, [pc, #260]	@ (8009a88 <__multiply+0x13c>)
 8009984:	4841      	ldr	r0, [pc, #260]	@ (8009a8c <__multiply+0x140>)
 8009986:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800998a:	f001 fbe9 	bl	800b160 <__assert_func>
 800998e:	f100 0414 	add.w	r4, r0, #20
 8009992:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009996:	4623      	mov	r3, r4
 8009998:	2200      	movs	r2, #0
 800999a:	4573      	cmp	r3, lr
 800999c:	d320      	bcc.n	80099e0 <__multiply+0x94>
 800999e:	f107 0814 	add.w	r8, r7, #20
 80099a2:	f109 0114 	add.w	r1, r9, #20
 80099a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80099aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80099ae:	9302      	str	r3, [sp, #8]
 80099b0:	1beb      	subs	r3, r5, r7
 80099b2:	3b15      	subs	r3, #21
 80099b4:	f023 0303 	bic.w	r3, r3, #3
 80099b8:	3304      	adds	r3, #4
 80099ba:	3715      	adds	r7, #21
 80099bc:	42bd      	cmp	r5, r7
 80099be:	bf38      	it	cc
 80099c0:	2304      	movcc	r3, #4
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	9b02      	ldr	r3, [sp, #8]
 80099c6:	9103      	str	r1, [sp, #12]
 80099c8:	428b      	cmp	r3, r1
 80099ca:	d80c      	bhi.n	80099e6 <__multiply+0x9a>
 80099cc:	2e00      	cmp	r6, #0
 80099ce:	dd03      	ble.n	80099d8 <__multiply+0x8c>
 80099d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d055      	beq.n	8009a84 <__multiply+0x138>
 80099d8:	6106      	str	r6, [r0, #16]
 80099da:	b005      	add	sp, #20
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	f843 2b04 	str.w	r2, [r3], #4
 80099e4:	e7d9      	b.n	800999a <__multiply+0x4e>
 80099e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80099ea:	f1ba 0f00 	cmp.w	sl, #0
 80099ee:	d01f      	beq.n	8009a30 <__multiply+0xe4>
 80099f0:	46c4      	mov	ip, r8
 80099f2:	46a1      	mov	r9, r4
 80099f4:	2700      	movs	r7, #0
 80099f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099fa:	f8d9 3000 	ldr.w	r3, [r9]
 80099fe:	fa1f fb82 	uxth.w	fp, r2
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a08:	443b      	add	r3, r7
 8009a0a:	f8d9 7000 	ldr.w	r7, [r9]
 8009a0e:	0c12      	lsrs	r2, r2, #16
 8009a10:	0c3f      	lsrs	r7, r7, #16
 8009a12:	fb0a 7202 	mla	r2, sl, r2, r7
 8009a16:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a20:	4565      	cmp	r5, ip
 8009a22:	f849 3b04 	str.w	r3, [r9], #4
 8009a26:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009a2a:	d8e4      	bhi.n	80099f6 <__multiply+0xaa>
 8009a2c:	9b01      	ldr	r3, [sp, #4]
 8009a2e:	50e7      	str	r7, [r4, r3]
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a36:	3104      	adds	r1, #4
 8009a38:	f1b9 0f00 	cmp.w	r9, #0
 8009a3c:	d020      	beq.n	8009a80 <__multiply+0x134>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	4647      	mov	r7, r8
 8009a42:	46a4      	mov	ip, r4
 8009a44:	f04f 0a00 	mov.w	sl, #0
 8009a48:	f8b7 b000 	ldrh.w	fp, [r7]
 8009a4c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009a50:	fb09 220b 	mla	r2, r9, fp, r2
 8009a54:	4452      	add	r2, sl
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a5c:	f84c 3b04 	str.w	r3, [ip], #4
 8009a60:	f857 3b04 	ldr.w	r3, [r7], #4
 8009a64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a68:	f8bc 3000 	ldrh.w	r3, [ip]
 8009a6c:	fb09 330a 	mla	r3, r9, sl, r3
 8009a70:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009a74:	42bd      	cmp	r5, r7
 8009a76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a7a:	d8e5      	bhi.n	8009a48 <__multiply+0xfc>
 8009a7c:	9a01      	ldr	r2, [sp, #4]
 8009a7e:	50a3      	str	r3, [r4, r2]
 8009a80:	3404      	adds	r4, #4
 8009a82:	e79f      	b.n	80099c4 <__multiply+0x78>
 8009a84:	3e01      	subs	r6, #1
 8009a86:	e7a1      	b.n	80099cc <__multiply+0x80>
 8009a88:	0800beca 	.word	0x0800beca
 8009a8c:	0800bedb 	.word	0x0800bedb

08009a90 <__pow5mult>:
 8009a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a94:	4615      	mov	r5, r2
 8009a96:	f012 0203 	ands.w	r2, r2, #3
 8009a9a:	4607      	mov	r7, r0
 8009a9c:	460e      	mov	r6, r1
 8009a9e:	d007      	beq.n	8009ab0 <__pow5mult+0x20>
 8009aa0:	4c25      	ldr	r4, [pc, #148]	@ (8009b38 <__pow5mult+0xa8>)
 8009aa2:	3a01      	subs	r2, #1
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aaa:	f7ff fe5d 	bl	8009768 <__multadd>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	10ad      	asrs	r5, r5, #2
 8009ab2:	d03d      	beq.n	8009b30 <__pow5mult+0xa0>
 8009ab4:	69fc      	ldr	r4, [r7, #28]
 8009ab6:	b97c      	cbnz	r4, 8009ad8 <__pow5mult+0x48>
 8009ab8:	2010      	movs	r0, #16
 8009aba:	f7fd fce1 	bl	8007480 <malloc>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	61f8      	str	r0, [r7, #28]
 8009ac2:	b928      	cbnz	r0, 8009ad0 <__pow5mult+0x40>
 8009ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8009b3c <__pow5mult+0xac>)
 8009ac6:	481e      	ldr	r0, [pc, #120]	@ (8009b40 <__pow5mult+0xb0>)
 8009ac8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009acc:	f001 fb48 	bl	800b160 <__assert_func>
 8009ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ad4:	6004      	str	r4, [r0, #0]
 8009ad6:	60c4      	str	r4, [r0, #12]
 8009ad8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ae0:	b94c      	cbnz	r4, 8009af6 <__pow5mult+0x66>
 8009ae2:	f240 2171 	movw	r1, #625	@ 0x271
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	f7ff ff1a 	bl	8009920 <__i2b>
 8009aec:	2300      	movs	r3, #0
 8009aee:	f8c8 0008 	str.w	r0, [r8, #8]
 8009af2:	4604      	mov	r4, r0
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	f04f 0900 	mov.w	r9, #0
 8009afa:	07eb      	lsls	r3, r5, #31
 8009afc:	d50a      	bpl.n	8009b14 <__pow5mult+0x84>
 8009afe:	4631      	mov	r1, r6
 8009b00:	4622      	mov	r2, r4
 8009b02:	4638      	mov	r0, r7
 8009b04:	f7ff ff22 	bl	800994c <__multiply>
 8009b08:	4631      	mov	r1, r6
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f7ff fe09 	bl	8009724 <_Bfree>
 8009b12:	4646      	mov	r6, r8
 8009b14:	106d      	asrs	r5, r5, #1
 8009b16:	d00b      	beq.n	8009b30 <__pow5mult+0xa0>
 8009b18:	6820      	ldr	r0, [r4, #0]
 8009b1a:	b938      	cbnz	r0, 8009b2c <__pow5mult+0x9c>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4638      	mov	r0, r7
 8009b22:	f7ff ff13 	bl	800994c <__multiply>
 8009b26:	6020      	str	r0, [r4, #0]
 8009b28:	f8c0 9000 	str.w	r9, [r0]
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	e7e4      	b.n	8009afa <__pow5mult+0x6a>
 8009b30:	4630      	mov	r0, r6
 8009b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b36:	bf00      	nop
 8009b38:	0800bfec 	.word	0x0800bfec
 8009b3c:	0800be5b 	.word	0x0800be5b
 8009b40:	0800bedb 	.word	0x0800bedb

08009b44 <__lshift>:
 8009b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b48:	460c      	mov	r4, r1
 8009b4a:	6849      	ldr	r1, [r1, #4]
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	4607      	mov	r7, r0
 8009b56:	4691      	mov	r9, r2
 8009b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b5c:	f108 0601 	add.w	r6, r8, #1
 8009b60:	42b3      	cmp	r3, r6
 8009b62:	db0b      	blt.n	8009b7c <__lshift+0x38>
 8009b64:	4638      	mov	r0, r7
 8009b66:	f7ff fd9d 	bl	80096a4 <_Balloc>
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	b948      	cbnz	r0, 8009b82 <__lshift+0x3e>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	4b28      	ldr	r3, [pc, #160]	@ (8009c14 <__lshift+0xd0>)
 8009b72:	4829      	ldr	r0, [pc, #164]	@ (8009c18 <__lshift+0xd4>)
 8009b74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b78:	f001 faf2 	bl	800b160 <__assert_func>
 8009b7c:	3101      	adds	r1, #1
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	e7ee      	b.n	8009b60 <__lshift+0x1c>
 8009b82:	2300      	movs	r3, #0
 8009b84:	f100 0114 	add.w	r1, r0, #20
 8009b88:	f100 0210 	add.w	r2, r0, #16
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	4553      	cmp	r3, sl
 8009b90:	db33      	blt.n	8009bfa <__lshift+0xb6>
 8009b92:	6920      	ldr	r0, [r4, #16]
 8009b94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b98:	f104 0314 	add.w	r3, r4, #20
 8009b9c:	f019 091f 	ands.w	r9, r9, #31
 8009ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ba8:	d02b      	beq.n	8009c02 <__lshift+0xbe>
 8009baa:	f1c9 0e20 	rsb	lr, r9, #32
 8009bae:	468a      	mov	sl, r1
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	fa00 f009 	lsl.w	r0, r0, r9
 8009bb8:	4310      	orrs	r0, r2
 8009bba:	f84a 0b04 	str.w	r0, [sl], #4
 8009bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc2:	459c      	cmp	ip, r3
 8009bc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bc8:	d8f3      	bhi.n	8009bb2 <__lshift+0x6e>
 8009bca:	ebac 0304 	sub.w	r3, ip, r4
 8009bce:	3b15      	subs	r3, #21
 8009bd0:	f023 0303 	bic.w	r3, r3, #3
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	f104 0015 	add.w	r0, r4, #21
 8009bda:	4560      	cmp	r0, ip
 8009bdc:	bf88      	it	hi
 8009bde:	2304      	movhi	r3, #4
 8009be0:	50ca      	str	r2, [r1, r3]
 8009be2:	b10a      	cbz	r2, 8009be8 <__lshift+0xa4>
 8009be4:	f108 0602 	add.w	r6, r8, #2
 8009be8:	3e01      	subs	r6, #1
 8009bea:	4638      	mov	r0, r7
 8009bec:	612e      	str	r6, [r5, #16]
 8009bee:	4621      	mov	r1, r4
 8009bf0:	f7ff fd98 	bl	8009724 <_Bfree>
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bfe:	3301      	adds	r3, #1
 8009c00:	e7c5      	b.n	8009b8e <__lshift+0x4a>
 8009c02:	3904      	subs	r1, #4
 8009c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c08:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c0c:	459c      	cmp	ip, r3
 8009c0e:	d8f9      	bhi.n	8009c04 <__lshift+0xc0>
 8009c10:	e7ea      	b.n	8009be8 <__lshift+0xa4>
 8009c12:	bf00      	nop
 8009c14:	0800beca 	.word	0x0800beca
 8009c18:	0800bedb 	.word	0x0800bedb

08009c1c <__mcmp>:
 8009c1c:	690a      	ldr	r2, [r1, #16]
 8009c1e:	4603      	mov	r3, r0
 8009c20:	6900      	ldr	r0, [r0, #16]
 8009c22:	1a80      	subs	r0, r0, r2
 8009c24:	b530      	push	{r4, r5, lr}
 8009c26:	d10e      	bne.n	8009c46 <__mcmp+0x2a>
 8009c28:	3314      	adds	r3, #20
 8009c2a:	3114      	adds	r1, #20
 8009c2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c3c:	4295      	cmp	r5, r2
 8009c3e:	d003      	beq.n	8009c48 <__mcmp+0x2c>
 8009c40:	d205      	bcs.n	8009c4e <__mcmp+0x32>
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295
 8009c46:	bd30      	pop	{r4, r5, pc}
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	d3f3      	bcc.n	8009c34 <__mcmp+0x18>
 8009c4c:	e7fb      	b.n	8009c46 <__mcmp+0x2a>
 8009c4e:	2001      	movs	r0, #1
 8009c50:	e7f9      	b.n	8009c46 <__mcmp+0x2a>
	...

08009c54 <__mdiff>:
 8009c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	4689      	mov	r9, r1
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	4611      	mov	r1, r2
 8009c5e:	4648      	mov	r0, r9
 8009c60:	4614      	mov	r4, r2
 8009c62:	f7ff ffdb 	bl	8009c1c <__mcmp>
 8009c66:	1e05      	subs	r5, r0, #0
 8009c68:	d112      	bne.n	8009c90 <__mdiff+0x3c>
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f7ff fd19 	bl	80096a4 <_Balloc>
 8009c72:	4602      	mov	r2, r0
 8009c74:	b928      	cbnz	r0, 8009c82 <__mdiff+0x2e>
 8009c76:	4b3f      	ldr	r3, [pc, #252]	@ (8009d74 <__mdiff+0x120>)
 8009c78:	f240 2137 	movw	r1, #567	@ 0x237
 8009c7c:	483e      	ldr	r0, [pc, #248]	@ (8009d78 <__mdiff+0x124>)
 8009c7e:	f001 fa6f 	bl	800b160 <__assert_func>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c88:	4610      	mov	r0, r2
 8009c8a:	b003      	add	sp, #12
 8009c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c90:	bfbc      	itt	lt
 8009c92:	464b      	movlt	r3, r9
 8009c94:	46a1      	movlt	r9, r4
 8009c96:	4630      	mov	r0, r6
 8009c98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c9c:	bfba      	itte	lt
 8009c9e:	461c      	movlt	r4, r3
 8009ca0:	2501      	movlt	r5, #1
 8009ca2:	2500      	movge	r5, #0
 8009ca4:	f7ff fcfe 	bl	80096a4 <_Balloc>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	b918      	cbnz	r0, 8009cb4 <__mdiff+0x60>
 8009cac:	4b31      	ldr	r3, [pc, #196]	@ (8009d74 <__mdiff+0x120>)
 8009cae:	f240 2145 	movw	r1, #581	@ 0x245
 8009cb2:	e7e3      	b.n	8009c7c <__mdiff+0x28>
 8009cb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009cb8:	6926      	ldr	r6, [r4, #16]
 8009cba:	60c5      	str	r5, [r0, #12]
 8009cbc:	f109 0310 	add.w	r3, r9, #16
 8009cc0:	f109 0514 	add.w	r5, r9, #20
 8009cc4:	f104 0e14 	add.w	lr, r4, #20
 8009cc8:	f100 0b14 	add.w	fp, r0, #20
 8009ccc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009cd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	46d9      	mov	r9, fp
 8009cd8:	f04f 0c00 	mov.w	ip, #0
 8009cdc:	9b01      	ldr	r3, [sp, #4]
 8009cde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ce2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	fa1f f38a 	uxth.w	r3, sl
 8009cec:	4619      	mov	r1, r3
 8009cee:	b283      	uxth	r3, r0
 8009cf0:	1acb      	subs	r3, r1, r3
 8009cf2:	0c00      	lsrs	r0, r0, #16
 8009cf4:	4463      	add	r3, ip
 8009cf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009cfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009d04:	4576      	cmp	r6, lr
 8009d06:	f849 3b04 	str.w	r3, [r9], #4
 8009d0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d0e:	d8e5      	bhi.n	8009cdc <__mdiff+0x88>
 8009d10:	1b33      	subs	r3, r6, r4
 8009d12:	3b15      	subs	r3, #21
 8009d14:	f023 0303 	bic.w	r3, r3, #3
 8009d18:	3415      	adds	r4, #21
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	bf38      	it	cc
 8009d20:	2304      	movcc	r3, #4
 8009d22:	441d      	add	r5, r3
 8009d24:	445b      	add	r3, fp
 8009d26:	461e      	mov	r6, r3
 8009d28:	462c      	mov	r4, r5
 8009d2a:	4544      	cmp	r4, r8
 8009d2c:	d30e      	bcc.n	8009d4c <__mdiff+0xf8>
 8009d2e:	f108 0103 	add.w	r1, r8, #3
 8009d32:	1b49      	subs	r1, r1, r5
 8009d34:	f021 0103 	bic.w	r1, r1, #3
 8009d38:	3d03      	subs	r5, #3
 8009d3a:	45a8      	cmp	r8, r5
 8009d3c:	bf38      	it	cc
 8009d3e:	2100      	movcc	r1, #0
 8009d40:	440b      	add	r3, r1
 8009d42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d46:	b191      	cbz	r1, 8009d6e <__mdiff+0x11a>
 8009d48:	6117      	str	r7, [r2, #16]
 8009d4a:	e79d      	b.n	8009c88 <__mdiff+0x34>
 8009d4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009d50:	46e6      	mov	lr, ip
 8009d52:	0c08      	lsrs	r0, r1, #16
 8009d54:	fa1c fc81 	uxtah	ip, ip, r1
 8009d58:	4471      	add	r1, lr
 8009d5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009d5e:	b289      	uxth	r1, r1
 8009d60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d64:	f846 1b04 	str.w	r1, [r6], #4
 8009d68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d6c:	e7dd      	b.n	8009d2a <__mdiff+0xd6>
 8009d6e:	3f01      	subs	r7, #1
 8009d70:	e7e7      	b.n	8009d42 <__mdiff+0xee>
 8009d72:	bf00      	nop
 8009d74:	0800beca 	.word	0x0800beca
 8009d78:	0800bedb 	.word	0x0800bedb

08009d7c <__ulp>:
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	ed8d 0b00 	vstr	d0, [sp]
 8009d82:	9a01      	ldr	r2, [sp, #4]
 8009d84:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc4 <__ulp+0x48>)
 8009d86:	4013      	ands	r3, r2
 8009d88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dc08      	bgt.n	8009da2 <__ulp+0x26>
 8009d90:	425b      	negs	r3, r3
 8009d92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009d96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d9a:	da04      	bge.n	8009da6 <__ulp+0x2a>
 8009d9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009da0:	4113      	asrs	r3, r2
 8009da2:	2200      	movs	r2, #0
 8009da4:	e008      	b.n	8009db8 <__ulp+0x3c>
 8009da6:	f1a2 0314 	sub.w	r3, r2, #20
 8009daa:	2b1e      	cmp	r3, #30
 8009dac:	bfda      	itte	le
 8009dae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009db2:	40da      	lsrle	r2, r3
 8009db4:	2201      	movgt	r2, #1
 8009db6:	2300      	movs	r3, #0
 8009db8:	4619      	mov	r1, r3
 8009dba:	4610      	mov	r0, r2
 8009dbc:	ec41 0b10 	vmov	d0, r0, r1
 8009dc0:	b002      	add	sp, #8
 8009dc2:	4770      	bx	lr
 8009dc4:	7ff00000 	.word	0x7ff00000

08009dc8 <__b2d>:
 8009dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dcc:	6906      	ldr	r6, [r0, #16]
 8009dce:	f100 0814 	add.w	r8, r0, #20
 8009dd2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009dd6:	1f37      	subs	r7, r6, #4
 8009dd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7ff fd53 	bl	8009888 <__hi0bits>
 8009de2:	f1c0 0320 	rsb	r3, r0, #32
 8009de6:	280a      	cmp	r0, #10
 8009de8:	600b      	str	r3, [r1, #0]
 8009dea:	491b      	ldr	r1, [pc, #108]	@ (8009e58 <__b2d+0x90>)
 8009dec:	dc15      	bgt.n	8009e1a <__b2d+0x52>
 8009dee:	f1c0 0c0b 	rsb	ip, r0, #11
 8009df2:	fa22 f30c 	lsr.w	r3, r2, ip
 8009df6:	45b8      	cmp	r8, r7
 8009df8:	ea43 0501 	orr.w	r5, r3, r1
 8009dfc:	bf34      	ite	cc
 8009dfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e02:	2300      	movcs	r3, #0
 8009e04:	3015      	adds	r0, #21
 8009e06:	fa02 f000 	lsl.w	r0, r2, r0
 8009e0a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009e0e:	4303      	orrs	r3, r0
 8009e10:	461c      	mov	r4, r3
 8009e12:	ec45 4b10 	vmov	d0, r4, r5
 8009e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e1a:	45b8      	cmp	r8, r7
 8009e1c:	bf3a      	itte	cc
 8009e1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e22:	f1a6 0708 	subcc.w	r7, r6, #8
 8009e26:	2300      	movcs	r3, #0
 8009e28:	380b      	subs	r0, #11
 8009e2a:	d012      	beq.n	8009e52 <__b2d+0x8a>
 8009e2c:	f1c0 0120 	rsb	r1, r0, #32
 8009e30:	fa23 f401 	lsr.w	r4, r3, r1
 8009e34:	4082      	lsls	r2, r0
 8009e36:	4322      	orrs	r2, r4
 8009e38:	4547      	cmp	r7, r8
 8009e3a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009e3e:	bf8c      	ite	hi
 8009e40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009e44:	2200      	movls	r2, #0
 8009e46:	4083      	lsls	r3, r0
 8009e48:	40ca      	lsrs	r2, r1
 8009e4a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	e7de      	b.n	8009e10 <__b2d+0x48>
 8009e52:	ea42 0501 	orr.w	r5, r2, r1
 8009e56:	e7db      	b.n	8009e10 <__b2d+0x48>
 8009e58:	3ff00000 	.word	0x3ff00000

08009e5c <__d2b>:
 8009e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e60:	460f      	mov	r7, r1
 8009e62:	2101      	movs	r1, #1
 8009e64:	ec59 8b10 	vmov	r8, r9, d0
 8009e68:	4616      	mov	r6, r2
 8009e6a:	f7ff fc1b 	bl	80096a4 <_Balloc>
 8009e6e:	4604      	mov	r4, r0
 8009e70:	b930      	cbnz	r0, 8009e80 <__d2b+0x24>
 8009e72:	4602      	mov	r2, r0
 8009e74:	4b23      	ldr	r3, [pc, #140]	@ (8009f04 <__d2b+0xa8>)
 8009e76:	4824      	ldr	r0, [pc, #144]	@ (8009f08 <__d2b+0xac>)
 8009e78:	f240 310f 	movw	r1, #783	@ 0x30f
 8009e7c:	f001 f970 	bl	800b160 <__assert_func>
 8009e80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e88:	b10d      	cbz	r5, 8009e8e <__d2b+0x32>
 8009e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	f1b8 0300 	subs.w	r3, r8, #0
 8009e94:	d023      	beq.n	8009ede <__d2b+0x82>
 8009e96:	4668      	mov	r0, sp
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	f7ff fd14 	bl	80098c6 <__lo0bits>
 8009e9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ea2:	b1d0      	cbz	r0, 8009eda <__d2b+0x7e>
 8009ea4:	f1c0 0320 	rsb	r3, r0, #32
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	430b      	orrs	r3, r1
 8009eae:	40c2      	lsrs	r2, r0
 8009eb0:	6163      	str	r3, [r4, #20]
 8009eb2:	9201      	str	r2, [sp, #4]
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	61a3      	str	r3, [r4, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bf0c      	ite	eq
 8009ebc:	2201      	moveq	r2, #1
 8009ebe:	2202      	movne	r2, #2
 8009ec0:	6122      	str	r2, [r4, #16]
 8009ec2:	b1a5      	cbz	r5, 8009eee <__d2b+0x92>
 8009ec4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009ec8:	4405      	add	r5, r0
 8009eca:	603d      	str	r5, [r7, #0]
 8009ecc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009ed0:	6030      	str	r0, [r6, #0]
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	b003      	add	sp, #12
 8009ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eda:	6161      	str	r1, [r4, #20]
 8009edc:	e7ea      	b.n	8009eb4 <__d2b+0x58>
 8009ede:	a801      	add	r0, sp, #4
 8009ee0:	f7ff fcf1 	bl	80098c6 <__lo0bits>
 8009ee4:	9b01      	ldr	r3, [sp, #4]
 8009ee6:	6163      	str	r3, [r4, #20]
 8009ee8:	3020      	adds	r0, #32
 8009eea:	2201      	movs	r2, #1
 8009eec:	e7e8      	b.n	8009ec0 <__d2b+0x64>
 8009eee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ef2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ef6:	6038      	str	r0, [r7, #0]
 8009ef8:	6918      	ldr	r0, [r3, #16]
 8009efa:	f7ff fcc5 	bl	8009888 <__hi0bits>
 8009efe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f02:	e7e5      	b.n	8009ed0 <__d2b+0x74>
 8009f04:	0800beca 	.word	0x0800beca
 8009f08:	0800bedb 	.word	0x0800bedb

08009f0c <__ratio>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	b085      	sub	sp, #20
 8009f12:	e9cd 1000 	strd	r1, r0, [sp]
 8009f16:	a902      	add	r1, sp, #8
 8009f18:	f7ff ff56 	bl	8009dc8 <__b2d>
 8009f1c:	9800      	ldr	r0, [sp, #0]
 8009f1e:	a903      	add	r1, sp, #12
 8009f20:	ec55 4b10 	vmov	r4, r5, d0
 8009f24:	f7ff ff50 	bl	8009dc8 <__b2d>
 8009f28:	9b01      	ldr	r3, [sp, #4]
 8009f2a:	6919      	ldr	r1, [r3, #16]
 8009f2c:	9b00      	ldr	r3, [sp, #0]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	1ac9      	subs	r1, r1, r3
 8009f32:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009f36:	1a9b      	subs	r3, r3, r2
 8009f38:	ec5b ab10 	vmov	sl, fp, d0
 8009f3c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bfce      	itee	gt
 8009f44:	462a      	movgt	r2, r5
 8009f46:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f4a:	465a      	movle	r2, fp
 8009f4c:	462f      	mov	r7, r5
 8009f4e:	46d9      	mov	r9, fp
 8009f50:	bfcc      	ite	gt
 8009f52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009f56:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009f5a:	464b      	mov	r3, r9
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4639      	mov	r1, r7
 8009f62:	f7f6 fc73 	bl	800084c <__aeabi_ddiv>
 8009f66:	ec41 0b10 	vmov	d0, r0, r1
 8009f6a:	b005      	add	sp, #20
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f70 <__copybits>:
 8009f70:	3901      	subs	r1, #1
 8009f72:	b570      	push	{r4, r5, r6, lr}
 8009f74:	1149      	asrs	r1, r1, #5
 8009f76:	6914      	ldr	r4, [r2, #16]
 8009f78:	3101      	adds	r1, #1
 8009f7a:	f102 0314 	add.w	r3, r2, #20
 8009f7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f86:	1f05      	subs	r5, r0, #4
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d30c      	bcc.n	8009fa6 <__copybits+0x36>
 8009f8c:	1aa3      	subs	r3, r4, r2
 8009f8e:	3b11      	subs	r3, #17
 8009f90:	f023 0303 	bic.w	r3, r3, #3
 8009f94:	3211      	adds	r2, #17
 8009f96:	42a2      	cmp	r2, r4
 8009f98:	bf88      	it	hi
 8009f9a:	2300      	movhi	r3, #0
 8009f9c:	4418      	add	r0, r3
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4288      	cmp	r0, r1
 8009fa2:	d305      	bcc.n	8009fb0 <__copybits+0x40>
 8009fa4:	bd70      	pop	{r4, r5, r6, pc}
 8009fa6:	f853 6b04 	ldr.w	r6, [r3], #4
 8009faa:	f845 6f04 	str.w	r6, [r5, #4]!
 8009fae:	e7eb      	b.n	8009f88 <__copybits+0x18>
 8009fb0:	f840 3b04 	str.w	r3, [r0], #4
 8009fb4:	e7f4      	b.n	8009fa0 <__copybits+0x30>

08009fb6 <__any_on>:
 8009fb6:	f100 0214 	add.w	r2, r0, #20
 8009fba:	6900      	ldr	r0, [r0, #16]
 8009fbc:	114b      	asrs	r3, r1, #5
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	db11      	blt.n	8009fe8 <__any_on+0x32>
 8009fc4:	dd0a      	ble.n	8009fdc <__any_on+0x26>
 8009fc6:	f011 011f 	ands.w	r1, r1, #31
 8009fca:	d007      	beq.n	8009fdc <__any_on+0x26>
 8009fcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009fd0:	fa24 f001 	lsr.w	r0, r4, r1
 8009fd4:	fa00 f101 	lsl.w	r1, r0, r1
 8009fd8:	428c      	cmp	r4, r1
 8009fda:	d10b      	bne.n	8009ff4 <__any_on+0x3e>
 8009fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d803      	bhi.n	8009fec <__any_on+0x36>
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	bd10      	pop	{r4, pc}
 8009fe8:	4603      	mov	r3, r0
 8009fea:	e7f7      	b.n	8009fdc <__any_on+0x26>
 8009fec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ff0:	2900      	cmp	r1, #0
 8009ff2:	d0f5      	beq.n	8009fe0 <__any_on+0x2a>
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	e7f6      	b.n	8009fe6 <__any_on+0x30>

08009ff8 <sulp>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	460d      	mov	r5, r1
 8009ffe:	ec45 4b10 	vmov	d0, r4, r5
 800a002:	4616      	mov	r6, r2
 800a004:	f7ff feba 	bl	8009d7c <__ulp>
 800a008:	ec51 0b10 	vmov	r0, r1, d0
 800a00c:	b17e      	cbz	r6, 800a02e <sulp+0x36>
 800a00e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a012:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a016:	2b00      	cmp	r3, #0
 800a018:	dd09      	ble.n	800a02e <sulp+0x36>
 800a01a:	051b      	lsls	r3, r3, #20
 800a01c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a020:	2400      	movs	r4, #0
 800a022:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a026:	4622      	mov	r2, r4
 800a028:	462b      	mov	r3, r5
 800a02a:	f7f6 fae5 	bl	80005f8 <__aeabi_dmul>
 800a02e:	ec41 0b10 	vmov	d0, r0, r1
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	0000      	movs	r0, r0
	...

0800a038 <_strtod_l>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	b09f      	sub	sp, #124	@ 0x7c
 800a03e:	460c      	mov	r4, r1
 800a040:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a042:	2200      	movs	r2, #0
 800a044:	921a      	str	r2, [sp, #104]	@ 0x68
 800a046:	9005      	str	r0, [sp, #20]
 800a048:	f04f 0a00 	mov.w	sl, #0
 800a04c:	f04f 0b00 	mov.w	fp, #0
 800a050:	460a      	mov	r2, r1
 800a052:	9219      	str	r2, [sp, #100]	@ 0x64
 800a054:	7811      	ldrb	r1, [r2, #0]
 800a056:	292b      	cmp	r1, #43	@ 0x2b
 800a058:	d04a      	beq.n	800a0f0 <_strtod_l+0xb8>
 800a05a:	d838      	bhi.n	800a0ce <_strtod_l+0x96>
 800a05c:	290d      	cmp	r1, #13
 800a05e:	d832      	bhi.n	800a0c6 <_strtod_l+0x8e>
 800a060:	2908      	cmp	r1, #8
 800a062:	d832      	bhi.n	800a0ca <_strtod_l+0x92>
 800a064:	2900      	cmp	r1, #0
 800a066:	d03b      	beq.n	800a0e0 <_strtod_l+0xa8>
 800a068:	2200      	movs	r2, #0
 800a06a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a06c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a06e:	782a      	ldrb	r2, [r5, #0]
 800a070:	2a30      	cmp	r2, #48	@ 0x30
 800a072:	f040 80b2 	bne.w	800a1da <_strtod_l+0x1a2>
 800a076:	786a      	ldrb	r2, [r5, #1]
 800a078:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a07c:	2a58      	cmp	r2, #88	@ 0x58
 800a07e:	d16e      	bne.n	800a15e <_strtod_l+0x126>
 800a080:	9302      	str	r3, [sp, #8]
 800a082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	ab1a      	add	r3, sp, #104	@ 0x68
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	4a8f      	ldr	r2, [pc, #572]	@ (800a2c8 <_strtod_l+0x290>)
 800a08c:	9805      	ldr	r0, [sp, #20]
 800a08e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a090:	a919      	add	r1, sp, #100	@ 0x64
 800a092:	f001 f8ff 	bl	800b294 <__gethex>
 800a096:	f010 060f 	ands.w	r6, r0, #15
 800a09a:	4604      	mov	r4, r0
 800a09c:	d005      	beq.n	800a0aa <_strtod_l+0x72>
 800a09e:	2e06      	cmp	r6, #6
 800a0a0:	d128      	bne.n	800a0f4 <_strtod_l+0xbc>
 800a0a2:	3501      	adds	r5, #1
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a0a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 858e 	bne.w	800abce <_strtod_l+0xb96>
 800a0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0b4:	b1cb      	cbz	r3, 800a0ea <_strtod_l+0xb2>
 800a0b6:	4652      	mov	r2, sl
 800a0b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a0bc:	ec43 2b10 	vmov	d0, r2, r3
 800a0c0:	b01f      	add	sp, #124	@ 0x7c
 800a0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c6:	2920      	cmp	r1, #32
 800a0c8:	d1ce      	bne.n	800a068 <_strtod_l+0x30>
 800a0ca:	3201      	adds	r2, #1
 800a0cc:	e7c1      	b.n	800a052 <_strtod_l+0x1a>
 800a0ce:	292d      	cmp	r1, #45	@ 0x2d
 800a0d0:	d1ca      	bne.n	800a068 <_strtod_l+0x30>
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	910e      	str	r1, [sp, #56]	@ 0x38
 800a0d6:	1c51      	adds	r1, r2, #1
 800a0d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a0da:	7852      	ldrb	r2, [r2, #1]
 800a0dc:	2a00      	cmp	r2, #0
 800a0de:	d1c5      	bne.n	800a06c <_strtod_l+0x34>
 800a0e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f040 8570 	bne.w	800abca <_strtod_l+0xb92>
 800a0ea:	4652      	mov	r2, sl
 800a0ec:	465b      	mov	r3, fp
 800a0ee:	e7e5      	b.n	800a0bc <_strtod_l+0x84>
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	e7ef      	b.n	800a0d4 <_strtod_l+0x9c>
 800a0f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a0f6:	b13a      	cbz	r2, 800a108 <_strtod_l+0xd0>
 800a0f8:	2135      	movs	r1, #53	@ 0x35
 800a0fa:	a81c      	add	r0, sp, #112	@ 0x70
 800a0fc:	f7ff ff38 	bl	8009f70 <__copybits>
 800a100:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a102:	9805      	ldr	r0, [sp, #20]
 800a104:	f7ff fb0e 	bl	8009724 <_Bfree>
 800a108:	3e01      	subs	r6, #1
 800a10a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a10c:	2e04      	cmp	r6, #4
 800a10e:	d806      	bhi.n	800a11e <_strtod_l+0xe6>
 800a110:	e8df f006 	tbb	[pc, r6]
 800a114:	201d0314 	.word	0x201d0314
 800a118:	14          	.byte	0x14
 800a119:	00          	.byte	0x00
 800a11a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a11e:	05e1      	lsls	r1, r4, #23
 800a120:	bf48      	it	mi
 800a122:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a126:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a12a:	0d1b      	lsrs	r3, r3, #20
 800a12c:	051b      	lsls	r3, r3, #20
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1bb      	bne.n	800a0aa <_strtod_l+0x72>
 800a132:	f7fe fbd1 	bl	80088d8 <__errno>
 800a136:	2322      	movs	r3, #34	@ 0x22
 800a138:	6003      	str	r3, [r0, #0]
 800a13a:	e7b6      	b.n	800a0aa <_strtod_l+0x72>
 800a13c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a140:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a144:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a148:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a14c:	e7e7      	b.n	800a11e <_strtod_l+0xe6>
 800a14e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a2d0 <_strtod_l+0x298>
 800a152:	e7e4      	b.n	800a11e <_strtod_l+0xe6>
 800a154:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a158:	f04f 3aff 	mov.w	sl, #4294967295
 800a15c:	e7df      	b.n	800a11e <_strtod_l+0xe6>
 800a15e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	9219      	str	r2, [sp, #100]	@ 0x64
 800a164:	785b      	ldrb	r3, [r3, #1]
 800a166:	2b30      	cmp	r3, #48	@ 0x30
 800a168:	d0f9      	beq.n	800a15e <_strtod_l+0x126>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d09d      	beq.n	800a0aa <_strtod_l+0x72>
 800a16e:	2301      	movs	r3, #1
 800a170:	2700      	movs	r7, #0
 800a172:	9308      	str	r3, [sp, #32]
 800a174:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a176:	930c      	str	r3, [sp, #48]	@ 0x30
 800a178:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a17a:	46b9      	mov	r9, r7
 800a17c:	220a      	movs	r2, #10
 800a17e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a180:	7805      	ldrb	r5, [r0, #0]
 800a182:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a186:	b2d9      	uxtb	r1, r3
 800a188:	2909      	cmp	r1, #9
 800a18a:	d928      	bls.n	800a1de <_strtod_l+0x1a6>
 800a18c:	494f      	ldr	r1, [pc, #316]	@ (800a2cc <_strtod_l+0x294>)
 800a18e:	2201      	movs	r2, #1
 800a190:	f7fe fb36 	bl	8008800 <strncmp>
 800a194:	2800      	cmp	r0, #0
 800a196:	d032      	beq.n	800a1fe <_strtod_l+0x1c6>
 800a198:	2000      	movs	r0, #0
 800a19a:	462a      	mov	r2, r5
 800a19c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a19e:	464d      	mov	r5, r9
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2a65      	cmp	r2, #101	@ 0x65
 800a1a4:	d001      	beq.n	800a1aa <_strtod_l+0x172>
 800a1a6:	2a45      	cmp	r2, #69	@ 0x45
 800a1a8:	d114      	bne.n	800a1d4 <_strtod_l+0x19c>
 800a1aa:	b91d      	cbnz	r5, 800a1b4 <_strtod_l+0x17c>
 800a1ac:	9a08      	ldr	r2, [sp, #32]
 800a1ae:	4302      	orrs	r2, r0
 800a1b0:	d096      	beq.n	800a0e0 <_strtod_l+0xa8>
 800a1b2:	2500      	movs	r5, #0
 800a1b4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a1b6:	1c62      	adds	r2, r4, #1
 800a1b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1ba:	7862      	ldrb	r2, [r4, #1]
 800a1bc:	2a2b      	cmp	r2, #43	@ 0x2b
 800a1be:	d07a      	beq.n	800a2b6 <_strtod_l+0x27e>
 800a1c0:	2a2d      	cmp	r2, #45	@ 0x2d
 800a1c2:	d07e      	beq.n	800a2c2 <_strtod_l+0x28a>
 800a1c4:	f04f 0c00 	mov.w	ip, #0
 800a1c8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a1cc:	2909      	cmp	r1, #9
 800a1ce:	f240 8085 	bls.w	800a2dc <_strtod_l+0x2a4>
 800a1d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a1d4:	f04f 0800 	mov.w	r8, #0
 800a1d8:	e0a5      	b.n	800a326 <_strtod_l+0x2ee>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e7c8      	b.n	800a170 <_strtod_l+0x138>
 800a1de:	f1b9 0f08 	cmp.w	r9, #8
 800a1e2:	bfd8      	it	le
 800a1e4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a1e6:	f100 0001 	add.w	r0, r0, #1
 800a1ea:	bfda      	itte	le
 800a1ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800a1f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a1f2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a1f6:	f109 0901 	add.w	r9, r9, #1
 800a1fa:	9019      	str	r0, [sp, #100]	@ 0x64
 800a1fc:	e7bf      	b.n	800a17e <_strtod_l+0x146>
 800a1fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	9219      	str	r2, [sp, #100]	@ 0x64
 800a204:	785a      	ldrb	r2, [r3, #1]
 800a206:	f1b9 0f00 	cmp.w	r9, #0
 800a20a:	d03b      	beq.n	800a284 <_strtod_l+0x24c>
 800a20c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a20e:	464d      	mov	r5, r9
 800a210:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a214:	2b09      	cmp	r3, #9
 800a216:	d912      	bls.n	800a23e <_strtod_l+0x206>
 800a218:	2301      	movs	r3, #1
 800a21a:	e7c2      	b.n	800a1a2 <_strtod_l+0x16a>
 800a21c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	9219      	str	r2, [sp, #100]	@ 0x64
 800a222:	785a      	ldrb	r2, [r3, #1]
 800a224:	3001      	adds	r0, #1
 800a226:	2a30      	cmp	r2, #48	@ 0x30
 800a228:	d0f8      	beq.n	800a21c <_strtod_l+0x1e4>
 800a22a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a22e:	2b08      	cmp	r3, #8
 800a230:	f200 84d2 	bhi.w	800abd8 <_strtod_l+0xba0>
 800a234:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a236:	900a      	str	r0, [sp, #40]	@ 0x28
 800a238:	2000      	movs	r0, #0
 800a23a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a23c:	4605      	mov	r5, r0
 800a23e:	3a30      	subs	r2, #48	@ 0x30
 800a240:	f100 0301 	add.w	r3, r0, #1
 800a244:	d018      	beq.n	800a278 <_strtod_l+0x240>
 800a246:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a248:	4419      	add	r1, r3
 800a24a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a24c:	462e      	mov	r6, r5
 800a24e:	f04f 0e0a 	mov.w	lr, #10
 800a252:	1c71      	adds	r1, r6, #1
 800a254:	eba1 0c05 	sub.w	ip, r1, r5
 800a258:	4563      	cmp	r3, ip
 800a25a:	dc15      	bgt.n	800a288 <_strtod_l+0x250>
 800a25c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a260:	182b      	adds	r3, r5, r0
 800a262:	2b08      	cmp	r3, #8
 800a264:	f105 0501 	add.w	r5, r5, #1
 800a268:	4405      	add	r5, r0
 800a26a:	dc1a      	bgt.n	800a2a2 <_strtod_l+0x26a>
 800a26c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a26e:	230a      	movs	r3, #10
 800a270:	fb03 2301 	mla	r3, r3, r1, r2
 800a274:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a276:	2300      	movs	r3, #0
 800a278:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a27a:	1c51      	adds	r1, r2, #1
 800a27c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a27e:	7852      	ldrb	r2, [r2, #1]
 800a280:	4618      	mov	r0, r3
 800a282:	e7c5      	b.n	800a210 <_strtod_l+0x1d8>
 800a284:	4648      	mov	r0, r9
 800a286:	e7ce      	b.n	800a226 <_strtod_l+0x1ee>
 800a288:	2e08      	cmp	r6, #8
 800a28a:	dc05      	bgt.n	800a298 <_strtod_l+0x260>
 800a28c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a28e:	fb0e f606 	mul.w	r6, lr, r6
 800a292:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a294:	460e      	mov	r6, r1
 800a296:	e7dc      	b.n	800a252 <_strtod_l+0x21a>
 800a298:	2910      	cmp	r1, #16
 800a29a:	bfd8      	it	le
 800a29c:	fb0e f707 	mulle.w	r7, lr, r7
 800a2a0:	e7f8      	b.n	800a294 <_strtod_l+0x25c>
 800a2a2:	2b0f      	cmp	r3, #15
 800a2a4:	bfdc      	itt	le
 800a2a6:	230a      	movle	r3, #10
 800a2a8:	fb03 2707 	mlale	r7, r3, r7, r2
 800a2ac:	e7e3      	b.n	800a276 <_strtod_l+0x23e>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e77a      	b.n	800a1ac <_strtod_l+0x174>
 800a2b6:	f04f 0c00 	mov.w	ip, #0
 800a2ba:	1ca2      	adds	r2, r4, #2
 800a2bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2be:	78a2      	ldrb	r2, [r4, #2]
 800a2c0:	e782      	b.n	800a1c8 <_strtod_l+0x190>
 800a2c2:	f04f 0c01 	mov.w	ip, #1
 800a2c6:	e7f8      	b.n	800a2ba <_strtod_l+0x282>
 800a2c8:	0800c0fc 	.word	0x0800c0fc
 800a2cc:	0800bf34 	.word	0x0800bf34
 800a2d0:	7ff00000 	.word	0x7ff00000
 800a2d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a2d6:	1c51      	adds	r1, r2, #1
 800a2d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a2da:	7852      	ldrb	r2, [r2, #1]
 800a2dc:	2a30      	cmp	r2, #48	@ 0x30
 800a2de:	d0f9      	beq.n	800a2d4 <_strtod_l+0x29c>
 800a2e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a2e4:	2908      	cmp	r1, #8
 800a2e6:	f63f af75 	bhi.w	800a1d4 <_strtod_l+0x19c>
 800a2ea:	3a30      	subs	r2, #48	@ 0x30
 800a2ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a2f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a2f2:	f04f 080a 	mov.w	r8, #10
 800a2f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a2f8:	1c56      	adds	r6, r2, #1
 800a2fa:	9619      	str	r6, [sp, #100]	@ 0x64
 800a2fc:	7852      	ldrb	r2, [r2, #1]
 800a2fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a302:	f1be 0f09 	cmp.w	lr, #9
 800a306:	d939      	bls.n	800a37c <_strtod_l+0x344>
 800a308:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a30a:	1a76      	subs	r6, r6, r1
 800a30c:	2e08      	cmp	r6, #8
 800a30e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a312:	dc03      	bgt.n	800a31c <_strtod_l+0x2e4>
 800a314:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a316:	4588      	cmp	r8, r1
 800a318:	bfa8      	it	ge
 800a31a:	4688      	movge	r8, r1
 800a31c:	f1bc 0f00 	cmp.w	ip, #0
 800a320:	d001      	beq.n	800a326 <_strtod_l+0x2ee>
 800a322:	f1c8 0800 	rsb	r8, r8, #0
 800a326:	2d00      	cmp	r5, #0
 800a328:	d14e      	bne.n	800a3c8 <_strtod_l+0x390>
 800a32a:	9908      	ldr	r1, [sp, #32]
 800a32c:	4308      	orrs	r0, r1
 800a32e:	f47f aebc 	bne.w	800a0aa <_strtod_l+0x72>
 800a332:	2b00      	cmp	r3, #0
 800a334:	f47f aed4 	bne.w	800a0e0 <_strtod_l+0xa8>
 800a338:	2a69      	cmp	r2, #105	@ 0x69
 800a33a:	d028      	beq.n	800a38e <_strtod_l+0x356>
 800a33c:	dc25      	bgt.n	800a38a <_strtod_l+0x352>
 800a33e:	2a49      	cmp	r2, #73	@ 0x49
 800a340:	d025      	beq.n	800a38e <_strtod_l+0x356>
 800a342:	2a4e      	cmp	r2, #78	@ 0x4e
 800a344:	f47f aecc 	bne.w	800a0e0 <_strtod_l+0xa8>
 800a348:	499a      	ldr	r1, [pc, #616]	@ (800a5b4 <_strtod_l+0x57c>)
 800a34a:	a819      	add	r0, sp, #100	@ 0x64
 800a34c:	f001 f9c4 	bl	800b6d8 <__match>
 800a350:	2800      	cmp	r0, #0
 800a352:	f43f aec5 	beq.w	800a0e0 <_strtod_l+0xa8>
 800a356:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b28      	cmp	r3, #40	@ 0x28
 800a35c:	d12e      	bne.n	800a3bc <_strtod_l+0x384>
 800a35e:	4996      	ldr	r1, [pc, #600]	@ (800a5b8 <_strtod_l+0x580>)
 800a360:	aa1c      	add	r2, sp, #112	@ 0x70
 800a362:	a819      	add	r0, sp, #100	@ 0x64
 800a364:	f001 f9cc 	bl	800b700 <__hexnan>
 800a368:	2805      	cmp	r0, #5
 800a36a:	d127      	bne.n	800a3bc <_strtod_l+0x384>
 800a36c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a36e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a372:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a376:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a37a:	e696      	b.n	800a0aa <_strtod_l+0x72>
 800a37c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a37e:	fb08 2101 	mla	r1, r8, r1, r2
 800a382:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a386:	9209      	str	r2, [sp, #36]	@ 0x24
 800a388:	e7b5      	b.n	800a2f6 <_strtod_l+0x2be>
 800a38a:	2a6e      	cmp	r2, #110	@ 0x6e
 800a38c:	e7da      	b.n	800a344 <_strtod_l+0x30c>
 800a38e:	498b      	ldr	r1, [pc, #556]	@ (800a5bc <_strtod_l+0x584>)
 800a390:	a819      	add	r0, sp, #100	@ 0x64
 800a392:	f001 f9a1 	bl	800b6d8 <__match>
 800a396:	2800      	cmp	r0, #0
 800a398:	f43f aea2 	beq.w	800a0e0 <_strtod_l+0xa8>
 800a39c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a39e:	4988      	ldr	r1, [pc, #544]	@ (800a5c0 <_strtod_l+0x588>)
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	a819      	add	r0, sp, #100	@ 0x64
 800a3a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a3a6:	f001 f997 	bl	800b6d8 <__match>
 800a3aa:	b910      	cbnz	r0, 800a3b2 <_strtod_l+0x37a>
 800a3ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a3b2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a5d0 <_strtod_l+0x598>
 800a3b6:	f04f 0a00 	mov.w	sl, #0
 800a3ba:	e676      	b.n	800a0aa <_strtod_l+0x72>
 800a3bc:	4881      	ldr	r0, [pc, #516]	@ (800a5c4 <_strtod_l+0x58c>)
 800a3be:	f000 fec7 	bl	800b150 <nan>
 800a3c2:	ec5b ab10 	vmov	sl, fp, d0
 800a3c6:	e670      	b.n	800a0aa <_strtod_l+0x72>
 800a3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a3cc:	eba8 0303 	sub.w	r3, r8, r3
 800a3d0:	f1b9 0f00 	cmp.w	r9, #0
 800a3d4:	bf08      	it	eq
 800a3d6:	46a9      	moveq	r9, r5
 800a3d8:	2d10      	cmp	r5, #16
 800a3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3dc:	462c      	mov	r4, r5
 800a3de:	bfa8      	it	ge
 800a3e0:	2410      	movge	r4, #16
 800a3e2:	f7f6 f88f 	bl	8000504 <__aeabi_ui2d>
 800a3e6:	2d09      	cmp	r5, #9
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	468b      	mov	fp, r1
 800a3ec:	dc13      	bgt.n	800a416 <_strtod_l+0x3de>
 800a3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f43f ae5a 	beq.w	800a0aa <_strtod_l+0x72>
 800a3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f8:	dd78      	ble.n	800a4ec <_strtod_l+0x4b4>
 800a3fa:	2b16      	cmp	r3, #22
 800a3fc:	dc5f      	bgt.n	800a4be <_strtod_l+0x486>
 800a3fe:	4972      	ldr	r1, [pc, #456]	@ (800a5c8 <_strtod_l+0x590>)
 800a400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a408:	4652      	mov	r2, sl
 800a40a:	465b      	mov	r3, fp
 800a40c:	f7f6 f8f4 	bl	80005f8 <__aeabi_dmul>
 800a410:	4682      	mov	sl, r0
 800a412:	468b      	mov	fp, r1
 800a414:	e649      	b.n	800a0aa <_strtod_l+0x72>
 800a416:	4b6c      	ldr	r3, [pc, #432]	@ (800a5c8 <_strtod_l+0x590>)
 800a418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a41c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a420:	f7f6 f8ea 	bl	80005f8 <__aeabi_dmul>
 800a424:	4682      	mov	sl, r0
 800a426:	4638      	mov	r0, r7
 800a428:	468b      	mov	fp, r1
 800a42a:	f7f6 f86b 	bl	8000504 <__aeabi_ui2d>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4650      	mov	r0, sl
 800a434:	4659      	mov	r1, fp
 800a436:	f7f5 ff29 	bl	800028c <__adddf3>
 800a43a:	2d0f      	cmp	r5, #15
 800a43c:	4682      	mov	sl, r0
 800a43e:	468b      	mov	fp, r1
 800a440:	ddd5      	ble.n	800a3ee <_strtod_l+0x3b6>
 800a442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a444:	1b2c      	subs	r4, r5, r4
 800a446:	441c      	add	r4, r3
 800a448:	2c00      	cmp	r4, #0
 800a44a:	f340 8093 	ble.w	800a574 <_strtod_l+0x53c>
 800a44e:	f014 030f 	ands.w	r3, r4, #15
 800a452:	d00a      	beq.n	800a46a <_strtod_l+0x432>
 800a454:	495c      	ldr	r1, [pc, #368]	@ (800a5c8 <_strtod_l+0x590>)
 800a456:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a45a:	4652      	mov	r2, sl
 800a45c:	465b      	mov	r3, fp
 800a45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a462:	f7f6 f8c9 	bl	80005f8 <__aeabi_dmul>
 800a466:	4682      	mov	sl, r0
 800a468:	468b      	mov	fp, r1
 800a46a:	f034 040f 	bics.w	r4, r4, #15
 800a46e:	d073      	beq.n	800a558 <_strtod_l+0x520>
 800a470:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a474:	dd49      	ble.n	800a50a <_strtod_l+0x4d2>
 800a476:	2400      	movs	r4, #0
 800a478:	46a0      	mov	r8, r4
 800a47a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a47c:	46a1      	mov	r9, r4
 800a47e:	9a05      	ldr	r2, [sp, #20]
 800a480:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a5d0 <_strtod_l+0x598>
 800a484:	2322      	movs	r3, #34	@ 0x22
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	f04f 0a00 	mov.w	sl, #0
 800a48c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f43f ae0b 	beq.w	800a0aa <_strtod_l+0x72>
 800a494:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a496:	9805      	ldr	r0, [sp, #20]
 800a498:	f7ff f944 	bl	8009724 <_Bfree>
 800a49c:	9805      	ldr	r0, [sp, #20]
 800a49e:	4649      	mov	r1, r9
 800a4a0:	f7ff f940 	bl	8009724 <_Bfree>
 800a4a4:	9805      	ldr	r0, [sp, #20]
 800a4a6:	4641      	mov	r1, r8
 800a4a8:	f7ff f93c 	bl	8009724 <_Bfree>
 800a4ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4ae:	9805      	ldr	r0, [sp, #20]
 800a4b0:	f7ff f938 	bl	8009724 <_Bfree>
 800a4b4:	9805      	ldr	r0, [sp, #20]
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	f7ff f934 	bl	8009724 <_Bfree>
 800a4bc:	e5f5      	b.n	800a0aa <_strtod_l+0x72>
 800a4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	dbbc      	blt.n	800a442 <_strtod_l+0x40a>
 800a4c8:	4c3f      	ldr	r4, [pc, #252]	@ (800a5c8 <_strtod_l+0x590>)
 800a4ca:	f1c5 050f 	rsb	r5, r5, #15
 800a4ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a4d2:	4652      	mov	r2, sl
 800a4d4:	465b      	mov	r3, fp
 800a4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4da:	f7f6 f88d 	bl	80005f8 <__aeabi_dmul>
 800a4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4e0:	1b5d      	subs	r5, r3, r5
 800a4e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a4e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a4ea:	e78f      	b.n	800a40c <_strtod_l+0x3d4>
 800a4ec:	3316      	adds	r3, #22
 800a4ee:	dba8      	blt.n	800a442 <_strtod_l+0x40a>
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4f2:	eba3 0808 	sub.w	r8, r3, r8
 800a4f6:	4b34      	ldr	r3, [pc, #208]	@ (800a5c8 <_strtod_l+0x590>)
 800a4f8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a4fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a500:	4650      	mov	r0, sl
 800a502:	4659      	mov	r1, fp
 800a504:	f7f6 f9a2 	bl	800084c <__aeabi_ddiv>
 800a508:	e782      	b.n	800a410 <_strtod_l+0x3d8>
 800a50a:	2300      	movs	r3, #0
 800a50c:	4f2f      	ldr	r7, [pc, #188]	@ (800a5cc <_strtod_l+0x594>)
 800a50e:	1124      	asrs	r4, r4, #4
 800a510:	4650      	mov	r0, sl
 800a512:	4659      	mov	r1, fp
 800a514:	461e      	mov	r6, r3
 800a516:	2c01      	cmp	r4, #1
 800a518:	dc21      	bgt.n	800a55e <_strtod_l+0x526>
 800a51a:	b10b      	cbz	r3, 800a520 <_strtod_l+0x4e8>
 800a51c:	4682      	mov	sl, r0
 800a51e:	468b      	mov	fp, r1
 800a520:	492a      	ldr	r1, [pc, #168]	@ (800a5cc <_strtod_l+0x594>)
 800a522:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a526:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a52a:	4652      	mov	r2, sl
 800a52c:	465b      	mov	r3, fp
 800a52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a532:	f7f6 f861 	bl	80005f8 <__aeabi_dmul>
 800a536:	4b26      	ldr	r3, [pc, #152]	@ (800a5d0 <_strtod_l+0x598>)
 800a538:	460a      	mov	r2, r1
 800a53a:	400b      	ands	r3, r1
 800a53c:	4925      	ldr	r1, [pc, #148]	@ (800a5d4 <_strtod_l+0x59c>)
 800a53e:	428b      	cmp	r3, r1
 800a540:	4682      	mov	sl, r0
 800a542:	d898      	bhi.n	800a476 <_strtod_l+0x43e>
 800a544:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a548:	428b      	cmp	r3, r1
 800a54a:	bf86      	itte	hi
 800a54c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a5d8 <_strtod_l+0x5a0>
 800a550:	f04f 3aff 	movhi.w	sl, #4294967295
 800a554:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a558:	2300      	movs	r3, #0
 800a55a:	9308      	str	r3, [sp, #32]
 800a55c:	e076      	b.n	800a64c <_strtod_l+0x614>
 800a55e:	07e2      	lsls	r2, r4, #31
 800a560:	d504      	bpl.n	800a56c <_strtod_l+0x534>
 800a562:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a566:	f7f6 f847 	bl	80005f8 <__aeabi_dmul>
 800a56a:	2301      	movs	r3, #1
 800a56c:	3601      	adds	r6, #1
 800a56e:	1064      	asrs	r4, r4, #1
 800a570:	3708      	adds	r7, #8
 800a572:	e7d0      	b.n	800a516 <_strtod_l+0x4de>
 800a574:	d0f0      	beq.n	800a558 <_strtod_l+0x520>
 800a576:	4264      	negs	r4, r4
 800a578:	f014 020f 	ands.w	r2, r4, #15
 800a57c:	d00a      	beq.n	800a594 <_strtod_l+0x55c>
 800a57e:	4b12      	ldr	r3, [pc, #72]	@ (800a5c8 <_strtod_l+0x590>)
 800a580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a584:	4650      	mov	r0, sl
 800a586:	4659      	mov	r1, fp
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f6 f95e 	bl	800084c <__aeabi_ddiv>
 800a590:	4682      	mov	sl, r0
 800a592:	468b      	mov	fp, r1
 800a594:	1124      	asrs	r4, r4, #4
 800a596:	d0df      	beq.n	800a558 <_strtod_l+0x520>
 800a598:	2c1f      	cmp	r4, #31
 800a59a:	dd1f      	ble.n	800a5dc <_strtod_l+0x5a4>
 800a59c:	2400      	movs	r4, #0
 800a59e:	46a0      	mov	r8, r4
 800a5a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a5a2:	46a1      	mov	r9, r4
 800a5a4:	9a05      	ldr	r2, [sp, #20]
 800a5a6:	2322      	movs	r3, #34	@ 0x22
 800a5a8:	f04f 0a00 	mov.w	sl, #0
 800a5ac:	f04f 0b00 	mov.w	fp, #0
 800a5b0:	6013      	str	r3, [r2, #0]
 800a5b2:	e76b      	b.n	800a48c <_strtod_l+0x454>
 800a5b4:	0800be22 	.word	0x0800be22
 800a5b8:	0800c0e8 	.word	0x0800c0e8
 800a5bc:	0800be1a 	.word	0x0800be1a
 800a5c0:	0800be51 	.word	0x0800be51
 800a5c4:	0800bf8a 	.word	0x0800bf8a
 800a5c8:	0800c020 	.word	0x0800c020
 800a5cc:	0800bff8 	.word	0x0800bff8
 800a5d0:	7ff00000 	.word	0x7ff00000
 800a5d4:	7ca00000 	.word	0x7ca00000
 800a5d8:	7fefffff 	.word	0x7fefffff
 800a5dc:	f014 0310 	ands.w	r3, r4, #16
 800a5e0:	bf18      	it	ne
 800a5e2:	236a      	movne	r3, #106	@ 0x6a
 800a5e4:	4ea9      	ldr	r6, [pc, #676]	@ (800a88c <_strtod_l+0x854>)
 800a5e6:	9308      	str	r3, [sp, #32]
 800a5e8:	4650      	mov	r0, sl
 800a5ea:	4659      	mov	r1, fp
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	07e7      	lsls	r7, r4, #31
 800a5f0:	d504      	bpl.n	800a5fc <_strtod_l+0x5c4>
 800a5f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5f6:	f7f5 ffff 	bl	80005f8 <__aeabi_dmul>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	1064      	asrs	r4, r4, #1
 800a5fe:	f106 0608 	add.w	r6, r6, #8
 800a602:	d1f4      	bne.n	800a5ee <_strtod_l+0x5b6>
 800a604:	b10b      	cbz	r3, 800a60a <_strtod_l+0x5d2>
 800a606:	4682      	mov	sl, r0
 800a608:	468b      	mov	fp, r1
 800a60a:	9b08      	ldr	r3, [sp, #32]
 800a60c:	b1b3      	cbz	r3, 800a63c <_strtod_l+0x604>
 800a60e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a612:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a616:	2b00      	cmp	r3, #0
 800a618:	4659      	mov	r1, fp
 800a61a:	dd0f      	ble.n	800a63c <_strtod_l+0x604>
 800a61c:	2b1f      	cmp	r3, #31
 800a61e:	dd56      	ble.n	800a6ce <_strtod_l+0x696>
 800a620:	2b34      	cmp	r3, #52	@ 0x34
 800a622:	bfde      	ittt	le
 800a624:	f04f 33ff 	movle.w	r3, #4294967295
 800a628:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a62c:	4093      	lslle	r3, r2
 800a62e:	f04f 0a00 	mov.w	sl, #0
 800a632:	bfcc      	ite	gt
 800a634:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a638:	ea03 0b01 	andle.w	fp, r3, r1
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	4650      	mov	r0, sl
 800a642:	4659      	mov	r1, fp
 800a644:	f7f6 fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d1a7      	bne.n	800a59c <_strtod_l+0x564>
 800a64c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a652:	9805      	ldr	r0, [sp, #20]
 800a654:	462b      	mov	r3, r5
 800a656:	464a      	mov	r2, r9
 800a658:	f7ff f8cc 	bl	80097f4 <__s2b>
 800a65c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a65e:	2800      	cmp	r0, #0
 800a660:	f43f af09 	beq.w	800a476 <_strtod_l+0x43e>
 800a664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a666:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a668:	2a00      	cmp	r2, #0
 800a66a:	eba3 0308 	sub.w	r3, r3, r8
 800a66e:	bfa8      	it	ge
 800a670:	2300      	movge	r3, #0
 800a672:	9312      	str	r3, [sp, #72]	@ 0x48
 800a674:	2400      	movs	r4, #0
 800a676:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a67a:	9316      	str	r3, [sp, #88]	@ 0x58
 800a67c:	46a0      	mov	r8, r4
 800a67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a680:	9805      	ldr	r0, [sp, #20]
 800a682:	6859      	ldr	r1, [r3, #4]
 800a684:	f7ff f80e 	bl	80096a4 <_Balloc>
 800a688:	4681      	mov	r9, r0
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f43f aef7 	beq.w	800a47e <_strtod_l+0x446>
 800a690:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a692:	691a      	ldr	r2, [r3, #16]
 800a694:	3202      	adds	r2, #2
 800a696:	f103 010c 	add.w	r1, r3, #12
 800a69a:	0092      	lsls	r2, r2, #2
 800a69c:	300c      	adds	r0, #12
 800a69e:	f7fe f948 	bl	8008932 <memcpy>
 800a6a2:	ec4b ab10 	vmov	d0, sl, fp
 800a6a6:	9805      	ldr	r0, [sp, #20]
 800a6a8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a6aa:	a91b      	add	r1, sp, #108	@ 0x6c
 800a6ac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a6b0:	f7ff fbd4 	bl	8009e5c <__d2b>
 800a6b4:	901a      	str	r0, [sp, #104]	@ 0x68
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	f43f aee1 	beq.w	800a47e <_strtod_l+0x446>
 800a6bc:	9805      	ldr	r0, [sp, #20]
 800a6be:	2101      	movs	r1, #1
 800a6c0:	f7ff f92e 	bl	8009920 <__i2b>
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	b948      	cbnz	r0, 800a6dc <_strtod_l+0x6a4>
 800a6c8:	f04f 0800 	mov.w	r8, #0
 800a6cc:	e6d7      	b.n	800a47e <_strtod_l+0x446>
 800a6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d6:	ea03 0a0a 	and.w	sl, r3, sl
 800a6da:	e7af      	b.n	800a63c <_strtod_l+0x604>
 800a6dc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a6de:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a6e0:	2d00      	cmp	r5, #0
 800a6e2:	bfab      	itete	ge
 800a6e4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a6e6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a6e8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a6ea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a6ec:	bfac      	ite	ge
 800a6ee:	18ef      	addge	r7, r5, r3
 800a6f0:	1b5e      	sublt	r6, r3, r5
 800a6f2:	9b08      	ldr	r3, [sp, #32]
 800a6f4:	1aed      	subs	r5, r5, r3
 800a6f6:	4415      	add	r5, r2
 800a6f8:	4b65      	ldr	r3, [pc, #404]	@ (800a890 <_strtod_l+0x858>)
 800a6fa:	3d01      	subs	r5, #1
 800a6fc:	429d      	cmp	r5, r3
 800a6fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a702:	da50      	bge.n	800a7a6 <_strtod_l+0x76e>
 800a704:	1b5b      	subs	r3, r3, r5
 800a706:	2b1f      	cmp	r3, #31
 800a708:	eba2 0203 	sub.w	r2, r2, r3
 800a70c:	f04f 0101 	mov.w	r1, #1
 800a710:	dc3d      	bgt.n	800a78e <_strtod_l+0x756>
 800a712:	fa01 f303 	lsl.w	r3, r1, r3
 800a716:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a718:	2300      	movs	r3, #0
 800a71a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a71c:	18bd      	adds	r5, r7, r2
 800a71e:	9b08      	ldr	r3, [sp, #32]
 800a720:	42af      	cmp	r7, r5
 800a722:	4416      	add	r6, r2
 800a724:	441e      	add	r6, r3
 800a726:	463b      	mov	r3, r7
 800a728:	bfa8      	it	ge
 800a72a:	462b      	movge	r3, r5
 800a72c:	42b3      	cmp	r3, r6
 800a72e:	bfa8      	it	ge
 800a730:	4633      	movge	r3, r6
 800a732:	2b00      	cmp	r3, #0
 800a734:	bfc2      	ittt	gt
 800a736:	1aed      	subgt	r5, r5, r3
 800a738:	1af6      	subgt	r6, r6, r3
 800a73a:	1aff      	subgt	r7, r7, r3
 800a73c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a73e:	2b00      	cmp	r3, #0
 800a740:	dd16      	ble.n	800a770 <_strtod_l+0x738>
 800a742:	4641      	mov	r1, r8
 800a744:	9805      	ldr	r0, [sp, #20]
 800a746:	461a      	mov	r2, r3
 800a748:	f7ff f9a2 	bl	8009a90 <__pow5mult>
 800a74c:	4680      	mov	r8, r0
 800a74e:	2800      	cmp	r0, #0
 800a750:	d0ba      	beq.n	800a6c8 <_strtod_l+0x690>
 800a752:	4601      	mov	r1, r0
 800a754:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a756:	9805      	ldr	r0, [sp, #20]
 800a758:	f7ff f8f8 	bl	800994c <__multiply>
 800a75c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a75e:	2800      	cmp	r0, #0
 800a760:	f43f ae8d 	beq.w	800a47e <_strtod_l+0x446>
 800a764:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a766:	9805      	ldr	r0, [sp, #20]
 800a768:	f7fe ffdc 	bl	8009724 <_Bfree>
 800a76c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a76e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a770:	2d00      	cmp	r5, #0
 800a772:	dc1d      	bgt.n	800a7b0 <_strtod_l+0x778>
 800a774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	dd23      	ble.n	800a7c2 <_strtod_l+0x78a>
 800a77a:	4649      	mov	r1, r9
 800a77c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a77e:	9805      	ldr	r0, [sp, #20]
 800a780:	f7ff f986 	bl	8009a90 <__pow5mult>
 800a784:	4681      	mov	r9, r0
 800a786:	b9e0      	cbnz	r0, 800a7c2 <_strtod_l+0x78a>
 800a788:	f04f 0900 	mov.w	r9, #0
 800a78c:	e677      	b.n	800a47e <_strtod_l+0x446>
 800a78e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a792:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a796:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a79a:	35e2      	adds	r5, #226	@ 0xe2
 800a79c:	fa01 f305 	lsl.w	r3, r1, r5
 800a7a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7a2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a7a4:	e7ba      	b.n	800a71c <_strtod_l+0x6e4>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7ae:	e7b5      	b.n	800a71c <_strtod_l+0x6e4>
 800a7b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7b2:	9805      	ldr	r0, [sp, #20]
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	f7ff f9c5 	bl	8009b44 <__lshift>
 800a7ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d1d9      	bne.n	800a774 <_strtod_l+0x73c>
 800a7c0:	e65d      	b.n	800a47e <_strtod_l+0x446>
 800a7c2:	2e00      	cmp	r6, #0
 800a7c4:	dd07      	ble.n	800a7d6 <_strtod_l+0x79e>
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	9805      	ldr	r0, [sp, #20]
 800a7ca:	4632      	mov	r2, r6
 800a7cc:	f7ff f9ba 	bl	8009b44 <__lshift>
 800a7d0:	4681      	mov	r9, r0
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d0d8      	beq.n	800a788 <_strtod_l+0x750>
 800a7d6:	2f00      	cmp	r7, #0
 800a7d8:	dd08      	ble.n	800a7ec <_strtod_l+0x7b4>
 800a7da:	4641      	mov	r1, r8
 800a7dc:	9805      	ldr	r0, [sp, #20]
 800a7de:	463a      	mov	r2, r7
 800a7e0:	f7ff f9b0 	bl	8009b44 <__lshift>
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f43f ae49 	beq.w	800a47e <_strtod_l+0x446>
 800a7ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7ee:	9805      	ldr	r0, [sp, #20]
 800a7f0:	464a      	mov	r2, r9
 800a7f2:	f7ff fa2f 	bl	8009c54 <__mdiff>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f43f ae40 	beq.w	800a47e <_strtod_l+0x446>
 800a7fe:	68c3      	ldr	r3, [r0, #12]
 800a800:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a802:	2300      	movs	r3, #0
 800a804:	60c3      	str	r3, [r0, #12]
 800a806:	4641      	mov	r1, r8
 800a808:	f7ff fa08 	bl	8009c1c <__mcmp>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	da45      	bge.n	800a89c <_strtod_l+0x864>
 800a810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a812:	ea53 030a 	orrs.w	r3, r3, sl
 800a816:	d16b      	bne.n	800a8f0 <_strtod_l+0x8b8>
 800a818:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d167      	bne.n	800a8f0 <_strtod_l+0x8b8>
 800a820:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a824:	0d1b      	lsrs	r3, r3, #20
 800a826:	051b      	lsls	r3, r3, #20
 800a828:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a82c:	d960      	bls.n	800a8f0 <_strtod_l+0x8b8>
 800a82e:	6963      	ldr	r3, [r4, #20]
 800a830:	b913      	cbnz	r3, 800a838 <_strtod_l+0x800>
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	2b01      	cmp	r3, #1
 800a836:	dd5b      	ble.n	800a8f0 <_strtod_l+0x8b8>
 800a838:	4621      	mov	r1, r4
 800a83a:	2201      	movs	r2, #1
 800a83c:	9805      	ldr	r0, [sp, #20]
 800a83e:	f7ff f981 	bl	8009b44 <__lshift>
 800a842:	4641      	mov	r1, r8
 800a844:	4604      	mov	r4, r0
 800a846:	f7ff f9e9 	bl	8009c1c <__mcmp>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	dd50      	ble.n	800a8f0 <_strtod_l+0x8b8>
 800a84e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a852:	9a08      	ldr	r2, [sp, #32]
 800a854:	0d1b      	lsrs	r3, r3, #20
 800a856:	051b      	lsls	r3, r3, #20
 800a858:	2a00      	cmp	r2, #0
 800a85a:	d06a      	beq.n	800a932 <_strtod_l+0x8fa>
 800a85c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a860:	d867      	bhi.n	800a932 <_strtod_l+0x8fa>
 800a862:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a866:	f67f ae9d 	bls.w	800a5a4 <_strtod_l+0x56c>
 800a86a:	4b0a      	ldr	r3, [pc, #40]	@ (800a894 <_strtod_l+0x85c>)
 800a86c:	4650      	mov	r0, sl
 800a86e:	4659      	mov	r1, fp
 800a870:	2200      	movs	r2, #0
 800a872:	f7f5 fec1 	bl	80005f8 <__aeabi_dmul>
 800a876:	4b08      	ldr	r3, [pc, #32]	@ (800a898 <_strtod_l+0x860>)
 800a878:	400b      	ands	r3, r1
 800a87a:	4682      	mov	sl, r0
 800a87c:	468b      	mov	fp, r1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f47f ae08 	bne.w	800a494 <_strtod_l+0x45c>
 800a884:	9a05      	ldr	r2, [sp, #20]
 800a886:	2322      	movs	r3, #34	@ 0x22
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	e603      	b.n	800a494 <_strtod_l+0x45c>
 800a88c:	0800c110 	.word	0x0800c110
 800a890:	fffffc02 	.word	0xfffffc02
 800a894:	39500000 	.word	0x39500000
 800a898:	7ff00000 	.word	0x7ff00000
 800a89c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a8a0:	d165      	bne.n	800a96e <_strtod_l+0x936>
 800a8a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a8a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8a8:	b35a      	cbz	r2, 800a902 <_strtod_l+0x8ca>
 800a8aa:	4a9f      	ldr	r2, [pc, #636]	@ (800ab28 <_strtod_l+0xaf0>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d12b      	bne.n	800a908 <_strtod_l+0x8d0>
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	4651      	mov	r1, sl
 800a8b4:	b303      	cbz	r3, 800a8f8 <_strtod_l+0x8c0>
 800a8b6:	4b9d      	ldr	r3, [pc, #628]	@ (800ab2c <_strtod_l+0xaf4>)
 800a8b8:	465a      	mov	r2, fp
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c4:	d81b      	bhi.n	800a8fe <_strtod_l+0x8c6>
 800a8c6:	0d1b      	lsrs	r3, r3, #20
 800a8c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	d119      	bne.n	800a908 <_strtod_l+0x8d0>
 800a8d4:	4b96      	ldr	r3, [pc, #600]	@ (800ab30 <_strtod_l+0xaf8>)
 800a8d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d102      	bne.n	800a8e2 <_strtod_l+0x8aa>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	f43f adce 	beq.w	800a47e <_strtod_l+0x446>
 800a8e2:	4b92      	ldr	r3, [pc, #584]	@ (800ab2c <_strtod_l+0xaf4>)
 800a8e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8e6:	401a      	ands	r2, r3
 800a8e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a8ec:	f04f 0a00 	mov.w	sl, #0
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1b9      	bne.n	800a86a <_strtod_l+0x832>
 800a8f6:	e5cd      	b.n	800a494 <_strtod_l+0x45c>
 800a8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fc:	e7e8      	b.n	800a8d0 <_strtod_l+0x898>
 800a8fe:	4613      	mov	r3, r2
 800a900:	e7e6      	b.n	800a8d0 <_strtod_l+0x898>
 800a902:	ea53 030a 	orrs.w	r3, r3, sl
 800a906:	d0a2      	beq.n	800a84e <_strtod_l+0x816>
 800a908:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a90a:	b1db      	cbz	r3, 800a944 <_strtod_l+0x90c>
 800a90c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a90e:	4213      	tst	r3, r2
 800a910:	d0ee      	beq.n	800a8f0 <_strtod_l+0x8b8>
 800a912:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a914:	9a08      	ldr	r2, [sp, #32]
 800a916:	4650      	mov	r0, sl
 800a918:	4659      	mov	r1, fp
 800a91a:	b1bb      	cbz	r3, 800a94c <_strtod_l+0x914>
 800a91c:	f7ff fb6c 	bl	8009ff8 <sulp>
 800a920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a924:	ec53 2b10 	vmov	r2, r3, d0
 800a928:	f7f5 fcb0 	bl	800028c <__adddf3>
 800a92c:	4682      	mov	sl, r0
 800a92e:	468b      	mov	fp, r1
 800a930:	e7de      	b.n	800a8f0 <_strtod_l+0x8b8>
 800a932:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a936:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a93a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a93e:	f04f 3aff 	mov.w	sl, #4294967295
 800a942:	e7d5      	b.n	800a8f0 <_strtod_l+0x8b8>
 800a944:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a946:	ea13 0f0a 	tst.w	r3, sl
 800a94a:	e7e1      	b.n	800a910 <_strtod_l+0x8d8>
 800a94c:	f7ff fb54 	bl	8009ff8 <sulp>
 800a950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a954:	ec53 2b10 	vmov	r2, r3, d0
 800a958:	f7f5 fc96 	bl	8000288 <__aeabi_dsub>
 800a95c:	2200      	movs	r2, #0
 800a95e:	2300      	movs	r3, #0
 800a960:	4682      	mov	sl, r0
 800a962:	468b      	mov	fp, r1
 800a964:	f7f6 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0c1      	beq.n	800a8f0 <_strtod_l+0x8b8>
 800a96c:	e61a      	b.n	800a5a4 <_strtod_l+0x56c>
 800a96e:	4641      	mov	r1, r8
 800a970:	4620      	mov	r0, r4
 800a972:	f7ff facb 	bl	8009f0c <__ratio>
 800a976:	ec57 6b10 	vmov	r6, r7, d0
 800a97a:	2200      	movs	r2, #0
 800a97c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a980:	4630      	mov	r0, r6
 800a982:	4639      	mov	r1, r7
 800a984:	f7f6 f8b4 	bl	8000af0 <__aeabi_dcmple>
 800a988:	2800      	cmp	r0, #0
 800a98a:	d06f      	beq.n	800aa6c <_strtod_l+0xa34>
 800a98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d17a      	bne.n	800aa88 <_strtod_l+0xa50>
 800a992:	f1ba 0f00 	cmp.w	sl, #0
 800a996:	d158      	bne.n	800aa4a <_strtod_l+0xa12>
 800a998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a99a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d15a      	bne.n	800aa58 <_strtod_l+0xa20>
 800a9a2:	4b64      	ldr	r3, [pc, #400]	@ (800ab34 <_strtod_l+0xafc>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	f7f6 f897 	bl	8000adc <__aeabi_dcmplt>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d159      	bne.n	800aa66 <_strtod_l+0xa2e>
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	4b60      	ldr	r3, [pc, #384]	@ (800ab38 <_strtod_l+0xb00>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f7f5 fe1d 	bl	80005f8 <__aeabi_dmul>
 800a9be:	4606      	mov	r6, r0
 800a9c0:	460f      	mov	r7, r1
 800a9c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a9c6:	9606      	str	r6, [sp, #24]
 800a9c8:	9307      	str	r3, [sp, #28]
 800a9ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9ce:	4d57      	ldr	r5, [pc, #348]	@ (800ab2c <_strtod_l+0xaf4>)
 800a9d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d6:	401d      	ands	r5, r3
 800a9d8:	4b58      	ldr	r3, [pc, #352]	@ (800ab3c <_strtod_l+0xb04>)
 800a9da:	429d      	cmp	r5, r3
 800a9dc:	f040 80b2 	bne.w	800ab44 <_strtod_l+0xb0c>
 800a9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a9e6:	ec4b ab10 	vmov	d0, sl, fp
 800a9ea:	f7ff f9c7 	bl	8009d7c <__ulp>
 800a9ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9f2:	ec51 0b10 	vmov	r0, r1, d0
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	4652      	mov	r2, sl
 800a9fc:	465b      	mov	r3, fp
 800a9fe:	f7f5 fc45 	bl	800028c <__adddf3>
 800aa02:	460b      	mov	r3, r1
 800aa04:	4949      	ldr	r1, [pc, #292]	@ (800ab2c <_strtod_l+0xaf4>)
 800aa06:	4a4e      	ldr	r2, [pc, #312]	@ (800ab40 <_strtod_l+0xb08>)
 800aa08:	4019      	ands	r1, r3
 800aa0a:	4291      	cmp	r1, r2
 800aa0c:	4682      	mov	sl, r0
 800aa0e:	d942      	bls.n	800aa96 <_strtod_l+0xa5e>
 800aa10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa12:	4b47      	ldr	r3, [pc, #284]	@ (800ab30 <_strtod_l+0xaf8>)
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d103      	bne.n	800aa20 <_strtod_l+0x9e8>
 800aa18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	f43f ad2f 	beq.w	800a47e <_strtod_l+0x446>
 800aa20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ab30 <_strtod_l+0xaf8>
 800aa24:	f04f 3aff 	mov.w	sl, #4294967295
 800aa28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa2a:	9805      	ldr	r0, [sp, #20]
 800aa2c:	f7fe fe7a 	bl	8009724 <_Bfree>
 800aa30:	9805      	ldr	r0, [sp, #20]
 800aa32:	4649      	mov	r1, r9
 800aa34:	f7fe fe76 	bl	8009724 <_Bfree>
 800aa38:	9805      	ldr	r0, [sp, #20]
 800aa3a:	4641      	mov	r1, r8
 800aa3c:	f7fe fe72 	bl	8009724 <_Bfree>
 800aa40:	9805      	ldr	r0, [sp, #20]
 800aa42:	4621      	mov	r1, r4
 800aa44:	f7fe fe6e 	bl	8009724 <_Bfree>
 800aa48:	e619      	b.n	800a67e <_strtod_l+0x646>
 800aa4a:	f1ba 0f01 	cmp.w	sl, #1
 800aa4e:	d103      	bne.n	800aa58 <_strtod_l+0xa20>
 800aa50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f43f ada6 	beq.w	800a5a4 <_strtod_l+0x56c>
 800aa58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ab08 <_strtod_l+0xad0>
 800aa5c:	4f35      	ldr	r7, [pc, #212]	@ (800ab34 <_strtod_l+0xafc>)
 800aa5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa62:	2600      	movs	r6, #0
 800aa64:	e7b1      	b.n	800a9ca <_strtod_l+0x992>
 800aa66:	4f34      	ldr	r7, [pc, #208]	@ (800ab38 <_strtod_l+0xb00>)
 800aa68:	2600      	movs	r6, #0
 800aa6a:	e7aa      	b.n	800a9c2 <_strtod_l+0x98a>
 800aa6c:	4b32      	ldr	r3, [pc, #200]	@ (800ab38 <_strtod_l+0xb00>)
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	2200      	movs	r2, #0
 800aa74:	f7f5 fdc0 	bl	80005f8 <__aeabi_dmul>
 800aa78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d09f      	beq.n	800a9c2 <_strtod_l+0x98a>
 800aa82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aa86:	e7a0      	b.n	800a9ca <_strtod_l+0x992>
 800aa88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ab10 <_strtod_l+0xad8>
 800aa8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa90:	ec57 6b17 	vmov	r6, r7, d7
 800aa94:	e799      	b.n	800a9ca <_strtod_l+0x992>
 800aa96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aa9a:	9b08      	ldr	r3, [sp, #32]
 800aa9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1c1      	bne.n	800aa28 <_strtod_l+0x9f0>
 800aaa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aaa8:	0d1b      	lsrs	r3, r3, #20
 800aaaa:	051b      	lsls	r3, r3, #20
 800aaac:	429d      	cmp	r5, r3
 800aaae:	d1bb      	bne.n	800aa28 <_strtod_l+0x9f0>
 800aab0:	4630      	mov	r0, r6
 800aab2:	4639      	mov	r1, r7
 800aab4:	f7f6 fa0e 	bl	8000ed4 <__aeabi_d2lz>
 800aab8:	f7f5 fd70 	bl	800059c <__aeabi_l2d>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4630      	mov	r0, r6
 800aac2:	4639      	mov	r1, r7
 800aac4:	f7f5 fbe0 	bl	8000288 <__aeabi_dsub>
 800aac8:	460b      	mov	r3, r1
 800aaca:	4602      	mov	r2, r0
 800aacc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aad0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aad6:	ea46 060a 	orr.w	r6, r6, sl
 800aada:	431e      	orrs	r6, r3
 800aadc:	d06f      	beq.n	800abbe <_strtod_l+0xb86>
 800aade:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab18 <_strtod_l+0xae0>)
 800aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae4:	f7f5 fffa 	bl	8000adc <__aeabi_dcmplt>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f47f acd3 	bne.w	800a494 <_strtod_l+0x45c>
 800aaee:	a30c      	add	r3, pc, #48	@ (adr r3, 800ab20 <_strtod_l+0xae8>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaf8:	f7f6 f80e 	bl	8000b18 <__aeabi_dcmpgt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d093      	beq.n	800aa28 <_strtod_l+0x9f0>
 800ab00:	e4c8      	b.n	800a494 <_strtod_l+0x45c>
 800ab02:	bf00      	nop
 800ab04:	f3af 8000 	nop.w
 800ab08:	00000000 	.word	0x00000000
 800ab0c:	bff00000 	.word	0xbff00000
 800ab10:	00000000 	.word	0x00000000
 800ab14:	3ff00000 	.word	0x3ff00000
 800ab18:	94a03595 	.word	0x94a03595
 800ab1c:	3fdfffff 	.word	0x3fdfffff
 800ab20:	35afe535 	.word	0x35afe535
 800ab24:	3fe00000 	.word	0x3fe00000
 800ab28:	000fffff 	.word	0x000fffff
 800ab2c:	7ff00000 	.word	0x7ff00000
 800ab30:	7fefffff 	.word	0x7fefffff
 800ab34:	3ff00000 	.word	0x3ff00000
 800ab38:	3fe00000 	.word	0x3fe00000
 800ab3c:	7fe00000 	.word	0x7fe00000
 800ab40:	7c9fffff 	.word	0x7c9fffff
 800ab44:	9b08      	ldr	r3, [sp, #32]
 800ab46:	b323      	cbz	r3, 800ab92 <_strtod_l+0xb5a>
 800ab48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ab4c:	d821      	bhi.n	800ab92 <_strtod_l+0xb5a>
 800ab4e:	a328      	add	r3, pc, #160	@ (adr r3, 800abf0 <_strtod_l+0xbb8>)
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	4630      	mov	r0, r6
 800ab56:	4639      	mov	r1, r7
 800ab58:	f7f5 ffca 	bl	8000af0 <__aeabi_dcmple>
 800ab5c:	b1a0      	cbz	r0, 800ab88 <_strtod_l+0xb50>
 800ab5e:	4639      	mov	r1, r7
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7f6 f821 	bl	8000ba8 <__aeabi_d2uiz>
 800ab66:	2801      	cmp	r0, #1
 800ab68:	bf38      	it	cc
 800ab6a:	2001      	movcc	r0, #1
 800ab6c:	f7f5 fcca 	bl	8000504 <__aeabi_ui2d>
 800ab70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab72:	4606      	mov	r6, r0
 800ab74:	460f      	mov	r7, r1
 800ab76:	b9fb      	cbnz	r3, 800abb8 <_strtod_l+0xb80>
 800ab78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ab7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ab80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ab84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ab8e:	1b5b      	subs	r3, r3, r5
 800ab90:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ab96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ab9a:	f7ff f8ef 	bl	8009d7c <__ulp>
 800ab9e:	4650      	mov	r0, sl
 800aba0:	ec53 2b10 	vmov	r2, r3, d0
 800aba4:	4659      	mov	r1, fp
 800aba6:	f7f5 fd27 	bl	80005f8 <__aeabi_dmul>
 800abaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800abae:	f7f5 fb6d 	bl	800028c <__adddf3>
 800abb2:	4682      	mov	sl, r0
 800abb4:	468b      	mov	fp, r1
 800abb6:	e770      	b.n	800aa9a <_strtod_l+0xa62>
 800abb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800abbc:	e7e0      	b.n	800ab80 <_strtod_l+0xb48>
 800abbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800abf8 <_strtod_l+0xbc0>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f7f5 ff8a 	bl	8000adc <__aeabi_dcmplt>
 800abc8:	e798      	b.n	800aafc <_strtod_l+0xac4>
 800abca:	2300      	movs	r3, #0
 800abcc:	930e      	str	r3, [sp, #56]	@ 0x38
 800abce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800abd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	f7ff ba6d 	b.w	800a0b2 <_strtod_l+0x7a>
 800abd8:	2a65      	cmp	r2, #101	@ 0x65
 800abda:	f43f ab68 	beq.w	800a2ae <_strtod_l+0x276>
 800abde:	2a45      	cmp	r2, #69	@ 0x45
 800abe0:	f43f ab65 	beq.w	800a2ae <_strtod_l+0x276>
 800abe4:	2301      	movs	r3, #1
 800abe6:	f7ff bba0 	b.w	800a32a <_strtod_l+0x2f2>
 800abea:	bf00      	nop
 800abec:	f3af 8000 	nop.w
 800abf0:	ffc00000 	.word	0xffc00000
 800abf4:	41dfffff 	.word	0x41dfffff
 800abf8:	94a03595 	.word	0x94a03595
 800abfc:	3fcfffff 	.word	0x3fcfffff

0800ac00 <_strtod_r>:
 800ac00:	4b01      	ldr	r3, [pc, #4]	@ (800ac08 <_strtod_r+0x8>)
 800ac02:	f7ff ba19 	b.w	800a038 <_strtod_l>
 800ac06:	bf00      	nop
 800ac08:	2000009c 	.word	0x2000009c

0800ac0c <__ssputs_r>:
 800ac0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac10:	688e      	ldr	r6, [r1, #8]
 800ac12:	461f      	mov	r7, r3
 800ac14:	42be      	cmp	r6, r7
 800ac16:	680b      	ldr	r3, [r1, #0]
 800ac18:	4682      	mov	sl, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	4690      	mov	r8, r2
 800ac1e:	d82d      	bhi.n	800ac7c <__ssputs_r+0x70>
 800ac20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac28:	d026      	beq.n	800ac78 <__ssputs_r+0x6c>
 800ac2a:	6965      	ldr	r5, [r4, #20]
 800ac2c:	6909      	ldr	r1, [r1, #16]
 800ac2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac32:	eba3 0901 	sub.w	r9, r3, r1
 800ac36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac3a:	1c7b      	adds	r3, r7, #1
 800ac3c:	444b      	add	r3, r9
 800ac3e:	106d      	asrs	r5, r5, #1
 800ac40:	429d      	cmp	r5, r3
 800ac42:	bf38      	it	cc
 800ac44:	461d      	movcc	r5, r3
 800ac46:	0553      	lsls	r3, r2, #21
 800ac48:	d527      	bpl.n	800ac9a <__ssputs_r+0x8e>
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	f7fc fc4a 	bl	80074e4 <_malloc_r>
 800ac50:	4606      	mov	r6, r0
 800ac52:	b360      	cbz	r0, 800acae <__ssputs_r+0xa2>
 800ac54:	6921      	ldr	r1, [r4, #16]
 800ac56:	464a      	mov	r2, r9
 800ac58:	f7fd fe6b 	bl	8008932 <memcpy>
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac66:	81a3      	strh	r3, [r4, #12]
 800ac68:	6126      	str	r6, [r4, #16]
 800ac6a:	6165      	str	r5, [r4, #20]
 800ac6c:	444e      	add	r6, r9
 800ac6e:	eba5 0509 	sub.w	r5, r5, r9
 800ac72:	6026      	str	r6, [r4, #0]
 800ac74:	60a5      	str	r5, [r4, #8]
 800ac76:	463e      	mov	r6, r7
 800ac78:	42be      	cmp	r6, r7
 800ac7a:	d900      	bls.n	800ac7e <__ssputs_r+0x72>
 800ac7c:	463e      	mov	r6, r7
 800ac7e:	6820      	ldr	r0, [r4, #0]
 800ac80:	4632      	mov	r2, r6
 800ac82:	4641      	mov	r1, r8
 800ac84:	f000 fa28 	bl	800b0d8 <memmove>
 800ac88:	68a3      	ldr	r3, [r4, #8]
 800ac8a:	1b9b      	subs	r3, r3, r6
 800ac8c:	60a3      	str	r3, [r4, #8]
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	4433      	add	r3, r6
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	2000      	movs	r0, #0
 800ac96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9a:	462a      	mov	r2, r5
 800ac9c:	f000 fddd 	bl	800b85a <_realloc_r>
 800aca0:	4606      	mov	r6, r0
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d1e0      	bne.n	800ac68 <__ssputs_r+0x5c>
 800aca6:	6921      	ldr	r1, [r4, #16]
 800aca8:	4650      	mov	r0, sl
 800acaa:	f7fe fcb1 	bl	8009610 <_free_r>
 800acae:	230c      	movs	r3, #12
 800acb0:	f8ca 3000 	str.w	r3, [sl]
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	e7e9      	b.n	800ac96 <__ssputs_r+0x8a>
	...

0800acc4 <_svfiprintf_r>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	4698      	mov	r8, r3
 800acca:	898b      	ldrh	r3, [r1, #12]
 800accc:	061b      	lsls	r3, r3, #24
 800acce:	b09d      	sub	sp, #116	@ 0x74
 800acd0:	4607      	mov	r7, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	4614      	mov	r4, r2
 800acd6:	d510      	bpl.n	800acfa <_svfiprintf_r+0x36>
 800acd8:	690b      	ldr	r3, [r1, #16]
 800acda:	b973      	cbnz	r3, 800acfa <_svfiprintf_r+0x36>
 800acdc:	2140      	movs	r1, #64	@ 0x40
 800acde:	f7fc fc01 	bl	80074e4 <_malloc_r>
 800ace2:	6028      	str	r0, [r5, #0]
 800ace4:	6128      	str	r0, [r5, #16]
 800ace6:	b930      	cbnz	r0, 800acf6 <_svfiprintf_r+0x32>
 800ace8:	230c      	movs	r3, #12
 800acea:	603b      	str	r3, [r7, #0]
 800acec:	f04f 30ff 	mov.w	r0, #4294967295
 800acf0:	b01d      	add	sp, #116	@ 0x74
 800acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf6:	2340      	movs	r3, #64	@ 0x40
 800acf8:	616b      	str	r3, [r5, #20]
 800acfa:	2300      	movs	r3, #0
 800acfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800acfe:	2320      	movs	r3, #32
 800ad00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad04:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad08:	2330      	movs	r3, #48	@ 0x30
 800ad0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aea8 <_svfiprintf_r+0x1e4>
 800ad0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad12:	f04f 0901 	mov.w	r9, #1
 800ad16:	4623      	mov	r3, r4
 800ad18:	469a      	mov	sl, r3
 800ad1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad1e:	b10a      	cbz	r2, 800ad24 <_svfiprintf_r+0x60>
 800ad20:	2a25      	cmp	r2, #37	@ 0x25
 800ad22:	d1f9      	bne.n	800ad18 <_svfiprintf_r+0x54>
 800ad24:	ebba 0b04 	subs.w	fp, sl, r4
 800ad28:	d00b      	beq.n	800ad42 <_svfiprintf_r+0x7e>
 800ad2a:	465b      	mov	r3, fp
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	4638      	mov	r0, r7
 800ad32:	f7ff ff6b 	bl	800ac0c <__ssputs_r>
 800ad36:	3001      	adds	r0, #1
 800ad38:	f000 80a7 	beq.w	800ae8a <_svfiprintf_r+0x1c6>
 800ad3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad3e:	445a      	add	r2, fp
 800ad40:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad42:	f89a 3000 	ldrb.w	r3, [sl]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 809f 	beq.w	800ae8a <_svfiprintf_r+0x1c6>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad56:	f10a 0a01 	add.w	sl, sl, #1
 800ad5a:	9304      	str	r3, [sp, #16]
 800ad5c:	9307      	str	r3, [sp, #28]
 800ad5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad62:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad64:	4654      	mov	r4, sl
 800ad66:	2205      	movs	r2, #5
 800ad68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6c:	484e      	ldr	r0, [pc, #312]	@ (800aea8 <_svfiprintf_r+0x1e4>)
 800ad6e:	f7f5 fa2f 	bl	80001d0 <memchr>
 800ad72:	9a04      	ldr	r2, [sp, #16]
 800ad74:	b9d8      	cbnz	r0, 800adae <_svfiprintf_r+0xea>
 800ad76:	06d0      	lsls	r0, r2, #27
 800ad78:	bf44      	itt	mi
 800ad7a:	2320      	movmi	r3, #32
 800ad7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad80:	0711      	lsls	r1, r2, #28
 800ad82:	bf44      	itt	mi
 800ad84:	232b      	movmi	r3, #43	@ 0x2b
 800ad86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad90:	d015      	beq.n	800adbe <_svfiprintf_r+0xfa>
 800ad92:	9a07      	ldr	r2, [sp, #28]
 800ad94:	4654      	mov	r4, sl
 800ad96:	2000      	movs	r0, #0
 800ad98:	f04f 0c0a 	mov.w	ip, #10
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ada2:	3b30      	subs	r3, #48	@ 0x30
 800ada4:	2b09      	cmp	r3, #9
 800ada6:	d94b      	bls.n	800ae40 <_svfiprintf_r+0x17c>
 800ada8:	b1b0      	cbz	r0, 800add8 <_svfiprintf_r+0x114>
 800adaa:	9207      	str	r2, [sp, #28]
 800adac:	e014      	b.n	800add8 <_svfiprintf_r+0x114>
 800adae:	eba0 0308 	sub.w	r3, r0, r8
 800adb2:	fa09 f303 	lsl.w	r3, r9, r3
 800adb6:	4313      	orrs	r3, r2
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	46a2      	mov	sl, r4
 800adbc:	e7d2      	b.n	800ad64 <_svfiprintf_r+0xa0>
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	1d19      	adds	r1, r3, #4
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	9103      	str	r1, [sp, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	bfbb      	ittet	lt
 800adca:	425b      	neglt	r3, r3
 800adcc:	f042 0202 	orrlt.w	r2, r2, #2
 800add0:	9307      	strge	r3, [sp, #28]
 800add2:	9307      	strlt	r3, [sp, #28]
 800add4:	bfb8      	it	lt
 800add6:	9204      	strlt	r2, [sp, #16]
 800add8:	7823      	ldrb	r3, [r4, #0]
 800adda:	2b2e      	cmp	r3, #46	@ 0x2e
 800addc:	d10a      	bne.n	800adf4 <_svfiprintf_r+0x130>
 800adde:	7863      	ldrb	r3, [r4, #1]
 800ade0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ade2:	d132      	bne.n	800ae4a <_svfiprintf_r+0x186>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	1d1a      	adds	r2, r3, #4
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	9203      	str	r2, [sp, #12]
 800adec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adf0:	3402      	adds	r4, #2
 800adf2:	9305      	str	r3, [sp, #20]
 800adf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aeb8 <_svfiprintf_r+0x1f4>
 800adf8:	7821      	ldrb	r1, [r4, #0]
 800adfa:	2203      	movs	r2, #3
 800adfc:	4650      	mov	r0, sl
 800adfe:	f7f5 f9e7 	bl	80001d0 <memchr>
 800ae02:	b138      	cbz	r0, 800ae14 <_svfiprintf_r+0x150>
 800ae04:	9b04      	ldr	r3, [sp, #16]
 800ae06:	eba0 000a 	sub.w	r0, r0, sl
 800ae0a:	2240      	movs	r2, #64	@ 0x40
 800ae0c:	4082      	lsls	r2, r0
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	3401      	adds	r4, #1
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae18:	4824      	ldr	r0, [pc, #144]	@ (800aeac <_svfiprintf_r+0x1e8>)
 800ae1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae1e:	2206      	movs	r2, #6
 800ae20:	f7f5 f9d6 	bl	80001d0 <memchr>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d036      	beq.n	800ae96 <_svfiprintf_r+0x1d2>
 800ae28:	4b21      	ldr	r3, [pc, #132]	@ (800aeb0 <_svfiprintf_r+0x1ec>)
 800ae2a:	bb1b      	cbnz	r3, 800ae74 <_svfiprintf_r+0x1b0>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	3307      	adds	r3, #7
 800ae30:	f023 0307 	bic.w	r3, r3, #7
 800ae34:	3308      	adds	r3, #8
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3a:	4433      	add	r3, r6
 800ae3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae3e:	e76a      	b.n	800ad16 <_svfiprintf_r+0x52>
 800ae40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae44:	460c      	mov	r4, r1
 800ae46:	2001      	movs	r0, #1
 800ae48:	e7a8      	b.n	800ad9c <_svfiprintf_r+0xd8>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	3401      	adds	r4, #1
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	4619      	mov	r1, r3
 800ae52:	f04f 0c0a 	mov.w	ip, #10
 800ae56:	4620      	mov	r0, r4
 800ae58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae5c:	3a30      	subs	r2, #48	@ 0x30
 800ae5e:	2a09      	cmp	r2, #9
 800ae60:	d903      	bls.n	800ae6a <_svfiprintf_r+0x1a6>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0c6      	beq.n	800adf4 <_svfiprintf_r+0x130>
 800ae66:	9105      	str	r1, [sp, #20]
 800ae68:	e7c4      	b.n	800adf4 <_svfiprintf_r+0x130>
 800ae6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae6e:	4604      	mov	r4, r0
 800ae70:	2301      	movs	r3, #1
 800ae72:	e7f0      	b.n	800ae56 <_svfiprintf_r+0x192>
 800ae74:	ab03      	add	r3, sp, #12
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	462a      	mov	r2, r5
 800ae7a:	4b0e      	ldr	r3, [pc, #56]	@ (800aeb4 <_svfiprintf_r+0x1f0>)
 800ae7c:	a904      	add	r1, sp, #16
 800ae7e:	4638      	mov	r0, r7
 800ae80:	f7fc fcd8 	bl	8007834 <_printf_float>
 800ae84:	1c42      	adds	r2, r0, #1
 800ae86:	4606      	mov	r6, r0
 800ae88:	d1d6      	bne.n	800ae38 <_svfiprintf_r+0x174>
 800ae8a:	89ab      	ldrh	r3, [r5, #12]
 800ae8c:	065b      	lsls	r3, r3, #25
 800ae8e:	f53f af2d 	bmi.w	800acec <_svfiprintf_r+0x28>
 800ae92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae94:	e72c      	b.n	800acf0 <_svfiprintf_r+0x2c>
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	4b05      	ldr	r3, [pc, #20]	@ (800aeb4 <_svfiprintf_r+0x1f0>)
 800ae9e:	a904      	add	r1, sp, #16
 800aea0:	4638      	mov	r0, r7
 800aea2:	f7fc ff5f 	bl	8007d64 <_printf_i>
 800aea6:	e7ed      	b.n	800ae84 <_svfiprintf_r+0x1c0>
 800aea8:	0800bf36 	.word	0x0800bf36
 800aeac:	0800bf40 	.word	0x0800bf40
 800aeb0:	08007835 	.word	0x08007835
 800aeb4:	0800ac0d 	.word	0x0800ac0d
 800aeb8:	0800bf3c 	.word	0x0800bf3c

0800aebc <__sflush_r>:
 800aebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	0716      	lsls	r6, r2, #28
 800aec6:	4605      	mov	r5, r0
 800aec8:	460c      	mov	r4, r1
 800aeca:	d454      	bmi.n	800af76 <__sflush_r+0xba>
 800aecc:	684b      	ldr	r3, [r1, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	dc02      	bgt.n	800aed8 <__sflush_r+0x1c>
 800aed2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	dd48      	ble.n	800af6a <__sflush_r+0xae>
 800aed8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aeda:	2e00      	cmp	r6, #0
 800aedc:	d045      	beq.n	800af6a <__sflush_r+0xae>
 800aede:	2300      	movs	r3, #0
 800aee0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aee4:	682f      	ldr	r7, [r5, #0]
 800aee6:	6a21      	ldr	r1, [r4, #32]
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	d030      	beq.n	800af4e <__sflush_r+0x92>
 800aeec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	0759      	lsls	r1, r3, #29
 800aef2:	d505      	bpl.n	800af00 <__sflush_r+0x44>
 800aef4:	6863      	ldr	r3, [r4, #4]
 800aef6:	1ad2      	subs	r2, r2, r3
 800aef8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aefa:	b10b      	cbz	r3, 800af00 <__sflush_r+0x44>
 800aefc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aefe:	1ad2      	subs	r2, r2, r3
 800af00:	2300      	movs	r3, #0
 800af02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af04:	6a21      	ldr	r1, [r4, #32]
 800af06:	4628      	mov	r0, r5
 800af08:	47b0      	blx	r6
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	d106      	bne.n	800af1e <__sflush_r+0x62>
 800af10:	6829      	ldr	r1, [r5, #0]
 800af12:	291d      	cmp	r1, #29
 800af14:	d82b      	bhi.n	800af6e <__sflush_r+0xb2>
 800af16:	4a2a      	ldr	r2, [pc, #168]	@ (800afc0 <__sflush_r+0x104>)
 800af18:	40ca      	lsrs	r2, r1
 800af1a:	07d6      	lsls	r6, r2, #31
 800af1c:	d527      	bpl.n	800af6e <__sflush_r+0xb2>
 800af1e:	2200      	movs	r2, #0
 800af20:	6062      	str	r2, [r4, #4]
 800af22:	04d9      	lsls	r1, r3, #19
 800af24:	6922      	ldr	r2, [r4, #16]
 800af26:	6022      	str	r2, [r4, #0]
 800af28:	d504      	bpl.n	800af34 <__sflush_r+0x78>
 800af2a:	1c42      	adds	r2, r0, #1
 800af2c:	d101      	bne.n	800af32 <__sflush_r+0x76>
 800af2e:	682b      	ldr	r3, [r5, #0]
 800af30:	b903      	cbnz	r3, 800af34 <__sflush_r+0x78>
 800af32:	6560      	str	r0, [r4, #84]	@ 0x54
 800af34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af36:	602f      	str	r7, [r5, #0]
 800af38:	b1b9      	cbz	r1, 800af6a <__sflush_r+0xae>
 800af3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af3e:	4299      	cmp	r1, r3
 800af40:	d002      	beq.n	800af48 <__sflush_r+0x8c>
 800af42:	4628      	mov	r0, r5
 800af44:	f7fe fb64 	bl	8009610 <_free_r>
 800af48:	2300      	movs	r3, #0
 800af4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800af4c:	e00d      	b.n	800af6a <__sflush_r+0xae>
 800af4e:	2301      	movs	r3, #1
 800af50:	4628      	mov	r0, r5
 800af52:	47b0      	blx	r6
 800af54:	4602      	mov	r2, r0
 800af56:	1c50      	adds	r0, r2, #1
 800af58:	d1c9      	bne.n	800aeee <__sflush_r+0x32>
 800af5a:	682b      	ldr	r3, [r5, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0c6      	beq.n	800aeee <__sflush_r+0x32>
 800af60:	2b1d      	cmp	r3, #29
 800af62:	d001      	beq.n	800af68 <__sflush_r+0xac>
 800af64:	2b16      	cmp	r3, #22
 800af66:	d11e      	bne.n	800afa6 <__sflush_r+0xea>
 800af68:	602f      	str	r7, [r5, #0]
 800af6a:	2000      	movs	r0, #0
 800af6c:	e022      	b.n	800afb4 <__sflush_r+0xf8>
 800af6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af72:	b21b      	sxth	r3, r3
 800af74:	e01b      	b.n	800afae <__sflush_r+0xf2>
 800af76:	690f      	ldr	r7, [r1, #16]
 800af78:	2f00      	cmp	r7, #0
 800af7a:	d0f6      	beq.n	800af6a <__sflush_r+0xae>
 800af7c:	0793      	lsls	r3, r2, #30
 800af7e:	680e      	ldr	r6, [r1, #0]
 800af80:	bf08      	it	eq
 800af82:	694b      	ldreq	r3, [r1, #20]
 800af84:	600f      	str	r7, [r1, #0]
 800af86:	bf18      	it	ne
 800af88:	2300      	movne	r3, #0
 800af8a:	eba6 0807 	sub.w	r8, r6, r7
 800af8e:	608b      	str	r3, [r1, #8]
 800af90:	f1b8 0f00 	cmp.w	r8, #0
 800af94:	dde9      	ble.n	800af6a <__sflush_r+0xae>
 800af96:	6a21      	ldr	r1, [r4, #32]
 800af98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af9a:	4643      	mov	r3, r8
 800af9c:	463a      	mov	r2, r7
 800af9e:	4628      	mov	r0, r5
 800afa0:	47b0      	blx	r6
 800afa2:	2800      	cmp	r0, #0
 800afa4:	dc08      	bgt.n	800afb8 <__sflush_r+0xfc>
 800afa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afae:	81a3      	strh	r3, [r4, #12]
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb8:	4407      	add	r7, r0
 800afba:	eba8 0800 	sub.w	r8, r8, r0
 800afbe:	e7e7      	b.n	800af90 <__sflush_r+0xd4>
 800afc0:	20400001 	.word	0x20400001

0800afc4 <_fflush_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	690b      	ldr	r3, [r1, #16]
 800afc8:	4605      	mov	r5, r0
 800afca:	460c      	mov	r4, r1
 800afcc:	b913      	cbnz	r3, 800afd4 <_fflush_r+0x10>
 800afce:	2500      	movs	r5, #0
 800afd0:	4628      	mov	r0, r5
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	b118      	cbz	r0, 800afde <_fflush_r+0x1a>
 800afd6:	6a03      	ldr	r3, [r0, #32]
 800afd8:	b90b      	cbnz	r3, 800afde <_fflush_r+0x1a>
 800afda:	f7fd fa7b 	bl	80084d4 <__sinit>
 800afde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0f3      	beq.n	800afce <_fflush_r+0xa>
 800afe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afe8:	07d0      	lsls	r0, r2, #31
 800afea:	d404      	bmi.n	800aff6 <_fflush_r+0x32>
 800afec:	0599      	lsls	r1, r3, #22
 800afee:	d402      	bmi.n	800aff6 <_fflush_r+0x32>
 800aff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aff2:	f7fd fc9c 	bl	800892e <__retarget_lock_acquire_recursive>
 800aff6:	4628      	mov	r0, r5
 800aff8:	4621      	mov	r1, r4
 800affa:	f7ff ff5f 	bl	800aebc <__sflush_r>
 800affe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b000:	07da      	lsls	r2, r3, #31
 800b002:	4605      	mov	r5, r0
 800b004:	d4e4      	bmi.n	800afd0 <_fflush_r+0xc>
 800b006:	89a3      	ldrh	r3, [r4, #12]
 800b008:	059b      	lsls	r3, r3, #22
 800b00a:	d4e1      	bmi.n	800afd0 <_fflush_r+0xc>
 800b00c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b00e:	f7fd fc8f 	bl	8008930 <__retarget_lock_release_recursive>
 800b012:	e7dd      	b.n	800afd0 <_fflush_r+0xc>

0800b014 <__swhatbuf_r>:
 800b014:	b570      	push	{r4, r5, r6, lr}
 800b016:	460c      	mov	r4, r1
 800b018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b01c:	2900      	cmp	r1, #0
 800b01e:	b096      	sub	sp, #88	@ 0x58
 800b020:	4615      	mov	r5, r2
 800b022:	461e      	mov	r6, r3
 800b024:	da0d      	bge.n	800b042 <__swhatbuf_r+0x2e>
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b02c:	f04f 0100 	mov.w	r1, #0
 800b030:	bf14      	ite	ne
 800b032:	2340      	movne	r3, #64	@ 0x40
 800b034:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b038:	2000      	movs	r0, #0
 800b03a:	6031      	str	r1, [r6, #0]
 800b03c:	602b      	str	r3, [r5, #0]
 800b03e:	b016      	add	sp, #88	@ 0x58
 800b040:	bd70      	pop	{r4, r5, r6, pc}
 800b042:	466a      	mov	r2, sp
 800b044:	f000 f862 	bl	800b10c <_fstat_r>
 800b048:	2800      	cmp	r0, #0
 800b04a:	dbec      	blt.n	800b026 <__swhatbuf_r+0x12>
 800b04c:	9901      	ldr	r1, [sp, #4]
 800b04e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b052:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b056:	4259      	negs	r1, r3
 800b058:	4159      	adcs	r1, r3
 800b05a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b05e:	e7eb      	b.n	800b038 <__swhatbuf_r+0x24>

0800b060 <__smakebuf_r>:
 800b060:	898b      	ldrh	r3, [r1, #12]
 800b062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b064:	079d      	lsls	r5, r3, #30
 800b066:	4606      	mov	r6, r0
 800b068:	460c      	mov	r4, r1
 800b06a:	d507      	bpl.n	800b07c <__smakebuf_r+0x1c>
 800b06c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	6123      	str	r3, [r4, #16]
 800b074:	2301      	movs	r3, #1
 800b076:	6163      	str	r3, [r4, #20]
 800b078:	b003      	add	sp, #12
 800b07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b07c:	ab01      	add	r3, sp, #4
 800b07e:	466a      	mov	r2, sp
 800b080:	f7ff ffc8 	bl	800b014 <__swhatbuf_r>
 800b084:	9f00      	ldr	r7, [sp, #0]
 800b086:	4605      	mov	r5, r0
 800b088:	4639      	mov	r1, r7
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7fc fa2a 	bl	80074e4 <_malloc_r>
 800b090:	b948      	cbnz	r0, 800b0a6 <__smakebuf_r+0x46>
 800b092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b096:	059a      	lsls	r2, r3, #22
 800b098:	d4ee      	bmi.n	800b078 <__smakebuf_r+0x18>
 800b09a:	f023 0303 	bic.w	r3, r3, #3
 800b09e:	f043 0302 	orr.w	r3, r3, #2
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	e7e2      	b.n	800b06c <__smakebuf_r+0xc>
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	6020      	str	r0, [r4, #0]
 800b0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ae:	81a3      	strh	r3, [r4, #12]
 800b0b0:	9b01      	ldr	r3, [sp, #4]
 800b0b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0b6:	b15b      	cbz	r3, 800b0d0 <__smakebuf_r+0x70>
 800b0b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f000 f837 	bl	800b130 <_isatty_r>
 800b0c2:	b128      	cbz	r0, 800b0d0 <__smakebuf_r+0x70>
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	f023 0303 	bic.w	r3, r3, #3
 800b0ca:	f043 0301 	orr.w	r3, r3, #1
 800b0ce:	81a3      	strh	r3, [r4, #12]
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	431d      	orrs	r5, r3
 800b0d4:	81a5      	strh	r5, [r4, #12]
 800b0d6:	e7cf      	b.n	800b078 <__smakebuf_r+0x18>

0800b0d8 <memmove>:
 800b0d8:	4288      	cmp	r0, r1
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	eb01 0402 	add.w	r4, r1, r2
 800b0e0:	d902      	bls.n	800b0e8 <memmove+0x10>
 800b0e2:	4284      	cmp	r4, r0
 800b0e4:	4623      	mov	r3, r4
 800b0e6:	d807      	bhi.n	800b0f8 <memmove+0x20>
 800b0e8:	1e43      	subs	r3, r0, #1
 800b0ea:	42a1      	cmp	r1, r4
 800b0ec:	d008      	beq.n	800b100 <memmove+0x28>
 800b0ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0f6:	e7f8      	b.n	800b0ea <memmove+0x12>
 800b0f8:	4402      	add	r2, r0
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	428a      	cmp	r2, r1
 800b0fe:	d100      	bne.n	800b102 <memmove+0x2a>
 800b100:	bd10      	pop	{r4, pc}
 800b102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b10a:	e7f7      	b.n	800b0fc <memmove+0x24>

0800b10c <_fstat_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4d07      	ldr	r5, [pc, #28]	@ (800b12c <_fstat_r+0x20>)
 800b110:	2300      	movs	r3, #0
 800b112:	4604      	mov	r4, r0
 800b114:	4608      	mov	r0, r1
 800b116:	4611      	mov	r1, r2
 800b118:	602b      	str	r3, [r5, #0]
 800b11a:	f7f7 f821 	bl	8002160 <_fstat>
 800b11e:	1c43      	adds	r3, r0, #1
 800b120:	d102      	bne.n	800b128 <_fstat_r+0x1c>
 800b122:	682b      	ldr	r3, [r5, #0]
 800b124:	b103      	cbz	r3, 800b128 <_fstat_r+0x1c>
 800b126:	6023      	str	r3, [r4, #0]
 800b128:	bd38      	pop	{r3, r4, r5, pc}
 800b12a:	bf00      	nop
 800b12c:	200008b8 	.word	0x200008b8

0800b130 <_isatty_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d06      	ldr	r5, [pc, #24]	@ (800b14c <_isatty_r+0x1c>)
 800b134:	2300      	movs	r3, #0
 800b136:	4604      	mov	r4, r0
 800b138:	4608      	mov	r0, r1
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	f7f7 f820 	bl	8002180 <_isatty>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d102      	bne.n	800b14a <_isatty_r+0x1a>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	b103      	cbz	r3, 800b14a <_isatty_r+0x1a>
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	200008b8 	.word	0x200008b8

0800b150 <nan>:
 800b150:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b158 <nan+0x8>
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	00000000 	.word	0x00000000
 800b15c:	7ff80000 	.word	0x7ff80000

0800b160 <__assert_func>:
 800b160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b162:	4614      	mov	r4, r2
 800b164:	461a      	mov	r2, r3
 800b166:	4b09      	ldr	r3, [pc, #36]	@ (800b18c <__assert_func+0x2c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4605      	mov	r5, r0
 800b16c:	68d8      	ldr	r0, [r3, #12]
 800b16e:	b14c      	cbz	r4, 800b184 <__assert_func+0x24>
 800b170:	4b07      	ldr	r3, [pc, #28]	@ (800b190 <__assert_func+0x30>)
 800b172:	9100      	str	r1, [sp, #0]
 800b174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b178:	4906      	ldr	r1, [pc, #24]	@ (800b194 <__assert_func+0x34>)
 800b17a:	462b      	mov	r3, r5
 800b17c:	f000 fba8 	bl	800b8d0 <fiprintf>
 800b180:	f000 fbb8 	bl	800b8f4 <abort>
 800b184:	4b04      	ldr	r3, [pc, #16]	@ (800b198 <__assert_func+0x38>)
 800b186:	461c      	mov	r4, r3
 800b188:	e7f3      	b.n	800b172 <__assert_func+0x12>
 800b18a:	bf00      	nop
 800b18c:	2000004c 	.word	0x2000004c
 800b190:	0800bf4f 	.word	0x0800bf4f
 800b194:	0800bf5c 	.word	0x0800bf5c
 800b198:	0800bf8a 	.word	0x0800bf8a

0800b19c <_calloc_r>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	fba1 5402 	umull	r5, r4, r1, r2
 800b1a2:	b934      	cbnz	r4, 800b1b2 <_calloc_r+0x16>
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	f7fc f99d 	bl	80074e4 <_malloc_r>
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	b928      	cbnz	r0, 800b1ba <_calloc_r+0x1e>
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	220c      	movs	r2, #12
 800b1b4:	6002      	str	r2, [r0, #0]
 800b1b6:	2600      	movs	r6, #0
 800b1b8:	e7f9      	b.n	800b1ae <_calloc_r+0x12>
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	4621      	mov	r1, r4
 800b1be:	f7fd fb17 	bl	80087f0 <memset>
 800b1c2:	e7f4      	b.n	800b1ae <_calloc_r+0x12>

0800b1c4 <rshift>:
 800b1c4:	6903      	ldr	r3, [r0, #16]
 800b1c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1d2:	f100 0414 	add.w	r4, r0, #20
 800b1d6:	dd45      	ble.n	800b264 <rshift+0xa0>
 800b1d8:	f011 011f 	ands.w	r1, r1, #31
 800b1dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1e4:	d10c      	bne.n	800b200 <rshift+0x3c>
 800b1e6:	f100 0710 	add.w	r7, r0, #16
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	42b1      	cmp	r1, r6
 800b1ee:	d334      	bcc.n	800b25a <rshift+0x96>
 800b1f0:	1a9b      	subs	r3, r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	1eea      	subs	r2, r5, #3
 800b1f6:	4296      	cmp	r6, r2
 800b1f8:	bf38      	it	cc
 800b1fa:	2300      	movcc	r3, #0
 800b1fc:	4423      	add	r3, r4
 800b1fe:	e015      	b.n	800b22c <rshift+0x68>
 800b200:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b204:	f1c1 0820 	rsb	r8, r1, #32
 800b208:	40cf      	lsrs	r7, r1
 800b20a:	f105 0e04 	add.w	lr, r5, #4
 800b20e:	46a1      	mov	r9, r4
 800b210:	4576      	cmp	r6, lr
 800b212:	46f4      	mov	ip, lr
 800b214:	d815      	bhi.n	800b242 <rshift+0x7e>
 800b216:	1a9a      	subs	r2, r3, r2
 800b218:	0092      	lsls	r2, r2, #2
 800b21a:	3a04      	subs	r2, #4
 800b21c:	3501      	adds	r5, #1
 800b21e:	42ae      	cmp	r6, r5
 800b220:	bf38      	it	cc
 800b222:	2200      	movcc	r2, #0
 800b224:	18a3      	adds	r3, r4, r2
 800b226:	50a7      	str	r7, [r4, r2]
 800b228:	b107      	cbz	r7, 800b22c <rshift+0x68>
 800b22a:	3304      	adds	r3, #4
 800b22c:	1b1a      	subs	r2, r3, r4
 800b22e:	42a3      	cmp	r3, r4
 800b230:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b234:	bf08      	it	eq
 800b236:	2300      	moveq	r3, #0
 800b238:	6102      	str	r2, [r0, #16]
 800b23a:	bf08      	it	eq
 800b23c:	6143      	streq	r3, [r0, #20]
 800b23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b242:	f8dc c000 	ldr.w	ip, [ip]
 800b246:	fa0c fc08 	lsl.w	ip, ip, r8
 800b24a:	ea4c 0707 	orr.w	r7, ip, r7
 800b24e:	f849 7b04 	str.w	r7, [r9], #4
 800b252:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b256:	40cf      	lsrs	r7, r1
 800b258:	e7da      	b.n	800b210 <rshift+0x4c>
 800b25a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b25e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b262:	e7c3      	b.n	800b1ec <rshift+0x28>
 800b264:	4623      	mov	r3, r4
 800b266:	e7e1      	b.n	800b22c <rshift+0x68>

0800b268 <__hexdig_fun>:
 800b268:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b26c:	2b09      	cmp	r3, #9
 800b26e:	d802      	bhi.n	800b276 <__hexdig_fun+0xe>
 800b270:	3820      	subs	r0, #32
 800b272:	b2c0      	uxtb	r0, r0
 800b274:	4770      	bx	lr
 800b276:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b27a:	2b05      	cmp	r3, #5
 800b27c:	d801      	bhi.n	800b282 <__hexdig_fun+0x1a>
 800b27e:	3847      	subs	r0, #71	@ 0x47
 800b280:	e7f7      	b.n	800b272 <__hexdig_fun+0xa>
 800b282:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b286:	2b05      	cmp	r3, #5
 800b288:	d801      	bhi.n	800b28e <__hexdig_fun+0x26>
 800b28a:	3827      	subs	r0, #39	@ 0x27
 800b28c:	e7f1      	b.n	800b272 <__hexdig_fun+0xa>
 800b28e:	2000      	movs	r0, #0
 800b290:	4770      	bx	lr
	...

0800b294 <__gethex>:
 800b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b298:	b085      	sub	sp, #20
 800b29a:	468a      	mov	sl, r1
 800b29c:	9302      	str	r3, [sp, #8]
 800b29e:	680b      	ldr	r3, [r1, #0]
 800b2a0:	9001      	str	r0, [sp, #4]
 800b2a2:	4690      	mov	r8, r2
 800b2a4:	1c9c      	adds	r4, r3, #2
 800b2a6:	46a1      	mov	r9, r4
 800b2a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b2ac:	2830      	cmp	r0, #48	@ 0x30
 800b2ae:	d0fa      	beq.n	800b2a6 <__gethex+0x12>
 800b2b0:	eba9 0303 	sub.w	r3, r9, r3
 800b2b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b2b8:	f7ff ffd6 	bl	800b268 <__hexdig_fun>
 800b2bc:	4605      	mov	r5, r0
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d168      	bne.n	800b394 <__gethex+0x100>
 800b2c2:	49a0      	ldr	r1, [pc, #640]	@ (800b544 <__gethex+0x2b0>)
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	4648      	mov	r0, r9
 800b2c8:	f7fd fa9a 	bl	8008800 <strncmp>
 800b2cc:	4607      	mov	r7, r0
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d167      	bne.n	800b3a2 <__gethex+0x10e>
 800b2d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b2d6:	4626      	mov	r6, r4
 800b2d8:	f7ff ffc6 	bl	800b268 <__hexdig_fun>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d062      	beq.n	800b3a6 <__gethex+0x112>
 800b2e0:	4623      	mov	r3, r4
 800b2e2:	7818      	ldrb	r0, [r3, #0]
 800b2e4:	2830      	cmp	r0, #48	@ 0x30
 800b2e6:	4699      	mov	r9, r3
 800b2e8:	f103 0301 	add.w	r3, r3, #1
 800b2ec:	d0f9      	beq.n	800b2e2 <__gethex+0x4e>
 800b2ee:	f7ff ffbb 	bl	800b268 <__hexdig_fun>
 800b2f2:	fab0 f580 	clz	r5, r0
 800b2f6:	096d      	lsrs	r5, r5, #5
 800b2f8:	f04f 0b01 	mov.w	fp, #1
 800b2fc:	464a      	mov	r2, r9
 800b2fe:	4616      	mov	r6, r2
 800b300:	3201      	adds	r2, #1
 800b302:	7830      	ldrb	r0, [r6, #0]
 800b304:	f7ff ffb0 	bl	800b268 <__hexdig_fun>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d1f8      	bne.n	800b2fe <__gethex+0x6a>
 800b30c:	498d      	ldr	r1, [pc, #564]	@ (800b544 <__gethex+0x2b0>)
 800b30e:	2201      	movs	r2, #1
 800b310:	4630      	mov	r0, r6
 800b312:	f7fd fa75 	bl	8008800 <strncmp>
 800b316:	2800      	cmp	r0, #0
 800b318:	d13f      	bne.n	800b39a <__gethex+0x106>
 800b31a:	b944      	cbnz	r4, 800b32e <__gethex+0x9a>
 800b31c:	1c74      	adds	r4, r6, #1
 800b31e:	4622      	mov	r2, r4
 800b320:	4616      	mov	r6, r2
 800b322:	3201      	adds	r2, #1
 800b324:	7830      	ldrb	r0, [r6, #0]
 800b326:	f7ff ff9f 	bl	800b268 <__hexdig_fun>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d1f8      	bne.n	800b320 <__gethex+0x8c>
 800b32e:	1ba4      	subs	r4, r4, r6
 800b330:	00a7      	lsls	r7, r4, #2
 800b332:	7833      	ldrb	r3, [r6, #0]
 800b334:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b338:	2b50      	cmp	r3, #80	@ 0x50
 800b33a:	d13e      	bne.n	800b3ba <__gethex+0x126>
 800b33c:	7873      	ldrb	r3, [r6, #1]
 800b33e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b340:	d033      	beq.n	800b3aa <__gethex+0x116>
 800b342:	2b2d      	cmp	r3, #45	@ 0x2d
 800b344:	d034      	beq.n	800b3b0 <__gethex+0x11c>
 800b346:	1c71      	adds	r1, r6, #1
 800b348:	2400      	movs	r4, #0
 800b34a:	7808      	ldrb	r0, [r1, #0]
 800b34c:	f7ff ff8c 	bl	800b268 <__hexdig_fun>
 800b350:	1e43      	subs	r3, r0, #1
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b18      	cmp	r3, #24
 800b356:	d830      	bhi.n	800b3ba <__gethex+0x126>
 800b358:	f1a0 0210 	sub.w	r2, r0, #16
 800b35c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b360:	f7ff ff82 	bl	800b268 <__hexdig_fun>
 800b364:	f100 3cff 	add.w	ip, r0, #4294967295
 800b368:	fa5f fc8c 	uxtb.w	ip, ip
 800b36c:	f1bc 0f18 	cmp.w	ip, #24
 800b370:	f04f 030a 	mov.w	r3, #10
 800b374:	d91e      	bls.n	800b3b4 <__gethex+0x120>
 800b376:	b104      	cbz	r4, 800b37a <__gethex+0xe6>
 800b378:	4252      	negs	r2, r2
 800b37a:	4417      	add	r7, r2
 800b37c:	f8ca 1000 	str.w	r1, [sl]
 800b380:	b1ed      	cbz	r5, 800b3be <__gethex+0x12a>
 800b382:	f1bb 0f00 	cmp.w	fp, #0
 800b386:	bf0c      	ite	eq
 800b388:	2506      	moveq	r5, #6
 800b38a:	2500      	movne	r5, #0
 800b38c:	4628      	mov	r0, r5
 800b38e:	b005      	add	sp, #20
 800b390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b394:	2500      	movs	r5, #0
 800b396:	462c      	mov	r4, r5
 800b398:	e7b0      	b.n	800b2fc <__gethex+0x68>
 800b39a:	2c00      	cmp	r4, #0
 800b39c:	d1c7      	bne.n	800b32e <__gethex+0x9a>
 800b39e:	4627      	mov	r7, r4
 800b3a0:	e7c7      	b.n	800b332 <__gethex+0x9e>
 800b3a2:	464e      	mov	r6, r9
 800b3a4:	462f      	mov	r7, r5
 800b3a6:	2501      	movs	r5, #1
 800b3a8:	e7c3      	b.n	800b332 <__gethex+0x9e>
 800b3aa:	2400      	movs	r4, #0
 800b3ac:	1cb1      	adds	r1, r6, #2
 800b3ae:	e7cc      	b.n	800b34a <__gethex+0xb6>
 800b3b0:	2401      	movs	r4, #1
 800b3b2:	e7fb      	b.n	800b3ac <__gethex+0x118>
 800b3b4:	fb03 0002 	mla	r0, r3, r2, r0
 800b3b8:	e7ce      	b.n	800b358 <__gethex+0xc4>
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	e7de      	b.n	800b37c <__gethex+0xe8>
 800b3be:	eba6 0309 	sub.w	r3, r6, r9
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	2b07      	cmp	r3, #7
 800b3c8:	dc0a      	bgt.n	800b3e0 <__gethex+0x14c>
 800b3ca:	9801      	ldr	r0, [sp, #4]
 800b3cc:	f7fe f96a 	bl	80096a4 <_Balloc>
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	b940      	cbnz	r0, 800b3e6 <__gethex+0x152>
 800b3d4:	4b5c      	ldr	r3, [pc, #368]	@ (800b548 <__gethex+0x2b4>)
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	21e4      	movs	r1, #228	@ 0xe4
 800b3da:	485c      	ldr	r0, [pc, #368]	@ (800b54c <__gethex+0x2b8>)
 800b3dc:	f7ff fec0 	bl	800b160 <__assert_func>
 800b3e0:	3101      	adds	r1, #1
 800b3e2:	105b      	asrs	r3, r3, #1
 800b3e4:	e7ef      	b.n	800b3c6 <__gethex+0x132>
 800b3e6:	f100 0a14 	add.w	sl, r0, #20
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4655      	mov	r5, sl
 800b3ee:	469b      	mov	fp, r3
 800b3f0:	45b1      	cmp	r9, r6
 800b3f2:	d337      	bcc.n	800b464 <__gethex+0x1d0>
 800b3f4:	f845 bb04 	str.w	fp, [r5], #4
 800b3f8:	eba5 050a 	sub.w	r5, r5, sl
 800b3fc:	10ad      	asrs	r5, r5, #2
 800b3fe:	6125      	str	r5, [r4, #16]
 800b400:	4658      	mov	r0, fp
 800b402:	f7fe fa41 	bl	8009888 <__hi0bits>
 800b406:	016d      	lsls	r5, r5, #5
 800b408:	f8d8 6000 	ldr.w	r6, [r8]
 800b40c:	1a2d      	subs	r5, r5, r0
 800b40e:	42b5      	cmp	r5, r6
 800b410:	dd54      	ble.n	800b4bc <__gethex+0x228>
 800b412:	1bad      	subs	r5, r5, r6
 800b414:	4629      	mov	r1, r5
 800b416:	4620      	mov	r0, r4
 800b418:	f7fe fdcd 	bl	8009fb6 <__any_on>
 800b41c:	4681      	mov	r9, r0
 800b41e:	b178      	cbz	r0, 800b440 <__gethex+0x1ac>
 800b420:	1e6b      	subs	r3, r5, #1
 800b422:	1159      	asrs	r1, r3, #5
 800b424:	f003 021f 	and.w	r2, r3, #31
 800b428:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b42c:	f04f 0901 	mov.w	r9, #1
 800b430:	fa09 f202 	lsl.w	r2, r9, r2
 800b434:	420a      	tst	r2, r1
 800b436:	d003      	beq.n	800b440 <__gethex+0x1ac>
 800b438:	454b      	cmp	r3, r9
 800b43a:	dc36      	bgt.n	800b4aa <__gethex+0x216>
 800b43c:	f04f 0902 	mov.w	r9, #2
 800b440:	4629      	mov	r1, r5
 800b442:	4620      	mov	r0, r4
 800b444:	f7ff febe 	bl	800b1c4 <rshift>
 800b448:	442f      	add	r7, r5
 800b44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b44e:	42bb      	cmp	r3, r7
 800b450:	da42      	bge.n	800b4d8 <__gethex+0x244>
 800b452:	9801      	ldr	r0, [sp, #4]
 800b454:	4621      	mov	r1, r4
 800b456:	f7fe f965 	bl	8009724 <_Bfree>
 800b45a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b45c:	2300      	movs	r3, #0
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	25a3      	movs	r5, #163	@ 0xa3
 800b462:	e793      	b.n	800b38c <__gethex+0xf8>
 800b464:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b468:	2a2e      	cmp	r2, #46	@ 0x2e
 800b46a:	d012      	beq.n	800b492 <__gethex+0x1fe>
 800b46c:	2b20      	cmp	r3, #32
 800b46e:	d104      	bne.n	800b47a <__gethex+0x1e6>
 800b470:	f845 bb04 	str.w	fp, [r5], #4
 800b474:	f04f 0b00 	mov.w	fp, #0
 800b478:	465b      	mov	r3, fp
 800b47a:	7830      	ldrb	r0, [r6, #0]
 800b47c:	9303      	str	r3, [sp, #12]
 800b47e:	f7ff fef3 	bl	800b268 <__hexdig_fun>
 800b482:	9b03      	ldr	r3, [sp, #12]
 800b484:	f000 000f 	and.w	r0, r0, #15
 800b488:	4098      	lsls	r0, r3
 800b48a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b48e:	3304      	adds	r3, #4
 800b490:	e7ae      	b.n	800b3f0 <__gethex+0x15c>
 800b492:	45b1      	cmp	r9, r6
 800b494:	d8ea      	bhi.n	800b46c <__gethex+0x1d8>
 800b496:	492b      	ldr	r1, [pc, #172]	@ (800b544 <__gethex+0x2b0>)
 800b498:	9303      	str	r3, [sp, #12]
 800b49a:	2201      	movs	r2, #1
 800b49c:	4630      	mov	r0, r6
 800b49e:	f7fd f9af 	bl	8008800 <strncmp>
 800b4a2:	9b03      	ldr	r3, [sp, #12]
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d1e1      	bne.n	800b46c <__gethex+0x1d8>
 800b4a8:	e7a2      	b.n	800b3f0 <__gethex+0x15c>
 800b4aa:	1ea9      	subs	r1, r5, #2
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f7fe fd82 	bl	8009fb6 <__any_on>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d0c2      	beq.n	800b43c <__gethex+0x1a8>
 800b4b6:	f04f 0903 	mov.w	r9, #3
 800b4ba:	e7c1      	b.n	800b440 <__gethex+0x1ac>
 800b4bc:	da09      	bge.n	800b4d2 <__gethex+0x23e>
 800b4be:	1b75      	subs	r5, r6, r5
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	9801      	ldr	r0, [sp, #4]
 800b4c4:	462a      	mov	r2, r5
 800b4c6:	f7fe fb3d 	bl	8009b44 <__lshift>
 800b4ca:	1b7f      	subs	r7, r7, r5
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	f100 0a14 	add.w	sl, r0, #20
 800b4d2:	f04f 0900 	mov.w	r9, #0
 800b4d6:	e7b8      	b.n	800b44a <__gethex+0x1b6>
 800b4d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b4dc:	42bd      	cmp	r5, r7
 800b4de:	dd6f      	ble.n	800b5c0 <__gethex+0x32c>
 800b4e0:	1bed      	subs	r5, r5, r7
 800b4e2:	42ae      	cmp	r6, r5
 800b4e4:	dc34      	bgt.n	800b550 <__gethex+0x2bc>
 800b4e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d022      	beq.n	800b534 <__gethex+0x2a0>
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d024      	beq.n	800b53c <__gethex+0x2a8>
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d115      	bne.n	800b522 <__gethex+0x28e>
 800b4f6:	42ae      	cmp	r6, r5
 800b4f8:	d113      	bne.n	800b522 <__gethex+0x28e>
 800b4fa:	2e01      	cmp	r6, #1
 800b4fc:	d10b      	bne.n	800b516 <__gethex+0x282>
 800b4fe:	9a02      	ldr	r2, [sp, #8]
 800b500:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b504:	6013      	str	r3, [r2, #0]
 800b506:	2301      	movs	r3, #1
 800b508:	6123      	str	r3, [r4, #16]
 800b50a:	f8ca 3000 	str.w	r3, [sl]
 800b50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b510:	2562      	movs	r5, #98	@ 0x62
 800b512:	601c      	str	r4, [r3, #0]
 800b514:	e73a      	b.n	800b38c <__gethex+0xf8>
 800b516:	1e71      	subs	r1, r6, #1
 800b518:	4620      	mov	r0, r4
 800b51a:	f7fe fd4c 	bl	8009fb6 <__any_on>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d1ed      	bne.n	800b4fe <__gethex+0x26a>
 800b522:	9801      	ldr	r0, [sp, #4]
 800b524:	4621      	mov	r1, r4
 800b526:	f7fe f8fd 	bl	8009724 <_Bfree>
 800b52a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b52c:	2300      	movs	r3, #0
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	2550      	movs	r5, #80	@ 0x50
 800b532:	e72b      	b.n	800b38c <__gethex+0xf8>
 800b534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1f3      	bne.n	800b522 <__gethex+0x28e>
 800b53a:	e7e0      	b.n	800b4fe <__gethex+0x26a>
 800b53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1dd      	bne.n	800b4fe <__gethex+0x26a>
 800b542:	e7ee      	b.n	800b522 <__gethex+0x28e>
 800b544:	0800bf34 	.word	0x0800bf34
 800b548:	0800beca 	.word	0x0800beca
 800b54c:	0800bf8b 	.word	0x0800bf8b
 800b550:	1e6f      	subs	r7, r5, #1
 800b552:	f1b9 0f00 	cmp.w	r9, #0
 800b556:	d130      	bne.n	800b5ba <__gethex+0x326>
 800b558:	b127      	cbz	r7, 800b564 <__gethex+0x2d0>
 800b55a:	4639      	mov	r1, r7
 800b55c:	4620      	mov	r0, r4
 800b55e:	f7fe fd2a 	bl	8009fb6 <__any_on>
 800b562:	4681      	mov	r9, r0
 800b564:	117a      	asrs	r2, r7, #5
 800b566:	2301      	movs	r3, #1
 800b568:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b56c:	f007 071f 	and.w	r7, r7, #31
 800b570:	40bb      	lsls	r3, r7
 800b572:	4213      	tst	r3, r2
 800b574:	4629      	mov	r1, r5
 800b576:	4620      	mov	r0, r4
 800b578:	bf18      	it	ne
 800b57a:	f049 0902 	orrne.w	r9, r9, #2
 800b57e:	f7ff fe21 	bl	800b1c4 <rshift>
 800b582:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b586:	1b76      	subs	r6, r6, r5
 800b588:	2502      	movs	r5, #2
 800b58a:	f1b9 0f00 	cmp.w	r9, #0
 800b58e:	d047      	beq.n	800b620 <__gethex+0x38c>
 800b590:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b594:	2b02      	cmp	r3, #2
 800b596:	d015      	beq.n	800b5c4 <__gethex+0x330>
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d017      	beq.n	800b5cc <__gethex+0x338>
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d109      	bne.n	800b5b4 <__gethex+0x320>
 800b5a0:	f019 0f02 	tst.w	r9, #2
 800b5a4:	d006      	beq.n	800b5b4 <__gethex+0x320>
 800b5a6:	f8da 3000 	ldr.w	r3, [sl]
 800b5aa:	ea49 0903 	orr.w	r9, r9, r3
 800b5ae:	f019 0f01 	tst.w	r9, #1
 800b5b2:	d10e      	bne.n	800b5d2 <__gethex+0x33e>
 800b5b4:	f045 0510 	orr.w	r5, r5, #16
 800b5b8:	e032      	b.n	800b620 <__gethex+0x38c>
 800b5ba:	f04f 0901 	mov.w	r9, #1
 800b5be:	e7d1      	b.n	800b564 <__gethex+0x2d0>
 800b5c0:	2501      	movs	r5, #1
 800b5c2:	e7e2      	b.n	800b58a <__gethex+0x2f6>
 800b5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5c6:	f1c3 0301 	rsb	r3, r3, #1
 800b5ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d0f0      	beq.n	800b5b4 <__gethex+0x320>
 800b5d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5d6:	f104 0314 	add.w	r3, r4, #20
 800b5da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5e2:	f04f 0c00 	mov.w	ip, #0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b5f0:	d01b      	beq.n	800b62a <__gethex+0x396>
 800b5f2:	3201      	adds	r2, #1
 800b5f4:	6002      	str	r2, [r0, #0]
 800b5f6:	2d02      	cmp	r5, #2
 800b5f8:	f104 0314 	add.w	r3, r4, #20
 800b5fc:	d13c      	bne.n	800b678 <__gethex+0x3e4>
 800b5fe:	f8d8 2000 	ldr.w	r2, [r8]
 800b602:	3a01      	subs	r2, #1
 800b604:	42b2      	cmp	r2, r6
 800b606:	d109      	bne.n	800b61c <__gethex+0x388>
 800b608:	1171      	asrs	r1, r6, #5
 800b60a:	2201      	movs	r2, #1
 800b60c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b610:	f006 061f 	and.w	r6, r6, #31
 800b614:	fa02 f606 	lsl.w	r6, r2, r6
 800b618:	421e      	tst	r6, r3
 800b61a:	d13a      	bne.n	800b692 <__gethex+0x3fe>
 800b61c:	f045 0520 	orr.w	r5, r5, #32
 800b620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b622:	601c      	str	r4, [r3, #0]
 800b624:	9b02      	ldr	r3, [sp, #8]
 800b626:	601f      	str	r7, [r3, #0]
 800b628:	e6b0      	b.n	800b38c <__gethex+0xf8>
 800b62a:	4299      	cmp	r1, r3
 800b62c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b630:	d8d9      	bhi.n	800b5e6 <__gethex+0x352>
 800b632:	68a3      	ldr	r3, [r4, #8]
 800b634:	459b      	cmp	fp, r3
 800b636:	db17      	blt.n	800b668 <__gethex+0x3d4>
 800b638:	6861      	ldr	r1, [r4, #4]
 800b63a:	9801      	ldr	r0, [sp, #4]
 800b63c:	3101      	adds	r1, #1
 800b63e:	f7fe f831 	bl	80096a4 <_Balloc>
 800b642:	4681      	mov	r9, r0
 800b644:	b918      	cbnz	r0, 800b64e <__gethex+0x3ba>
 800b646:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b0 <__gethex+0x41c>)
 800b648:	4602      	mov	r2, r0
 800b64a:	2184      	movs	r1, #132	@ 0x84
 800b64c:	e6c5      	b.n	800b3da <__gethex+0x146>
 800b64e:	6922      	ldr	r2, [r4, #16]
 800b650:	3202      	adds	r2, #2
 800b652:	f104 010c 	add.w	r1, r4, #12
 800b656:	0092      	lsls	r2, r2, #2
 800b658:	300c      	adds	r0, #12
 800b65a:	f7fd f96a 	bl	8008932 <memcpy>
 800b65e:	4621      	mov	r1, r4
 800b660:	9801      	ldr	r0, [sp, #4]
 800b662:	f7fe f85f 	bl	8009724 <_Bfree>
 800b666:	464c      	mov	r4, r9
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b670:	6122      	str	r2, [r4, #16]
 800b672:	2201      	movs	r2, #1
 800b674:	615a      	str	r2, [r3, #20]
 800b676:	e7be      	b.n	800b5f6 <__gethex+0x362>
 800b678:	6922      	ldr	r2, [r4, #16]
 800b67a:	455a      	cmp	r2, fp
 800b67c:	dd0b      	ble.n	800b696 <__gethex+0x402>
 800b67e:	2101      	movs	r1, #1
 800b680:	4620      	mov	r0, r4
 800b682:	f7ff fd9f 	bl	800b1c4 <rshift>
 800b686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b68a:	3701      	adds	r7, #1
 800b68c:	42bb      	cmp	r3, r7
 800b68e:	f6ff aee0 	blt.w	800b452 <__gethex+0x1be>
 800b692:	2501      	movs	r5, #1
 800b694:	e7c2      	b.n	800b61c <__gethex+0x388>
 800b696:	f016 061f 	ands.w	r6, r6, #31
 800b69a:	d0fa      	beq.n	800b692 <__gethex+0x3fe>
 800b69c:	4453      	add	r3, sl
 800b69e:	f1c6 0620 	rsb	r6, r6, #32
 800b6a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6a6:	f7fe f8ef 	bl	8009888 <__hi0bits>
 800b6aa:	42b0      	cmp	r0, r6
 800b6ac:	dbe7      	blt.n	800b67e <__gethex+0x3ea>
 800b6ae:	e7f0      	b.n	800b692 <__gethex+0x3fe>
 800b6b0:	0800beca 	.word	0x0800beca

0800b6b4 <L_shift>:
 800b6b4:	f1c2 0208 	rsb	r2, r2, #8
 800b6b8:	0092      	lsls	r2, r2, #2
 800b6ba:	b570      	push	{r4, r5, r6, lr}
 800b6bc:	f1c2 0620 	rsb	r6, r2, #32
 800b6c0:	6843      	ldr	r3, [r0, #4]
 800b6c2:	6804      	ldr	r4, [r0, #0]
 800b6c4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6c8:	432c      	orrs	r4, r5
 800b6ca:	40d3      	lsrs	r3, r2
 800b6cc:	6004      	str	r4, [r0, #0]
 800b6ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6d2:	4288      	cmp	r0, r1
 800b6d4:	d3f4      	bcc.n	800b6c0 <L_shift+0xc>
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}

0800b6d8 <__match>:
 800b6d8:	b530      	push	{r4, r5, lr}
 800b6da:	6803      	ldr	r3, [r0, #0]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e2:	b914      	cbnz	r4, 800b6ea <__match+0x12>
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	bd30      	pop	{r4, r5, pc}
 800b6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b6f2:	2d19      	cmp	r5, #25
 800b6f4:	bf98      	it	ls
 800b6f6:	3220      	addls	r2, #32
 800b6f8:	42a2      	cmp	r2, r4
 800b6fa:	d0f0      	beq.n	800b6de <__match+0x6>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e7f3      	b.n	800b6e8 <__match+0x10>

0800b700 <__hexnan>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	680b      	ldr	r3, [r1, #0]
 800b706:	6801      	ldr	r1, [r0, #0]
 800b708:	115e      	asrs	r6, r3, #5
 800b70a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b70e:	f013 031f 	ands.w	r3, r3, #31
 800b712:	b087      	sub	sp, #28
 800b714:	bf18      	it	ne
 800b716:	3604      	addne	r6, #4
 800b718:	2500      	movs	r5, #0
 800b71a:	1f37      	subs	r7, r6, #4
 800b71c:	4682      	mov	sl, r0
 800b71e:	4690      	mov	r8, r2
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	f846 5c04 	str.w	r5, [r6, #-4]
 800b726:	46b9      	mov	r9, r7
 800b728:	463c      	mov	r4, r7
 800b72a:	9502      	str	r5, [sp, #8]
 800b72c:	46ab      	mov	fp, r5
 800b72e:	784a      	ldrb	r2, [r1, #1]
 800b730:	1c4b      	adds	r3, r1, #1
 800b732:	9303      	str	r3, [sp, #12]
 800b734:	b342      	cbz	r2, 800b788 <__hexnan+0x88>
 800b736:	4610      	mov	r0, r2
 800b738:	9105      	str	r1, [sp, #20]
 800b73a:	9204      	str	r2, [sp, #16]
 800b73c:	f7ff fd94 	bl	800b268 <__hexdig_fun>
 800b740:	2800      	cmp	r0, #0
 800b742:	d151      	bne.n	800b7e8 <__hexnan+0xe8>
 800b744:	9a04      	ldr	r2, [sp, #16]
 800b746:	9905      	ldr	r1, [sp, #20]
 800b748:	2a20      	cmp	r2, #32
 800b74a:	d818      	bhi.n	800b77e <__hexnan+0x7e>
 800b74c:	9b02      	ldr	r3, [sp, #8]
 800b74e:	459b      	cmp	fp, r3
 800b750:	dd13      	ble.n	800b77a <__hexnan+0x7a>
 800b752:	454c      	cmp	r4, r9
 800b754:	d206      	bcs.n	800b764 <__hexnan+0x64>
 800b756:	2d07      	cmp	r5, #7
 800b758:	dc04      	bgt.n	800b764 <__hexnan+0x64>
 800b75a:	462a      	mov	r2, r5
 800b75c:	4649      	mov	r1, r9
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff ffa8 	bl	800b6b4 <L_shift>
 800b764:	4544      	cmp	r4, r8
 800b766:	d952      	bls.n	800b80e <__hexnan+0x10e>
 800b768:	2300      	movs	r3, #0
 800b76a:	f1a4 0904 	sub.w	r9, r4, #4
 800b76e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b772:	f8cd b008 	str.w	fp, [sp, #8]
 800b776:	464c      	mov	r4, r9
 800b778:	461d      	mov	r5, r3
 800b77a:	9903      	ldr	r1, [sp, #12]
 800b77c:	e7d7      	b.n	800b72e <__hexnan+0x2e>
 800b77e:	2a29      	cmp	r2, #41	@ 0x29
 800b780:	d157      	bne.n	800b832 <__hexnan+0x132>
 800b782:	3102      	adds	r1, #2
 800b784:	f8ca 1000 	str.w	r1, [sl]
 800b788:	f1bb 0f00 	cmp.w	fp, #0
 800b78c:	d051      	beq.n	800b832 <__hexnan+0x132>
 800b78e:	454c      	cmp	r4, r9
 800b790:	d206      	bcs.n	800b7a0 <__hexnan+0xa0>
 800b792:	2d07      	cmp	r5, #7
 800b794:	dc04      	bgt.n	800b7a0 <__hexnan+0xa0>
 800b796:	462a      	mov	r2, r5
 800b798:	4649      	mov	r1, r9
 800b79a:	4620      	mov	r0, r4
 800b79c:	f7ff ff8a 	bl	800b6b4 <L_shift>
 800b7a0:	4544      	cmp	r4, r8
 800b7a2:	d936      	bls.n	800b812 <__hexnan+0x112>
 800b7a4:	f1a8 0204 	sub.w	r2, r8, #4
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7b2:	429f      	cmp	r7, r3
 800b7b4:	d2f9      	bcs.n	800b7aa <__hexnan+0xaa>
 800b7b6:	1b3b      	subs	r3, r7, r4
 800b7b8:	f023 0303 	bic.w	r3, r3, #3
 800b7bc:	3304      	adds	r3, #4
 800b7be:	3401      	adds	r4, #1
 800b7c0:	3e03      	subs	r6, #3
 800b7c2:	42b4      	cmp	r4, r6
 800b7c4:	bf88      	it	hi
 800b7c6:	2304      	movhi	r3, #4
 800b7c8:	4443      	add	r3, r8
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f843 2b04 	str.w	r2, [r3], #4
 800b7d0:	429f      	cmp	r7, r3
 800b7d2:	d2fb      	bcs.n	800b7cc <__hexnan+0xcc>
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	b91b      	cbnz	r3, 800b7e0 <__hexnan+0xe0>
 800b7d8:	4547      	cmp	r7, r8
 800b7da:	d128      	bne.n	800b82e <__hexnan+0x12e>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	603b      	str	r3, [r7, #0]
 800b7e0:	2005      	movs	r0, #5
 800b7e2:	b007      	add	sp, #28
 800b7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e8:	3501      	adds	r5, #1
 800b7ea:	2d08      	cmp	r5, #8
 800b7ec:	f10b 0b01 	add.w	fp, fp, #1
 800b7f0:	dd06      	ble.n	800b800 <__hexnan+0x100>
 800b7f2:	4544      	cmp	r4, r8
 800b7f4:	d9c1      	bls.n	800b77a <__hexnan+0x7a>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7fc:	2501      	movs	r5, #1
 800b7fe:	3c04      	subs	r4, #4
 800b800:	6822      	ldr	r2, [r4, #0]
 800b802:	f000 000f 	and.w	r0, r0, #15
 800b806:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b80a:	6020      	str	r0, [r4, #0]
 800b80c:	e7b5      	b.n	800b77a <__hexnan+0x7a>
 800b80e:	2508      	movs	r5, #8
 800b810:	e7b3      	b.n	800b77a <__hexnan+0x7a>
 800b812:	9b01      	ldr	r3, [sp, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d0dd      	beq.n	800b7d4 <__hexnan+0xd4>
 800b818:	f1c3 0320 	rsb	r3, r3, #32
 800b81c:	f04f 32ff 	mov.w	r2, #4294967295
 800b820:	40da      	lsrs	r2, r3
 800b822:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b826:	4013      	ands	r3, r2
 800b828:	f846 3c04 	str.w	r3, [r6, #-4]
 800b82c:	e7d2      	b.n	800b7d4 <__hexnan+0xd4>
 800b82e:	3f04      	subs	r7, #4
 800b830:	e7d0      	b.n	800b7d4 <__hexnan+0xd4>
 800b832:	2004      	movs	r0, #4
 800b834:	e7d5      	b.n	800b7e2 <__hexnan+0xe2>

0800b836 <__ascii_mbtowc>:
 800b836:	b082      	sub	sp, #8
 800b838:	b901      	cbnz	r1, 800b83c <__ascii_mbtowc+0x6>
 800b83a:	a901      	add	r1, sp, #4
 800b83c:	b142      	cbz	r2, 800b850 <__ascii_mbtowc+0x1a>
 800b83e:	b14b      	cbz	r3, 800b854 <__ascii_mbtowc+0x1e>
 800b840:	7813      	ldrb	r3, [r2, #0]
 800b842:	600b      	str	r3, [r1, #0]
 800b844:	7812      	ldrb	r2, [r2, #0]
 800b846:	1e10      	subs	r0, r2, #0
 800b848:	bf18      	it	ne
 800b84a:	2001      	movne	r0, #1
 800b84c:	b002      	add	sp, #8
 800b84e:	4770      	bx	lr
 800b850:	4610      	mov	r0, r2
 800b852:	e7fb      	b.n	800b84c <__ascii_mbtowc+0x16>
 800b854:	f06f 0001 	mvn.w	r0, #1
 800b858:	e7f8      	b.n	800b84c <__ascii_mbtowc+0x16>

0800b85a <_realloc_r>:
 800b85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85e:	4607      	mov	r7, r0
 800b860:	4614      	mov	r4, r2
 800b862:	460d      	mov	r5, r1
 800b864:	b921      	cbnz	r1, 800b870 <_realloc_r+0x16>
 800b866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b86a:	4611      	mov	r1, r2
 800b86c:	f7fb be3a 	b.w	80074e4 <_malloc_r>
 800b870:	b92a      	cbnz	r2, 800b87e <_realloc_r+0x24>
 800b872:	f7fd fecd 	bl	8009610 <_free_r>
 800b876:	4625      	mov	r5, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87e:	f000 f840 	bl	800b902 <_malloc_usable_size_r>
 800b882:	4284      	cmp	r4, r0
 800b884:	4606      	mov	r6, r0
 800b886:	d802      	bhi.n	800b88e <_realloc_r+0x34>
 800b888:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b88c:	d8f4      	bhi.n	800b878 <_realloc_r+0x1e>
 800b88e:	4621      	mov	r1, r4
 800b890:	4638      	mov	r0, r7
 800b892:	f7fb fe27 	bl	80074e4 <_malloc_r>
 800b896:	4680      	mov	r8, r0
 800b898:	b908      	cbnz	r0, 800b89e <_realloc_r+0x44>
 800b89a:	4645      	mov	r5, r8
 800b89c:	e7ec      	b.n	800b878 <_realloc_r+0x1e>
 800b89e:	42b4      	cmp	r4, r6
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	bf28      	it	cs
 800b8a6:	4632      	movcs	r2, r6
 800b8a8:	f7fd f843 	bl	8008932 <memcpy>
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	f7fd feae 	bl	8009610 <_free_r>
 800b8b4:	e7f1      	b.n	800b89a <_realloc_r+0x40>

0800b8b6 <__ascii_wctomb>:
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	b141      	cbz	r1, 800b8ce <__ascii_wctomb+0x18>
 800b8bc:	2aff      	cmp	r2, #255	@ 0xff
 800b8be:	d904      	bls.n	800b8ca <__ascii_wctomb+0x14>
 800b8c0:	228a      	movs	r2, #138	@ 0x8a
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	4770      	bx	lr
 800b8ca:	700a      	strb	r2, [r1, #0]
 800b8cc:	2001      	movs	r0, #1
 800b8ce:	4770      	bx	lr

0800b8d0 <fiprintf>:
 800b8d0:	b40e      	push	{r1, r2, r3}
 800b8d2:	b503      	push	{r0, r1, lr}
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	ab03      	add	r3, sp, #12
 800b8d8:	4805      	ldr	r0, [pc, #20]	@ (800b8f0 <fiprintf+0x20>)
 800b8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8de:	6800      	ldr	r0, [r0, #0]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	f000 f83f 	bl	800b964 <_vfiprintf_r>
 800b8e6:	b002      	add	sp, #8
 800b8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8ec:	b003      	add	sp, #12
 800b8ee:	4770      	bx	lr
 800b8f0:	2000004c 	.word	0x2000004c

0800b8f4 <abort>:
 800b8f4:	b508      	push	{r3, lr}
 800b8f6:	2006      	movs	r0, #6
 800b8f8:	f000 f974 	bl	800bbe4 <raise>
 800b8fc:	2001      	movs	r0, #1
 800b8fe:	f7f6 fbfb 	bl	80020f8 <_exit>

0800b902 <_malloc_usable_size_r>:
 800b902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b906:	1f18      	subs	r0, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	bfbc      	itt	lt
 800b90c:	580b      	ldrlt	r3, [r1, r0]
 800b90e:	18c0      	addlt	r0, r0, r3
 800b910:	4770      	bx	lr

0800b912 <__sfputc_r>:
 800b912:	6893      	ldr	r3, [r2, #8]
 800b914:	3b01      	subs	r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	b410      	push	{r4}
 800b91a:	6093      	str	r3, [r2, #8]
 800b91c:	da08      	bge.n	800b930 <__sfputc_r+0x1e>
 800b91e:	6994      	ldr	r4, [r2, #24]
 800b920:	42a3      	cmp	r3, r4
 800b922:	db01      	blt.n	800b928 <__sfputc_r+0x16>
 800b924:	290a      	cmp	r1, #10
 800b926:	d103      	bne.n	800b930 <__sfputc_r+0x1e>
 800b928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b92c:	f7fc becb 	b.w	80086c6 <__swbuf_r>
 800b930:	6813      	ldr	r3, [r2, #0]
 800b932:	1c58      	adds	r0, r3, #1
 800b934:	6010      	str	r0, [r2, #0]
 800b936:	7019      	strb	r1, [r3, #0]
 800b938:	4608      	mov	r0, r1
 800b93a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <__sfputs_r>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	4606      	mov	r6, r0
 800b944:	460f      	mov	r7, r1
 800b946:	4614      	mov	r4, r2
 800b948:	18d5      	adds	r5, r2, r3
 800b94a:	42ac      	cmp	r4, r5
 800b94c:	d101      	bne.n	800b952 <__sfputs_r+0x12>
 800b94e:	2000      	movs	r0, #0
 800b950:	e007      	b.n	800b962 <__sfputs_r+0x22>
 800b952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b956:	463a      	mov	r2, r7
 800b958:	4630      	mov	r0, r6
 800b95a:	f7ff ffda 	bl	800b912 <__sfputc_r>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d1f3      	bne.n	800b94a <__sfputs_r+0xa>
 800b962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b964 <_vfiprintf_r>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	460d      	mov	r5, r1
 800b96a:	b09d      	sub	sp, #116	@ 0x74
 800b96c:	4614      	mov	r4, r2
 800b96e:	4698      	mov	r8, r3
 800b970:	4606      	mov	r6, r0
 800b972:	b118      	cbz	r0, 800b97c <_vfiprintf_r+0x18>
 800b974:	6a03      	ldr	r3, [r0, #32]
 800b976:	b90b      	cbnz	r3, 800b97c <_vfiprintf_r+0x18>
 800b978:	f7fc fdac 	bl	80084d4 <__sinit>
 800b97c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b97e:	07d9      	lsls	r1, r3, #31
 800b980:	d405      	bmi.n	800b98e <_vfiprintf_r+0x2a>
 800b982:	89ab      	ldrh	r3, [r5, #12]
 800b984:	059a      	lsls	r2, r3, #22
 800b986:	d402      	bmi.n	800b98e <_vfiprintf_r+0x2a>
 800b988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b98a:	f7fc ffd0 	bl	800892e <__retarget_lock_acquire_recursive>
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	071b      	lsls	r3, r3, #28
 800b992:	d501      	bpl.n	800b998 <_vfiprintf_r+0x34>
 800b994:	692b      	ldr	r3, [r5, #16]
 800b996:	b99b      	cbnz	r3, 800b9c0 <_vfiprintf_r+0x5c>
 800b998:	4629      	mov	r1, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7fc fed2 	bl	8008744 <__swsetup_r>
 800b9a0:	b170      	cbz	r0, 800b9c0 <_vfiprintf_r+0x5c>
 800b9a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9a4:	07dc      	lsls	r4, r3, #31
 800b9a6:	d504      	bpl.n	800b9b2 <_vfiprintf_r+0x4e>
 800b9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ac:	b01d      	add	sp, #116	@ 0x74
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	89ab      	ldrh	r3, [r5, #12]
 800b9b4:	0598      	lsls	r0, r3, #22
 800b9b6:	d4f7      	bmi.n	800b9a8 <_vfiprintf_r+0x44>
 800b9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9ba:	f7fc ffb9 	bl	8008930 <__retarget_lock_release_recursive>
 800b9be:	e7f3      	b.n	800b9a8 <_vfiprintf_r+0x44>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9c4:	2320      	movs	r3, #32
 800b9c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ce:	2330      	movs	r3, #48	@ 0x30
 800b9d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb80 <_vfiprintf_r+0x21c>
 800b9d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9d8:	f04f 0901 	mov.w	r9, #1
 800b9dc:	4623      	mov	r3, r4
 800b9de:	469a      	mov	sl, r3
 800b9e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e4:	b10a      	cbz	r2, 800b9ea <_vfiprintf_r+0x86>
 800b9e6:	2a25      	cmp	r2, #37	@ 0x25
 800b9e8:	d1f9      	bne.n	800b9de <_vfiprintf_r+0x7a>
 800b9ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ee:	d00b      	beq.n	800ba08 <_vfiprintf_r+0xa4>
 800b9f0:	465b      	mov	r3, fp
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7ff ffa2 	bl	800b940 <__sfputs_r>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	f000 80a7 	beq.w	800bb50 <_vfiprintf_r+0x1ec>
 800ba02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba04:	445a      	add	r2, fp
 800ba06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba08:	f89a 3000 	ldrb.w	r3, [sl]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 809f 	beq.w	800bb50 <_vfiprintf_r+0x1ec>
 800ba12:	2300      	movs	r3, #0
 800ba14:	f04f 32ff 	mov.w	r2, #4294967295
 800ba18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba1c:	f10a 0a01 	add.w	sl, sl, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	9307      	str	r3, [sp, #28]
 800ba24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba28:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba2a:	4654      	mov	r4, sl
 800ba2c:	2205      	movs	r2, #5
 800ba2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba32:	4853      	ldr	r0, [pc, #332]	@ (800bb80 <_vfiprintf_r+0x21c>)
 800ba34:	f7f4 fbcc 	bl	80001d0 <memchr>
 800ba38:	9a04      	ldr	r2, [sp, #16]
 800ba3a:	b9d8      	cbnz	r0, 800ba74 <_vfiprintf_r+0x110>
 800ba3c:	06d1      	lsls	r1, r2, #27
 800ba3e:	bf44      	itt	mi
 800ba40:	2320      	movmi	r3, #32
 800ba42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba46:	0713      	lsls	r3, r2, #28
 800ba48:	bf44      	itt	mi
 800ba4a:	232b      	movmi	r3, #43	@ 0x2b
 800ba4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba50:	f89a 3000 	ldrb.w	r3, [sl]
 800ba54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba56:	d015      	beq.n	800ba84 <_vfiprintf_r+0x120>
 800ba58:	9a07      	ldr	r2, [sp, #28]
 800ba5a:	4654      	mov	r4, sl
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	f04f 0c0a 	mov.w	ip, #10
 800ba62:	4621      	mov	r1, r4
 800ba64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba68:	3b30      	subs	r3, #48	@ 0x30
 800ba6a:	2b09      	cmp	r3, #9
 800ba6c:	d94b      	bls.n	800bb06 <_vfiprintf_r+0x1a2>
 800ba6e:	b1b0      	cbz	r0, 800ba9e <_vfiprintf_r+0x13a>
 800ba70:	9207      	str	r2, [sp, #28]
 800ba72:	e014      	b.n	800ba9e <_vfiprintf_r+0x13a>
 800ba74:	eba0 0308 	sub.w	r3, r0, r8
 800ba78:	fa09 f303 	lsl.w	r3, r9, r3
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	46a2      	mov	sl, r4
 800ba82:	e7d2      	b.n	800ba2a <_vfiprintf_r+0xc6>
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	1d19      	adds	r1, r3, #4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	9103      	str	r1, [sp, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	bfbb      	ittet	lt
 800ba90:	425b      	neglt	r3, r3
 800ba92:	f042 0202 	orrlt.w	r2, r2, #2
 800ba96:	9307      	strge	r3, [sp, #28]
 800ba98:	9307      	strlt	r3, [sp, #28]
 800ba9a:	bfb8      	it	lt
 800ba9c:	9204      	strlt	r2, [sp, #16]
 800ba9e:	7823      	ldrb	r3, [r4, #0]
 800baa0:	2b2e      	cmp	r3, #46	@ 0x2e
 800baa2:	d10a      	bne.n	800baba <_vfiprintf_r+0x156>
 800baa4:	7863      	ldrb	r3, [r4, #1]
 800baa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800baa8:	d132      	bne.n	800bb10 <_vfiprintf_r+0x1ac>
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	1d1a      	adds	r2, r3, #4
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	9203      	str	r2, [sp, #12]
 800bab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bab6:	3402      	adds	r4, #2
 800bab8:	9305      	str	r3, [sp, #20]
 800baba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb90 <_vfiprintf_r+0x22c>
 800babe:	7821      	ldrb	r1, [r4, #0]
 800bac0:	2203      	movs	r2, #3
 800bac2:	4650      	mov	r0, sl
 800bac4:	f7f4 fb84 	bl	80001d0 <memchr>
 800bac8:	b138      	cbz	r0, 800bada <_vfiprintf_r+0x176>
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	eba0 000a 	sub.w	r0, r0, sl
 800bad0:	2240      	movs	r2, #64	@ 0x40
 800bad2:	4082      	lsls	r2, r0
 800bad4:	4313      	orrs	r3, r2
 800bad6:	3401      	adds	r4, #1
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bade:	4829      	ldr	r0, [pc, #164]	@ (800bb84 <_vfiprintf_r+0x220>)
 800bae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bae4:	2206      	movs	r2, #6
 800bae6:	f7f4 fb73 	bl	80001d0 <memchr>
 800baea:	2800      	cmp	r0, #0
 800baec:	d03f      	beq.n	800bb6e <_vfiprintf_r+0x20a>
 800baee:	4b26      	ldr	r3, [pc, #152]	@ (800bb88 <_vfiprintf_r+0x224>)
 800baf0:	bb1b      	cbnz	r3, 800bb3a <_vfiprintf_r+0x1d6>
 800baf2:	9b03      	ldr	r3, [sp, #12]
 800baf4:	3307      	adds	r3, #7
 800baf6:	f023 0307 	bic.w	r3, r3, #7
 800bafa:	3308      	adds	r3, #8
 800bafc:	9303      	str	r3, [sp, #12]
 800bafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb00:	443b      	add	r3, r7
 800bb02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb04:	e76a      	b.n	800b9dc <_vfiprintf_r+0x78>
 800bb06:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	2001      	movs	r0, #1
 800bb0e:	e7a8      	b.n	800ba62 <_vfiprintf_r+0xfe>
 800bb10:	2300      	movs	r3, #0
 800bb12:	3401      	adds	r4, #1
 800bb14:	9305      	str	r3, [sp, #20]
 800bb16:	4619      	mov	r1, r3
 800bb18:	f04f 0c0a 	mov.w	ip, #10
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb22:	3a30      	subs	r2, #48	@ 0x30
 800bb24:	2a09      	cmp	r2, #9
 800bb26:	d903      	bls.n	800bb30 <_vfiprintf_r+0x1cc>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0c6      	beq.n	800baba <_vfiprintf_r+0x156>
 800bb2c:	9105      	str	r1, [sp, #20]
 800bb2e:	e7c4      	b.n	800baba <_vfiprintf_r+0x156>
 800bb30:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb34:	4604      	mov	r4, r0
 800bb36:	2301      	movs	r3, #1
 800bb38:	e7f0      	b.n	800bb1c <_vfiprintf_r+0x1b8>
 800bb3a:	ab03      	add	r3, sp, #12
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4b12      	ldr	r3, [pc, #72]	@ (800bb8c <_vfiprintf_r+0x228>)
 800bb42:	a904      	add	r1, sp, #16
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7fb fe75 	bl	8007834 <_printf_float>
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	1c78      	adds	r0, r7, #1
 800bb4e:	d1d6      	bne.n	800bafe <_vfiprintf_r+0x19a>
 800bb50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb52:	07d9      	lsls	r1, r3, #31
 800bb54:	d405      	bmi.n	800bb62 <_vfiprintf_r+0x1fe>
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	059a      	lsls	r2, r3, #22
 800bb5a:	d402      	bmi.n	800bb62 <_vfiprintf_r+0x1fe>
 800bb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb5e:	f7fc fee7 	bl	8008930 <__retarget_lock_release_recursive>
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	065b      	lsls	r3, r3, #25
 800bb66:	f53f af1f 	bmi.w	800b9a8 <_vfiprintf_r+0x44>
 800bb6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb6c:	e71e      	b.n	800b9ac <_vfiprintf_r+0x48>
 800bb6e:	ab03      	add	r3, sp, #12
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	462a      	mov	r2, r5
 800bb74:	4b05      	ldr	r3, [pc, #20]	@ (800bb8c <_vfiprintf_r+0x228>)
 800bb76:	a904      	add	r1, sp, #16
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7fc f8f3 	bl	8007d64 <_printf_i>
 800bb7e:	e7e4      	b.n	800bb4a <_vfiprintf_r+0x1e6>
 800bb80:	0800bf36 	.word	0x0800bf36
 800bb84:	0800bf40 	.word	0x0800bf40
 800bb88:	08007835 	.word	0x08007835
 800bb8c:	0800b941 	.word	0x0800b941
 800bb90:	0800bf3c 	.word	0x0800bf3c

0800bb94 <_raise_r>:
 800bb94:	291f      	cmp	r1, #31
 800bb96:	b538      	push	{r3, r4, r5, lr}
 800bb98:	4605      	mov	r5, r0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	d904      	bls.n	800bba8 <_raise_r+0x14>
 800bb9e:	2316      	movs	r3, #22
 800bba0:	6003      	str	r3, [r0, #0]
 800bba2:	f04f 30ff 	mov.w	r0, #4294967295
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bbaa:	b112      	cbz	r2, 800bbb2 <_raise_r+0x1e>
 800bbac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbb0:	b94b      	cbnz	r3, 800bbc6 <_raise_r+0x32>
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f000 f830 	bl	800bc18 <_getpid_r>
 800bbb8:	4622      	mov	r2, r4
 800bbba:	4601      	mov	r1, r0
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbc2:	f000 b817 	b.w	800bbf4 <_kill_r>
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d00a      	beq.n	800bbe0 <_raise_r+0x4c>
 800bbca:	1c59      	adds	r1, r3, #1
 800bbcc:	d103      	bne.n	800bbd6 <_raise_r+0x42>
 800bbce:	2316      	movs	r3, #22
 800bbd0:	6003      	str	r3, [r0, #0]
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	e7e7      	b.n	800bba6 <_raise_r+0x12>
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4798      	blx	r3
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	e7e0      	b.n	800bba6 <_raise_r+0x12>

0800bbe4 <raise>:
 800bbe4:	4b02      	ldr	r3, [pc, #8]	@ (800bbf0 <raise+0xc>)
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	6818      	ldr	r0, [r3, #0]
 800bbea:	f7ff bfd3 	b.w	800bb94 <_raise_r>
 800bbee:	bf00      	nop
 800bbf0:	2000004c 	.word	0x2000004c

0800bbf4 <_kill_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d07      	ldr	r5, [pc, #28]	@ (800bc14 <_kill_r+0x20>)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	4611      	mov	r1, r2
 800bc00:	602b      	str	r3, [r5, #0]
 800bc02:	f7f6 fa69 	bl	80020d8 <_kill>
 800bc06:	1c43      	adds	r3, r0, #1
 800bc08:	d102      	bne.n	800bc10 <_kill_r+0x1c>
 800bc0a:	682b      	ldr	r3, [r5, #0]
 800bc0c:	b103      	cbz	r3, 800bc10 <_kill_r+0x1c>
 800bc0e:	6023      	str	r3, [r4, #0]
 800bc10:	bd38      	pop	{r3, r4, r5, pc}
 800bc12:	bf00      	nop
 800bc14:	200008b8 	.word	0x200008b8

0800bc18 <_getpid_r>:
 800bc18:	f7f6 ba56 	b.w	80020c8 <_getpid>

0800bc1c <_init>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	bf00      	nop
 800bc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc22:	bc08      	pop	{r3}
 800bc24:	469e      	mov	lr, r3
 800bc26:	4770      	bx	lr

0800bc28 <_fini>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr
