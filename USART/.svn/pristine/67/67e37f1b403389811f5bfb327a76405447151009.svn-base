
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013094  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b180  08013228  08013228  00014228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803e3a8  0803e3a8  0004021c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803e3a8  0803e3a8  0003f3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803e3b0  0803e3b0  0004021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803e3b0  0803e3b0  0003f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803e3b4  0803e3b4  0003f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0803e3b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  20000220  0803e5d4  00040220  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  20001394  0803e5d4  00040394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1c1  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000459f  00000000  00000000  0005d40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  000619b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f3  00000000  00000000  000631f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002997a  00000000  00000000  000644e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026385  00000000  00000000  0008de5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddd12  00000000  00000000  000b41e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191ef4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079d8  00000000  00000000  00191f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  00199910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801320c 	.word	0x0801320c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0801320c 	.word	0x0801320c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a25      	ldr	r2, [pc, #148]	@ (80010e0 <MX_DMA_Init+0xa0>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6493      	str	r3, [r2, #72]	@ 0x48
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_DMA_Init+0xa0>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200c      	movs	r0, #12
 800107c:	f002 ff9d 	bl	8003fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001080:	200c      	movs	r0, #12
 8001082:	f002 ffb6 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200d      	movs	r0, #13
 800108c:	f002 ff95 	bl	8003fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001090:	200d      	movs	r0, #13
 8001092:	f002 ffae 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200e      	movs	r0, #14
 800109c:	f002 ff8d 	bl	8003fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f002 ffa6 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200f      	movs	r0, #15
 80010ac:	f002 ff85 	bl	8003fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010b0:	200f      	movs	r0, #15
 80010b2:	f002 ff9e 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2044      	movs	r0, #68	@ 0x44
 80010bc:	f002 ff7d 	bl	8003fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80010c0:	2044      	movs	r0, #68	@ 0x44
 80010c2:	f002 ff96 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2045      	movs	r0, #69	@ 0x45
 80010cc:	f002 ff75 	bl	8003fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80010d0:	2045      	movs	r0, #69	@ 0x45
 80010d2:	f002 ff8e 	bl	8003ff2 <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <MX_GPIO_Init+0xf8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a37      	ldr	r2, [pc, #220]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a31      	ldr	r2, [pc, #196]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <MX_GPIO_Init+0xf8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a2b      	ldr	r2, [pc, #172]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2103      	movs	r1, #3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f003 fb8d 	bl	8004868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2110      	movs	r1, #16
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f003 fb87 	bl	8004868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f241 0101 	movw	r1, #4097	@ 0x1001
 8001160:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 8001162:	f003 fb81 	bl	8004868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin ASIC_RST_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|ASIC_RST_Pin;
 8001166:	2313      	movs	r3, #19
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f003 f9e0 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8001184:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4810      	ldr	r0, [pc, #64]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 800119e:	f003 f9d1 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : AFULL_Pin EMPTY_Pin */
  GPIO_InitStruct.Pin = AFULL_Pin|EMPTY_Pin;
 80011a2:	2306      	movs	r3, #6
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	480a      	ldr	r0, [pc, #40]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 80011b6:	f003 f9c5 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S3_Pin|S4_Pin;
 80011ba:	f640 4318 	movw	r3, #3096	@ 0xc18
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 80011d0:	f003 f9b8 	bl	8004544 <HAL_GPIO_Init>

}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000400 	.word	0x48000400

080011e4 <main>:
uint8_t res = 0;
uint8_t open = 0;
SD_Config current_config;

int main(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af02      	add	r7, sp, #8
  HAL_Init();
 80011ea:	f002 fd72 	bl	8003cd2 <HAL_Init>
  SystemClock_Config();
 80011ee:	f000 f90b 	bl	8001408 <SystemClock_Config>
  MX_GPIO_Init();
 80011f2:	f7ff ff77 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f6:	f7ff ff23 	bl	8001040 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011fa:	f001 fbb1 	bl	8002960 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80011fe:	f000 ff6b 	bl	80020d8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001202:	f007 fb15 	bl	8008830 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001206:	f000 ff29 	bl	800205c <MX_SPI1_Init>
  MX_TIM6_Init();
 800120a:	f001 fb31 	bl	8002870 <MX_TIM6_Init>
  MX_TIM2_Init();
 800120e:	f001 fae1 	bl	80027d4 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001212:	485e      	ldr	r0, [pc, #376]	@ (800138c <main+0x1a8>)
 8001214:	f005 fad0 	bl	80067b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001218:	485d      	ldr	r0, [pc, #372]	@ (8001390 <main+0x1ac>)
 800121a:	f005 facd 	bl	80067b8 <HAL_TIM_Base_Start_IT>
  if(SD_Init() == SD_OK)
 800121e:	f000 f9e1 	bl	80015e4 <SD_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <main+0xf4>
  {
	res=f_mount(&fs,"0:",1);
 8001228:	2201      	movs	r2, #1
 800122a:	495a      	ldr	r1, [pc, #360]	@ (8001394 <main+0x1b0>)
 800122c:	485a      	ldr	r0, [pc, #360]	@ (8001398 <main+0x1b4>)
 800122e:	f00b f8b7 	bl	800c3a0 <f_mount>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b59      	ldr	r3, [pc, #356]	@ (800139c <main+0x1b8>)
 8001238:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 800123a:	4b58      	ldr	r3, [pc, #352]	@ (800139c <main+0x1b8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d024      	beq.n	800128c <main+0xa8>
	{
		res = f_mkfs("", FM_FAT32, 0, work, sizeof(work));
 8001242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4b55      	ldr	r3, [pc, #340]	@ (80013a0 <main+0x1bc>)
 800124a:	2200      	movs	r2, #0
 800124c:	2102      	movs	r1, #2
 800124e:	4855      	ldr	r0, [pc, #340]	@ (80013a4 <main+0x1c0>)
 8001250:	f00c f9d2 	bl	800d5f8 <f_mkfs>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b50      	ldr	r3, [pc, #320]	@ (800139c <main+0x1b8>)
 800125a:	701a      	strb	r2, [r3, #0]
		res = f_mount(NULL,"0:",1);
 800125c:	2201      	movs	r2, #1
 800125e:	494d      	ldr	r1, [pc, #308]	@ (8001394 <main+0x1b0>)
 8001260:	2000      	movs	r0, #0
 8001262:	f00b f89d 	bl	800c3a0 <f_mount>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b4c      	ldr	r3, [pc, #304]	@ (800139c <main+0x1b8>)
 800126c:	701a      	strb	r2, [r3, #0]
		res = f_mount(&fs,"0:",1);
 800126e:	2201      	movs	r2, #1
 8001270:	4948      	ldr	r1, [pc, #288]	@ (8001394 <main+0x1b0>)
 8001272:	4849      	ldr	r0, [pc, #292]	@ (8001398 <main+0x1b4>)
 8001274:	f00b f894 	bl	800c3a0 <f_mount>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b47      	ldr	r3, [pc, #284]	@ (800139c <main+0x1b8>)
 800127e:	701a      	strb	r2, [r3, #0]
		if(res != FR_OK)
 8001280:	4b46      	ldr	r3, [pc, #280]	@ (800139c <main+0x1b8>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <main+0xa8>
			Error_Handler();
 8001288:	f000 f90d 	bl	80014a6 <Error_Handler>
	}
	if(file_exists(CONFIG_FILE) != FR_OK)
 800128c:	4b46      	ldr	r3, [pc, #280]	@ (80013a8 <main+0x1c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fc62 	bl	8001b5a <file_exists>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <main+0xbc>
		create_default_config();
 800129c:	f000 fe4e 	bl	8001f3c <create_default_config>
	int log_num = get_next_log_number();
 80012a0:	f000 fc74 	bl	8001b8c <get_next_log_number>
 80012a4:	60f8      	str	r0, [r7, #12]
	snprintf(current_log_file, sizeof(current_log_file), "%s%05d.txt", LOG_PREFIX, log_num);
 80012a6:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <main+0x1c8>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4613      	mov	r3, r2
 80012b0:	4a3f      	ldr	r2, [pc, #252]	@ (80013b0 <main+0x1cc>)
 80012b2:	2114      	movs	r1, #20
 80012b4:	483f      	ldr	r0, [pc, #252]	@ (80013b4 <main+0x1d0>)
 80012b6:	f00e fc4b 	bl	800fb50 <sniprintf>
	f_open(&fil, current_log_file, FA_CREATE_NEW | FA_WRITE);
 80012ba:	2206      	movs	r2, #6
 80012bc:	493d      	ldr	r1, [pc, #244]	@ (80013b4 <main+0x1d0>)
 80012be:	483e      	ldr	r0, [pc, #248]	@ (80013b8 <main+0x1d4>)
 80012c0:	f00b f8b4 	bl	800c42c <f_open>
	current_config = load_and_apply_config();
 80012c4:	4c3d      	ldr	r4, [pc, #244]	@ (80013bc <main+0x1d8>)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fe63 	bl	8001f94 <load_and_apply_config>
 80012ce:	4623      	mov	r3, r4
 80012d0:	463a      	mov	r2, r7
 80012d2:	6810      	ldr	r0, [r2, #0]
 80012d4:	6851      	ldr	r1, [r2, #4]
 80012d6:	c303      	stmia	r3!, {r0, r1}
  }
  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 80012d8:	2280      	movs	r2, #128	@ 0x80
 80012da:	4939      	ldr	r1, [pc, #228]	@ (80013c0 <main+0x1dc>)
 80012dc:	4839      	ldr	r0, [pc, #228]	@ (80013c4 <main+0x1e0>)
 80012de:	f005 ff99 	bl	8007214 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80012e2:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <main+0x1e0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b36      	ldr	r3, [pc, #216]	@ (80013c4 <main+0x1e0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0210 	orr.w	r2, r2, #16
 80012f0:	601a      	str	r2, [r3, #0]
  ON_G();
 80012f2:	2201      	movs	r2, #1
 80012f4:	2102      	movs	r1, #2
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fa:	f003 fab5 	bl	8004868 <HAL_GPIO_WritePin>

  while (1)
  {
	  if(data_ready == 0)
 80012fe:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <main+0x1e4>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <main+0x128>
	  	  maintain_processing_buffer();
 8001308:	f002 fbe6 	bl	8003ad8 <maintain_processing_buffer>
	  if(data_ready)
 800130c:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <main+0x1e4>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d021      	beq.n	800135a <main+0x176>
	  {
		  while(!txstate)
 8001316:	e019      	b.n	800134c <main+0x168>
		  {
			  CMD_Status state1 = CMD_Judge();
 8001318:	f001 fd10 	bl	8002d3c <CMD_Judge>
 800131c:	4603      	mov	r3, r0
 800131e:	72fb      	strb	r3, [r7, #11]
			  if(state1 == CMD_OK)
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10b      	bne.n	800133e <main+0x15a>
			  {
				  CMD_Status state2 = CMD_Execute();
 8001326:	f001 fdfd 	bl	8002f24 <CMD_Execute>
 800132a:	4603      	mov	r3, r0
 800132c:	72bb      	strb	r3, [r7, #10]
				  if(state2 != CMD_OK)
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <main+0x168>
					  CMD_HANDLE_ERROR(state2);
 8001334:	7abb      	ldrb	r3, [r7, #10]
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fc2e 	bl	8003b98 <CMD_HANDLE_ERROR>
 800133c:	e006      	b.n	800134c <main+0x168>
			  }
			  else if(state1 == CMD_END)
 800133e:	7afb      	ldrb	r3, [r7, #11]
 8001340:	2b06      	cmp	r3, #6
 8001342:	d009      	beq.n	8001358 <main+0x174>
				  break;
			  else
				  CMD_HANDLE_ERROR(state1);
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fc26 	bl	8003b98 <CMD_HANDLE_ERROR>
		  while(!txstate)
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <main+0x1e8>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0e0      	beq.n	8001318 <main+0x134>
 8001356:	e000      	b.n	800135a <main+0x176>
				  break;
 8001358:	bf00      	nop
		  }
	  }
	  if(sampling_ready == 1)
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <main+0x1ec>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d1cc      	bne.n	80012fe <main+0x11a>
	  {
		  if(ReadResult() == HAL_OK)
 8001364:	f001 fc36 	bl	8002bd4 <ReadResult>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1c7      	bne.n	80012fe <main+0x11a>
		  {
			  Send_Data();
 800136e:	f002 faff 	bl	8003970 <Send_Data>
			  f_write(&fil, datatx, transmitlength, &bw);
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <main+0x1f0>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <main+0x1f4>)
 800137a:	4918      	ldr	r1, [pc, #96]	@ (80013dc <main+0x1f8>)
 800137c:	480e      	ldr	r0, [pc, #56]	@ (80013b8 <main+0x1d4>)
 800137e:	f00b fca7 	bl	800ccd0 <f_write>
			  f_sync(&fil);
 8001382:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <main+0x1d4>)
 8001384:	f00b fe58 	bl	800d038 <f_sync>
	  if(data_ready == 0)
 8001388:	e7b9      	b.n	80012fe <main+0x11a>
 800138a:	bf00      	nop
 800138c:	20000be4 	.word	0x20000be4
 8001390:	20000c30 	.word	0x20000c30
 8001394:	08013228 	.word	0x08013228
 8001398:	20000540 	.word	0x20000540
 800139c:	200009d4 	.word	0x200009d4
 80013a0:	2000023c 	.word	0x2000023c
 80013a4:	0801322c 	.word	0x0801322c
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004
 80013b0:	08013230 	.word	0x08013230
 80013b4:	200009e4 	.word	0x200009e4
 80013b8:	20000778 	.word	0x20000778
 80013bc:	200009d8 	.word	0x200009d8
 80013c0:	2000043c 	.word	0x2000043c
 80013c4:	20000c7c 	.word	0x20000c7c
 80013c8:	2000053e 	.word	0x2000053e
 80013cc:	200011da 	.word	0x200011da
 80013d0:	2000002e 	.word	0x2000002e
 80013d4:	20000034 	.word	0x20000034
 80013d8:	200009d0 	.word	0x200009d0
 80013dc:	200011e0 	.word	0x200011e0

080013e0 <_write>:
  }
}


int _write(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	2364      	movs	r3, #100	@ 0x64
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	4803      	ldr	r0, [pc, #12]	@ (8001404 <_write+0x24>)
 80013f6:	f005 fe07 	bl	8007008 <HAL_UART_Transmit>
    return len;
 80013fa:	687b      	ldr	r3, [r7, #4]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000c7c 	.word	0x20000c7c

08001408 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b096      	sub	sp, #88	@ 0x58
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2244      	movs	r2, #68	@ 0x44
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f00e fc4f 	bl	800fcba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800142a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800142e:	f003 fa5b 	bl	80048e8 <HAL_PWREx_ControlVoltageScaling>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001438:	f000 f835 	bl	80014a6 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001440:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144a:	2303      	movs	r3, #3
 800144c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001452:	2314      	movs	r3, #20
 8001454:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001456:	2307      	movs	r3, #7
 8001458:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fa94 	bl	8004994 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001472:	f000 f818 	bl	80014a6 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2303      	movs	r3, #3
 800147c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	2104      	movs	r1, #4
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fe94 	bl	80051bc <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800149a:	f000 f804 	bl	80014a6 <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3758      	adds	r7, #88	@ 0x58
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <Error_Handler>:

void Error_Handler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014aa:	b672      	cpsid	i
}
 80014ac:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  SHINE_R();
 80014ae:	f000 f806 	bl	80014be <SHINE_R>
	  HAL_Delay(1000);
 80014b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b6:	f002 fc81 	bl	8003dbc <HAL_Delay>
	  SHINE_R();
 80014ba:	bf00      	nop
 80014bc:	e7f7      	b.n	80014ae <Error_Handler+0x8>

080014be <SHINE_R>:
const char *LOG_PREFIX = "log";
char current_log_file[20];
static int cached_max_log_num = -1;

void SHINE_R(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80014c2:	2101      	movs	r1, #1
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c8:	f003 f9e6 	bl	8004898 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80014cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014d0:	f002 fc74 	bl	8003dbc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80014d4:	2101      	movs	r1, #1
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f003 f9dd 	bl	8004898 <HAL_GPIO_TogglePin>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <SPI_TransmitReceive>:
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}

uint8_t SPI_TransmitReceive(uint8_t data) //发送接收函数封装
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1 ,100);
 80014ee:	f107 020f 	add.w	r2, r7, #15
 80014f2:	1df9      	adds	r1, r7, #7
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	4804      	ldr	r0, [pc, #16]	@ (800150c <SPI_TransmitReceive+0x28>)
 80014fc:	f004 fc61 	bl	8005dc2 <HAL_SPI_TransmitReceive>
    return rx_data;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000a5c 	.word	0x20000a5c

08001510 <SD_PowerOnSeq>:

void SD_PowerOnSeq(void) //80个时钟周期
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <SD_PowerOnSeq+0x34>)
 800151e:	f003 f9a3 	bl	8004868 <HAL_GPIO_WritePin>
    for(uint8_t i=0; i<10; i++)
 8001522:	2300      	movs	r3, #0
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	e005      	b.n	8001534 <SD_PowerOnSeq+0x24>
    {
        SPI_TransmitReceive(0xFF);
 8001528:	20ff      	movs	r0, #255	@ 0xff
 800152a:	f7ff ffdb 	bl	80014e4 <SPI_TransmitReceive>
    for(uint8_t i=0; i<10; i++)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b09      	cmp	r3, #9
 8001538:	d9f6      	bls.n	8001528 <SD_PowerOnSeq+0x18>
    }
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	48000400 	.word	0x48000400

08001548 <SD_SendCmd>:

uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)  //发送cmd命令，arg参数及crc校准
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
	uint8_t retry = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
	uint8_t response;
	do{
		retry=SPI_TransmitReceive(0xFF);
 800155c:	20ff      	movs	r0, #255	@ 0xff
 800155e:	f7ff ffc1 	bl	80014e4 <SPI_TransmitReceive>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
	}while(retry!=0xFF);  //这段如果不加，发送CMD8返回值会错误
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	2bff      	cmp	r3, #255	@ 0xff
 800156a:	d1f7      	bne.n	800155c <SD_SendCmd+0x14>

    SPI_TransmitReceive(0x40 | cmd);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ffb5 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 24) & 0xFF);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	0e1b      	lsrs	r3, r3, #24
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ffaf 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 16) & 0xFF);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ffa9 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 8)  & 0xFF);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ffa3 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive(arg & 0xFF);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff9e 	bl	80014e4 <SPI_TransmitReceive>
    SPI_TransmitReceive(crc | 0x01);
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff97 	bl	80014e4 <SPI_TransmitReceive>
    retry = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]

	do {
	response = SPI_TransmitReceive(0xFF);
 80015ba:	20ff      	movs	r0, #255	@ 0xff
 80015bc:	f7ff ff92 	bl	80014e4 <SPI_TransmitReceive>
 80015c0:	4603      	mov	r3, r0
 80015c2:	73bb      	strb	r3, [r7, #14]
	retry++;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3301      	adds	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
	} while ((response & 0x80) && (retry < 0xFF));
 80015ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da02      	bge.n	80015d8 <SD_SendCmd+0x90>
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2bff      	cmp	r3, #255	@ 0xff
 80015d6:	d1f0      	bne.n	80015ba <SD_SendCmd+0x72>
	return response;
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <SD_Init>:

SD_Status SD_Init(void) //SD卡初始化
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
	uint8_t r1;
	uint8_t buff[6] = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	809a      	strh	r2, [r3, #4]
	uint16_t retry;
	uint8_t i;

	SD_PowerOnSeq();
 80015f2:	f7ff ff8d 	bl	8001510 <SD_PowerOnSeq>
	SD_CS_LOW();
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015fc:	487a      	ldr	r0, [pc, #488]	@ (80017e8 <SD_Init+0x204>)
 80015fe:	f003 f933 	bl	8004868 <HAL_GPIO_WritePin>

	retry = 1000; // 设置超时值
 8001602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001606:	81fb      	strh	r3, [r7, #14]
	do {
	    r1 = SD_SendCmd(CMD0, 0, 0x95);
 8001608:	2295      	movs	r2, #149	@ 0x95
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff9b 	bl	8001548 <SD_SendCmd>
 8001612:	4603      	mov	r3, r0
 8001614:	733b      	strb	r3, [r7, #12]
	    retry--;
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	3b01      	subs	r3, #1
 800161a:	81fb      	strh	r3, [r7, #14]
	} while (r1 != 0x01 && retry > 0);
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d002      	beq.n	8001628 <SD_Init+0x44>
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ef      	bne.n	8001608 <SD_Init+0x24>

	if (retry == 0)
 8001628:	89fb      	ldrh	r3, [r7, #14]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d107      	bne.n	800163e <SD_Init+0x5a>
	{
	    SD_CS_HIGH();
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001634:	486c      	ldr	r0, [pc, #432]	@ (80017e8 <SD_Init+0x204>)
 8001636:	f003 f917 	bl	8004868 <HAL_GPIO_WritePin>
	    return SD_ERROR; // 超时返回错误
 800163a:	2301      	movs	r3, #1
 800163c:	e0d0      	b.n	80017e0 <SD_Init+0x1fc>
	}

	SD_TYPE=0;
 800163e:	4b6b      	ldr	r3, [pc, #428]	@ (80017ec <SD_Init+0x208>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
	r1 = SD_SendCmd(CMD8, 0x1AA, 0x87);
 8001644:	2287      	movs	r2, #135	@ 0x87
 8001646:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800164a:	2008      	movs	r0, #8
 800164c:	f7ff ff7c 	bl	8001548 <SD_SendCmd>
 8001650:	4603      	mov	r3, r0
 8001652:	733b      	strb	r3, [r7, #12]
	if(r1==0x01)
 8001654:	7b3b      	ldrb	r3, [r7, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d161      	bne.n	800171e <SD_Init+0x13a>
	{
		for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0xFF);
 800165a:	2300      	movs	r3, #0
 800165c:	737b      	strb	r3, [r7, #13]
 800165e:	e00d      	b.n	800167c <SD_Init+0x98>
 8001660:	7b7c      	ldrb	r4, [r7, #13]
 8001662:	20ff      	movs	r0, #255	@ 0xff
 8001664:	f7ff ff3e 	bl	80014e4 <SPI_TransmitReceive>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	f104 0310 	add.w	r3, r4, #16
 8001670:	443b      	add	r3, r7
 8001672:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001676:	7b7b      	ldrb	r3, [r7, #13]
 8001678:	3301      	adds	r3, #1
 800167a:	737b      	strb	r3, [r7, #13]
 800167c:	7b7b      	ldrb	r3, [r7, #13]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d9ee      	bls.n	8001660 <SD_Init+0x7c>
		if(buff[2]==0X01&&buff[3]==0XAA)
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 8098 	bne.w	80017ba <SD_Init+0x1d6>
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2baa      	cmp	r3, #170	@ 0xaa
 800168e:	f040 8094 	bne.w	80017ba <SD_Init+0x1d6>
		{
			retry=0XFFFE;
 8001692:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001696:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2037      	movs	r0, #55	@ 0x37
 800169e:	f7ff ff53 	bl	8001548 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0x40000000,0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016a8:	2029      	movs	r0, #41	@ 0x29
 80016aa:	f7ff ff4d 	bl	8001548 <SD_SendCmd>
 80016ae:	4603      	mov	r3, r0
 80016b0:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 80016b2:	7b3b      	ldrb	r3, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <SD_Init+0xde>
 80016b8:	89fb      	ldrh	r3, [r7, #14]
 80016ba:	1e5a      	subs	r2, r3, #1
 80016bc:	81fa      	strh	r2, [r7, #14]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ea      	bne.n	8001698 <SD_Init+0xb4>
			r1=SD_SendCmd(CMD58,0,0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	203a      	movs	r0, #58	@ 0x3a
 80016c8:	f7ff ff3e 	bl	8001548 <SD_SendCmd>
 80016cc:	4603      	mov	r3, r0
 80016ce:	733b      	strb	r3, [r7, #12]
			if(retry&&r1==0)
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d071      	beq.n	80017ba <SD_Init+0x1d6>
 80016d6:	7b3b      	ldrb	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d16e      	bne.n	80017ba <SD_Init+0x1d6>
			{
				for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0XFF);
 80016dc:	2300      	movs	r3, #0
 80016de:	737b      	strb	r3, [r7, #13]
 80016e0:	e00d      	b.n	80016fe <SD_Init+0x11a>
 80016e2:	7b7c      	ldrb	r4, [r7, #13]
 80016e4:	20ff      	movs	r0, #255	@ 0xff
 80016e6:	f7ff fefd 	bl	80014e4 <SPI_TransmitReceive>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	f104 0310 	add.w	r3, r4, #16
 80016f2:	443b      	add	r3, r7
 80016f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	3301      	adds	r3, #1
 80016fc:	737b      	strb	r3, [r7, #13]
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d9ee      	bls.n	80016e2 <SD_Init+0xfe>
				if(buff[0]&0x40){
 8001704:	793b      	ldrb	r3, [r7, #4]
 8001706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <SD_Init+0x132>
					SD_TYPE=V2HC;
 800170e:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <SD_Init+0x208>)
 8001710:	2206      	movs	r2, #6
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e051      	b.n	80017ba <SD_Init+0x1d6>
				}else {
					SD_TYPE=V2;
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <SD_Init+0x208>)
 8001718:	2204      	movs	r2, #4
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e04d      	b.n	80017ba <SD_Init+0x1d6>
			}
		}
	}
	else
	{
		SD_SendCmd(CMD55,0,0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2037      	movs	r0, #55	@ 0x37
 8001724:	f7ff ff10 	bl	8001548 <SD_SendCmd>
		r1=SD_SendCmd(ACMD41,0,0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2029      	movs	r0, #41	@ 0x29
 800172e:	f7ff ff0b 	bl	8001548 <SD_SendCmd>
 8001732:	4603      	mov	r3, r0
 8001734:	733b      	strb	r3, [r7, #12]
		if(r1<=1)
 8001736:	7b3b      	ldrb	r3, [r7, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d81a      	bhi.n	8001772 <SD_Init+0x18e>
		{
			SD_TYPE=V1;
 800173c:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <SD_Init+0x208>)
 800173e:	2202      	movs	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 8001742:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001746:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2037      	movs	r0, #55	@ 0x37
 800174e:	f7ff fefb 	bl	8001548 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0,0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2029      	movs	r0, #41	@ 0x29
 8001758:	f7ff fef6 	bl	8001548 <SD_SendCmd>
 800175c:	4603      	mov	r3, r0
 800175e:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 8001760:	7b3b      	ldrb	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01a      	beq.n	800179c <SD_Init+0x1b8>
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	81fa      	strh	r2, [r7, #14]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1eb      	bne.n	8001748 <SD_Init+0x164>
 8001770:	e014      	b.n	800179c <SD_Init+0x1b8>
		}else
		{
			SD_TYPE=MMC;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <SD_Init+0x208>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 8001778:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800177c:	81fb      	strh	r3, [r7, #14]
			do
			{
				r1=SD_SendCmd(CMD1,0,0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff fee0 	bl	8001548 <SD_SendCmd>
 8001788:	4603      	mov	r3, r0
 800178a:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 800178c:	7b3b      	ldrb	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <SD_Init+0x1b8>
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	81fa      	strh	r2, [r7, #14]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <SD_Init+0x19a>
		}
		if(retry==0||SD_SendCmd(CMD16,512,0)!=0)SD_TYPE=ERR;
 800179c:	89fb      	ldrh	r3, [r7, #14]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <SD_Init+0x1d0>
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a8:	2010      	movs	r0, #16
 80017aa:	f7ff fecd 	bl	8001548 <SD_SendCmd>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <SD_Init+0x1d6>
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <SD_Init+0x208>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
	}
	SD_CS_HIGH();
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017c0:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <SD_Init+0x204>)
 80017c2:	f003 f851 	bl	8004868 <HAL_GPIO_WritePin>
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <SD_Init+0x20c>)
 80017c8:	2208      	movs	r2, #8
 80017ca:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 80017cc:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <SD_Init+0x20c>)
 80017ce:	f004 fa55 	bl	8005c7c <HAL_SPI_Init>

    if(SD_TYPE != ERR)
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <SD_Init+0x208>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SD_Init+0x1fa>
    	return SD_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <SD_Init+0x1fc>
    else
    	return SD_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	48000400 	.word	0x48000400
 80017ec:	200009e0 	.word	0x200009e0
 80017f0:	20000a5c 	.word	0x20000a5c

080017f4 <SD_ReceiveData>:

uint8_t SD_ReceiveData(uint8_t *data, uint16_t len) //从SD卡读取指定长度的数据块，len为512时为单块大小
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
   uint8_t r1;
   SD_CS_LOW();
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001806:	4817      	ldr	r0, [pc, #92]	@ (8001864 <SD_ReceiveData+0x70>)
 8001808:	f003 f82e 	bl	8004868 <HAL_GPIO_WritePin>
   do
   {
      r1 = SPI_TransmitReceive(0xFF);
 800180c:	20ff      	movs	r0, #255	@ 0xff
 800180e:	f7ff fe69 	bl	80014e4 <SPI_TransmitReceive>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(100);
 8001816:	2064      	movs	r0, #100	@ 0x64
 8001818:	f002 fad0 	bl	8003dbc <HAL_Delay>
   }while(r1 != 0xFE); // sd卡spi模式单块读取的起始令牌是0xFE
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001820:	d1f4      	bne.n	800180c <SD_ReceiveData+0x18>
  while(len--)
 8001822:	e009      	b.n	8001838 <SD_ReceiveData+0x44>
  {
   *data = SPI_TransmitReceive(0xFF);
 8001824:	20ff      	movs	r0, #255	@ 0xff
 8001826:	f7ff fe5d 	bl	80014e4 <SPI_TransmitReceive>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	701a      	strb	r2, [r3, #0]
   data++;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	607b      	str	r3, [r7, #4]
  while(len--)
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	1e5a      	subs	r2, r3, #1
 800183c:	807a      	strh	r2, [r7, #2]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <SD_ReceiveData+0x30>
  }
  SPI_TransmitReceive(0xFF);
 8001842:	20ff      	movs	r0, #255	@ 0xff
 8001844:	f7ff fe4e 	bl	80014e4 <SPI_TransmitReceive>
  SPI_TransmitReceive(0xFF);
 8001848:	20ff      	movs	r0, #255	@ 0xff
 800184a:	f7ff fe4b 	bl	80014e4 <SPI_TransmitReceive>
  SD_CS_HIGH();
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001854:	4803      	ldr	r0, [pc, #12]	@ (8001864 <SD_ReceiveData+0x70>)
 8001856:	f003 f807 	bl	8004868 <HAL_GPIO_WritePin>
  return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	48000400 	.word	0x48000400

08001868 <SD_SendBlock>:

uint8_t SD_SendBlock(uint8_t*buf,uint8_t cmd) //写入扇区内容，512字节
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint8_t r1;
	do{
		r1=SPI_TransmitReceive(0xFF);
 8001874:	20ff      	movs	r0, #255	@ 0xff
 8001876:	f7ff fe35 	bl	80014e4 <SPI_TransmitReceive>
 800187a:	4603      	mov	r3, r0
 800187c:	737b      	strb	r3, [r7, #13]
	}while(r1!=0xFF);
 800187e:	7b7b      	ldrb	r3, [r7, #13]
 8001880:	2bff      	cmp	r3, #255	@ 0xff
 8001882:	d1f7      	bne.n	8001874 <SD_SendBlock+0xc>

	SPI_TransmitReceive(cmd);
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fe2c 	bl	80014e4 <SPI_TransmitReceive>
	if(cmd!=0xFD) //0xFD为多块写入停止令牌
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	2bfd      	cmp	r3, #253	@ 0xfd
 8001890:	d022      	beq.n	80018d8 <SD_SendBlock+0x70>
	{
		for(i = 0;i < 512;i++)
 8001892:	2300      	movs	r3, #0
 8001894:	81fb      	strh	r3, [r7, #14]
 8001896:	e009      	b.n	80018ac <SD_SendBlock+0x44>
			SPI_TransmitReceive(buf[i]);
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe1f 	bl	80014e4 <SPI_TransmitReceive>
		for(i = 0;i < 512;i++)
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	3301      	adds	r3, #1
 80018aa:	81fb      	strh	r3, [r7, #14]
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018b2:	d3f1      	bcc.n	8001898 <SD_SendBlock+0x30>
		SPI_TransmitReceive(0xFF);
 80018b4:	20ff      	movs	r0, #255	@ 0xff
 80018b6:	f7ff fe15 	bl	80014e4 <SPI_TransmitReceive>
		SPI_TransmitReceive(0xFF);
 80018ba:	20ff      	movs	r0, #255	@ 0xff
 80018bc:	f7ff fe12 	bl	80014e4 <SPI_TransmitReceive>
		i=SPI_TransmitReceive(0xFF);
 80018c0:	20ff      	movs	r0, #255	@ 0xff
 80018c2:	f7ff fe0f 	bl	80014e4 <SPI_TransmitReceive>
 80018c6:	4603      	mov	r3, r0
 80018c8:	81fb      	strh	r3, [r7, #14]
		if((i&0x1F)!=0x05) //低5位为状态码，高3位为保留，应舍弃，0x05表示接收正确
 80018ca:	89fb      	ldrh	r3, [r7, #14]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d001      	beq.n	80018d8 <SD_SendBlock+0x70>
			return 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	e000      	b.n	80018da <SD_SendBlock+0x72>
	}
    return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <SD_ReadDisk>:

uint8_t SD_ReadDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //读SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f8:	4824      	ldr	r0, [pc, #144]	@ (800198c <SD_ReadDisk+0xa8>)
 80018fa:	f002 ffb5 	bl	8004868 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <SD_ReadDisk+0xac>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b06      	cmp	r3, #6
 8001904:	d002      	beq.n	800190c <SD_ReadDisk+0x28>
		sector *= 512;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d111      	bne.n	8001936 <SD_ReadDisk+0x52>
	{
		r1=SD_SendCmd(CMD17,sector,0);
 8001912:	2200      	movs	r2, #0
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	2011      	movs	r0, #17
 8001918:	f7ff fe16 	bl	8001548 <SD_SendCmd>
 800191c:	4603      	mov	r3, r0
 800191e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d127      	bne.n	8001976 <SD_ReadDisk+0x92>
			r1=SD_ReceiveData(buf,512);
 8001926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ff62 	bl	80017f4 <SD_ReceiveData>
 8001930:	4603      	mov	r3, r0
 8001932:	75fb      	strb	r3, [r7, #23]
 8001934:	e01f      	b.n	8001976 <SD_ReadDisk+0x92>
	}
	else
	{
		r1=SD_SendCmd(CMD18,sector,0);
 8001936:	2200      	movs	r2, #0
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	2012      	movs	r0, #18
 800193c:	f7ff fe04 	bl	8001548 <SD_SendCmd>
 8001940:	4603      	mov	r3, r0
 8001942:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_ReceiveData(buf,512);
 8001944:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff ff53 	bl	80017f4 <SD_ReceiveData>
 800194e:	4603      	mov	r3, r0
 8001950:	75fb      	strb	r3, [r7, #23]
			buf+=512;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001958:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	3b01      	subs	r3, #1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <SD_ReadDisk+0x88>
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0eb      	beq.n	8001944 <SD_ReadDisk+0x60>
		SD_SendCmd(CMD12,0,0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	200c      	movs	r0, #12
 8001972:	f7ff fde9 	bl	8001548 <SD_SendCmd>
	}
	SD_CS_HIGH();
 8001976:	2201      	movs	r2, #1
 8001978:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800197c:	4803      	ldr	r0, [pc, #12]	@ (800198c <SD_ReadDisk+0xa8>)
 800197e:	f002 ff73 	bl	8004868 <HAL_GPIO_WritePin>
	return r1;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	48000400 	.word	0x48000400
 8001990:	200009e0 	.word	0x200009e0

08001994 <SD_WriteDisk>:

uint8_t SD_WriteDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //写SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019a8:	482d      	ldr	r0, [pc, #180]	@ (8001a60 <SD_WriteDisk+0xcc>)
 80019aa:	f002 ff5d 	bl	8004868 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 80019ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <SD_WriteDisk+0xd0>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d002      	beq.n	80019bc <SD_WriteDisk+0x28>
		sector *= 512;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d110      	bne.n	80019e4 <SD_WriteDisk+0x50>
	{
		r1=SD_SendCmd(CMD24,sector,0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	2018      	movs	r0, #24
 80019c8:	f7ff fdbe 	bl	8001548 <SD_SendCmd>
 80019cc:	4603      	mov	r3, r0
 80019ce:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d138      	bne.n	8001a48 <SD_WriteDisk+0xb4>
		{
			r1=SD_SendBlock(buf,0xFE);
 80019d6:	21fe      	movs	r1, #254	@ 0xfe
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff ff45 	bl	8001868 <SD_SendBlock>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
 80019e2:	e031      	b.n	8001a48 <SD_WriteDisk+0xb4>
		}
	}
	else
	{
		if(SD_TYPE!=MMC)
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <SD_WriteDisk+0xd0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d00a      	beq.n	8001a02 <SD_WriteDisk+0x6e>
		{
			SD_SendCmd(CMD55,0,0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2037      	movs	r0, #55	@ 0x37
 80019f2:	f7ff fda9 	bl	8001548 <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	2017      	movs	r0, #23
 80019fe:	f7ff fda3 	bl	8001548 <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	2019      	movs	r0, #25
 8001a08:	f7ff fd9e 	bl	8001548 <SD_SendCmd>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <SD_WriteDisk+0xb4>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); //0xFC为多块写入起始令牌
 8001a16:	21fc      	movs	r1, #252	@ 0xfc
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ff25 	bl	8001868 <SD_SendBlock>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	75fb      	strb	r3, [r7, #23]
				buf+=512;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001a28:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <SD_WriteDisk+0xa8>
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ec      	beq.n	8001a16 <SD_WriteDisk+0x82>
			r1=SD_SendBlock(0,0xFD);
 8001a3c:	21fd      	movs	r1, #253	@ 0xfd
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff ff12 	bl	8001868 <SD_SendBlock>
 8001a44:	4603      	mov	r3, r0
 8001a46:	75fb      	strb	r3, [r7, #23]
		}
	}
	SD_CS_HIGH();
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a4e:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <SD_WriteDisk+0xcc>)
 8001a50:	f002 ff0a 	bl	8004868 <HAL_GPIO_WritePin>
	return r1;
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	48000400 	.word	0x48000400
 8001a64:	200009e0 	.word	0x200009e0

08001a68 <SD_GETCSD>:

uint8_t SD_GETCSD(uint8_t *csd_data) //获取CSD数据
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	SD_CS_LOW();
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a76:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <SD_GETCSD+0x50>)
 8001a78:	f002 fef6 	bl	8004868 <HAL_GPIO_WritePin>
	uint8_t r1;
    if(SD_SendCmd(CMD9,0,0) == 0)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2009      	movs	r0, #9
 8001a82:	f7ff fd61 	bl	8001548 <SD_SendCmd>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d105      	bne.n	8001a98 <SD_GETCSD+0x30>
    {
    	r1=SD_ReceiveData(csd_data, 16);
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff feb0 	bl	80017f4 <SD_ReceiveData>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
    }
	SD_CS_HIGH();
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a9e:	4806      	ldr	r0, [pc, #24]	@ (8001ab8 <SD_GETCSD+0x50>)
 8001aa0:	f002 fee2 	bl	8004868 <HAL_GPIO_WritePin>
	if(r1)
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SD_GETCSD+0x46>
		return 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <SD_GETCSD+0x48>
	else
		return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	48000400 	.word	0x48000400

08001abc <SD_GetSectorCount>:

uint32_t SD_GetSectorCount(void) //获取SD卡总扇区数
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
    uint8_t csd[16];
    uint32_t Capacity;
    uint8_t n;
	uint16_t csize;
    if(SD_GETCSD(csd)!=0)
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ffcf 	bl	8001a68 <SD_GETCSD>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SD_GetSectorCount+0x18>
    	return 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e03e      	b.n	8001b52 <SD_GetSectorCount+0x96>
    if((csd[0]&0xC0)==0x40)
 8001ad4:	783b      	ldrb	r3, [r7, #0]
 8001ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001ada:	2b40      	cmp	r3, #64	@ 0x40
 8001adc:	d10c      	bne.n	8001af8 <SD_GetSectorCount+0x3c>
    {
		csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
 8001ade:	7a7b      	ldrb	r3, [r7, #9]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	7a3b      	ldrb	r3, [r7, #8]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	823b      	strh	r3, [r7, #16]
		Capacity = (uint32_t)csize << 10;
 8001af0:	8a3b      	ldrh	r3, [r7, #16]
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e02b      	b.n	8001b50 <SD_GetSectorCount+0x94>
    }
    else
    {
		n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001af8:	797b      	ldrb	r3, [r7, #5]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	7abb      	ldrb	r3, [r7, #10]
 8001b02:	09db      	lsrs	r3, r3, #7
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	7a7b      	ldrb	r3, [r7, #9]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f003 0306 	and.w	r3, r3, #6
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	74fb      	strb	r3, [r7, #19]
		csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8001b1e:	7a3b      	ldrb	r3, [r7, #8]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	823b      	strh	r3, [r7, #16]
		Capacity= (uint32_t)csize << (n - 9);
 8001b44:	8a3a      	ldrh	r2, [r7, #16]
 8001b46:	7cfb      	ldrb	r3, [r7, #19]
 8001b48:	3b09      	subs	r3, #9
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
    }
    return Capacity;
 8001b50:	697b      	ldr	r3, [r7, #20]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <file_exists>:

FRESULT file_exists(const char *path) //检查配置文件是否存在
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b0ca      	sub	sp, #296	@ 0x128
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001b64:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b68:	6018      	str	r0, [r3, #0]
    FILINFO fno;
    return f_stat(path, &fno);
 8001b6a:	f107 0208 	add.w	r2, r7, #8
 8001b6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001b72:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b76:	4611      	mov	r1, r2
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	f00b fcef 	bl	800d55c <f_stat>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <get_next_log_number>:

int get_next_log_number(void) //寻找sd卡中生成的文件最大的数字并返回最大数字+1
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0e4      	sub	sp, #400	@ 0x190
 8001b90:	af00      	add	r7, sp, #0
    if (cached_max_log_num == -1)
 8001b92:	4b54      	ldr	r3, [pc, #336]	@ (8001ce4 <get_next_log_number+0x158>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	f040 8096 	bne.w	8001cca <get_next_log_number+0x13e>
    {
        DIR dir;
        FILINFO fno;
        const char *prefix = LOG_PREFIX;
 8001b9e:	4b52      	ldr	r3, [pc, #328]	@ (8001ce8 <get_next_log_number+0x15c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        const size_t prefix_len = strlen(prefix);
 8001ba6:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8001baa:	f7fe fb71 	bl	8000290 <strlen>
 8001bae:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
        int max_num = -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

        if (f_opendir(&dir, "/") == FR_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	494b      	ldr	r1, [pc, #300]	@ (8001cec <get_next_log_number+0x160>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f00b fb96 	bl	800d2f0 <f_opendir>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d179      	bne.n	8001cbe <get_next_log_number+0x132>
        {
            while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0)
 8001bca:	e063      	b.n	8001c94 <get_next_log_number+0x108>
            {
                char* name = fno.fname;
 8001bcc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001bd0:	331a      	adds	r3, #26
 8001bd2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
                size_t len = strlen(name);
 8001bd6:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001bda:	f7fe fb59 	bl	8000290 <strlen>
 8001bde:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174

                if (len == prefix_len + 9 && strncmp(name, prefix, prefix_len) == 0)
 8001be2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001be6:	3309      	adds	r3, #9
 8001be8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d151      	bne.n	8001c94 <get_next_log_number+0x108>
 8001bf0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001bf4:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8001bf8:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001bfc:	f00e f865 	bl	800fcca <strncmp>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d146      	bne.n	8001c94 <get_next_log_number+0x108>
                {
                    int num = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    for (int i = 0; i < 5; i++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c12:	e024      	b.n	8001c5e <get_next_log_number+0xd2>
                    {
                        char c = name[prefix_len + i];
 8001c14:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8001c18:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
                        if (c < '0' || c > '9') break;
 8001c2a:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001c2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c30:	d919      	bls.n	8001c66 <get_next_log_number+0xda>
 8001c32:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001c36:	2b39      	cmp	r3, #57	@ 0x39
 8001c38:	d815      	bhi.n	8001c66 <get_next_log_number+0xda>
                        num = num * 10 + (c - '0');
 8001c3a:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	461a      	mov	r2, r3
 8001c48:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001c4c:	3b30      	subs	r3, #48	@ 0x30
 8001c4e:	4413      	add	r3, r2
 8001c50:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    for (int i = 0; i < 5; i++)
 8001c54:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c5e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	ddd6      	ble.n	8001c14 <get_next_log_number+0x88>
                    }

                    if (strcmp(name + prefix_len + 5, ".txt") == 0)
 8001c66:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001c6a:	3305      	adds	r3, #5
 8001c6c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c70:	4413      	add	r3, r2
 8001c72:	491f      	ldr	r1, [pc, #124]	@ (8001cf0 <get_next_log_number+0x164>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe faab 	bl	80001d0 <strcmp>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <get_next_log_number+0x108>
                    {
                        if (num > max_num) max_num = num;
 8001c80:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001c84:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dd03      	ble.n	8001c94 <get_next_log_number+0x108>
 8001c8c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c90:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
            while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0)
 8001c94:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00b fc0b 	bl	800d4b8 <f_readdir>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <get_next_log_number+0x12a>
 8001ca8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001cac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cb0:	7e9b      	ldrb	r3, [r3, #26]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d18a      	bne.n	8001bcc <get_next_log_number+0x40>
                    }
                }
            }
            f_closedir(&dir);
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00b fbd7 	bl	800d46c <f_closedir>
        }
        cached_max_log_num = (max_num < 0) ? 0 : max_num;
 8001cbe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001cc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cc6:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <get_next_log_number+0x158>)
 8001cc8:	6013      	str	r3, [r2, #0]
    }
    	return ++cached_max_log_num;
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <get_next_log_number+0x158>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <get_next_log_number+0x158>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <get_next_log_number+0x158>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	0801324c 	.word	0x0801324c
 8001cf0:	08013250 	.word	0x08013250

08001cf4 <read_config>:
#include "sdconfig.h"
#include "user_spi.h"
#include "user_usart.h"

FRESULT read_config(char *buffer, uint16_t buf_size) //读配置文件
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d00:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001d04:	6018      	str	r0, [r3, #0]
 8001d06:	460a      	mov	r2, r1
 8001d08:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d0c:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001d10:	801a      	strh	r2, [r3, #0]
    FIL fil;
    FRESULT res = f_open(&fil, CONFIG_FILE, FA_READ);
 8001d12:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <read_config+0x94>)
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00a fb85 	bl	800c42c <f_open>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if(res == FR_OK)
 8001d28:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d124      	bne.n	8001d7a <read_config+0x86>
    {
        UINT br;
        f_read(&fil, buffer, buf_size - 1, &br);
 8001d30:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d34:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	461c      	mov	r4, r3
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001d46:	f5a2 711b 	sub.w	r1, r2, #620	@ 0x26c
 8001d4a:	f107 0010 	add.w	r0, r7, #16
 8001d4e:	4622      	mov	r2, r4
 8001d50:	6809      	ldr	r1, [r1, #0]
 8001d52:	f00a fe45 	bl	800c9e0 <f_read>
        buffer[br] = '\0';
 8001d56:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d5a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001d64:	f5a2 721b 	sub.w	r2, r2, #620	@ 0x26c
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
        f_close(&fil);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4618      	mov	r0, r3
 8001d76:	f00b fa91 	bl	800d29c <f_close>
    }
    return res;
 8001d7a:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	20000000 	.word	0x20000000

08001d8c <parse_config>:

SD_Config parse_config(const char *config_text) //寻找配置文件中的相关参数，查看是否有修改，将参数保存并返回
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	SD_Config config =
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <parse_config+0x128>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	813b      	strh	r3, [r7, #8]
 8001d9e:	4b46      	ldr	r3, [pc, #280]	@ (8001eb8 <parse_config+0x12c>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	817b      	strh	r3, [r7, #10]
 8001da4:	4b45      	ldr	r3, [pc, #276]	@ (8001ebc <parse_config+0x130>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	81bb      	strh	r3, [r7, #12]
 8001daa:	4b45      	ldr	r3, [pc, #276]	@ (8001ec0 <parse_config+0x134>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	81fb      	strh	r3, [r7, #14]
		.peakth = PEAKTH,
		.almstth = ALMSTTH,
		.pkwnd = PKWND
	};

    const char *section = strstr(config_text, CONFIG_SECTION);
 8001db0:	4944      	ldr	r1, [pc, #272]	@ (8001ec4 <parse_config+0x138>)
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	f00d ff9b 	bl	800fcee <strstr>
 8001db8:	6138      	str	r0, [r7, #16]
    if (!section) return config;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <parse_config+0x44>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	cb03      	ldmia	r3!, {r0, r1}
 8001dca:	6010      	str	r0, [r2, #0]
 8001dcc:	6051      	str	r1, [r2, #4]
 8001dce:	e06c      	b.n	8001eaa <parse_config+0x11e>

    const char *ptr = section + strlen(CONFIG_SECTION);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	330a      	adds	r3, #10
 8001dd4:	617b      	str	r3, [r7, #20]

    while (*ptr != '\0' && *ptr != '[')
 8001dd6:	e059      	b.n	8001e8c <parse_config+0x100>
    {
        if (strncmp(ptr, RECODE_KEY, strlen(RECODE_KEY)) == 0)
 8001dd8:	220c      	movs	r2, #12
 8001dda:	493b      	ldr	r1, [pc, #236]	@ (8001ec8 <parse_config+0x13c>)
 8001ddc:	6978      	ldr	r0, [r7, #20]
 8001dde:	f00d ff74 	bl	800fcca <strncmp>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <parse_config+0x70>
        {
            ptr += strlen(RECODE_KEY) + 1;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	330d      	adds	r3, #13
 8001dec:	617b      	str	r3, [r7, #20]
            config.receiver_code = atoi(ptr);
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f00c fe3f 	bl	800ea72 <atoi>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	e038      	b.n	8001e6e <parse_config+0xe2>
        }
        else if (strncmp(ptr, PEAKTH_KEY, strlen(PEAKTH_KEY)) == 0)
 8001dfc:	2206      	movs	r2, #6
 8001dfe:	4933      	ldr	r1, [pc, #204]	@ (8001ecc <parse_config+0x140>)
 8001e00:	6978      	ldr	r0, [r7, #20]
 8001e02:	f00d ff62 	bl	800fcca <strncmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <parse_config+0x94>
        {
            ptr += strlen(PEAKTH_KEY) + 1;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3307      	adds	r3, #7
 8001e10:	617b      	str	r3, [r7, #20]
            config.peakth = atoi(ptr);
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f00c fe2d 	bl	800ea72 <atoi>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	817b      	strh	r3, [r7, #10]
 8001e1e:	e026      	b.n	8001e6e <parse_config+0xe2>
        }
        else if (strncmp(ptr, ALMSTTH_KEY, strlen(ALMSTTH_KEY)) == 0)
 8001e20:	2207      	movs	r2, #7
 8001e22:	492b      	ldr	r1, [pc, #172]	@ (8001ed0 <parse_config+0x144>)
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	f00d ff50 	bl	800fcca <strncmp>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <parse_config+0xb8>
        {
            ptr += strlen(ALMSTTH_KEY) + 1;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3308      	adds	r3, #8
 8001e34:	617b      	str	r3, [r7, #20]
            config.almstth = atoi(ptr);
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f00c fe1b 	bl	800ea72 <atoi>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	81bb      	strh	r3, [r7, #12]
 8001e42:	e014      	b.n	8001e6e <parse_config+0xe2>
        }
        else if (strncmp(ptr, PKWND_KEY, strlen(PKWND_KEY)) == 0)
 8001e44:	2205      	movs	r2, #5
 8001e46:	4923      	ldr	r1, [pc, #140]	@ (8001ed4 <parse_config+0x148>)
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f00d ff3e 	bl	800fcca <strncmp>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10c      	bne.n	8001e6e <parse_config+0xe2>
		{
			ptr += strlen(PKWND_KEY) + 1;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3306      	adds	r3, #6
 8001e58:	617b      	str	r3, [r7, #20]
			config.pkwnd = atoi(ptr);
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f00c fe09 	bl	800ea72 <atoi>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	81fb      	strh	r3, [r7, #14]
		}

        while (*ptr != '\n' && *ptr != '\0') ptr++;
 8001e66:	e002      	b.n	8001e6e <parse_config+0xe2>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b0a      	cmp	r3, #10
 8001e74:	d003      	beq.n	8001e7e <parse_config+0xf2>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f4      	bne.n	8001e68 <parse_config+0xdc>
        if (*ptr == '\n') ptr++;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b0a      	cmp	r3, #10
 8001e84:	d102      	bne.n	8001e8c <parse_config+0x100>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
    while (*ptr != '\0' && *ptr != '[')
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <parse_config+0x110>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e9a:	d19d      	bne.n	8001dd8 <parse_config+0x4c>
    }

    return config;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	cb03      	ldmia	r3!, {r0, r1}
 8001ea6:	6010      	str	r0, [r2, #0]
 8001ea8:	6051      	str	r1, [r2, #4]
}
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000022 	.word	0x20000022
 8001eb8:	20000010 	.word	0x20000010
 8001ebc:	20000012 	.word	0x20000012
 8001ec0:	20000014 	.word	0x20000014
 8001ec4:	08013258 	.word	0x08013258
 8001ec8:	08013264 	.word	0x08013264
 8001ecc:	08013274 	.word	0x08013274
 8001ed0:	0801327c 	.word	0x0801327c
 8001ed4:	08013284 	.word	0x08013284

08001ed8 <apply_config>:

void apply_config(SD_Config *config) // 应用新配置
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	receivercode = config->receiver_code;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <apply_config+0x54>)
 8001ee6:	801a      	strh	r2, [r3, #0]
	PEAKTH = config->peakth;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	885a      	ldrh	r2, [r3, #2]
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <apply_config+0x58>)
 8001eee:	801a      	strh	r2, [r3, #0]
	ALMSTTH = config->almstth;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	889a      	ldrh	r2, [r3, #4]
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <apply_config+0x5c>)
 8001ef6:	801a      	strh	r2, [r3, #0]
	PKWND = config->pkwnd;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	88da      	ldrh	r2, [r3, #6]
 8001efc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <apply_config+0x60>)
 8001efe:	801a      	strh	r2, [r3, #0]
	ASIC_CMD(0x01, PEAKTH);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <apply_config+0x58>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	2001      	movs	r0, #1
 8001f08:	f000 fe30 	bl	8002b6c <ASIC_CMD>
	ASIC_CMD(0x02, ALMSTTH);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <apply_config+0x5c>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	2002      	movs	r0, #2
 8001f14:	f000 fe2a 	bl	8002b6c <ASIC_CMD>
	ASIC_CMD(0x04, PKWND);
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <apply_config+0x60>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2004      	movs	r0, #4
 8001f20:	f000 fe24 	bl	8002b6c <ASIC_CMD>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000022 	.word	0x20000022
 8001f30:	20000010 	.word	0x20000010
 8001f34:	20000012 	.word	0x20000012
 8001f38:	20000014 	.word	0x20000014

08001f3c <create_default_config>:

void create_default_config(void) //创建配置文件
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8001f42:	af00      	add	r7, sp, #0
    FIL fil;
    if(f_open(&fil, CONFIG_FILE, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <create_default_config+0x50>)
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00a fa6c 	bl	800c42c <f_open>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d113      	bne.n	8001f82 <create_default_config+0x46>
    {
        const char *default_config =
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <create_default_config+0x54>)
 8001f5c:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
            "PEAKTH=200\n"
        	"ALMSTTH=32\n"
        	"PKWND=5000\n";

        UINT bw;
        f_write(&fil, default_config, strlen(default_config), &bw);
 8001f60:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 8001f64:	f7fe f994 	bl	8000290 <strlen>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	f107 0008 	add.w	r0, r7, #8
 8001f70:	f8d7 1264 	ldr.w	r1, [r7, #612]	@ 0x264
 8001f74:	f00a feac 	bl	800ccd0 <f_write>
        f_close(&fil);
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00b f98d 	bl	800d29c <f_close>
    }
}
 8001f82:	bf00      	nop
 8001f84:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	0801328c 	.word	0x0801328c

08001f94 <load_and_apply_config>:

SD_Config load_and_apply_config(void) //读取并应用配置
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b0c7      	sub	sp, #284	@ 0x11c
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fa2:	6018      	str	r0, [r3, #0]
    char config_buf[256];
    SD_Config config =
 8001fa4:	4b29      	ldr	r3, [pc, #164]	@ (800204c <load_and_apply_config+0xb8>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fb2:	801a      	strh	r2, [r3, #0]
 8001fb4:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <load_and_apply_config+0xbc>)
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fc0:	805a      	strh	r2, [r3, #2]
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <load_and_apply_config+0xc0>)
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fce:	809a      	strh	r2, [r3, #4]
 8001fd0:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <load_and_apply_config+0xc4>)
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fdc:	80da      	strh	r2, [r3, #6]
        .peakth = PEAKTH,
        .almstth = ALMSTTH,
        .pkwnd = PKWND
    };

    if(read_config(config_buf, sizeof(config_buf)) == FR_OK)
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fe84 	bl	8001cf4 <read_config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d117      	bne.n	8002022 <load_and_apply_config+0x8e>
    {
        config = parse_config(config_buf);
 8001ff2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff6:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	f107 0218 	add.w	r2, r7, #24
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fec2 	bl	8001d8c <parse_config>
 8002008:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800200c:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8002010:	4623      	mov	r3, r4
 8002012:	6810      	ldr	r0, [r2, #0]
 8002014:	6851      	ldr	r1, [r2, #4]
 8002016:	c303      	stmia	r3!, {r0, r1}
        apply_config(&config);
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5b 	bl	8001ed8 <apply_config>
    }
    return config;
 8002022:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002026:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002034:	cb03      	ldmia	r3!, {r0, r1}
 8002036:	6010      	str	r0, [r2, #0]
 8002038:	6051      	str	r1, [r2, #4]
}
 800203a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800203e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	20000022 	.word	0x20000022
 8002050:	20000010 	.word	0x20000010
 8002054:	20000012 	.word	0x20000012
 8002058:	20000014 	.word	0x20000014

0800205c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002062:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <MX_SPI1_Init+0x78>)
 8002064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002068:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800206c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002076:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800207a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <MX_SPI1_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002082:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_SPI1_Init+0x74>)
 800208a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800208e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002092:	2208      	movs	r2, #8
 8002094:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002096:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <MX_SPI1_Init+0x74>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <MX_SPI1_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020aa:	2207      	movs	r2, #7
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020b6:	2208      	movs	r2, #8
 80020b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <MX_SPI1_Init+0x74>)
 80020bc:	f003 fdde 	bl	8005c7c <HAL_SPI_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f7ff f9ee 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200009f8 	.word	0x200009f8
 80020d4:	40013000 	.word	0x40013000

080020d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <MX_SPI2_Init+0x74>)
 80020de:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <MX_SPI2_Init+0x78>)
 80020e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <MX_SPI2_Init+0x74>)
 80020e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020ea:	4b18      	ldr	r3, [pc, #96]	@ (800214c <MX_SPI2_Init+0x74>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_SPI2_Init+0x74>)
 80020f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_SPI2_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020fe:	4b13      	ldr	r3, [pc, #76]	@ (800214c <MX_SPI2_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <MX_SPI2_Init+0x74>)
 8002106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800210a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <MX_SPI2_Init+0x74>)
 800210e:	2238      	movs	r2, #56	@ 0x38
 8002110:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <MX_SPI2_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002118:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <MX_SPI2_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <MX_SPI2_Init+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <MX_SPI2_Init+0x74>)
 8002126:	2207      	movs	r2, #7
 8002128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800212a:	4b08      	ldr	r3, [pc, #32]	@ (800214c <MX_SPI2_Init+0x74>)
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <MX_SPI2_Init+0x74>)
 8002132:	2208      	movs	r2, #8
 8002134:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	@ (800214c <MX_SPI2_Init+0x74>)
 8002138:	f003 fda0 	bl	8005c7c <HAL_SPI_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002142:	f7ff f9b0 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000a5c 	.word	0x20000a5c
 8002150:	40003800 	.word	0x40003800

08002154 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	@ 0x30
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a9b      	ldr	r2, [pc, #620]	@ (80023e0 <HAL_SPI_MspInit+0x28c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	f040 8095 	bne.w	80022a2 <HAL_SPI_MspInit+0x14e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002178:	4b9a      	ldr	r3, [pc, #616]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 800217a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217c:	4a99      	ldr	r2, [pc, #612]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 800217e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002182:	6613      	str	r3, [r2, #96]	@ 0x60
 8002184:	4b97      	ldr	r3, [pc, #604]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 8002186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b94      	ldr	r3, [pc, #592]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002194:	4a93      	ldr	r2, [pc, #588]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219c:	4b91      	ldr	r3, [pc, #580]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021a8:	23a0      	movs	r3, #160	@ 0xa0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b8:	2305      	movs	r3, #5
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c6:	f002 f9bd 	bl	8004544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ca:	2340      	movs	r3, #64	@ 0x40
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021da:	2305      	movs	r3, #5
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e8:	f002 f9ac 	bl	8004544 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80021ec:	4b7e      	ldr	r3, [pc, #504]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 80021ee:	4a7f      	ldr	r2, [pc, #508]	@ (80023ec <HAL_SPI_MspInit+0x298>)
 80021f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80021f2:	4b7d      	ldr	r3, [pc, #500]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f8:	4b7b      	ldr	r3, [pc, #492]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fe:	4b7a      	ldr	r3, [pc, #488]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002204:	4b78      	ldr	r3, [pc, #480]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002206:	2280      	movs	r2, #128	@ 0x80
 8002208:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220a:	4b77      	ldr	r3, [pc, #476]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002210:	4b75      	ldr	r3, [pc, #468]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002216:	4b74      	ldr	r3, [pc, #464]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800221c:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002222:	4871      	ldr	r0, [pc, #452]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002224:	f001 ff0c 	bl	8004040 <HAL_DMA_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 800222e:	f7ff f93a 	bl	80014a6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a6c      	ldr	r2, [pc, #432]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 8002236:	659a      	str	r2, [r3, #88]	@ 0x58
 8002238:	4a6b      	ldr	r2, [pc, #428]	@ (80023e8 <HAL_SPI_MspInit+0x294>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800223e:	4b6c      	ldr	r3, [pc, #432]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002240:	4a6c      	ldr	r2, [pc, #432]	@ (80023f4 <HAL_SPI_MspInit+0x2a0>)
 8002242:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002244:	4b6a      	ldr	r3, [pc, #424]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002246:	2201      	movs	r2, #1
 8002248:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800224a:	4b69      	ldr	r3, [pc, #420]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 800224c:	2210      	movs	r2, #16
 800224e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002250:	4b67      	ldr	r3, [pc, #412]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002256:	4b66      	ldr	r3, [pc, #408]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002258:	2280      	movs	r2, #128	@ 0x80
 800225a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225c:	4b64      	ldr	r3, [pc, #400]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002262:	4b63      	ldr	r3, [pc, #396]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002268:	4b61      	ldr	r3, [pc, #388]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800226e:	4b60      	ldr	r3, [pc, #384]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002274:	485e      	ldr	r0, [pc, #376]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002276:	f001 fee3 	bl	8004040 <HAL_DMA_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002280:	f7ff f911 	bl	80014a6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a5a      	ldr	r2, [pc, #360]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
 800228a:	4a59      	ldr	r2, [pc, #356]	@ (80023f0 <HAL_SPI_MspInit+0x29c>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2023      	movs	r0, #35	@ 0x23
 8002296:	f001 fe90 	bl	8003fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800229a:	2023      	movs	r0, #35	@ 0x23
 800229c:	f001 fea9 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022a0:	e099      	b.n	80023d6 <HAL_SPI_MspInit+0x282>
  else if(spiHandle->Instance==SPI2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a54      	ldr	r2, [pc, #336]	@ (80023f8 <HAL_SPI_MspInit+0x2a4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	f040 8094 	bne.w	80023d6 <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ae:	4b4d      	ldr	r3, [pc, #308]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	4a4c      	ldr	r2, [pc, #304]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ba:	4b4a      	ldr	r3, [pc, #296]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	4a46      	ldr	r2, [pc, #280]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d2:	4b44      	ldr	r3, [pc, #272]	@ (80023e4 <HAL_SPI_MspInit+0x290>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022de:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022f0:	2305      	movs	r3, #5
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4619      	mov	r1, r3
 80022fa:	4840      	ldr	r0, [pc, #256]	@ (80023fc <HAL_SPI_MspInit+0x2a8>)
 80022fc:	f002 f922 	bl	8004544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002300:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800230a:	2301      	movs	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002312:	2305      	movs	r3, #5
 8002314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	4619      	mov	r1, r3
 800231c:	4837      	ldr	r0, [pc, #220]	@ (80023fc <HAL_SPI_MspInit+0x2a8>)
 800231e:	f002 f911 	bl	8004544 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8002322:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002324:	4a37      	ldr	r2, [pc, #220]	@ (8002404 <HAL_SPI_MspInit+0x2b0>)
 8002326:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8002328:	4b35      	ldr	r3, [pc, #212]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800232a:	2201      	movs	r2, #1
 800232c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800232e:	4b34      	ldr	r3, [pc, #208]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002334:	4b32      	ldr	r3, [pc, #200]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800233a:	4b31      	ldr	r3, [pc, #196]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800233c:	2280      	movs	r2, #128	@ 0x80
 800233e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002340:	4b2f      	ldr	r3, [pc, #188]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002346:	4b2e      	ldr	r3, [pc, #184]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800234c:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002352:	4b2b      	ldr	r3, [pc, #172]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002358:	4829      	ldr	r0, [pc, #164]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800235a:	f001 fe71 	bl	8004040 <HAL_DMA_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8002364:	f7ff f89f 	bl	80014a6 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a25      	ldr	r2, [pc, #148]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 800236c:	659a      	str	r2, [r3, #88]	@ 0x58
 800236e:	4a24      	ldr	r2, [pc, #144]	@ (8002400 <HAL_SPI_MspInit+0x2ac>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002374:	4b24      	ldr	r3, [pc, #144]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 8002376:	4a25      	ldr	r2, [pc, #148]	@ (800240c <HAL_SPI_MspInit+0x2b8>)
 8002378:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800237a:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 800237c:	2201      	movs	r2, #1
 800237e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002380:	4b21      	ldr	r3, [pc, #132]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 8002382:	2210      	movs	r2, #16
 8002384:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b1e      	ldr	r3, [pc, #120]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 800238e:	2280      	movs	r2, #128	@ 0x80
 8002390:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002392:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800239e:	4b1a      	ldr	r3, [pc, #104]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023a4:	4b18      	ldr	r3, [pc, #96]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80023aa:	4817      	ldr	r0, [pc, #92]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023ac:	f001 fe48 	bl	8004040 <HAL_DMA_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_SPI_MspInit+0x266>
      Error_Handler();
 80023b6:	f7ff f876 	bl	80014a6 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
 80023c0:	4a11      	ldr	r2, [pc, #68]	@ (8002408 <HAL_SPI_MspInit+0x2b4>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2024      	movs	r0, #36	@ 0x24
 80023cc:	f001 fdf5 	bl	8003fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023d0:	2024      	movs	r0, #36	@ 0x24
 80023d2:	f001 fe0e 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3730      	adds	r7, #48	@ 0x30
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40013000 	.word	0x40013000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	20000ac0 	.word	0x20000ac0
 80023ec:	4002001c 	.word	0x4002001c
 80023f0:	20000b08 	.word	0x20000b08
 80023f4:	40020030 	.word	0x40020030
 80023f8:	40003800 	.word	0x40003800
 80023fc:	48000400 	.word	0x48000400
 8002400:	20000b50 	.word	0x20000b50
 8002404:	40020044 	.word	0x40020044
 8002408:	20000b98 	.word	0x20000b98
 800240c:	40020058 	.word	0x40020058

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_MspInit+0x44>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241a:	4a0e      	ldr	r2, [pc, #56]	@ (8002454 <HAL_MspInit+0x44>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6613      	str	r3, [r2, #96]	@ 0x60
 8002422:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <HAL_MspInit+0x44>)
 8002424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_MspInit+0x44>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <HAL_MspInit+0x44>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	@ 0x58
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_MspInit+0x44>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <NMI_Handler+0x4>

08002460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <MemManage_Handler+0x4>

08002470 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <UsageFault_Handler+0x4>

08002480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ae:	f001 fc65 	bl	8003d7c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80024b2:	f001 fdb8 	bl	8004026 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <DMA1_Channel2_IRQHandler+0x10>)
 80024c2:	f001 ff54 	bl	800436e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000ac0 	.word	0x20000ac0

080024d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <DMA1_Channel3_IRQHandler+0x10>)
 80024d6:	f001 ff4a 	bl	800436e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000b08 	.word	0x20000b08

080024e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <DMA1_Channel4_IRQHandler+0x10>)
 80024ea:	f001 ff40 	bl	800436e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000b50 	.word	0x20000b50

080024f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <DMA1_Channel5_IRQHandler+0x10>)
 80024fe:	f001 ff36 	bl	800436e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000b98 	.word	0x20000b98

0800250c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <TIM2_IRQHandler+0x38>)
 8002512:	f004 f9a5 	bl	8006860 <HAL_TIM_IRQHandler>
  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE))
 8002516:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <TIM2_IRQHandler+0x38>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10c      	bne.n	800253e <TIM2_IRQHandler+0x32>
    {
        __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8002524:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <TIM2_IRQHandler+0x38>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0201 	mvn.w	r2, #1
 800252c:	611a      	str	r2, [r3, #16]
        high_counter += 0x100000000;
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <TIM2_IRQHandler+0x3c>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	1c5d      	adds	r5, r3, #1
 8002536:	4614      	mov	r4, r2
 8002538:	4b03      	ldr	r3, [pc, #12]	@ (8002548 <TIM2_IRQHandler+0x3c>)
 800253a:	e9c3 4500 	strd	r4, r5, [r3]
    }
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bdb0      	pop	{r4, r5, r7, pc}
 8002542:	bf00      	nop
 8002544:	20000be4 	.word	0x20000be4
 8002548:	200011c0 	.word	0x200011c0

0800254c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002550:	4802      	ldr	r0, [pc, #8]	@ (800255c <SPI1_IRQHandler+0x10>)
 8002552:	f003 fe55 	bl	8006200 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200009f8 	.word	0x200009f8

08002560 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <SPI2_IRQHandler+0x10>)
 8002566:	f003 fe4b 	bl	8006200 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000a5c 	.word	0x20000a5c

08002574 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8002578:	4823      	ldr	r0, [pc, #140]	@ (8002608 <USART1_IRQHandler+0x94>)
 800257a:	f004 ff49 	bl	8007410 <HAL_UART_IRQHandler>
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 800257e:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <USART1_IRQHandler+0x94>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d13b      	bne.n	8002604 <USART1_IRQHandler+0x90>
      {
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800258c:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <USART1_IRQHandler+0x94>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	621a      	str	r2, [r3, #32]
    	  HAL_UART_AbortReceive(&huart1);
 8002594:	481c      	ldr	r0, [pc, #112]	@ (8002608 <USART1_IRQHandler+0x94>)
 8002596:	f004 fe89 	bl	80072ac <HAL_UART_AbortReceive>
    	  rx_length = sizeof(rx_buffer) - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <USART1_IRQHandler+0x94>)
 800259c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b18      	ldr	r3, [pc, #96]	@ (800260c <USART1_IRQHandler+0x98>)
 80025ac:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025ae:	b672      	cpsid	i
}
 80025b0:	bf00      	nop
    	  __disable_irq();
    	  if(wp + rx_length <= &processing_buffer[BUF_SIZE])
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <USART1_IRQHandler+0x9c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a15      	ldr	r2, [pc, #84]	@ (800260c <USART1_IRQHandler+0x98>)
 80025b8:	8812      	ldrh	r2, [r2, #0]
 80025ba:	b292      	uxth	r2, r2
 80025bc:	4413      	add	r3, r2
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <USART1_IRQHandler+0xa0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d810      	bhi.n	80025e6 <USART1_IRQHandler+0x72>
    	  {
    		  memcpy(wp, rx_buffer, rx_length);
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <USART1_IRQHandler+0x9c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a10      	ldr	r2, [pc, #64]	@ (800260c <USART1_IRQHandler+0x98>)
 80025ca:	8812      	ldrh	r2, [r2, #0]
 80025cc:	b292      	uxth	r2, r2
 80025ce:	4912      	ldr	r1, [pc, #72]	@ (8002618 <USART1_IRQHandler+0xa4>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f00d fc2a 	bl	800fe2a <memcpy>
    		  wp += rx_length;
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <USART1_IRQHandler+0x98>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <USART1_IRQHandler+0x9c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <USART1_IRQHandler+0x9c>)
 80025e4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025e6:	b662      	cpsie	i
}
 80025e8:	bf00      	nop
    	  }
		  __enable_irq();
		  if(rx_length > 0)
 80025ea:	4b08      	ldr	r3, [pc, #32]	@ (800260c <USART1_IRQHandler+0x98>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <USART1_IRQHandler+0x86>
		  {
			  data_ready = 1;
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <USART1_IRQHandler+0xa8>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	801a      	strh	r2, [r3, #0]
		  }
    	  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 80025fa:	2280      	movs	r2, #128	@ 0x80
 80025fc:	4906      	ldr	r1, [pc, #24]	@ (8002618 <USART1_IRQHandler+0xa4>)
 80025fe:	4802      	ldr	r0, [pc, #8]	@ (8002608 <USART1_IRQHandler+0x94>)
 8002600:	f004 fe08 	bl	8007214 <HAL_UART_Receive_DMA>
      }
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000c7c 	.word	0x20000c7c
 800260c:	2000053c 	.word	0x2000053c
 8002610:	20000018 	.word	0x20000018
 8002614:	200011a8 	.word	0x200011a8
 8002618:	2000043c 	.word	0x2000043c
 800261c:	2000053e 	.word	0x2000053e

08002620 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <TIM6_DAC_IRQHandler+0x10>)
 8002626:	f004 f91b 	bl	8006860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000c30 	.word	0x20000c30

08002634 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <DMA2_Channel6_IRQHandler+0x10>)
 800263a:	f001 fe98 	bl	800436e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000d4c 	.word	0x20000d4c

08002648 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <DMA2_Channel7_IRQHandler+0x10>)
 800264e:	f001 fe8e 	bl	800436e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000d04 	.word	0x20000d04

0800265c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_kill>:

int _kill(int pid, int sig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002676:	f00d fbab 	bl	800fdd0 <__errno>
 800267a:	4603      	mov	r3, r0
 800267c:	2216      	movs	r2, #22
 800267e:	601a      	str	r2, [r3, #0]
  return -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_exit>:

void _exit (int status)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffe7 	bl	800266c <_kill>
  while (1) {}    /* Make sure we hang here */
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <_exit+0x12>

080026a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e00a      	b.n	80026ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b4:	f3af 8000 	nop.w
 80026b8:	4601      	mov	r1, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	60ba      	str	r2, [r7, #8]
 80026c0:	b2ca      	uxtb	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dbf0      	blt.n	80026b4 <_read+0x12>
  }

  return len;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002704:	605a      	str	r2, [r3, #4]
  return 0;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_isatty>:

int _isatty(int file)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271c:	2301      	movs	r3, #1
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	@ (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f00d fb2c 	bl	800fdd0 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000c000 	.word	0x2000c000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	20000be0 	.word	0x20000be0
 80027ac:	20001398 	.word	0x20001398

080027b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <SystemInit+0x20>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	4a05      	ldr	r2, [pc, #20]	@ (80027d0 <SystemInit+0x20>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <MX_TIM2_Init+0x98>)
 80027f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80027fa:	4b1c      	ldr	r3, [pc, #112]	@ (800286c <MX_TIM2_Init+0x98>)
 80027fc:	224f      	movs	r2, #79	@ 0x4f
 80027fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002800:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <MX_TIM2_Init+0x98>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002806:	4b19      	ldr	r3, [pc, #100]	@ (800286c <MX_TIM2_Init+0x98>)
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280e:	4b17      	ldr	r3, [pc, #92]	@ (800286c <MX_TIM2_Init+0x98>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002814:	4b15      	ldr	r3, [pc, #84]	@ (800286c <MX_TIM2_Init+0x98>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800281a:	4814      	ldr	r0, [pc, #80]	@ (800286c <MX_TIM2_Init+0x98>)
 800281c:	f003 ff74 	bl	8006708 <HAL_TIM_Base_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002826:	f7fe fe3e 	bl	80014a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800282e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4619      	mov	r1, r3
 8002836:	480d      	ldr	r0, [pc, #52]	@ (800286c <MX_TIM2_Init+0x98>)
 8002838:	f004 f919 	bl	8006a6e <HAL_TIM_ConfigClockSource>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002842:	f7fe fe30 	bl	80014a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	@ (800286c <MX_TIM2_Init+0x98>)
 8002854:	f004 fb06 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800285e:	f7fe fe22 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000be4 	.word	0x20000be4

08002870 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <MX_TIM6_Init+0x68>)
 8002882:	4a16      	ldr	r2, [pc, #88]	@ (80028dc <MX_TIM6_Init+0x6c>)
 8002884:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002886:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <MX_TIM6_Init+0x68>)
 8002888:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800288c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <MX_TIM6_Init+0x68>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <MX_TIM6_Init+0x68>)
 8002896:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800289a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <MX_TIM6_Init+0x68>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028a2:	480d      	ldr	r0, [pc, #52]	@ (80028d8 <MX_TIM6_Init+0x68>)
 80028a4:	f003 ff30 	bl	8006708 <HAL_TIM_Base_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80028ae:	f7fe fdfa 	bl	80014a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	@ (80028d8 <MX_TIM6_Init+0x68>)
 80028c0:	f004 fad0 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80028ca:	f7fe fdec 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000c30 	.word	0x20000c30
 80028dc:	40001000 	.word	0x40001000

080028e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f0:	d114      	bne.n	800291c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f2:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fe:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	201c      	movs	r0, #28
 8002910:	f001 fb53 	bl	8003fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002914:	201c      	movs	r0, #28
 8002916:	f001 fb6c 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800291a:	e018      	b.n	800294e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0e      	ldr	r2, [pc, #56]	@ (800295c <HAL_TIM_Base_MspInit+0x7c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d113      	bne.n	800294e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	4a0b      	ldr	r2, [pc, #44]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 800292c:	f043 0310 	orr.w	r3, r3, #16
 8002930:	6593      	str	r3, [r2, #88]	@ 0x58
 8002932:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <HAL_TIM_Base_MspInit+0x78>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2036      	movs	r0, #54	@ 0x36
 8002944:	f001 fb39 	bl	8003fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002948:	2036      	movs	r0, #54	@ 0x36
 800294a:	f001 fb52 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	40001000 	.word	0x40001000

08002960 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002964:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002966:	4a15      	ldr	r2, [pc, #84]	@ (80029bc <MX_USART1_UART_Init+0x5c>)
 8002968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 800296c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0e      	ldr	r3, [pc, #56]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002996:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	@ (80029b8 <MX_USART1_UART_Init+0x58>)
 80029a4:	f004 fae2 	bl	8006f6c <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80029ae:	f7fe fd7a 	bl	80014a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000c7c 	.word	0x20000c7c
 80029bc:	40013800 	.word	0x40013800

080029c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0a2      	sub	sp, #136	@ 0x88
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2260      	movs	r2, #96	@ 0x60
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f00d f96a 	bl	800fcba <memset>
  if(uartHandle->Instance==USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002b28 <HAL_UART_MspInit+0x168>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	f040 8096 	bne.w	8002b1e <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029f6:	2300      	movs	r3, #0
 80029f8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fe00 	bl	8005604 <HAL_RCCEx_PeriphCLKConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a0a:	f7fe fd4c 	bl	80014a6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0e:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	4a46      	ldr	r2, [pc, #280]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a18:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a1a:	4b44      	ldr	r3, [pc, #272]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b41      	ldr	r3, [pc, #260]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	4a40      	ldr	r2, [pc, #256]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a32:	4b3e      	ldr	r3, [pc, #248]	@ (8002b2c <HAL_UART_MspInit+0x16c>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a42:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a52:	2307      	movs	r3, #7
 8002a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a62:	f001 fd6f 	bl	8004544 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8002a66:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a68:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <HAL_UART_MspInit+0x174>)
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002a6c:	4b30      	ldr	r3, [pc, #192]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a6e:	2202      	movs	r2, #2
 8002a70:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a72:	4b2f      	ldr	r3, [pc, #188]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a78:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a84:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8a:	4b29      	ldr	r3, [pc, #164]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a90:	4b27      	ldr	r3, [pc, #156]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a92:	2220      	movs	r2, #32
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a96:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a9e:	4824      	ldr	r0, [pc, #144]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002aa0:	f001 face 	bl	8004040 <HAL_DMA_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002aaa:	f7fe fcfc 	bl	80014a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002ab2:	675a      	str	r2, [r3, #116]	@ 0x74
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_UART_MspInit+0x170>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8002aba:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002abc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_UART_MspInit+0x17c>)
 8002abe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ac8:	2210      	movs	r2, #16
 8002aca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ad4:	2280      	movs	r2, #128	@ 0x80
 8002ad6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ade:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aea:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002af2:	4811      	ldr	r0, [pc, #68]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002af4:	f001 faa4 	bl	8004040 <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002afe:	f7fe fcd2 	bl	80014a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002b06:	671a      	str	r2, [r3, #112]	@ 0x70
 8002b08:	4a0b      	ldr	r2, [pc, #44]	@ (8002b38 <HAL_UART_MspInit+0x178>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2025      	movs	r0, #37	@ 0x25
 8002b14:	f001 fa51 	bl	8003fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b18:	2025      	movs	r0, #37	@ 0x25
 8002b1a:	f001 fa6a 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3788      	adds	r7, #136	@ 0x88
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	20000d04 	.word	0x20000d04
 8002b34:	40020480 	.word	0x40020480
 8002b38:	20000d4c 	.word	0x20000d4c
 8002b3c:	4002046c 	.word	0x4002046c

08002b40 <ASIC_TransmitReceive>:
uint16_t peaklevel;
uint64_t peaktime;
uint8_t result[6];

uint8_t ASIC_TransmitReceive(uint8_t data) //发送接收函数封装
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, 100);
 8002b4a:	f107 020f 	add.w	r2, r7, #15
 8002b4e:	1df9      	adds	r1, r7, #7
 8002b50:	2364      	movs	r3, #100	@ 0x64
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2301      	movs	r3, #1
 8002b56:	4804      	ldr	r0, [pc, #16]	@ (8002b68 <ASIC_TransmitReceive+0x28>)
 8002b58:	f003 f933 	bl	8005dc2 <HAL_SPI_TransmitReceive>
    return rx_data;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200009f8 	.word	0x200009f8

08002b6c <ASIC_CMD>:

void ASIC_CMD(uint8_t address, uint16_t data) //ASIC发送参数到指定地址
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	460a      	mov	r2, r1
 8002b76:	71fb      	strb	r3, [r7, #7]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	80bb      	strh	r3, [r7, #4]
	ASIC_CS_LOW();
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4813      	ldr	r0, [pc, #76]	@ (8002bd0 <ASIC_CMD+0x64>)
 8002b82:	f001 fe71 	bl	8004868 <HAL_GPIO_WritePin>
	ASIC_TransmitReceive(address);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ffd9 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7ff ffd6 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7ff ffd3 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7ff ffd0 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7ff ffcd 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive((data >> 8) & 0xFF);
 8002ba6:	88bb      	ldrh	r3, [r7, #4]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ffc6 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(data & 0xFF);
 8002bb4:	88bb      	ldrh	r3, [r7, #4]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ffc1 	bl	8002b40 <ASIC_TransmitReceive>
	ASIC_CS_HIGH();
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4803      	ldr	r0, [pc, #12]	@ (8002bd0 <ASIC_CMD+0x64>)
 8002bc4:	f001 fe50 	bl	8004868 <HAL_GPIO_WritePin>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	48000400 	.word	0x48000400

08002bd4 <ReadResult>:

HAL_StatusTypeDef ReadResult(void) //读取相关结果
{
 8002bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(EMPTY_GPIO_Port, EMPTY_Pin) == GPIO_PIN_SET)
 8002bda:	2104      	movs	r1, #4
 8002bdc:	482c      	ldr	r0, [pc, #176]	@ (8002c90 <ReadResult+0xbc>)
 8002bde:	f001 fe2b 	bl	8004838 <HAL_GPIO_ReadPin>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <ReadResult+0x18>
	{
		return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04d      	b.n	8002c88 <ReadResult+0xb4>
	}
	else
	{
		ASIC_CS_LOW();
 8002bec:	2200      	movs	r2, #0
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4827      	ldr	r0, [pc, #156]	@ (8002c90 <ReadResult+0xbc>)
 8002bf2:	f001 fe39 	bl	8004868 <HAL_GPIO_WritePin>
		uint16_t i;
		uint8_t address = 0x80;
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	717b      	strb	r3, [r7, #5]
		ASIC_TransmitReceive(address);
 8002bfa:	797b      	ldrb	r3, [r7, #5]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff9f 	bl	8002b40 <ASIC_TransmitReceive>
		for(i = 0;i < 6;i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	80fb      	strh	r3, [r7, #6]
 8002c06:	e00a      	b.n	8002c1e <ReadResult+0x4a>
			result[i] = ASIC_TransmitReceive(0x00);
 8002c08:	88fe      	ldrh	r6, [r7, #6]
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7ff ff98 	bl	8002b40 <ASIC_TransmitReceive>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <ReadResult+0xc0>)
 8002c16:	559a      	strb	r2, [r3, r6]
		for(i = 0;i < 6;i++)
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	80fb      	strh	r3, [r7, #6]
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d9f1      	bls.n	8002c08 <ReadResult+0x34>
		codeid = result[0] >> 3;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <ReadResult+0xc0>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <ReadResult+0xc4>)
 8002c2e:	701a      	strb	r2, [r3, #0]
		peaklevel = (result[1] >> 1) | ((result[0] & 0x07 ) << 7);
 8002c30:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <ReadResult+0xc0>)
 8002c32:	785b      	ldrb	r3, [r3, #1]
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	4b16      	ldr	r3, [pc, #88]	@ (8002c94 <ReadResult+0xc0>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	01db      	lsls	r3, r3, #7
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	f403 7360 	and.w	r3, r3, #896	@ 0x380
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <ReadResult+0xc8>)
 8002c52:	801a      	strh	r2, [r3, #0]
		peaktime = ((result[1] & 0x01) << 32) | (result[2] << 24) | (result[3] << 16) | (result[4] << 8) | result[5];
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <ReadResult+0xc0>)
 8002c56:	789b      	ldrb	r3, [r3, #2]
 8002c58:	061a      	lsls	r2, r3, #24
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <ReadResult+0xc0>)
 8002c5c:	78db      	ldrb	r3, [r3, #3]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	431a      	orrs	r2, r3
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <ReadResult+0xc0>)
 8002c64:	791b      	ldrb	r3, [r3, #4]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <ReadResult+0xc0>)
 8002c6c:	7952      	ldrb	r2, [r2, #5]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	17da      	asrs	r2, r3, #31
 8002c72:	461c      	mov	r4, r3
 8002c74:	4615      	mov	r5, r2
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <ReadResult+0xcc>)
 8002c78:	e9c3 4500 	strd	r4, r5, [r3]
		ASIC_CS_HIGH();
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4803      	ldr	r0, [pc, #12]	@ (8002c90 <ReadResult+0xbc>)
 8002c82:	f001 fdf1 	bl	8004868 <HAL_GPIO_WritePin>
		return HAL_OK;
 8002c86:	2300      	movs	r3, #0
	}
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c90:	48000400 	.word	0x48000400
 8002c94:	20000da0 	.word	0x20000da0
 8002c98:	20000d94 	.word	0x20000d94
 8002c9c:	20000d96 	.word	0x20000d96
 8002ca0:	20000d98 	.word	0x20000d98

08002ca4 <ASIC_RST>:

void ASIC_RST(void) //ASIC芯片复位
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2110      	movs	r1, #16
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cb0:	f001 fdda 	bl	8004868 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002cb4:	2032      	movs	r0, #50	@ 0x32
 8002cb6:	f001 f881 	bl	8003dbc <HAL_Delay>
	HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cc2:	f001 fdd1 	bl	8004868 <HAL_GPIO_WritePin>
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <read_be16>:
void Send_time(void);
void Parameterset_query(void);
void Sendheart(void);

uint16_t read_be16(uint8_t *data) //连续读取两个字节
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
    return (data[0] << 8) | data[1];
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	b29b      	uxth	r3, r3
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <Checksum>:

uint16_t Checksum(uint8_t *data, uint16_t length) //逐字节校检和
{
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]
	uint16_t sum;
    if(length <= 1)
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d804      	bhi.n	8002d12 <Checksum+0x1c>
    {
    	sum = (uint16_t)data[0];
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002d0e:	89fb      	ldrh	r3, [r7, #14]
 8002d10:	e010      	b.n	8002d34 <Checksum+0x3e>
    }
    else
    {
    	sum = (uint16_t)data[length-1]+Checksum(data, length - 1);
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461c      	mov	r4, r3
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffe5 	bl	8002cf6 <Checksum>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4423      	add	r3, r4
 8002d30:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002d32:	89fb      	ldrh	r3, [r7, #14]
    }
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}

08002d3c <CMD_Judge>:

CMD_Status CMD_Judge(void) //按照地址从地到高轮询数组，找到最近的包头和包尾进行判断和处理，没有设计处理参数中如果出现包头包尾的方法，目前如果出现这种情况会直接报错误码舍弃
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
	uint32_t rxcode = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
	uint16_t time;
	uint16_t checksum;
	uint16_t SUM;
	rp1 = rp;
 8002d46:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002efc <CMD_Judge+0x1c0>)
 8002d4c:	6013      	str	r3, [r2, #0]
	rp2 = rp;
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6b      	ldr	r2, [pc, #428]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002d54:	6013      	str	r3, [r2, #0]
	while (wp > rp)
 8002d56:	e02b      	b.n	8002db0 <CMD_Judge+0x74>
	{
		uint16_t test = (*rp << 8) | *(rp + 1);
 8002d58:	4b67      	ldr	r3, [pc, #412]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	4b64      	ldr	r3, [pc, #400]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	80fb      	strh	r3, [r7, #6]
		if(test == HEAD)
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d103      	bne.n	8002d86 <CMD_Judge+0x4a>
			rp1 = rp;
 8002d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5e      	ldr	r2, [pc, #376]	@ (8002efc <CMD_Judge+0x1c0>)
 8002d84:	6013      	str	r3, [r2, #0]
		if(test == TAIL)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	f647 62fe 	movw	r2, #32510	@ 0x7efe
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d104      	bne.n	8002d9a <CMD_Judge+0x5e>
			rp2 = rp + 1;
 8002d90:	4b59      	ldr	r3, [pc, #356]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	4a5a      	ldr	r2, [pc, #360]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002d98:	6013      	str	r3, [r2, #0]
		rp++;
 8002d9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a55      	ldr	r2, [pc, #340]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002da2:	6013      	str	r3, [r2, #0]
		if(rp2 > rp1)
 8002da4:	4b56      	ldr	r3, [pc, #344]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b54      	ldr	r3, [pc, #336]	@ (8002efc <CMD_Judge+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d806      	bhi.n	8002dbe <CMD_Judge+0x82>
	while (wp > rp)
 8002db0:	4b54      	ldr	r3, [pc, #336]	@ (8002f04 <CMD_Judge+0x1c8>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b50      	ldr	r3, [pc, #320]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d8cd      	bhi.n	8002d58 <CMD_Judge+0x1c>
 8002dbc:	e000      	b.n	8002dc0 <CMD_Judge+0x84>
			break;
 8002dbe:	bf00      	nop
	}
	if(rp == wp)
 8002dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <CMD_Judge+0x1bc>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8002f04 <CMD_Judge+0x1c8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d104      	bne.n	8002dd6 <CMD_Judge+0x9a>
	{
		data_ready = 0;
 8002dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8002f08 <CMD_Judge+0x1cc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	801a      	strh	r2, [r3, #0]
		return CMD_END;
 8002dd2:	2306      	movs	r3, #6
 8002dd4:	e08c      	b.n	8002ef0 <CMD_Judge+0x1b4>
	}
	for(uint16_t i = 3;i <= 4;i++)
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	e012      	b.n	8002e02 <CMD_Judge+0xc6>
		rxcode = (*(rp1 + i) << (32 - 8*i)) | rxcode;
 8002ddc:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <CMD_Judge+0x1c0>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	893b      	ldrh	r3, [r7, #8]
 8002dea:	f1c3 0304 	rsb	r3, r3, #4
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 3;i <= 4;i++)
 8002dfc:	893b      	ldrh	r3, [r7, #8]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	813b      	strh	r3, [r7, #8]
 8002e02:	893b      	ldrh	r3, [r7, #8]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d9e9      	bls.n	8002ddc <CMD_Judge+0xa0>
	datalength = *(rp1 + 7);
 8002e08:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	79da      	ldrb	r2, [r3, #7]
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f0c <CMD_Judge+0x1d0>)
 8002e10:	701a      	strb	r2, [r3, #0]
	for(time = 0;time < cmd_number;time++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	e01b      	b.n	8002e50 <CMD_Judge+0x114>
	{
		command = (*(rp1 + 5)<< 8) | *(rp1 + 6);
 8002e18:	4b38      	ldr	r3, [pc, #224]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3305      	adds	r3, #5
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	4b35      	ldr	r3, [pc, #212]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3306      	adds	r3, #6
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	4b36      	ldr	r3, [pc, #216]	@ (8002f10 <CMD_Judge+0x1d4>)
 8002e38:	801a      	strh	r2, [r3, #0]
		if(command == cmd[time])
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	@ (8002f14 <CMD_Judge+0x1d8>)
 8002e3e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002e42:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <CMD_Judge+0x1d4>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d006      	beq.n	8002e58 <CMD_Judge+0x11c>
	for(time = 0;time < cmd_number;time++)
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	817b      	strh	r3, [r7, #10]
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d9e0      	bls.n	8002e18 <CMD_Judge+0xdc>
 8002e56:	e000      	b.n	8002e5a <CMD_Judge+0x11e>
			break;
 8002e58:	bf00      	nop
	}
	checksum = (*(rp2 - 3) << 8) | *(rp2 - 2);
 8002e5a:	4b29      	ldr	r3, [pc, #164]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3b03      	subs	r3, #3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3b02      	subs	r3, #2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	b21b      	sxth	r3, r3
 8002e76:	80bb      	strh	r3, [r7, #4]
	rp3 = rp1 + 8;
 8002e78:	4b20      	ldr	r3, [pc, #128]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	4a26      	ldr	r2, [pc, #152]	@ (8002f18 <CMD_Judge+0x1dc>)
 8002e80:	6013      	str	r3, [r2, #0]
	SUM = Checksum(rp1 + 2, datalength + 6);
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <CMD_Judge+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3302      	adds	r3, #2
 8002e88:	4a20      	ldr	r2, [pc, #128]	@ (8002f0c <CMD_Judge+0x1d0>)
 8002e8a:	7812      	ldrb	r2, [r2, #0]
 8002e8c:	3206      	adds	r2, #6
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff2f 	bl	8002cf6 <Checksum>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	807b      	strh	r3, [r7, #2]
	if(rxcode != receivercode || *(rp1 + 2) != version)
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <CMD_Judge+0x1e0>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d107      	bne.n	8002eba <CMD_Judge+0x17e>
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <CMD_Judge+0x1c0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3302      	adds	r3, #2
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <CMD_Judge+0x1e4>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <CMD_Judge+0x182>
		return CODE_ERROE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e018      	b.n	8002ef0 <CMD_Judge+0x1b4>
	else if(datalength != rp2 - rp1 - 11)
 8002ebe:	4b13      	ldr	r3, [pc, #76]	@ (8002f0c <CMD_Judge+0x1d0>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <CMD_Judge+0x1c4>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <CMD_Judge+0x1c0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	3b0b      	subs	r3, #11
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d001      	beq.n	8002ed8 <CMD_Judge+0x19c>
		return LENGTH_ERROE;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e00b      	b.n	8002ef0 <CMD_Judge+0x1b4>
	else if(time >= cmd_number)
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d901      	bls.n	8002ee2 <CMD_Judge+0x1a6>
		return CMD_ERROR;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e006      	b.n	8002ef0 <CMD_Judge+0x1b4>
	else if(checksum != SUM)
 8002ee2:	88ba      	ldrh	r2, [r7, #4]
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <CMD_Judge+0x1b2>
		return CHECK_ERROR;
 8002eea:	2304      	movs	r3, #4
 8002eec:	e000      	b.n	8002ef0 <CMD_Judge+0x1b4>
	else
		return CMD_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	2000001c 	.word	0x2000001c
 8002efc:	200011ac 	.word	0x200011ac
 8002f00:	200011b0 	.word	0x200011b0
 8002f04:	20000018 	.word	0x20000018
 8002f08:	2000053e 	.word	0x2000053e
 8002f0c:	200011b8 	.word	0x200011b8
 8002f10:	200011a8 	.word	0x200011a8
 8002f14:	20000024 	.word	0x20000024
 8002f18:	200011b4 	.word	0x200011b4
 8002f1c:	20000022 	.word	0x20000022
 8002f20:	20000020 	.word	0x20000020

08002f24 <CMD_Execute>:

CMD_Status CMD_Execute(void) //判断命令内容和处理
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	if(command == cmd1)
 8002f28:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <CMD_Execute+0x8c>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d124      	bne.n	8002f7a <CMD_Execute+0x56>
	{
		if(datalength == 0x01 && *rp3 == 0x01)
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <CMD_Execute+0x90>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10b      	bne.n	8002f50 <CMD_Execute+0x2c>
 8002f38:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb8 <CMD_Execute+0x94>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d106      	bne.n	8002f50 <CMD_Execute+0x2c>
		{
			Sampling();
 8002f42:	f000 f83d 	bl	8002fc0 <Sampling>
			sampling_ready = 0;
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <CMD_Execute+0x98>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e02d      	b.n	8002fac <CMD_Execute+0x88>
		}
		else if(datalength == 0x01 && *rp3 == 0)
 8002f50:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <CMD_Execute+0x90>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10e      	bne.n	8002f76 <CMD_Execute+0x52>
 8002f58:	4b17      	ldr	r3, [pc, #92]	@ (8002fb8 <CMD_Execute+0x94>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <CMD_Execute+0x52>
		{
			Sampling();
 8002f62:	f000 f82d 	bl	8002fc0 <Sampling>
			HAL_Delay(100);
 8002f66:	2064      	movs	r0, #100	@ 0x64
 8002f68:	f000 ff28 	bl	8003dbc <HAL_Delay>
			sampling_ready = 1;
 8002f6c:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <CMD_Execute+0x98>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e01a      	b.n	8002fac <CMD_Execute+0x88>
		}
		else
			return INVALID;
 8002f76:	2305      	movs	r3, #5
 8002f78:	e018      	b.n	8002fac <CMD_Execute+0x88>
	}
	else if(command == cmd3)
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb0 <CMD_Execute+0x8c>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d103      	bne.n	8002f8a <CMD_Execute+0x66>
	{
		Parameterset_query();
 8002f82:	f000 f905 	bl	8003190 <Parameterset_query>
		return CMD_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e010      	b.n	8002fac <CMD_Execute+0x88>
	}
	else if(command == cmd4)
 8002f8a:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <CMD_Execute+0x8c>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d109      	bne.n	8002fa6 <CMD_Execute+0x82>
	{
		if(datalength != 0x00)
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <CMD_Execute+0x90>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <CMD_Execute+0x7a>
			return INVALID;
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	e006      	b.n	8002fac <CMD_Execute+0x88>
		else
		{
			Parameterset_query();
 8002f9e:	f000 f8f7 	bl	8003190 <Parameterset_query>
			return CMD_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e002      	b.n	8002fac <CMD_Execute+0x88>
		}
	}
	else
	{
		Send_time();
 8002fa6:	f000 fb85 	bl	80036b4 <Send_time>
		return CMD_OK;
 8002faa:	2300      	movs	r3, #0
	}
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200011a8 	.word	0x200011a8
 8002fb4:	200011b8 	.word	0x200011b8
 8002fb8:	200011b4 	.word	0x200011b4
 8002fbc:	2000002e 	.word	0x2000002e

08002fc0 <Sampling>:

void Sampling(void) //发送采样相关的应答命令
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
	uint16_t length =  rp2 - rp1 + 1;
 8002fc6:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <Sampling+0xa8>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b28      	ldr	r3, [pc, #160]	@ (800306c <Sampling+0xac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	807b      	strh	r3, [r7, #2]
	uint16_t SUM;
	for(uint16_t i = 0;i < length;i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	80bb      	strh	r3, [r7, #4]
 8002fda:	e033      	b.n	8003044 <Sampling+0x84>
	{
		if(i == 5)
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d104      	bne.n	8002fec <Sampling+0x2c>
			tx_buffer[i] = 0x01;
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	4a22      	ldr	r2, [pc, #136]	@ (8003070 <Sampling+0xb0>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	54d1      	strb	r1, [r2, r3]
 8002fea:	e028      	b.n	800303e <Sampling+0x7e>
		else if(i == length - 4)
 8002fec:	88ba      	ldrh	r2, [r7, #4]
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	3b04      	subs	r3, #4
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d110      	bne.n	8003018 <Sampling+0x58>
		{
			SUM = Checksum(&tx_buffer[2], i - 2);
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	3b02      	subs	r3, #2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	481d      	ldr	r0, [pc, #116]	@ (8003074 <Sampling+0xb4>)
 8003000:	f7ff fe79 	bl	8002cf6 <Checksum>
 8003004:	4603      	mov	r3, r0
 8003006:	80fb      	strh	r3, [r7, #6]
			tx_buffer[i] = (SUM >> 8) & 0xFF;
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	b29a      	uxth	r2, r3
 800300e:	88bb      	ldrh	r3, [r7, #4]
 8003010:	b2d1      	uxtb	r1, r2
 8003012:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <Sampling+0xb0>)
 8003014:	54d1      	strb	r1, [r2, r3]
 8003016:	e012      	b.n	800303e <Sampling+0x7e>
		}
		else if(i == length - 3)
 8003018:	88ba      	ldrh	r2, [r7, #4]
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	3b03      	subs	r3, #3
 800301e:	429a      	cmp	r2, r3
 8003020:	d105      	bne.n	800302e <Sampling+0x6e>
			tx_buffer[i] = SUM & 0xFF;
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	b2d1      	uxtb	r1, r2
 8003028:	4a11      	ldr	r2, [pc, #68]	@ (8003070 <Sampling+0xb0>)
 800302a:	54d1      	strb	r1, [r2, r3]
 800302c:	e007      	b.n	800303e <Sampling+0x7e>
		else
			tx_buffer[i] = *(rp1 + i);
 800302e:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <Sampling+0xac>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	88bb      	ldrh	r3, [r7, #4]
 8003034:	441a      	add	r2, r3
 8003036:	88bb      	ldrh	r3, [r7, #4]
 8003038:	7811      	ldrb	r1, [r2, #0]
 800303a:	4a0d      	ldr	r2, [pc, #52]	@ (8003070 <Sampling+0xb0>)
 800303c:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i < length;i++)
 800303e:	88bb      	ldrh	r3, [r7, #4]
 8003040:	3301      	adds	r3, #1
 8003042:	80bb      	strh	r3, [r7, #4]
 8003044:	88ba      	ldrh	r2, [r7, #4]
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3c7      	bcc.n	8002fdc <Sampling+0x1c>
	}
	txstate = 1;
 800304c:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <Sampling+0xb8>)
 800304e:	2201      	movs	r2, #1
 8003050:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	461a      	mov	r2, r3
 8003056:	4906      	ldr	r1, [pc, #24]	@ (8003070 <Sampling+0xb0>)
 8003058:	4808      	ldr	r0, [pc, #32]	@ (800307c <Sampling+0xbc>)
 800305a:	f004 f85f 	bl	800711c <HAL_UART_Transmit_DMA>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200011b0 	.word	0x200011b0
 800306c:	200011ac 	.word	0x200011ac
 8003070:	200004bc 	.word	0x200004bc
 8003074:	200004be 	.word	0x200004be
 8003078:	200011da 	.word	0x200011da
 800307c:	20000c7c 	.word	0x20000c7c

08003080 <update_config_value>:

void update_config_value(char *config_buf, const char *key, int new_value) //更新配置文件内容
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b0ac      	sub	sp, #176	@ 0xb0
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
    char *ptr = strstr(config_buf, key);
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f00c fe2d 	bl	800fcee <strstr>
 8003094:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (ptr == NULL)
 8003098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d06e      	beq.n	800317e <update_config_value+0xfe>
    {
        return;
    }
    char *value_start = ptr + strlen(key);
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f7fd f8f5 	bl	8000290 <strlen>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030ac:	4413      	add	r3, r2
 80030ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    char *line_end = value_start;
 80030b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (*line_end != '\0' && *line_end != '\n')
 80030ba:	e004      	b.n	80030c6 <update_config_value+0x46>
    {
        line_end++;
 80030bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030c0:	3301      	adds	r3, #1
 80030c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    while (*line_end != '\0' && *line_end != '\n')
 80030c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <update_config_value+0x5a>
 80030d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b0a      	cmp	r3, #10
 80030d8:	d1f0      	bne.n	80030bc <update_config_value+0x3c>
    }
    char new_line[128];
    snprintf(new_line, sizeof(new_line), "%s%d", key, new_value);
 80030da:	f107 0014 	add.w	r0, r7, #20
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4a28      	ldr	r2, [pc, #160]	@ (8003188 <update_config_value+0x108>)
 80030e6:	2180      	movs	r1, #128	@ 0x80
 80030e8:	f00c fd32 	bl	800fb50 <sniprintf>
    size_t new_line_len = strlen(new_line);
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd f8cd 	bl	8000290 <strlen>
 80030f6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    size_t tail_len = strlen(line_end);
 80030fa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80030fe:	f7fd f8c7 	bl	8000290 <strlen>
 8003102:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    memmove(ptr + new_line_len, line_end, tail_len);
 8003106:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800310a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800310e:	4413      	add	r3, r2
 8003110:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003114:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003118:	4618      	mov	r0, r3
 800311a:	f00c fdb4 	bl	800fc86 <memmove>
    memcpy(ptr, new_line, new_line_len);
 800311e:	f107 0314 	add.w	r3, r7, #20
 8003122:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003126:	4619      	mov	r1, r3
 8003128:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800312c:	f00c fe7d 	bl	800fe2a <memcpy>
    if(strcmp(key, "PKWND=") == 0)
 8003130:	4916      	ldr	r1, [pc, #88]	@ (800318c <update_config_value+0x10c>)
 8003132:	68b8      	ldr	r0, [r7, #8]
 8003134:	f7fd f84c 	bl	80001d0 <strcmp>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d120      	bne.n	8003180 <update_config_value+0x100>
    {
    	ptr = strstr(config_buf, key);
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f00c fdd4 	bl	800fcee <strstr>
 8003146:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    	line_end = ptr + strlen(key);
 800314a:	68b8      	ldr	r0, [r7, #8]
 800314c:	f7fd f8a0 	bl	8000290 <strlen>
 8003150:	4602      	mov	r2, r0
 8003152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003156:	4413      	add	r3, r2
 8003158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    	while (*line_end != '\n')
 800315c:	e004      	b.n	8003168 <update_config_value+0xe8>
		{
			line_end++;
 800315e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003162:	3301      	adds	r3, #1
 8003164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    	while (*line_end != '\n')
 8003168:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b0a      	cmp	r3, #10
 8003170:	d1f5      	bne.n	800315e <update_config_value+0xde>
		}
    	*(line_end + 1) = '\0';
 8003172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003176:	3301      	adds	r3, #1
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e000      	b.n	8003180 <update_config_value+0x100>
        return;
 800317e:	bf00      	nop
    }
}
 8003180:	37a8      	adds	r7, #168	@ 0xa8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	080132c8 	.word	0x080132c8
 800318c:	080132d0 	.word	0x080132d0

08003190 <Parameterset_query>:

void Parameterset_query(void) //参数设置查询函数
{
 8003190:	b580      	push	{r7, lr}
 8003192:	f5ad 7d3c 	sub.w	sp, sp, #752	@ 0x2f0
 8003196:	af00      	add	r7, sp, #0
	uint16_t SUM;
	if(command == cmd3)
 8003198:	4b73      	ldr	r3, [pc, #460]	@ (8003368 <Parameterset_query+0x1d8>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	2b03      	cmp	r3, #3
 800319e:	f040 809a 	bne.w	80032d6 <Parameterset_query+0x146>
	{
		uint16_t code = (*rp3 << 8) | *(rp3 + 1);
 80031a2:	4b72      	ldr	r3, [pc, #456]	@ (800336c <Parameterset_query+0x1dc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	b21a      	sxth	r2, r3
 80031ae:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <Parameterset_query+0x1dc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	f8a7 32ec 	strh.w	r3, [r7, #748]	@ 0x2ec
		receivercode = code;
 80031c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003370 <Parameterset_query+0x1e0>)
 80031c2:	f8b7 32ec 	ldrh.w	r3, [r7, #748]	@ 0x2ec
 80031c6:	8013      	strh	r3, [r2, #0]
		PEAKTH = read_be16(rp3 + 2);
 80031c8:	4b68      	ldr	r3, [pc, #416]	@ (800336c <Parameterset_query+0x1dc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3302      	adds	r3, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fd7b 	bl	8002cca <read_be16>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b66      	ldr	r3, [pc, #408]	@ (8003374 <Parameterset_query+0x1e4>)
 80031da:	801a      	strh	r2, [r3, #0]
		ALMSTTH = read_be16(rp3 + 4);
 80031dc:	4b63      	ldr	r3, [pc, #396]	@ (800336c <Parameterset_query+0x1dc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fd71 	bl	8002cca <read_be16>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b62      	ldr	r3, [pc, #392]	@ (8003378 <Parameterset_query+0x1e8>)
 80031ee:	801a      	strh	r2, [r3, #0]
		PKWND = read_be16(rp3 + 6);
 80031f0:	4b5e      	ldr	r3, [pc, #376]	@ (800336c <Parameterset_query+0x1dc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3306      	adds	r3, #6
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fd67 	bl	8002cca <read_be16>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4b5e      	ldr	r3, [pc, #376]	@ (800337c <Parameterset_query+0x1ec>)
 8003202:	801a      	strh	r2, [r3, #0]
		ASIC_RST();
 8003204:	f7ff fd4e 	bl	8002ca4 <ASIC_RST>
		ASIC_CMD(0x01, PEAKTH);
 8003208:	4b5a      	ldr	r3, [pc, #360]	@ (8003374 <Parameterset_query+0x1e4>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	2001      	movs	r0, #1
 8003210:	f7ff fcac 	bl	8002b6c <ASIC_CMD>
		ASIC_CMD(0x02, ALMSTTH);
 8003214:	4b58      	ldr	r3, [pc, #352]	@ (8003378 <Parameterset_query+0x1e8>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	2002      	movs	r0, #2
 800321c:	f7ff fca6 	bl	8002b6c <ASIC_CMD>
		ASIC_CMD(0x04, PKWND);
 8003220:	4b56      	ldr	r3, [pc, #344]	@ (800337c <Parameterset_query+0x1ec>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	4619      	mov	r1, r3
 8003226:	2004      	movs	r0, #4
 8003228:	f7ff fca0 	bl	8002b6c <ASIC_CMD>
		char config_buf[128];
		FIL fil;
		UINT bytes_written;
		if(read_config(config_buf, sizeof(config_buf)) == FR_OK)
 800322c:	463b      	mov	r3, r7
 800322e:	2180      	movs	r1, #128	@ 0x80
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe fd5f 	bl	8001cf4 <read_config>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d120      	bne.n	800327e <Parameterset_query+0xee>
		{
			update_config_value(config_buf, "Receivercode=", receivercode);
 800323c:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <Parameterset_query+0x1e0>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	463b      	mov	r3, r7
 8003246:	494e      	ldr	r1, [pc, #312]	@ (8003380 <Parameterset_query+0x1f0>)
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff19 	bl	8003080 <update_config_value>
			update_config_value(config_buf, "PEAKTH=", PEAKTH);
 800324e:	4b49      	ldr	r3, [pc, #292]	@ (8003374 <Parameterset_query+0x1e4>)
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	463b      	mov	r3, r7
 8003256:	494b      	ldr	r1, [pc, #300]	@ (8003384 <Parameterset_query+0x1f4>)
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff11 	bl	8003080 <update_config_value>
			update_config_value(config_buf, "ALMSTTH=", ALMSTTH);
 800325e:	4b46      	ldr	r3, [pc, #280]	@ (8003378 <Parameterset_query+0x1e8>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	463b      	mov	r3, r7
 8003266:	4948      	ldr	r1, [pc, #288]	@ (8003388 <Parameterset_query+0x1f8>)
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff09 	bl	8003080 <update_config_value>
			update_config_value(config_buf, "PKWND=", PKWND);
 800326e:	4b43      	ldr	r3, [pc, #268]	@ (800337c <Parameterset_query+0x1ec>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	463b      	mov	r3, r7
 8003276:	4945      	ldr	r1, [pc, #276]	@ (800338c <Parameterset_query+0x1fc>)
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff01 	bl	8003080 <update_config_value>
		}
		f_open(&fil, CONFIG_FILE, FA_OPEN_ALWAYS | FA_WRITE);
 800327e:	4b44      	ldr	r3, [pc, #272]	@ (8003390 <Parameterset_query+0x200>)
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003286:	2212      	movs	r2, #18
 8003288:	4618      	mov	r0, r3
 800328a:	f009 f8cf 	bl	800c42c <f_open>
		f_write(&fil, config_buf, strlen(config_buf), &bytes_written);
 800328e:	463b      	mov	r3, r7
 8003290:	4618      	mov	r0, r3
 8003292:	f7fc fffd 	bl	8000290 <strlen>
 8003296:	4602      	mov	r2, r0
 8003298:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 800329c:	4639      	mov	r1, r7
 800329e:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80032a2:	f009 fd15 	bl	800ccd0 <f_write>
		f_close(&fil);
 80032a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80032aa:	4618      	mov	r0, r3
 80032ac:	f009 fff6 	bl	800d29c <f_close>
		tx_buffer[rp3 - rp1 + 8] = 0x7E;
 80032b0:	4b2e      	ldr	r3, [pc, #184]	@ (800336c <Parameterset_query+0x1dc>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b37      	ldr	r3, [pc, #220]	@ (8003394 <Parameterset_query+0x204>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	3308      	adds	r3, #8
 80032bc:	4a36      	ldr	r2, [pc, #216]	@ (8003398 <Parameterset_query+0x208>)
 80032be:	217e      	movs	r1, #126	@ 0x7e
 80032c0:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 9] = 0xFE;
 80032c2:	4b2a      	ldr	r3, [pc, #168]	@ (800336c <Parameterset_query+0x1dc>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b33      	ldr	r3, [pc, #204]	@ (8003394 <Parameterset_query+0x204>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	3309      	adds	r3, #9
 80032ce:	4a32      	ldr	r2, [pc, #200]	@ (8003398 <Parameterset_query+0x208>)
 80032d0:	21fe      	movs	r1, #254	@ 0xfe
 80032d2:	54d1      	strb	r1, [r2, r3]
 80032d4:	e043      	b.n	800335e <Parameterset_query+0x1ce>
	}
	else
	{
		ReadResult();
 80032d6:	f7ff fc7d 	bl	8002bd4 <ReadResult>
		tx_buffer[rp3 - rp1 + 6] = (FREQ >> 8) & 0xFF;
 80032da:	4b30      	ldr	r3, [pc, #192]	@ (800339c <Parameterset_query+0x20c>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	b299      	uxth	r1, r3
 80032e2:	4b22      	ldr	r3, [pc, #136]	@ (800336c <Parameterset_query+0x1dc>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <Parameterset_query+0x204>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	3306      	adds	r3, #6
 80032ee:	b2c9      	uxtb	r1, r1
 80032f0:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <Parameterset_query+0x208>)
 80032f2:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 7] = FREQ & 0xFF;
 80032f4:	4b29      	ldr	r3, [pc, #164]	@ (800339c <Parameterset_query+0x20c>)
 80032f6:	8819      	ldrh	r1, [r3, #0]
 80032f8:	4b1c      	ldr	r3, [pc, #112]	@ (800336c <Parameterset_query+0x1dc>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b25      	ldr	r3, [pc, #148]	@ (8003394 <Parameterset_query+0x204>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	3307      	adds	r3, #7
 8003304:	b2c9      	uxtb	r1, r1
 8003306:	4a24      	ldr	r2, [pc, #144]	@ (8003398 <Parameterset_query+0x208>)
 8003308:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 8] = (firmware >> 8) & 0xFF;
 800330a:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <Parameterset_query+0x210>)
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	b299      	uxth	r1, r3
 8003312:	4b16      	ldr	r3, [pc, #88]	@ (800336c <Parameterset_query+0x1dc>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <Parameterset_query+0x204>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	3308      	adds	r3, #8
 800331e:	b2c9      	uxtb	r1, r1
 8003320:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <Parameterset_query+0x208>)
 8003322:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 9] = firmware & 0xFF;
 8003324:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <Parameterset_query+0x210>)
 8003326:	8819      	ldrh	r1, [r3, #0]
 8003328:	4b10      	ldr	r3, [pc, #64]	@ (800336c <Parameterset_query+0x1dc>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <Parameterset_query+0x204>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	3309      	adds	r3, #9
 8003334:	b2c9      	uxtb	r1, r1
 8003336:	4a18      	ldr	r2, [pc, #96]	@ (8003398 <Parameterset_query+0x208>)
 8003338:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 12] = 0x7E;
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <Parameterset_query+0x1dc>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <Parameterset_query+0x204>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	330c      	adds	r3, #12
 8003346:	4a14      	ldr	r2, [pc, #80]	@ (8003398 <Parameterset_query+0x208>)
 8003348:	217e      	movs	r1, #126	@ 0x7e
 800334a:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 13] = 0xFE;
 800334c:	4b07      	ldr	r3, [pc, #28]	@ (800336c <Parameterset_query+0x1dc>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <Parameterset_query+0x204>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	330d      	adds	r3, #13
 8003358:	4a0f      	ldr	r2, [pc, #60]	@ (8003398 <Parameterset_query+0x208>)
 800335a:	21fe      	movs	r1, #254	@ 0xfe
 800335c:	54d1      	strb	r1, [r2, r3]
	}
	for(uint16_t i = 0;i < rp3 - rp1 + 6;i++)
 800335e:	2300      	movs	r3, #0
 8003360:	f8a7 32ee 	strh.w	r3, [r7, #750]	@ 0x2ee
 8003364:	e0bc      	b.n	80034e0 <Parameterset_query+0x350>
 8003366:	bf00      	nop
 8003368:	200011a8 	.word	0x200011a8
 800336c:	200011b4 	.word	0x200011b4
 8003370:	20000022 	.word	0x20000022
 8003374:	20000010 	.word	0x20000010
 8003378:	20000012 	.word	0x20000012
 800337c:	20000014 	.word	0x20000014
 8003380:	080132d8 	.word	0x080132d8
 8003384:	080132e8 	.word	0x080132e8
 8003388:	080132f0 	.word	0x080132f0
 800338c:	080132d0 	.word	0x080132d0
 8003390:	20000000 	.word	0x20000000
 8003394:	200011ac 	.word	0x200011ac
 8003398:	200004bc 	.word	0x200004bc
 800339c:	20000032 	.word	0x20000032
 80033a0:	2000002c 	.word	0x2000002c
	{
		if(i < rp3 - rp1)
 80033a4:	f8b7 22ee 	ldrh.w	r2, [r7, #750]	@ 0x2ee
 80033a8:	4b7f      	ldr	r3, [pc, #508]	@ (80035a8 <Parameterset_query+0x418>)
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	4b7f      	ldr	r3, [pc, #508]	@ (80035ac <Parameterset_query+0x41c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	1acb      	subs	r3, r1, r3
 80033b2:	429a      	cmp	r2, r3
 80033b4:	da09      	bge.n	80033ca <Parameterset_query+0x23a>
			tx_buffer[i] = *(rp1 + i);
 80033b6:	4b7d      	ldr	r3, [pc, #500]	@ (80035ac <Parameterset_query+0x41c>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033be:	441a      	add	r2, r3
 80033c0:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033c4:	7811      	ldrb	r1, [r2, #0]
 80033c6:	4a7a      	ldr	r2, [pc, #488]	@ (80035b0 <Parameterset_query+0x420>)
 80033c8:	54d1      	strb	r1, [r2, r3]
		if(command == cmd3)
 80033ca:	4b7a      	ldr	r3, [pc, #488]	@ (80035b4 <Parameterset_query+0x424>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d11b      	bne.n	800340a <Parameterset_query+0x27a>
		{
			if(i >= 3 && i <= 4)
 80033d2:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d90e      	bls.n	80033f8 <Parameterset_query+0x268>
 80033da:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d80a      	bhi.n	80033f8 <Parameterset_query+0x268>
				tx_buffer[i] = *(rp3 + i - 3);
 80033e2:	4b71      	ldr	r3, [pc, #452]	@ (80035a8 <Parameterset_query+0x418>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033ea:	3b03      	subs	r3, #3
 80033ec:	441a      	add	r2, r3
 80033ee:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033f2:	7811      	ldrb	r1, [r2, #0]
 80033f4:	4a6e      	ldr	r2, [pc, #440]	@ (80035b0 <Parameterset_query+0x420>)
 80033f6:	54d1      	strb	r1, [r2, r3]
			if(i == 7)
 80033f8:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	d104      	bne.n	800340a <Parameterset_query+0x27a>
				tx_buffer[i] = 0x06;
 8003400:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003404:	4a6a      	ldr	r2, [pc, #424]	@ (80035b0 <Parameterset_query+0x420>)
 8003406:	2106      	movs	r1, #6
 8003408:	54d1      	strb	r1, [r2, r3]
		}
		if(command == cmd4 && i == 7)
 800340a:	4b6a      	ldr	r3, [pc, #424]	@ (80035b4 <Parameterset_query+0x424>)
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d108      	bne.n	8003424 <Parameterset_query+0x294>
 8003412:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003416:	2b07      	cmp	r3, #7
 8003418:	d104      	bne.n	8003424 <Parameterset_query+0x294>
			tx_buffer[i] = 0x0A;
 800341a:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 800341e:	4a64      	ldr	r2, [pc, #400]	@ (80035b0 <Parameterset_query+0x420>)
 8003420:	210a      	movs	r1, #10
 8003422:	54d1      	strb	r1, [r2, r3]
		if(i == 5)
 8003424:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003428:	2b05      	cmp	r3, #5
 800342a:	d104      	bne.n	8003436 <Parameterset_query+0x2a6>
			tx_buffer[i] = 0x01;
 800342c:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003430:	4a5f      	ldr	r2, [pc, #380]	@ (80035b0 <Parameterset_query+0x420>)
 8003432:	2101      	movs	r1, #1
 8003434:	54d1      	strb	r1, [r2, r3]
		if(i == rp3 - rp1)
 8003436:	f8b7 22ee 	ldrh.w	r2, [r7, #750]	@ 0x2ee
 800343a:	4b5b      	ldr	r3, [pc, #364]	@ (80035a8 <Parameterset_query+0x418>)
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	4b5b      	ldr	r3, [pc, #364]	@ (80035ac <Parameterset_query+0x41c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1acb      	subs	r3, r1, r3
 8003444:	429a      	cmp	r2, r3
 8003446:	d110      	bne.n	800346a <Parameterset_query+0x2da>
		{
			tx_buffer[i] = (PEAKTH >> 8) & 0xFF;
 8003448:	4b5b      	ldr	r3, [pc, #364]	@ (80035b8 <Parameterset_query+0x428>)
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	b29a      	uxth	r2, r3
 8003450:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003454:	b2d1      	uxtb	r1, r2
 8003456:	4a56      	ldr	r2, [pc, #344]	@ (80035b0 <Parameterset_query+0x420>)
 8003458:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = PEAKTH & 0xFF;
 800345a:	4b57      	ldr	r3, [pc, #348]	@ (80035b8 <Parameterset_query+0x428>)
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003462:	3301      	adds	r3, #1
 8003464:	b2d1      	uxtb	r1, r2
 8003466:	4a52      	ldr	r2, [pc, #328]	@ (80035b0 <Parameterset_query+0x420>)
 8003468:	54d1      	strb	r1, [r2, r3]
		}
		if(i == rp3 - rp1 + 2)
 800346a:	f8b7 22ee 	ldrh.w	r2, [r7, #750]	@ 0x2ee
 800346e:	4b4e      	ldr	r3, [pc, #312]	@ (80035a8 <Parameterset_query+0x418>)
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	4b4e      	ldr	r3, [pc, #312]	@ (80035ac <Parameterset_query+0x41c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	1acb      	subs	r3, r1, r3
 8003478:	3302      	adds	r3, #2
 800347a:	429a      	cmp	r2, r3
 800347c:	d110      	bne.n	80034a0 <Parameterset_query+0x310>
		{
			tx_buffer[i] = (ALMSTTH >> 8) & 0xFF;
 800347e:	4b4f      	ldr	r3, [pc, #316]	@ (80035bc <Parameterset_query+0x42c>)
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	b29a      	uxth	r2, r3
 8003486:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 800348a:	b2d1      	uxtb	r1, r2
 800348c:	4a48      	ldr	r2, [pc, #288]	@ (80035b0 <Parameterset_query+0x420>)
 800348e:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = ALMSTTH & 0xFF;
 8003490:	4b4a      	ldr	r3, [pc, #296]	@ (80035bc <Parameterset_query+0x42c>)
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 8003498:	3301      	adds	r3, #1
 800349a:	b2d1      	uxtb	r1, r2
 800349c:	4a44      	ldr	r2, [pc, #272]	@ (80035b0 <Parameterset_query+0x420>)
 800349e:	54d1      	strb	r1, [r2, r3]
		}
		if(i == rp3 - rp1 + 4)
 80034a0:	f8b7 22ee 	ldrh.w	r2, [r7, #750]	@ 0x2ee
 80034a4:	4b40      	ldr	r3, [pc, #256]	@ (80035a8 <Parameterset_query+0x418>)
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	4b40      	ldr	r3, [pc, #256]	@ (80035ac <Parameterset_query+0x41c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1acb      	subs	r3, r1, r3
 80034ae:	3304      	adds	r3, #4
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d110      	bne.n	80034d6 <Parameterset_query+0x346>
		{
			tx_buffer[i] = (PKWND >> 8) & 0xFF;
 80034b4:	4b42      	ldr	r3, [pc, #264]	@ (80035c0 <Parameterset_query+0x430>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80034c0:	b2d1      	uxtb	r1, r2
 80034c2:	4a3b      	ldr	r2, [pc, #236]	@ (80035b0 <Parameterset_query+0x420>)
 80034c4:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = PKWND & 0xFF;
 80034c6:	4b3e      	ldr	r3, [pc, #248]	@ (80035c0 <Parameterset_query+0x430>)
 80034c8:	881a      	ldrh	r2, [r3, #0]
 80034ca:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80034ce:	3301      	adds	r3, #1
 80034d0:	b2d1      	uxtb	r1, r2
 80034d2:	4a37      	ldr	r2, [pc, #220]	@ (80035b0 <Parameterset_query+0x420>)
 80034d4:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i < rp3 - rp1 + 6;i++)
 80034d6:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80034da:	3301      	adds	r3, #1
 80034dc:	f8a7 32ee 	strh.w	r3, [r7, #750]	@ 0x2ee
 80034e0:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <Parameterset_query+0x418>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <Parameterset_query+0x41c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	1d5a      	adds	r2, r3, #5
 80034ec:	f8b7 32ee 	ldrh.w	r3, [r7, #750]	@ 0x2ee
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f6bf af57 	bge.w	80033a4 <Parameterset_query+0x214>
		}
	}
	size_t txlen = 12 + tx_buffer[7];
 80034f6:	4b2e      	ldr	r3, [pc, #184]	@ (80035b0 <Parameterset_query+0x420>)
 80034f8:	79db      	ldrb	r3, [r3, #7]
 80034fa:	330c      	adds	r3, #12
 80034fc:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
	size_t checklength = 6 + tx_buffer[7];
 8003500:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <Parameterset_query+0x420>)
 8003502:	79db      	ldrb	r3, [r3, #7]
 8003504:	3306      	adds	r3, #6
 8003506:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
	SUM = Checksum(&tx_buffer[2], checklength);
 800350a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800350e:	b29b      	uxth	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	482c      	ldr	r0, [pc, #176]	@ (80035c4 <Parameterset_query+0x434>)
 8003514:	f7ff fbef 	bl	8002cf6 <Checksum>
 8003518:	4603      	mov	r3, r0
 800351a:	f8a7 32e2 	strh.w	r3, [r7, #738]	@ 0x2e2
	if(command == 3)
 800351e:	4b25      	ldr	r3, [pc, #148]	@ (80035b4 <Parameterset_query+0x424>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d118      	bne.n	8003558 <Parameterset_query+0x3c8>
	{
		tx_buffer[rp3 - rp1 + 6] = (SUM >> 8) & 0xFF;
 8003526:	f8b7 32e2 	ldrh.w	r3, [r7, #738]	@ 0x2e2
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	b299      	uxth	r1, r3
 800352e:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <Parameterset_query+0x418>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <Parameterset_query+0x41c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	3306      	adds	r3, #6
 800353a:	b2c9      	uxtb	r1, r1
 800353c:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <Parameterset_query+0x420>)
 800353e:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 7] = SUM & 0xFF;
 8003540:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <Parameterset_query+0x418>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b19      	ldr	r3, [pc, #100]	@ (80035ac <Parameterset_query+0x41c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	3307      	adds	r3, #7
 800354c:	f8b7 22e2 	ldrh.w	r2, [r7, #738]	@ 0x2e2
 8003550:	b2d1      	uxtb	r1, r2
 8003552:	4a17      	ldr	r2, [pc, #92]	@ (80035b0 <Parameterset_query+0x420>)
 8003554:	54d1      	strb	r1, [r2, r3]
 8003556:	e017      	b.n	8003588 <Parameterset_query+0x3f8>
	}
	else
	{
		tx_buffer[rp3 - rp1 + 10] = (SUM >> 8) & 0xFF;
 8003558:	f8b7 32e2 	ldrh.w	r3, [r7, #738]	@ 0x2e2
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	b299      	uxth	r1, r3
 8003560:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <Parameterset_query+0x418>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <Parameterset_query+0x41c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	330a      	adds	r3, #10
 800356c:	b2c9      	uxtb	r1, r1
 800356e:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <Parameterset_query+0x420>)
 8003570:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 11] = SUM & 0xFF;
 8003572:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <Parameterset_query+0x418>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <Parameterset_query+0x41c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	330b      	adds	r3, #11
 800357e:	f8b7 22e2 	ldrh.w	r2, [r7, #738]	@ 0x2e2
 8003582:	b2d1      	uxtb	r1, r2
 8003584:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <Parameterset_query+0x420>)
 8003586:	54d1      	strb	r1, [r2, r3]
	}
	txstate = 1;
 8003588:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <Parameterset_query+0x438>)
 800358a:	2201      	movs	r2, #1
 800358c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, txlen);
 800358e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8003592:	b29b      	uxth	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	4906      	ldr	r1, [pc, #24]	@ (80035b0 <Parameterset_query+0x420>)
 8003598:	480c      	ldr	r0, [pc, #48]	@ (80035cc <Parameterset_query+0x43c>)
 800359a:	f003 fdbf 	bl	800711c <HAL_UART_Transmit_DMA>
}
 800359e:	bf00      	nop
 80035a0:	f507 773c 	add.w	r7, r7, #752	@ 0x2f0
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200011b4 	.word	0x200011b4
 80035ac:	200011ac 	.word	0x200011ac
 80035b0:	200004bc 	.word	0x200004bc
 80035b4:	200011a8 	.word	0x200011a8
 80035b8:	20000010 	.word	0x20000010
 80035bc:	20000012 	.word	0x20000012
 80035c0:	20000014 	.word	0x20000014
 80035c4:	200004be 	.word	0x200004be
 80035c8:	200011da 	.word	0x200011da
 80035cc:	20000c7c 	.word	0x20000c7c

080035d0 <get_current_systick>:

uint64_t get_current_systick(void) //获取当前系统计时 (µs)
{
 80035d0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
  uint32_t high1, low;
  do
  {
    high1 = (uint32_t)(high_counter >> 32);
 80035d8:	4b16      	ldr	r3, [pc, #88]	@ (8003634 <get_current_systick+0x64>)
 80035da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	464a      	mov	r2, r9
 80035e8:	2300      	movs	r3, #0
 80035ea:	4613      	mov	r3, r2
 80035ec:	607b      	str	r3, [r7, #4]
    low = TIM2->CNT;
 80035ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	603b      	str	r3, [r7, #0]
  } while (high1 != (uint32_t)(high_counter >> 32));
 80035f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <get_current_systick+0x64>)
 80035f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	464a      	mov	r2, r9
 8003606:	2300      	movs	r3, #0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4293      	cmp	r3, r2
 800360c:	d1e4      	bne.n	80035d8 <get_current_systick+0x8>
  return high_counter + low; // 返回64位，低32位为定时器记录，高32位由high_counter记录
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	4618      	mov	r0, r3
 8003614:	4611      	mov	r1, r2
 8003616:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <get_current_systick+0x64>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	1884      	adds	r4, r0, r2
 800361e:	eb41 0503 	adc.w	r5, r1, r3
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
}
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003632:	4770      	bx	lr
 8003634:	200011c0 	.word	0x200011c0

08003638 <set_base_time>:

void set_base_time(uint64_t timestamp) // 设置时间基准
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	e9c7 0100 	strd	r0, r1, [r7]
  base_timestamp = timestamp;
 8003642:	4908      	ldr	r1, [pc, #32]	@ (8003664 <set_base_time+0x2c>)
 8003644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003648:	e9c1 2300 	strd	r2, r3, [r1]
  base_systick = get_current_systick();
 800364c:	f7ff ffc0 	bl	80035d0 <get_current_systick>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4904      	ldr	r1, [pc, #16]	@ (8003668 <set_base_time+0x30>)
 8003656:	e9c1 2300 	strd	r2, r3, [r1]
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200011c8 	.word	0x200011c8
 8003668:	200011d0 	.word	0x200011d0

0800366c <get_current_timestamp>:

uint64_t get_current_timestamp(void) //获取当前时间戳 (µs)
{
 800366c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
  uint64_t current_systick = get_current_systick();
 8003674:	f7ff ffac 	bl	80035d0 <get_current_systick>
 8003678:	e9c7 0100 	strd	r0, r1, [r7]
  return base_timestamp + (current_systick - base_systick);
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <get_current_timestamp+0x40>)
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003686:	1a84      	subs	r4, r0, r2
 8003688:	eb61 0503 	sbc.w	r5, r1, r3
 800368c:	4b08      	ldr	r3, [pc, #32]	@ (80036b0 <get_current_timestamp+0x44>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	eb14 0802 	adds.w	r8, r4, r2
 8003696:	eb45 0903 	adc.w	r9, r5, r3
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
}
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036aa:	bf00      	nop
 80036ac:	200011d0 	.word	0x200011d0
 80036b0:	200011c8 	.word	0x200011c8

080036b4 <Send_time>:

void Send_time(void) // 校时
{
 80036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b8:	b08b      	sub	sp, #44	@ 0x2c
 80036ba:	af00      	add	r7, sp, #0
	uint64_t timestamp = 0;
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(uint16_t i = 0; i < 8;i++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	83fb      	strh	r3, [r7, #30]
 80036cc:	e01b      	b.n	8003706 <Send_time+0x52>
	timestamp = (timestamp << 8) | *(rp3 + i);
 80036ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	020b      	lsls	r3, r1, #8
 80036dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036e0:	0202      	lsls	r2, r0, #8
 80036e2:	4955      	ldr	r1, [pc, #340]	@ (8003838 <Send_time+0x184>)
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	8bf9      	ldrh	r1, [r7, #30]
 80036e8:	4401      	add	r1, r0
 80036ea:	7809      	ldrb	r1, [r1, #0]
 80036ec:	b2c9      	uxtb	r1, r1
 80036ee:	2000      	movs	r0, #0
 80036f0:	4688      	mov	r8, r1
 80036f2:	4681      	mov	r9, r0
 80036f4:	ea42 0a08 	orr.w	sl, r2, r8
 80036f8:	ea43 0b09 	orr.w	fp, r3, r9
 80036fc:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	for(uint16_t i = 0; i < 8;i++)
 8003700:	8bfb      	ldrh	r3, [r7, #30]
 8003702:	3301      	adds	r3, #1
 8003704:	83fb      	strh	r3, [r7, #30]
 8003706:	8bfb      	ldrh	r3, [r7, #30]
 8003708:	2b07      	cmp	r3, #7
 800370a:	d9e0      	bls.n	80036ce <Send_time+0x1a>
	set_base_time(timestamp);
 800370c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003710:	f7ff ff92 	bl	8003638 <set_base_time>
	uint64_t current_timestamp = get_current_timestamp();
 8003714:	f7ff ffaa 	bl	800366c <get_current_timestamp>
 8003718:	e9c7 0104 	strd	r0, r1, [r7, #16]
	for(uint16_t i = 0; i < 8;i++)
 800371c:	2300      	movs	r3, #0
 800371e:	83bb      	strh	r3, [r7, #28]
 8003720:	e01b      	b.n	800375a <Send_time+0xa6>
	tx_buffer[i + 8] = (current_timestamp >> (56 - 8 * i)) & 0xFF;
 8003722:	8bbb      	ldrh	r3, [r7, #28]
 8003724:	f1c3 0307 	rsb	r3, r3, #7
 8003728:	00d9      	lsls	r1, r3, #3
 800372a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800372e:	f1c1 0620 	rsb	r6, r1, #32
 8003732:	f1a1 0020 	sub.w	r0, r1, #32
 8003736:	fa22 f401 	lsr.w	r4, r2, r1
 800373a:	fa03 f606 	lsl.w	r6, r3, r6
 800373e:	4334      	orrs	r4, r6
 8003740:	fa23 f000 	lsr.w	r0, r3, r0
 8003744:	4304      	orrs	r4, r0
 8003746:	fa23 f501 	lsr.w	r5, r3, r1
 800374a:	8bbb      	ldrh	r3, [r7, #28]
 800374c:	3308      	adds	r3, #8
 800374e:	b2e1      	uxtb	r1, r4
 8003750:	4a3a      	ldr	r2, [pc, #232]	@ (800383c <Send_time+0x188>)
 8003752:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < 8;i++)
 8003754:	8bbb      	ldrh	r3, [r7, #28]
 8003756:	3301      	adds	r3, #1
 8003758:	83bb      	strh	r3, [r7, #28]
 800375a:	8bbb      	ldrh	r3, [r7, #28]
 800375c:	2b07      	cmp	r3, #7
 800375e:	d9e0      	bls.n	8003722 <Send_time+0x6e>
	for(uint16_t j = 0;j < rp3 - rp1;j++)
 8003760:	2300      	movs	r3, #0
 8003762:	837b      	strh	r3, [r7, #26]
 8003764:	e011      	b.n	800378a <Send_time+0xd6>
	{
		tx_buffer[j] = *(rp1 + j);
 8003766:	4b36      	ldr	r3, [pc, #216]	@ (8003840 <Send_time+0x18c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	8b7b      	ldrh	r3, [r7, #26]
 800376c:	441a      	add	r2, r3
 800376e:	8b7b      	ldrh	r3, [r7, #26]
 8003770:	7811      	ldrb	r1, [r2, #0]
 8003772:	4a32      	ldr	r2, [pc, #200]	@ (800383c <Send_time+0x188>)
 8003774:	54d1      	strb	r1, [r2, r3]
		if(j == 5)
 8003776:	8b7b      	ldrh	r3, [r7, #26]
 8003778:	2b05      	cmp	r3, #5
 800377a:	d103      	bne.n	8003784 <Send_time+0xd0>
			tx_buffer[j] = 0x01;
 800377c:	8b7b      	ldrh	r3, [r7, #26]
 800377e:	4a2f      	ldr	r2, [pc, #188]	@ (800383c <Send_time+0x188>)
 8003780:	2101      	movs	r1, #1
 8003782:	54d1      	strb	r1, [r2, r3]
	for(uint16_t j = 0;j < rp3 - rp1;j++)
 8003784:	8b7b      	ldrh	r3, [r7, #26]
 8003786:	3301      	adds	r3, #1
 8003788:	837b      	strh	r3, [r7, #26]
 800378a:	8b7a      	ldrh	r2, [r7, #26]
 800378c:	4b2a      	ldr	r3, [pc, #168]	@ (8003838 <Send_time+0x184>)
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <Send_time+0x18c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1acb      	subs	r3, r1, r3
 8003796:	429a      	cmp	r2, r3
 8003798:	dbe5      	blt.n	8003766 <Send_time+0xb2>
	}
	size_t checklength = 6 + tx_buffer[7];
 800379a:	4b28      	ldr	r3, [pc, #160]	@ (800383c <Send_time+0x188>)
 800379c:	79db      	ldrb	r3, [r3, #7]
 800379e:	3306      	adds	r3, #6
 80037a0:	60fb      	str	r3, [r7, #12]
	size_t txlen = 12 + tx_buffer[7];
 80037a2:	4b26      	ldr	r3, [pc, #152]	@ (800383c <Send_time+0x188>)
 80037a4:	79db      	ldrb	r3, [r3, #7]
 80037a6:	330c      	adds	r3, #12
 80037a8:	60bb      	str	r3, [r7, #8]
	uint16_t SUM = Checksum(&tx_buffer[2], checklength);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	4824      	ldr	r0, [pc, #144]	@ (8003844 <Send_time+0x190>)
 80037b2:	f7ff faa0 	bl	8002cf6 <Checksum>
 80037b6:	4603      	mov	r3, r0
 80037b8:	80fb      	strh	r3, [r7, #6]
	tx_buffer[rp3 - rp1 + 8] = (SUM >> 8) & 0xFF;
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	b299      	uxth	r1, r3
 80037c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <Send_time+0x184>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <Send_time+0x18c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	3308      	adds	r3, #8
 80037cc:	b2c9      	uxtb	r1, r1
 80037ce:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <Send_time+0x188>)
 80037d0:	54d1      	strb	r1, [r2, r3]
	tx_buffer[rp3 - rp1 + 9] = SUM & 0xFF;
 80037d2:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <Send_time+0x184>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <Send_time+0x18c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	3309      	adds	r3, #9
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	b2d1      	uxtb	r1, r2
 80037e2:	4a16      	ldr	r2, [pc, #88]	@ (800383c <Send_time+0x188>)
 80037e4:	54d1      	strb	r1, [r2, r3]
	uint16_t tail = TAIL;
 80037e6:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 80037ea:	80bb      	strh	r3, [r7, #4]
	tx_buffer[rp3 - rp1 + 10] = (tail >> 8) & 0xFF;
 80037ec:	88bb      	ldrh	r3, [r7, #4]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	b299      	uxth	r1, r3
 80037f2:	4b11      	ldr	r3, [pc, #68]	@ (8003838 <Send_time+0x184>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <Send_time+0x18c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	330a      	adds	r3, #10
 80037fe:	b2c9      	uxtb	r1, r1
 8003800:	4a0e      	ldr	r2, [pc, #56]	@ (800383c <Send_time+0x188>)
 8003802:	54d1      	strb	r1, [r2, r3]
	tx_buffer[rp3 - rp1 + 11] = tail & 0xFF;
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <Send_time+0x184>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <Send_time+0x18c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	330b      	adds	r3, #11
 8003810:	88ba      	ldrh	r2, [r7, #4]
 8003812:	b2d1      	uxtb	r1, r2
 8003814:	4a09      	ldr	r2, [pc, #36]	@ (800383c <Send_time+0x188>)
 8003816:	54d1      	strb	r1, [r2, r3]
	txstate = 1;
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <Send_time+0x194>)
 800381a:	2201      	movs	r2, #1
 800381c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, txlen);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	4905      	ldr	r1, [pc, #20]	@ (800383c <Send_time+0x188>)
 8003826:	4809      	ldr	r0, [pc, #36]	@ (800384c <Send_time+0x198>)
 8003828:	f003 fc78 	bl	800711c <HAL_UART_Transmit_DMA>
}
 800382c:	bf00      	nop
 800382e:	372c      	adds	r7, #44	@ 0x2c
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003836:	bf00      	nop
 8003838:	200011b4 	.word	0x200011b4
 800383c:	200004bc 	.word	0x200004bc
 8003840:	200011ac 	.word	0x200011ac
 8003844:	200004be 	.word	0x200004be
 8003848:	200011da 	.word	0x200011da
 800384c:	20000c7c 	.word	0x20000c7c

08003850 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //5s触发增加一次heartcount记数，每30s发送一次心跳
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0b      	ldr	r2, [pc, #44]	@ (800388c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d106      	bne.n	8003870 <HAL_TIM_PeriodElapsedCallback+0x20>
		  heartcount++;
 8003862:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800386e:	801a      	strh	r2, [r3, #0]
	  if(heartcount >= 6)
 8003870:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b05      	cmp	r3, #5
 8003878:	d904      	bls.n	8003884 <HAL_TIM_PeriodElapsedCallback+0x34>
	  {
		  Sendheart();
 800387a:	f000 f80b 	bl	8003894 <Sendheart>
		  heartcount = 0;
 800387e:	4b04      	ldr	r3, [pc, #16]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003880:	2200      	movs	r2, #0
 8003882:	801a      	strh	r2, [r3, #0]
	  }
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40001000 	.word	0x40001000
 8003890:	200011de 	.word	0x200011de

08003894 <Sendheart>:

void Sendheart(void) //发送心跳
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
	  uint16_t length = 14;
 800389a:	230e      	movs	r3, #14
 800389c:	80fb      	strh	r3, [r7, #6]
	  static uint8_t hearttx[14];
	  uint16_t head = HEAD;
 800389e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80038a2:	80bb      	strh	r3, [r7, #4]
	  uint16_t tail = TAIL;
 80038a4:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 80038a8:	807b      	strh	r3, [r7, #2]
	  hearttx[0] = (head >> 8) & 0xFF;
 80038aa:	88bb      	ldrh	r3, [r7, #4]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b28      	ldr	r3, [pc, #160]	@ (8003954 <Sendheart+0xc0>)
 80038b4:	701a      	strb	r2, [r3, #0]
	  hearttx[1] = head & 0xFF;
 80038b6:	88bb      	ldrh	r3, [r7, #4]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4b26      	ldr	r3, [pc, #152]	@ (8003954 <Sendheart+0xc0>)
 80038bc:	705a      	strb	r2, [r3, #1]
	  hearttx[2] = version;
 80038be:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <Sendheart+0xc4>)
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <Sendheart+0xc0>)
 80038c4:	709a      	strb	r2, [r3, #2]
	  hearttx[3] = (receivercode >> 8) & 0xFF;
 80038c6:	4b25      	ldr	r3, [pc, #148]	@ (800395c <Sendheart+0xc8>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <Sendheart+0xc0>)
 80038d4:	70da      	strb	r2, [r3, #3]
	  hearttx[4] = receivercode & 0xFF;
 80038d6:	4b21      	ldr	r3, [pc, #132]	@ (800395c <Sendheart+0xc8>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <Sendheart+0xc0>)
 80038e0:	711a      	strb	r2, [r3, #4]
	  hearttx[5] = 0x01;
 80038e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003954 <Sendheart+0xc0>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	715a      	strb	r2, [r3, #5]
	  hearttx[6] = 0x00;
 80038e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003954 <Sendheart+0xc0>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	719a      	strb	r2, [r3, #6]
	  hearttx[7] = 0x02;
 80038ee:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <Sendheart+0xc0>)
 80038f0:	2202      	movs	r2, #2
 80038f2:	71da      	strb	r2, [r3, #7]
	  hearttx[8] = state;
 80038f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003960 <Sendheart+0xcc>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <Sendheart+0xc0>)
 80038fc:	721a      	strb	r2, [r3, #8]
	  hearttx[9] = (uint8_t)sampling_ready;
 80038fe:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <Sendheart+0xd0>)
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b13      	ldr	r3, [pc, #76]	@ (8003954 <Sendheart+0xc0>)
 8003908:	725a      	strb	r2, [r3, #9]
	  uint16_t SUM = Checksum(&hearttx[2], 8);
 800390a:	2108      	movs	r1, #8
 800390c:	4816      	ldr	r0, [pc, #88]	@ (8003968 <Sendheart+0xd4>)
 800390e:	f7ff f9f2 	bl	8002cf6 <Checksum>
 8003912:	4603      	mov	r3, r0
 8003914:	803b      	strh	r3, [r7, #0]
	  hearttx[10] = (SUM >> 8) & 0xFF;
 8003916:	883b      	ldrh	r3, [r7, #0]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	b29b      	uxth	r3, r3
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <Sendheart+0xc0>)
 8003920:	729a      	strb	r2, [r3, #10]
	  hearttx[11] = SUM & 0xFF;
 8003922:	883b      	ldrh	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <Sendheart+0xc0>)
 8003928:	72da      	strb	r2, [r3, #11]
	  hearttx[12] = (tail >> 8) & 0xFF;
 800392a:	887b      	ldrh	r3, [r7, #2]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	b29b      	uxth	r3, r3
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <Sendheart+0xc0>)
 8003934:	731a      	strb	r2, [r3, #12]
	  hearttx[13] = tail & 0xFF;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <Sendheart+0xc0>)
 800393c:	735a      	strb	r2, [r3, #13]
	  HAL_UART_Transmit_DMA(&huart1, hearttx, length);
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	461a      	mov	r2, r3
 8003942:	4904      	ldr	r1, [pc, #16]	@ (8003954 <Sendheart+0xc0>)
 8003944:	4809      	ldr	r0, [pc, #36]	@ (800396c <Sendheart+0xd8>)
 8003946:	f003 fbe9 	bl	800711c <HAL_UART_Transmit_DMA>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200011f8 	.word	0x200011f8
 8003958:	20000020 	.word	0x20000020
 800395c:	20000022 	.word	0x20000022
 8003960:	200011d8 	.word	0x200011d8
 8003964:	2000002e 	.word	0x2000002e
 8003968:	200011fa 	.word	0x200011fa
 800396c:	20000c7c 	.word	0x20000c7c

08003970 <Send_Data>:

void Send_Data(void) // 数据上送
{
 8003970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
	  while(!samplingstate && !data_ready)
 8003976:	e089      	b.n	8003a8c <Send_Data+0x11c>
	  {
		  uint16_t head = HEAD;
 8003978:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800397c:	82bb      	strh	r3, [r7, #20]
		  uint16_t tail = TAIL;
 800397e:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 8003982:	827b      	strh	r3, [r7, #18]
		  datatx[0] = (head >> 8) & 0xFF;
 8003984:	8abb      	ldrh	r3, [r7, #20]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	b29b      	uxth	r3, r3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	4b47      	ldr	r3, [pc, #284]	@ (8003aac <Send_Data+0x13c>)
 800398e:	701a      	strb	r2, [r3, #0]
		  datatx[1] = head & 0xFF;
 8003990:	8abb      	ldrh	r3, [r7, #20]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	4b45      	ldr	r3, [pc, #276]	@ (8003aac <Send_Data+0x13c>)
 8003996:	705a      	strb	r2, [r3, #1]
		  datatx[2] = version;
 8003998:	4b45      	ldr	r3, [pc, #276]	@ (8003ab0 <Send_Data+0x140>)
 800399a:	781a      	ldrb	r2, [r3, #0]
 800399c:	4b43      	ldr	r3, [pc, #268]	@ (8003aac <Send_Data+0x13c>)
 800399e:	709a      	strb	r2, [r3, #2]
		  datatx[3] = (receivercode >> 8) & 0xFF;
 80039a0:	4b44      	ldr	r3, [pc, #272]	@ (8003ab4 <Send_Data+0x144>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	4b3f      	ldr	r3, [pc, #252]	@ (8003aac <Send_Data+0x13c>)
 80039ae:	70da      	strb	r2, [r3, #3]
		  datatx[4] = receivercode & 0xFF;
 80039b0:	4b40      	ldr	r3, [pc, #256]	@ (8003ab4 <Send_Data+0x144>)
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	4b3c      	ldr	r3, [pc, #240]	@ (8003aac <Send_Data+0x13c>)
 80039ba:	711a      	strb	r2, [r3, #4]
		  datatx[5] = 0x01;
 80039bc:	4b3b      	ldr	r3, [pc, #236]	@ (8003aac <Send_Data+0x13c>)
 80039be:	2201      	movs	r2, #1
 80039c0:	715a      	strb	r2, [r3, #5]
		  datatx[6] = 0x02;
 80039c2:	4b3a      	ldr	r3, [pc, #232]	@ (8003aac <Send_Data+0x13c>)
 80039c4:	2202      	movs	r2, #2
 80039c6:	719a      	strb	r2, [r3, #6]
		  datatx[7] = 0x0B;
 80039c8:	4b38      	ldr	r3, [pc, #224]	@ (8003aac <Send_Data+0x13c>)
 80039ca:	220b      	movs	r2, #11
 80039cc:	71da      	strb	r2, [r3, #7]
		  datatx[8] = codeid;
 80039ce:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab8 <Send_Data+0x148>)
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <Send_Data+0x13c>)
 80039d4:	721a      	strb	r2, [r3, #8]
		  datatx[9] = (peaklevel >> 8) & 0xFF;
 80039d6:	4b39      	ldr	r3, [pc, #228]	@ (8003abc <Send_Data+0x14c>)
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b29b      	uxth	r3, r3
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	4b32      	ldr	r3, [pc, #200]	@ (8003aac <Send_Data+0x13c>)
 80039e2:	725a      	strb	r2, [r3, #9]
		  datatx[10] = peaklevel & 0xFF;
 80039e4:	4b35      	ldr	r3, [pc, #212]	@ (8003abc <Send_Data+0x14c>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4b30      	ldr	r3, [pc, #192]	@ (8003aac <Send_Data+0x13c>)
 80039ec:	729a      	strb	r2, [r3, #10]
		  uint64_t current_timestamp = get_current_timestamp();
 80039ee:	f7ff fe3d 	bl	800366c <get_current_timestamp>
 80039f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
		  for(uint16_t i = 0;i < 8;i++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	82fb      	strh	r3, [r7, #22]
 80039fa:	e01b      	b.n	8003a34 <Send_Data+0xc4>
			  datatx[i + 11] = (current_timestamp >> (56 - 8 * i)) & 0xFF;
 80039fc:	8afb      	ldrh	r3, [r7, #22]
 80039fe:	f1c3 0307 	rsb	r3, r3, #7
 8003a02:	00d9      	lsls	r1, r3, #3
 8003a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a08:	f1c1 0620 	rsb	r6, r1, #32
 8003a0c:	f1a1 0020 	sub.w	r0, r1, #32
 8003a10:	fa22 f401 	lsr.w	r4, r2, r1
 8003a14:	fa03 f606 	lsl.w	r6, r3, r6
 8003a18:	4334      	orrs	r4, r6
 8003a1a:	fa23 f000 	lsr.w	r0, r3, r0
 8003a1e:	4304      	orrs	r4, r0
 8003a20:	fa23 f501 	lsr.w	r5, r3, r1
 8003a24:	8afb      	ldrh	r3, [r7, #22]
 8003a26:	330b      	adds	r3, #11
 8003a28:	b2e1      	uxtb	r1, r4
 8003a2a:	4a20      	ldr	r2, [pc, #128]	@ (8003aac <Send_Data+0x13c>)
 8003a2c:	54d1      	strb	r1, [r2, r3]
		  for(uint16_t i = 0;i < 8;i++)
 8003a2e:	8afb      	ldrh	r3, [r7, #22]
 8003a30:	3301      	adds	r3, #1
 8003a32:	82fb      	strh	r3, [r7, #22]
 8003a34:	8afb      	ldrh	r3, [r7, #22]
 8003a36:	2b07      	cmp	r3, #7
 8003a38:	d9e0      	bls.n	80039fc <Send_Data+0x8c>
		  uint16_t SUM = Checksum(&datatx[2], 17);
 8003a3a:	2111      	movs	r1, #17
 8003a3c:	4820      	ldr	r0, [pc, #128]	@ (8003ac0 <Send_Data+0x150>)
 8003a3e:	f7ff f95a 	bl	8002cf6 <Checksum>
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
		  datatx[19] = (SUM >> 8) & 0xFF;
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4b17      	ldr	r3, [pc, #92]	@ (8003aac <Send_Data+0x13c>)
 8003a50:	74da      	strb	r2, [r3, #19]
		  datatx[20] = SUM & 0xFF;
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <Send_Data+0x13c>)
 8003a58:	751a      	strb	r2, [r3, #20]
		  datatx[21] = (tail >> 8) & 0xFF;
 8003a5a:	8a7b      	ldrh	r3, [r7, #18]
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <Send_Data+0x13c>)
 8003a64:	755a      	strb	r2, [r3, #21]
		  datatx[22] = tail & 0xFF;
 8003a66:	8a7b      	ldrh	r3, [r7, #18]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <Send_Data+0x13c>)
 8003a6c:	759a      	strb	r2, [r3, #22]
		  if(sampling_ready == 1)
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <Send_Data+0x154>)
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d109      	bne.n	8003a8c <Send_Data+0x11c>
		  {
			  samplingstate = 1;
 8003a78:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <Send_Data+0x158>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit_DMA(&huart1, datatx, transmitlength);
 8003a7e:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <Send_Data+0x15c>)
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	4909      	ldr	r1, [pc, #36]	@ (8003aac <Send_Data+0x13c>)
 8003a86:	4812      	ldr	r0, [pc, #72]	@ (8003ad0 <Send_Data+0x160>)
 8003a88:	f003 fb48 	bl	800711c <HAL_UART_Transmit_DMA>
	  while(!samplingstate && !data_ready)
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac8 <Send_Data+0x158>)
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d105      	bne.n	8003aa2 <Send_Data+0x132>
 8003a96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <Send_Data+0x164>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f43f af6b 	beq.w	8003978 <Send_Data+0x8>
		  }
	  }
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200011e0 	.word	0x200011e0
 8003ab0:	20000020 	.word	0x20000020
 8003ab4:	20000022 	.word	0x20000022
 8003ab8:	20000d94 	.word	0x20000d94
 8003abc:	20000d96 	.word	0x20000d96
 8003ac0:	200011e2 	.word	0x200011e2
 8003ac4:	2000002e 	.word	0x2000002e
 8003ac8:	200011dc 	.word	0x200011dc
 8003acc:	20000034 	.word	0x20000034
 8003ad0:	20000c7c 	.word	0x20000c7c
 8003ad4:	2000053e 	.word	0x2000053e

08003ad8 <maintain_processing_buffer>:

void maintain_processing_buffer(void) //存储数据超过512字节且处理数据也超过512字节后前移512字节
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
	uint8_t *address = processing_buffer;
 8003ade:	4b17      	ldr	r3, [pc, #92]	@ (8003b3c <maintain_processing_buffer+0x64>)
 8003ae0:	607b      	str	r3, [r7, #4]
    if (wp - address > BUF_SIZE/2 && rp - address > BUF_SIZE/2)
 8003ae2:	4b17      	ldr	r3, [pc, #92]	@ (8003b40 <maintain_processing_buffer+0x68>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aee:	dd21      	ble.n	8003b34 <maintain_processing_buffer+0x5c>
 8003af0:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <maintain_processing_buffer+0x6c>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afc:	dd1a      	ble.n	8003b34 <maintain_processing_buffer+0x5c>
    {
        uint16_t move_len = BUF_SIZE/2;
 8003afe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b02:	807b      	strh	r3, [r7, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b04:	b672      	cpsid	i
}
 8003b06:	bf00      	nop
        __disable_irq();
        memmove(processing_buffer, &processing_buffer[BUF_SIZE/2], move_len);
 8003b08:	887b      	ldrh	r3, [r7, #2]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	490e      	ldr	r1, [pc, #56]	@ (8003b48 <maintain_processing_buffer+0x70>)
 8003b0e:	480b      	ldr	r0, [pc, #44]	@ (8003b3c <maintain_processing_buffer+0x64>)
 8003b10:	f00c f8b9 	bl	800fc86 <memmove>
        wp = wp - move_len;
 8003b14:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <maintain_processing_buffer+0x68>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	887b      	ldrh	r3, [r7, #2]
 8003b1a:	425b      	negs	r3, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4a08      	ldr	r2, [pc, #32]	@ (8003b40 <maintain_processing_buffer+0x68>)
 8003b20:	6013      	str	r3, [r2, #0]
        rp = rp - move_len;
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <maintain_processing_buffer+0x6c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	425b      	negs	r3, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <maintain_processing_buffer+0x6c>)
 8003b2e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b30:	b662      	cpsie	i
}
 8003b32:	bf00      	nop
        __enable_irq();
    }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000da8 	.word	0x20000da8
 8003b40:	20000018 	.word	0x20000018
 8003b44:	2000001c 	.word	0x2000001c
 8003b48:	20000fa8 	.word	0x20000fa8

08003b4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <HAL_UART_TxCpltCallback+0x40>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d10f      	bne.n	8003b7e <HAL_UART_TxCpltCallback+0x32>
	{
		if(txstate == 1)
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_UART_TxCpltCallback+0x44>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d102      	bne.n	8003b6e <HAL_UART_TxCpltCallback+0x22>
			txstate = 0;
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_UART_TxCpltCallback+0x44>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	801a      	strh	r2, [r3, #0]
		if(samplingstate == 1)
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_UART_TxCpltCallback+0x48>)
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_UART_TxCpltCallback+0x32>
			samplingstate = 0;
 8003b78:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <HAL_UART_TxCpltCallback+0x48>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	801a      	strh	r2, [r3, #0]
	}
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40013800 	.word	0x40013800
 8003b90:	200011da 	.word	0x200011da
 8003b94:	200011dc 	.word	0x200011dc

08003b98 <CMD_HANDLE_ERROR>:

void CMD_HANDLE_ERROR(CMD_Status cmdstate) //错误码发送
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
	uint16_t head = HEAD;
 8003ba2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003ba6:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = TAIL;
 8003ba8:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 8003bac:	81bb      	strh	r3, [r7, #12]
	tx_buffer[0] = (head >> 8) & 0xFF;
 8003bae:	89fb      	ldrh	r3, [r7, #14]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003bb8:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = head & 0xFF;
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4b28      	ldr	r3, [pc, #160]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003bc0:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = version;
 8003bc2:	4b28      	ldr	r3, [pc, #160]	@ (8003c64 <CMD_HANDLE_ERROR+0xcc>)
 8003bc4:	781a      	ldrb	r2, [r3, #0]
 8003bc6:	4b26      	ldr	r3, [pc, #152]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003bc8:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = (receivercode >> 8) & 0xFF;
 8003bca:	4b27      	ldr	r3, [pc, #156]	@ (8003c68 <CMD_HANDLE_ERROR+0xd0>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4b22      	ldr	r3, [pc, #136]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003bd8:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = receivercode & 0xFF;
 8003bda:	4b23      	ldr	r3, [pc, #140]	@ (8003c68 <CMD_HANDLE_ERROR+0xd0>)
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003be4:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = 0xFF;
 8003be6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003be8:	22ff      	movs	r2, #255	@ 0xff
 8003bea:	715a      	strb	r2, [r3, #5]
	tx_buffer[6] = command & 0xFF;
 8003bec:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <CMD_HANDLE_ERROR+0xd4>)
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003bf4:	719a      	strb	r2, [r3, #6]
	tx_buffer[7] = 0x02;
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	71da      	strb	r2, [r3, #7]
	tx_buffer[8] = retransmit;
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c70 <CMD_HANDLE_ERROR+0xd8>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4b17      	ldr	r3, [pc, #92]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003c04:	721a      	strb	r2, [r3, #8]
	tx_buffer[9] = (uint8_t)cmdstate;
 8003c06:	4a16      	ldr	r2, [pc, #88]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	7253      	strb	r3, [r2, #9]
	uint16_t SUM = Checksum(&tx_buffer[2], 8);
 8003c0c:	2108      	movs	r1, #8
 8003c0e:	4819      	ldr	r0, [pc, #100]	@ (8003c74 <CMD_HANDLE_ERROR+0xdc>)
 8003c10:	f7ff f871 	bl	8002cf6 <Checksum>
 8003c14:	4603      	mov	r3, r0
 8003c16:	817b      	strh	r3, [r7, #10]
	tx_buffer[10] = (SUM >> 8) & 0xFF;
 8003c18:	897b      	ldrh	r3, [r7, #10]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	4b0f      	ldr	r3, [pc, #60]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003c22:	729a      	strb	r2, [r3, #10]
	tx_buffer[11] = SUM & 0xFF;
 8003c24:	897b      	ldrh	r3, [r7, #10]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003c2a:	72da      	strb	r2, [r3, #11]
	tx_buffer[12] = (tail >> 8) & 0xFF;
 8003c2c:	89bb      	ldrh	r3, [r7, #12]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4b0a      	ldr	r3, [pc, #40]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003c36:	731a      	strb	r2, [r3, #12]
	tx_buffer[13] = tail & 0xFF;
 8003c38:	89bb      	ldrh	r3, [r7, #12]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	4b08      	ldr	r3, [pc, #32]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003c3e:	735a      	strb	r2, [r3, #13]
	uint16_t length = 14;
 8003c40:	230e      	movs	r3, #14
 8003c42:	813b      	strh	r3, [r7, #8]
	txstate = 1;
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <CMD_HANDLE_ERROR+0xe0>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
 8003c4a:	893b      	ldrh	r3, [r7, #8]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4904      	ldr	r1, [pc, #16]	@ (8003c60 <CMD_HANDLE_ERROR+0xc8>)
 8003c50:	480a      	ldr	r0, [pc, #40]	@ (8003c7c <CMD_HANDLE_ERROR+0xe4>)
 8003c52:	f003 fa63 	bl	800711c <HAL_UART_Transmit_DMA>
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	200004bc 	.word	0x200004bc
 8003c64:	20000020 	.word	0x20000020
 8003c68:	20000022 	.word	0x20000022
 8003c6c:	200011a8 	.word	0x200011a8
 8003c70:	20000030 	.word	0x20000030
 8003c74:	200004be 	.word	0x200004be
 8003c78:	200011da 	.word	0x200011da
 8003c7c:	20000c7c 	.word	0x20000c7c

08003c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003cb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c84:	f7fe fd94 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c88:	480c      	ldr	r0, [pc, #48]	@ (8003cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8003c8a:	490d      	ldr	r1, [pc, #52]	@ (8003cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc4 <LoopForever+0xe>)
  movs r3, #0
 8003c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c90:	e002      	b.n	8003c98 <LoopCopyDataInit>

08003c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c96:	3304      	adds	r3, #4

08003c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c9c:	d3f9      	bcc.n	8003c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8003ccc <LoopForever+0x16>)
  movs r3, #0
 8003ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ca4:	e001      	b.n	8003caa <LoopFillZerobss>

08003ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca8:	3204      	adds	r2, #4

08003caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cac:	d3fb      	bcc.n	8003ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cae:	f00c f895 	bl	800fddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cb2:	f7fd fa97 	bl	80011e4 <main>

08003cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8003cb6:	e7fe      	b.n	8003cb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003cb8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cc0:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003cc4:	0803e3b8 	.word	0x0803e3b8
  ldr r2, =_sbss
 8003cc8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003ccc:	20001394 	.word	0x20001394

08003cd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cd0:	e7fe      	b.n	8003cd0 <ADC1_IRQHandler>

08003cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cdc:	2003      	movs	r0, #3
 8003cde:	f000 f961 	bl	8003fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ce2:	200f      	movs	r0, #15
 8003ce4:	f000 f80e 	bl	8003d04 <HAL_InitTick>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	71fb      	strb	r3, [r7, #7]
 8003cf2:	e001      	b.n	8003cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cf4:	f7fe fb8c 	bl	8002410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d10:	4b17      	ldr	r3, [pc, #92]	@ (8003d70 <HAL_InitTick+0x6c>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d023      	beq.n	8003d60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d18:	4b16      	ldr	r3, [pc, #88]	@ (8003d74 <HAL_InitTick+0x70>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <HAL_InitTick+0x6c>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	4619      	mov	r1, r3
 8003d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f96d 	bl	800400e <HAL_SYSTICK_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0f      	cmp	r3, #15
 8003d3e:	d809      	bhi.n	8003d54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d40:	2200      	movs	r2, #0
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	f000 f937 	bl	8003fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <HAL_InitTick+0x74>)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e007      	b.n	8003d64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e004      	b.n	8003d64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	e001      	b.n	8003d64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	2000003c 	.word	0x2000003c
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	20000038 	.word	0x20000038

08003d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2000003c 	.word	0x2000003c
 8003da0:	20001208 	.word	0x20001208

08003da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20001208 	.word	0x20001208

08003dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff ffee 	bl	8003da4 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d005      	beq.n	8003de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_Delay+0x44>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003de2:	bf00      	nop
 8003de4:	f7ff ffde 	bl	8003da4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d8f7      	bhi.n	8003de4 <HAL_Delay+0x28>
  {
  }
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000003c 	.word	0x2000003c

08003e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e14:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <__NVIC_SetPriorityGrouping+0x44>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e20:	4013      	ands	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e36:	4a04      	ldr	r2, [pc, #16]	@ (8003e48 <__NVIC_SetPriorityGrouping+0x44>)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	60d3      	str	r3, [r2, #12]
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e50:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <__NVIC_GetPriorityGrouping+0x18>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	f003 0307 	and.w	r3, r3, #7
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db0b      	blt.n	8003e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	4907      	ldr	r1, [pc, #28]	@ (8003ea0 <__NVIC_EnableIRQ+0x38>)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2001      	movs	r0, #1
 8003e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000e100 	.word	0xe000e100

08003ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	6039      	str	r1, [r7, #0]
 8003eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	db0a      	blt.n	8003ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	490c      	ldr	r1, [pc, #48]	@ (8003ef0 <__NVIC_SetPriority+0x4c>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ecc:	e00a      	b.n	8003ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4908      	ldr	r1, [pc, #32]	@ (8003ef4 <__NVIC_SetPriority+0x50>)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3b04      	subs	r3, #4
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	761a      	strb	r2, [r3, #24]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000e100 	.word	0xe000e100
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	@ 0x24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f1c3 0307 	rsb	r3, r3, #7
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	bf28      	it	cs
 8003f16:	2304      	movcs	r3, #4
 8003f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d902      	bls.n	8003f28 <NVIC_EncodePriority+0x30>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3b03      	subs	r3, #3
 8003f26:	e000      	b.n	8003f2a <NVIC_EncodePriority+0x32>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43da      	mvns	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f40:	f04f 31ff 	mov.w	r1, #4294967295
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	43d9      	mvns	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f50:	4313      	orrs	r3, r2
         );
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3724      	adds	r7, #36	@ 0x24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f70:	d301      	bcc.n	8003f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f72:	2301      	movs	r3, #1
 8003f74:	e00f      	b.n	8003f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f76:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa0 <SysTick_Config+0x40>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f7e:	210f      	movs	r1, #15
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295
 8003f84:	f7ff ff8e 	bl	8003ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f88:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <SysTick_Config+0x40>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f8e:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <SysTick_Config+0x40>)
 8003f90:	2207      	movs	r2, #7
 8003f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	e000e010 	.word	0xe000e010

08003fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff29 	bl	8003e04 <__NVIC_SetPriorityGrouping>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fcc:	f7ff ff3e 	bl	8003e4c <__NVIC_GetPriorityGrouping>
 8003fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7ff ff8e 	bl	8003ef8 <NVIC_EncodePriority>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff5d 	bl	8003ea4 <__NVIC_SetPriority>
}
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff31 	bl	8003e68 <__NVIC_EnableIRQ>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ffa2 	bl	8003f60 <SysTick_Config>
 800401c:	4603      	mov	r3, r0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800402a:	f000 f802 	bl	8004032 <HAL_SYSTICK_Callback>
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e098      	b.n	8004184 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4b4d      	ldr	r3, [pc, #308]	@ (8004190 <HAL_DMA_Init+0x150>)
 800405a:	429a      	cmp	r2, r3
 800405c:	d80f      	bhi.n	800407e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	4b4b      	ldr	r3, [pc, #300]	@ (8004194 <HAL_DMA_Init+0x154>)
 8004066:	4413      	add	r3, r2
 8004068:	4a4b      	ldr	r2, [pc, #300]	@ (8004198 <HAL_DMA_Init+0x158>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	009a      	lsls	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a48      	ldr	r2, [pc, #288]	@ (800419c <HAL_DMA_Init+0x15c>)
 800407a:	641a      	str	r2, [r3, #64]	@ 0x40
 800407c:	e00e      	b.n	800409c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b46      	ldr	r3, [pc, #280]	@ (80041a0 <HAL_DMA_Init+0x160>)
 8004086:	4413      	add	r3, r2
 8004088:	4a43      	ldr	r2, [pc, #268]	@ (8004198 <HAL_DMA_Init+0x158>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	009a      	lsls	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a42      	ldr	r2, [pc, #264]	@ (80041a4 <HAL_DMA_Init+0x164>)
 800409a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f6:	d039      	beq.n	800416c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	4a27      	ldr	r2, [pc, #156]	@ (800419c <HAL_DMA_Init+0x15c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d11a      	bne.n	8004138 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004102:	4b29      	ldr	r3, [pc, #164]	@ (80041a8 <HAL_DMA_Init+0x168>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	f003 031c 	and.w	r3, r3, #28
 800410e:	210f      	movs	r1, #15
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	4924      	ldr	r1, [pc, #144]	@ (80041a8 <HAL_DMA_Init+0x168>)
 8004118:	4013      	ands	r3, r2
 800411a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800411c:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <HAL_DMA_Init+0x168>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004128:	f003 031c 	and.w	r3, r3, #28
 800412c:	fa01 f303 	lsl.w	r3, r1, r3
 8004130:	491d      	ldr	r1, [pc, #116]	@ (80041a8 <HAL_DMA_Init+0x168>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
 8004136:	e019      	b.n	800416c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004138:	4b1c      	ldr	r3, [pc, #112]	@ (80041ac <HAL_DMA_Init+0x16c>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004140:	f003 031c 	and.w	r3, r3, #28
 8004144:	210f      	movs	r1, #15
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	4917      	ldr	r1, [pc, #92]	@ (80041ac <HAL_DMA_Init+0x16c>)
 800414e:	4013      	ands	r3, r2
 8004150:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004152:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <HAL_DMA_Init+0x16c>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	f003 031c 	and.w	r3, r3, #28
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	4911      	ldr	r1, [pc, #68]	@ (80041ac <HAL_DMA_Init+0x16c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40020407 	.word	0x40020407
 8004194:	bffdfff8 	.word	0xbffdfff8
 8004198:	cccccccd 	.word	0xcccccccd
 800419c:	40020000 	.word	0x40020000
 80041a0:	bffdfbf8 	.word	0xbffdfbf8
 80041a4:	40020400 	.word	0x40020400
 80041a8:	400200a8 	.word	0x400200a8
 80041ac:	400204a8 	.word	0x400204a8

080041b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_DMA_Start_IT+0x20>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e04b      	b.n	8004268 <HAL_DMA_Start_IT+0xb8>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d13a      	bne.n	800425a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f96b 	bl	80044e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 020e 	orr.w	r2, r2, #14
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e00f      	b.n	8004248 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0204 	bic.w	r2, r2, #4
 8004236:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 020a 	orr.w	r2, r2, #10
 8004246:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e005      	b.n	8004266 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004262:	2302      	movs	r3, #2
 8004264:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d008      	beq.n	800429a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2204      	movs	r2, #4
 800428c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e022      	b.n	80042e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 020e 	bic.w	r2, r2, #14
 80042a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	f003 021c 	and.w	r2, r3, #28
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2101      	movs	r1, #1
 80042c8:	fa01 f202 	lsl.w	r2, r1, r2
 80042cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d005      	beq.n	8004310 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2204      	movs	r2, #4
 8004308:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	e029      	b.n	8004364 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 020e 	bic.w	r2, r2, #14
 800431e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004334:	f003 021c 	and.w	r2, r3, #28
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	2101      	movs	r1, #1
 800433e:	fa01 f202 	lsl.w	r2, r1, r2
 8004342:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
    }
  }
  return status;
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	f003 031c 	and.w	r3, r3, #28
 800438e:	2204      	movs	r2, #4
 8004390:	409a      	lsls	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d026      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7a>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d021      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d107      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0204 	bic.w	r2, r2, #4
 80043c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	f003 021c 	and.w	r2, r3, #28
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	2104      	movs	r1, #4
 80043d0:	fa01 f202 	lsl.w	r2, r1, r2
 80043d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d071      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043e6:	e06c      	b.n	80044c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ec:	f003 031c 	and.w	r3, r3, #28
 80043f0:	2202      	movs	r2, #2
 80043f2:	409a      	lsls	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02e      	beq.n	800445a <HAL_DMA_IRQHandler+0xec>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d029      	beq.n	800445a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020a 	bic.w	r2, r2, #10
 8004422:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	f003 021c 	and.w	r2, r3, #28
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	2102      	movs	r1, #2
 800443a:	fa01 f202 	lsl.w	r2, r1, r2
 800443e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d038      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004458:	e033      	b.n	80044c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f003 031c 	and.w	r3, r3, #28
 8004462:	2208      	movs	r2, #8
 8004464:	409a      	lsls	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4013      	ands	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d02a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x156>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d025      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 020e 	bic.w	r2, r2, #14
 8004486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448c:	f003 021c 	and.w	r2, r3, #28
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	2101      	movs	r1, #1
 8004496:	fa01 f202 	lsl.w	r2, r1, r2
 800449a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
}
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	f003 021c 	and.w	r2, r3, #28
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	2101      	movs	r1, #1
 8004500:	fa01 f202 	lsl.w	r2, r1, r2
 8004504:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b10      	cmp	r3, #16
 8004514:	d108      	bne.n	8004528 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004526:	e007      	b.n	8004538 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004552:	e154      	b.n	80047fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2101      	movs	r1, #1
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8146 	beq.w	80047f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d005      	beq.n	8004584 <HAL_GPIO_Init+0x40>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d130      	bne.n	80045e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	2203      	movs	r2, #3
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ba:	2201      	movs	r2, #1
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0201 	and.w	r2, r3, #1
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d017      	beq.n	8004622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	2203      	movs	r2, #3
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d123      	bne.n	8004676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	08da      	lsrs	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3208      	adds	r2, #8
 8004636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	220f      	movs	r2, #15
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	08da      	lsrs	r2, r3, #3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3208      	adds	r2, #8
 8004670:	6939      	ldr	r1, [r7, #16]
 8004672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2203      	movs	r2, #3
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0203 	and.w	r2, r3, #3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80a0 	beq.w	80047f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b8:	4b58      	ldr	r3, [pc, #352]	@ (800481c <HAL_GPIO_Init+0x2d8>)
 80046ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046bc:	4a57      	ldr	r2, [pc, #348]	@ (800481c <HAL_GPIO_Init+0x2d8>)
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80046c4:	4b55      	ldr	r3, [pc, #340]	@ (800481c <HAL_GPIO_Init+0x2d8>)
 80046c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046d0:	4a53      	ldr	r2, [pc, #332]	@ (8004820 <HAL_GPIO_Init+0x2dc>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3302      	adds	r3, #2
 80046d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	220f      	movs	r2, #15
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046fa:	d019      	beq.n	8004730 <HAL_GPIO_Init+0x1ec>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a49      	ldr	r2, [pc, #292]	@ (8004824 <HAL_GPIO_Init+0x2e0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_GPIO_Init+0x1e8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a48      	ldr	r2, [pc, #288]	@ (8004828 <HAL_GPIO_Init+0x2e4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00d      	beq.n	8004728 <HAL_GPIO_Init+0x1e4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a47      	ldr	r2, [pc, #284]	@ (800482c <HAL_GPIO_Init+0x2e8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <HAL_GPIO_Init+0x1e0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a46      	ldr	r2, [pc, #280]	@ (8004830 <HAL_GPIO_Init+0x2ec>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_GPIO_Init+0x1dc>
 800471c:	2304      	movs	r3, #4
 800471e:	e008      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004720:	2307      	movs	r3, #7
 8004722:	e006      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004724:	2303      	movs	r3, #3
 8004726:	e004      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004728:	2302      	movs	r3, #2
 800472a:	e002      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004730:	2300      	movs	r3, #0
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	f002 0203 	and.w	r2, r2, #3
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	4093      	lsls	r3, r2
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004742:	4937      	ldr	r1, [pc, #220]	@ (8004820 <HAL_GPIO_Init+0x2dc>)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	089b      	lsrs	r3, r3, #2
 8004748:	3302      	adds	r3, #2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004750:	4b38      	ldr	r3, [pc, #224]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004774:	4a2f      	ldr	r2, [pc, #188]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800477a:	4b2e      	ldr	r3, [pc, #184]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800479e:	4a25      	ldr	r2, [pc, #148]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047a4:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047ce:	4b19      	ldr	r3, [pc, #100]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047f2:	4a10      	ldr	r2, [pc, #64]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3301      	adds	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	f47f aea3 	bne.w	8004554 <HAL_GPIO_Init+0x10>
  }
}
 800480e:	bf00      	nop
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40021000 	.word	0x40021000
 8004820:	40010000 	.word	0x40010000
 8004824:	48000400 	.word	0x48000400
 8004828:	48000800 	.word	0x48000800
 800482c:	48000c00 	.word	0x48000c00
 8004830:	48001000 	.word	0x48001000
 8004834:	40010400 	.word	0x40010400

08004838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	e001      	b.n	800485a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	807b      	strh	r3, [r7, #2]
 8004874:	4613      	mov	r3, r2
 8004876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004878:	787b      	ldrb	r3, [r7, #1]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004884:	e002      	b.n	800488c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4013      	ands	r3, r2
 80048b0:	041a      	lsls	r2, r3, #16
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	43d9      	mvns	r1, r3
 80048b6:	887b      	ldrh	r3, [r7, #2]
 80048b8:	400b      	ands	r3, r1
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	619a      	str	r2, [r3, #24]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048d0:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40007000 	.word	0x40007000

080048e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048f6:	d130      	bne.n	800495a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048f8:	4b23      	ldr	r3, [pc, #140]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004904:	d038      	beq.n	8004978 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004906:	4b20      	ldr	r3, [pc, #128]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800490e:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004910:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004914:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004916:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2232      	movs	r2, #50	@ 0x32
 800491c:	fb02 f303 	mul.w	r3, r2, r3
 8004920:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0c9b      	lsrs	r3, r3, #18
 8004928:	3301      	adds	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800492c:	e002      	b.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b01      	subs	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004934:	4b14      	ldr	r3, [pc, #80]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004940:	d102      	bne.n	8004948 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f2      	bne.n	800492e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004948:	4b0f      	ldr	r3, [pc, #60]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004954:	d110      	bne.n	8004978 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e00f      	b.n	800497a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800495a:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004966:	d007      	beq.n	8004978 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004968:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004970:	4a05      	ldr	r2, [pc, #20]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004976:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40007000 	.word	0x40007000
 800498c:	2000000c 	.word	0x2000000c
 8004990:	431bde83 	.word	0x431bde83

08004994 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f000 bc02 	b.w	80051ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a8:	4b96      	ldr	r3, [pc, #600]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b2:	4b94      	ldr	r3, [pc, #592]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80e4 	beq.w	8004b92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4c>
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b0c      	cmp	r3, #12
 80049d4:	f040 808b 	bne.w	8004aee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f040 8087 	bne.w	8004aee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049e0:	4b88      	ldr	r3, [pc, #544]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_OscConfig+0x64>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e3d9      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	4b81      	ldr	r3, [pc, #516]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d004      	beq.n	8004a12 <HAL_RCC_OscConfig+0x7e>
 8004a08:	4b7e      	ldr	r3, [pc, #504]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a10:	e005      	b.n	8004a1e <HAL_RCC_OscConfig+0x8a>
 8004a12:	4b7c      	ldr	r3, [pc, #496]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d223      	bcs.n	8004a6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fd8c 	bl	8005544 <RCC_SetFlashLatencyFromMSIRange>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e3ba      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a36:	4b73      	ldr	r3, [pc, #460]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a72      	ldr	r2, [pc, #456]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a3c:	f043 0308 	orr.w	r3, r3, #8
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b70      	ldr	r3, [pc, #448]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	496d      	ldr	r1, [pc, #436]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a54:	4b6b      	ldr	r3, [pc, #428]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	4968      	ldr	r1, [pc, #416]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
 8004a68:	e025      	b.n	8004ab6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a6a:	4b66      	ldr	r3, [pc, #408]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a65      	ldr	r2, [pc, #404]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a70:	f043 0308 	orr.w	r3, r3, #8
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b63      	ldr	r3, [pc, #396]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4960      	ldr	r1, [pc, #384]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a88:	4b5e      	ldr	r3, [pc, #376]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	495b      	ldr	r1, [pc, #364]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fd4c 	bl	8005544 <RCC_SetFlashLatencyFromMSIRange>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e37a      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ab6:	f000 fc81 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4b51      	ldr	r3, [pc, #324]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	4950      	ldr	r1, [pc, #320]	@ (8004c08 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	5ccb      	ldrb	r3, [r1, r3]
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	4a4e      	ldr	r2, [pc, #312]	@ (8004c0c <HAL_RCC_OscConfig+0x278>)
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8004c10 <HAL_RCC_OscConfig+0x27c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff f912 	bl	8003d04 <HAL_InitTick>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d052      	beq.n	8004b90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	e35e      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d032      	beq.n	8004b5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004af6:	4b43      	ldr	r3, [pc, #268]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a42      	ldr	r2, [pc, #264]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b02:	f7ff f94f 	bl	8003da4 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b0a:	f7ff f94b 	bl	8003da4 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e347      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b1c:	4b39      	ldr	r3, [pc, #228]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b28:	4b36      	ldr	r3, [pc, #216]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a35      	ldr	r2, [pc, #212]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b2e:	f043 0308 	orr.w	r3, r3, #8
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	4b33      	ldr	r3, [pc, #204]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4930      	ldr	r1, [pc, #192]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b46:	4b2f      	ldr	r3, [pc, #188]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	492b      	ldr	r1, [pc, #172]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
 8004b5a:	e01a      	b.n	8004b92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b5c:	4b29      	ldr	r3, [pc, #164]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a28      	ldr	r2, [pc, #160]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b68:	f7ff f91c 	bl	8003da4 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b70:	f7ff f918 	bl	8003da4 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e314      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b82:	4b20      	ldr	r3, [pc, #128]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x1dc>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d073      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x21c>
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d10b      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	4b14      	ldr	r3, [pc, #80]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d063      	beq.n	8004c84 <HAL_RCC_OscConfig+0x2f0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d15f      	bne.n	8004c84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e2f1      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x24c>
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e025      	b.n	8004c2c <HAL_RCC_OscConfig+0x298>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004be8:	d114      	bne.n	8004c14 <HAL_RCC_OscConfig+0x280>
 8004bea:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a05      	ldr	r2, [pc, #20]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b03      	ldr	r3, [pc, #12]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a02      	ldr	r2, [pc, #8]	@ (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e013      	b.n	8004c2c <HAL_RCC_OscConfig+0x298>
 8004c04:	40021000 	.word	0x40021000
 8004c08:	08013350 	.word	0x08013350
 8004c0c:	2000000c 	.word	0x2000000c
 8004c10:	20000038 	.word	0x20000038
 8004c14:	4ba0      	ldr	r3, [pc, #640]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a9f      	ldr	r2, [pc, #636]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b9d      	ldr	r3, [pc, #628]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a9c      	ldr	r2, [pc, #624]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7ff f8b6 	bl	8003da4 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7ff f8b2 	bl	8003da4 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	@ 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e2ae      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4e:	4b92      	ldr	r3, [pc, #584]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x2a8>
 8004c5a:	e014      	b.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7ff f8a2 	bl	8003da4 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c64:	f7ff f89e 	bl	8003da4 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	@ 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e29a      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c76:	4b88      	ldr	r3, [pc, #544]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2d0>
 8004c82:	e000      	b.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d060      	beq.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x310>
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d119      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d116      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca4:	4b7c      	ldr	r3, [pc, #496]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_OscConfig+0x328>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e277      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4b76      	ldr	r3, [pc, #472]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	4973      	ldr	r1, [pc, #460]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd0:	e040      	b.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d023      	beq.n	8004d22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cda:	4b6f      	ldr	r3, [pc, #444]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6e      	ldr	r2, [pc, #440]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7ff f85d 	bl	8003da4 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cee:	f7ff f859 	bl	8003da4 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e255      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d00:	4b65      	ldr	r3, [pc, #404]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0c:	4b62      	ldr	r3, [pc, #392]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	495f      	ldr	r1, [pc, #380]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
 8004d20:	e018      	b.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d22:	4b5d      	ldr	r3, [pc, #372]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5c      	ldr	r2, [pc, #368]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2e:	f7ff f839 	bl	8003da4 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d36:	f7ff f835 	bl	8003da4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e231      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d48:	4b53      	ldr	r3, [pc, #332]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d03c      	beq.n	8004dda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d68:	4b4b      	ldr	r3, [pc, #300]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7ff f814 	bl	8003da4 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d80:	f7ff f810 	bl	8003da4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e20c      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d92:	4b41      	ldr	r3, [pc, #260]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ef      	beq.n	8004d80 <HAL_RCC_OscConfig+0x3ec>
 8004da0:	e01b      	b.n	8004dda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da2:	4b3d      	ldr	r3, [pc, #244]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da8:	4a3b      	ldr	r2, [pc, #236]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db2:	f7fe fff7 	bl	8003da4 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dba:	f7fe fff3 	bl	8003da4 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e1ef      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dcc:	4b32      	ldr	r3, [pc, #200]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1ef      	bne.n	8004dba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80a6 	beq.w	8004f34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dec:	4b2a      	ldr	r3, [pc, #168]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df8:	4b27      	ldr	r3, [pc, #156]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfc:	4a26      	ldr	r2, [pc, #152]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e04:	4b24      	ldr	r3, [pc, #144]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e10:	2301      	movs	r3, #1
 8004e12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e14:	4b21      	ldr	r3, [pc, #132]	@ (8004e9c <HAL_RCC_OscConfig+0x508>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d118      	bne.n	8004e52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e20:	4b1e      	ldr	r3, [pc, #120]	@ (8004e9c <HAL_RCC_OscConfig+0x508>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1d      	ldr	r2, [pc, #116]	@ (8004e9c <HAL_RCC_OscConfig+0x508>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2c:	f7fe ffba 	bl	8003da4 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fe ffb6 	bl	8003da4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e1b2      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <HAL_RCC_OscConfig+0x508>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d108      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4d8>
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	4a0d      	ldr	r2, [pc, #52]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e6a:	e029      	b.n	8004ec0 <HAL_RCC_OscConfig+0x52c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b05      	cmp	r3, #5
 8004e72:	d115      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x50c>
 8004e74:	4b08      	ldr	r3, [pc, #32]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	4a07      	ldr	r2, [pc, #28]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e7c:	f043 0304 	orr.w	r3, r3, #4
 8004e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e84:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8a:	4a03      	ldr	r2, [pc, #12]	@ (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e94:	e014      	b.n	8004ec0 <HAL_RCC_OscConfig+0x52c>
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40007000 	.word	0x40007000
 8004ea0:	4b9a      	ldr	r3, [pc, #616]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea6:	4a99      	ldr	r2, [pc, #612]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb0:	4b96      	ldr	r3, [pc, #600]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	4a95      	ldr	r2, [pc, #596]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004eb8:	f023 0304 	bic.w	r3, r3, #4
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d016      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fe ff6c 	bl	8003da4 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fe ff68 	bl	8003da4 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e162      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	4b89      	ldr	r3, [pc, #548]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ed      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x53c>
 8004ef4:	e015      	b.n	8004f22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef6:	f7fe ff55 	bl	8003da4 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fe ff51 	bl	8003da4 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e14b      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f14:	4b7d      	ldr	r3, [pc, #500]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ed      	bne.n	8004efe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b78      	ldr	r3, [pc, #480]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	4a77      	ldr	r2, [pc, #476]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03c      	beq.n	8004fba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f48:	4b70      	ldr	r3, [pc, #448]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f4e:	4a6f      	ldr	r2, [pc, #444]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fe ff24 	bl	8003da4 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f60:	f7fe ff20 	bl	8003da4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e11c      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f72:	4b66      	ldr	r3, [pc, #408]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ef      	beq.n	8004f60 <HAL_RCC_OscConfig+0x5cc>
 8004f80:	e01b      	b.n	8004fba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f82:	4b62      	ldr	r3, [pc, #392]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f88:	4a60      	ldr	r2, [pc, #384]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fe ff07 	bl	8003da4 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f9a:	f7fe ff03 	bl	8003da4 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0ff      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fac:	4b57      	ldr	r3, [pc, #348]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ef      	bne.n	8004f9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80f3 	beq.w	80051aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	f040 80c9 	bne.w	8005160 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fce:	4b4f      	ldr	r3, [pc, #316]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0203 	and.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d12c      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	3b01      	subs	r3, #1
 8004fee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d123      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d11b      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d113      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	3b01      	subs	r3, #1
 8005022:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d109      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	3b01      	subs	r3, #1
 8005036:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d06b      	beq.n	8005114 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d062      	beq.n	8005108 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005042:	4b32      	ldr	r3, [pc, #200]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e0ac      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005052:	4b2e      	ldr	r3, [pc, #184]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2d      	ldr	r2, [pc, #180]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8005058:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800505c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800505e:	f7fe fea1 	bl	8003da4 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005066:	f7fe fe9d 	bl	8003da4 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e099      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005078:	4b24      	ldr	r3, [pc, #144]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f0      	bne.n	8005066 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005084:	4b21      	ldr	r3, [pc, #132]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	4b21      	ldr	r3, [pc, #132]	@ (8005110 <HAL_RCC_OscConfig+0x77c>)
 800508a:	4013      	ands	r3, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005094:	3a01      	subs	r2, #1
 8005096:	0112      	lsls	r2, r2, #4
 8005098:	4311      	orrs	r1, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800509e:	0212      	lsls	r2, r2, #8
 80050a0:	4311      	orrs	r1, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050a6:	0852      	lsrs	r2, r2, #1
 80050a8:	3a01      	subs	r2, #1
 80050aa:	0552      	lsls	r2, r2, #21
 80050ac:	4311      	orrs	r1, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050b2:	0852      	lsrs	r2, r2, #1
 80050b4:	3a01      	subs	r2, #1
 80050b6:	0652      	lsls	r2, r2, #25
 80050b8:	4311      	orrs	r1, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050be:	06d2      	lsls	r2, r2, #27
 80050c0:	430a      	orrs	r2, r1
 80050c2:	4912      	ldr	r1, [pc, #72]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050c8:	4b10      	ldr	r3, [pc, #64]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a0f      	ldr	r2, [pc, #60]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 80050ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050d4:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a0c      	ldr	r2, [pc, #48]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 80050da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050e0:	f7fe fe60 	bl	8003da4 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fe fe5c 	bl	8003da4 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e058      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fa:	4b04      	ldr	r3, [pc, #16]	@ (800510c <HAL_RCC_OscConfig+0x778>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005106:	e050      	b.n	80051aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e04f      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
 800510c:	40021000 	.word	0x40021000
 8005110:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005114:	4b27      	ldr	r3, [pc, #156]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d144      	bne.n	80051aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005120:	4b24      	ldr	r3, [pc, #144]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a23      	ldr	r2, [pc, #140]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 8005126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800512a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800512c:	4b21      	ldr	r3, [pc, #132]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4a20      	ldr	r2, [pc, #128]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 8005132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005136:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005138:	f7fe fe34 	bl	8003da4 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005140:	f7fe fe30 	bl	8003da4 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e02c      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005152:	4b18      	ldr	r3, [pc, #96]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x7ac>
 800515e:	e024      	b.n	80051aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d01f      	beq.n	80051a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005166:	4b13      	ldr	r3, [pc, #76]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a12      	ldr	r2, [pc, #72]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 800516c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fe fe17 	bl	8003da4 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517a:	f7fe fe13 	bl	8003da4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e00f      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518c:	4b09      	ldr	r3, [pc, #36]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005198:	4b06      	ldr	r3, [pc, #24]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	4905      	ldr	r1, [pc, #20]	@ (80051b4 <HAL_RCC_OscConfig+0x820>)
 800519e:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <HAL_RCC_OscConfig+0x824>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	60cb      	str	r3, [r1, #12]
 80051a4:	e001      	b.n	80051aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3720      	adds	r7, #32
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000
 80051b8:	feeefffc 	.word	0xfeeefffc

080051bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0e7      	b.n	80053a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d0:	4b75      	ldr	r3, [pc, #468]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d910      	bls.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b72      	ldr	r3, [pc, #456]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 0207 	bic.w	r2, r3, #7
 80051e6:	4970      	ldr	r1, [pc, #448]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b6e      	ldr	r3, [pc, #440]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0cf      	b.n	80053a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d010      	beq.n	800522e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	4b66      	ldr	r3, [pc, #408]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005218:	429a      	cmp	r2, r3
 800521a:	d908      	bls.n	800522e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800521c:	4b63      	ldr	r3, [pc, #396]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4960      	ldr	r1, [pc, #384]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d04c      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	4b5a      	ldr	r3, [pc, #360]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d121      	bne.n	8005292 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0a6      	b.n	80053a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800525a:	4b54      	ldr	r3, [pc, #336]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d115      	bne.n	8005292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e09a      	b.n	80053a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d107      	bne.n	8005282 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005272:	4b4e      	ldr	r3, [pc, #312]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e08e      	b.n	80053a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005282:	4b4a      	ldr	r3, [pc, #296]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e086      	b.n	80053a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005292:	4b46      	ldr	r3, [pc, #280]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f023 0203 	bic.w	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4943      	ldr	r1, [pc, #268]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a4:	f7fe fd7e 	bl	8003da4 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ac:	f7fe fd7a 	bl	8003da4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e06e      	b.n	80053a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c2:	4b3a      	ldr	r3, [pc, #232]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 020c 	and.w	r2, r3, #12
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d1eb      	bne.n	80052ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d010      	beq.n	8005302 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	4b31      	ldr	r3, [pc, #196]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d208      	bcs.n	8005302 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f0:	4b2e      	ldr	r3, [pc, #184]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	492b      	ldr	r1, [pc, #172]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005302:	4b29      	ldr	r3, [pc, #164]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d210      	bcs.n	8005332 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005310:	4b25      	ldr	r3, [pc, #148]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f023 0207 	bic.w	r2, r3, #7
 8005318:	4923      	ldr	r1, [pc, #140]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005320:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <HAL_RCC_ClockConfig+0x1ec>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d001      	beq.n	8005332 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e036      	b.n	80053a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800533e:	4b1b      	ldr	r3, [pc, #108]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4918      	ldr	r1, [pc, #96]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800535c:	4b13      	ldr	r3, [pc, #76]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4910      	ldr	r1, [pc, #64]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 800536c:	4313      	orrs	r3, r2
 800536e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005370:	f000 f824 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b0d      	ldr	r3, [pc, #52]	@ (80053ac <HAL_RCC_ClockConfig+0x1f0>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	091b      	lsrs	r3, r3, #4
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	490b      	ldr	r1, [pc, #44]	@ (80053b0 <HAL_RCC_ClockConfig+0x1f4>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
 800538c:	4a09      	ldr	r2, [pc, #36]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f8>)
 800538e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005390:	4b09      	ldr	r3, [pc, #36]	@ (80053b8 <HAL_RCC_ClockConfig+0x1fc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4618      	mov	r0, r3
 8005396:	f7fe fcb5 	bl	8003d04 <HAL_InitTick>
 800539a:	4603      	mov	r3, r0
 800539c:	72fb      	strb	r3, [r7, #11]

  return status;
 800539e:	7afb      	ldrb	r3, [r7, #11]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40022000 	.word	0x40022000
 80053ac:	40021000 	.word	0x40021000
 80053b0:	08013350 	.word	0x08013350
 80053b4:	2000000c 	.word	0x2000000c
 80053b8:	20000038 	.word	0x20000038

080053bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	b089      	sub	sp, #36	@ 0x24
 80053c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ca:	4b3e      	ldr	r3, [pc, #248]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d4:	4b3b      	ldr	r3, [pc, #236]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x34>
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d121      	bne.n	800542e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d11e      	bne.n	800542e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053f0:	4b34      	ldr	r3, [pc, #208]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d107      	bne.n	800540c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053fc:	4b31      	ldr	r3, [pc, #196]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	e005      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800540c:	4b2d      	ldr	r3, [pc, #180]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005418:	4a2b      	ldr	r2, [pc, #172]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005420:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10d      	bne.n	8005444 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800542c:	e00a      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d102      	bne.n	800543a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005434:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x110>)
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e004      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d101      	bne.n	8005444 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005440:	4b23      	ldr	r3, [pc, #140]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005442:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b0c      	cmp	r3, #12
 8005448:	d134      	bne.n	80054b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800544a:	4b1e      	ldr	r3, [pc, #120]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d003      	beq.n	8005462 <HAL_RCC_GetSysClockFreq+0xa6>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d003      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0xac>
 8005460:	e005      	b.n	800546e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005462:	4b1a      	ldr	r3, [pc, #104]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x110>)
 8005464:	617b      	str	r3, [r7, #20]
      break;
 8005466:	e005      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005468:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800546a:	617b      	str	r3, [r7, #20]
      break;
 800546c:	e002      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	617b      	str	r3, [r7, #20]
      break;
 8005472:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005474:	4b13      	ldr	r3, [pc, #76]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	091b      	lsrs	r3, r3, #4
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	3301      	adds	r3, #1
 8005480:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005482:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	fb03 f202 	mul.w	r2, r3, r2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800549a:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	0e5b      	lsrs	r3, r3, #25
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	3301      	adds	r3, #1
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054b4:	69bb      	ldr	r3, [r7, #24]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3724      	adds	r7, #36	@ 0x24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
 80054c8:	08013368 	.word	0x08013368
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	007a1200 	.word	0x007a1200

080054d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000000c 	.word	0x2000000c

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4904      	ldr	r1, [pc, #16]	@ (8005514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000
 8005514:	08013360 	.word	0x08013360

08005518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800551c:	f7ff ffda 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	0adb      	lsrs	r3, r3, #11
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4904      	ldr	r1, [pc, #16]	@ (8005540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000
 8005540:	08013360 	.word	0x08013360

08005544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005550:	4b2a      	ldr	r3, [pc, #168]	@ (80055fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800555c:	f7ff f9b6 	bl	80048cc <HAL_PWREx_GetVoltageRange>
 8005560:	6178      	str	r0, [r7, #20]
 8005562:	e014      	b.n	800558e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005564:	4b25      	ldr	r3, [pc, #148]	@ (80055fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	4a24      	ldr	r2, [pc, #144]	@ (80055fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800556a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005570:	4b22      	ldr	r3, [pc, #136]	@ (80055fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800557c:	f7ff f9a6 	bl	80048cc <HAL_PWREx_GetVoltageRange>
 8005580:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005582:	4b1e      	ldr	r3, [pc, #120]	@ (80055fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005586:	4a1d      	ldr	r2, [pc, #116]	@ (80055fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800558c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005594:	d10b      	bne.n	80055ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b80      	cmp	r3, #128	@ 0x80
 800559a:	d919      	bls.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2ba0      	cmp	r3, #160	@ 0xa0
 80055a0:	d902      	bls.n	80055a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055a2:	2302      	movs	r3, #2
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	e013      	b.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055a8:	2301      	movs	r3, #1
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	e010      	b.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b80      	cmp	r3, #128	@ 0x80
 80055b2:	d902      	bls.n	80055ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80055b4:	2303      	movs	r3, #3
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	e00a      	b.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b80      	cmp	r3, #128	@ 0x80
 80055be:	d102      	bne.n	80055c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055c0:	2302      	movs	r3, #2
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e004      	b.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b70      	cmp	r3, #112	@ 0x70
 80055ca:	d101      	bne.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055cc:	2301      	movs	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f023 0207 	bic.w	r2, r3, #7
 80055d8:	4909      	ldr	r1, [pc, #36]	@ (8005600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055e0:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d001      	beq.n	80055f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000
 8005600:	40022000 	.word	0x40022000

08005604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800560c:	2300      	movs	r3, #0
 800560e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005610:	2300      	movs	r3, #0
 8005612:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800561c:	2b00      	cmp	r3, #0
 800561e:	d031      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005624:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005628:	d01a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800562a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800562e:	d814      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005634:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005638:	d10f      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800563a:	4b5d      	ldr	r3, [pc, #372]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	4a5c      	ldr	r2, [pc, #368]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005644:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005646:	e00c      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fa22 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	74fb      	strb	r3, [r7, #19]
      break;
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005668:	4b51      	ldr	r3, [pc, #324]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005676:	494e      	ldr	r1, [pc, #312]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800567e:	e001      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 809e 	beq.w	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005692:	2300      	movs	r3, #0
 8005694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005696:	4b46      	ldr	r3, [pc, #280]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00d      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	4b40      	ldr	r3, [pc, #256]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b0:	4a3f      	ldr	r2, [pc, #252]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b8:	4b3d      	ldr	r3, [pc, #244]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c4:	2301      	movs	r3, #1
 80056c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056c8:	4b3a      	ldr	r3, [pc, #232]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a39      	ldr	r2, [pc, #228]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056d4:	f7fe fb66 	bl	8003da4 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056da:	e009      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056dc:	f7fe fb62 	bl	8003da4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d902      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	74fb      	strb	r3, [r7, #19]
        break;
 80056ee:	e005      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056f0:	4b30      	ldr	r3, [pc, #192]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ef      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d15a      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005702:	4b2b      	ldr	r3, [pc, #172]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800570c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01e      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	429a      	cmp	r2, r3
 800571c:	d019      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800571e:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005728:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800572a:	4b21      	ldr	r3, [pc, #132]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005730:	4a1f      	ldr	r2, [pc, #124]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800573a:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005740:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005746:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800574a:	4a19      	ldr	r2, [pc, #100]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d016      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fe fb22 	bl	8003da4 <HAL_GetTick>
 8005760:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005762:	e00b      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005764:	f7fe fb1e 	bl	8003da4 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d902      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	74fb      	strb	r3, [r7, #19]
            break;
 800577a:	e006      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577c:	4b0c      	ldr	r3, [pc, #48]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ec      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005790:	4b07      	ldr	r3, [pc, #28]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579e:	4904      	ldr	r1, [pc, #16]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057a6:	e009      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057bc:	7c7b      	ldrb	r3, [r7, #17]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d105      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c2:	4b8d      	ldr	r3, [pc, #564]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c6:	4a8c      	ldr	r2, [pc, #560]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057da:	4b87      	ldr	r3, [pc, #540]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e0:	f023 0203 	bic.w	r2, r3, #3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	4983      	ldr	r1, [pc, #524]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057fc:	4b7e      	ldr	r3, [pc, #504]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005802:	f023 020c 	bic.w	r2, r3, #12
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	497b      	ldr	r1, [pc, #492]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800581e:	4b76      	ldr	r3, [pc, #472]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005824:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	4972      	ldr	r1, [pc, #456]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005840:	4b6d      	ldr	r3, [pc, #436]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005846:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584e:	496a      	ldr	r1, [pc, #424]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005862:	4b65      	ldr	r3, [pc, #404]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005868:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005870:	4961      	ldr	r1, [pc, #388]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005884:	4b5c      	ldr	r3, [pc, #368]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	4959      	ldr	r1, [pc, #356]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058a6:	4b54      	ldr	r3, [pc, #336]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	4950      	ldr	r1, [pc, #320]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058c8:	4b4b      	ldr	r3, [pc, #300]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d6:	4948      	ldr	r1, [pc, #288]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058ea:	4b43      	ldr	r3, [pc, #268]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f8:	493f      	ldr	r1, [pc, #252]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d028      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800590c:	4b3a      	ldr	r3, [pc, #232]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005912:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591a:	4937      	ldr	r1, [pc, #220]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800592a:	d106      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800592c:	4b32      	ldr	r3, [pc, #200]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4a31      	ldr	r2, [pc, #196]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005936:	60d3      	str	r3, [r2, #12]
 8005938:	e011      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800593e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005942:	d10c      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	2101      	movs	r1, #1
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f8a4 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800595a:	7cfb      	ldrb	r3, [r7, #19]
 800595c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d028      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800596a:	4b23      	ldr	r3, [pc, #140]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005970:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005978:	491f      	ldr	r1, [pc, #124]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005988:	d106      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800598a:	4b1b      	ldr	r3, [pc, #108]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	4a1a      	ldr	r2, [pc, #104]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005990:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005994:	60d3      	str	r3, [r2, #12]
 8005996:	e011      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059a0:	d10c      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	2101      	movs	r1, #1
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 f875 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059b2:	7cfb      	ldrb	r3, [r7, #19]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80059b8:	7cfb      	ldrb	r3, [r7, #19]
 80059ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02b      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059c8:	4b0b      	ldr	r3, [pc, #44]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d6:	4908      	ldr	r1, [pc, #32]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059e6:	d109      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e8:	4b03      	ldr	r3, [pc, #12]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4a02      	ldr	r2, [pc, #8]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059f2:	60d3      	str	r3, [r2, #12]
 80059f4:	e014      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f843 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01c      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a2c:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	4916      	ldr	r1, [pc, #88]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a4a:	d10c      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	2102      	movs	r1, #2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f820 	bl	8005a98 <RCCEx_PLLSAI1_Config>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5c:	7cfb      	ldrb	r3, [r7, #19]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8005a62:	7cfb      	ldrb	r3, [r7, #19]
 8005a64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a72:	4b08      	ldr	r3, [pc, #32]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a80:	4904      	ldr	r1, [pc, #16]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a88:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40021000 	.word	0x40021000

08005a98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aa6:	4b74      	ldr	r3, [pc, #464]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d018      	beq.n	8005ae4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ab2:	4b71      	ldr	r3, [pc, #452]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0203 	and.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d10d      	bne.n	8005ade <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005aca:	4b6b      	ldr	r3, [pc, #428]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	091b      	lsrs	r3, r3, #4
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
       ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d047      	beq.n	8005b6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
 8005ae2:	e044      	b.n	8005b6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d018      	beq.n	8005b1e <RCCEx_PLLSAI1_Config+0x86>
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d825      	bhi.n	8005b3c <RCCEx_PLLSAI1_Config+0xa4>
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d002      	beq.n	8005afa <RCCEx_PLLSAI1_Config+0x62>
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d009      	beq.n	8005b0c <RCCEx_PLLSAI1_Config+0x74>
 8005af8:	e020      	b.n	8005b3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005afa:	4b5f      	ldr	r3, [pc, #380]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d11d      	bne.n	8005b42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b0a:	e01a      	b.n	8005b42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d116      	bne.n	8005b46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b1c:	e013      	b.n	8005b46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b1e:	4b56      	ldr	r3, [pc, #344]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10f      	bne.n	8005b4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b2a:	4b53      	ldr	r3, [pc, #332]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b3a:	e006      	b.n	8005b4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b40:	e004      	b.n	8005b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b42:	bf00      	nop
 8005b44:	e002      	b.n	8005b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b46:	bf00      	nop
 8005b48:	e000      	b.n	8005b4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b52:	4b49      	ldr	r3, [pc, #292]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	430b      	orrs	r3, r1
 8005b68:	4943      	ldr	r1, [pc, #268]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d17c      	bne.n	8005c6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b74:	4b40      	ldr	r3, [pc, #256]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a3f      	ldr	r2, [pc, #252]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b80:	f7fe f910 	bl	8003da4 <HAL_GetTick>
 8005b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b86:	e009      	b.n	8005b9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b88:	f7fe f90c 	bl	8003da4 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d902      	bls.n	8005b9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	73fb      	strb	r3, [r7, #15]
        break;
 8005b9a:	e005      	b.n	8005ba8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b9c:	4b36      	ldr	r3, [pc, #216]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ef      	bne.n	8005b88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d15f      	bne.n	8005c6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d110      	bne.n	8005bd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bb4:	4b30      	ldr	r3, [pc, #192]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005bbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6892      	ldr	r2, [r2, #8]
 8005bc4:	0211      	lsls	r1, r2, #8
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68d2      	ldr	r2, [r2, #12]
 8005bca:	06d2      	lsls	r2, r2, #27
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	492a      	ldr	r1, [pc, #168]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	610b      	str	r3, [r1, #16]
 8005bd4:	e027      	b.n	8005c26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d112      	bne.n	8005c02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bdc:	4b26      	ldr	r3, [pc, #152]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005be4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6892      	ldr	r2, [r2, #8]
 8005bec:	0211      	lsls	r1, r2, #8
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6912      	ldr	r2, [r2, #16]
 8005bf2:	0852      	lsrs	r2, r2, #1
 8005bf4:	3a01      	subs	r2, #1
 8005bf6:	0552      	lsls	r2, r2, #21
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	491f      	ldr	r1, [pc, #124]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	610b      	str	r3, [r1, #16]
 8005c00:	e011      	b.n	8005c26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c02:	4b1d      	ldr	r3, [pc, #116]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6892      	ldr	r2, [r2, #8]
 8005c12:	0211      	lsls	r1, r2, #8
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6952      	ldr	r2, [r2, #20]
 8005c18:	0852      	lsrs	r2, r2, #1
 8005c1a:	3a01      	subs	r2, #1
 8005c1c:	0652      	lsls	r2, r2, #25
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	4915      	ldr	r1, [pc, #84]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c26:	4b14      	ldr	r3, [pc, #80]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a13      	ldr	r2, [pc, #76]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c32:	f7fe f8b7 	bl	8003da4 <HAL_GetTick>
 8005c36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c38:	e009      	b.n	8005c4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c3a:	f7fe f8b3 	bl	8003da4 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d902      	bls.n	8005c4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	73fb      	strb	r3, [r7, #15]
          break;
 8005c4c:	e005      	b.n	8005c5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0ef      	beq.n	8005c3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c60:	4b05      	ldr	r3, [pc, #20]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4903      	ldr	r1, [pc, #12]	@ (8005c78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000

08005c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e095      	b.n	8005dba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c9e:	d009      	beq.n	8005cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	61da      	str	r2, [r3, #28]
 8005ca6:	e005      	b.n	8005cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fc fa40 	bl	8002154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cf4:	d902      	bls.n	8005cfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	e002      	b.n	8005d02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d0a:	d007      	beq.n	8005d1c <HAL_SPI_Init+0xa0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d14:	d002      	beq.n	8005d1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5e:	ea42 0103 	orr.w	r1, r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	0c1b      	lsrs	r3, r3, #16
 8005d78:	f003 0204 	and.w	r2, r3, #4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d98:	ea42 0103 	orr.w	r1, r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b08a      	sub	sp, #40	@ 0x28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
 8005dce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dd4:	f7fd ffe6 	bl	8003da4 <HAL_GetTick>
 8005dd8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005de0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005df0:	7ffb      	ldrb	r3, [r7, #31]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d00c      	beq.n	8005e10 <HAL_SPI_TransmitReceive+0x4e>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dfc:	d106      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x4a>
 8005e06:	7ffb      	ldrb	r3, [r7, #31]
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d001      	beq.n	8005e10 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e1f3      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x60>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x60>
 8005e1c:	887b      	ldrh	r3, [r7, #2]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e1e8      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x72>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e1e1      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x436>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d003      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2205      	movs	r2, #5
 8005e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	887a      	ldrh	r2, [r7, #2]
 8005e68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	887a      	ldrh	r2, [r7, #2]
 8005e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	887a      	ldrh	r2, [r7, #2]
 8005e7c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e92:	d802      	bhi.n	8005e9a <HAL_SPI_TransmitReceive+0xd8>
 8005e94:	8abb      	ldrh	r3, [r7, #20]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d908      	bls.n	8005eac <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ea8:	605a      	str	r2, [r3, #4]
 8005eaa:	e007      	b.n	8005ebc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d007      	beq.n	8005eda <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ed8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ee2:	f240 8083 	bls.w	8005fec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_SPI_TransmitReceive+0x132>
 8005eee:	8afb      	ldrh	r3, [r7, #22]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d16f      	bne.n	8005fd4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef8:	881a      	ldrh	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f04:	1c9a      	adds	r2, r3, #2
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f18:	e05c      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d11b      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x19e>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x19e>
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d113      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	881a      	ldrh	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	1c9a      	adds	r2, r3, #2
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d11c      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x1e6>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d016      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	b292      	uxth	r2, r2
 8005f86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fa8:	f7fd fefc 	bl	8003da4 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d80d      	bhi.n	8005fd4 <HAL_SPI_TransmitReceive+0x212>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d009      	beq.n	8005fd4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e111      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d19d      	bne.n	8005f1a <HAL_SPI_TransmitReceive+0x158>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d197      	bne.n	8005f1a <HAL_SPI_TransmitReceive+0x158>
 8005fea:	e0e5      	b.n	80061b8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x23a>
 8005ff4:	8afb      	ldrh	r3, [r7, #22]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	f040 80d1 	bne.w	800619e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d912      	bls.n	800602c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600a:	881a      	ldrh	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b02      	subs	r3, #2
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800602a:	e0b8      	b.n	800619e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006052:	e0a4      	b.n	800619e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d134      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x30a>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d02f      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x30a>
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	2b01      	cmp	r3, #1
 8006070:	d12c      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d912      	bls.n	80060a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006080:	881a      	ldrh	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	1c9a      	adds	r2, r3, #2
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b02      	subs	r3, #2
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060a0:	e012      	b.n	80060c8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	7812      	ldrb	r2, [r2, #0]
 80060ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d148      	bne.n	800616c <HAL_SPI_TransmitReceive+0x3aa>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d042      	beq.n	800616c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d923      	bls.n	800613a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	b292      	uxth	r2, r2
 80060fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b02      	subs	r3, #2
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d81f      	bhi.n	8006168 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006136:	605a      	str	r2, [r3, #4]
 8006138:	e016      	b.n	8006168 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f103 020c 	add.w	r2, r3, #12
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	7812      	ldrb	r2, [r2, #0]
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006168:	2301      	movs	r3, #1
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800616c:	f7fd fe1a 	bl	8003da4 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006178:	429a      	cmp	r2, r3
 800617a:	d803      	bhi.n	8006184 <HAL_SPI_TransmitReceive+0x3c2>
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d102      	bne.n	800618a <HAL_SPI_TransmitReceive+0x3c8>
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e02c      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f47f af55 	bne.w	8006054 <HAL_SPI_TransmitReceive+0x292>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f47f af4e 	bne.w	8006054 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fa5d 	bl	800667c <SPI_EndRxTxTransaction>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e00e      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80061f6:	2300      	movs	r3, #0
  }
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3728      	adds	r7, #40	@ 0x28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10f      	bne.n	8006244 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	099b      	lsrs	r3, r3, #6
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	4798      	blx	r3
    return;
 8006242:	e0d7      	b.n	80063f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <HAL_SPI_IRQHandler+0x66>
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	09db      	lsrs	r3, r3, #7
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
    return;
 8006264:	e0c6      	b.n	80063f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10c      	bne.n	800628c <HAL_SPI_IRQHandler+0x8c>
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	099b      	lsrs	r3, r3, #6
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80b4 	beq.w	80063f4 <HAL_SPI_IRQHandler+0x1f4>
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80ad 	beq.w	80063f4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	099b      	lsrs	r3, r3, #6
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d023      	beq.n	80062ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d011      	beq.n	80062d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062b6:	f043 0204 	orr.w	r2, r3, #4
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	e00b      	b.n	80062ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062d6:	2300      	movs	r3, #0
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	693b      	ldr	r3, [r7, #16]
        return;
 80062ec:	e082      	b.n	80063f4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d014      	beq.n	8006324 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062fe:	f043 0201 	orr.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00c      	beq.n	800634a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006334:	f043 0208 	orr.w	r2, r3, #8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800633c:	2300      	movs	r3, #0
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60bb      	str	r3, [r7, #8]
 8006348:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800634e:	2b00      	cmp	r3, #0
 8006350:	d04f      	beq.n	80063f2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006360:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <HAL_SPI_IRQHandler+0x17e>
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d034      	beq.n	80063e8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0203 	bic.w	r2, r2, #3
 800638c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006392:	2b00      	cmp	r3, #0
 8006394:	d011      	beq.n	80063ba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639a:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <HAL_SPI_IRQHandler+0x1fc>)
 800639c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fd ffa2 	bl	80042ec <HAL_DMA_Abort_IT>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d016      	beq.n	80063f0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c6:	4a0d      	ldr	r2, [pc, #52]	@ (80063fc <HAL_SPI_IRQHandler+0x1fc>)
 80063c8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fd ff8c 	bl	80042ec <HAL_DMA_Abort_IT>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80063e6:	e003      	b.n	80063f0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f809 	bl	8006400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80063ee:	e000      	b.n	80063f2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80063f0:	bf00      	nop
    return;
 80063f2:	bf00      	nop
  }
}
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	08006415 	.word	0x08006415

08006400 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff ffe5 	bl	8006400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006450:	f7fd fca8 	bl	8003da4 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	1a9b      	subs	r3, r3, r2
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	4413      	add	r3, r2
 800645e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006460:	f7fd fca0 	bl	8003da4 <HAL_GetTick>
 8006464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006466:	4b39      	ldr	r3, [pc, #228]	@ (800654c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	015b      	lsls	r3, r3, #5
 800646c:	0d1b      	lsrs	r3, r3, #20
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	fb02 f303 	mul.w	r3, r2, r3
 8006474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006476:	e054      	b.n	8006522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d050      	beq.n	8006522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006480:	f7fd fc90 	bl	8003da4 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	429a      	cmp	r2, r3
 800648e:	d902      	bls.n	8006496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d13d      	bne.n	8006512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ae:	d111      	bne.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b8:	d004      	beq.n	80064c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064c2:	d107      	bne.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064dc:	d10f      	bne.n	80064fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e017      	b.n	8006542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	3b01      	subs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	429a      	cmp	r2, r3
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	429a      	cmp	r2, r3
 800653e:	d19b      	bne.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	2000000c 	.word	0x2000000c

08006550 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	@ 0x28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800655e:	2300      	movs	r3, #0
 8006560:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006562:	f7fd fc1f 	bl	8003da4 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	4413      	add	r3, r2
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006572:	f7fd fc17 	bl	8003da4 <HAL_GetTick>
 8006576:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006580:	4b3d      	ldr	r3, [pc, #244]	@ (8006678 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	00da      	lsls	r2, r3, #3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	0d1b      	lsrs	r3, r3, #20
 8006590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006598:	e060      	b.n	800665c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065a0:	d107      	bne.n	80065b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d050      	beq.n	800665c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065ba:	f7fd fbf3 	bl	8003da4 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d902      	bls.n	80065d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d13d      	bne.n	800664c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065e8:	d111      	bne.n	800660e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f2:	d004      	beq.n	80065fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065fc:	d107      	bne.n	800660e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800660c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006616:	d10f      	bne.n	8006638 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006636:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e010      	b.n	800666e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	3b01      	subs	r3, #1
 800665a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4013      	ands	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d196      	bne.n	800659a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3728      	adds	r7, #40	@ 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	2000000c 	.word	0x2000000c

0800667c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af02      	add	r7, sp, #8
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff ff5b 	bl	8006550 <SPI_WaitFifoStateUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e027      	b.n	8006700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	2180      	movs	r1, #128	@ 0x80
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff fec0 	bl	8006440 <SPI_WaitFlagStateUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e014      	b.n	8006700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff ff34 	bl	8006550 <SPI_WaitFifoStateUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f2:	f043 0220 	orr.w	r2, r3, #32
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e000      	b.n	8006700 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e049      	b.n	80067ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fc f8d6 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f000 fa82 	bl	8006c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d001      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e03b      	b.n	8006848 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a19      	ldr	r2, [pc, #100]	@ (8006854 <HAL_TIM_Base_Start_IT+0x9c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_TIM_Base_Start_IT+0x4e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067fa:	d004      	beq.n	8006806 <HAL_TIM_Base_Start_IT+0x4e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a15      	ldr	r2, [pc, #84]	@ (8006858 <HAL_TIM_Base_Start_IT+0xa0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d115      	bne.n	8006832 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	4b13      	ldr	r3, [pc, #76]	@ (800685c <HAL_TIM_Base_Start_IT+0xa4>)
 800680e:	4013      	ands	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b06      	cmp	r3, #6
 8006816:	d015      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x8c>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800681e:	d011      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006830:	e008      	b.n	8006844 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0201 	orr.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e000      	b.n	8006846 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006844:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40012c00 	.word	0x40012c00
 8006858:	40014000 	.word	0x40014000
 800685c:	00010007 	.word	0x00010007

08006860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d020      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01b      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0202 	mvn.w	r2, #2
 8006894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f9b2 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f9a4 	bl	8006c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9b5 	bl	8006c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d020      	beq.n	8006910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01b      	beq.n	8006910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0204 	mvn.w	r2, #4
 80068e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f98c 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 80068fc:	e005      	b.n	800690a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f97e 	bl	8006c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f98f 	bl	8006c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d020      	beq.n	800695c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01b      	beq.n	800695c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0208 	mvn.w	r2, #8
 800692c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2204      	movs	r2, #4
 8006932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f966 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f958 	bl	8006c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f969 	bl	8006c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0210 	mvn.w	r2, #16
 8006978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2208      	movs	r2, #8
 800697e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f940 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f932 	bl	8006c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f943 	bl	8006c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0201 	mvn.w	r2, #1
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fc ff42 	bl	8003850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d104      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00c      	beq.n	80069fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 faa5 	bl	8006f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00c      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fa9d 	bl	8006f58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00c      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8fd 	bl	8006c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00c      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f06f 0220 	mvn.w	r2, #32
 8006a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fa65 	bl	8006f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_ConfigClockSource+0x1c>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e0b6      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x18a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aa8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006aac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ab4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac6:	d03e      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0xd8>
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006acc:	f200 8087 	bhi.w	8006bde <HAL_TIM_ConfigClockSource+0x170>
 8006ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad4:	f000 8086 	beq.w	8006be4 <HAL_TIM_ConfigClockSource+0x176>
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006adc:	d87f      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x170>
 8006ade:	2b70      	cmp	r3, #112	@ 0x70
 8006ae0:	d01a      	beq.n	8006b18 <HAL_TIM_ConfigClockSource+0xaa>
 8006ae2:	2b70      	cmp	r3, #112	@ 0x70
 8006ae4:	d87b      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x170>
 8006ae6:	2b60      	cmp	r3, #96	@ 0x60
 8006ae8:	d050      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x11e>
 8006aea:	2b60      	cmp	r3, #96	@ 0x60
 8006aec:	d877      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x170>
 8006aee:	2b50      	cmp	r3, #80	@ 0x50
 8006af0:	d03c      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0xfe>
 8006af2:	2b50      	cmp	r3, #80	@ 0x50
 8006af4:	d873      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x170>
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d058      	beq.n	8006bac <HAL_TIM_ConfigClockSource+0x13e>
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d86f      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x170>
 8006afe:	2b30      	cmp	r3, #48	@ 0x30
 8006b00:	d064      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x15e>
 8006b02:	2b30      	cmp	r3, #48	@ 0x30
 8006b04:	d86b      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x170>
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d060      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x15e>
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d867      	bhi.n	8006bde <HAL_TIM_ConfigClockSource+0x170>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d05c      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x15e>
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d05a      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x15e>
 8006b16:	e062      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b28:	f000 f97c 	bl	8006e24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]
      break;
 8006b44:	e04f      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b56:	f000 f965 	bl	8006e24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b68:	609a      	str	r2, [r3, #8]
      break;
 8006b6a:	e03c      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f000 f8d9 	bl	8006d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2150      	movs	r1, #80	@ 0x50
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f932 	bl	8006dee <TIM_ITRx_SetConfig>
      break;
 8006b8a:	e02c      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f000 f8f8 	bl	8006d8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2160      	movs	r1, #96	@ 0x60
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 f922 	bl	8006dee <TIM_ITRx_SetConfig>
      break;
 8006baa:	e01c      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f000 f8b9 	bl	8006d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2140      	movs	r1, #64	@ 0x40
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 f912 	bl	8006dee <TIM_ITRx_SetConfig>
      break;
 8006bca:	e00c      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f000 f909 	bl	8006dee <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e003      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	73fb      	strb	r3, [r7, #15]
      break;
 8006be2:	e000      	b.n	8006be6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006be4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a30      	ldr	r2, [pc, #192]	@ (8006d24 <TIM_Base_SetConfig+0xd4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0x20>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6e:	d108      	bne.n	8006c82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a27      	ldr	r2, [pc, #156]	@ (8006d24 <TIM_Base_SetConfig+0xd4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <TIM_Base_SetConfig+0x52>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c90:	d007      	beq.n	8006ca2 <TIM_Base_SetConfig+0x52>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a24      	ldr	r2, [pc, #144]	@ (8006d28 <TIM_Base_SetConfig+0xd8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_Base_SetConfig+0x52>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a23      	ldr	r2, [pc, #140]	@ (8006d2c <TIM_Base_SetConfig+0xdc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d108      	bne.n	8006cb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a12      	ldr	r2, [pc, #72]	@ (8006d24 <TIM_Base_SetConfig+0xd4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d007      	beq.n	8006cf0 <TIM_Base_SetConfig+0xa0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a11      	ldr	r2, [pc, #68]	@ (8006d28 <TIM_Base_SetConfig+0xd8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_Base_SetConfig+0xa0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a10      	ldr	r2, [pc, #64]	@ (8006d2c <TIM_Base_SetConfig+0xdc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d103      	bne.n	8006cf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d105      	bne.n	8006d16 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f023 0201 	bic.w	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	611a      	str	r2, [r3, #16]
  }
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40014400 	.word	0x40014400

08006d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f023 030a 	bic.w	r3, r3, #10
 8006d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b087      	sub	sp, #28
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f023 0210 	bic.w	r2, r3, #16
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	031b      	lsls	r3, r3, #12
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f043 0307 	orr.w	r3, r3, #7
 8006e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	609a      	str	r2, [r3, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	021a      	lsls	r2, r3, #8
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	609a      	str	r2, [r3, #8]
}
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e04f      	b.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a21      	ldr	r2, [pc, #132]	@ (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d108      	bne.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006eac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a14      	ldr	r2, [pc, #80]	@ (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d009      	beq.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee4:	d004      	beq.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a10      	ldr	r2, [pc, #64]	@ (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10c      	bne.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ef6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	40012c00 	.word	0x40012c00
 8006f2c:	40014000 	.word	0x40014000

08006f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e040      	b.n	8007000 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fb fd16 	bl	80029c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2224      	movs	r2, #36	@ 0x24
 8006f98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0201 	bic.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 ffc0 	bl	8007f38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fd63 	bl	8007a84 <UART_SetConfig>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e01b      	b.n	8007000 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f83f 	bl	800807c <UART_CheckIdleState>
 8006ffe:	4603      	mov	r3, r0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	@ 0x28
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	4613      	mov	r3, r2
 8007016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800701c:	2b20      	cmp	r3, #32
 800701e:	d177      	bne.n	8007110 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <HAL_UART_Transmit+0x24>
 8007026:	88fb      	ldrh	r3, [r7, #6]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e070      	b.n	8007112 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2221      	movs	r2, #33	@ 0x21
 800703c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800703e:	f7fc feb1 	bl	8003da4 <HAL_GetTick>
 8007042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	88fa      	ldrh	r2, [r7, #6]
 8007050:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800705c:	d108      	bne.n	8007070 <HAL_UART_Transmit+0x68>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d104      	bne.n	8007070 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	e003      	b.n	8007078 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007074:	2300      	movs	r3, #0
 8007076:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007078:	e02f      	b.n	80070da <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2200      	movs	r2, #0
 8007082:	2180      	movs	r1, #128	@ 0x80
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f001 f8a1 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e03b      	b.n	8007112 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10b      	bne.n	80070b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	881a      	ldrh	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070ac:	b292      	uxth	r2, r2
 80070ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	3302      	adds	r3, #2
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e007      	b.n	80070c8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1c9      	bne.n	800707a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2200      	movs	r2, #0
 80070ee:	2140      	movs	r1, #64	@ 0x40
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f001 f86b 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e005      	b.n	8007112 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
  }
}
 8007112:	4618      	mov	r0, r3
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	@ 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	4613      	mov	r3, r2
 8007128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800712e:	2b20      	cmp	r3, #32
 8007130:	d165      	bne.n	80071fe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_UART_Transmit_DMA+0x22>
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e05e      	b.n	8007200 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2221      	movs	r2, #33	@ 0x21
 8007164:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716a:	2b00      	cmp	r3, #0
 800716c:	d027      	beq.n	80071be <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007172:	4a25      	ldr	r2, [pc, #148]	@ (8007208 <HAL_UART_Transmit_DMA+0xec>)
 8007174:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717a:	4a24      	ldr	r2, [pc, #144]	@ (800720c <HAL_UART_Transmit_DMA+0xf0>)
 800717c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007182:	4a23      	ldr	r2, [pc, #140]	@ (8007210 <HAL_UART_Transmit_DMA+0xf4>)
 8007184:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718a:	2200      	movs	r2, #0
 800718c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007196:	4619      	mov	r1, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3328      	adds	r3, #40	@ 0x28
 800719e:	461a      	mov	r2, r3
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	f7fd f805 	bl	80041b0 <HAL_DMA_Start_IT>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2210      	movs	r2, #16
 80071b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e020      	b.n	8007200 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2240      	movs	r2, #64	@ 0x40
 80071c4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3308      	adds	r3, #8
 80071cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	613b      	str	r3, [r7, #16]
   return(result);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e6:	623a      	str	r2, [r7, #32]
 80071e8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	69f9      	ldr	r1, [r7, #28]
 80071ec:	6a3a      	ldr	r2, [r7, #32]
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e5      	bne.n	80071c6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e000      	b.n	8007200 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80071fe:	2302      	movs	r3, #2
  }
}
 8007200:	4618      	mov	r0, r3
 8007202:	3728      	adds	r7, #40	@ 0x28
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	080084fd 	.word	0x080084fd
 800720c:	08008597 	.word	0x08008597
 8007210:	0800871d 	.word	0x0800871d

08007214 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	@ 0x28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007228:	2b20      	cmp	r3, #32
 800722a:	d137      	bne.n	800729c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <HAL_UART_Receive_DMA+0x24>
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e030      	b.n	800729e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a18      	ldr	r2, [pc, #96]	@ (80072a8 <HAL_UART_Receive_DMA+0x94>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d01f      	beq.n	800728c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d018      	beq.n	800728c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	613b      	str	r3, [r7, #16]
   return(result);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	623b      	str	r3, [r7, #32]
 800727a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	69f9      	ldr	r1, [r7, #28]
 800727e:	6a3a      	ldr	r2, [r7, #32]
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	61bb      	str	r3, [r7, #24]
   return(result);
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e6      	bne.n	800725a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	461a      	mov	r2, r3
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f001 f808 	bl	80082a8 <UART_Start_Receive_DMA>
 8007298:	4603      	mov	r3, r0
 800729a:	e000      	b.n	800729e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800729c:	2302      	movs	r3, #2
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3728      	adds	r7, #40	@ 0x28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	40008000 	.word	0x40008000

080072ac <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b09a      	sub	sp, #104	@ 0x68
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80072d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e6      	bne.n	80072b4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	f023 0301 	bic.w	r3, r3, #1
 80072fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007306:	643a      	str	r2, [r7, #64]	@ 0x40
 8007308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800730c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e5      	bne.n	80072e6 <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731e:	2b01      	cmp	r3, #1
 8007320:	d118      	bne.n	8007354 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f023 0310 	bic.w	r3, r3, #16
 8007336:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007342:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e6      	bne.n	8007322 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735e:	2b40      	cmp	r3, #64	@ 0x40
 8007360:	d137      	bne.n	80073d2 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	60bb      	str	r3, [r7, #8]
   return(result);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007382:	61ba      	str	r2, [r7, #24]
 8007384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6979      	ldr	r1, [r7, #20]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	613b      	str	r3, [r7, #16]
   return(result);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e5      	bne.n	8007362 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800739a:	2b00      	cmp	r3, #0
 800739c:	d019      	beq.n	80073d2 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a2:	2200      	movs	r2, #0
 80073a4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fc ff60 	bl	8004270 <HAL_DMA_Abort>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fd f886 	bl	80044cc <HAL_DMA_GetError>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d105      	bne.n	80073d2 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2210      	movs	r2, #16
 80073ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e019      	b.n	8007406 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	220f      	movs	r2, #15
 80073e0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	8b1b      	ldrh	r3, [r3, #24]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0208 	orr.w	r2, r2, #8
 80073f2:	b292      	uxth	r2, r2
 80073f4:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3768      	adds	r7, #104	@ 0x68
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b0ba      	sub	sp, #232	@ 0xe8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007436:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800743a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800743e:	4013      	ands	r3, r2
 8007440:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007448:	2b00      	cmp	r3, #0
 800744a:	d115      	bne.n	8007478 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800744c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00f      	beq.n	8007478 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d009      	beq.n	8007478 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 82ca 	beq.w	8007a02 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
      }
      return;
 8007476:	e2c4      	b.n	8007a02 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8117 	beq.w	80076b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800748e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007492:	4b85      	ldr	r3, [pc, #532]	@ (80076a8 <HAL_UART_IRQHandler+0x298>)
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 810a 	beq.w	80076b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d011      	beq.n	80074cc <HAL_UART_IRQHandler+0xbc>
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2201      	movs	r2, #1
 80074ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c2:	f043 0201 	orr.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d011      	beq.n	80074fc <HAL_UART_IRQHandler+0xec>
 80074d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2202      	movs	r2, #2
 80074ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f2:	f043 0204 	orr.w	r2, r3, #4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d011      	beq.n	800752c <HAL_UART_IRQHandler+0x11c>
 8007508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2204      	movs	r2, #4
 800751a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007522:	f043 0202 	orr.w	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800752c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d017      	beq.n	8007568 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007548:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2208      	movs	r2, #8
 8007556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800755e:	f043 0208 	orr.w	r2, r3, #8
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800756c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007570:	2b00      	cmp	r3, #0
 8007572:	d012      	beq.n	800759a <HAL_UART_IRQHandler+0x18a>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007578:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00c      	beq.n	800759a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8230 	beq.w	8007a06 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00d      	beq.n	80075ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e2:	2b40      	cmp	r3, #64	@ 0x40
 80075e4:	d005      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d04f      	beq.n	8007692 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 ff1e 	bl	8008434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007602:	2b40      	cmp	r3, #64	@ 0x40
 8007604:	d141      	bne.n	800768a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800761c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3308      	adds	r3, #8
 800762e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007632:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800763e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800764a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1d9      	bne.n	8007606 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007656:	2b00      	cmp	r3, #0
 8007658:	d013      	beq.n	8007682 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800765e:	4a13      	ldr	r2, [pc, #76]	@ (80076ac <HAL_UART_IRQHandler+0x29c>)
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007666:	4618      	mov	r0, r3
 8007668:	f7fc fe40 	bl	80042ec <HAL_DMA_Abort_IT>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d017      	beq.n	80076a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007680:	e00f      	b.n	80076a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9e8 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007688:	e00b      	b.n	80076a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9e4 	bl	8007a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007690:	e007      	b.n	80076a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f9e0 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80076a0:	e1b1      	b.n	8007a06 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a2:	bf00      	nop
    return;
 80076a4:	e1af      	b.n	8007a06 <HAL_UART_IRQHandler+0x5f6>
 80076a6:	bf00      	nop
 80076a8:	04000120 	.word	0x04000120
 80076ac:	0800879b 	.word	0x0800879b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	f040 816a 	bne.w	800798e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 8163 	beq.w	800798e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 815c 	beq.w	800798e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2210      	movs	r2, #16
 80076dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e8:	2b40      	cmp	r3, #64	@ 0x40
 80076ea:	f040 80d4 	bne.w	8007896 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80ad 	beq.w	800785e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800770a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800770e:	429a      	cmp	r2, r3
 8007710:	f080 80a5 	bcs.w	800785e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800771a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 8086 	bne.w	800783c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800774c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800775a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800775e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007766:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1da      	bne.n	8007730 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800778a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800779e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e1      	bne.n	800777a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3308      	adds	r3, #8
 80077bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800780a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800780c:	f023 0310 	bic.w	r3, r3, #16
 8007810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800781e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007820:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007824:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800782c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e4      	bne.n	80077fc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007836:	4618      	mov	r0, r3
 8007838:	f7fc fd1a 	bl	8004270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800784e:	b29b      	uxth	r3, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	b29b      	uxth	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f908 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800785c:	e0d5      	b.n	8007a0a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007864:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007868:	429a      	cmp	r2, r3
 800786a:	f040 80ce 	bne.w	8007a0a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b20      	cmp	r3, #32
 800787c:	f040 80c5 	bne.w	8007a0a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f8ec 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
      return;
 8007894:	e0b9      	b.n	8007a0a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 80ab 	beq.w	8007a0e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80078b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80a6 	beq.w	8007a0e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e4      	bne.n	80078c2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3308      	adds	r3, #8
 80078fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	623b      	str	r3, [r7, #32]
   return(result);
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	f023 0301 	bic.w	r3, r3, #1
 800790e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3308      	adds	r3, #8
 8007918:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800791c:	633a      	str	r2, [r7, #48]	@ 0x30
 800791e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e3      	bne.n	80078f8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	60fb      	str	r3, [r7, #12]
   return(result);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f023 0310 	bic.w	r3, r3, #16
 8007958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007966:	61fb      	str	r3, [r7, #28]
 8007968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	69b9      	ldr	r1, [r7, #24]
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	617b      	str	r3, [r7, #20]
   return(result);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e4      	bne.n	8007944 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2202      	movs	r2, #2
 800797e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f870 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800798c:	e03f      	b.n	8007a0e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800798e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00e      	beq.n	80079b8 <HAL_UART_IRQHandler+0x5a8>
 800799a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800799e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 ff32 	bl	800881a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079b6:	e02d      	b.n	8007a14 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00e      	beq.n	80079e2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d008      	beq.n	80079e2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01c      	beq.n	8007a12 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3
    }
    return;
 80079e0:	e017      	b.n	8007a12 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d012      	beq.n	8007a14 <HAL_UART_IRQHandler+0x604>
 80079ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00c      	beq.n	8007a14 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fee3 	bl	80087c6 <UART_EndTransmit_IT>
    return;
 8007a00:	e008      	b.n	8007a14 <HAL_UART_IRQHandler+0x604>
      return;
 8007a02:	bf00      	nop
 8007a04:	e006      	b.n	8007a14 <HAL_UART_IRQHandler+0x604>
    return;
 8007a06:	bf00      	nop
 8007a08:	e004      	b.n	8007a14 <HAL_UART_IRQHandler+0x604>
      return;
 8007a0a:	bf00      	nop
 8007a0c:	e002      	b.n	8007a14 <HAL_UART_IRQHandler+0x604>
      return;
 8007a0e:	bf00      	nop
 8007a10:	e000      	b.n	8007a14 <HAL_UART_IRQHandler+0x604>
    return;
 8007a12:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007a14:	37e8      	adds	r7, #232	@ 0xe8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop

08007a1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a88:	b08a      	sub	sp, #40	@ 0x28
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b9e      	ldr	r3, [pc, #632]	@ (8007d2c <UART_SetConfig+0x2a8>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a93      	ldr	r2, [pc, #588]	@ (8007d30 <UART_SetConfig+0x2ac>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aec:	4313      	orrs	r3, r2
 8007aee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b00:	430a      	orrs	r2, r1
 8007b02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a8a      	ldr	r2, [pc, #552]	@ (8007d34 <UART_SetConfig+0x2b0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d126      	bne.n	8007b5c <UART_SetConfig+0xd8>
 8007b0e:	4b8a      	ldr	r3, [pc, #552]	@ (8007d38 <UART_SetConfig+0x2b4>)
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d81b      	bhi.n	8007b54 <UART_SetConfig+0xd0>
 8007b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <UART_SetConfig+0xa0>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007b35 	.word	0x08007b35
 8007b28:	08007b45 	.word	0x08007b45
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b3a:	e0ab      	b.n	8007c94 <UART_SetConfig+0x210>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b42:	e0a7      	b.n	8007c94 <UART_SetConfig+0x210>
 8007b44:	2304      	movs	r3, #4
 8007b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b4a:	e0a3      	b.n	8007c94 <UART_SetConfig+0x210>
 8007b4c:	2308      	movs	r3, #8
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b52:	e09f      	b.n	8007c94 <UART_SetConfig+0x210>
 8007b54:	2310      	movs	r3, #16
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5a:	e09b      	b.n	8007c94 <UART_SetConfig+0x210>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a76      	ldr	r2, [pc, #472]	@ (8007d3c <UART_SetConfig+0x2b8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d138      	bne.n	8007bd8 <UART_SetConfig+0x154>
 8007b66:	4b74      	ldr	r3, [pc, #464]	@ (8007d38 <UART_SetConfig+0x2b4>)
 8007b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6c:	f003 030c 	and.w	r3, r3, #12
 8007b70:	2b0c      	cmp	r3, #12
 8007b72:	d82d      	bhi.n	8007bd0 <UART_SetConfig+0x14c>
 8007b74:	a201      	add	r2, pc, #4	@ (adr r2, 8007b7c <UART_SetConfig+0xf8>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007bb1 	.word	0x08007bb1
 8007b80:	08007bd1 	.word	0x08007bd1
 8007b84:	08007bd1 	.word	0x08007bd1
 8007b88:	08007bd1 	.word	0x08007bd1
 8007b8c:	08007bc1 	.word	0x08007bc1
 8007b90:	08007bd1 	.word	0x08007bd1
 8007b94:	08007bd1 	.word	0x08007bd1
 8007b98:	08007bd1 	.word	0x08007bd1
 8007b9c:	08007bb9 	.word	0x08007bb9
 8007ba0:	08007bd1 	.word	0x08007bd1
 8007ba4:	08007bd1 	.word	0x08007bd1
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bc9 	.word	0x08007bc9
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bb6:	e06d      	b.n	8007c94 <UART_SetConfig+0x210>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bbe:	e069      	b.n	8007c94 <UART_SetConfig+0x210>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bc6:	e065      	b.n	8007c94 <UART_SetConfig+0x210>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bce:	e061      	b.n	8007c94 <UART_SetConfig+0x210>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bd6:	e05d      	b.n	8007c94 <UART_SetConfig+0x210>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a58      	ldr	r2, [pc, #352]	@ (8007d40 <UART_SetConfig+0x2bc>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d125      	bne.n	8007c2e <UART_SetConfig+0x1aa>
 8007be2:	4b55      	ldr	r3, [pc, #340]	@ (8007d38 <UART_SetConfig+0x2b4>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bec:	2b30      	cmp	r3, #48	@ 0x30
 8007bee:	d016      	beq.n	8007c1e <UART_SetConfig+0x19a>
 8007bf0:	2b30      	cmp	r3, #48	@ 0x30
 8007bf2:	d818      	bhi.n	8007c26 <UART_SetConfig+0x1a2>
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d00a      	beq.n	8007c0e <UART_SetConfig+0x18a>
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d814      	bhi.n	8007c26 <UART_SetConfig+0x1a2>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <UART_SetConfig+0x182>
 8007c00:	2b10      	cmp	r3, #16
 8007c02:	d008      	beq.n	8007c16 <UART_SetConfig+0x192>
 8007c04:	e00f      	b.n	8007c26 <UART_SetConfig+0x1a2>
 8007c06:	2300      	movs	r3, #0
 8007c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c0c:	e042      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c14:	e03e      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c16:	2304      	movs	r3, #4
 8007c18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c1c:	e03a      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c1e:	2308      	movs	r3, #8
 8007c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c24:	e036      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c26:	2310      	movs	r3, #16
 8007c28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c2c:	e032      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a3f      	ldr	r2, [pc, #252]	@ (8007d30 <UART_SetConfig+0x2ac>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d12a      	bne.n	8007c8e <UART_SetConfig+0x20a>
 8007c38:	4b3f      	ldr	r3, [pc, #252]	@ (8007d38 <UART_SetConfig+0x2b4>)
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c46:	d01a      	beq.n	8007c7e <UART_SetConfig+0x1fa>
 8007c48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c4c:	d81b      	bhi.n	8007c86 <UART_SetConfig+0x202>
 8007c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c52:	d00c      	beq.n	8007c6e <UART_SetConfig+0x1ea>
 8007c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c58:	d815      	bhi.n	8007c86 <UART_SetConfig+0x202>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <UART_SetConfig+0x1e2>
 8007c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c62:	d008      	beq.n	8007c76 <UART_SetConfig+0x1f2>
 8007c64:	e00f      	b.n	8007c86 <UART_SetConfig+0x202>
 8007c66:	2300      	movs	r3, #0
 8007c68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c6c:	e012      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c74:	e00e      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c76:	2304      	movs	r3, #4
 8007c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c7c:	e00a      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c7e:	2308      	movs	r3, #8
 8007c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c84:	e006      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c86:	2310      	movs	r3, #16
 8007c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c8c:	e002      	b.n	8007c94 <UART_SetConfig+0x210>
 8007c8e:	2310      	movs	r3, #16
 8007c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a25      	ldr	r2, [pc, #148]	@ (8007d30 <UART_SetConfig+0x2ac>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	f040 808a 	bne.w	8007db4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d824      	bhi.n	8007cf2 <UART_SetConfig+0x26e>
 8007ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb0 <UART_SetConfig+0x22c>)
 8007caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cae:	bf00      	nop
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007cf3 	.word	0x08007cf3
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007cf3 	.word	0x08007cf3
 8007cc0:	08007ce3 	.word	0x08007ce3
 8007cc4:	08007cf3 	.word	0x08007cf3
 8007cc8:	08007cf3 	.word	0x08007cf3
 8007ccc:	08007cf3 	.word	0x08007cf3
 8007cd0:	08007ceb 	.word	0x08007ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd4:	f7fd fc0a 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8007cd8:	61f8      	str	r0, [r7, #28]
        break;
 8007cda:	e010      	b.n	8007cfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cdc:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <UART_SetConfig+0x2c0>)
 8007cde:	61fb      	str	r3, [r7, #28]
        break;
 8007ce0:	e00d      	b.n	8007cfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce2:	f7fd fb6b 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 8007ce6:	61f8      	str	r0, [r7, #28]
        break;
 8007ce8:	e009      	b.n	8007cfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cee:	61fb      	str	r3, [r7, #28]
        break;
 8007cf0:	e005      	b.n	8007cfe <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8109 	beq.w	8007f18 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	4413      	add	r3, r2
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d305      	bcc.n	8007d22 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d912      	bls.n	8007d48 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d28:	e0f6      	b.n	8007f18 <UART_SetConfig+0x494>
 8007d2a:	bf00      	nop
 8007d2c:	efff69f3 	.word	0xefff69f3
 8007d30:	40008000 	.word	0x40008000
 8007d34:	40013800 	.word	0x40013800
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	40004400 	.word	0x40004400
 8007d40:	40004800 	.word	0x40004800
 8007d44:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	461c      	mov	r4, r3
 8007d4e:	4615      	mov	r5, r2
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	022b      	lsls	r3, r5, #8
 8007d5a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007d5e:	0222      	lsls	r2, r4, #8
 8007d60:	68f9      	ldr	r1, [r7, #12]
 8007d62:	6849      	ldr	r1, [r1, #4]
 8007d64:	0849      	lsrs	r1, r1, #1
 8007d66:	2000      	movs	r0, #0
 8007d68:	4688      	mov	r8, r1
 8007d6a:	4681      	mov	r9, r0
 8007d6c:	eb12 0a08 	adds.w	sl, r2, r8
 8007d70:	eb43 0b09 	adc.w	fp, r3, r9
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d82:	4650      	mov	r0, sl
 8007d84:	4659      	mov	r1, fp
 8007d86:	f7f8 ff8f 	bl	8000ca8 <__aeabi_uldivmod>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4613      	mov	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d98:	d308      	bcc.n	8007dac <UART_SetConfig+0x328>
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007da0:	d204      	bcs.n	8007dac <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	60da      	str	r2, [r3, #12]
 8007daa:	e0b5      	b.n	8007f18 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007db2:	e0b1      	b.n	8007f18 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dbc:	d15d      	bne.n	8007e7a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007dbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d827      	bhi.n	8007e16 <UART_SetConfig+0x392>
 8007dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dcc <UART_SetConfig+0x348>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007df1 	.word	0x08007df1
 8007dd0:	08007df9 	.word	0x08007df9
 8007dd4:	08007e01 	.word	0x08007e01
 8007dd8:	08007e17 	.word	0x08007e17
 8007ddc:	08007e07 	.word	0x08007e07
 8007de0:	08007e17 	.word	0x08007e17
 8007de4:	08007e17 	.word	0x08007e17
 8007de8:	08007e17 	.word	0x08007e17
 8007dec:	08007e0f 	.word	0x08007e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007df0:	f7fd fb7c 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8007df4:	61f8      	str	r0, [r7, #28]
        break;
 8007df6:	e014      	b.n	8007e22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007df8:	f7fd fb8e 	bl	8005518 <HAL_RCC_GetPCLK2Freq>
 8007dfc:	61f8      	str	r0, [r7, #28]
        break;
 8007dfe:	e010      	b.n	8007e22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e00:	4b4c      	ldr	r3, [pc, #304]	@ (8007f34 <UART_SetConfig+0x4b0>)
 8007e02:	61fb      	str	r3, [r7, #28]
        break;
 8007e04:	e00d      	b.n	8007e22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e06:	f7fd fad9 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 8007e0a:	61f8      	str	r0, [r7, #28]
        break;
 8007e0c:	e009      	b.n	8007e22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e12:	61fb      	str	r3, [r7, #28]
        break;
 8007e14:	e005      	b.n	8007e22 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d077      	beq.n	8007f18 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	005a      	lsls	r2, r3, #1
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	441a      	add	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b0f      	cmp	r3, #15
 8007e42:	d916      	bls.n	8007e72 <UART_SetConfig+0x3ee>
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e4a:	d212      	bcs.n	8007e72 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	f023 030f 	bic.w	r3, r3, #15
 8007e54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	085b      	lsrs	r3, r3, #1
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	8afb      	ldrh	r3, [r7, #22]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	8afa      	ldrh	r2, [r7, #22]
 8007e6e:	60da      	str	r2, [r3, #12]
 8007e70:	e052      	b.n	8007f18 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e78:	e04e      	b.n	8007f18 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d827      	bhi.n	8007ed2 <UART_SetConfig+0x44e>
 8007e82:	a201      	add	r2, pc, #4	@ (adr r2, 8007e88 <UART_SetConfig+0x404>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007eb5 	.word	0x08007eb5
 8007e90:	08007ebd 	.word	0x08007ebd
 8007e94:	08007ed3 	.word	0x08007ed3
 8007e98:	08007ec3 	.word	0x08007ec3
 8007e9c:	08007ed3 	.word	0x08007ed3
 8007ea0:	08007ed3 	.word	0x08007ed3
 8007ea4:	08007ed3 	.word	0x08007ed3
 8007ea8:	08007ecb 	.word	0x08007ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eac:	f7fd fb1e 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8007eb0:	61f8      	str	r0, [r7, #28]
        break;
 8007eb2:	e014      	b.n	8007ede <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb4:	f7fd fb30 	bl	8005518 <HAL_RCC_GetPCLK2Freq>
 8007eb8:	61f8      	str	r0, [r7, #28]
        break;
 8007eba:	e010      	b.n	8007ede <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8007f34 <UART_SetConfig+0x4b0>)
 8007ebe:	61fb      	str	r3, [r7, #28]
        break;
 8007ec0:	e00d      	b.n	8007ede <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec2:	f7fd fa7b 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 8007ec6:	61f8      	str	r0, [r7, #28]
        break;
 8007ec8:	e009      	b.n	8007ede <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ece:	61fb      	str	r3, [r7, #28]
        break;
 8007ed0:	e005      	b.n	8007ede <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007edc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d019      	beq.n	8007f18 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	085a      	lsrs	r2, r3, #1
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	441a      	add	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	2b0f      	cmp	r3, #15
 8007efc:	d909      	bls.n	8007f12 <UART_SetConfig+0x48e>
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f04:	d205      	bcs.n	8007f12 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60da      	str	r2, [r3, #12]
 8007f10:	e002      	b.n	8007f18 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007f24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3728      	adds	r7, #40	@ 0x28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f32:	bf00      	nop
 8007f34:	00f42400 	.word	0x00f42400

08007f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00a      	beq.n	8007fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fcc:	f003 0310 	and.w	r3, r3, #16
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01a      	beq.n	800804e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008036:	d10a      	bne.n	800804e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
  }
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b098      	sub	sp, #96	@ 0x60
 8008080:	af02      	add	r7, sp, #8
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800808c:	f7fb fe8a 	bl	8003da4 <HAL_GetTick>
 8008090:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b08      	cmp	r3, #8
 800809e:	d12e      	bne.n	80080fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a8:	2200      	movs	r2, #0
 80080aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f88c 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d021      	beq.n	80080fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e6      	bne.n	80080ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e062      	b.n	80081c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b04      	cmp	r3, #4
 800810a:	d149      	bne.n	80081a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800810c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008114:	2200      	movs	r2, #0
 8008116:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f856 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d03c      	beq.n	80081a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	623b      	str	r3, [r7, #32]
   return(result);
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800813a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	461a      	mov	r2, r3
 8008142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008144:	633b      	str	r3, [r7, #48]	@ 0x30
 8008146:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800814a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e6      	bne.n	8008126 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	60fb      	str	r3, [r7, #12]
   return(result);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0301 	bic.w	r3, r3, #1
 800816e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008178:	61fa      	str	r2, [r7, #28]
 800817a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	69b9      	ldr	r1, [r7, #24]
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	617b      	str	r3, [r7, #20]
   return(result);
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2220      	movs	r2, #32
 8008190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e011      	b.n	80081c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3758      	adds	r7, #88	@ 0x58
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081dc:	e04f      	b.n	800827e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d04b      	beq.n	800827e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081e6:	f7fb fddd 	bl	8003da4 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d302      	bcc.n	80081fc <UART_WaitOnFlagUntilTimeout+0x30>
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e04e      	b.n	800829e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d037      	beq.n	800827e <UART_WaitOnFlagUntilTimeout+0xb2>
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b80      	cmp	r3, #128	@ 0x80
 8008212:	d034      	beq.n	800827e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b40      	cmp	r3, #64	@ 0x40
 8008218:	d031      	beq.n	800827e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	f003 0308 	and.w	r3, r3, #8
 8008224:	2b08      	cmp	r3, #8
 8008226:	d110      	bne.n	800824a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2208      	movs	r2, #8
 800822e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 f8ff 	bl	8008434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2208      	movs	r2, #8
 800823a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e029      	b.n	800829e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008258:	d111      	bne.n	800827e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f8e5 	bl	8008434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2220      	movs	r2, #32
 800826e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e00f      	b.n	800829e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	4013      	ands	r3, r2
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	429a      	cmp	r2, r3
 800828c:	bf0c      	ite	eq
 800828e:	2301      	moveq	r3, #1
 8008290:	2300      	movne	r3, #0
 8008292:	b2db      	uxtb	r3, r3
 8008294:	461a      	mov	r2, r3
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	429a      	cmp	r2, r3
 800829a:	d0a0      	beq.n	80081de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b096      	sub	sp, #88	@ 0x58
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	88fa      	ldrh	r2, [r7, #6]
 80082c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2222      	movs	r2, #34	@ 0x22
 80082d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d028      	beq.n	800832e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e0:	4a3e      	ldr	r2, [pc, #248]	@ (80083dc <UART_Start_Receive_DMA+0x134>)
 80082e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e8:	4a3d      	ldr	r2, [pc, #244]	@ (80083e0 <UART_Start_Receive_DMA+0x138>)
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f0:	4a3c      	ldr	r2, [pc, #240]	@ (80083e4 <UART_Start_Receive_DMA+0x13c>)
 80082f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f8:	2200      	movs	r2, #0
 80082fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3324      	adds	r3, #36	@ 0x24
 8008306:	4619      	mov	r1, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800830c:	461a      	mov	r2, r3
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	f7fb ff4e 	bl	80041b0 <HAL_DMA_Start_IT>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2210      	movs	r2, #16
 800831e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e051      	b.n	80083d2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d018      	beq.n	8008368 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800834a:	657b      	str	r3, [r7, #84]	@ 0x54
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008356:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800835a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008388:	637a      	str	r2, [r7, #52]	@ 0x34
 800838a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800838e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e5      	bne.n	8008368 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3308      	adds	r3, #8
 80083a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	613b      	str	r3, [r7, #16]
   return(result);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3308      	adds	r3, #8
 80083ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083bc:	623a      	str	r2, [r7, #32]
 80083be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	69f9      	ldr	r1, [r7, #28]
 80083c2:	6a3a      	ldr	r2, [r7, #32]
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e5      	bne.n	800839c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3758      	adds	r7, #88	@ 0x58
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	080085b3 	.word	0x080085b3
 80083e0:	080086df 	.word	0x080086df
 80083e4:	0800871d 	.word	0x0800871d

080083e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b089      	sub	sp, #36	@ 0x24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	61bb      	str	r3, [r7, #24]
 8008410:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6979      	ldr	r1, [r7, #20]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	613b      	str	r3, [r7, #16]
   return(result);
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008428:	bf00      	nop
 800842a:	3724      	adds	r7, #36	@ 0x24
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b095      	sub	sp, #84	@ 0x54
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800845a:	643b      	str	r3, [r7, #64]	@ 0x40
 800845c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e6      	bne.n	800843c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	61fb      	str	r3, [r7, #28]
   return(result);
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800848e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e5      	bne.n	800846e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d118      	bne.n	80084dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f023 0310 	bic.w	r3, r3, #16
 80084be:	647b      	str	r3, [r7, #68]	@ 0x44
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	613b      	str	r3, [r7, #16]
   return(result);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80084f0:	bf00      	nop
 80084f2:	3754      	adds	r7, #84	@ 0x54
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b090      	sub	sp, #64	@ 0x40
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008508:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d137      	bne.n	8008588 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800851a:	2200      	movs	r2, #0
 800851c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3308      	adds	r3, #8
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	623b      	str	r3, [r7, #32]
   return(result);
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008536:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008540:	633a      	str	r2, [r7, #48]	@ 0x30
 8008542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800854e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e5      	bne.n	8008520 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	60fb      	str	r3, [r7, #12]
   return(result);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008568:	637b      	str	r3, [r7, #52]	@ 0x34
 800856a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008572:	61fb      	str	r3, [r7, #28]
 8008574:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	69b9      	ldr	r1, [r7, #24]
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	617b      	str	r3, [r7, #20]
   return(result);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e6      	bne.n	8008554 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008586:	e002      	b.n	800858e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008588:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800858a:	f7fb fadf 	bl	8003b4c <HAL_UART_TxCpltCallback>
}
 800858e:	bf00      	nop
 8008590:	3740      	adds	r7, #64	@ 0x40
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff fa39 	bl	8007a1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b09c      	sub	sp, #112	@ 0x70
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085be:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d171      	bne.n	80086b2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80085ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e6      	bne.n	80085d6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008628:	647a      	str	r2, [r7, #68]	@ 0x44
 800862a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800862e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	623b      	str	r3, [r7, #32]
   return(result);
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008652:	663b      	str	r3, [r7, #96]	@ 0x60
 8008654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3308      	adds	r3, #8
 800865a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800865c:	633a      	str	r2, [r7, #48]	@ 0x30
 800865e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008672:	2220      	movs	r2, #32
 8008674:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800867a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800867c:	2b01      	cmp	r3, #1
 800867e:	d118      	bne.n	80086b2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	60fb      	str	r3, [r7, #12]
   return(result);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f023 0310 	bic.w	r3, r3, #16
 8008694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	69b9      	ldr	r1, [r7, #24]
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	617b      	str	r3, [r7, #20]
   return(result);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e6      	bne.n	8008680 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086b4:	2200      	movs	r2, #0
 80086b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d107      	bne.n	80086d0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086c6:	4619      	mov	r1, r3
 80086c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086ca:	f7ff f9cf 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086ce:	e002      	b.n	80086d6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80086d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086d2:	f7ff f9ad 	bl	8007a30 <HAL_UART_RxCpltCallback>
}
 80086d6:	bf00      	nop
 80086d8:	3770      	adds	r7, #112	@ 0x70
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d109      	bne.n	800870e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	b29b      	uxth	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff f9b0 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800870c:	e002      	b.n	8008714 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff f998 	bl	8007a44 <HAL_UART_RxHalfCpltCallback>
}
 8008714:	bf00      	nop
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008728:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800872e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008736:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008742:	2b80      	cmp	r3, #128	@ 0x80
 8008744:	d109      	bne.n	800875a <UART_DMAError+0x3e>
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b21      	cmp	r3, #33	@ 0x21
 800874a:	d106      	bne.n	800875a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008754:	6978      	ldr	r0, [r7, #20]
 8008756:	f7ff fe47 	bl	80083e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008764:	2b40      	cmp	r3, #64	@ 0x40
 8008766:	d109      	bne.n	800877c <UART_DMAError+0x60>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b22      	cmp	r3, #34	@ 0x22
 800876c:	d106      	bne.n	800877c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008776:	6978      	ldr	r0, [r7, #20]
 8008778:	f7ff fe5c 	bl	8008434 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008782:	f043 0210 	orr.w	r2, r3, #16
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878c:	6978      	ldr	r0, [r7, #20]
 800878e:	f7ff f963 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff f94d 	bl	8007a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b088      	sub	sp, #32
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	60bb      	str	r3, [r7, #8]
   return(result);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	613b      	str	r3, [r7, #16]
   return(result);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e6      	bne.n	80087ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7fb f99d 	bl	8003b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008812:	bf00      	nop
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
	...

08008830 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008834:	4904      	ldr	r1, [pc, #16]	@ (8008848 <MX_FATFS_Init+0x18>)
 8008836:	4805      	ldr	r0, [pc, #20]	@ (800884c <MX_FATFS_Init+0x1c>)
 8008838:	f006 f80c 	bl	800e854 <FATFS_LinkDriver>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	4b03      	ldr	r3, [pc, #12]	@ (8008850 <MX_FATFS_Init+0x20>)
 8008842:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008844:	bf00      	nop
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20001210 	.word	0x20001210
 800884c:	20000040 	.word	0x20000040
 8008850:	2000120c 	.word	0x2000120c

08008854 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008858:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800885a:	4618      	mov	r0, r3
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USER_initialize>:
};

DSTATUS USER_initialize (
	BYTE pdrv
)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
	res = SD_Init();
 800886e:	f7f8 feb9 	bl	80015e4 <SD_Init>
 8008872:	4603      	mov	r3, r0
 8008874:	73fb      	strb	r3, [r7, #15]
	if(res)
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d008      	beq.n	800888e <USER_initialize+0x2a>
	{
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800887c:	4b09      	ldr	r3, [pc, #36]	@ (80088a4 <USER_initialize+0x40>)
 800887e:	2238      	movs	r2, #56	@ 0x38
 8008880:	61da      	str	r2, [r3, #28]
		SPI_TransmitReceive(0xFF);
 8008882:	20ff      	movs	r0, #255	@ 0xff
 8008884:	f7f8 fe2e 	bl	80014e4 <SPI_TransmitReceive>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008888:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <USER_initialize+0x40>)
 800888a:	2200      	movs	r2, #0
 800888c:	61da      	str	r2, [r3, #28]
	}
	if(res)
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <USER_initialize+0x34>
		return  STA_NOINIT;
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <USER_initialize+0x36>
	else
		return RES_OK;
 8008898:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000a5c 	.word	0x20000a5c

080088a8 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv
)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	71fb      	strb	r3, [r7, #7]
	switch (pdrv)
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <USER_status+0x16>
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d002      	beq.n	80088c2 <USER_status+0x1a>
 80088bc:	e003      	b.n	80088c6 <USER_status+0x1e>
	{
		case 0 :
			return RES_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	e002      	b.n	80088c8 <USER_status+0x20>
		case 1 :
			return RES_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	e000      	b.n	80088c8 <USER_status+0x20>
		default:
			return STA_NOINIT;
 80088c6:	2301      	movs	r3, #1
	}
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <USER_read>:
	BYTE pdrv,
	BYTE *buff,
	DWORD sector,
	UINT count
)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]
	uint8_t res;
  if(count == 0)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <USER_read+0x1a>
	  return RES_PARERR;
 80088ea:	2304      	movs	r3, #4
 80088ec:	e013      	b.n	8008916 <USER_read+0x42>
  switch (pdrv)
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10f      	bne.n	8008914 <USER_read+0x40>
  	{
	case 0:
	{
		res=SD_ReadDisk(buff,sector,count);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	68b8      	ldr	r0, [r7, #8]
 80088fe:	f7f8 fff1 	bl	80018e4 <SD_ReadDisk>
 8008902:	4603      	mov	r3, r0
 8008904:	75fb      	strb	r3, [r7, #23]
		if(res == 0)
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <USER_read+0x3c>
			return RES_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	e002      	b.n	8008916 <USER_read+0x42>
		else
			return RES_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <USER_read+0x42>
	}
	default:
		return RES_ERROR;
 8008914:	2301      	movs	r3, #1
  	}
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USER_write>:
	BYTE pdrv,
	const BYTE *buff,
	DWORD sector,
	UINT count
)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b086      	sub	sp, #24
 8008922:	af00      	add	r7, sp, #0
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
 800892a:	4603      	mov	r3, r0
 800892c:	73fb      	strb	r3, [r7, #15]
	uint8_t  res;
	if( !count )
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <USER_write+0x1a>
	{
		return RES_PARERR;
 8008934:	2304      	movs	r3, #4
 8008936:	e013      	b.n	8008960 <USER_write+0x42>
	}
	switch (pdrv)
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10f      	bne.n	800895e <USER_write+0x40>
	{
		case 0:
			res=SD_WriteDisk((uint8_t *)buff,sector,count);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	b2db      	uxtb	r3, r3
 8008942:	461a      	mov	r2, r3
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	68b8      	ldr	r0, [r7, #8]
 8008948:	f7f9 f824 	bl	8001994 <SD_WriteDisk>
 800894c:	4603      	mov	r3, r0
 800894e:	75fb      	strb	r3, [r7, #23]
				if(res == 0)
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <USER_write+0x3c>
					return RES_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	e002      	b.n	8008960 <USER_write+0x42>
				else
					return RES_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <USER_write+0x42>
		default:return RES_ERROR;
 800895e:	2301      	movs	r3, #1
	}
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,
	BYTE cmd,
	void *buff
)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	4603      	mov	r3, r0
 8008970:	603a      	str	r2, [r7, #0]
 8008972:	71fb      	strb	r3, [r7, #7]
 8008974:	460b      	mov	r3, r1
 8008976:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	 switch(cmd)
 8008978:	79bb      	ldrb	r3, [r7, #6]
 800897a:	2b03      	cmp	r3, #3
 800897c:	d837      	bhi.n	80089ee <USER_ioctl+0x86>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <USER_ioctl+0x1c>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	08008995 	.word	0x08008995
 8008988:	080089df 	.word	0x080089df
 800898c:	080089c5 	.word	0x080089c5
 8008990:	080089d3 	.word	0x080089d3
		{
			case CTRL_SYNC:
				SD_CS_LOW();
 8008994:	2200      	movs	r2, #0
 8008996:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800899a:	4819      	ldr	r0, [pc, #100]	@ (8008a00 <USER_ioctl+0x98>)
 800899c:	f7fb ff64 	bl	8004868 <HAL_GPIO_WritePin>
				do{
					HAL_Delay(20);
 80089a0:	2014      	movs	r0, #20
 80089a2:	f7fb fa0b 	bl	8003dbc <HAL_Delay>
				}while(SPI_TransmitReceive(0xFF)!=0xFF);
 80089a6:	20ff      	movs	r0, #255	@ 0xff
 80089a8:	f7f8 fd9c 	bl	80014e4 <SPI_TransmitReceive>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2bff      	cmp	r3, #255	@ 0xff
 80089b0:	d1f6      	bne.n	80089a0 <USER_ioctl+0x38>
				res=RES_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
				SD_CS_HIGH();
 80089b6:	2201      	movs	r2, #1
 80089b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80089bc:	4810      	ldr	r0, [pc, #64]	@ (8008a00 <USER_ioctl+0x98>)
 80089be:	f7fb ff53 	bl	8004868 <HAL_GPIO_WritePin>
				break;
 80089c2:	e017      	b.n	80089f4 <USER_ioctl+0x8c>
			case GET_SECTOR_SIZE:
				*(WORD*)buff = 512;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089ca:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
				break;
 80089d0:	e010      	b.n	80089f4 <USER_ioctl+0x8c>
			case GET_BLOCK_SIZE:
				*(WORD*)buff = 8;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2208      	movs	r2, #8
 80089d6:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
				break;
 80089dc:	e00a      	b.n	80089f4 <USER_ioctl+0x8c>
			case GET_SECTOR_COUNT:
				*(DWORD*)buff = SD_GetSectorCount();
 80089de:	f7f9 f86d 	bl	8001abc <SD_GetSectorCount>
 80089e2:	4602      	mov	r2, r0
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
				break;
 80089ec:	e002      	b.n	80089f4 <USER_ioctl+0x8c>
			default:
				res = RES_PARERR;
 80089ee:	2304      	movs	r3, #4
 80089f0:	73fb      	strb	r3, [r7, #15]
				break;
 80089f2:	bf00      	nop
		}
		return res;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	48000400 	.word	0x48000400

08008a04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	4a08      	ldr	r2, [pc, #32]	@ (8008a34 <disk_status+0x30>)
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	79fa      	ldrb	r2, [r7, #7]
 8008a1c:	4905      	ldr	r1, [pc, #20]	@ (8008a34 <disk_status+0x30>)
 8008a1e:	440a      	add	r2, r1
 8008a20:	7a12      	ldrb	r2, [r2, #8]
 8008a22:	4610      	mov	r0, r2
 8008a24:	4798      	blx	r3
 8008a26:	4603      	mov	r3, r0
 8008a28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	2000123c 	.word	0x2000123c

08008a38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	4a0d      	ldr	r2, [pc, #52]	@ (8008a80 <disk_initialize+0x48>)
 8008a4a:	5cd3      	ldrb	r3, [r2, r3]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d111      	bne.n	8008a74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	4a0b      	ldr	r2, [pc, #44]	@ (8008a80 <disk_initialize+0x48>)
 8008a54:	2101      	movs	r1, #1
 8008a56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	4a09      	ldr	r2, [pc, #36]	@ (8008a80 <disk_initialize+0x48>)
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	79fa      	ldrb	r2, [r7, #7]
 8008a66:	4906      	ldr	r1, [pc, #24]	@ (8008a80 <disk_initialize+0x48>)
 8008a68:	440a      	add	r2, r1
 8008a6a:	7a12      	ldrb	r2, [r2, #8]
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	2000123c 	.word	0x2000123c

08008a84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a84:	b590      	push	{r4, r7, lr}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	4603      	mov	r3, r0
 8008a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac0 <disk_read+0x3c>)
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	689c      	ldr	r4, [r3, #8]
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	4a07      	ldr	r2, [pc, #28]	@ (8008ac0 <disk_read+0x3c>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	7a18      	ldrb	r0, [r3, #8]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	68b9      	ldr	r1, [r7, #8]
 8008aae:	47a0      	blx	r4
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	371c      	adds	r7, #28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd90      	pop	{r4, r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	2000123c 	.word	0x2000123c

08008ac4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008ac4:	b590      	push	{r4, r7, lr}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b00 <disk_write+0x3c>)
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68dc      	ldr	r4, [r3, #12]
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	4a07      	ldr	r2, [pc, #28]	@ (8008b00 <disk_write+0x3c>)
 8008ae4:	4413      	add	r3, r2
 8008ae6:	7a18      	ldrb	r0, [r3, #8]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	47a0      	blx	r4
 8008af0:	4603      	mov	r3, r0
 8008af2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd90      	pop	{r4, r7, pc}
 8008afe:	bf00      	nop
 8008b00:	2000123c 	.word	0x2000123c

08008b04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	603a      	str	r2, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
 8008b10:	460b      	mov	r3, r1
 8008b12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	4a09      	ldr	r2, [pc, #36]	@ (8008b3c <disk_ioctl+0x38>)
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	79fa      	ldrb	r2, [r7, #7]
 8008b22:	4906      	ldr	r1, [pc, #24]	@ (8008b3c <disk_ioctl+0x38>)
 8008b24:	440a      	add	r2, r1
 8008b26:	7a10      	ldrb	r0, [r2, #8]
 8008b28:	79b9      	ldrb	r1, [r7, #6]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	4798      	blx	r3
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73fb      	strb	r3, [r7, #15]
  return res;
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	2000123c 	.word	0x2000123c

08008b40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b54:	021b      	lsls	r3, r3, #8
 8008b56:	b21a      	sxth	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	b21b      	sxth	r3, r3
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b21b      	sxth	r3, r3
 8008b62:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b64:	89fb      	ldrh	r3, [r7, #14]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3303      	adds	r3, #3
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	021b      	lsls	r3, r3, #8
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	3202      	adds	r2, #2
 8008b8a:	7812      	ldrb	r2, [r2, #0]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	3201      	adds	r2, #1
 8008b98:	7812      	ldrb	r2, [r2, #0]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	021b      	lsls	r3, r3, #8
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	7812      	ldrb	r2, [r2, #0]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
	return rv;
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8008bb8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008bbc:	b09d      	sub	sp, #116	@ 0x74
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8008bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bc4:	3307      	adds	r3, #7
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2200      	movs	r2, #0
 8008bcc:	469a      	mov	sl, r3
 8008bce:	4693      	mov	fp, r2
 8008bd0:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8008bd4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008bd8:	f04f 0000 	mov.w	r0, #0
 8008bdc:	f04f 0100 	mov.w	r1, #0
 8008be0:	0219      	lsls	r1, r3, #8
 8008be2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008be6:	0210      	lsls	r0, r2, #8
 8008be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bea:	3306      	adds	r3, #6
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	461c      	mov	r4, r3
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	ea40 0804 	orr.w	r8, r0, r4
 8008bfa:	ea41 0905 	orr.w	r9, r1, r5
 8008bfe:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8008c02:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008c06:	f04f 0000 	mov.w	r0, #0
 8008c0a:	f04f 0100 	mov.w	r1, #0
 8008c0e:	0219      	lsls	r1, r3, #8
 8008c10:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008c14:	0210      	lsls	r0, r2, #8
 8008c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c18:	3305      	adds	r3, #5
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2200      	movs	r2, #0
 8008c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008c24:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8008c28:	4623      	mov	r3, r4
 8008c2a:	4303      	orrs	r3, r0
 8008c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c2e:	462b      	mov	r3, r5
 8008c30:	430b      	orrs	r3, r1
 8008c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c34:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008c38:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8008c3c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008c40:	f04f 0000 	mov.w	r0, #0
 8008c44:	f04f 0100 	mov.w	r1, #0
 8008c48:	0219      	lsls	r1, r3, #8
 8008c4a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008c4e:	0210      	lsls	r0, r2, #8
 8008c50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c52:	3304      	adds	r3, #4
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2200      	movs	r2, #0
 8008c5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c5c:	657a      	str	r2, [r7, #84]	@ 0x54
 8008c5e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8008c62:	4623      	mov	r3, r4
 8008c64:	4303      	orrs	r3, r0
 8008c66:	623b      	str	r3, [r7, #32]
 8008c68:	462b      	mov	r3, r5
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c6e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008c72:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8008c76:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008c7a:	f04f 0000 	mov.w	r0, #0
 8008c7e:	f04f 0100 	mov.w	r1, #0
 8008c82:	0219      	lsls	r1, r3, #8
 8008c84:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008c88:	0210      	lsls	r0, r2, #8
 8008c8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c8c:	3303      	adds	r3, #3
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2200      	movs	r2, #0
 8008c94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c96:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008c98:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	4303      	orrs	r3, r0
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	462b      	mov	r3, r5
 8008ca4:	430b      	orrs	r3, r1
 8008ca6:	61fb      	str	r3, [r7, #28]
 8008ca8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008cac:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8008cb0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f04f 0100 	mov.w	r1, #0
 8008cbc:	0219      	lsls	r1, r3, #8
 8008cbe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008cc2:	0210      	lsls	r0, r2, #8
 8008cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cc6:	3302      	adds	r3, #2
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2200      	movs	r2, #0
 8008cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cd0:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cd2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	4303      	orrs	r3, r0
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	462b      	mov	r3, r5
 8008cde:	430b      	orrs	r3, r1
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008ce6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8008cea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	020b      	lsls	r3, r1, #8
 8008cf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cfc:	0202      	lsls	r2, r0, #8
 8008cfe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d00:	3101      	adds	r1, #1
 8008d02:	7809      	ldrb	r1, [r1, #0]
 8008d04:	b2c9      	uxtb	r1, r1
 8008d06:	2000      	movs	r0, #0
 8008d08:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008d0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008d0c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8008d10:	4621      	mov	r1, r4
 8008d12:	4311      	orrs	r1, r2
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4629      	mov	r1, r5
 8008d18:	4319      	orrs	r1, r3
 8008d1a:	60f9      	str	r1, [r7, #12]
 8008d1c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008d20:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8008d24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d28:	f04f 0200 	mov.w	r2, #0
 8008d2c:	f04f 0300 	mov.w	r3, #0
 8008d30:	020b      	lsls	r3, r1, #8
 8008d32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d36:	0202      	lsls	r2, r0, #8
 8008d38:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d3a:	7809      	ldrb	r1, [r1, #0]
 8008d3c:	b2c9      	uxtb	r1, r1
 8008d3e:	2000      	movs	r0, #0
 8008d40:	6339      	str	r1, [r7, #48]	@ 0x30
 8008d42:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4311      	orrs	r1, r2
 8008d4c:	6039      	str	r1, [r7, #0]
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4319      	orrs	r1, r3
 8008d52:	6079      	str	r1, [r7, #4]
 8008d54:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008d58:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8008d5c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8008d60:	4610      	mov	r0, r2
 8008d62:	4619      	mov	r1, r3
 8008d64:	3774      	adds	r7, #116	@ 0x74
 8008d66:	46bd      	mov	sp, r7
 8008d68:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d6c:	4770      	bx	lr

08008d6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	887a      	ldrh	r2, [r7, #2]
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	887b      	ldrh	r3, [r7, #2]
 8008d88:	0a1b      	lsrs	r3, r3, #8
 8008d8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	607a      	str	r2, [r7, #4]
 8008d92:	887a      	ldrh	r2, [r7, #2]
 8008d94:	b2d2      	uxtb	r2, r2
 8008d96:	701a      	strb	r2, [r3, #0]
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	0a1b      	lsrs	r3, r3, #8
 8008dbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	0a1b      	lsrs	r3, r3, #8
 8008de2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	607a      	str	r2, [r7, #4]
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	b2d2      	uxtb	r2, r2
 8008dee:	701a      	strb	r2, [r3, #0]
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	60fa      	str	r2, [r7, #12]
 8008e0e:	783a      	ldrb	r2, [r7, #0]
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	f04f 0300 	mov.w	r3, #0
 8008e1e:	0a02      	lsrs	r2, r0, #8
 8008e20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e24:	0a0b      	lsrs	r3, r1, #8
 8008e26:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	60fa      	str	r2, [r7, #12]
 8008e30:	783a      	ldrb	r2, [r7, #0]
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	f04f 0300 	mov.w	r3, #0
 8008e40:	0a02      	lsrs	r2, r0, #8
 8008e42:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e46:	0a0b      	lsrs	r3, r1, #8
 8008e48:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	60fa      	str	r2, [r7, #12]
 8008e52:	783a      	ldrb	r2, [r7, #0]
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e5a:	f04f 0200 	mov.w	r2, #0
 8008e5e:	f04f 0300 	mov.w	r3, #0
 8008e62:	0a02      	lsrs	r2, r0, #8
 8008e64:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e68:	0a0b      	lsrs	r3, r1, #8
 8008e6a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	60fa      	str	r2, [r7, #12]
 8008e74:	783a      	ldrb	r2, [r7, #0]
 8008e76:	701a      	strb	r2, [r3, #0]
 8008e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	0a02      	lsrs	r2, r0, #8
 8008e86:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008e8a:	0a0b      	lsrs	r3, r1, #8
 8008e8c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	60fa      	str	r2, [r7, #12]
 8008e96:	783a      	ldrb	r2, [r7, #0]
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e9e:	f04f 0200 	mov.w	r2, #0
 8008ea2:	f04f 0300 	mov.w	r3, #0
 8008ea6:	0a02      	lsrs	r2, r0, #8
 8008ea8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008eac:	0a0b      	lsrs	r3, r1, #8
 8008eae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	60fa      	str	r2, [r7, #12]
 8008eb8:	783a      	ldrb	r2, [r7, #0]
 8008eba:	701a      	strb	r2, [r3, #0]
 8008ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	0a02      	lsrs	r2, r0, #8
 8008eca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008ece:	0a0b      	lsrs	r3, r1, #8
 8008ed0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	60fa      	str	r2, [r7, #12]
 8008eda:	783a      	ldrb	r2, [r7, #0]
 8008edc:	701a      	strb	r2, [r3, #0]
 8008ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	0a02      	lsrs	r2, r0, #8
 8008eec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008ef0:	0a0b      	lsrs	r3, r1, #8
 8008ef2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	60fa      	str	r2, [r7, #12]
 8008efc:	783a      	ldrb	r2, [r7, #0]
 8008efe:	701a      	strb	r2, [r3, #0]
}
 8008f00:	bf00      	nop
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	1c53      	adds	r3, r2, #1
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	1c59      	adds	r1, r3, #1
 8008f30:	6179      	str	r1, [r7, #20]
 8008f32:	7812      	ldrb	r2, [r2, #0]
 8008f34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	607b      	str	r3, [r7, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f1      	bne.n	8008f26 <mem_cpy+0x1a>
	}
}
 8008f42:	bf00      	nop
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f4e:	b480      	push	{r7}
 8008f50:	b087      	sub	sp, #28
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	617a      	str	r2, [r7, #20]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	607b      	str	r3, [r7, #4]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1f3      	bne.n	8008f5e <mem_set+0x10>
}
 8008f76:	bf00      	nop
 8008f78:	bf00      	nop
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008f84:	b480      	push	{r7}
 8008f86:	b089      	sub	sp, #36	@ 0x24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	61fa      	str	r2, [r7, #28]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	61ba      	str	r2, [r7, #24]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	1acb      	subs	r3, r1, r3
 8008fb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	607b      	str	r3, [r7, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <mem_cmp+0x40>
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0eb      	beq.n	8008f9c <mem_cmp+0x18>

	return r;
 8008fc4:	697b      	ldr	r3, [r7, #20]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3724      	adds	r7, #36	@ 0x24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008fdc:	e002      	b.n	8008fe4 <chk_chr+0x12>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	607b      	str	r3, [r7, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <chk_chr+0x26>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d1f2      	bne.n	8008fde <chk_chr+0xc>
	return *str;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009012:	2300      	movs	r3, #0
 8009014:	60bb      	str	r3, [r7, #8]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	e029      	b.n	8009070 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800901c:	4a27      	ldr	r2, [pc, #156]	@ (80090bc <chk_lock+0xb4>)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	4413      	add	r3, r2
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d01d      	beq.n	8009066 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800902a:	4a24      	ldr	r2, [pc, #144]	@ (80090bc <chk_lock+0xb4>)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	4413      	add	r3, r2
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	429a      	cmp	r2, r3
 800903a:	d116      	bne.n	800906a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800903c:	4a1f      	ldr	r2, [pc, #124]	@ (80090bc <chk_lock+0xb4>)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	011b      	lsls	r3, r3, #4
 8009042:	4413      	add	r3, r2
 8009044:	3304      	adds	r3, #4
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800904c:	429a      	cmp	r2, r3
 800904e:	d10c      	bne.n	800906a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009050:	4a1a      	ldr	r2, [pc, #104]	@ (80090bc <chk_lock+0xb4>)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	4413      	add	r3, r2
 8009058:	3308      	adds	r3, #8
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8009060:	429a      	cmp	r2, r3
 8009062:	d102      	bne.n	800906a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009064:	e007      	b.n	8009076 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009066:	2301      	movs	r3, #1
 8009068:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3301      	adds	r3, #1
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d9d2      	bls.n	800901c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d109      	bne.n	8009090 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <chk_lock+0x80>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d101      	bne.n	800908c <chk_lock+0x84>
 8009088:	2300      	movs	r3, #0
 800908a:	e010      	b.n	80090ae <chk_lock+0xa6>
 800908c:	2312      	movs	r3, #18
 800908e:	e00e      	b.n	80090ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d108      	bne.n	80090a8 <chk_lock+0xa0>
 8009096:	4a09      	ldr	r2, [pc, #36]	@ (80090bc <chk_lock+0xb4>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	4413      	add	r3, r2
 800909e:	330c      	adds	r3, #12
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090a6:	d101      	bne.n	80090ac <chk_lock+0xa4>
 80090a8:	2310      	movs	r3, #16
 80090aa:	e000      	b.n	80090ae <chk_lock+0xa6>
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	2000121c 	.word	0x2000121c

080090c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090c6:	2300      	movs	r3, #0
 80090c8:	607b      	str	r3, [r7, #4]
 80090ca:	e002      	b.n	80090d2 <enq_lock+0x12>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3301      	adds	r3, #1
 80090d0:	607b      	str	r3, [r7, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d806      	bhi.n	80090e6 <enq_lock+0x26>
 80090d8:	4a09      	ldr	r2, [pc, #36]	@ (8009100 <enq_lock+0x40>)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	4413      	add	r3, r2
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1f2      	bne.n	80090cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	bf14      	ite	ne
 80090ec:	2301      	movne	r3, #1
 80090ee:	2300      	moveq	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	2000121c 	.word	0x2000121c

08009104 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e01f      	b.n	8009154 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009114:	4a41      	ldr	r2, [pc, #260]	@ (800921c <inc_lock+0x118>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	4413      	add	r3, r2
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	429a      	cmp	r2, r3
 8009124:	d113      	bne.n	800914e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009126:	4a3d      	ldr	r2, [pc, #244]	@ (800921c <inc_lock+0x118>)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	4413      	add	r3, r2
 800912e:	3304      	adds	r3, #4
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009136:	429a      	cmp	r2, r3
 8009138:	d109      	bne.n	800914e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800913a:	4a38      	ldr	r2, [pc, #224]	@ (800921c <inc_lock+0x118>)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	4413      	add	r3, r2
 8009142:	3308      	adds	r3, #8
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800914a:	429a      	cmp	r2, r3
 800914c:	d006      	beq.n	800915c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d9dc      	bls.n	8009114 <inc_lock+0x10>
 800915a:	e000      	b.n	800915e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800915c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b02      	cmp	r3, #2
 8009162:	d132      	bne.n	80091ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	e002      	b.n	8009170 <inc_lock+0x6c>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3301      	adds	r3, #1
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d806      	bhi.n	8009184 <inc_lock+0x80>
 8009176:	4a29      	ldr	r2, [pc, #164]	@ (800921c <inc_lock+0x118>)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	4413      	add	r3, r2
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1f2      	bne.n	800916a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b02      	cmp	r3, #2
 8009188:	d101      	bne.n	800918e <inc_lock+0x8a>
 800918a:	2300      	movs	r3, #0
 800918c:	e040      	b.n	8009210 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4922      	ldr	r1, [pc, #136]	@ (800921c <inc_lock+0x118>)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	011b      	lsls	r3, r3, #4
 8009198:	440b      	add	r3, r1
 800919a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	491e      	ldr	r1, [pc, #120]	@ (800921c <inc_lock+0x118>)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	440b      	add	r3, r1
 80091a8:	3304      	adds	r3, #4
 80091aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091b0:	491a      	ldr	r1, [pc, #104]	@ (800921c <inc_lock+0x118>)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	011b      	lsls	r3, r3, #4
 80091b6:	440b      	add	r3, r1
 80091b8:	3308      	adds	r3, #8
 80091ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80091bc:	4a17      	ldr	r2, [pc, #92]	@ (800921c <inc_lock+0x118>)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	011b      	lsls	r3, r3, #4
 80091c2:	4413      	add	r3, r2
 80091c4:	330c      	adds	r3, #12
 80091c6:	2200      	movs	r2, #0
 80091c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d009      	beq.n	80091e4 <inc_lock+0xe0>
 80091d0:	4a12      	ldr	r2, [pc, #72]	@ (800921c <inc_lock+0x118>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	4413      	add	r3, r2
 80091d8:	330c      	adds	r3, #12
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <inc_lock+0xe0>
 80091e0:	2300      	movs	r3, #0
 80091e2:	e015      	b.n	8009210 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d108      	bne.n	80091fc <inc_lock+0xf8>
 80091ea:	4a0c      	ldr	r2, [pc, #48]	@ (800921c <inc_lock+0x118>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	4413      	add	r3, r2
 80091f2:	330c      	adds	r3, #12
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	e001      	b.n	8009200 <inc_lock+0xfc>
 80091fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009200:	4906      	ldr	r1, [pc, #24]	@ (800921c <inc_lock+0x118>)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	440b      	add	r3, r1
 8009208:	330c      	adds	r3, #12
 800920a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3301      	adds	r3, #1
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	2000121c 	.word	0x2000121c

08009220 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3b01      	subs	r3, #1
 800922c:	607b      	str	r3, [r7, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d825      	bhi.n	8009280 <dec_lock+0x60>
		n = Files[i].ctr;
 8009234:	4a17      	ldr	r2, [pc, #92]	@ (8009294 <dec_lock+0x74>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	4413      	add	r3, r2
 800923c:	330c      	adds	r3, #12
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009242:	89fb      	ldrh	r3, [r7, #14]
 8009244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009248:	d101      	bne.n	800924e <dec_lock+0x2e>
 800924a:	2300      	movs	r3, #0
 800924c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800924e:	89fb      	ldrh	r3, [r7, #14]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <dec_lock+0x3a>
 8009254:	89fb      	ldrh	r3, [r7, #14]
 8009256:	3b01      	subs	r3, #1
 8009258:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800925a:	4a0e      	ldr	r2, [pc, #56]	@ (8009294 <dec_lock+0x74>)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	4413      	add	r3, r2
 8009262:	330c      	adds	r3, #12
 8009264:	89fa      	ldrh	r2, [r7, #14]
 8009266:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009268:	89fb      	ldrh	r3, [r7, #14]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <dec_lock+0x5a>
 800926e:	4a09      	ldr	r2, [pc, #36]	@ (8009294 <dec_lock+0x74>)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	4413      	add	r3, r2
 8009276:	2200      	movs	r2, #0
 8009278:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	737b      	strb	r3, [r7, #13]
 800927e:	e001      	b.n	8009284 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009280:	2302      	movs	r3, #2
 8009282:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009284:	7b7b      	ldrb	r3, [r7, #13]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	2000121c 	.word	0x2000121c

08009298 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80092a0:	2300      	movs	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e010      	b.n	80092c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80092a6:	4a0d      	ldr	r2, [pc, #52]	@ (80092dc <clear_lock+0x44>)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	4413      	add	r3, r2
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d105      	bne.n	80092c2 <clear_lock+0x2a>
 80092b6:	4a09      	ldr	r2, [pc, #36]	@ (80092dc <clear_lock+0x44>)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	4413      	add	r3, r2
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d9eb      	bls.n	80092a6 <clear_lock+0xe>
	}
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	2000121c 	.word	0x2000121c

080092e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	78db      	ldrb	r3, [r3, #3]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d034      	beq.n	800935e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	7858      	ldrb	r0, [r3, #1]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009304:	2301      	movs	r3, #1
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	f7ff fbdc 	bl	8008ac4 <disk_write>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009312:	2301      	movs	r3, #1
 8009314:	73fb      	strb	r3, [r7, #15]
 8009316:	e022      	b.n	800935e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	1ad2      	subs	r2, r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	429a      	cmp	r2, r3
 800932c:	d217      	bcs.n	800935e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	789b      	ldrb	r3, [r3, #2]
 8009332:	613b      	str	r3, [r7, #16]
 8009334:	e010      	b.n	8009358 <sync_window+0x78>
					wsect += fs->fsize;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	4413      	add	r3, r2
 800933e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7858      	ldrb	r0, [r3, #1]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800934a:	2301      	movs	r3, #1
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	f7ff fbb9 	bl	8008ac4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	3b01      	subs	r3, #1
 8009356:	613b      	str	r3, [r7, #16]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d8eb      	bhi.n	8009336 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d01b      	beq.n	80093b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ffad 	bl	80092e0 <sync_window>
 8009386:	4603      	mov	r3, r0
 8009388:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800938a:	7bfb      	ldrb	r3, [r7, #15]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d113      	bne.n	80093b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7858      	ldrb	r0, [r3, #1]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800939a:	2301      	movs	r3, #1
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	f7ff fb71 	bl	8008a84 <disk_read>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d004      	beq.n	80093b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80093a8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff ff87 	bl	80092e0 <sync_window>
 80093d2:	4603      	mov	r3, r0
 80093d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d158      	bne.n	800948e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d148      	bne.n	8009476 <sync_fs+0xb2>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	791b      	ldrb	r3, [r3, #4]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d144      	bne.n	8009476 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3338      	adds	r3, #56	@ 0x38
 80093f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093f4:	2100      	movs	r1, #0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fda9 	bl	8008f4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3338      	adds	r3, #56	@ 0x38
 8009400:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009404:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009408:	4618      	mov	r0, r3
 800940a:	f7ff fcb0 	bl	8008d6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3338      	adds	r3, #56	@ 0x38
 8009412:	4921      	ldr	r1, [pc, #132]	@ (8009498 <sync_fs+0xd4>)
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff fcc5 	bl	8008da4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3338      	adds	r3, #56	@ 0x38
 800941e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009422:	491e      	ldr	r1, [pc, #120]	@ (800949c <sync_fs+0xd8>)
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff fcbd 	bl	8008da4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3338      	adds	r3, #56	@ 0x38
 800942e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7ff fcb3 	bl	8008da4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3338      	adds	r3, #56	@ 0x38
 8009442:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	4619      	mov	r1, r3
 800944c:	4610      	mov	r0, r2
 800944e:	f7ff fca9 	bl	8008da4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	7858      	ldrb	r0, [r3, #1]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800946a:	2301      	movs	r3, #1
 800946c:	f7ff fb2a 	bl	8008ac4 <disk_write>
			fs->fsi_flag = 0;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	2200      	movs	r2, #0
 800947c:	2100      	movs	r1, #0
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff fb40 	bl	8008b04 <disk_ioctl>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <sync_fs+0xca>
 800948a:	2301      	movs	r3, #1
 800948c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	41615252 	.word	0x41615252
 800949c:	61417272 	.word	0x61417272

080094a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	3b02      	subs	r3, #2
 80094ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	3b02      	subs	r3, #2
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d301      	bcc.n	80094c0 <clust2sect+0x20>
 80094bc:	2300      	movs	r3, #0
 80094be:	e008      	b.n	80094d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	895b      	ldrh	r3, [r3, #10]
 80094c4:	461a      	mov	r2, r3
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	fb03 f202 	mul.w	r2, r3, r2
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d0:	4413      	add	r3, r2
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
	...

080094e0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	6809      	ldr	r1, [r1, #0]
 80094ee:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	2901      	cmp	r1, #1
 80094f4:	d904      	bls.n	8009500 <get_fat+0x20>
 80094f6:	69b9      	ldr	r1, [r7, #24]
 80094f8:	69c9      	ldr	r1, [r1, #28]
 80094fa:	6838      	ldr	r0, [r7, #0]
 80094fc:	4288      	cmp	r0, r1
 80094fe:	d302      	bcc.n	8009506 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009500:	2301      	movs	r3, #1
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	e100      	b.n	8009708 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009506:	f04f 31ff 	mov.w	r1, #4294967295
 800950a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800950c:	69b9      	ldr	r1, [r7, #24]
 800950e:	7809      	ldrb	r1, [r1, #0]
 8009510:	3901      	subs	r1, #1
 8009512:	2903      	cmp	r1, #3
 8009514:	f200 80ec 	bhi.w	80096f0 <get_fat+0x210>
 8009518:	a001      	add	r0, pc, #4	@ (adr r0, 8009520 <get_fat+0x40>)
 800951a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800951e:	bf00      	nop
 8009520:	08009531 	.word	0x08009531
 8009524:	080095b7 	.word	0x080095b7
 8009528:	080095ed 	.word	0x080095ed
 800952c:	08009625 	.word	0x08009625
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	085b      	lsrs	r3, r3, #1
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	0a5b      	lsrs	r3, r3, #9
 8009546:	4413      	add	r3, r2
 8009548:	4619      	mov	r1, r3
 800954a:	69b8      	ldr	r0, [r7, #24]
 800954c:	f7ff ff0c 	bl	8009368 <move_window>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 80cf 	bne.w	80096f6 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	60fa      	str	r2, [r7, #12]
 800955e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	4413      	add	r3, r2
 8009566:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800956a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	0a5b      	lsrs	r3, r3, #9
 8009574:	4413      	add	r3, r2
 8009576:	4619      	mov	r1, r3
 8009578:	69b8      	ldr	r0, [r7, #24]
 800957a:	f7ff fef5 	bl	8009368 <move_window>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	f040 80ba 	bne.w	80096fa <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	4413      	add	r3, r2
 8009590:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009594:	021b      	lsls	r3, r3, #8
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	4313      	orrs	r3, r2
 800959a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <get_fat+0xcc>
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	091b      	lsrs	r3, r3, #4
 80095aa:	e002      	b.n	80095b2 <get_fat+0xd2>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095b2:	61fb      	str	r3, [r7, #28]
			break;
 80095b4:	e0a8      	b.n	8009708 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	4413      	add	r3, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	69b8      	ldr	r0, [r7, #24]
 80095c4:	f7ff fed0 	bl	8009368 <move_window>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 8097 	bne.w	80096fe <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	005b      	lsls	r3, r3, #1
 80095da:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80095de:	4413      	add	r3, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff faad 	bl	8008b40 <ld_word>
 80095e6:	4603      	mov	r3, r0
 80095e8:	61fb      	str	r3, [r7, #28]
			break;
 80095ea:	e08d      	b.n	8009708 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	09db      	lsrs	r3, r3, #7
 80095f4:	4413      	add	r3, r2
 80095f6:	4619      	mov	r1, r3
 80095f8:	69b8      	ldr	r0, [r7, #24]
 80095fa:	f7ff feb5 	bl	8009368 <move_window>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d17e      	bne.n	8009702 <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009612:	4413      	add	r3, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7ff faac 	bl	8008b72 <ld_dword>
 800961a:	4603      	mov	r3, r0
 800961c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009620:	61fb      	str	r3, [r7, #28]
			break;
 8009622:	e071      	b.n	8009708 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800962a:	4301      	orrs	r1, r0
 800962c:	d060      	beq.n	80096f0 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	6889      	ldr	r1, [r1, #8]
 8009632:	6838      	ldr	r0, [r7, #0]
 8009634:	1a41      	subs	r1, r0, r1
 8009636:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800963e:	1e42      	subs	r2, r0, #1
 8009640:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009644:	f04f 0000 	mov.w	r0, #0
 8009648:	f04f 0100 	mov.w	r1, #0
 800964c:	0a50      	lsrs	r0, r2, #9
 800964e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009652:	0a59      	lsrs	r1, r3, #9
 8009654:	4602      	mov	r2, r0
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	895b      	ldrh	r3, [r3, #10]
 800965a:	fbb2 f3f3 	udiv	r3, r2, r3
 800965e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	79db      	ldrb	r3, [r3, #7]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d10e      	bne.n	8009686 <get_fat+0x1a6>
					if (cofs <= clen) {
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	429a      	cmp	r2, r3
 800966e:	d80a      	bhi.n	8009686 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	429a      	cmp	r2, r3
 8009676:	d002      	beq.n	800967e <get_fat+0x19e>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	e001      	b.n	8009682 <get_fat+0x1a2>
 800967e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009682:	61fb      	str	r3, [r7, #28]
						break;
 8009684:	e040      	b.n	8009708 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	79db      	ldrb	r3, [r3, #7]
 800968a:	2b03      	cmp	r3, #3
 800968c:	d108      	bne.n	80096a0 <get_fat+0x1c0>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	429a      	cmp	r2, r3
 8009696:	d203      	bcs.n	80096a0 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	61fb      	str	r3, [r7, #28]
					break;
 800969e:	e033      	b.n	8009708 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	79db      	ldrb	r3, [r3, #7]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d023      	beq.n	80096f0 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80096b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80096b4:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80096b6:	e027      	b.n	8009708 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	09db      	lsrs	r3, r3, #7
 80096c0:	4413      	add	r3, r2
 80096c2:	4619      	mov	r1, r3
 80096c4:	69b8      	ldr	r0, [r7, #24]
 80096c6:	f7ff fe4f 	bl	8009368 <move_window>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d11a      	bne.n	8009706 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80096de:	4413      	add	r3, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff fa46 	bl	8008b72 <ld_dword>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096ec:	61fb      	str	r3, [r7, #28]
					break;
 80096ee:	e00b      	b.n	8009708 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80096f0:	2301      	movs	r3, #1
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	e008      	b.n	8009708 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096f6:	bf00      	nop
 80096f8:	e006      	b.n	8009708 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096fa:	bf00      	nop
 80096fc:	e004      	b.n	8009708 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80096fe:	bf00      	nop
 8009700:	e002      	b.n	8009708 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009702:	bf00      	nop
 8009704:	e000      	b.n	8009708 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009706:	bf00      	nop
		}
	}

	return val;
 8009708:	69fb      	ldr	r3, [r7, #28]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop

08009714 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009714:	b590      	push	{r4, r7, lr}
 8009716:	b089      	sub	sp, #36	@ 0x24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009720:	2302      	movs	r3, #2
 8009722:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b01      	cmp	r3, #1
 8009728:	f240 80dd 	bls.w	80098e6 <put_fat+0x1d2>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	f080 80d7 	bcs.w	80098e6 <put_fat+0x1d2>
		switch (fs->fs_type) {
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b04      	cmp	r3, #4
 800973e:	f300 80d2 	bgt.w	80098e6 <put_fat+0x1d2>
 8009742:	2b03      	cmp	r3, #3
 8009744:	f280 8093 	bge.w	800986e <put_fat+0x15a>
 8009748:	2b01      	cmp	r3, #1
 800974a:	d002      	beq.n	8009752 <put_fat+0x3e>
 800974c:	2b02      	cmp	r3, #2
 800974e:	d06e      	beq.n	800982e <put_fat+0x11a>
 8009750:	e0c9      	b.n	80098e6 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	61bb      	str	r3, [r7, #24]
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	085b      	lsrs	r3, r3, #1
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	4413      	add	r3, r2
 800975e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	0a5b      	lsrs	r3, r3, #9
 8009768:	4413      	add	r3, r2
 800976a:	4619      	mov	r1, r3
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7ff fdfb 	bl	8009368 <move_window>
 8009772:	4603      	mov	r3, r0
 8009774:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009776:	7ffb      	ldrb	r3, [r7, #31]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f040 80ad 	bne.w	80098d8 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	1c59      	adds	r1, r3, #1
 8009788:	61b9      	str	r1, [r7, #24]
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978e:	4413      	add	r3, r2
 8009790:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00d      	beq.n	80097b8 <put_fat+0xa4>
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	b25b      	sxtb	r3, r3
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	b25a      	sxtb	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	b25b      	sxtb	r3, r3
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	b25b      	sxtb	r3, r3
 80097b0:	4313      	orrs	r3, r2
 80097b2:	b25b      	sxtb	r3, r3
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	e001      	b.n	80097bc <put_fat+0xa8>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2201      	movs	r2, #1
 80097c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	0a5b      	lsrs	r3, r3, #9
 80097ce:	4413      	add	r3, r2
 80097d0:	4619      	mov	r1, r3
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f7ff fdc8 	bl	8009368 <move_window>
 80097d8:	4603      	mov	r3, r0
 80097da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097dc:	7ffb      	ldrb	r3, [r7, #31]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d17c      	bne.n	80098dc <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ee:	4413      	add	r3, r2
 80097f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <put_fat+0xf0>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	091b      	lsrs	r3, r3, #4
 8009800:	b2db      	uxtb	r3, r3
 8009802:	e00e      	b.n	8009822 <put_fat+0x10e>
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	b25b      	sxtb	r3, r3
 800980a:	f023 030f 	bic.w	r3, r3, #15
 800980e:	b25a      	sxtb	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	b25b      	sxtb	r3, r3
 8009816:	f003 030f 	and.w	r3, r3, #15
 800981a:	b25b      	sxtb	r3, r3
 800981c:	4313      	orrs	r3, r2
 800981e:	b25b      	sxtb	r3, r3
 8009820:	b2db      	uxtb	r3, r3
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	70da      	strb	r2, [r3, #3]
			break;
 800982c:	e05b      	b.n	80098e6 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	0a1b      	lsrs	r3, r3, #8
 8009836:	4413      	add	r3, r2
 8009838:	4619      	mov	r1, r3
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f7ff fd94 	bl	8009368 <move_window>
 8009840:	4603      	mov	r3, r0
 8009842:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009844:	7ffb      	ldrb	r3, [r7, #31]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d14a      	bne.n	80098e0 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009858:	4413      	add	r3, r2
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	b292      	uxth	r2, r2
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fa84 	bl	8008d6e <st_word>
			fs->wflag = 1;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	70da      	strb	r2, [r3, #3]
			break;
 800986c:	e03b      	b.n	80098e6 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	09db      	lsrs	r3, r3, #7
 8009876:	4413      	add	r3, r2
 8009878:	4619      	mov	r1, r3
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fd74 	bl	8009368 <move_window>
 8009880:	4603      	mov	r3, r0
 8009882:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009884:	7ffb      	ldrb	r3, [r7, #31]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d12c      	bne.n	80098e4 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b04      	cmp	r3, #4
 8009890:	d012      	beq.n	80098b8 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80098a6:	4413      	add	r3, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff f962 	bl	8008b72 <ld_dword>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80098b4:	4323      	orrs	r3, r4
 80098b6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80098c6:	4413      	add	r3, r2
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff fa6a 	bl	8008da4 <st_dword>
			fs->wflag = 1;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2201      	movs	r2, #1
 80098d4:	70da      	strb	r2, [r3, #3]
			break;
 80098d6:	e006      	b.n	80098e6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80098d8:	bf00      	nop
 80098da:	e004      	b.n	80098e6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80098dc:	bf00      	nop
 80098de:	e002      	b.n	80098e6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80098e0:	bf00      	nop
 80098e2:	e000      	b.n	80098e6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80098e4:	bf00      	nop
		}
	}
	return res;
 80098e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3724      	adds	r7, #36	@ 0x24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd90      	pop	{r4, r7, pc}

080098f0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	@ 0x28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	3b02      	subs	r3, #2
 8009900:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	3b02      	subs	r3, #2
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	429a      	cmp	r2, r3
 800990c:	d301      	bcc.n	8009912 <find_bitmap+0x22>
 800990e:	2300      	movs	r3, #0
 8009910:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	61fb      	str	r3, [r7, #28]
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	2300      	movs	r3, #0
 800991c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	0b1b      	lsrs	r3, r3, #12
 8009926:	4413      	add	r3, r2
 8009928:	4619      	mov	r1, r3
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7ff fd1c 	bl	8009368 <move_window>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <find_bitmap+0x4c>
 8009936:	f04f 33ff 	mov.w	r3, #4294967295
 800993a:	e051      	b.n	80099e0 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	08db      	lsrs	r3, r3, #3
 8009940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009944:	623b      	str	r3, [r7, #32]
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	2201      	movs	r2, #1
 800994e:	fa02 f303 	lsl.w	r3, r2, r3
 8009952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	4413      	add	r3, r2
 800995c:	3338      	adds	r3, #56	@ 0x38
 800995e:	781a      	ldrb	r2, [r3, #0]
 8009960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009964:	4013      	ands	r3, r2
 8009966:	74fb      	strb	r3, [r7, #19]
 8009968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	3301      	adds	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	3b02      	subs	r3, #2
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	429a      	cmp	r2, r3
 8009982:	d307      	bcc.n	8009994 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8009984:	2300      	movs	r3, #0
 8009986:	61fb      	str	r3, [r7, #28]
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800998e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009992:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8009994:	7cfb      	ldrb	r3, [r7, #19]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	3301      	adds	r3, #1
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d106      	bne.n	80099b6 <find_bitmap+0xc6>
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	3302      	adds	r3, #2
 80099ac:	e018      	b.n	80099e0 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	61bb      	str	r3, [r7, #24]
 80099b2:	2300      	movs	r3, #0
 80099b4:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d101      	bne.n	80099c2 <find_bitmap+0xd2>
 80099be:	2300      	movs	r3, #0
 80099c0:	e00e      	b.n	80099e0 <find_bitmap+0xf0>
			} while (bm);
 80099c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1c5      	bne.n	8009956 <find_bitmap+0x66>
			bm = 1;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	3301      	adds	r3, #1
 80099d4:	623b      	str	r3, [r7, #32]
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099dc:	d3bb      	bcc.n	8009956 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80099de:	e79e      	b.n	800991e <find_bitmap+0x2e>
	}
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3728      	adds	r7, #40	@ 0x28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	3b02      	subs	r3, #2
 80099fa:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	0b1b      	lsrs	r3, r3, #12
 8009a04:	4413      	add	r3, r2
 8009a06:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	08db      	lsrs	r3, r3, #3
 8009a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a10:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f003 0307 	and.w	r3, r3, #7
 8009a18:	2201      	movs	r2, #1
 8009a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	617a      	str	r2, [r7, #20]
 8009a26:	4619      	mov	r1, r3
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff fc9d 	bl	8009368 <move_window>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <change_bitmap+0x50>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e03d      	b.n	8009ab4 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3338      	adds	r3, #56	@ 0x38
 8009a40:	781a      	ldrb	r2, [r3, #0]
 8009a42:	7ffb      	ldrb	r3, [r7, #31]
 8009a44:	4013      	ands	r3, r2
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d101      	bne.n	8009a5e <change_bitmap+0x76>
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e02a      	b.n	8009ab4 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	4413      	add	r3, r2
 8009a64:	3338      	adds	r3, #56	@ 0x38
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	7ffb      	ldrb	r3, [r7, #31]
 8009a6a:	4053      	eors	r3, r2
 8009a6c:	b2d9      	uxtb	r1, r3
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	4413      	add	r3, r2
 8009a74:	3338      	adds	r3, #56	@ 0x38
 8009a76:	460a      	mov	r2, r1
 8009a78:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <change_bitmap+0xa8>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e011      	b.n	8009ab4 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8009a90:	7ffb      	ldrb	r3, [r7, #31]
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	77fb      	strb	r3, [r7, #31]
 8009a96:	7ffb      	ldrb	r3, [r7, #31]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1cd      	bne.n	8009a38 <change_bitmap+0x50>
			bm = 1;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aac:	d3c4      	bcc.n	8009a38 <change_bitmap+0x50>
		i = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009ab2:	e7b5      	b.n	8009a20 <change_bitmap+0x38>
	}
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3720      	adds	r7, #32
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	79db      	ldrb	r3, [r3, #7]
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d121      	bne.n	8009b10 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	e014      	b.n	8009b04 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	6979      	ldr	r1, [r7, #20]
 8009ae6:	f7ff fe15 	bl	8009714 <put_fat>
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <fill_first_frag+0x3c>
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	e00c      	b.n	8009b12 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	3301      	adds	r3, #1
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	613b      	str	r3, [r7, #16]
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1e7      	bne.n	8009ada <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b086      	sub	sp, #24
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009b26:	e020      	b.n	8009b6a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	1c59      	adds	r1, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d905      	bls.n	8009b4a <fill_last_frag+0x30>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	3302      	adds	r3, #2
 8009b48:	e000      	b.n	8009b4c <fill_last_frag+0x32>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	f7ff fde1 	bl	8009714 <put_fat>
 8009b52:	4603      	mov	r3, r0
 8009b54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <fill_last_frag+0x46>
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	e009      	b.n	8009b74 <fill_last_frag+0x5a>
		obj->n_frag--;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	69db      	ldr	r3, [r3, #28]
 8009b64:	1e5a      	subs	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1da      	bne.n	8009b28 <fill_last_frag+0xe>
	}
	return FR_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08a      	sub	sp, #40	@ 0x28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d904      	bls.n	8009baa <remove_chain+0x2e>
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d301      	bcc.n	8009bae <remove_chain+0x32>
 8009baa:	2302      	movs	r3, #2
 8009bac:	e096      	b.n	8009cdc <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d014      	beq.n	8009bde <remove_chain+0x62>
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d103      	bne.n	8009bc4 <remove_chain+0x48>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	79db      	ldrb	r3, [r3, #7]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d00c      	beq.n	8009bde <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	69b8      	ldr	r0, [r7, #24]
 8009bcc:	f7ff fda2 	bl	8009714 <put_fat>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009bd4:	7ffb      	ldrb	r3, [r7, #31]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <remove_chain+0x62>
 8009bda:	7ffb      	ldrb	r3, [r7, #31]
 8009bdc:	e07e      	b.n	8009cdc <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7ff fc7d 	bl	80094e0 <get_fat>
 8009be6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d055      	beq.n	8009c9a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d101      	bne.n	8009bf8 <remove_chain+0x7c>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e071      	b.n	8009cdc <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfe:	d101      	bne.n	8009c04 <remove_chain+0x88>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e06b      	b.n	8009cdc <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	d00b      	beq.n	8009c24 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	69b8      	ldr	r0, [r7, #24]
 8009c12:	f7ff fd7f 	bl	8009714 <put_fat>
 8009c16:	4603      	mov	r3, r0
 8009c18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009c1a:	7ffb      	ldrb	r3, [r7, #31]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <remove_chain+0xa8>
 8009c20:	7ffb      	ldrb	r3, [r7, #31]
 8009c22:	e05b      	b.n	8009cdc <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	3b02      	subs	r3, #2
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d20b      	bcs.n	8009c4a <remove_chain+0xce>
			fs->free_clst++;
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	791b      	ldrb	r3, [r3, #4]
 8009c40:	f043 0301 	orr.w	r3, r3, #1
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d102      	bne.n	8009c5a <remove_chain+0xde>
			ecl = nxt;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	623b      	str	r3, [r7, #32]
 8009c58:	e017      	b.n	8009c8a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b04      	cmp	r3, #4
 8009c60:	d10f      	bne.n	8009c82 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009c62:	6a3a      	ldr	r2, [r7, #32]
 8009c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c6e:	69b8      	ldr	r0, [r7, #24]
 8009c70:	f7ff feba 	bl	80099e8 <change_bitmap>
 8009c74:	4603      	mov	r3, r0
 8009c76:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009c78:	7ffb      	ldrb	r3, [r7, #31]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <remove_chain+0x106>
 8009c7e:	7ffb      	ldrb	r3, [r7, #31]
 8009c80:	e02c      	b.n	8009cdc <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	623b      	str	r3, [r7, #32]
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d3a2      	bcc.n	8009bde <remove_chain+0x62>
 8009c98:	e000      	b.n	8009c9c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009c9a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d11a      	bne.n	8009cda <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d103      	bne.n	8009cb2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	71da      	strb	r2, [r3, #7]
 8009cb0:	e013      	b.n	8009cda <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	79db      	ldrb	r3, [r3, #7]
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d10f      	bne.n	8009cda <remove_chain+0x15e>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d30a      	bcc.n	8009cda <remove_chain+0x15e>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	4413      	add	r3, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d802      	bhi.n	8009cda <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3728      	adds	r7, #40	@ 0x28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10d      	bne.n	8009d16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d004      	beq.n	8009d10 <create_chain+0x2c>
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d31b      	bcc.n	8009d48 <create_chain+0x64>
 8009d10:	2301      	movs	r3, #1
 8009d12:	61bb      	str	r3, [r7, #24]
 8009d14:	e018      	b.n	8009d48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7ff fbe1 	bl	80094e0 <get_fat>
 8009d1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d801      	bhi.n	8009d2a <create_chain+0x46>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e0d9      	b.n	8009ede <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d30:	d101      	bne.n	8009d36 <create_chain+0x52>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	e0d3      	b.n	8009ede <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d201      	bcs.n	8009d44 <create_chain+0x60>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	e0cc      	b.n	8009ede <create_chain+0x1fa>
		scl = clst;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d164      	bne.n	8009e1a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009d50:	2201      	movs	r2, #1
 8009d52:	69b9      	ldr	r1, [r7, #24]
 8009d54:	6938      	ldr	r0, [r7, #16]
 8009d56:	f7ff fdcb 	bl	80098f0 <find_bitmap>
 8009d5a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <create_chain+0x86>
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d68:	d101      	bne.n	8009d6e <create_chain+0x8a>
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	e0b7      	b.n	8009ede <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009d6e:	2301      	movs	r3, #1
 8009d70:	2201      	movs	r2, #1
 8009d72:	69f9      	ldr	r1, [r7, #28]
 8009d74:	6938      	ldr	r0, [r7, #16]
 8009d76:	f7ff fe37 	bl	80099e8 <change_bitmap>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d101      	bne.n	8009d88 <create_chain+0xa4>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e0aa      	b.n	8009ede <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d102      	bne.n	8009d94 <create_chain+0xb0>
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	e0a4      	b.n	8009ede <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d103      	bne.n	8009da2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	71da      	strb	r2, [r3, #7]
 8009da0:	e011      	b.n	8009dc6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	79db      	ldrb	r3, [r3, #7]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d10d      	bne.n	8009dc6 <create_chain+0xe2>
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	3301      	adds	r3, #1
 8009dae:	69fa      	ldr	r2, [r7, #28]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d008      	beq.n	8009dc6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	1ad2      	subs	r2, r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	79db      	ldrb	r3, [r3, #7]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d064      	beq.n	8009e98 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	69fa      	ldr	r2, [r7, #28]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d10b      	bne.n	8009df0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <create_chain+0x104>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	3301      	adds	r3, #1
 8009de6:	e000      	b.n	8009dea <create_chain+0x106>
 8009de8:	2302      	movs	r3, #2
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	61d3      	str	r3, [r2, #28]
 8009dee:	e053      	b.n	8009e98 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <create_chain+0x11a>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009dfe:	69fa      	ldr	r2, [r7, #28]
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fe89 	bl	8009b1a <fill_last_frag>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d142      	bne.n	8009e98 <create_chain+0x1b4>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	61da      	str	r2, [r3, #28]
 8009e18:	e03e      	b.n	8009e98 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	3301      	adds	r3, #1
 8009e22:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	69fa      	ldr	r2, [r7, #28]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d307      	bcc.n	8009e3e <create_chain+0x15a>
				ncl = 2;
 8009e2e:	2302      	movs	r3, #2
 8009e30:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d901      	bls.n	8009e3e <create_chain+0x15a>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e04f      	b.n	8009ede <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009e3e:	69f9      	ldr	r1, [r7, #28]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff fb4d 	bl	80094e0 <get_fat>
 8009e46:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00e      	beq.n	8009e6c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d003      	beq.n	8009e5c <create_chain+0x178>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5a:	d101      	bne.n	8009e60 <create_chain+0x17c>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	e03e      	b.n	8009ede <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d1da      	bne.n	8009e1e <create_chain+0x13a>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	e038      	b.n	8009ede <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009e6c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e72:	69f9      	ldr	r1, [r7, #28]
 8009e74:	6938      	ldr	r0, [r7, #16]
 8009e76:	f7ff fc4d 	bl	8009714 <put_fat>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d109      	bne.n	8009e98 <create_chain+0x1b4>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d006      	beq.n	8009e98 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6938      	ldr	r0, [r7, #16]
 8009e90:	f7ff fc40 	bl	8009714 <put_fat>
 8009e94:	4603      	mov	r3, r0
 8009e96:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d116      	bne.n	8009ecc <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	69fa      	ldr	r2, [r7, #28]
 8009ea2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	699a      	ldr	r2, [r3, #24]
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	3b02      	subs	r3, #2
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d804      	bhi.n	8009ebc <create_chain+0x1d8>
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	1e5a      	subs	r2, r3, #1
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	791b      	ldrb	r3, [r3, #4]
 8009ec0:	f043 0301 	orr.w	r3, r3, #1
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	711a      	strb	r2, [r3, #4]
 8009eca:	e007      	b.n	8009edc <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d102      	bne.n	8009ed8 <create_chain+0x1f4>
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	e000      	b.n	8009eda <create_chain+0x1f6>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009edc:	69fb      	ldr	r3, [r7, #28]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3720      	adds	r7, #32
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009ee6:	b5b0      	push	{r4, r5, r7, lr}
 8009ee8:	b088      	sub	sp, #32
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009efc:	3304      	adds	r3, #4
 8009efe:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f04:	f04f 0000 	mov.w	r0, #0
 8009f08:	f04f 0100 	mov.w	r1, #0
 8009f0c:	0a50      	lsrs	r0, r2, #9
 8009f0e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009f12:	0a59      	lsrs	r1, r3, #9
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	895b      	ldrh	r3, [r3, #10]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	461c      	mov	r4, r3
 8009f1e:	4615      	mov	r5, r2
 8009f20:	4622      	mov	r2, r4
 8009f22:	462b      	mov	r3, r5
 8009f24:	f7f6 fec0 	bl	8000ca8 <__aeabi_uldivmod>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	1d1a      	adds	r2, r3, #4
 8009f34:	61ba      	str	r2, [r7, #24]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <clmt_clust+0x5e>
 8009f40:	2300      	movs	r3, #0
 8009f42:	e010      	b.n	8009f66 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d307      	bcc.n	8009f5c <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	61fb      	str	r3, [r7, #28]
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	3304      	adds	r3, #4
 8009f58:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f5a:	e7e9      	b.n	8009f30 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8009f5c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bdb0      	pop	{r4, r5, r7, pc}

08009f6e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b086      	sub	sp, #24
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d102      	bne.n	8009f8c <dir_sdi+0x1e>
 8009f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f8a:	e001      	b.n	8009f90 <dir_sdi+0x22>
 8009f8c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d904      	bls.n	8009fa0 <dir_sdi+0x32>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	f003 031f 	and.w	r3, r3, #31
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <dir_sdi+0x36>
		return FR_INT_ERR;
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e066      	b.n	800a072 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <dir_sdi+0x5c>
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d905      	bls.n	8009fca <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10c      	bne.n	8009fea <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	095b      	lsrs	r3, r3, #5
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	8912      	ldrh	r2, [r2, #8]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d301      	bcc.n	8009fe0 <dir_sdi+0x72>
 8009fdc:	2302      	movs	r3, #2
 8009fde:	e048      	b.n	800a072 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	639a      	str	r2, [r3, #56]	@ 0x38
 8009fe8:	e029      	b.n	800a03e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	895b      	ldrh	r3, [r3, #10]
 8009fee:	025b      	lsls	r3, r3, #9
 8009ff0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ff2:	e019      	b.n	800a028 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6979      	ldr	r1, [r7, #20]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff fa71 	bl	80094e0 <get_fat>
 8009ffe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d101      	bne.n	800a00c <dir_sdi+0x9e>
 800a008:	2301      	movs	r3, #1
 800a00a:	e032      	b.n	800a072 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d904      	bls.n	800a01c <dir_sdi+0xae>
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d301      	bcc.n	800a020 <dir_sdi+0xb2>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e028      	b.n	800a072 <dir_sdi+0x104>
			ofs -= csz;
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d2e1      	bcs.n	8009ff4 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800a030:	6979      	ldr	r1, [r7, #20]
 800a032:	6938      	ldr	r0, [r7, #16]
 800a034:	f7ff fa34 	bl	80094a0 <clust2sect>
 800a038:	4602      	mov	r2, r0
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <dir_sdi+0xe2>
 800a04c:	2302      	movs	r3, #2
 800a04e:	e010      	b.n	800a072 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	0a5b      	lsrs	r3, r3, #9
 800a058:	441a      	add	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a06a:	441a      	add	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b086      	sub	sp, #24
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08e:	3320      	adds	r3, #32
 800a090:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00b      	beq.n	800a0b2 <dir_next+0x38>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d102      	bne.n	800a0a8 <dir_next+0x2e>
 800a0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0a6:	e001      	b.n	800a0ac <dir_next+0x32>
 800a0a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d801      	bhi.n	800a0b6 <dir_next+0x3c>
 800a0b2:	2304      	movs	r3, #4
 800a0b4:	e0b2      	b.n	800a21c <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f040 80a0 	bne.w	800a202 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10b      	bne.n	800a0ec <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	095b      	lsrs	r3, r3, #5
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	8912      	ldrh	r2, [r2, #8]
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	f0c0 8090 	bcc.w	800a202 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	e097      	b.n	800a21c <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	0a5b      	lsrs	r3, r3, #9
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	8952      	ldrh	r2, [r2, #10]
 800a0f4:	3a01      	subs	r2, #1
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f040 8082 	bne.w	800a202 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a104:	4619      	mov	r1, r3
 800a106:	4610      	mov	r0, r2
 800a108:	f7ff f9ea 	bl	80094e0 <get_fat>
 800a10c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d801      	bhi.n	800a118 <dir_next+0x9e>
 800a114:	2302      	movs	r3, #2
 800a116:	e081      	b.n	800a21c <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d101      	bne.n	800a124 <dir_next+0xaa>
 800a120:	2301      	movs	r3, #1
 800a122:	e07b      	b.n	800a21c <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d35f      	bcc.n	800a1ee <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d104      	bne.n	800a13e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	639a      	str	r2, [r3, #56]	@ 0x38
 800a13a:	2304      	movs	r3, #4
 800a13c:	e06e      	b.n	800a21c <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f7ff fdcc 	bl	8009ce4 <create_chain>
 800a14c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <dir_next+0xde>
 800a154:	2307      	movs	r3, #7
 800a156:	e061      	b.n	800a21c <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d101      	bne.n	800a162 <dir_next+0xe8>
 800a15e:	2302      	movs	r3, #2
 800a160:	e05c      	b.n	800a21c <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a168:	d101      	bne.n	800a16e <dir_next+0xf4>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e056      	b.n	800a21c <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	79db      	ldrb	r3, [r3, #7]
 800a172:	f043 0304 	orr.w	r3, r3, #4
 800a176:	b2da      	uxtb	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7ff f8af 	bl	80092e0 <sync_window>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <dir_next+0x112>
 800a188:	2301      	movs	r3, #1
 800a18a:	e047      	b.n	800a21c <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3338      	adds	r3, #56	@ 0x38
 800a190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a194:	2100      	movs	r1, #0
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fed9 	bl	8008f4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
 800a1a0:	6979      	ldr	r1, [r7, #20]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f7ff f97c 	bl	80094a0 <clust2sect>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	635a      	str	r2, [r3, #52]	@ 0x34
 800a1ae:	e012      	b.n	800a1d6 <dir_next+0x15c>
						fs->wflag = 1;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7ff f892 	bl	80092e0 <sync_window>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <dir_next+0x14c>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e02a      	b.n	800a21c <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	613b      	str	r3, [r7, #16]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1d0:	1c5a      	adds	r2, r3, #1
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	635a      	str	r2, [r3, #52]	@ 0x34
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	895b      	ldrh	r3, [r3, #10]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d3e6      	bcc.n	800a1b0 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	1ad2      	subs	r2, r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800a1f4:	6979      	ldr	r1, [r7, #20]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff f952 	bl	80094a0 <clust2sect>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a214:	441a      	add	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a234:	2100      	movs	r1, #0
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff fe99 	bl	8009f6e <dir_sdi>
 800a23c:	4603      	mov	r3, r0
 800a23e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d140      	bne.n	800a2c8 <dir_alloc+0xa4>
		n = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a24e:	4619      	mov	r1, r3
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f7ff f889 	bl	8009368 <move_window>
 800a256:	4603      	mov	r3, r0
 800a258:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d132      	bne.n	800a2c6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b04      	cmp	r3, #4
 800a266:	d108      	bne.n	800a27a <dir_alloc+0x56>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b25b      	sxtb	r3, r3
 800a270:	43db      	mvns	r3, r3
 800a272:	b2db      	uxtb	r3, r3
 800a274:	09db      	lsrs	r3, r3, #7
 800a276:	b2db      	uxtb	r3, r3
 800a278:	e00f      	b.n	800a29a <dir_alloc+0x76>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2be5      	cmp	r3, #229	@ 0xe5
 800a282:	d004      	beq.n	800a28e <dir_alloc+0x6a>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <dir_alloc+0x6e>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <dir_alloc+0x70>
 800a292:	2300      	movs	r3, #0
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d007      	beq.n	800a2ae <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	613b      	str	r3, [r7, #16]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d102      	bne.n	800a2b2 <dir_alloc+0x8e>
 800a2ac:	e00c      	b.n	800a2c8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff fee0 	bl	800a07a <dir_next>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0c2      	beq.n	800a24a <dir_alloc+0x26>
 800a2c4:	e000      	b.n	800a2c8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a2c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d101      	bne.n	800a2d2 <dir_alloc+0xae>
 800a2ce:	2307      	movs	r3, #7
 800a2d0:	75fb      	strb	r3, [r7, #23]
	return res;
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	331a      	adds	r3, #26
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fc28 	bl	8008b40 <ld_word>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d109      	bne.n	800a310 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	3314      	adds	r3, #20
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fc1d 	bl	8008b40 <ld_word>
 800a306:	4603      	mov	r3, r0
 800a308:	041b      	lsls	r3, r3, #16
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a310:	68fb      	ldr	r3, [r7, #12]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	331a      	adds	r3, #26
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	b292      	uxth	r2, r2
 800a32e:	4611      	mov	r1, r2
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fd1c 	bl	8008d6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d109      	bne.n	800a352 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f103 0214 	add.w	r2, r3, #20
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	0c1b      	lsrs	r3, r3, #16
 800a348:	b29b      	uxth	r3, r3
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f7fe fd0e 	bl	8008d6e <st_word>
	}
}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a35c:	b590      	push	{r4, r7, lr}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	331a      	adds	r3, #26
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe fbe8 	bl	8008b40 <ld_word>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <cmp_lfn+0x1e>
 800a376:	2300      	movs	r3, #0
 800a378:	e059      	b.n	800a42e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a382:	1e5a      	subs	r2, r3, #1
 800a384:	4613      	mov	r3, r2
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a390:	2301      	movs	r3, #1
 800a392:	81fb      	strh	r3, [r7, #14]
 800a394:	2300      	movs	r3, #0
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	e033      	b.n	800a402 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a39a:	4a27      	ldr	r2, [pc, #156]	@ (800a438 <cmp_lfn+0xdc>)
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	4413      	add	r3, r2
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fbc9 	bl	8008b40 <ld_word>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a3b2:	89fb      	ldrh	r3, [r7, #14]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d01a      	beq.n	800a3ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2bfe      	cmp	r3, #254	@ 0xfe
 800a3bc:	d812      	bhi.n	800a3e4 <cmp_lfn+0x88>
 800a3be:	89bb      	ldrh	r3, [r7, #12]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f004 fab5 	bl	800e930 <ff_wtoupper>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	461c      	mov	r4, r3
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	1c5a      	adds	r2, r3, #1
 800a3ce:	617a      	str	r2, [r7, #20]
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f004 faa9 	bl	800e930 <ff_wtoupper>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	429c      	cmp	r4, r3
 800a3e2:	d001      	beq.n	800a3e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	e022      	b.n	800a42e <cmp_lfn+0xd2>
			}
			wc = uc;
 800a3e8:	89bb      	ldrh	r3, [r7, #12]
 800a3ea:	81fb      	strh	r3, [r7, #14]
 800a3ec:	e006      	b.n	800a3fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a3ee:	89bb      	ldrh	r3, [r7, #12]
 800a3f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d001      	beq.n	800a3fc <cmp_lfn+0xa0>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e018      	b.n	800a42e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3301      	adds	r3, #1
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	2b0c      	cmp	r3, #12
 800a406:	d9c8      	bls.n	800a39a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00b      	beq.n	800a42c <cmp_lfn+0xd0>
 800a414:	89fb      	ldrh	r3, [r7, #14]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d008      	beq.n	800a42c <cmp_lfn+0xd0>
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <cmp_lfn+0xd0>
 800a428:	2300      	movs	r3, #0
 800a42a:	e000      	b.n	800a42e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a42c:	2301      	movs	r3, #1
}
 800a42e:	4618      	mov	r0, r3
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	bd90      	pop	{r4, r7, pc}
 800a436:	bf00      	nop
 800a438:	08013398 	.word	0x08013398

0800a43c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	331a      	adds	r3, #26
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fb78 	bl	8008b40 <ld_word>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <pick_lfn+0x1e>
 800a456:	2300      	movs	r3, #0
 800a458:	e04d      	b.n	800a4f6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a462:	1e5a      	subs	r2, r3, #1
 800a464:	4613      	mov	r3, r2
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a470:	2301      	movs	r3, #1
 800a472:	81fb      	strh	r3, [r7, #14]
 800a474:	2300      	movs	r3, #0
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	e028      	b.n	800a4cc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a47a:	4a21      	ldr	r2, [pc, #132]	@ (800a500 <pick_lfn+0xc4>)
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	4413      	add	r3, r2
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	4413      	add	r3, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fe fb59 	bl	8008b40 <ld_word>
 800a48e:	4603      	mov	r3, r0
 800a490:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a492:	89fb      	ldrh	r3, [r7, #14]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00f      	beq.n	800a4b8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a49c:	d901      	bls.n	800a4a2 <pick_lfn+0x66>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e029      	b.n	800a4f6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a4a2:	89bb      	ldrh	r3, [r7, #12]
 800a4a4:	81fb      	strh	r3, [r7, #14]
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	617a      	str	r2, [r7, #20]
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	89fa      	ldrh	r2, [r7, #14]
 800a4b4:	801a      	strh	r2, [r3, #0]
 800a4b6:	e006      	b.n	800a4c6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a4b8:	89bb      	ldrh	r3, [r7, #12]
 800a4ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d001      	beq.n	800a4c6 <pick_lfn+0x8a>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e017      	b.n	800a4f6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	613b      	str	r3, [r7, #16]
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	2b0c      	cmp	r3, #12
 800a4d0:	d9d3      	bls.n	800a47a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2bfe      	cmp	r3, #254	@ 0xfe
 800a4e2:	d901      	bls.n	800a4e8 <pick_lfn+0xac>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e006      	b.n	800a4f6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a4f4:	2301      	movs	r3, #1
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	08013398 	.word	0x08013398

0800a504 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4611      	mov	r1, r2
 800a510:	461a      	mov	r2, r3
 800a512:	460b      	mov	r3, r1
 800a514:	71fb      	strb	r3, [r7, #7]
 800a516:	4613      	mov	r3, r2
 800a518:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	330d      	adds	r3, #13
 800a51e:	79ba      	ldrb	r2, [r7, #6]
 800a520:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	330b      	adds	r3, #11
 800a526:	220f      	movs	r2, #15
 800a528:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	330c      	adds	r3, #12
 800a52e:	2200      	movs	r2, #0
 800a530:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	331a      	adds	r3, #26
 800a536:	2100      	movs	r1, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fc18 	bl	8008d6e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	1e5a      	subs	r2, r3, #1
 800a542:	4613      	mov	r3, r2
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	4413      	add	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	82fb      	strh	r3, [r7, #22]
 800a552:	2300      	movs	r3, #0
 800a554:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a556:	8afb      	ldrh	r3, [r7, #22]
 800a558:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d007      	beq.n	800a570 <put_lfn+0x6c>
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	61fa      	str	r2, [r7, #28]
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a570:	4a17      	ldr	r2, [pc, #92]	@ (800a5d0 <put_lfn+0xcc>)
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	4413      	add	r3, r2
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	8afa      	ldrh	r2, [r7, #22]
 800a580:	4611      	mov	r1, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fbf3 	bl	8008d6e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a588:	8afb      	ldrh	r3, [r7, #22]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d102      	bne.n	800a594 <put_lfn+0x90>
 800a58e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a592:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	3301      	adds	r3, #1
 800a598:	61bb      	str	r3, [r7, #24]
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2b0c      	cmp	r3, #12
 800a59e:	d9da      	bls.n	800a556 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a5a0:	8afb      	ldrh	r3, [r7, #22]
 800a5a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d006      	beq.n	800a5b8 <put_lfn+0xb4>
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d103      	bne.n	800a5c0 <put_lfn+0xbc>
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	79fa      	ldrb	r2, [r7, #7]
 800a5c4:	701a      	strb	r2, [r3, #0]
}
 800a5c6:	bf00      	nop
 800a5c8:	3720      	adds	r7, #32
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	08013398 	.word	0x08013398

0800a5d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08c      	sub	sp, #48	@ 0x30
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a5e2:	220b      	movs	r2, #11
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f7fe fc90 	bl	8008f0c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2b05      	cmp	r3, #5
 800a5f0:	d92b      	bls.n	800a64a <gen_numname+0x76>
		sr = seq;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a5f6:	e022      	b.n	800a63e <gen_numname+0x6a>
			wc = *lfn++;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	1c9a      	adds	r2, r3, #2
 800a5fc:	607a      	str	r2, [r7, #4]
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a602:	2300      	movs	r3, #0
 800a604:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a606:	e017      	b.n	800a638 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	005a      	lsls	r2, r3, #1
 800a60c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	4413      	add	r3, r2
 800a614:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a616:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a618:	085b      	lsrs	r3, r3, #1
 800a61a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d005      	beq.n	800a632 <gen_numname+0x5e>
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a62c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a630:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	3301      	adds	r3, #1
 800a636:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63a:	2b0f      	cmp	r3, #15
 800a63c:	d9e4      	bls.n	800a608 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1d8      	bne.n	800a5f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a64a:	2307      	movs	r3, #7
 800a64c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	b2db      	uxtb	r3, r3
 800a652:	f003 030f 	and.w	r3, r3, #15
 800a656:	b2db      	uxtb	r3, r3
 800a658:	3330      	adds	r3, #48	@ 0x30
 800a65a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a65e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a662:	2b39      	cmp	r3, #57	@ 0x39
 800a664:	d904      	bls.n	800a670 <gen_numname+0x9c>
 800a666:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a66a:	3307      	adds	r3, #7
 800a66c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a672:	1e5a      	subs	r2, r3, #1
 800a674:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a676:	3330      	adds	r3, #48	@ 0x30
 800a678:	443b      	add	r3, r7
 800a67a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a67e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	091b      	lsrs	r3, r3, #4
 800a686:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1df      	bne.n	800a64e <gen_numname+0x7a>
	ns[i] = '~';
 800a68e:	f107 0214 	add.w	r2, r7, #20
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	4413      	add	r3, r2
 800a696:	227e      	movs	r2, #126	@ 0x7e
 800a698:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a69a:	2300      	movs	r3, #0
 800a69c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a69e:	e016      	b.n	800a6ce <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a4:	4413      	add	r3, r2
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	2b80      	cmp	r3, #128	@ 0x80
 800a6aa:	d90d      	bls.n	800a6c8 <gen_numname+0xf4>
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b0:	4413      	add	r3, r2
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2bff      	cmp	r3, #255	@ 0xff
 800a6b6:	d007      	beq.n	800a6c8 <gen_numname+0xf4>
			if (j == i - 1) break;
 800a6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d010      	beq.n	800a6e4 <gen_numname+0x110>
			j++;
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d207      	bcs.n	800a6e6 <gen_numname+0x112>
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6da:	4413      	add	r3, r2
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	d1de      	bne.n	800a6a0 <gen_numname+0xcc>
 800a6e2:	e000      	b.n	800a6e6 <gen_numname+0x112>
			if (j == i - 1) break;
 800a6e4:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	2b07      	cmp	r3, #7
 800a6ea:	d807      	bhi.n	800a6fc <gen_numname+0x128>
 800a6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a6f2:	3330      	adds	r3, #48	@ 0x30
 800a6f4:	443b      	add	r3, r7
 800a6f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a6fa:	e000      	b.n	800a6fe <gen_numname+0x12a>
 800a6fc:	2120      	movs	r1, #32
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a700:	1c5a      	adds	r2, r3, #1
 800a702:	627a      	str	r2, [r7, #36]	@ 0x24
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	460a      	mov	r2, r1
 800a70a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70e:	2b07      	cmp	r3, #7
 800a710:	d9e9      	bls.n	800a6e6 <gen_numname+0x112>
}
 800a712:	bf00      	nop
 800a714:	bf00      	nop
 800a716:	3730      	adds	r7, #48	@ 0x30
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a728:	230b      	movs	r3, #11
 800a72a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	0852      	lsrs	r2, r2, #1
 800a732:	01db      	lsls	r3, r3, #7
 800a734:	4313      	orrs	r3, r2
 800a736:	b2da      	uxtb	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	1c59      	adds	r1, r3, #1
 800a73c:	6079      	str	r1, [r7, #4]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	4413      	add	r3, r2
 800a742:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	3b01      	subs	r3, #1
 800a748:	60bb      	str	r3, [r7, #8]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1ed      	bne.n	800a72c <sum_sfn+0x10>
	return sum;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a75e:	b480      	push	{r7}
 800a760:	b087      	sub	sp, #28
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3301      	adds	r3, #1
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	3301      	adds	r3, #1
 800a76e:	015b      	lsls	r3, r3, #5
 800a770:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a772:	2300      	movs	r3, #0
 800a774:	827b      	strh	r3, [r7, #18]
 800a776:	2300      	movs	r3, #0
 800a778:	617b      	str	r3, [r7, #20]
 800a77a:	e015      	b.n	800a7a8 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d103      	bne.n	800a78a <xdir_sum+0x2c>
			i++;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	3301      	adds	r3, #1
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	e00b      	b.n	800a7a2 <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a78a:	8a7b      	ldrh	r3, [r7, #18]
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	0852      	lsrs	r2, r2, #1
 800a790:	03db      	lsls	r3, r3, #15
 800a792:	4313      	orrs	r3, r2
 800a794:	b29b      	uxth	r3, r3
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	440a      	add	r2, r1
 800a79c:	7812      	ldrb	r2, [r2, #0]
 800a79e:	4413      	add	r3, r2
 800a7a0:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d3e5      	bcc.n	800a77c <xdir_sum+0x1e>
		}
	}
	return sum;
 800a7b0:	8a7b      	ldrh	r3, [r7, #18]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a7ca:	e01b      	b.n	800a804 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a7cc:	89bb      	ldrh	r3, [r7, #12]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f004 f8ae 	bl	800e930 <ff_wtoupper>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a7d8:	89fb      	ldrh	r3, [r7, #14]
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	0852      	lsrs	r2, r2, #1
 800a7de:	03db      	lsls	r3, r3, #15
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	89bb      	ldrh	r3, [r7, #12]
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a7ee:	89fb      	ldrh	r3, [r7, #14]
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	0852      	lsrs	r2, r2, #1
 800a7f4:	03db      	lsls	r3, r3, #15
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	89bb      	ldrh	r3, [r7, #12]
 800a7fc:	0a1b      	lsrs	r3, r3, #8
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	4413      	add	r3, r2
 800a802:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	1c9a      	adds	r2, r3, #2
 800a808:	607a      	str	r2, [r7, #4]
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	81bb      	strh	r3, [r7, #12]
 800a80e:	89bb      	ldrh	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1db      	bne.n	800a7cc <xname_sum+0xe>
	}
	return sum;
 800a814:	89fb      	ldrh	r3, [r7, #14]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <xsum32>:
static
DWORD xsum32 (
	BYTE  dat,	/* Data to be sumed */
	DWORD sum	/* Previous value */
)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	4603      	mov	r3, r0
 800a826:	6039      	str	r1, [r7, #0]
 800a828:	71fb      	strb	r3, [r7, #7]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	ea4f 0273 	mov.w	r2, r3, ror #1
 800a830:	79fb      	ldrb	r3, [r7, #7]
 800a832:	4413      	add	r3, r2
 800a834:	603b      	str	r3, [r7, #0]
	return sum;
 800a836:	683b      	ldr	r3, [r7, #0]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a852:	2340      	movs	r3, #64	@ 0x40
 800a854:	613b      	str	r3, [r7, #16]
 800a856:	2300      	movs	r3, #0
 800a858:	60fb      	str	r3, [r7, #12]
 800a85a:	e03a      	b.n	800a8d2 <get_xdir_info+0x8e>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f003 031f 	and.w	r3, r3, #31
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <get_xdir_info+0x28>
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	3302      	adds	r3, #2
 800a86a:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	4413      	add	r3, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe f964 	bl	8008b40 <ld_word>
 800a878:	4603      	mov	r3, r0
 800a87a:	2100      	movs	r1, #0
 800a87c:	4618      	mov	r0, r3
 800a87e:	f003 fff9 	bl	800e874 <ff_convert>
 800a882:	4603      	mov	r3, r0
 800a884:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
 800a886:	897b      	ldrh	r3, [r7, #10]
 800a888:	2bff      	cmp	r3, #255	@ 0xff
 800a88a:	d90a      	bls.n	800a8a2 <get_xdir_info+0x5e>
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
 800a88c:	897b      	ldrh	r3, [r7, #10]
 800a88e:	0a1b      	lsrs	r3, r3, #8
 800a890:	b299      	uxth	r1, r3
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	1c5a      	adds	r2, r3, #1
 800a896:	617a      	str	r2, [r7, #20]
 800a898:	b2c9      	uxtb	r1, r1
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4413      	add	r3, r2
 800a89e:	460a      	mov	r2, r1
 800a8a0:	769a      	strb	r2, [r3, #26]
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800a8a2:	897b      	ldrh	r3, [r7, #10]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <get_xdir_info+0x6a>
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2bfe      	cmp	r3, #254	@ 0xfe
 800a8ac:	d902      	bls.n	800a8b4 <get_xdir_info+0x70>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	617b      	str	r3, [r7, #20]
 800a8b2:	e015      	b.n	800a8e0 <get_xdir_info+0x9c>
		fno->fname[di++] = (char)w;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	1c5a      	adds	r2, r3, #1
 800a8b8:	617a      	str	r2, [r7, #20]
 800a8ba:	897a      	ldrh	r2, [r7, #10]
 800a8bc:	b2d1      	uxtb	r1, r2
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	460a      	mov	r2, r1
 800a8c4:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	3302      	adds	r3, #2
 800a8ca:	613b      	str	r3, [r7, #16]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	60fb      	str	r3, [r7, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3323      	adds	r3, #35	@ 0x23
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d3bd      	bcc.n	800a85c <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <get_xdir_info+0xb0>
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	617a      	str	r2, [r7, #20]
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	223f      	movs	r2, #63	@ 0x3f
 800a8f2:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	331a      	adds	r3, #26
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	791a      	ldrb	r2, [r3, #4]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	7b1b      	ldrb	r3, [r3, #12]
 800a912:	f003 0310 	and.w	r3, r3, #16
 800a916:	2b00      	cmp	r3, #0
 800a918:	d107      	bne.n	800a92a <get_xdir_info+0xe6>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3338      	adds	r3, #56	@ 0x38
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe f94a 	bl	8008bb8 <ld_qword>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	e003      	b.n	800a932 <get_xdir_info+0xee>
 800a92a:	f04f 0200 	mov.w	r2, #0
 800a92e:	f04f 0300 	mov.w	r3, #0
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	330c      	adds	r3, #12
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe f8ff 	bl	8008b40 <ld_word>
 800a942:	4603      	mov	r3, r0
 800a944:	461a      	mov	r2, r3
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	330e      	adds	r3, #14
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe f8f6 	bl	8008b40 <ld_word>
 800a954:	4603      	mov	r3, r0
 800a956:	461a      	mov	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	811a      	strh	r2, [r3, #8]
}
 800a95c:	bf00      	nop
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a964:	b590      	push	{r4, r7, lr}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97c:	4619      	mov	r1, r3
 800a97e:	4610      	mov	r0, r2
 800a980:	f7fe fcf2 	bl	8009368 <move_window>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a988:	7bfb      	ldrb	r3, [r7, #15]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <load_xdir+0x2e>
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	e09f      	b.n	800aad2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b85      	cmp	r3, #133	@ 0x85
 800a99a:	d001      	beq.n	800a9a0 <load_xdir+0x3c>
 800a99c:	2302      	movs	r3, #2
 800a99e:	e098      	b.n	800aad2 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a4:	2220      	movs	r2, #32
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6938      	ldr	r0, [r7, #16]
 800a9aa:	f7fe faaf 	bl	8008f0c <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	015b      	lsls	r3, r3, #5
 800a9b8:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b5f      	cmp	r3, #95	@ 0x5f
 800a9be:	d903      	bls.n	800a9c8 <load_xdir+0x64>
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a9c6:	d901      	bls.n	800a9cc <load_xdir+0x68>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e082      	b.n	800aad2 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff fb53 	bl	800a07a <dir_next>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <load_xdir+0x7e>
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	e077      	b.n	800aad2 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7fe fcbb 	bl	8009368 <move_window>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <load_xdir+0x9c>
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
 800a9fe:	e068      	b.n	800aad2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa08:	d001      	beq.n	800aa0e <load_xdir+0xaa>
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	e061      	b.n	800aad2 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	f103 0020 	add.w	r0, r3, #32
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa18:	2220      	movs	r2, #32
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	f7fe fa76 	bl	8008f0c <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	3323      	adds	r3, #35	@ 0x23
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	332c      	adds	r3, #44	@ 0x2c
 800aa28:	4a2c      	ldr	r2, [pc, #176]	@ (800aadc <load_xdir+0x178>)
 800aa2a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa2e:	08db      	lsrs	r3, r3, #3
 800aa30:	015b      	lsls	r3, r3, #5
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d201      	bcs.n	800aa3c <load_xdir+0xd8>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e04a      	b.n	800aad2 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800aa3c:	2340      	movs	r3, #64	@ 0x40
 800aa3e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800aa40:	2100      	movs	r1, #0
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7ff fb19 	bl	800a07a <dir_next>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <load_xdir+0xf2>
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	e03d      	b.n	800aad2 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4610      	mov	r0, r2
 800aa62:	f7fe fc81 	bl	8009368 <move_window>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <load_xdir+0x110>
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	e02e      	b.n	800aad2 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2bc1      	cmp	r3, #193	@ 0xc1
 800aa7c:	d001      	beq.n	800aa82 <load_xdir+0x11e>
 800aa7e:	2302      	movs	r3, #2
 800aa80:	e027      	b.n	800aad2 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800aa88:	d208      	bcs.n	800aa9c <load_xdir+0x138>
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	18d0      	adds	r0, r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa94:	2220      	movs	r2, #32
 800aa96:	4619      	mov	r1, r3
 800aa98:	f7fe fa38 	bl	8008f0c <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	3320      	adds	r3, #32
 800aaa0:	617b      	str	r3, [r7, #20]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d3ca      	bcc.n	800aa40 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800aab0:	d80e      	bhi.n	800aad0 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800aab2:	6938      	ldr	r0, [r7, #16]
 800aab4:	f7ff fe53 	bl	800a75e <xdir_sum>
 800aab8:	4603      	mov	r3, r0
 800aaba:	461c      	mov	r4, r3
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3302      	adds	r3, #2
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe f83d 	bl	8008b40 <ld_word>
 800aac6:	4603      	mov	r3, r0
 800aac8:	429c      	cmp	r4, r3
 800aaca:	d001      	beq.n	800aad0 <load_xdir+0x16c>
 800aacc:	2302      	movs	r3, #2
 800aace:	e000      	b.n	800aad2 <load_xdir+0x16e>
	}
	return FR_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd90      	pop	{r4, r7, pc}
 800aada:	bf00      	nop
 800aadc:	88888889 	.word	0x88888889

0800aae0 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800aae0:	b5b0      	push	{r4, r5, r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6808      	ldr	r0, [r1, #0]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6a08      	ldr	r0, [r1, #32]
 800aaf6:	6879      	ldr	r1, [r7, #4]
 800aaf8:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800aafe:	b2c8      	uxtb	r0, r1
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800ab08:	2000      	movs	r0, #0
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800ab12:	2300      	movs	r3, #0
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff fa20 	bl	8009f6e <dir_sdi>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d104      	bne.n	800ab42 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7ff ff13 	bl	800a964 <load_xdir>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bdb0      	pop	{r4, r5, r7, pc}

0800ab4c <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800ab4c:	b590      	push	{r4, r7, lr}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	1c9c      	adds	r4, r3, #2
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f7ff fdfc 	bl	800a75e <xdir_sum>
 800ab66:	4603      	mov	r3, r0
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7fe f8ff 	bl	8008d6e <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3301      	adds	r3, #1
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	3301      	adds	r3, #1
 800ab78:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7ff f9f4 	bl	8009f6e <dir_sdi>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ab8a:	e026      	b.n	800abda <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab94:	4619      	mov	r1, r3
 800ab96:	4610      	mov	r0, r2
 800ab98:	f7fe fbe6 	bl	8009368 <move_window>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d11d      	bne.n	800abe2 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abaa:	2220      	movs	r2, #32
 800abac:	68f9      	ldr	r1, [r7, #12]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe f9ac 	bl	8008f0c <mem_cpy>
		dp->obj.fs->wflag = 1;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2201      	movs	r2, #1
 800abba:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	613b      	str	r3, [r7, #16]
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00e      	beq.n	800abe6 <store_xdir+0x9a>
		dirb += SZDIRE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3320      	adds	r3, #32
 800abcc:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800abce:	2100      	movs	r1, #0
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff fa52 	bl	800a07a <dir_next>
 800abd6:	4603      	mov	r3, r0
 800abd8:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800abda:	7dfb      	ldrb	r3, [r7, #23]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d0d5      	beq.n	800ab8c <store_xdir+0x40>
 800abe0:	e002      	b.n	800abe8 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800abe2:	bf00      	nop
 800abe4:	e000      	b.n	800abe8 <store_xdir+0x9c>
		if (--nent == 0) break;
 800abe6:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <store_xdir+0xa8>
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d101      	bne.n	800abf8 <store_xdir+0xac>
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
 800abf6:	e000      	b.n	800abfa <store_xdir+0xae>
 800abf8:	2302      	movs	r3, #2
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd90      	pop	{r4, r7, pc}

0800ac02 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ac02:	b590      	push	{r4, r7, lr}
 800ac04:	b085      	sub	sp, #20
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800ac0c:	2240      	movs	r2, #64	@ 0x40
 800ac0e:	2100      	movs	r1, #0
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7fe f99c 	bl	8008f4e <mem_set>
	dirb[XDIR_Type] = 0x85;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2285      	movs	r2, #133	@ 0x85
 800ac1a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3320      	adds	r3, #32
 800ac20:	22c0      	movs	r2, #192	@ 0xc0
 800ac22:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800ac24:	2300      	movs	r3, #0
 800ac26:	72bb      	strb	r3, [r7, #10]
 800ac28:	2301      	movs	r3, #1
 800ac2a:	72fb      	strb	r3, [r7, #11]
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	813b      	strh	r3, [r7, #8]
 800ac30:	2340      	movs	r3, #64	@ 0x40
 800ac32:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	1c5a      	adds	r2, r3, #1
 800ac38:	60fa      	str	r2, [r7, #12]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	22c1      	movs	r2, #193	@ 0xc1
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	60fa      	str	r2, [r7, #12]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800ac50:	893b      	ldrh	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00b      	beq.n	800ac6e <create_xdir+0x6c>
 800ac56:	7abb      	ldrb	r3, [r7, #10]
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	813b      	strh	r3, [r7, #8]
 800ac62:	893b      	ldrh	r3, [r7, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <create_xdir+0x6c>
 800ac68:	7abb      	ldrb	r3, [r7, #10]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	893a      	ldrh	r2, [r7, #8]
 800ac76:	4611      	mov	r1, r2
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fe f878 	bl	8008d6e <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3302      	adds	r3, #2
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f003 031f 	and.w	r3, r3, #31
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1e0      	bne.n	800ac50 <create_xdir+0x4e>
		nb++;
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	3301      	adds	r3, #1
 800ac92:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800ac94:	7abb      	ldrb	r3, [r7, #10]
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1c8      	bne.n	800ac34 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3323      	adds	r3, #35	@ 0x23
 800aca6:	7aba      	ldrb	r2, [r7, #10]
 800aca8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3301      	adds	r3, #1
 800acae:	7afa      	ldrb	r2, [r7, #11]
 800acb0:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800acb8:	6838      	ldr	r0, [r7, #0]
 800acba:	f7ff fd80 	bl	800a7be <xname_sum>
 800acbe:	4603      	mov	r3, r0
 800acc0:	4619      	mov	r1, r3
 800acc2:	4620      	mov	r0, r4
 800acc4:	f7fe f853 	bl	8008d6e <st_word>
}
 800acc8:	bf00      	nop
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	bd90      	pop	{r4, r7, pc}

0800acd0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800acda:	2304      	movs	r3, #4
 800acdc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ace4:	23ff      	movs	r3, #255	@ 0xff
 800ace6:	757b      	strb	r3, [r7, #21]
 800ace8:	23ff      	movs	r3, #255	@ 0xff
 800acea:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800acec:	e09f      	b.n	800ae2e <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf2:	4619      	mov	r1, r3
 800acf4:	6938      	ldr	r0, [r7, #16]
 800acf6:	f7fe fb37 	bl	8009368 <move_window>
 800acfa:	4603      	mov	r3, r0
 800acfc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800acfe:	7dfb      	ldrb	r3, [r7, #23]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f040 809a 	bne.w	800ae3a <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ad0e:	7dbb      	ldrb	r3, [r7, #22]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d102      	bne.n	800ad1a <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ad14:	2304      	movs	r3, #4
 800ad16:	75fb      	strb	r3, [r7, #23]
 800ad18:	e096      	b.n	800ae48 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d118      	bne.n	800ad54 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ad22:	7dbb      	ldrb	r3, [r7, #22]
 800ad24:	2b85      	cmp	r3, #133	@ 0x85
 800ad26:	d179      	bne.n	800ae1c <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff fe17 	bl	800a964 <load_xdir>
 800ad36:	4603      	mov	r3, r0
 800ad38:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ad3a:	7dfb      	ldrb	r3, [r7, #23]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d17e      	bne.n	800ae3e <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	3304      	adds	r3, #4
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ad52:	e074      	b.n	800ae3e <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad58:	330b      	adds	r3, #11
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad60:	73fb      	strb	r3, [r7, #15]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	7bfa      	ldrb	r2, [r7, #15]
 800ad66:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ad68:	7dbb      	ldrb	r3, [r7, #22]
 800ad6a:	2be5      	cmp	r3, #229	@ 0xe5
 800ad6c:	d00e      	beq.n	800ad8c <dir_read+0xbc>
 800ad6e:	7dbb      	ldrb	r3, [r7, #22]
 800ad70:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad72:	d00b      	beq.n	800ad8c <dir_read+0xbc>
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	f023 0320 	bic.w	r3, r3, #32
 800ad7a:	2b08      	cmp	r3, #8
 800ad7c:	bf0c      	ite	eq
 800ad7e:	2301      	moveq	r3, #1
 800ad80:	2300      	movne	r3, #0
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d002      	beq.n	800ad92 <dir_read+0xc2>
				ord = 0xFF;
 800ad8c:	23ff      	movs	r3, #255	@ 0xff
 800ad8e:	757b      	strb	r3, [r7, #21]
 800ad90:	e044      	b.n	800ae1c <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	2b0f      	cmp	r3, #15
 800ad96:	d12f      	bne.n	800adf8 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ad98:	7dbb      	ldrb	r3, [r7, #22]
 800ad9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00d      	beq.n	800adbe <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada6:	7b5b      	ldrb	r3, [r3, #13]
 800ada8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800adaa:	7dbb      	ldrb	r3, [r7, #22]
 800adac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adb0:	75bb      	strb	r3, [r7, #22]
 800adb2:	7dbb      	ldrb	r3, [r7, #22]
 800adb4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800adbe:	7dba      	ldrb	r2, [r7, #22]
 800adc0:	7d7b      	ldrb	r3, [r7, #21]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d115      	bne.n	800adf2 <dir_read+0x122>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adca:	330d      	adds	r3, #13
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	7d3a      	ldrb	r2, [r7, #20]
 800add0:	429a      	cmp	r2, r3
 800add2:	d10e      	bne.n	800adf2 <dir_read+0x122>
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7ff fb2c 	bl	800a43c <pick_lfn>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <dir_read+0x122>
 800adea:	7d7b      	ldrb	r3, [r7, #21]
 800adec:	3b01      	subs	r3, #1
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	e000      	b.n	800adf4 <dir_read+0x124>
 800adf2:	23ff      	movs	r3, #255	@ 0xff
 800adf4:	757b      	strb	r3, [r7, #21]
 800adf6:	e011      	b.n	800ae1c <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800adf8:	7d7b      	ldrb	r3, [r7, #21]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d109      	bne.n	800ae12 <dir_read+0x142>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff fc8a 	bl	800a71c <sum_sfn>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	7d3b      	ldrb	r3, [r7, #20]
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d017      	beq.n	800ae42 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f04f 32ff 	mov.w	r2, #4294967295
 800ae18:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800ae1a:	e012      	b.n	800ae42 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff f92b 	bl	800a07a <dir_next>
 800ae24:	4603      	mov	r3, r0
 800ae26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10b      	bne.n	800ae46 <dir_read+0x176>
	while (dp->sect) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f47f af5b 	bne.w	800acee <dir_read+0x1e>
 800ae38:	e006      	b.n	800ae48 <dir_read+0x178>
		if (res != FR_OK) break;
 800ae3a:	bf00      	nop
 800ae3c:	e004      	b.n	800ae48 <dir_read+0x178>
					break;
 800ae3e:	bf00      	nop
 800ae40:	e002      	b.n	800ae48 <dir_read+0x178>
					break;
 800ae42:	bf00      	nop
 800ae44:	e000      	b.n	800ae48 <dir_read+0x178>
		if (res != FR_OK) break;
 800ae46:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <dir_read+0x184>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae5e:	b590      	push	{r4, r7, lr}
 800ae60:	b089      	sub	sp, #36	@ 0x24
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff f87d 	bl	8009f6e <dir_sdi>
 800ae74:	4603      	mov	r3, r0
 800ae76:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800ae78:	7ffb      	ldrb	r3, [r7, #31]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <dir_find+0x24>
 800ae7e:	7ffb      	ldrb	r3, [r7, #31]
 800ae80:	e113      	b.n	800b0aa <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d165      	bne.n	800af56 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff fc95 	bl	800a7be <xname_sum>
 800ae94:	4603      	mov	r3, r0
 800ae96:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ae98:	e050      	b.n	800af3c <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	3324      	adds	r3, #36	@ 0x24
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fd fe4d 	bl	8008b40 <ld_word>
 800aea6:	4603      	mov	r3, r0
 800aea8:	461a      	mov	r2, r3
 800aeaa:	893b      	ldrh	r3, [r7, #8]
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d144      	bne.n	800af3a <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800aeb8:	76fb      	strb	r3, [r7, #27]
 800aeba:	2340      	movs	r3, #64	@ 0x40
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	2300      	movs	r3, #0
 800aec0:	613b      	str	r3, [r7, #16]
 800aec2:	e029      	b.n	800af18 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	f003 031f 	and.w	r3, r3, #31
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d102      	bne.n	800aed4 <dir_find+0x76>
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	3302      	adds	r3, #2
 800aed2:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	691a      	ldr	r2, [r3, #16]
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	4413      	add	r3, r2
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fd fe2f 	bl	8008b40 <ld_word>
 800aee2:	4603      	mov	r3, r0
 800aee4:	4618      	mov	r0, r3
 800aee6:	f003 fd23 	bl	800e930 <ff_wtoupper>
 800aeea:	4603      	mov	r3, r0
 800aeec:	461c      	mov	r4, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	68da      	ldr	r2, [r3, #12]
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	4413      	add	r3, r2
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f003 fd18 	bl	800e930 <ff_wtoupper>
 800af00:	4603      	mov	r3, r0
 800af02:	429c      	cmp	r4, r3
 800af04:	d10c      	bne.n	800af20 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800af06:	7efb      	ldrb	r3, [r7, #27]
 800af08:	3b01      	subs	r3, #1
 800af0a:	76fb      	strb	r3, [r7, #27]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	3302      	adds	r3, #2
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	3301      	adds	r3, #1
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	7efb      	ldrb	r3, [r7, #27]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1d2      	bne.n	800aec4 <dir_find+0x66>
 800af1e:	e000      	b.n	800af22 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800af20:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800af22:	7efb      	ldrb	r3, [r7, #27]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <dir_find+0xde>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	68da      	ldr	r2, [r3, #12]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	4413      	add	r3, r2
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00b      	beq.n	800af50 <dir_find+0xf2>
 800af38:	e000      	b.n	800af3c <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800af3a:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800af3c:	2100      	movs	r1, #0
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff fec6 	bl	800acd0 <dir_read>
 800af44:	4603      	mov	r3, r0
 800af46:	77fb      	strb	r3, [r7, #31]
 800af48:	7ffb      	ldrb	r3, [r7, #31]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0a5      	beq.n	800ae9a <dir_find+0x3c>
 800af4e:	e000      	b.n	800af52 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800af50:	bf00      	nop
		}
		return res;
 800af52:	7ffb      	ldrb	r3, [r7, #31]
 800af54:	e0a9      	b.n	800b0aa <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af56:	23ff      	movs	r3, #255	@ 0xff
 800af58:	773b      	strb	r3, [r7, #28]
 800af5a:	7f3b      	ldrb	r3, [r7, #28]
 800af5c:	777b      	strb	r3, [r7, #29]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f04f 32ff 	mov.w	r2, #4294967295
 800af64:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af6a:	4619      	mov	r1, r3
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7fe f9fb 	bl	8009368 <move_window>
 800af72:	4603      	mov	r3, r0
 800af74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800af76:	7ffb      	ldrb	r3, [r7, #31]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f040 8090 	bne.w	800b09e <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af86:	7fbb      	ldrb	r3, [r7, #30]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d102      	bne.n	800af92 <dir_find+0x134>
 800af8c:	2304      	movs	r3, #4
 800af8e:	77fb      	strb	r3, [r7, #31]
 800af90:	e08a      	b.n	800b0a8 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af96:	330b      	adds	r3, #11
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af9e:	72fb      	strb	r3, [r7, #11]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	7afa      	ldrb	r2, [r7, #11]
 800afa4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800afa6:	7fbb      	ldrb	r3, [r7, #30]
 800afa8:	2be5      	cmp	r3, #229	@ 0xe5
 800afaa:	d007      	beq.n	800afbc <dir_find+0x15e>
 800afac:	7afb      	ldrb	r3, [r7, #11]
 800afae:	f003 0308 	and.w	r3, r3, #8
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <dir_find+0x16c>
 800afb6:	7afb      	ldrb	r3, [r7, #11]
 800afb8:	2b0f      	cmp	r3, #15
 800afba:	d006      	beq.n	800afca <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afbc:	23ff      	movs	r3, #255	@ 0xff
 800afbe:	777b      	strb	r3, [r7, #29]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f04f 32ff 	mov.w	r2, #4294967295
 800afc6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800afc8:	e05e      	b.n	800b088 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800afca:	7afb      	ldrb	r3, [r7, #11]
 800afcc:	2b0f      	cmp	r3, #15
 800afce:	d136      	bne.n	800b03e <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800afd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d154      	bne.n	800b088 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800afde:	7fbb      	ldrb	r3, [r7, #30]
 800afe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00d      	beq.n	800b004 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afec:	7b5b      	ldrb	r3, [r3, #13]
 800afee:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800aff0:	7fbb      	ldrb	r3, [r7, #30]
 800aff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aff6:	77bb      	strb	r3, [r7, #30]
 800aff8:	7fbb      	ldrb	r3, [r7, #30]
 800affa:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b004:	7fba      	ldrb	r2, [r7, #30]
 800b006:	7f7b      	ldrb	r3, [r7, #29]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d115      	bne.n	800b038 <dir_find+0x1da>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b010:	330d      	adds	r3, #13
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	7f3a      	ldrb	r2, [r7, #28]
 800b016:	429a      	cmp	r2, r3
 800b018:	d10e      	bne.n	800b038 <dir_find+0x1da>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b022:	4619      	mov	r1, r3
 800b024:	4610      	mov	r0, r2
 800b026:	f7ff f999 	bl	800a35c <cmp_lfn>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d003      	beq.n	800b038 <dir_find+0x1da>
 800b030:	7f7b      	ldrb	r3, [r7, #29]
 800b032:	3b01      	subs	r3, #1
 800b034:	b2db      	uxtb	r3, r3
 800b036:	e000      	b.n	800b03a <dir_find+0x1dc>
 800b038:	23ff      	movs	r3, #255	@ 0xff
 800b03a:	777b      	strb	r3, [r7, #29]
 800b03c:	e024      	b.n	800b088 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b03e:	7f7b      	ldrb	r3, [r7, #29]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d109      	bne.n	800b058 <dir_find+0x1fa>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff fb67 	bl	800a71c <sum_sfn>
 800b04e:	4603      	mov	r3, r0
 800b050:	461a      	mov	r2, r3
 800b052:	7f3b      	ldrb	r3, [r7, #28]
 800b054:	4293      	cmp	r3, r2
 800b056:	d024      	beq.n	800b0a2 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10a      	bne.n	800b07c <dir_find+0x21e>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3340      	adds	r3, #64	@ 0x40
 800b06e:	220b      	movs	r2, #11
 800b070:	4619      	mov	r1, r3
 800b072:	f7fd ff87 	bl	8008f84 <mem_cmp>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d014      	beq.n	800b0a6 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b07c:	23ff      	movs	r3, #255	@ 0xff
 800b07e:	777b      	strb	r3, [r7, #29]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f04f 32ff 	mov.w	r2, #4294967295
 800b086:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b088:	2100      	movs	r1, #0
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7fe fff5 	bl	800a07a <dir_next>
 800b090:	4603      	mov	r3, r0
 800b092:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b094:	7ffb      	ldrb	r3, [r7, #31]
 800b096:	2b00      	cmp	r3, #0
 800b098:	f43f af65 	beq.w	800af66 <dir_find+0x108>
 800b09c:	e004      	b.n	800b0a8 <dir_find+0x24a>
		if (res != FR_OK) break;
 800b09e:	bf00      	nop
 800b0a0:	e002      	b.n	800b0a8 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b0a2:	bf00      	nop
 800b0a4:	e000      	b.n	800b0a8 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0a6:	bf00      	nop

	return res;
 800b0a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3724      	adds	r7, #36	@ 0x24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd90      	pop	{r4, r7, pc}
	...

0800b0b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b0b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b0b8:	b0a0      	sub	sp, #128	@ 0x80
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b0ca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <dir_register+0x22>
 800b0d2:	2306      	movs	r3, #6
 800b0d4:	e18e      	b.n	800b3f4 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	677b      	str	r3, [r7, #116]	@ 0x74
 800b0da:	e002      	b.n	800b0e2 <dir_register+0x2e>
 800b0dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0de:	3301      	adds	r3, #1
 800b0e0:	677b      	str	r3, [r7, #116]	@ 0x74
 800b0e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0e4:	68da      	ldr	r2, [r3, #12]
 800b0e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	4413      	add	r3, r2
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1f4      	bne.n	800b0dc <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b0f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	f040 809f 	bne.w	800b23a <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b0fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0fe:	330e      	adds	r3, #14
 800b100:	4aa2      	ldr	r2, [pc, #648]	@ (800b38c <dir_register+0x2d8>)
 800b102:	fba2 2303 	umull	r2, r3, r2, r3
 800b106:	08db      	lsrs	r3, r3, #3
 800b108:	3302      	adds	r3, #2
 800b10a:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b10c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff f888 	bl	800a224 <dir_alloc>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800b11a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <dir_register+0x74>
 800b122:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b126:	e165      	b.n	800b3f4 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b12c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b12e:	3b01      	subs	r3, #1
 800b130:	015b      	lsls	r3, r3, #5
 800b132:	1ad2      	subs	r2, r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d072      	beq.n	800b226 <dir_register+0x172>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	79db      	ldrb	r3, [r3, #7]
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d06c      	beq.n	800b226 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b152:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b154:	8949      	ldrh	r1, [r1, #10]
 800b156:	0249      	lsls	r1, r1, #9
 800b158:	2000      	movs	r0, #0
 800b15a:	460c      	mov	r4, r1
 800b15c:	4605      	mov	r5, r0
 800b15e:	eb12 0804 	adds.w	r8, r2, r4
 800b162:	eb43 0905 	adc.w	r9, r3, r5
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fca4 	bl	8009abc <fill_first_frag>
 800b174:	4603      	mov	r3, r0
 800b176:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b17a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <dir_register+0xd4>
 800b182:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b186:	e135      	b.n	800b3f4 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b18e:	f04f 32ff 	mov.w	r2, #4294967295
 800b192:	4619      	mov	r1, r3
 800b194:	f7fe fcc1 	bl	8009b1a <fill_last_frag>
 800b198:	4603      	mov	r3, r0
 800b19a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b19e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <dir_register+0xf8>
 800b1a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1aa:	e123      	b.n	800b3f4 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	f107 0308 	add.w	r3, r7, #8
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff fc93 	bl	800aae0 <load_obj_dir>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b1c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <dir_register+0x11a>
 800b1c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1cc:	e112      	b.n	800b3f4 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b1ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b1dc:	4608      	mov	r0, r1
 800b1de:	f7fd fe0d 	bl	8008dfc <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b1e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	f7fd fe03 	bl	8008dfc <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	79da      	ldrb	r2, [r3, #7]
 800b1fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	3321      	adds	r3, #33	@ 0x21
 800b200:	f042 0201 	orr.w	r2, r2, #1
 800b204:	b2d2      	uxtb	r2, r2
 800b206:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b208:	f107 0308 	add.w	r3, r7, #8
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fc9d 	bl	800ab4c <store_xdir>
 800b212:	4603      	mov	r3, r0
 800b214:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b218:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <dir_register+0x172>
 800b220:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b224:	e0e6      	b.n	800b3f4 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b228:	691a      	ldr	r2, [r3, #16]
 800b22a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	4619      	mov	r1, r3
 800b230:	4610      	mov	r0, r2
 800b232:	f7ff fce6 	bl	800ac02 <create_xdir>
		return FR_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	e0dc      	b.n	800b3f4 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b240:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b244:	220c      	movs	r2, #12
 800b246:	4618      	mov	r0, r3
 800b248:	f7fd fe60 	bl	8008f0c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b24c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	2b00      	cmp	r3, #0
 800b256:	d033      	beq.n	800b2c0 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2240      	movs	r2, #64	@ 0x40
 800b25c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800b260:	2301      	movs	r3, #1
 800b262:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b264:	e016      	b.n	800b294 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800b26c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b26e:	68da      	ldr	r2, [r3, #12]
 800b270:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800b274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b276:	f7ff f9ad 	bl	800a5d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff fdef 	bl	800ae5e <dir_find>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800b286:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800b28e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b290:	3301      	adds	r3, #1
 800b292:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b296:	2b63      	cmp	r3, #99	@ 0x63
 800b298:	d9e5      	bls.n	800b266 <dir_register+0x1b2>
 800b29a:	e000      	b.n	800b29e <dir_register+0x1ea>
			if (res != FR_OK) break;
 800b29c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b29e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2a0:	2b64      	cmp	r3, #100	@ 0x64
 800b2a2:	d101      	bne.n	800b2a8 <dir_register+0x1f4>
 800b2a4:	2307      	movs	r3, #7
 800b2a6:	e0a5      	b.n	800b3f4 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b2a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d002      	beq.n	800b2b6 <dir_register+0x202>
 800b2b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b2b4:	e09e      	b.n	800b3f4 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b2b6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b2c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d007      	beq.n	800b2dc <dir_register+0x228>
 800b2cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2ce:	330c      	adds	r3, #12
 800b2d0:	4a2f      	ldr	r2, [pc, #188]	@ (800b390 <dir_register+0x2dc>)
 800b2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d6:	089b      	lsrs	r3, r3, #2
 800b2d8:	3301      	adds	r3, #1
 800b2da:	e000      	b.n	800b2de <dir_register+0x22a>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b2e0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7fe ff9e 	bl	800a224 <dir_alloc>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b2ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d14f      	bne.n	800b396 <dir_register+0x2e2>
 800b2f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800b2fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d049      	beq.n	800b396 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b308:	015b      	lsls	r3, r3, #5
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7fe fe2d 	bl	8009f6e <dir_sdi>
 800b314:	4603      	mov	r3, r0
 800b316:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b31a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d139      	bne.n	800b396 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	3340      	adds	r3, #64	@ 0x40
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff f9f8 	bl	800a71c <sum_sfn>
 800b32c:	4603      	mov	r3, r0
 800b32e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b336:	4619      	mov	r1, r3
 800b338:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b33a:	f7fe f815 	bl	8009368 <move_window>
 800b33e:	4603      	mov	r3, r0
 800b340:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800b344:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d123      	bne.n	800b394 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b34c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b34e:	68d8      	ldr	r0, [r3, #12]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b356:	b2da      	uxtb	r2, r3
 800b358:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800b35c:	f7ff f8d2 	bl	800a504 <put_lfn>
				fs->wflag = 1;
 800b360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b362:	2201      	movs	r2, #1
 800b364:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b366:	2100      	movs	r1, #0
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7fe fe86 	bl	800a07a <dir_next>
 800b36e:	4603      	mov	r3, r0
 800b370:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800b374:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10c      	bne.n	800b396 <dir_register+0x2e2>
 800b37c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b37e:	3b01      	subs	r3, #1
 800b380:	673b      	str	r3, [r7, #112]	@ 0x70
 800b382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1d4      	bne.n	800b332 <dir_register+0x27e>
 800b388:	e005      	b.n	800b396 <dir_register+0x2e2>
 800b38a:	bf00      	nop
 800b38c:	88888889 	.word	0x88888889
 800b390:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b394:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b396:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d128      	bne.n	800b3f0 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b3a6:	f7fd ffdf 	bl	8009368 <move_window>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b3b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d11b      	bne.n	800b3f0 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3bc:	2220      	movs	r2, #32
 800b3be:	2100      	movs	r1, #0
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fd fdc4 	bl	8008f4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3340      	adds	r3, #64	@ 0x40
 800b3ce:	220b      	movs	r2, #11
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f7fd fd9b 	bl	8008f0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3e0:	330c      	adds	r3, #12
 800b3e2:	f002 0218 	and.w	r2, r2, #24
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b3f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3780      	adds	r7, #128	@ 0x80
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b3fe:	bf00      	nop

0800b400 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b400:	b5b0      	push	{r4, r5, r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2200      	movs	r2, #0
 800b414:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f000 80e7 	beq.w	800b5ee <get_fileinfo+0x1ee>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b04      	cmp	r3, #4
 800b426:	d106      	bne.n	800b436 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff fa08 	bl	800a844 <get_xdir_info>
		return;
 800b434:	e0dc      	b.n	800b5f0 <get_fileinfo+0x1f0>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d040      	beq.n	800b4c2 <get_fileinfo+0xc2>
			i = j = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	61bb      	str	r3, [r7, #24]
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b448:	e029      	b.n	800b49e <get_fileinfo+0x9e>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b44a:	89fb      	ldrh	r3, [r7, #14]
 800b44c:	2100      	movs	r1, #0
 800b44e:	4618      	mov	r0, r3
 800b450:	f003 fa10 	bl	800e874 <ff_convert>
 800b454:	4603      	mov	r3, r0
 800b456:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b458:	89fb      	ldrh	r3, [r7, #14]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d102      	bne.n	800b464 <get_fileinfo+0x64>
 800b45e:	2300      	movs	r3, #0
 800b460:	61fb      	str	r3, [r7, #28]
 800b462:	e028      	b.n	800b4b6 <get_fileinfo+0xb6>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800b464:	89fb      	ldrh	r3, [r7, #14]
 800b466:	2bff      	cmp	r3, #255	@ 0xff
 800b468:	d90a      	bls.n	800b480 <get_fileinfo+0x80>
					fno->fname[i++] = (char)(w >> 8);
 800b46a:	89fb      	ldrh	r3, [r7, #14]
 800b46c:	0a1b      	lsrs	r3, r3, #8
 800b46e:	b299      	uxth	r1, r3
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	61fa      	str	r2, [r7, #28]
 800b476:	b2c9      	uxtb	r1, r1
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	4413      	add	r3, r2
 800b47c:	460a      	mov	r2, r1
 800b47e:	769a      	strb	r2, [r3, #26]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	2bfe      	cmp	r3, #254	@ 0xfe
 800b484:	d902      	bls.n	800b48c <get_fileinfo+0x8c>
 800b486:	2300      	movs	r3, #0
 800b488:	61fb      	str	r3, [r7, #28]
 800b48a:	e014      	b.n	800b4b6 <get_fileinfo+0xb6>
				fno->fname[i++] = (TCHAR)w;
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	1c5a      	adds	r2, r3, #1
 800b490:	61fa      	str	r2, [r7, #28]
 800b492:	89fa      	ldrh	r2, [r7, #14]
 800b494:	b2d1      	uxtb	r1, r2
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	4413      	add	r3, r2
 800b49a:	460a      	mov	r2, r1
 800b49c:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	1c59      	adds	r1, r3, #1
 800b4a6:	61b9      	str	r1, [r7, #24]
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	4413      	add	r3, r2
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	81fb      	strh	r3, [r7, #14]
 800b4b0:	89fb      	ldrh	r3, [r7, #14]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1c9      	bne.n	800b44a <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	331a      	adds	r3, #26
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61bb      	str	r3, [r7, #24]
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	331a      	adds	r3, #26
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b4d6:	e04d      	b.n	800b574 <get_fileinfo+0x174>
		c = (TCHAR)dp->dir[i++];
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	1c59      	adds	r1, r3, #1
 800b4e0:	61f9      	str	r1, [r7, #28]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	d041      	beq.n	800b572 <get_fileinfo+0x172>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
 800b4f0:	2b05      	cmp	r3, #5
 800b4f2:	d101      	bne.n	800b4f8 <get_fileinfo+0xf8>
 800b4f4:	23e5      	movs	r3, #229	@ 0xe5
 800b4f6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	2b09      	cmp	r3, #9
 800b4fc:	d10f      	bne.n	800b51e <get_fileinfo+0x11e>
			if (!lfv) fno->fname[j] = '.';
 800b4fe:	89bb      	ldrh	r3, [r7, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d105      	bne.n	800b510 <get_fileinfo+0x110>
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	4413      	add	r3, r2
 800b50a:	331a      	adds	r3, #26
 800b50c:	222e      	movs	r2, #46	@ 0x2e
 800b50e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	61ba      	str	r2, [r7, #24]
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	4413      	add	r3, r2
 800b51a:	222e      	movs	r2, #46	@ 0x2e
 800b51c:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	4413      	add	r3, r2
 800b524:	330d      	adds	r3, #13
 800b526:	7dfa      	ldrb	r2, [r7, #23]
 800b528:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b52a:	89bb      	ldrh	r3, [r7, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d11c      	bne.n	800b56a <get_fileinfo+0x16a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	2b40      	cmp	r3, #64	@ 0x40
 800b534:	d913      	bls.n	800b55e <get_fileinfo+0x15e>
 800b536:	7dfb      	ldrb	r3, [r7, #23]
 800b538:	2b5a      	cmp	r3, #90	@ 0x5a
 800b53a:	d810      	bhi.n	800b55e <get_fileinfo+0x15e>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b540:	330c      	adds	r3, #12
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	461a      	mov	r2, r3
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	2b08      	cmp	r3, #8
 800b54a:	d901      	bls.n	800b550 <get_fileinfo+0x150>
 800b54c:	2310      	movs	r3, #16
 800b54e:	e000      	b.n	800b552 <get_fileinfo+0x152>
 800b550:	2308      	movs	r3, #8
 800b552:	4013      	ands	r3, r2
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <get_fileinfo+0x15e>
				c += 0x20;			/* To lower */
 800b558:	7dfb      	ldrb	r3, [r7, #23]
 800b55a:	3320      	adds	r3, #32
 800b55c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	4413      	add	r3, r2
 800b564:	331a      	adds	r3, #26
 800b566:	7dfa      	ldrb	r2, [r7, #23]
 800b568:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	3301      	adds	r3, #1
 800b56e:	61bb      	str	r3, [r7, #24]
 800b570:	e000      	b.n	800b574 <get_fileinfo+0x174>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b572:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	2b0a      	cmp	r3, #10
 800b578:	d9ae      	bls.n	800b4d8 <get_fileinfo+0xd8>
	}
	if (!lfv) {
 800b57a:	89bb      	ldrh	r3, [r7, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10d      	bne.n	800b59c <get_fileinfo+0x19c>
		fno->fname[j] = 0;
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	4413      	add	r3, r2
 800b586:	331a      	adds	r3, #26
 800b588:	2200      	movs	r2, #0
 800b58a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b590:	330c      	adds	r3, #12
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <get_fileinfo+0x19c>
 800b598:	2300      	movs	r3, #0
 800b59a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	330d      	adds	r3, #13
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5ac:	7ada      	ldrb	r2, [r3, #11]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5b6:	331c      	adds	r3, #28
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fd fada 	bl	8008b72 <ld_dword>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	461c      	mov	r4, r3
 800b5c4:	4615      	mov	r5, r2
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5d0:	3316      	adds	r3, #22
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fd facd 	bl	8008b72 <ld_dword>
 800b5d8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	815a      	strh	r2, [r3, #10]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	0c1b      	lsrs	r3, r3, #16
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	811a      	strh	r2, [r3, #8]
 800b5ec:	e000      	b.n	800b5f0 <get_fileinfo+0x1f0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b5ee:	bf00      	nop
}
 800b5f0:	3720      	adds	r7, #32
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b5f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	@ 0x28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	613b      	str	r3, [r7, #16]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	2300      	movs	r3, #0
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	61ba      	str	r2, [r7, #24]
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	4413      	add	r3, r2
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b628:	2b1f      	cmp	r3, #31
 800b62a:	d96a      	bls.n	800b702 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b62c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b62e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b630:	d006      	beq.n	800b640 <create_name+0x48>
 800b632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b634:	2b5c      	cmp	r3, #92	@ 0x5c
 800b636:	d110      	bne.n	800b65a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b638:	e002      	b.n	800b640 <create_name+0x48>
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	3301      	adds	r3, #1
 800b63e:	61bb      	str	r3, [r7, #24]
 800b640:	693a      	ldr	r2, [r7, #16]
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	4413      	add	r3, r2
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	2b2f      	cmp	r3, #47	@ 0x2f
 800b64a:	d0f6      	beq.n	800b63a <create_name+0x42>
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	4413      	add	r3, r2
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b5c      	cmp	r3, #92	@ 0x5c
 800b656:	d0f0      	beq.n	800b63a <create_name+0x42>
			break;
 800b658:	e054      	b.n	800b704 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b65e:	d901      	bls.n	800b664 <create_name+0x6c>
 800b660:	2306      	movs	r3, #6
 800b662:	e1bf      	b.n	800b9e4 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b666:	b2db      	uxtb	r3, r3
 800b668:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800b66a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b80      	cmp	r3, #128	@ 0x80
 800b670:	d925      	bls.n	800b6be <create_name+0xc6>
 800b672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2bff      	cmp	r3, #255	@ 0xff
 800b678:	d021      	beq.n	800b6be <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	61ba      	str	r2, [r7, #24]
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	4413      	add	r3, r2
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800b68a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b68c:	021b      	lsls	r3, r3, #8
 800b68e:	b29a      	uxth	r2, r3
 800b690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b694:	b29b      	uxth	r3, r3
 800b696:	4413      	add	r3, r2
 800b698:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800b69a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b69e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b6a0:	d903      	bls.n	800b6aa <create_name+0xb2>
 800b6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6a6:	2b7e      	cmp	r3, #126	@ 0x7e
 800b6a8:	d909      	bls.n	800b6be <create_name+0xc6>
 800b6aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	da03      	bge.n	800b6ba <create_name+0xc2>
 800b6b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6b6:	2bff      	cmp	r3, #255	@ 0xff
 800b6b8:	d101      	bne.n	800b6be <create_name+0xc6>
 800b6ba:	2306      	movs	r3, #6
 800b6bc:	e192      	b.n	800b9e4 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b6be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6c0:	2101      	movs	r1, #1
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f003 f8d6 	bl	800e874 <ff_convert>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b6cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <create_name+0xde>
 800b6d2:	2306      	movs	r3, #6
 800b6d4:	e186      	b.n	800b9e4 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b6d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6d8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6da:	d809      	bhi.n	800b6f0 <create_name+0xf8>
 800b6dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6de:	4619      	mov	r1, r3
 800b6e0:	489a      	ldr	r0, [pc, #616]	@ (800b94c <create_name+0x354>)
 800b6e2:	f7fd fc76 	bl	8008fd2 <chk_chr>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <create_name+0xf8>
 800b6ec:	2306      	movs	r3, #6
 800b6ee:	e179      	b.n	800b9e4 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	617a      	str	r2, [r7, #20]
 800b6f6:	005b      	lsls	r3, r3, #1
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b6fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b700:	e78a      	b.n	800b618 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b702:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	441a      	add	r2, r3
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b70e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b710:	2b1f      	cmp	r3, #31
 800b712:	d801      	bhi.n	800b718 <create_name+0x120>
 800b714:	2304      	movs	r3, #4
 800b716:	e000      	b.n	800b71a <create_name+0x122>
 800b718:	2300      	movs	r3, #0
 800b71a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b71e:	e011      	b.n	800b744 <create_name+0x14c>
		w = lfn[di - 1];
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b726:	3b01      	subs	r3, #1
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4413      	add	r3, r2
 800b72e:	881b      	ldrh	r3, [r3, #0]
 800b730:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b734:	2b20      	cmp	r3, #32
 800b736:	d002      	beq.n	800b73e <create_name+0x146>
 800b738:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b73a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b73c:	d106      	bne.n	800b74c <create_name+0x154>
		di--;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	3b01      	subs	r3, #1
 800b742:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1ea      	bne.n	800b720 <create_name+0x128>
 800b74a:	e000      	b.n	800b74e <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800b74c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	2200      	movs	r2, #0
 800b758:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <create_name+0x16c>
 800b760:	2306      	movs	r3, #6
 800b762:	e13f      	b.n	800b9e4 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3340      	adds	r3, #64	@ 0x40
 800b768:	220b      	movs	r2, #11
 800b76a:	2120      	movs	r1, #32
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fd fbee 	bl	8008f4e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b772:	2300      	movs	r3, #0
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	e002      	b.n	800b77e <create_name+0x186>
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	3301      	adds	r3, #1
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	005b      	lsls	r3, r3, #1
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	4413      	add	r3, r2
 800b786:	881b      	ldrh	r3, [r3, #0]
 800b788:	2b20      	cmp	r3, #32
 800b78a:	d0f5      	beq.n	800b778 <create_name+0x180>
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	4413      	add	r3, r2
 800b794:	881b      	ldrh	r3, [r3, #0]
 800b796:	2b2e      	cmp	r3, #46	@ 0x2e
 800b798:	d0ee      	beq.n	800b778 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d009      	beq.n	800b7b4 <create_name+0x1bc>
 800b7a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7a4:	f043 0303 	orr.w	r3, r3, #3
 800b7a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b7ac:	e002      	b.n	800b7b4 <create_name+0x1bc>
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d009      	beq.n	800b7ce <create_name+0x1d6>
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7cc:	d1ef      	bne.n	800b7ae <create_name+0x1b6>

	i = b = 0; ni = 8;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	623b      	str	r3, [r7, #32]
 800b7d8:	2308      	movs	r3, #8
 800b7da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	61ba      	str	r2, [r7, #24]
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b7ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 80aa 	beq.w	800b948 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b7f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d006      	beq.n	800b808 <create_name+0x210>
 800b7fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7fe:	d10a      	bne.n	800b816 <create_name+0x21e>
 800b800:	69ba      	ldr	r2, [r7, #24]
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	429a      	cmp	r2, r3
 800b806:	d006      	beq.n	800b816 <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800b808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b80c:	f043 0303 	orr.w	r3, r3, #3
 800b810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b814:	e097      	b.n	800b946 <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b816:	6a3a      	ldr	r2, [r7, #32]
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d203      	bcs.n	800b826 <create_name+0x22e>
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	429a      	cmp	r2, r3
 800b824:	d123      	bne.n	800b86e <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	2b0b      	cmp	r3, #11
 800b82a:	d106      	bne.n	800b83a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800b82c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b830:	f043 0303 	orr.w	r3, r3, #3
 800b834:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b838:	e08d      	b.n	800b956 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d005      	beq.n	800b84e <create_name+0x256>
 800b842:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b846:	f043 0303 	orr.w	r3, r3, #3
 800b84a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	429a      	cmp	r2, r3
 800b854:	d87e      	bhi.n	800b954 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	61bb      	str	r3, [r7, #24]
 800b85a:	2308      	movs	r3, #8
 800b85c:	623b      	str	r3, [r7, #32]
 800b85e:	230b      	movs	r3, #11
 800b860:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b86c:	e06b      	b.n	800b946 <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b86e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b870:	2b7f      	cmp	r3, #127	@ 0x7f
 800b872:	d910      	bls.n	800b896 <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800b874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b876:	4618      	mov	r0, r3
 800b878:	f003 f85a 	bl	800e930 <ff_wtoupper>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2100      	movs	r1, #0
 800b880:	4618      	mov	r0, r3
 800b882:	f002 fff7 	bl	800e874 <ff_convert>
 800b886:	4603      	mov	r3, r0
 800b888:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b88a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b88e:	f043 0302 	orr.w	r3, r3, #2
 800b892:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800b896:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b898:	2bff      	cmp	r3, #255	@ 0xff
 800b89a:	d91a      	bls.n	800b8d2 <create_name+0x2da>
			if (i >= ni - 1) {
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	6a3a      	ldr	r2, [r7, #32]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d308      	bcc.n	800b8b8 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800b8a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b8aa:	f043 0303 	orr.w	r3, r3, #3
 800b8ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	623b      	str	r3, [r7, #32]
 800b8b6:	e046      	b.n	800b946 <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800b8b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8ba:	0a1b      	lsrs	r3, r3, #8
 800b8bc:	b299      	uxth	r1, r3
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	623a      	str	r2, [r7, #32]
 800b8c4:	b2c9      	uxtb	r1, r1
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	460a      	mov	r2, r1
 800b8cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8d0:	e02f      	b.n	800b932 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b8d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <create_name+0x2f0>
 800b8d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8da:	4619      	mov	r1, r3
 800b8dc:	481c      	ldr	r0, [pc, #112]	@ (800b950 <create_name+0x358>)
 800b8de:	f7fd fb78 	bl	8008fd2 <chk_chr>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d008      	beq.n	800b8fa <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b8e8:	235f      	movs	r3, #95	@ 0x5f
 800b8ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b8ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b8f0:	f043 0303 	orr.w	r3, r3, #3
 800b8f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b8f8:	e01b      	b.n	800b932 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b8fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8fc:	2b40      	cmp	r3, #64	@ 0x40
 800b8fe:	d909      	bls.n	800b914 <create_name+0x31c>
 800b900:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b902:	2b5a      	cmp	r3, #90	@ 0x5a
 800b904:	d806      	bhi.n	800b914 <create_name+0x31c>
					b |= 2;
 800b906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b90a:	f043 0302 	orr.w	r3, r3, #2
 800b90e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b912:	e00e      	b.n	800b932 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b916:	2b60      	cmp	r3, #96	@ 0x60
 800b918:	d90b      	bls.n	800b932 <create_name+0x33a>
 800b91a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b91c:	2b7a      	cmp	r3, #122	@ 0x7a
 800b91e:	d808      	bhi.n	800b932 <create_name+0x33a>
						b |= 1; w -= 0x20;
 800b920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b924:	f043 0301 	orr.w	r3, r3, #1
 800b928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b92c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b92e:	3b20      	subs	r3, #32
 800b930:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	1c5a      	adds	r2, r3, #1
 800b936:	623a      	str	r2, [r7, #32]
 800b938:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b93a:	b2d1      	uxtb	r1, r2
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	4413      	add	r3, r2
 800b940:	460a      	mov	r2, r1
 800b942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b946:	e749      	b.n	800b7dc <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800b948:	bf00      	nop
 800b94a:	e004      	b.n	800b956 <create_name+0x35e>
 800b94c:	080132fc 	.word	0x080132fc
 800b950:	08013308 	.word	0x08013308
			if (si > di) break;			/* No extension */
 800b954:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b95c:	2be5      	cmp	r3, #229	@ 0xe5
 800b95e:	d103      	bne.n	800b968 <create_name+0x370>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2205      	movs	r2, #5
 800b964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	2b08      	cmp	r3, #8
 800b96c:	d104      	bne.n	800b978 <create_name+0x380>
 800b96e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b97c:	f003 030c 	and.w	r3, r3, #12
 800b980:	2b0c      	cmp	r3, #12
 800b982:	d005      	beq.n	800b990 <create_name+0x398>
 800b984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b988:	f003 0303 	and.w	r3, r3, #3
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d105      	bne.n	800b99c <create_name+0x3a4>
 800b990:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b994:	f043 0302 	orr.w	r3, r3, #2
 800b998:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b99c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9a0:	f003 0302 	and.w	r3, r3, #2
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d117      	bne.n	800b9d8 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9ac:	f003 0303 	and.w	r3, r3, #3
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d105      	bne.n	800b9c0 <create_name+0x3c8>
 800b9b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9b8:	f043 0310 	orr.w	r3, r3, #16
 800b9bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9c4:	f003 030c 	and.w	r3, r3, #12
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	d105      	bne.n	800b9d8 <create_name+0x3e0>
 800b9cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b9d0:	f043 0308 	orr.w	r3, r3, #8
 800b9d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b9de:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800b9e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3728      	adds	r7, #40	@ 0x28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ba00:	e002      	b.n	800ba08 <follow_path+0x1c>
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	3301      	adds	r3, #1
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ba0e:	d0f8      	beq.n	800ba02 <follow_path+0x16>
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	2b5c      	cmp	r3, #92	@ 0x5c
 800ba16:	d0f4      	beq.n	800ba02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2200      	movs	r2, #0
 800ba22:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	2b1f      	cmp	r3, #31
 800ba2a:	d80a      	bhi.n	800ba42 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2280      	movs	r2, #128	@ 0x80
 800ba30:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800ba34:	2100      	movs	r1, #0
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7fe fa99 	bl	8009f6e <dir_sdi>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	75fb      	strb	r3, [r7, #23]
 800ba40:	e078      	b.n	800bb34 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba42:	463b      	mov	r3, r7
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff fdd6 	bl	800b5f8 <create_name>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d169      	bne.n	800bb2a <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff fa01 	bl	800ae5e <dir_find>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ba66:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00a      	beq.n	800ba84 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	d15c      	bne.n	800bb2e <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba74:	7afb      	ldrb	r3, [r7, #11]
 800ba76:	f003 0304 	and.w	r3, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d157      	bne.n	800bb2e <follow_path+0x142>
 800ba7e:	2305      	movs	r3, #5
 800ba80:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ba82:	e054      	b.n	800bb2e <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba84:	7afb      	ldrb	r3, [r7, #11]
 800ba86:	f003 0304 	and.w	r3, r3, #4
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d151      	bne.n	800bb32 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	799b      	ldrb	r3, [r3, #6]
 800ba92:	f003 0310 	and.w	r3, r3, #16
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d102      	bne.n	800baa0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800ba9a:	2305      	movs	r3, #5
 800ba9c:	75fb      	strb	r3, [r7, #23]
 800ba9e:	e049      	b.n	800bb34 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	2b04      	cmp	r3, #4
 800baa6:	d130      	bne.n	800bb0a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	689a      	ldr	r2, [r3, #8]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bab6:	4613      	mov	r3, r2
 800bab8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	79d2      	ldrb	r2, [r2, #7]
 800bac0:	431a      	orrs	r2, r3
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	3334      	adds	r3, #52	@ 0x34
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fd f84c 	bl	8008b72 <ld_dword>
 800bada:	4602      	mov	r2, r0
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	3321      	adds	r3, #33	@ 0x21
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f003 0302 	and.w	r3, r3, #2
 800baec:	b2da      	uxtb	r2, r3
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	3338      	adds	r3, #56	@ 0x38
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fd f85d 	bl	8008bb8 <ld_qword>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	6939      	ldr	r1, [r7, #16]
 800bb04:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800bb08:	e79b      	b.n	800ba42 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb18:	4413      	add	r3, r2
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f7fe fbdd 	bl	800a2dc <ld_clust>
 800bb22:	4602      	mov	r2, r0
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb28:	e78b      	b.n	800ba42 <follow_path+0x56>
			if (res != FR_OK) break;
 800bb2a:	bf00      	nop
 800bb2c:	e002      	b.n	800bb34 <follow_path+0x148>
				break;
 800bb2e:	bf00      	nop
 800bb30:	e000      	b.n	800bb34 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb32:	bf00      	nop
			}
		}
	}

	return res;
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b087      	sub	sp, #28
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bb46:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d031      	beq.n	800bbb8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	617b      	str	r3, [r7, #20]
 800bb5a:	e002      	b.n	800bb62 <get_ldnumber+0x24>
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	617b      	str	r3, [r7, #20]
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	2b1f      	cmp	r3, #31
 800bb68:	d903      	bls.n	800bb72 <get_ldnumber+0x34>
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bb70:	d1f4      	bne.n	800bb5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	2b3a      	cmp	r3, #58	@ 0x3a
 800bb78:	d11c      	bne.n	800bbb4 <get_ldnumber+0x76>
			tp = *path;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	60fa      	str	r2, [r7, #12]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	3b30      	subs	r3, #48	@ 0x30
 800bb8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	2b09      	cmp	r3, #9
 800bb90:	d80e      	bhi.n	800bbb0 <get_ldnumber+0x72>
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d10a      	bne.n	800bbb0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d107      	bne.n	800bbb0 <get_ldnumber+0x72>
					vol = (int)i;
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	3301      	adds	r3, #1
 800bba8:	617b      	str	r3, [r7, #20]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	e002      	b.n	800bbba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bbb8:	693b      	ldr	r3, [r7, #16]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
	...

0800bbc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	70da      	strb	r2, [r3, #3]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f04f 32ff 	mov.w	r2, #4294967295
 800bbde:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7fd fbc0 	bl	8009368 <move_window>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <check_fs+0x2a>
 800bbee:	2304      	movs	r3, #4
 800bbf0:	e044      	b.n	800bc7c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3338      	adds	r3, #56	@ 0x38
 800bbf6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fc ffa0 	bl	8008b40 <ld_word>
 800bc00:	4603      	mov	r3, r0
 800bc02:	461a      	mov	r2, r3
 800bc04:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d001      	beq.n	800bc10 <check_fs+0x48>
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e035      	b.n	800bc7c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bc16:	2be9      	cmp	r3, #233	@ 0xe9
 800bc18:	d009      	beq.n	800bc2e <check_fs+0x66>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bc20:	2beb      	cmp	r3, #235	@ 0xeb
 800bc22:	d11e      	bne.n	800bc62 <check_fs+0x9a>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bc2a:	2b90      	cmp	r3, #144	@ 0x90
 800bc2c:	d119      	bne.n	800bc62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3338      	adds	r3, #56	@ 0x38
 800bc32:	3336      	adds	r3, #54	@ 0x36
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fc ff9c 	bl	8008b72 <ld_dword>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bc40:	4a10      	ldr	r2, [pc, #64]	@ (800bc84 <check_fs+0xbc>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d101      	bne.n	800bc4a <check_fs+0x82>
 800bc46:	2300      	movs	r3, #0
 800bc48:	e018      	b.n	800bc7c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	3338      	adds	r3, #56	@ 0x38
 800bc4e:	3352      	adds	r3, #82	@ 0x52
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fc ff8e 	bl	8008b72 <ld_dword>
 800bc56:	4603      	mov	r3, r0
 800bc58:	4a0b      	ldr	r2, [pc, #44]	@ (800bc88 <check_fs+0xc0>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d101      	bne.n	800bc62 <check_fs+0x9a>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e00c      	b.n	800bc7c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3338      	adds	r3, #56	@ 0x38
 800bc66:	220b      	movs	r2, #11
 800bc68:	4908      	ldr	r1, [pc, #32]	@ (800bc8c <check_fs+0xc4>)
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd f98a 	bl	8008f84 <mem_cmp>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <check_fs+0xb2>
 800bc76:	2301      	movs	r3, #1
 800bc78:	e000      	b.n	800bc7c <check_fs+0xb4>
#endif
	return 2;
 800bc7a:	2302      	movs	r3, #2
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	00544146 	.word	0x00544146
 800bc88:	33544146 	.word	0x33544146
 800bc8c:	08013310 	.word	0x08013310

0800bc90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bc90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc94:	b09c      	sub	sp, #112	@ 0x70
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	61f8      	str	r0, [r7, #28]
 800bc9a:	61b9      	str	r1, [r7, #24]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bca6:	69f8      	ldr	r0, [r7, #28]
 800bca8:	f7ff ff49 	bl	800bb3e <get_ldnumber>
 800bcac:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da01      	bge.n	800bcb8 <find_volume+0x28>
 800bcb4:	230b      	movs	r3, #11
 800bcb6:	e331      	b.n	800c31c <find_volume+0x68c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bcb8:	4a99      	ldr	r2, [pc, #612]	@ (800bf20 <find_volume+0x290>)
 800bcba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcc0:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bcc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <find_volume+0x3c>
 800bcc8:	230c      	movs	r3, #12
 800bcca:	e327      	b.n	800c31c <find_volume+0x68c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bcd0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
 800bcd4:	f023 0301 	bic.w	r3, r3, #1
 800bcd8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bcda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d01a      	beq.n	800bd18 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800bce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bce4:	785b      	ldrb	r3, [r3, #1]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fc fe8c 	bl	8008a04 <disk_status>
 800bcec:	4603      	mov	r3, r0
 800bcee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bcf2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10c      	bne.n	800bd18 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <find_volume+0x84>
 800bd04:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bd08:	f003 0304 	and.w	r3, r3, #4
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800bd10:	230a      	movs	r3, #10
 800bd12:	e303      	b.n	800c31c <find_volume+0x68c>
			}
			return FR_OK;				/* The file system object is valid */
 800bd14:	2300      	movs	r3, #0
 800bd16:	e301      	b.n	800c31c <find_volume+0x68c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bd18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bd1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd24:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bd26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fc fe84 	bl	8008a38 <disk_initialize>
 800bd30:	4603      	mov	r3, r0
 800bd32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bd36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bd3a:	f003 0301 	and.w	r3, r3, #1
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bd42:	2303      	movs	r3, #3
 800bd44:	e2ea      	b.n	800c31c <find_volume+0x68c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bd46:	7dfb      	ldrb	r3, [r7, #23]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d007      	beq.n	800bd5c <find_volume+0xcc>
 800bd4c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800bd58:	230a      	movs	r3, #10
 800bd5a:	e2df      	b.n	800c31c <find_volume+0x68c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bd60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd62:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bd64:	f7ff ff30 	bl	800bbc8 <check_fs>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bd6e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d14d      	bne.n	800be12 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bd76:	2300      	movs	r3, #0
 800bd78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd7a:	e020      	b.n	800bdbe <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bd7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd7e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bd82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd84:	011b      	lsls	r3, r3, #4
 800bd86:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bd8a:	4413      	add	r3, r2
 800bd8c:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bd8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd90:	3304      	adds	r3, #4
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d006      	beq.n	800bda6 <find_volume+0x116>
 800bd98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fc fee8 	bl	8008b72 <ld_dword>
 800bda2:	4602      	mov	r2, r0
 800bda4:	e000      	b.n	800bda8 <find_volume+0x118>
 800bda6:	2200      	movs	r2, #0
 800bda8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	3360      	adds	r3, #96	@ 0x60
 800bdae:	f107 0110 	add.w	r1, r7, #16
 800bdb2:	440b      	add	r3, r1
 800bdb4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bdb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdba:	3301      	adds	r3, #1
 800bdbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bdbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdc0:	2b03      	cmp	r3, #3
 800bdc2:	d9db      	bls.n	800bd7c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800bdc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d002      	beq.n	800bdd4 <find_volume+0x144>
 800bdce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bdd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	3360      	adds	r3, #96	@ 0x60
 800bdda:	f107 0210 	add.w	r2, r7, #16
 800bdde:	4413      	add	r3, r2
 800bde0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bde4:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bde6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d005      	beq.n	800bdf8 <find_volume+0x168>
 800bdec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bdee:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bdf0:	f7ff feea 	bl	800bbc8 <check_fs>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	e000      	b.n	800bdfa <find_volume+0x16a>
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bdfe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be02:	2b01      	cmp	r3, #1
 800be04:	d905      	bls.n	800be12 <find_volume+0x182>
 800be06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be08:	3301      	adds	r3, #1
 800be0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be0e:	2b03      	cmp	r3, #3
 800be10:	d9e0      	bls.n	800bdd4 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800be12:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be16:	2b04      	cmp	r3, #4
 800be18:	d101      	bne.n	800be1e <find_volume+0x18e>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e27e      	b.n	800c31c <find_volume+0x68c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800be1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be22:	2b01      	cmp	r3, #1
 800be24:	d901      	bls.n	800be2a <find_volume+0x19a>
 800be26:	230d      	movs	r3, #13
 800be28:	e278      	b.n	800c31c <find_volume+0x68c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800be2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be2e:	2b01      	cmp	r3, #1
 800be30:	f040 80fa 	bne.w	800c028 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800be34:	230b      	movs	r3, #11
 800be36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be38:	e002      	b.n	800be40 <find_volume+0x1b0>
 800be3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be3c:	3301      	adds	r3, #1
 800be3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be42:	2b3f      	cmp	r3, #63	@ 0x3f
 800be44:	d806      	bhi.n	800be54 <find_volume+0x1c4>
 800be46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be4a:	4413      	add	r3, r2
 800be4c:	3338      	adds	r3, #56	@ 0x38
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d0f2      	beq.n	800be3a <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800be54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be56:	2b3f      	cmp	r3, #63	@ 0x3f
 800be58:	d801      	bhi.n	800be5e <find_volume+0x1ce>
 800be5a:	230d      	movs	r3, #13
 800be5c:	e25e      	b.n	800c31c <find_volume+0x68c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800be5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be60:	3338      	adds	r3, #56	@ 0x38
 800be62:	3368      	adds	r3, #104	@ 0x68
 800be64:	4618      	mov	r0, r3
 800be66:	f7fc fe6b 	bl	8008b40 <ld_word>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be70:	d001      	beq.n	800be76 <find_volume+0x1e6>
 800be72:	230d      	movs	r3, #13
 800be74:	e252      	b.n	800c31c <find_volume+0x68c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800be76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be78:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d001      	beq.n	800be84 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800be80:	230d      	movs	r3, #13
 800be82:	e24b      	b.n	800c31c <find_volume+0x68c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800be84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be86:	3338      	adds	r3, #56	@ 0x38
 800be88:	3348      	adds	r3, #72	@ 0x48
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fc fe94 	bl	8008bb8 <ld_qword>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800be96:	2000      	movs	r0, #0
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	68b9      	ldr	r1, [r7, #8]
 800be9e:	1851      	adds	r1, r2, r1
 800bea0:	6039      	str	r1, [r7, #0]
 800bea2:	68f9      	ldr	r1, [r7, #12]
 800bea4:	eb43 0101 	adc.w	r1, r3, r1
 800bea8:	6079      	str	r1, [r7, #4]
 800beaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800beb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d301      	bcc.n	800bebe <find_volume+0x22e>
 800beba:	230d      	movs	r3, #13
 800bebc:	e22e      	b.n	800c31c <find_volume+0x68c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800bebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bec0:	3338      	adds	r3, #56	@ 0x38
 800bec2:	3354      	adds	r3, #84	@ 0x54
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fc fe54 	bl	8008b72 <ld_dword>
 800beca:	4602      	mov	r2, r0
 800becc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bece:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800bed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bed2:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800bed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bed8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800beda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bedc:	789b      	ldrb	r3, [r3, #2]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d001      	beq.n	800bee6 <find_volume+0x256>
 800bee2:	230d      	movs	r3, #13
 800bee4:	e21a      	b.n	800c31c <find_volume+0x68c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800bee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bee8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800beec:	461a      	mov	r2, r3
 800beee:	2301      	movs	r3, #1
 800bef0:	4093      	lsls	r3, r2
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800bef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800befa:	895b      	ldrh	r3, [r3, #10]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <find_volume+0x274>
 800bf00:	230d      	movs	r3, #13
 800bf02:	e20b      	b.n	800c31c <find_volume+0x68c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800bf04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf06:	3338      	adds	r3, #56	@ 0x38
 800bf08:	335c      	adds	r3, #92	@ 0x5c
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fc fe31 	bl	8008b72 <ld_dword>
 800bf10:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800bf12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf14:	4a03      	ldr	r2, [pc, #12]	@ (800bf24 <find_volume+0x294>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d906      	bls.n	800bf28 <find_volume+0x298>
 800bf1a:	230d      	movs	r3, #13
 800bf1c:	e1fe      	b.n	800c31c <find_volume+0x68c>
 800bf1e:	bf00      	nop
 800bf20:	20001214 	.word	0x20001214
 800bf24:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800bf28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf2a:	1c9a      	adds	r2, r3, #2
 800bf2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf2e:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800bf30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bf34:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800bf36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf38:	3338      	adds	r3, #56	@ 0x38
 800bf3a:	3358      	adds	r3, #88	@ 0x58
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fc fe18 	bl	8008b72 <ld_dword>
 800bf42:	4602      	mov	r2, r0
 800bf44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf46:	441a      	add	r2, r3
 800bf48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4a:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800bf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4e:	3338      	adds	r3, #56	@ 0x38
 800bf50:	3350      	adds	r3, #80	@ 0x50
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fc fe0d 	bl	8008b72 <ld_dword>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf5c:	441a      	add	r2, r3
 800bf5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf60:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800bf62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf66:	2200      	movs	r2, #0
 800bf68:	469a      	mov	sl, r3
 800bf6a:	4693      	mov	fp, r2
 800bf6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf6e:	895b      	ldrh	r3, [r3, #10]
 800bf70:	461a      	mov	r2, r3
 800bf72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf74:	fb02 f303 	mul.w	r3, r2, r3
 800bf78:	2200      	movs	r2, #0
 800bf7a:	4698      	mov	r8, r3
 800bf7c:	4691      	mov	r9, r2
 800bf7e:	eb1a 0408 	adds.w	r4, sl, r8
 800bf82:	eb4b 0509 	adc.w	r5, fp, r9
 800bf86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bf8a:	42a2      	cmp	r2, r4
 800bf8c:	41ab      	sbcs	r3, r5
 800bf8e:	d201      	bcs.n	800bf94 <find_volume+0x304>
 800bf90:	230d      	movs	r3, #13
 800bf92:	e1c3      	b.n	800c31c <find_volume+0x68c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800bf94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf96:	3338      	adds	r3, #56	@ 0x38
 800bf98:	3360      	adds	r3, #96	@ 0x60
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fc fde9 	bl	8008b72 <ld_dword>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfa4:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800bfa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bfae:	f7fd fa77 	bl	80094a0 <clust2sect>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bfb8:	f7fd f9d6 	bl	8009368 <move_window>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <find_volume+0x336>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e1aa      	b.n	800c31c <find_volume+0x68c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfca:	e015      	b.n	800bff8 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800bfcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfd0:	4413      	add	r3, r2
 800bfd2:	3338      	adds	r3, #56	@ 0x38
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2b81      	cmp	r3, #129	@ 0x81
 800bfd8:	d10b      	bne.n	800bff2 <find_volume+0x362>
 800bfda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfdc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bfe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfe2:	3314      	adds	r3, #20
 800bfe4:	4413      	add	r3, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fc fdc3 	bl	8008b72 <ld_dword>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d007      	beq.n	800c002 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bff4:	3320      	adds	r3, #32
 800bff6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bff8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bffe:	d3e5      	bcc.n	800bfcc <find_volume+0x33c>
 800c000:	e000      	b.n	800c004 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c002:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c004:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c00a:	d101      	bne.n	800c010 <find_volume+0x380>
 800c00c:	230d      	movs	r3, #13
 800c00e:	e185      	b.n	800c31c <find_volume+0x68c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c012:	f04f 32ff 	mov.w	r2, #4294967295
 800c016:	619a      	str	r2, [r3, #24]
 800c018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c01a:	699a      	ldr	r2, [r3, #24]
 800c01c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c01e:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c020:	2304      	movs	r3, #4
 800c022:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800c026:	e167      	b.n	800c2f8 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c02a:	3338      	adds	r3, #56	@ 0x38
 800c02c:	330b      	adds	r3, #11
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fc fd86 	bl	8008b40 <ld_word>
 800c034:	4603      	mov	r3, r0
 800c036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c03a:	d001      	beq.n	800c040 <find_volume+0x3b0>
 800c03c:	230d      	movs	r3, #13
 800c03e:	e16d      	b.n	800c31c <find_volume+0x68c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c042:	3338      	adds	r3, #56	@ 0x38
 800c044:	3316      	adds	r3, #22
 800c046:	4618      	mov	r0, r3
 800c048:	f7fc fd7a 	bl	8008b40 <ld_word>
 800c04c:	4603      	mov	r3, r0
 800c04e:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <find_volume+0x3d4>
 800c056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c058:	3338      	adds	r3, #56	@ 0x38
 800c05a:	3324      	adds	r3, #36	@ 0x24
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fc fd88 	bl	8008b72 <ld_dword>
 800c062:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800c064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c066:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c068:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c06c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c072:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c076:	789b      	ldrb	r3, [r3, #2]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d005      	beq.n	800c088 <find_volume+0x3f8>
 800c07c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c07e:	789b      	ldrb	r3, [r3, #2]
 800c080:	2b02      	cmp	r3, #2
 800c082:	d001      	beq.n	800c088 <find_volume+0x3f8>
 800c084:	230d      	movs	r3, #13
 800c086:	e149      	b.n	800c31c <find_volume+0x68c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c08a:	789b      	ldrb	r3, [r3, #2]
 800c08c:	461a      	mov	r2, r3
 800c08e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c090:	fb02 f303 	mul.w	r3, r2, r3
 800c094:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c098:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c09c:	461a      	mov	r2, r3
 800c09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0a4:	895b      	ldrh	r3, [r3, #10]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d008      	beq.n	800c0bc <find_volume+0x42c>
 800c0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ac:	895b      	ldrh	r3, [r3, #10]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b2:	895b      	ldrh	r3, [r3, #10]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	4013      	ands	r3, r2
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <find_volume+0x430>
 800c0bc:	230d      	movs	r3, #13
 800c0be:	e12d      	b.n	800c31c <find_volume+0x68c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0c2:	3338      	adds	r3, #56	@ 0x38
 800c0c4:	3311      	adds	r3, #17
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fc fd3a 	bl	8008b40 <ld_word>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c0d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0d6:	891b      	ldrh	r3, [r3, #8]
 800c0d8:	f003 030f 	and.w	r3, r3, #15
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d001      	beq.n	800c0e6 <find_volume+0x456>
 800c0e2:	230d      	movs	r3, #13
 800c0e4:	e11a      	b.n	800c31c <find_volume+0x68c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c0e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0e8:	3338      	adds	r3, #56	@ 0x38
 800c0ea:	3313      	adds	r3, #19
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fc fd27 	bl	8008b40 <ld_word>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c0f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d106      	bne.n	800c10a <find_volume+0x47a>
 800c0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0fe:	3338      	adds	r3, #56	@ 0x38
 800c100:	3320      	adds	r3, #32
 800c102:	4618      	mov	r0, r3
 800c104:	f7fc fd35 	bl	8008b72 <ld_dword>
 800c108:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c10a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c10c:	3338      	adds	r3, #56	@ 0x38
 800c10e:	330e      	adds	r3, #14
 800c110:	4618      	mov	r0, r3
 800c112:	f7fc fd15 	bl	8008b40 <ld_word>
 800c116:	4603      	mov	r3, r0
 800c118:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c11c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <find_volume+0x498>
 800c124:	230d      	movs	r3, #13
 800c126:	e0f9      	b.n	800c31c <find_volume+0x68c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c128:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c12c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c12e:	4413      	add	r3, r2
 800c130:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c132:	8912      	ldrh	r2, [r2, #8]
 800c134:	0912      	lsrs	r2, r2, #4
 800c136:	b292      	uxth	r2, r2
 800c138:	4413      	add	r3, r2
 800c13a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c13c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c13e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c140:	429a      	cmp	r2, r3
 800c142:	d201      	bcs.n	800c148 <find_volume+0x4b8>
 800c144:	230d      	movs	r3, #13
 800c146:	e0e9      	b.n	800c31c <find_volume+0x68c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c14a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c150:	8952      	ldrh	r2, [r2, #10]
 800c152:	fbb3 f3f2 	udiv	r3, r3, r2
 800c156:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <find_volume+0x4d2>
 800c15e:	230d      	movs	r3, #13
 800c160:	e0dc      	b.n	800c31c <find_volume+0x68c>
		fmt = FS_FAT32;
 800c162:	2303      	movs	r3, #3
 800c164:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c16a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c16e:	4293      	cmp	r3, r2
 800c170:	d802      	bhi.n	800c178 <find_volume+0x4e8>
 800c172:	2302      	movs	r3, #2
 800c174:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c17a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c17e:	4293      	cmp	r3, r2
 800c180:	d802      	bhi.n	800c188 <find_volume+0x4f8>
 800c182:	2301      	movs	r3, #1
 800c184:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c18a:	1c9a      	adds	r2, r3, #2
 800c18c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c18e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c192:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c194:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c196:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c19a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c19c:	441a      	add	r2, r3
 800c19e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1a0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c1a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c1a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1a6:	441a      	add	r2, r3
 800c1a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1aa:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c1ac:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d11e      	bne.n	800c1f2 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1b6:	3338      	adds	r3, #56	@ 0x38
 800c1b8:	332a      	adds	r3, #42	@ 0x2a
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fc fcc0 	bl	8008b40 <ld_word>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <find_volume+0x53a>
 800c1c6:	230d      	movs	r3, #13
 800c1c8:	e0a8      	b.n	800c31c <find_volume+0x68c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c1ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1cc:	891b      	ldrh	r3, [r3, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <find_volume+0x546>
 800c1d2:	230d      	movs	r3, #13
 800c1d4:	e0a2      	b.n	800c31c <find_volume+0x68c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c1d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1d8:	3338      	adds	r3, #56	@ 0x38
 800c1da:	332c      	adds	r3, #44	@ 0x2c
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fc fcc8 	bl	8008b72 <ld_dword>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c1e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1ea:	69db      	ldr	r3, [r3, #28]
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1f0:	e01f      	b.n	800c232 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c1f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f4:	891b      	ldrh	r3, [r3, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <find_volume+0x56e>
 800c1fa:	230d      	movs	r3, #13
 800c1fc:	e08e      	b.n	800c31c <find_volume+0x68c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c1fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c200:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c202:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c204:	441a      	add	r2, r3
 800c206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c208:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c20a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d103      	bne.n	800c21a <find_volume+0x58a>
 800c212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c214:	69db      	ldr	r3, [r3, #28]
 800c216:	005b      	lsls	r3, r3, #1
 800c218:	e00a      	b.n	800c230 <find_volume+0x5a0>
 800c21a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c21c:	69da      	ldr	r2, [r3, #28]
 800c21e:	4613      	mov	r3, r2
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	4413      	add	r3, r2
 800c224:	085a      	lsrs	r2, r3, #1
 800c226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c228:	69db      	ldr	r3, [r3, #28]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c230:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c234:	6a1a      	ldr	r2, [r3, #32]
 800c236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c238:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c23c:	0a5b      	lsrs	r3, r3, #9
 800c23e:	429a      	cmp	r2, r3
 800c240:	d201      	bcs.n	800c246 <find_volume+0x5b6>
 800c242:	230d      	movs	r3, #13
 800c244:	e06a      	b.n	800c31c <find_volume+0x68c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c248:	f04f 32ff 	mov.w	r2, #4294967295
 800c24c:	619a      	str	r2, [r3, #24]
 800c24e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c250:	699a      	ldr	r2, [r3, #24]
 800c252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c254:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c258:	2280      	movs	r2, #128	@ 0x80
 800c25a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c25c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c260:	2b03      	cmp	r3, #3
 800c262:	d149      	bne.n	800c2f8 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c266:	3338      	adds	r3, #56	@ 0x38
 800c268:	3330      	adds	r3, #48	@ 0x30
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fc fc68 	bl	8008b40 <ld_word>
 800c270:	4603      	mov	r3, r0
 800c272:	2b01      	cmp	r3, #1
 800c274:	d140      	bne.n	800c2f8 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c278:	3301      	adds	r3, #1
 800c27a:	4619      	mov	r1, r3
 800c27c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c27e:	f7fd f873 	bl	8009368 <move_window>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d137      	bne.n	800c2f8 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800c288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c28a:	2200      	movs	r2, #0
 800c28c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c28e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c290:	3338      	adds	r3, #56	@ 0x38
 800c292:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c296:	4618      	mov	r0, r3
 800c298:	f7fc fc52 	bl	8008b40 <ld_word>
 800c29c:	4603      	mov	r3, r0
 800c29e:	461a      	mov	r2, r3
 800c2a0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d127      	bne.n	800c2f8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c2a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2aa:	3338      	adds	r3, #56	@ 0x38
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fc fc60 	bl	8008b72 <ld_dword>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c328 <find_volume+0x698>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d11e      	bne.n	800c2f8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c2ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2bc:	3338      	adds	r3, #56	@ 0x38
 800c2be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fc fc55 	bl	8008b72 <ld_dword>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	4a18      	ldr	r2, [pc, #96]	@ (800c32c <find_volume+0x69c>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d113      	bne.n	800c2f8 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c2d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2d2:	3338      	adds	r3, #56	@ 0x38
 800c2d4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fc fc4a 	bl	8008b72 <ld_dword>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2e2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c2e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2e6:	3338      	adds	r3, #56	@ 0x38
 800c2e8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fc fc40 	bl	8008b72 <ld_dword>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c2f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2fa:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800c2fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c300:	4b0b      	ldr	r3, [pc, #44]	@ (800c330 <find_volume+0x6a0>)
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	3301      	adds	r3, #1
 800c306:	b29a      	uxth	r2, r3
 800c308:	4b09      	ldr	r3, [pc, #36]	@ (800c330 <find_volume+0x6a0>)
 800c30a:	801a      	strh	r2, [r3, #0]
 800c30c:	4b08      	ldr	r3, [pc, #32]	@ (800c330 <find_volume+0x6a0>)
 800c30e:	881a      	ldrh	r2, [r3, #0]
 800c310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c312:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c314:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c316:	f7fc ffbf 	bl	8009298 <clear_lock>
#endif
	return FR_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3770      	adds	r7, #112	@ 0x70
 800c320:	46bd      	mov	sp, r7
 800c322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c326:	bf00      	nop
 800c328:	41615252 	.word	0x41615252
 800c32c:	61417272 	.word	0x61417272
 800c330:	20001218 	.word	0x20001218

0800c334 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c33e:	2309      	movs	r3, #9
 800c340:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d01c      	beq.n	800c382 <validate+0x4e>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d018      	beq.n	800c382 <validate+0x4e>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d013      	beq.n	800c382 <validate+0x4e>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	889a      	ldrh	r2, [r3, #4]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	88db      	ldrh	r3, [r3, #6]
 800c364:	429a      	cmp	r2, r3
 800c366:	d10c      	bne.n	800c382 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	785b      	ldrb	r3, [r3, #1]
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fc fb48 	bl	8008a04 <disk_status>
 800c374:	4603      	mov	r3, r0
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <validate+0x4e>
			res = FR_OK;
 800c37e:	2300      	movs	r3, #0
 800c380:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d102      	bne.n	800c38e <validate+0x5a>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	e000      	b.n	800c390 <validate+0x5c>
 800c38e:	2300      	movs	r3, #0
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	6013      	str	r3, [r2, #0]
	return res;
 800c394:	7bfb      	ldrb	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
	...

0800c3a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3b2:	f107 0310 	add.w	r3, r7, #16
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff fbc1 	bl	800bb3e <get_ldnumber>
 800c3bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	da01      	bge.n	800c3c8 <f_mount+0x28>
 800c3c4:	230b      	movs	r3, #11
 800c3c6:	e02b      	b.n	800c420 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c3c8:	4a17      	ldr	r2, [pc, #92]	@ (800c428 <f_mount+0x88>)
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c3d8:	69b8      	ldr	r0, [r7, #24]
 800c3da:	f7fc ff5d 	bl	8009298 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d002      	beq.n	800c3f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	490d      	ldr	r1, [pc, #52]	@ (800c428 <f_mount+0x88>)
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <f_mount+0x66>
 800c400:	79fb      	ldrb	r3, [r7, #7]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d001      	beq.n	800c40a <f_mount+0x6a>
 800c406:	2300      	movs	r3, #0
 800c408:	e00a      	b.n	800c420 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c40a:	f107 010c 	add.w	r1, r7, #12
 800c40e:	f107 0308 	add.w	r3, r7, #8
 800c412:	2200      	movs	r2, #0
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff fc3b 	bl	800bc90 <find_volume>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3720      	adds	r7, #32
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	20001214 	.word	0x20001214

0800c42c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c42c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c430:	b0a8      	sub	sp, #160	@ 0xa0
 800c432:	af00      	add	r7, sp, #0
 800c434:	61f8      	str	r0, [r7, #28]
 800c436:	61b9      	str	r1, [r7, #24]
 800c438:	4613      	mov	r3, r2
 800c43a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <f_open+0x1a>
 800c442:	2309      	movs	r3, #9
 800c444:	e2c7      	b.n	800c9d6 <f_open+0x5aa>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c44c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800c44e:	7dfa      	ldrb	r2, [r7, #23]
 800c450:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c454:	f107 0318 	add.w	r3, r7, #24
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff fc19 	bl	800bc90 <find_volume>
 800c45e:	4603      	mov	r3, r0
 800c460:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800c464:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f040 82ab 	bne.w	800c9c4 <f_open+0x598>
		dj.obj.fs = fs;
 800c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c470:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
 800c472:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800c476:	f002 fae5 	bl	800ea44 <ff_memalloc>
 800c47a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800c47e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <f_open+0x5e>
 800c486:	2311      	movs	r3, #17
 800c488:	e2a5      	b.n	800c9d6 <f_open+0x5aa>
 800c48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c490:	60da      	str	r2, [r3, #12]
 800c492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c494:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c498:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800c49c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c49e:	69ba      	ldr	r2, [r7, #24]
 800c4a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff faa0 	bl	800b9ec <follow_path>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c4b2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d118      	bne.n	800c4ec <f_open+0xc0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c4ba:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800c4be:	b25b      	sxtb	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	da03      	bge.n	800c4cc <f_open+0xa0>
				res = FR_INVALID_NAME;
 800c4c4:	2306      	movs	r3, #6
 800c4c6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c4ca:	e00f      	b.n	800c4ec <f_open+0xc0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4cc:	7dfb      	ldrb	r3, [r7, #23]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	bf8c      	ite	hi
 800c4d2:	2301      	movhi	r3, #1
 800c4d4:	2300      	movls	r3, #0
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	461a      	mov	r2, r3
 800c4da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fc fd91 	bl	8009008 <chk_lock>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	f003 031c 	and.w	r3, r3, #28
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 8115 	beq.w	800c722 <f_open+0x2f6>
			if (res != FR_OK) {					/* No file, create new */
 800c4f8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d017      	beq.n	800c530 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c500:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c504:	2b04      	cmp	r3, #4
 800c506:	d10e      	bne.n	800c526 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c508:	f7fc fdda 	bl	80090c0 <enq_lock>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d006      	beq.n	800c520 <f_open+0xf4>
 800c512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fdcc 	bl	800b0b4 <dir_register>
 800c51c:	4603      	mov	r3, r0
 800c51e:	e000      	b.n	800c522 <f_open+0xf6>
 800c520:	2312      	movs	r3, #18
 800c522:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	f043 0308 	orr.w	r3, r3, #8
 800c52c:	75fb      	strb	r3, [r7, #23]
 800c52e:	e011      	b.n	800c554 <f_open+0x128>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c530:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c534:	f003 0311 	and.w	r3, r3, #17
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d003      	beq.n	800c544 <f_open+0x118>
					res = FR_DENIED;
 800c53c:	2307      	movs	r3, #7
 800c53e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c542:	e007      	b.n	800c554 <f_open+0x128>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c544:	7dfb      	ldrb	r3, [r7, #23]
 800c546:	f003 0304 	and.w	r3, r3, #4
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d002      	beq.n	800c554 <f_open+0x128>
 800c54e:	2308      	movs	r3, #8
 800c550:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c554:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f040 80fe 	bne.w	800c75a <f_open+0x32e>
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	f003 0308 	and.w	r3, r3, #8
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 80f8 	beq.w	800c75a <f_open+0x32e>
				dw = GET_FATTIME();
 800c56a:	f7fc f973 	bl	8008854 <get_fattime>
 800c56e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	2b04      	cmp	r3, #4
 800c578:	f040 8084 	bne.w	800c684 <f_open+0x258>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c57c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	3334      	adds	r3, #52	@ 0x34
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fc faf2 	bl	8008b72 <ld_dword>
 800c58e:	4602      	mov	r2, r0
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c596:	691b      	ldr	r3, [r3, #16]
 800c598:	3338      	adds	r3, #56	@ 0x38
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fc fb0c 	bl	8008bb8 <ld_qword>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	69f9      	ldr	r1, [r7, #28]
 800c5a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	3321      	adds	r3, #33	@ 0x21
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	f003 0302 	and.w	r3, r3, #2
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	3308      	adds	r3, #8
 800c5c8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fc fbe9 	bl	8008da4 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	3314      	adds	r3, #20
 800c5d8:	2200      	movs	r2, #0
 800c5da:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	330c      	adds	r3, #12
 800c5e2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fc fbdc 	bl	8008da4 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	3315      	adds	r3, #21
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	2220      	movs	r2, #32
 800c5fe:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	3334      	adds	r3, #52	@ 0x34
 800c606:	2100      	movs	r1, #0
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fc fbcb 	bl	8008da4 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c616:	f04f 0200 	mov.w	r2, #0
 800c61a:	f04f 0300 	mov.w	r3, #0
 800c61e:	4608      	mov	r0, r1
 800c620:	f7fc fbec 	bl	8008dfc <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c62c:	f04f 0200 	mov.w	r2, #0
 800c630:	f04f 0300 	mov.w	r3, #0
 800c634:	4608      	mov	r0, r1
 800c636:	f7fc fbe1 	bl	8008dfc <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	3321      	adds	r3, #33	@ 0x21
 800c640:	2201      	movs	r2, #1
 800c642:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800c644:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fe fa7f 	bl	800ab4c <store_xdir>
 800c64e:	4603      	mov	r3, r0
 800c650:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c654:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d17e      	bne.n	800c75a <f_open+0x32e>
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d07a      	beq.n	800c75a <f_open+0x32e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c664:	69f8      	ldr	r0, [r7, #28]
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	2200      	movs	r2, #0
 800c66c:	4619      	mov	r1, r3
 800c66e:	f7fd fa85 	bl	8009b7c <remove_chain>
 800c672:	4603      	mov	r3, r0
 800c674:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	689a      	ldr	r2, [r3, #8]
 800c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67e:	3a01      	subs	r2, #1
 800c680:	615a      	str	r2, [r3, #20]
 800c682:	e06a      	b.n	800c75a <f_open+0x32e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c686:	330e      	adds	r3, #14
 800c688:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fc fb89 	bl	8008da4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c694:	3316      	adds	r3, #22
 800c696:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fc fb82 	bl	8008da4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c6a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6a2:	330b      	adds	r3, #11
 800c6a4:	2220      	movs	r2, #32
 800c6a6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fd fe14 	bl	800a2dc <ld_clust>
 800c6b4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c6bc:	2200      	movs	r2, #0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fd fe2b 	bl	800a31a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c6c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6c6:	331c      	adds	r3, #28
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fc fb6a 	bl	8008da4 <st_dword>
					fs->wflag = 1;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c6d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d03d      	beq.n	800c75a <f_open+0x32e>
						dw = fs->winsect;
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						res = remove_chain(&dj.obj, cl, 0);
 800c6e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fd fa43 	bl	8009b7c <remove_chain>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 800c6fc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c700:	2b00      	cmp	r3, #0
 800c702:	d12a      	bne.n	800c75a <f_open+0x32e>
							res = move_window(fs, dw);
 800c704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c706:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fc fe2c 	bl	8009368 <move_window>
 800c710:	4603      	mov	r3, r0
 800c712:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c718:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c71c:	3a01      	subs	r2, #1
 800c71e:	615a      	str	r2, [r3, #20]
 800c720:	e01b      	b.n	800c75a <f_open+0x32e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c722:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c726:	2b00      	cmp	r3, #0
 800c728:	d117      	bne.n	800c75a <f_open+0x32e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c72a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c72e:	f003 0310 	and.w	r3, r3, #16
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <f_open+0x312>
					res = FR_NO_FILE;
 800c736:	2304      	movs	r3, #4
 800c738:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c73c:	e00d      	b.n	800c75a <f_open+0x32e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	f003 0302 	and.w	r3, r3, #2
 800c744:	2b00      	cmp	r3, #0
 800c746:	d008      	beq.n	800c75a <f_open+0x32e>
 800c748:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c74c:	f003 0301 	and.w	r3, r3, #1
 800c750:	2b00      	cmp	r3, #0
 800c752:	d002      	beq.n	800c75a <f_open+0x32e>
						res = FR_DENIED;
 800c754:	2307      	movs	r3, #7
 800c756:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c75a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d126      	bne.n	800c7b0 <f_open+0x384>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c762:	7dfb      	ldrb	r3, [r7, #23]
 800c764:	f003 0308 	and.w	r3, r3, #8
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d003      	beq.n	800c774 <f_open+0x348>
				mode |= FA_MODIFIED;
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
 800c76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c772:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800c77c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c782:	7dfb      	ldrb	r3, [r7, #23]
 800c784:	2b01      	cmp	r3, #1
 800c786:	bf8c      	ite	hi
 800c788:	2301      	movhi	r3, #1
 800c78a:	2300      	movls	r3, #0
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	461a      	mov	r2, r3
 800c790:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c794:	4611      	mov	r1, r2
 800c796:	4618      	mov	r0, r3
 800c798:	f7fc fcb4 	bl	8009104 <inc_lock>
 800c79c:	4602      	mov	r2, r0
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d102      	bne.n	800c7b0 <f_open+0x384>
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c7b0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f040 8101 	bne.w	800c9bc <f_open+0x590>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	2b04      	cmp	r3, #4
 800c7c0:	d12d      	bne.n	800c81e <f_open+0x3f2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c7c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c7c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c7d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c7dc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	3334      	adds	r3, #52	@ 0x34
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fc f9c2 	bl	8008b72 <ld_dword>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	3338      	adds	r3, #56	@ 0x38
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fc f9dc 	bl	8008bb8 <ld_qword>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	69f9      	ldr	r1, [r7, #28]
 800c806:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	3321      	adds	r3, #33	@ 0x21
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	f003 0302 	and.w	r3, r3, #2
 800c816:	b2da      	uxtb	r2, r3
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	71da      	strb	r2, [r3, #7]
 800c81c:	e016      	b.n	800c84c <f_open+0x420>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c820:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c822:	4611      	mov	r1, r2
 800c824:	4618      	mov	r0, r3
 800c826:	f7fd fd59 	bl	800a2dc <ld_clust>
 800c82a:	4602      	mov	r2, r0
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c832:	331c      	adds	r3, #28
 800c834:	4618      	mov	r0, r3
 800c836:	f7fc f99c 	bl	8008b72 <ld_dword>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2200      	movs	r2, #0
 800c83e:	60bb      	str	r3, [r7, #8]
 800c840:	60fa      	str	r2, [r7, #12]
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c848:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	2200      	movs	r2, #0
 800c850:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85a:	88da      	ldrh	r2, [r3, #6]
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	7dfa      	ldrb	r2, [r7, #23]
 800c864:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	2200      	movs	r2, #0
 800c874:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c876:	69f9      	ldr	r1, [r7, #28]
 800c878:	f04f 0200 	mov.w	r2, #0
 800c87c:	f04f 0300 	mov.w	r3, #0
 800c880:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	3354      	adds	r3, #84	@ 0x54
 800c888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c88c:	2100      	movs	r1, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fc fb5d 	bl	8008f4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c894:	7dfb      	ldrb	r3, [r7, #23]
 800c896:	f003 0320 	and.w	r3, r3, #32
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 808e 	beq.w	800c9bc <f_open+0x590>
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	f000 8088 	beq.w	800c9bc <f_open+0x590>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8b2:	69f9      	ldr	r1, [r7, #28]
 800c8b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ba:	895b      	ldrh	r3, [r3, #10]
 800c8bc:	025b      	lsls	r3, r3, #9
 800c8be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8d0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800c8d4:	e027      	b.n	800c926 <f_open+0x4fa>
					clst = get_fat(&fp->obj, clst);
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7fc fdff 	bl	80094e0 <get_fat>
 800c8e2:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800c8e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d802      	bhi.n	800c8f4 <f_open+0x4c8>
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c8f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fc:	d102      	bne.n	800c904 <f_open+0x4d8>
 800c8fe:	2301      	movs	r3, #1
 800c900:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c904:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c908:	2200      	movs	r2, #0
 800c90a:	469a      	mov	sl, r3
 800c90c:	4693      	mov	fp, r2
 800c90e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c912:	ebb2 010a 	subs.w	r1, r2, sl
 800c916:	6039      	str	r1, [r7, #0]
 800c918:	eb63 030b 	sbc.w	r3, r3, fp
 800c91c:	607b      	str	r3, [r7, #4]
 800c91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c922:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800c926:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <f_open+0x518>
 800c92e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c932:	2200      	movs	r2, #0
 800c934:	4698      	mov	r8, r3
 800c936:	4691      	mov	r9, r2
 800c938:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c93c:	4590      	cmp	r8, r2
 800c93e:	eb79 0303 	sbcs.w	r3, r9, r3
 800c942:	d3c8      	bcc.n	800c8d6 <f_open+0x4aa>
				}
				fp->clust = clst;
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c94a:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c94c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c950:	2b00      	cmp	r3, #0
 800c952:	d133      	bne.n	800c9bc <f_open+0x590>
 800c954:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c958:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c95c:	2500      	movs	r5, #0
 800c95e:	ea54 0305 	orrs.w	r3, r4, r5
 800c962:	d02b      	beq.n	800c9bc <f_open+0x590>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fc fd98 	bl	80094a0 <clust2sect>
 800c970:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c972:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c974:	2b00      	cmp	r3, #0
 800c976:	d103      	bne.n	800c980 <f_open+0x554>
						res = FR_INT_ERR;
 800c978:	2302      	movs	r3, #2
 800c97a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c97e:	e01d      	b.n	800c9bc <f_open+0x590>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c980:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800c984:	f04f 0200 	mov.w	r2, #0
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	0a42      	lsrs	r2, r0, #9
 800c98e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c992:	0a4b      	lsrs	r3, r1, #9
 800c994:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c996:	441a      	add	r2, r3
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99e:	7858      	ldrb	r0, [r3, #1]
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	f7fc f86a 	bl	8008a84 <disk_read>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <f_open+0x590>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800c9bc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c9c0:	f002 f84c 	bl	800ea5c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c9c4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d002      	beq.n	800c9d2 <f_open+0x5a6>
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9d2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	37a0      	adds	r7, #160	@ 0xa0
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c9e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	b095      	sub	sp, #84	@ 0x54
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	61f8      	str	r0, [r7, #28]
 800c9ea:	61b9      	str	r1, [r7, #24]
 800c9ec:	617a      	str	r2, [r7, #20]
 800c9ee:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff fc96 	bl	800c334 <validate>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ca0e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d108      	bne.n	800ca28 <f_read+0x48>
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ca1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ca20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <f_read+0x4e>
 800ca28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca2c:	e14b      	b.n	800ccc6 <f_read+0x2e6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca34:	f003 0301 	and.w	r3, r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <f_read+0x60>
 800ca3c:	2307      	movs	r3, #7
 800ca3e:	e142      	b.n	800ccc6 <f_read+0x2e6>
	remain = fp->obj.objsize - fp->fptr;
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ca4c:	1a86      	subs	r6, r0, r2
 800ca4e:	603e      	str	r6, [r7, #0]
 800ca50:	eb61 0303 	sbc.w	r3, r1, r3
 800ca54:	607b      	str	r3, [r7, #4]
 800ca56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2200      	movs	r2, #0
 800ca62:	469a      	mov	sl, r3
 800ca64:	4693      	mov	fp, r2
 800ca66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ca6a:	4552      	cmp	r2, sl
 800ca6c:	eb73 030b 	sbcs.w	r3, r3, fp
 800ca70:	f080 8124 	bcs.w	800ccbc <f_read+0x2dc>
 800ca74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca76:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800ca78:	e120      	b.n	800ccbc <f_read+0x2dc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ca80:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ca84:	2500      	movs	r5, #0
 800ca86:	ea54 0305 	orrs.w	r3, r4, r5
 800ca8a:	f040 80d9 	bne.w	800cc40 <f_read+0x260>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ca94:	f04f 0200 	mov.w	r2, #0
 800ca98:	f04f 0300 	mov.w	r3, #0
 800ca9c:	0a42      	lsrs	r2, r0, #9
 800ca9e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800caa2:	0a4b      	lsrs	r3, r1, #9
 800caa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa6:	895b      	ldrh	r3, [r3, #10]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	4013      	ands	r3, r2
 800caac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800caae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d132      	bne.n	800cb1a <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800caba:	4313      	orrs	r3, r2
 800cabc:	d103      	bne.n	800cac6 <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cac4:	e013      	b.n	800caee <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d007      	beq.n	800cade <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cad4:	69f8      	ldr	r0, [r7, #28]
 800cad6:	f7fd fa06 	bl	8009ee6 <clmt_clust>
 800cada:	64b8      	str	r0, [r7, #72]	@ 0x48
 800cadc:	e007      	b.n	800caee <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cade:	69fa      	ldr	r2, [r7, #28]
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cae4:	4619      	mov	r1, r3
 800cae6:	4610      	mov	r0, r2
 800cae8:	f7fc fcfa 	bl	80094e0 <get_fat>
 800caec:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800caee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d805      	bhi.n	800cb00 <f_read+0x120>
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	2202      	movs	r2, #2
 800caf8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cafc:	2302      	movs	r3, #2
 800cafe:	e0e2      	b.n	800ccc6 <f_read+0x2e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb06:	d105      	bne.n	800cb14 <f_read+0x134>
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cb10:	2301      	movs	r3, #1
 800cb12:	e0d8      	b.n	800ccc6 <f_read+0x2e6>
				fp->clust = clst;				/* Update current cluster */
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb18:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cb1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb20:	4619      	mov	r1, r3
 800cb22:	4610      	mov	r0, r2
 800cb24:	f7fc fcbc 	bl	80094a0 <clust2sect>
 800cb28:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d105      	bne.n	800cb3c <f_read+0x15c>
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cb38:	2302      	movs	r3, #2
 800cb3a:	e0c4      	b.n	800ccc6 <f_read+0x2e6>
			sect += csect;
 800cb3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb40:	4413      	add	r3, r2
 800cb42:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	0a5b      	lsrs	r3, r3, #9
 800cb48:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cb4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d03b      	beq.n	800cbc8 <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb54:	4413      	add	r3, r2
 800cb56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb58:	8952      	ldrh	r2, [r2, #10]
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d905      	bls.n	800cb6a <f_read+0x18a>
					cc = fs->csize - csect;
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb60:	895b      	ldrh	r3, [r3, #10]
 800cb62:	461a      	mov	r2, r3
 800cb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6c:	7858      	ldrb	r0, [r3, #1]
 800cb6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb74:	f7fb ff86 	bl	8008a84 <disk_read>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d005      	beq.n	800cb8a <f_read+0x1aa>
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cb86:	2301      	movs	r3, #1
 800cb88:	e09d      	b.n	800ccc6 <f_read+0x2e6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb90:	b25b      	sxtb	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	da14      	bge.n	800cbc0 <f_read+0x1e0>
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d90d      	bls.n	800cbc0 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	025b      	lsls	r3, r3, #9
 800cbae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cbb0:	18d0      	adds	r0, r2, r3
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	3354      	adds	r3, #84	@ 0x54
 800cbb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbba:	4619      	mov	r1, r3
 800cbbc:	f7fc f9a6 	bl	8008f0c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cbc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbc2:	025b      	lsls	r3, r3, #9
 800cbc4:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800cbc6:	e059      	b.n	800cc7c <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d033      	beq.n	800cc3a <f_read+0x25a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cbd8:	b25b      	sxtb	r3, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	da1b      	bge.n	800cc16 <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe0:	7858      	ldrb	r0, [r3, #1]
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbec:	2301      	movs	r3, #1
 800cbee:	f7fb ff69 	bl	8008ac4 <disk_write>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d005      	beq.n	800cc04 <f_read+0x224>
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc00:	2301      	movs	r3, #1
 800cc02:	e060      	b.n	800ccc6 <f_read+0x2e6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc18:	7858      	ldrb	r0, [r3, #1]
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cc20:	2301      	movs	r3, #1
 800cc22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc24:	f7fb ff2e 	bl	8008a84 <disk_read>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d005      	beq.n	800cc3a <f_read+0x25a>
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	2201      	movs	r2, #1
 800cc32:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc36:	2301      	movs	r3, #1
 800cc38:	e045      	b.n	800ccc6 <f_read+0x2e6>
			}
#endif
			fp->sect = sect;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc3e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc46:	4613      	mov	r3, r2
 800cc48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc4c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cc50:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cc52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d901      	bls.n	800cc5e <f_read+0x27e>
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc70:	440b      	add	r3, r1
 800cc72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc74:	4619      	mov	r1, r3
 800cc76:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cc78:	f7fc f948 	bl	8008f0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cc7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc80:	4413      	add	r3, r2
 800cc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	4688      	mov	r8, r1
 800cc90:	4681      	mov	r9, r0
 800cc92:	eb12 0108 	adds.w	r1, r2, r8
 800cc96:	60b9      	str	r1, [r7, #8]
 800cc98:	eb43 0309 	adc.w	r3, r3, r9
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cca4:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccae:	441a      	add	r2, r3
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	601a      	str	r2, [r3, #0]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f47f aedb 	bne.w	800ca7a <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3754      	adds	r7, #84	@ 0x54
 800ccca:	46bd      	mov	sp, r7
 800cccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ccd0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	b08d      	sub	sp, #52	@ 0x34
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	60b9      	str	r1, [r7, #8]
 800ccdc:	607a      	str	r2, [r7, #4]
 800ccde:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2200      	movs	r2, #0
 800cce8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f107 0210 	add.w	r2, r7, #16
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff fb1e 	bl	800c334 <validate>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ccfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d108      	bne.n	800cd18 <f_write+0x48>
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cd0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cd10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <f_write+0x4e>
 800cd18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd1c:	e187      	b.n	800d02e <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd24:	f003 0302 	and.w	r3, r3, #2
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <f_write+0x60>
 800cd2c:	2307      	movs	r3, #7
 800cd2e:	e17e      	b.n	800d02e <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b04      	cmp	r3, #4
 800cd36:	f000 816a 	beq.w	800d00e <f_write+0x33e>
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	18d1      	adds	r1, r2, r3
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	4299      	cmp	r1, r3
 800cd4e:	f080 815e 	bcs.w	800d00e <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd58:	4613      	mov	r3, r2
 800cd5a:	43db      	mvns	r3, r3
 800cd5c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cd5e:	e156      	b.n	800d00e <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd66:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800cd6a:	2500      	movs	r5, #0
 800cd6c:	ea54 0305 	orrs.w	r3, r4, r5
 800cd70:	f040 80fb 	bne.w	800cf6a <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cd7a:	f04f 0200 	mov.w	r2, #0
 800cd7e:	f04f 0300 	mov.w	r3, #0
 800cd82:	0a42      	lsrs	r2, r0, #9
 800cd84:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800cd88:	0a4b      	lsrs	r3, r1, #9
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	895b      	ldrh	r3, [r3, #10]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	4013      	ands	r3, r2
 800cd92:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d146      	bne.n	800ce28 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cda0:	4313      	orrs	r3, r2
 800cda2:	d10c      	bne.n	800cdbe <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d11a      	bne.n	800cde6 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fc ff95 	bl	8009ce4 <create_chain>
 800cdba:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cdbc:	e013      	b.n	800cde6 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d007      	beq.n	800cdd6 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f7fd f88a 	bl	8009ee6 <clmt_clust>
 800cdd2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cdd4:	e007      	b.n	800cde6 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cddc:	4619      	mov	r1, r3
 800cdde:	4610      	mov	r0, r2
 800cde0:	f7fc ff80 	bl	8009ce4 <create_chain>
 800cde4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 8115 	beq.w	800d018 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d105      	bne.n	800ce00 <f_write+0x130>
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2202      	movs	r2, #2
 800cdf8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	e116      	b.n	800d02e <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce06:	d105      	bne.n	800ce14 <f_write+0x144>
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce10:	2301      	movs	r3, #1
 800ce12:	e10c      	b.n	800d02e <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce18:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d102      	bne.n	800ce28 <f_write+0x158>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce2e:	b25b      	sxtb	r3, r3
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	da1b      	bge.n	800ce6c <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	7858      	ldrb	r0, [r3, #1]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce42:	2301      	movs	r3, #1
 800ce44:	f7fb fe3e 	bl	8008ac4 <disk_write>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d005      	beq.n	800ce5a <f_write+0x18a>
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce56:	2301      	movs	r3, #1
 800ce58:	e0e9      	b.n	800d02e <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ce6c:	693a      	ldr	r2, [r7, #16]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce72:	4619      	mov	r1, r3
 800ce74:	4610      	mov	r0, r2
 800ce76:	f7fc fb13 	bl	80094a0 <clust2sect>
 800ce7a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d105      	bne.n	800ce8e <f_write+0x1be>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2202      	movs	r2, #2
 800ce86:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	e0cf      	b.n	800d02e <f_write+0x35e>
			sect += csect;
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	4413      	add	r3, r2
 800ce94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	0a5b      	lsrs	r3, r3, #9
 800ce9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d03f      	beq.n	800cf22 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cea2:	69ba      	ldr	r2, [r7, #24]
 800cea4:	6a3b      	ldr	r3, [r7, #32]
 800cea6:	4413      	add	r3, r2
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	8952      	ldrh	r2, [r2, #10]
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d905      	bls.n	800cebc <f_write+0x1ec>
					cc = fs->csize - csect;
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	895b      	ldrh	r3, [r3, #10]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	7858      	ldrb	r0, [r3, #1]
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	697a      	ldr	r2, [r7, #20]
 800cec4:	69f9      	ldr	r1, [r7, #28]
 800cec6:	f7fb fdfd 	bl	8008ac4 <disk_write>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d005      	beq.n	800cedc <f_write+0x20c>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2201      	movs	r2, #1
 800ced4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ced8:	2301      	movs	r3, #1
 800ceda:	e0a8      	b.n	800d02e <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	6a3a      	ldr	r2, [r7, #32]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d917      	bls.n	800cf1a <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	025b      	lsls	r3, r3, #9
 800cefa:	69fa      	ldr	r2, [r7, #28]
 800cefc:	4413      	add	r3, r2
 800cefe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf02:	4619      	mov	r1, r3
 800cf04:	f7fc f802 	bl	8008f0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	025b      	lsls	r3, r3, #9
 800cf1e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cf20:	e04a      	b.n	800cfb8 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d01b      	beq.n	800cf64 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf38:	4290      	cmp	r0, r2
 800cf3a:	eb71 0303 	sbcs.w	r3, r1, r3
 800cf3e:	d211      	bcs.n	800cf64 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	7858      	ldrb	r0, [r3, #1]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	f7fb fd99 	bl	8008a84 <disk_read>
 800cf52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d005      	beq.n	800cf64 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cf60:	2301      	movs	r3, #1
 800cf62:	e064      	b.n	800d02e <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	697a      	ldr	r2, [r7, #20]
 800cf68:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cf70:	4613      	mov	r3, r2
 800cf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf76:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cf7a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cf7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d901      	bls.n	800cf88 <f_write+0x2b8>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cf94:	4613      	mov	r3, r2
 800cf96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9a:	440b      	add	r3, r1
 800cf9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf9e:	69f9      	ldr	r1, [r7, #28]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fb ffb3 	bl	8008f0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cfb8:	69fa      	ldr	r2, [r7, #28]
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	4413      	add	r3, r2
 800cfbe:	61fb      	str	r3, [r7, #28]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cfc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cfc8:	2000      	movs	r0, #0
 800cfca:	4688      	mov	r8, r1
 800cfcc:	4681      	mov	r9, r0
 800cfce:	eb12 0a08 	adds.w	sl, r2, r8
 800cfd2:	eb43 0b09 	adc.w	fp, r3, r9
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cfe2:	68f9      	ldr	r1, [r7, #12]
 800cfe4:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800cfe8:	4282      	cmp	r2, r0
 800cfea:	eb73 0601 	sbcs.w	r6, r3, r1
 800cfee:	d201      	bcs.n	800cff4 <f_write+0x324>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	68f9      	ldr	r1, [r7, #12]
 800cff6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d000:	441a      	add	r2, r3
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	f47f aea5 	bne.w	800cd60 <f_write+0x90>
 800d016:	e000      	b.n	800d01a <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d018:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d024:	b2da      	uxtb	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3734      	adds	r7, #52	@ 0x34
 800d032:	46bd      	mov	sp, r7
 800d034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d038 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b09c      	sub	sp, #112	@ 0x70
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800d046:	4611      	mov	r1, r2
 800d048:	4618      	mov	r0, r3
 800d04a:	f7ff f973 	bl	800c334 <validate>
 800d04e:	4603      	mov	r3, r0
 800d050:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800d054:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f040 8119 	bne.w	800d290 <f_sync+0x258>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 8111 	beq.w	800d290 <f_sync+0x258>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d074:	b25b      	sxtb	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	da17      	bge.n	800d0aa <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d07a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d07c:	7858      	ldrb	r0, [r3, #1]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d088:	2301      	movs	r3, #1
 800d08a:	f7fb fd1b 	bl	8008ac4 <disk_write>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <f_sync+0x60>
 800d094:	2301      	movs	r3, #1
 800d096:	e0fd      	b.n	800d294 <f_sync+0x25c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d09e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d0aa:	f7fb fbd3 	bl	8008854 <get_fattime>
 800d0ae:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d0b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	f040 80a0 	bne.w	800d1fa <f_sync+0x1c2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fc fcfd 	bl	8009abc <fill_first_frag>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800d0c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d10a      	bne.n	800d0e6 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0da:	4619      	mov	r1, r3
 800d0dc:	f7fc fd1d 	bl	8009b1a <fill_last_frag>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800d0e6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f040 80d0 	bne.w	800d290 <f_sync+0x258>
					INIT_NAMBUF(fs);
 800d0f0:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d0f4:	f001 fca6 	bl	800ea44 <ff_memalloc>
 800d0f8:	6638      	str	r0, [r7, #96]	@ 0x60
 800d0fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <f_sync+0xcc>
 800d100:	2311      	movs	r3, #17
 800d102:	e0c7      	b.n	800d294 <f_sync+0x25c>
 800d104:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d106:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d108:	60da      	str	r2, [r3, #12]
 800d10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d10c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d10e:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d112:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	f107 0308 	add.w	r3, r7, #8
 800d11a:	4611      	mov	r1, r2
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fd fcdf 	bl	800aae0 <load_obj_dir>
 800d122:	4603      	mov	r3, r0
 800d124:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800d128:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d160      	bne.n	800d1f2 <f_sync+0x1ba>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	3304      	adds	r3, #4
 800d136:	781a      	ldrb	r2, [r3, #0]
 800d138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	3304      	adds	r3, #4
 800d13e:	f042 0220 	orr.w	r2, r2, #32
 800d142:	b2d2      	uxtb	r2, r2
 800d144:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	79da      	ldrb	r2, [r3, #7]
 800d14a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	3321      	adds	r3, #33	@ 0x21
 800d150:	f042 0201 	orr.w	r2, r2, #1
 800d154:	b2d2      	uxtb	r2, r2
 800d156:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d158:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	4619      	mov	r1, r3
 800d166:	4610      	mov	r0, r2
 800d168:	f7fb fe1c 	bl	8008da4 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d16c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d17a:	4608      	mov	r0, r1
 800d17c:	f7fb fe3e 	bl	8008dfc <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d18e:	4608      	mov	r0, r1
 800d190:	f7fb fe34 	bl	8008dfc <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	330c      	adds	r3, #12
 800d19a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fb fe01 	bl	8008da4 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d1a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	3315      	adds	r3, #21
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d1ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	3310      	adds	r3, #16
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fb fdf5 	bl	8008da4 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d1ba:	f107 0308 	add.w	r3, r7, #8
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fd fcc4 	bl	800ab4c <store_xdir>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800d1ca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10f      	bne.n	800d1f2 <f_sync+0x1ba>
							res = sync_fs(fs);
 800d1d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fc f8f5 	bl	80093c4 <sync_fs>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d1e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800d1f2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d1f4:	f001 fc32 	bl	800ea5c <ff_memfree>
 800d1f8:	e04a      	b.n	800d290 <f_sync+0x258>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d1fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d200:	4619      	mov	r1, r3
 800d202:	4610      	mov	r0, r2
 800d204:	f7fc f8b0 	bl	8009368 <move_window>
 800d208:	4603      	mov	r3, r0
 800d20a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800d20e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d212:	2b00      	cmp	r3, #0
 800d214:	d13c      	bne.n	800d290 <f_sync+0x258>
					dir = fp->dir_ptr;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d21a:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d21c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d21e:	330b      	adds	r3, #11
 800d220:	781a      	ldrb	r2, [r3, #0]
 800d222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d224:	330b      	adds	r3, #11
 800d226:	f042 0220 	orr.w	r2, r2, #32
 800d22a:	b2d2      	uxtb	r2, r2
 800d22c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6818      	ldr	r0, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	461a      	mov	r2, r3
 800d238:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d23a:	f7fd f86e 	bl	800a31a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d23e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d240:	f103 001c 	add.w	r0, r3, #28
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d24a:	4613      	mov	r3, r2
 800d24c:	4619      	mov	r1, r3
 800d24e:	f7fb fda9 	bl	8008da4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d254:	3316      	adds	r3, #22
 800d256:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fb fda3 	bl	8008da4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d25e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d260:	3312      	adds	r3, #18
 800d262:	2100      	movs	r1, #0
 800d264:	4618      	mov	r0, r3
 800d266:	f7fb fd82 	bl	8008d6e <st_word>
					fs->wflag = 1;
 800d26a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d26c:	2201      	movs	r2, #1
 800d26e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d272:	4618      	mov	r0, r3
 800d274:	f7fc f8a6 	bl	80093c4 <sync_fs>
 800d278:	4603      	mov	r3, r0
 800d27a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d290:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d294:	4618      	mov	r0, r3
 800d296:	3770      	adds	r7, #112	@ 0x70
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff fec7 	bl	800d038 <f_sync>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d2ae:	7bfb      	ldrb	r3, [r7, #15]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d118      	bne.n	800d2e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f107 0208 	add.w	r2, r7, #8
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff f839 	bl	800c334 <validate>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10c      	bne.n	800d2e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fb ffa5 	bl	8009220 <dec_lock>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d102      	bne.n	800d2e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <f_opendir+0x14>
 800d300:	2309      	movs	r3, #9
 800d302:	e0af      	b.n	800d464 <f_opendir+0x174>

	/* Get logical drive */
	obj = &dp->obj;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d308:	f107 0108 	add.w	r1, r7, #8
 800d30c:	463b      	mov	r3, r7
 800d30e:	2200      	movs	r2, #0
 800d310:	4618      	mov	r0, r3
 800d312:	f7fe fcbd 	bl	800bc90 <find_volume>
 800d316:	4603      	mov	r3, r0
 800d318:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f040 809a 	bne.w	800d456 <f_opendir+0x166>
		obj->fs = fs;
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d328:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d32c:	f001 fb8a 	bl	800ea44 <ff_memalloc>
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d101      	bne.n	800d33c <f_opendir+0x4c>
 800d338:	2311      	movs	r3, #17
 800d33a:	e093      	b.n	800d464 <f_opendir+0x174>
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	60da      	str	r2, [r3, #12]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d34a:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	4619      	mov	r1, r3
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f7fe fb4b 	bl	800b9ec <follow_path>
 800d356:	4603      	mov	r3, r0
 800d358:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d35a:	7dfb      	ldrb	r3, [r7, #23]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d172      	bne.n	800d446 <f_opendir+0x156>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d366:	b25b      	sxtb	r3, r3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	db47      	blt.n	800d3fc <f_opendir+0x10c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	799b      	ldrb	r3, [r3, #6]
 800d370:	f003 0310 	and.w	r3, r3, #16
 800d374:	2b00      	cmp	r3, #0
 800d376:	d03f      	beq.n	800d3f8 <f_opendir+0x108>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	2b04      	cmp	r3, #4
 800d37e:	d130      	bne.n	800d3e2 <f_opendir+0xf2>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	689a      	ldr	r2, [r3, #8]
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d38e:	4613      	mov	r3, r2
 800d390:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	79d2      	ldrb	r2, [r2, #7]
 800d398:	431a      	orrs	r2, r3
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	3334      	adds	r3, #52	@ 0x34
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fb fbe0 	bl	8008b72 <ld_dword>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	3338      	adds	r3, #56	@ 0x38
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fb fbfa 	bl	8008bb8 <ld_qword>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	6939      	ldr	r1, [r7, #16]
 800d3ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	3321      	adds	r3, #33	@ 0x21
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	f003 0302 	and.w	r3, r3, #2
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	71da      	strb	r2, [r3, #7]
 800d3e0:	e00c      	b.n	800d3fc <f_opendir+0x10c>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	f7fc ff76 	bl	800a2dc <ld_clust>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	609a      	str	r2, [r3, #8]
 800d3f6:	e001      	b.n	800d3fc <f_opendir+0x10c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d3f8:	2305      	movs	r3, #5
 800d3fa:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d3fc:	7dfb      	ldrb	r3, [r7, #23]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d121      	bne.n	800d446 <f_opendir+0x156>
				obj->id = fs->id;
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	88da      	ldrh	r2, [r3, #6]
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d40a:	2100      	movs	r1, #0
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7fc fdae 	bl	8009f6e <dir_sdi>
 800d412:	4603      	mov	r3, r0
 800d414:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d114      	bne.n	800d446 <f_opendir+0x156>
					if (obj->sclust) {
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00d      	beq.n	800d440 <f_opendir+0x150>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d424:	2100      	movs	r1, #0
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7fb fe6c 	bl	8009104 <inc_lock>
 800d42c:	4602      	mov	r2, r0
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d436:	2b00      	cmp	r3, #0
 800d438:	d105      	bne.n	800d446 <f_opendir+0x156>
 800d43a:	2312      	movs	r3, #18
 800d43c:	75fb      	strb	r3, [r7, #23]
 800d43e:	e002      	b.n	800d446 <f_opendir+0x156>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2200      	movs	r2, #0
 800d444:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f001 fb08 	bl	800ea5c <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d44c:	7dfb      	ldrb	r3, [r7, #23]
 800d44e:	2b04      	cmp	r3, #4
 800d450:	d101      	bne.n	800d456 <f_opendir+0x166>
 800d452:	2305      	movs	r3, #5
 800d454:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d456:	7dfb      	ldrb	r3, [r7, #23]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <f_opendir+0x172>
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2200      	movs	r2, #0
 800d460:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d462:	7dfb      	ldrb	r3, [r7, #23]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f107 0208 	add.w	r2, r7, #8
 800d47a:	4611      	mov	r1, r2
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe ff59 	bl	800c334 <validate>
 800d482:	4603      	mov	r3, r0
 800d484:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d486:	7bfb      	ldrb	r3, [r7, #15]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d110      	bne.n	800d4ae <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d490:	2b00      	cmp	r3, #0
 800d492:	d006      	beq.n	800d4a2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fb fec1 	bl	8009220 <dec_lock>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d102      	bne.n	800d4ae <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f107 020c 	add.w	r2, r7, #12
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fe ff32 	bl	800c334 <validate>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d4d4:	7dfb      	ldrb	r3, [r7, #23]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d13b      	bne.n	800d552 <f_readdir+0x9a>
		if (!fno) {
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d106      	bne.n	800d4ee <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7fc fd43 	bl	8009f6e <dir_sdi>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	75fb      	strb	r3, [r7, #23]
 800d4ec:	e031      	b.n	800d552 <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 800d4ee:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d4f2:	f001 faa7 	bl	800ea44 <ff_memalloc>
 800d4f6:	6138      	str	r0, [r7, #16]
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d101      	bne.n	800d502 <f_readdir+0x4a>
 800d4fe:	2311      	movs	r3, #17
 800d500:	e028      	b.n	800d554 <f_readdir+0x9c>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	60da      	str	r2, [r3, #12]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	693a      	ldr	r2, [r7, #16]
 800d50c:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d510:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800d512:	2100      	movs	r1, #0
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7fd fbdb 	bl	800acd0 <dir_read>
 800d51a:	4603      	mov	r3, r0
 800d51c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
 800d520:	2b04      	cmp	r3, #4
 800d522:	d101      	bne.n	800d528 <f_readdir+0x70>
 800d524:	2300      	movs	r3, #0
 800d526:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800d528:	7dfb      	ldrb	r3, [r7, #23]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d10e      	bne.n	800d54c <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7fd ff65 	bl	800b400 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d536:	2100      	movs	r1, #0
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7fc fd9e 	bl	800a07a <dir_next>
 800d53e:	4603      	mov	r3, r0
 800d540:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	2b04      	cmp	r3, #4
 800d546:	d101      	bne.n	800d54c <f_readdir+0x94>
 800d548:	2300      	movs	r3, #0
 800d54a:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800d54c:	6938      	ldr	r0, [r7, #16]
 800d54e:	f001 fa85 	bl	800ea5c <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800d552:	7dfb      	ldrb	r3, [r7, #23]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b098      	sub	sp, #96	@ 0x60
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d566:	f107 0108 	add.w	r1, r7, #8
 800d56a:	1d3b      	adds	r3, r7, #4
 800d56c:	2200      	movs	r2, #0
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fe fb8e 	bl	800bc90 <find_volume>
 800d574:	4603      	mov	r3, r0
 800d576:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d57a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d134      	bne.n	800d5ec <f_stat+0x90>
		INIT_NAMBUF(dj.obj.fs);
 800d582:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d586:	f001 fa5d 	bl	800ea44 <ff_memalloc>
 800d58a:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d58c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d101      	bne.n	800d596 <f_stat+0x3a>
 800d592:	2311      	movs	r3, #17
 800d594:	e02c      	b.n	800d5f0 <f_stat+0x94>
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d59a:	60da      	str	r2, [r3, #12]
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5a0:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d5a4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	f107 0308 	add.w	r3, r7, #8
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe fa1c 	bl	800b9ec <follow_path>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d5ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d111      	bne.n	800d5e6 <f_stat+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d5c2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d5c6:	b25b      	sxtb	r3, r3
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	da03      	bge.n	800d5d4 <f_stat+0x78>
				res = FR_INVALID_NAME;
 800d5cc:	2306      	movs	r3, #6
 800d5ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d5d2:	e008      	b.n	800d5e6 <f_stat+0x8a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d005      	beq.n	800d5e6 <f_stat+0x8a>
 800d5da:	f107 0308 	add.w	r3, r7, #8
 800d5de:	6839      	ldr	r1, [r7, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fd ff0d 	bl	800b400 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800d5e6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d5e8:	f001 fa38 	bl	800ea5c <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800d5ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3760      	adds	r7, #96	@ 0x60
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800d5f8:	b590      	push	{r4, r7, lr}
 800d5fa:	b0a9      	sub	sp, #164	@ 0xa4
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	607a      	str	r2, [r7, #4]
 800d602:	603b      	str	r3, [r7, #0]
 800d604:	460b      	mov	r3, r1
 800d606:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800d608:	2301      	movs	r3, #1
 800d60a:	657b      	str	r3, [r7, #84]	@ 0x54
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800d60c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d610:	653b      	str	r3, [r7, #80]	@ 0x50
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800d612:	f107 030c 	add.w	r3, r7, #12
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fa91 	bl	800bb3e <get_ldnumber>
 800d61c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d61e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d620:	2b00      	cmp	r3, #0
 800d622:	da02      	bge.n	800d62a <f_mkfs+0x32>
 800d624:	230b      	movs	r3, #11
 800d626:	f001 b8c3 	b.w	800e7b0 <f_mkfs+0x11b8>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800d62a:	4a9b      	ldr	r2, [pc, #620]	@ (800d898 <f_mkfs+0x2a0>)
 800d62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d005      	beq.n	800d642 <f_mkfs+0x4a>
 800d636:	4a98      	ldr	r2, [pc, #608]	@ (800d898 <f_mkfs+0x2a0>)
 800d638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d63e:	2200      	movs	r2, #0
 800d640:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800d642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d644:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800d648:	2300      	movs	r3, #0
 800d64a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800d64e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d652:	4618      	mov	r0, r3
 800d654:	f7fb f9f0 	bl	8008a38 <disk_initialize>
 800d658:	4603      	mov	r3, r0
 800d65a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d65e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800d662:	f003 0301 	and.w	r3, r3, #1
 800d666:	2b00      	cmp	r3, #0
 800d668:	d002      	beq.n	800d670 <f_mkfs+0x78>
 800d66a:	2303      	movs	r3, #3
 800d66c:	f001 b8a0 	b.w	800e7b0 <f_mkfs+0x11b8>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d670:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800d674:	f003 0304 	and.w	r3, r3, #4
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <f_mkfs+0x8a>
 800d67c:	230a      	movs	r3, #10
 800d67e:	f001 b897 	b.w	800e7b0 <f_mkfs+0x11b8>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800d682:	f107 0220 	add.w	r2, r7, #32
 800d686:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d68a:	2103      	movs	r1, #3
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fb fa39 	bl	8008b04 <disk_ioctl>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10c      	bne.n	800d6b2 <f_mkfs+0xba>
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d009      	beq.n	800d6b2 <f_mkfs+0xba>
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6a4:	d805      	bhi.n	800d6b2 <f_mkfs+0xba>
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	1e5a      	subs	r2, r3, #1
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <f_mkfs+0xbe>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	623b      	str	r3, [r7, #32]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800d6b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d6ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d004      	beq.n	800d6ce <f_mkfs+0xd6>
 800d6c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d309      	bcc.n	800d6e2 <f_mkfs+0xea>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6d4:	d805      	bhi.n	800d6e2 <f_mkfs+0xea>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	1e5a      	subs	r2, r3, #1
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4013      	ands	r3, r2
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d002      	beq.n	800d6e8 <f_mkfs+0xf0>
 800d6e2:	2313      	movs	r3, #19
 800d6e4:	f001 b864 	b.w	800e7b0 <f_mkfs+0x11b8>
	au /= ss;	/* Cluster size in unit of sector */
 800d6e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	643b      	str	r3, [r7, #64]	@ 0x40
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d6f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d6fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d700:	fbb2 f3f3 	udiv	r3, r2, r3
 800d704:	63fb      	str	r3, [r7, #60]	@ 0x3c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d706:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d70a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d70c:	fb02 f303 	mul.w	r3, r2, r3
 800d710:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d714:	2b00      	cmp	r3, #0
 800d716:	d102      	bne.n	800d71e <f_mkfs+0x126>
 800d718:	230e      	movs	r3, #14
 800d71a:	f001 b849 	b.w	800e7b0 <f_mkfs+0x11b8>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d71e:	f107 021c 	add.w	r2, r7, #28
 800d722:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d726:	2101      	movs	r1, #1
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fb f9eb 	bl	8008b04 <disk_ioctl>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <f_mkfs+0x142>
 800d734:	2301      	movs	r3, #1
 800d736:	f001 b83b 	b.w	800e7b0 <f_mkfs+0x11b8>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d73a:	7afb      	ldrb	r3, [r7, #11]
 800d73c:	f003 0308 	and.w	r3, r3, #8
 800d740:	2b00      	cmp	r3, #0
 800d742:	d001      	beq.n	800d748 <f_mkfs+0x150>
 800d744:	2300      	movs	r3, #0
 800d746:	e000      	b.n	800d74a <f_mkfs+0x152>
 800d748:	233f      	movs	r3, #63	@ 0x3f
 800d74a:	637b      	str	r3, [r7, #52]	@ 0x34
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d750:	429a      	cmp	r2, r3
 800d752:	d902      	bls.n	800d75a <f_mkfs+0x162>
 800d754:	230e      	movs	r3, #14
 800d756:	f001 b82b 	b.w	800e7b0 <f_mkfs+0x11b8>
		sz_vol -= b_vol;						/* Volume size */
 800d75a:	69fa      	ldr	r2, [r7, #28]
 800d75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	61fb      	str	r3, [r7, #28]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	2b7f      	cmp	r3, #127	@ 0x7f
 800d766:	d802      	bhi.n	800d76e <f_mkfs+0x176>
 800d768:	230e      	movs	r3, #14
 800d76a:	f001 b821 	b.w	800e7b0 <f_mkfs+0x11b8>

	/* Pre-determine the FAT type */
	do {
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
 800d76e:	7afb      	ldrb	r3, [r7, #11]
 800d770:	f003 0304 	and.w	r3, r3, #4
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00f      	beq.n	800d798 <f_mkfs+0x1a0>
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
 800d778:	7afb      	ldrb	r3, [r7, #11]
 800d77a:	f003 0307 	and.w	r3, r3, #7
 800d77e:	2b04      	cmp	r3, #4
 800d780:	d006      	beq.n	800d790 <f_mkfs+0x198>
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d788:	d202      	bcs.n	800d790 <f_mkfs+0x198>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2b80      	cmp	r3, #128	@ 0x80
 800d78e:	d903      	bls.n	800d798 <f_mkfs+0x1a0>
				fmt = FS_EXFAT; break;
 800d790:	2304      	movs	r3, #4
 800d792:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d796:	e023      	b.n	800d7e0 <f_mkfs+0x1e8>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b80      	cmp	r3, #128	@ 0x80
 800d79c:	d902      	bls.n	800d7a4 <f_mkfs+0x1ac>
 800d79e:	2313      	movs	r3, #19
 800d7a0:	f001 b806 	b.w	800e7b0 <f_mkfs+0x11b8>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d7a4:	7afb      	ldrb	r3, [r7, #11]
 800d7a6:	f003 0302 	and.w	r3, r3, #2
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00d      	beq.n	800d7ca <f_mkfs+0x1d2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d7ae:	7afb      	ldrb	r3, [r7, #11]
 800d7b0:	f003 0307 	and.w	r3, r3, #7
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d004      	beq.n	800d7c2 <f_mkfs+0x1ca>
 800d7b8:	7afb      	ldrb	r3, [r7, #11]
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d103      	bne.n	800d7ca <f_mkfs+0x1d2>
				fmt = FS_FAT32; break;
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d7c8:	e00a      	b.n	800d7e0 <f_mkfs+0x1e8>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d7ca:	7afb      	ldrb	r3, [r7, #11]
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d102      	bne.n	800d7da <f_mkfs+0x1e2>
 800d7d4:	2313      	movs	r3, #19
 800d7d6:	f000 bfeb 	b.w	800e7b0 <f_mkfs+0x11b8>
		fmt = FS_FAT16;
 800d7da:	2302      	movs	r3, #2
 800d7dc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	} while (0);

#if _FS_EXFAT
	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
 800d7e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d7e4:	2b04      	cmp	r3, #4
 800d7e6:	f040 842b 	bne.w	800e040 <f_mkfs+0xa48>
		DWORD szb_bit, szb_case, sum, nb, cl;
		WCHAR ch, si;
		UINT j, st;
		BYTE b;

		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7f0:	d202      	bcs.n	800d7f8 <f_mkfs+0x200>
 800d7f2:	230e      	movs	r3, #14
 800d7f4:	f000 bfdc 	b.w	800e7b0 <f_mkfs+0x11b8>
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (!au) {	/* au auto-selection */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10e      	bne.n	800d81c <f_mkfs+0x224>
			au = 8;
 800d7fe:	2308      	movs	r3, #8
 800d800:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d808:	d301      	bcc.n	800d80e <f_mkfs+0x216>
 800d80a:	2340      	movs	r3, #64	@ 0x40
 800d80c:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d814:	d302      	bcc.n	800d81c <f_mkfs+0x224>
 800d816:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d81a:	607b      	str	r3, [r7, #4]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 800d81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d81e:	3320      	adds	r3, #32
 800d820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
 800d824:	69fa      	ldr	r2, [r7, #28]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	fbb2 f3f3 	udiv	r3, r2, r3
 800d82c:	3302      	adds	r3, #2
 800d82e:	009a      	lsls	r2, r3, #2
 800d830:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d834:	4413      	add	r3, r2
 800d836:	1e5a      	subs	r2, r3, #1
 800d838:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block boundary */
 800d844:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d848:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d84c:	441a      	add	r2, r3
 800d84e:	6a3b      	ldr	r3, [r7, #32]
 800d850:	4413      	add	r3, r2
 800d852:	1e5a      	subs	r2, r3, #1
 800d854:	6a3b      	ldr	r3, [r7, #32]
 800d856:	425b      	negs	r3, r3
 800d858:	4013      	ands	r3, r2
 800d85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	085b      	lsrs	r3, r3, #1
 800d860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d862:	429a      	cmp	r2, r3
 800d864:	d302      	bcc.n	800d86c <f_mkfs+0x274>
 800d866:	230e      	movs	r3, #14
 800d868:	f000 bfa2 	b.w	800e7b0 <f_mkfs+0x11b8>
		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
 800d86c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d870:	1ad2      	subs	r2, r2, r3
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	441a      	add	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	fbb2 f3f3 	udiv	r3, r2, r3
 800d87c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
 800d87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d880:	2b0f      	cmp	r3, #15
 800d882:	d802      	bhi.n	800d88a <f_mkfs+0x292>
 800d884:	230e      	movs	r3, #14
 800d886:	f000 bf93 	b.w	800e7b0 <f_mkfs+0x11b8>
		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	4a03      	ldr	r2, [pc, #12]	@ (800d89c <f_mkfs+0x2a4>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d906      	bls.n	800d8a0 <f_mkfs+0x2a8>
 800d892:	230e      	movs	r3, #14
 800d894:	f000 bf8c 	b.w	800e7b0 <f_mkfs+0x11b8>
 800d898:	20001214 	.word	0x20001214
 800d89c:	7ffffffd 	.word	0x7ffffffd

		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a2:	3307      	adds	r3, #7
 800d8a4:	08db      	lsrs	r3, r3, #3
 800d8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
 800d8a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	fb03 f202 	mul.w	r2, r3, r2
 800d8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b4:	4413      	add	r3, r2
 800d8b6:	1e5a      	subs	r2, r3, #1
 800d8b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d8bc:	6879      	ldr	r1, [r7, #4]
 800d8be:	fb01 f303 	mul.w	r3, r1, r3
 800d8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8c6:	613b      	str	r3, [r7, #16]

		/* Create a compressed up-case table */
		sect = b_data + au * tbl[0];	/* Table start sector */
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	fb02 f303 	mul.w	r3, r2, r3
 800d8d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		sum = 0;						/* Table checksum to be stored in the 82 entry */
 800d8d8:	2300      	movs	r3, #0
 800d8da:	673b      	str	r3, [r7, #112]	@ 0x70
		st = si = i = j = szb_case = 0;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	677b      	str	r3, [r7, #116]	@ 0x74
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800d8e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d8e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d8ea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d8ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d8f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			switch (st) {
 800d8f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d003      	beq.n	800d902 <f_mkfs+0x30a>
 800d8fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d040      	beq.n	800d982 <f_mkfs+0x38a>
 800d900:	e04f      	b.n	800d9a2 <f_mkfs+0x3aa>
			case 0:
				ch = ff_wtoupper(si);	/* Get an up-case char */
 800d902:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d906:	4618      	mov	r0, r3
 800d908:	f001 f812 	bl	800e930 <ff_wtoupper>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (ch != si) {
 800d912:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800d916:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d005      	beq.n	800d92a <f_mkfs+0x332>
					si++; break;		/* Store the up-case char if exist */
 800d91e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d922:	3301      	adds	r3, #1
 800d924:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d928:	e049      	b.n	800d9be <f_mkfs+0x3c6>
				}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 800d92a:	2301      	movs	r3, #1
 800d92c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d92e:	e002      	b.n	800d936 <f_mkfs+0x33e>
 800d930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d932:	3301      	adds	r3, #1
 800d934:	663b      	str	r3, [r7, #96]	@ 0x60
 800d936:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d938:	b29a      	uxth	r2, r3
 800d93a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d93e:	4413      	add	r3, r2
 800d940:	b29b      	uxth	r3, r3
 800d942:	2b00      	cmp	r3, #0
 800d944:	d011      	beq.n	800d96a <f_mkfs+0x372>
 800d946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d948:	b29a      	uxth	r2, r3
 800d94a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d94e:	4413      	add	r3, r2
 800d950:	b29c      	uxth	r4, r3
 800d952:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d954:	b29a      	uxth	r2, r3
 800d956:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d95a:	4413      	add	r3, r2
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 ffe6 	bl	800e930 <ff_wtoupper>
 800d964:	4603      	mov	r3, r0
 800d966:	429c      	cmp	r4, r3
 800d968:	d0e2      	beq.n	800d930 <f_mkfs+0x338>
				if (j >= 128) {
 800d96a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d96c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d96e:	d906      	bls.n	800d97e <f_mkfs+0x386>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
 800d970:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d974:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d978:	2302      	movs	r3, #2
 800d97a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d97c:	e01f      	b.n	800d9be <f_mkfs+0x3c6>
				}
				st = 1;			/* Do not compress short run */
 800d97e:	2301      	movs	r3, #1
 800d980:	65fb      	str	r3, [r7, #92]	@ 0x5c
				/* go to next case */
			case 1:
				ch = si++;		/* Fill the short run */
 800d982:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d986:	1c5a      	adds	r2, r3, #1
 800d988:	f8a7 2064 	strh.w	r2, [r7, #100]	@ 0x64
 800d98c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (--j == 0) st = 0;
 800d990:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d992:	3b01      	subs	r3, #1
 800d994:	663b      	str	r3, [r7, #96]	@ 0x60
 800d996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d10f      	bne.n	800d9bc <f_mkfs+0x3c4>
 800d99c:	2300      	movs	r3, #0
 800d99e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				break;
 800d9a0:	e00c      	b.n	800d9bc <f_mkfs+0x3c4>

			default:
				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
 800d9a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9a4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d9a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d9b0:	4413      	add	r3, r2
 800d9b2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				st = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9ba:	e000      	b.n	800d9be <f_mkfs+0x3c6>
				break;
 800d9bc:	bf00      	nop
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
 800d9be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9c2:	4413      	add	r3, r2
 800d9c4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800d9c8:	b2d2      	uxtb	r2, r2
 800d9ca:	701a      	strb	r2, [r3, #0]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fc ff24 	bl	800a81e <xsum32>
 800d9d6:	6738      	str	r0, [r7, #112]	@ 0x70
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 800d9d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d9dc:	0a1b      	lsrs	r3, r3, #8
 800d9de:	b299      	uxth	r1, r3
 800d9e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b2ca      	uxtb	r2, r1
 800d9ea:	701a      	strb	r2, [r3, #0]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fc ff14 	bl	800a81e <xsum32>
 800d9f6:	6738      	str	r0, [r7, #112]	@ 0x70
			i += 2; szb_case += 2;
 800d9f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9fa:	3302      	adds	r3, #2
 800d9fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d9fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da00:	3302      	adds	r3, #2
 800da02:	677b      	str	r3, [r7, #116]	@ 0x74
			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
 800da04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <f_mkfs+0x41c>
 800da0c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800da0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da10:	429a      	cmp	r2, r3
 800da12:	d122      	bne.n	800da5a <f_mkfs+0x462>
				n = (i + ss - 1) / ss;
 800da14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800da18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da1a:	4413      	add	r3, r2
 800da1c:	1e5a      	subs	r2, r3, #1
 800da1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da22:	fbb2 f3f3 	udiv	r3, r2, r3
 800da26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800da2a:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800da2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da32:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800da36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da38:	f7fb f844 	bl	8008ac4 <disk_write>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d002      	beq.n	800da48 <f_mkfs+0x450>
 800da42:	2301      	movs	r3, #1
 800da44:	f000 beb4 	b.w	800e7b0 <f_mkfs+0x11b8>
				sect += n; i = 0;
 800da48:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800da4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da50:	4413      	add	r3, r2
 800da52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da56:	2300      	movs	r3, #0
 800da58:	67bb      	str	r3, [r7, #120]	@ 0x78
			}
		} while (si);
 800da5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f47f af48 	bne.w	800d8f4 <f_mkfs+0x2fc>
		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
 800da64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	fb03 f202 	mul.w	r2, r3, r2
 800da6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da70:	4413      	add	r3, r2
 800da72:	1e5a      	subs	r2, r3, #1
 800da74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	fb01 f303 	mul.w	r3, r1, r3
 800da7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da82:	617b      	str	r3, [r7, #20]
		tbl[2] = 1;										/* Number of root dir clusters */
 800da84:	2301      	movs	r3, #1
 800da86:	61bb      	str	r3, [r7, #24]

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
 800da88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da8e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800da92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da94:	4413      	add	r3, r2
 800da96:	1e5a      	subs	r2, r3, #1
 800da98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800daa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
 800daa4:	693a      	ldr	r2, [r7, #16]
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	441a      	add	r2, r3
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	4413      	add	r3, r2
 800daae:	66fb      	str	r3, [r7, #108]	@ 0x6c
		do {
			mem_set(buf, 0, szb_buf);
 800dab0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dab2:	2100      	movs	r1, #0
 800dab4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dab6:	f7fb fa4a 	bl	8008f4e <mem_set>
			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
 800daba:	2300      	movs	r3, #0
 800dabc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dabe:	e009      	b.n	800dad4 <f_mkfs+0x4dc>
 800dac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dac2:	1c5a      	adds	r2, r3, #1
 800dac4:	67ba      	str	r2, [r7, #120]	@ 0x78
 800dac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dac8:	4413      	add	r3, r2
 800daca:	22ff      	movs	r2, #255	@ 0xff
 800dacc:	701a      	strb	r2, [r3, #0]
 800dace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dad0:	3b08      	subs	r3, #8
 800dad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dad6:	2b07      	cmp	r3, #7
 800dad8:	d903      	bls.n	800dae2 <f_mkfs+0x4ea>
 800dada:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dade:	429a      	cmp	r2, r3
 800dae0:	d3ee      	bcc.n	800dac0 <f_mkfs+0x4c8>
			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
 800dae2:	2301      	movs	r3, #1
 800dae4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800dae8:	e013      	b.n	800db12 <f_mkfs+0x51a>
 800daea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800daec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800daee:	4413      	add	r3, r2
 800daf0:	7819      	ldrb	r1, [r3, #0]
 800daf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800daf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800daf6:	4413      	add	r3, r2
 800daf8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800dafc:	430a      	orrs	r2, r1
 800dafe:	b2d2      	uxtb	r2, r2
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800db0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db0e:	3b01      	subs	r3, #1
 800db10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db14:	2b00      	cmp	r3, #0
 800db16:	d003      	beq.n	800db20 <f_mkfs+0x528>
 800db18:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800db1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d3e4      	bcc.n	800daea <f_mkfs+0x4f2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 800db20:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800db24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db26:	4293      	cmp	r3, r2
 800db28:	bf28      	it	cs
 800db2a:	4613      	movcs	r3, r2
 800db2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800db30:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800db34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db38:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800db3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db3e:	f7fa ffc1 	bl	8008ac4 <disk_write>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <f_mkfs+0x556>
 800db48:	2301      	movs	r3, #1
 800db4a:	f000 be31 	b.w	800e7b0 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 800db4e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800db52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db56:	4413      	add	r3, r2
 800db58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800db60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db64:	1ad3      	subs	r3, r2, r3
 800db66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 800db6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d19e      	bne.n	800dab0 <f_mkfs+0x4b8>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 800db72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800db76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		j = nb = cl = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db8c:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
 800db8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db90:	2100      	movs	r1, #0
 800db92:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800db94:	f7fb f9db 	bl	8008f4e <mem_set>
 800db98:	2300      	movs	r3, #0
 800db9a:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (cl == 0) {	/* Set entry 0 and 1 */
 800db9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d134      	bne.n	800dc0c <f_mkfs+0x614>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
 800dba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dba6:	4413      	add	r3, r2
 800dba8:	f06f 0107 	mvn.w	r1, #7
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fb f8f9 	bl	8008da4 <st_dword>
 800dbb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbba:	3301      	adds	r3, #1
 800dbbc:	66bb      	str	r3, [r7, #104]	@ 0x68
				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
 800dbbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbc2:	4413      	add	r3, r2
 800dbc4:	f04f 31ff 	mov.w	r1, #4294967295
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fb f8eb 	bl	8008da4 <st_dword>
 800dbce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	66bb      	str	r3, [r7, #104]	@ 0x68
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nb && i < szb_buf) {			/* Create a chain */
 800dbda:	e017      	b.n	800dc0c <f_mkfs+0x614>
					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 800dbdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbe0:	441a      	add	r2, r3
 800dbe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d902      	bls.n	800dbee <f_mkfs+0x5f6>
 800dbe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbea:	3301      	adds	r3, #1
 800dbec:	e001      	b.n	800dbf2 <f_mkfs+0x5fa>
 800dbee:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	f7fb f8d5 	bl	8008da4 <st_dword>
					i += 4; cl++; nb--;
 800dbfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbfc:	3304      	adds	r3, #4
 800dbfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc02:	3301      	adds	r3, #1
 800dc04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
				while (nb && i < szb_buf) {			/* Create a chain */
 800dc0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d003      	beq.n	800dc1a <f_mkfs+0x622>
 800dc12:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d3e0      	bcc.n	800dbdc <f_mkfs+0x5e4>
				}
				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
 800dc1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d10b      	bne.n	800dc38 <f_mkfs+0x640>
 800dc20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d808      	bhi.n	800dc38 <f_mkfs+0x640>
 800dc26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	663a      	str	r2, [r7, #96]	@ 0x60
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	33a0      	adds	r3, #160	@ 0xa0
 800dc30:	443b      	add	r3, r7
 800dc32:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800dc36:	66fb      	str	r3, [r7, #108]	@ 0x6c
			} while (nb && i < szb_buf);
 800dc38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <f_mkfs+0x64e>
 800dc3e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d3e2      	bcc.n	800dc0c <f_mkfs+0x614>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 800dc46:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	bf28      	it	cs
 800dc50:	4613      	movcs	r3, r2
 800dc52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800dc56:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800dc5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc5e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dc62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dc64:	f7fa ff2e 	bl	8008ac4 <disk_write>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d002      	beq.n	800dc74 <f_mkfs+0x67c>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f000 bd9e 	b.w	800e7b0 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 800dc74:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dc78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dc82:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dc86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 800dc90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f47f af7a 	bne.w	800db8e <f_mkfs+0x596>

		/* Initialize the root directory */
		mem_set(buf, 0, szb_buf);
 800dc9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dca0:	f7fb f955 	bl	8008f4e <mem_set>
		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
 800dca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dca6:	2283      	movs	r2, #131	@ 0x83
 800dca8:	701a      	strb	r2, [r3, #0]
		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
 800dcaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcac:	3320      	adds	r3, #32
 800dcae:	2281      	movs	r2, #129	@ 0x81
 800dcb0:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 1 + 20, 2);
 800dcb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcb4:	3334      	adds	r3, #52	@ 0x34
 800dcb6:	2102      	movs	r1, #2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fb f873 	bl	8008da4 <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
 800dcbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcc0:	3338      	adds	r3, #56	@ 0x38
 800dcc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fb f86d 	bl	8008da4 <st_dword>
		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
 800dcca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dccc:	3340      	adds	r3, #64	@ 0x40
 800dcce:	2282      	movs	r2, #130	@ 0x82
 800dcd0:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 2 + 4, sum);
 800dcd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcd4:	3344      	adds	r3, #68	@ 0x44
 800dcd6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fb f863 	bl	8008da4 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
 800dcde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dce0:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	3302      	adds	r3, #2
 800dce8:	4619      	mov	r1, r3
 800dcea:	4610      	mov	r0, r2
 800dcec:	f7fb f85a 	bl	8008da4 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);
 800dcf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf2:	3358      	adds	r3, #88	@ 0x58
 800dcf4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fb f854 	bl	8008da4 <st_dword>
		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of sectors */
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	4413      	add	r3, r2
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	fb02 f303 	mul.w	r3, r2, r3
 800dd08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800dd16:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dd1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	bf28      	it	cs
 800dd20:	4613      	movcs	r3, r2
 800dd22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800dd26:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800dd2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd2e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dd32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd34:	f7fa fec6 	bl	8008ac4 <disk_write>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d002      	beq.n	800dd44 <f_mkfs+0x74c>
 800dd3e:	2301      	movs	r3, #1
 800dd40:	f000 bd36 	b.w	800e7b0 <f_mkfs+0x11b8>
			mem_set(buf, 0, ss);
 800dd44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dd48:	461a      	mov	r2, r3
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dd4e:	f7fb f8fe 	bl	8008f4e <mem_set>
			sect += n; nsect -= n;
 800dd52:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dd56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd5a:	4413      	add	r3, r2
 800dd5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dd60:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dd64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 800dd6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1cf      	bne.n	800dd16 <f_mkfs+0x71e>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
 800dd76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (n = 0; n < 2; n++) {
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dd82:	e157      	b.n	800e034 <f_mkfs+0xa3c>
			/* Main record (+0) */
			mem_set(buf, 0, ss);
 800dd84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dd88:	461a      	mov	r2, r3
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dd8e:	f7fb f8de 	bl	8008f4e <mem_set>
			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 800dd92:	220b      	movs	r2, #11
 800dd94:	49b5      	ldr	r1, [pc, #724]	@ (800e06c <f_mkfs+0xa74>)
 800dd96:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dd98:	f7fb f8b8 	bl	8008f0c <mem_cpy>
			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 800dd9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd9e:	3340      	adds	r3, #64	@ 0x40
 800dda0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7fa fffe 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 800dda8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddaa:	3348      	adds	r3, #72	@ 0x48
 800ddac:	69fa      	ldr	r2, [r7, #28]
 800ddae:	4611      	mov	r1, r2
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fa fff7 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
 800ddb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddb8:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 800ddbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ddc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f7fa ffed 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 800ddca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddcc:	3354      	adds	r3, #84	@ 0x54
 800ddce:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fa ffe6 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
 800ddd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddda:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800ddde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	4619      	mov	r1, r3
 800dde6:	f7fa ffdd 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 800ddea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddec:	335c      	adds	r3, #92	@ 0x5c
 800ddee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fa ffd7 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
 800ddf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddf8:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	4413      	add	r3, r2
 800de02:	3302      	adds	r3, #2
 800de04:	4619      	mov	r1, r3
 800de06:	f7fa ffcd 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
 800de0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de0c:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 800de10:	f7fa fd20 	bl	8008854 <get_fattime>
 800de14:	4603      	mov	r3, r0
 800de16:	4619      	mov	r1, r3
 800de18:	4620      	mov	r0, r4
 800de1a:	f7fa ffc3 	bl	8008da4 <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
 800de1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de20:	3368      	adds	r3, #104	@ 0x68
 800de22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800de26:	4618      	mov	r0, r3
 800de28:	f7fa ffa1 	bl	8008d6e <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
 800de2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de2e:	336c      	adds	r3, #108	@ 0x6c
 800de30:	2200      	movs	r2, #0
 800de32:	701a      	strb	r2, [r3, #0]
 800de34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800de38:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de3a:	e005      	b.n	800de48 <f_mkfs+0x850>
 800de3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de3e:	336c      	adds	r3, #108	@ 0x6c
 800de40:	781a      	ldrb	r2, [r3, #0]
 800de42:	3201      	adds	r2, #1
 800de44:	b2d2      	uxtb	r2, r2
 800de46:	701a      	strb	r2, [r3, #0]
 800de48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de4a:	085b      	lsrs	r3, r3, #1
 800de4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1f3      	bne.n	800de3c <f_mkfs+0x844>
			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 800de54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de56:	336d      	adds	r3, #109	@ 0x6d
 800de58:	2200      	movs	r2, #0
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de60:	e005      	b.n	800de6e <f_mkfs+0x876>
 800de62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de64:	336d      	adds	r3, #109	@ 0x6d
 800de66:	781a      	ldrb	r2, [r3, #0]
 800de68:	3201      	adds	r2, #1
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de70:	085b      	lsrs	r3, r3, #1
 800de72:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1f3      	bne.n	800de62 <f_mkfs+0x86a>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 800de7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de7c:	336e      	adds	r3, #110	@ 0x6e
 800de7e:	2201      	movs	r2, #1
 800de80:	701a      	strb	r2, [r3, #0]
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 800de82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de84:	336f      	adds	r3, #111	@ 0x6f
 800de86:	2280      	movs	r2, #128	@ 0x80
 800de88:	701a      	strb	r2, [r3, #0]
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
 800de8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de8c:	3378      	adds	r3, #120	@ 0x78
 800de8e:	f64f 61eb 	movw	r1, #65259	@ 0xfeeb
 800de92:	4618      	mov	r0, r3
 800de94:	f7fa ff6b 	bl	8008d6e <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
 800de98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800de9e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fa ff63 	bl	8008d6e <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 800dea8:	2300      	movs	r3, #0
 800deaa:	673b      	str	r3, [r7, #112]	@ 0x70
 800deac:	2300      	movs	r3, #0
 800deae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800deb0:	e014      	b.n	800dedc <f_mkfs+0x8e4>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 800deb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800deb4:	2b6a      	cmp	r3, #106	@ 0x6a
 800deb6:	d00e      	beq.n	800ded6 <f_mkfs+0x8de>
 800deb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800deba:	2b6b      	cmp	r3, #107	@ 0x6b
 800debc:	d00b      	beq.n	800ded6 <f_mkfs+0x8de>
 800debe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dec0:	2b70      	cmp	r3, #112	@ 0x70
 800dec2:	d008      	beq.n	800ded6 <f_mkfs+0x8de>
 800dec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dec8:	4413      	add	r3, r2
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fc fca5 	bl	800a81e <xsum32>
 800ded4:	6738      	str	r0, [r7, #112]	@ 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 800ded6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ded8:	3301      	adds	r3, #1
 800deda:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dedc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dee0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d3e5      	bcc.n	800deb2 <f_mkfs+0x8ba>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800dee6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800deea:	1c53      	adds	r3, r2, #1
 800deec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800def0:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800def4:	2301      	movs	r3, #1
 800def6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800def8:	f7fa fde4 	bl	8008ac4 <disk_write>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d002      	beq.n	800df08 <f_mkfs+0x910>
 800df02:	2301      	movs	r3, #1
 800df04:	f000 bc54 	b.w	800e7b0 <f_mkfs+0x11b8>
			/* Extended bootstrap record (+1..+8) */
			mem_set(buf, 0, ss);
 800df08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800df0c:	461a      	mov	r2, r3
 800df0e:	2100      	movs	r1, #0
 800df10:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800df12:	f7fb f81c 	bl	8008f4e <mem_set>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
 800df16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800df1a:	3b02      	subs	r3, #2
 800df1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df1e:	4413      	add	r3, r2
 800df20:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800df24:	4618      	mov	r0, r3
 800df26:	f7fa ff22 	bl	8008d6e <st_word>
			for (j = 1; j < 9; j++) {
 800df2a:	2301      	movs	r3, #1
 800df2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800df2e:	e026      	b.n	800df7e <f_mkfs+0x986>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 800df30:	2300      	movs	r3, #0
 800df32:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df34:	e00a      	b.n	800df4c <f_mkfs+0x954>
 800df36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800df3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df3e:	4413      	add	r3, r2
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800df44:	4618      	mov	r0, r3
 800df46:	f7fc fc6a 	bl	800a81e <xsum32>
 800df4a:	6738      	str	r0, [r7, #112]	@ 0x70
 800df4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800df50:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800df52:	429a      	cmp	r2, r3
 800df54:	d3ef      	bcc.n	800df36 <f_mkfs+0x93e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800df56:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800df5a:	1c53      	adds	r3, r2, #1
 800df5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800df60:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800df64:	2301      	movs	r3, #1
 800df66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df68:	f7fa fdac 	bl	8008ac4 <disk_write>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d002      	beq.n	800df78 <f_mkfs+0x980>
 800df72:	2301      	movs	r3, #1
 800df74:	f000 bc1c 	b.w	800e7b0 <f_mkfs+0x11b8>
			for (j = 1; j < 9; j++) {
 800df78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df7a:	3301      	adds	r3, #1
 800df7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800df7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df80:	2b08      	cmp	r3, #8
 800df82:	d9d5      	bls.n	800df30 <f_mkfs+0x938>
			}
			/* OEM/Reserved record (+9..+10) */
			mem_set(buf, 0, ss);
 800df84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800df88:	461a      	mov	r2, r3
 800df8a:	2100      	movs	r1, #0
 800df8c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800df8e:	f7fa ffde 	bl	8008f4e <mem_set>
			for ( ; j < 11; j++) {
 800df92:	e025      	b.n	800dfe0 <f_mkfs+0x9e8>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 800df94:	2300      	movs	r3, #0
 800df96:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df98:	e00a      	b.n	800dfb0 <f_mkfs+0x9b8>
 800df9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df9c:	1c5a      	adds	r2, r3, #1
 800df9e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800dfa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfa2:	4413      	add	r3, r2
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fc fc38 	bl	800a81e <xsum32>
 800dfae:	6738      	str	r0, [r7, #112]	@ 0x70
 800dfb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dfb4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d3ef      	bcc.n	800df9a <f_mkfs+0x9a2>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800dfba:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dfbe:	1c53      	adds	r3, r2, #1
 800dfc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dfc4:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800dfc8:	2301      	movs	r3, #1
 800dfca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfcc:	f7fa fd7a 	bl	8008ac4 <disk_write>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <f_mkfs+0x9e2>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e3ea      	b.n	800e7b0 <f_mkfs+0x11b8>
			for ( ; j < 11; j++) {
 800dfda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfdc:	3301      	adds	r3, #1
 800dfde:	663b      	str	r3, [r7, #96]	@ 0x60
 800dfe0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfe2:	2b0a      	cmp	r3, #10
 800dfe4:	d9d6      	bls.n	800df94 <f_mkfs+0x99c>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dfea:	e009      	b.n	800e000 <f_mkfs+0xa08>
 800dfec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dff0:	4413      	add	r3, r2
 800dff2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fa fed5 	bl	8008da4 <st_dword>
 800dffa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dffc:	3304      	adds	r3, #4
 800dffe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e000:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e004:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e006:	429a      	cmp	r2, r3
 800e008:	d3f0      	bcc.n	800dfec <f_mkfs+0x9f4>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800e00a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e00e:	1c53      	adds	r3, r2, #1
 800e010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e014:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e018:	2301      	movs	r3, #1
 800e01a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e01c:	f7fa fd52 	bl	8008ac4 <disk_write>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d001      	beq.n	800e02a <f_mkfs+0xa32>
 800e026:	2301      	movs	r3, #1
 800e028:	e3c2      	b.n	800e7b0 <f_mkfs+0x11b8>
		for (n = 0; n < 2; n++) {
 800e02a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e02e:	3301      	adds	r3, #1
 800e030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e038:	2b01      	cmp	r3, #1
 800e03a:	f67f aea3 	bls.w	800dd84 <f_mkfs+0x78c>
 800e03e:	e324      	b.n	800e68a <f_mkfs+0x1092>

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e046:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d14a      	bne.n	800e0e4 <f_mkfs+0xaec>
				if (!pau) {	/* au auto-selection */
 800e04e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e052:	2b00      	cmp	r3, #0
 800e054:	d123      	bne.n	800e09e <f_mkfs+0xaa6>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	0c5b      	lsrs	r3, r3, #17
 800e05a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e05e:	2300      	movs	r3, #0
 800e060:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e062:	2301      	movs	r3, #1
 800e064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e068:	e00a      	b.n	800e080 <f_mkfs+0xa88>
 800e06a:	bf00      	nop
 800e06c:	08013310 	.word	0x08013310
 800e070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e072:	3301      	adds	r3, #1
 800e074:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e076:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e080:	4aa0      	ldr	r2, [pc, #640]	@ (800e304 <f_mkfs+0xd0c>)
 800e082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d008      	beq.n	800e09e <f_mkfs+0xaa6>
 800e08c:	4a9d      	ldr	r2, [pc, #628]	@ (800e304 <f_mkfs+0xd0c>)
 800e08e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e094:	461a      	mov	r2, r3
 800e096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d2e8      	bcs.n	800e070 <f_mkfs+0xa78>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e09e:	69fa      	ldr	r2, [r7, #28]
 800e0a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0a8:	633b      	str	r3, [r7, #48]	@ 0x30
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ac:	3302      	adds	r3, #2
 800e0ae:	009a      	lsls	r2, r3, #2
 800e0b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e0b4:	4413      	add	r3, r2
 800e0b6:	1e5a      	subs	r2, r3, #1
 800e0b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 32;	/* Number of reserved sectors */
 800e0c4:	2320      	movs	r3, #32
 800e0c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = 0;		/* No static directory */
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d903      	bls.n	800e0e0 <f_mkfs+0xae8>
 800e0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0da:	4a8b      	ldr	r2, [pc, #556]	@ (800e308 <f_mkfs+0xd10>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d959      	bls.n	800e194 <f_mkfs+0xb9c>
 800e0e0:	230e      	movs	r3, #14
 800e0e2:	e365      	b.n	800e7b0 <f_mkfs+0x11b8>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e0e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d120      	bne.n	800e12e <f_mkfs+0xb36>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	0b1b      	lsrs	r3, r3, #12
 800e0f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0fe:	e007      	b.n	800e110 <f_mkfs+0xb18>
 800e100:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e102:	3301      	adds	r3, #1
 800e104:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e106:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e110:	4a7e      	ldr	r2, [pc, #504]	@ (800e30c <f_mkfs+0xd14>)
 800e112:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d008      	beq.n	800e12e <f_mkfs+0xb36>
 800e11c:	4a7b      	ldr	r2, [pc, #492]	@ (800e30c <f_mkfs+0xd14>)
 800e11e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e124:	461a      	mov	r2, r3
 800e126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d2e8      	bcs.n	800e100 <f_mkfs+0xb08>
				}
				n_clst = sz_vol / pau;
 800e12e:	69fa      	ldr	r2, [r7, #28]
 800e130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e134:	fbb2 f3f3 	udiv	r3, r2, r3
 800e138:	633b      	str	r3, [r7, #48]	@ 0x30
				if (n_clst > MAX_FAT12) {
 800e13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e13c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e140:	4293      	cmp	r3, r2
 800e142:	d905      	bls.n	800e150 <f_mkfs+0xb58>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e146:	3302      	adds	r3, #2
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e14e:	e00b      	b.n	800e168 <f_mkfs+0xb70>
				} else {
					fmt = FS_FAT12;
 800e150:	2301      	movs	r3, #1
 800e152:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e158:	4613      	mov	r3, r2
 800e15a:	005b      	lsls	r3, r3, #1
 800e15c:	4413      	add	r3, r2
 800e15e:	3301      	adds	r3, #1
 800e160:	085b      	lsrs	r3, r3, #1
 800e162:	3303      	adds	r3, #3
 800e164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e168:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e16c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e170:	4413      	add	r3, r2
 800e172:	1e5a      	subs	r2, r3, #1
 800e174:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e178:	fbb2 f3f3 	udiv	r3, r2, r3
 800e17c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 1;						/* Number of reserved sectors */
 800e180:	2301      	movs	r3, #1
 800e182:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e188:	015a      	lsls	r2, r3, #5
 800e18a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e192:	67fb      	str	r3, [r7, #124]	@ 0x7c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e196:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e19a:	4413      	add	r3, r2
 800e19c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e1a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e1a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e1a6:	fb03 f202 	mul.w	r2, r3, r2
 800e1aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e1ae:	4413      	add	r3, r2
 800e1b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e1b2:	4413      	add	r3, r2
 800e1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e1b6:	6a3a      	ldr	r2, [r7, #32]
 800e1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ba:	4413      	add	r3, r2
 800e1bc:	1e5a      	subs	r2, r3, #1
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	425b      	negs	r3, r3
 800e1c2:	401a      	ands	r2, r3
 800e1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e1cc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e1d0:	2b03      	cmp	r3, #3
 800e1d2:	d10e      	bne.n	800e1f2 <f_mkfs+0xbfa>
				sz_rsv += n; b_fat += n;
 800e1d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e1d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1dc:	4413      	add	r3, r2
 800e1de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e1e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e1e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1ea:	4413      	add	r3, r2
 800e1ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e1f0:	e009      	b.n	800e206 <f_mkfs+0xc0e>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e1f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e1f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e200:	4413      	add	r3, r2
 800e202:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e206:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e20a:	011a      	lsls	r2, r3, #4
 800e20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20e:	441a      	add	r2, r3
 800e210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e212:	1ad2      	subs	r2, r2, r3
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	429a      	cmp	r2, r3
 800e218:	d901      	bls.n	800e21e <f_mkfs+0xc26>
 800e21a:	230e      	movs	r3, #14
 800e21c:	e2c8      	b.n	800e7b0 <f_mkfs+0x11b8>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e21e:	69fa      	ldr	r2, [r7, #28]
 800e220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e224:	1ad2      	subs	r2, r2, r3
 800e226:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e22a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e22c:	fb01 f303 	mul.w	r3, r1, r3
 800e230:	1ad2      	subs	r2, r2, r3
 800e232:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e234:	1ad2      	subs	r2, r2, r3
 800e236:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e23e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fmt == FS_FAT32) {
 800e240:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e244:	2b03      	cmp	r3, #3
 800e246:	d110      	bne.n	800e26a <f_mkfs+0xc72>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e24e:	4293      	cmp	r3, r2
 800e250:	d80b      	bhi.n	800e26a <f_mkfs+0xc72>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d106      	bne.n	800e266 <f_mkfs+0xc6e>
 800e258:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e25c:	085b      	lsrs	r3, r3, #1
 800e25e:	607b      	str	r3, [r7, #4]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d148      	bne.n	800e2f8 <f_mkfs+0xd00>
					return FR_MKFS_ABORTED;
 800e266:	230e      	movs	r3, #14
 800e268:	e2a2      	b.n	800e7b0 <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT16) {
 800e26a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d137      	bne.n	800e2e2 <f_mkfs+0xcea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e274:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e278:	4293      	cmp	r3, r2
 800e27a:	d921      	bls.n	800e2c0 <f_mkfs+0xcc8>
					if (!au && (pau * 2) <= 64) {
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d109      	bne.n	800e296 <f_mkfs+0xc9e>
 800e282:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	2b40      	cmp	r3, #64	@ 0x40
 800e28a:	d804      	bhi.n	800e296 <f_mkfs+0xc9e>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e28c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e290:	005b      	lsls	r3, r3, #1
 800e292:	607b      	str	r3, [r7, #4]
 800e294:	e035      	b.n	800e302 <f_mkfs+0xd0a>
					}
					if ((opt & FM_FAT32)) {
 800e296:	7afb      	ldrb	r3, [r7, #11]
 800e298:	f003 0302 	and.w	r3, r3, #2
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d003      	beq.n	800e2a8 <f_mkfs+0xcb0>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e2a6:	e02c      	b.n	800e302 <f_mkfs+0xd0a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d106      	bne.n	800e2bc <f_mkfs+0xcc4>
 800e2ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2b2:	005b      	lsls	r3, r3, #1
 800e2b4:	607b      	str	r3, [r7, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b80      	cmp	r3, #128	@ 0x80
 800e2ba:	d91f      	bls.n	800e2fc <f_mkfs+0xd04>
					return FR_MKFS_ABORTED;
 800e2bc:	230e      	movs	r3, #14
 800e2be:	e277      	b.n	800e7b0 <f_mkfs+0x11b8>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d80b      	bhi.n	800e2e2 <f_mkfs+0xcea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d106      	bne.n	800e2de <f_mkfs+0xce6>
 800e2d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	607b      	str	r3, [r7, #4]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b80      	cmp	r3, #128	@ 0x80
 800e2dc:	d910      	bls.n	800e300 <f_mkfs+0xd08>
					return FR_MKFS_ABORTED;
 800e2de:	230e      	movs	r3, #14
 800e2e0:	e266      	b.n	800e7b0 <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e2e2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d112      	bne.n	800e310 <f_mkfs+0xd18>
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ec:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d90d      	bls.n	800e310 <f_mkfs+0xd18>
 800e2f4:	230e      	movs	r3, #14
 800e2f6:	e25b      	b.n	800e7b0 <f_mkfs+0x11b8>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e2f8:	bf00      	nop
 800e2fa:	e6a1      	b.n	800e040 <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e2fc:	bf00      	nop
 800e2fe:	e69f      	b.n	800e040 <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e300:	bf00      	nop
			pau = au;
 800e302:	e69d      	b.n	800e040 <f_mkfs+0xa48>
 800e304:	080133a8 	.word	0x080133a8
 800e308:	0ffffff5 	.word	0x0ffffff5
 800e30c:	080133b8 	.word	0x080133b8

			/* Ok, it is the valid cluster configuration */
			break;
 800e310:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e316:	461a      	mov	r2, r3
 800e318:	2100      	movs	r1, #0
 800e31a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e31c:	f7fa fe17 	bl	8008f4e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e320:	220b      	movs	r2, #11
 800e322:	49be      	ldr	r1, [pc, #760]	@ (800e61c <f_mkfs+0x1024>)
 800e324:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e326:	f7fa fdf1 	bl	8008f0c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e32c:	330b      	adds	r3, #11
 800e32e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e332:	4611      	mov	r1, r2
 800e334:	4618      	mov	r0, r3
 800e336:	f7fa fd1a 	bl	8008d6e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e33a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e33c:	330d      	adds	r3, #13
 800e33e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e348:	330e      	adds	r3, #14
 800e34a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e34e:	b292      	uxth	r2, r2
 800e350:	4611      	mov	r1, r2
 800e352:	4618      	mov	r0, r3
 800e354:	f7fa fd0b 	bl	8008d6e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e35a:	3310      	adds	r3, #16
 800e35c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e35e:	b2d2      	uxtb	r2, r2
 800e360:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e364:	f103 0211 	add.w	r2, r3, #17
 800e368:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d002      	beq.n	800e376 <f_mkfs+0xd7e>
 800e370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e372:	b29b      	uxth	r3, r3
 800e374:	e000      	b.n	800e378 <f_mkfs+0xd80>
 800e376:	2300      	movs	r3, #0
 800e378:	4619      	mov	r1, r3
 800e37a:	4610      	mov	r0, r2
 800e37c:	f7fa fcf7 	bl	8008d6e <st_word>
		if (sz_vol < 0x10000) {
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e386:	d208      	bcs.n	800e39a <f_mkfs+0xda2>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e38a:	3313      	adds	r3, #19
 800e38c:	69fa      	ldr	r2, [r7, #28]
 800e38e:	b292      	uxth	r2, r2
 800e390:	4611      	mov	r1, r2
 800e392:	4618      	mov	r0, r3
 800e394:	f7fa fceb 	bl	8008d6e <st_word>
 800e398:	e006      	b.n	800e3a8 <f_mkfs+0xdb0>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e39c:	3320      	adds	r3, #32
 800e39e:	69fa      	ldr	r2, [r7, #28]
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fa fcfe 	bl	8008da4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e3a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3aa:	3315      	adds	r3, #21
 800e3ac:	22f8      	movs	r2, #248	@ 0xf8
 800e3ae:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e3b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3b2:	3318      	adds	r3, #24
 800e3b4:	213f      	movs	r1, #63	@ 0x3f
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fa fcd9 	bl	8008d6e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e3bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3be:	331a      	adds	r3, #26
 800e3c0:	21ff      	movs	r1, #255	@ 0xff
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fa fcd3 	bl	8008d6e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e3c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3ca:	331c      	adds	r3, #28
 800e3cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fa fce8 	bl	8008da4 <st_dword>
		if (fmt == FS_FAT32) {
 800e3d4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e3d8:	2b03      	cmp	r3, #3
 800e3da:	d132      	bne.n	800e442 <f_mkfs+0xe4a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e3dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3de:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800e3e2:	f7fa fa37 	bl	8008854 <get_fattime>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f7fa fcda 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3f2:	3324      	adds	r3, #36	@ 0x24
 800e3f4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fa fcd3 	bl	8008da4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e400:	332c      	adds	r3, #44	@ 0x2c
 800e402:	2102      	movs	r1, #2
 800e404:	4618      	mov	r0, r3
 800e406:	f7fa fccd 	bl	8008da4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e40a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e40c:	3330      	adds	r3, #48	@ 0x30
 800e40e:	2101      	movs	r1, #1
 800e410:	4618      	mov	r0, r3
 800e412:	f7fa fcac 	bl	8008d6e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e418:	3332      	adds	r3, #50	@ 0x32
 800e41a:	2106      	movs	r1, #6
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fa fca6 	bl	8008d6e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e424:	3340      	adds	r3, #64	@ 0x40
 800e426:	2280      	movs	r2, #128	@ 0x80
 800e428:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e42c:	3342      	adds	r3, #66	@ 0x42
 800e42e:	2229      	movs	r2, #41	@ 0x29
 800e430:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e434:	3347      	adds	r3, #71	@ 0x47
 800e436:	2213      	movs	r2, #19
 800e438:	4979      	ldr	r1, [pc, #484]	@ (800e620 <f_mkfs+0x1028>)
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fa fd66 	bl	8008f0c <mem_cpy>
 800e440:	e021      	b.n	800e486 <f_mkfs+0xe8e>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e444:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800e448:	f7fa fa04 	bl	8008854 <get_fattime>
 800e44c:	4603      	mov	r3, r0
 800e44e:	4619      	mov	r1, r3
 800e450:	4620      	mov	r0, r4
 800e452:	f7fa fca7 	bl	8008da4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e458:	3316      	adds	r3, #22
 800e45a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e45e:	b292      	uxth	r2, r2
 800e460:	4611      	mov	r1, r2
 800e462:	4618      	mov	r0, r3
 800e464:	f7fa fc83 	bl	8008d6e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e46a:	3324      	adds	r3, #36	@ 0x24
 800e46c:	2280      	movs	r2, #128	@ 0x80
 800e46e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e472:	3326      	adds	r3, #38	@ 0x26
 800e474:	2229      	movs	r2, #41	@ 0x29
 800e476:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e47a:	332b      	adds	r3, #43	@ 0x2b
 800e47c:	2213      	movs	r2, #19
 800e47e:	4969      	ldr	r1, [pc, #420]	@ (800e624 <f_mkfs+0x102c>)
 800e480:	4618      	mov	r0, r3
 800e482:	f7fa fd43 	bl	8008f0c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e488:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e48c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e490:	4618      	mov	r0, r3
 800e492:	f7fa fc6c 	bl	8008d6e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e496:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e49a:	2301      	movs	r3, #1
 800e49c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e49e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4a0:	f7fa fb10 	bl	8008ac4 <disk_write>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <f_mkfs+0xeb6>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e180      	b.n	800e7b0 <f_mkfs+0x11b8>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e4ae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e4b2:	2b03      	cmp	r3, #3
 800e4b4:	d141      	bne.n	800e53a <f_mkfs+0xf42>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4b8:	1d9a      	adds	r2, r3, #6
 800e4ba:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e4be:	2301      	movs	r3, #1
 800e4c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4c2:	f7fa faff 	bl	8008ac4 <disk_write>
			mem_set(buf, 0, ss);
 800e4c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e4d0:	f7fa fd3d 	bl	8008f4e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e4d4:	4954      	ldr	r1, [pc, #336]	@ (800e628 <f_mkfs+0x1030>)
 800e4d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e4d8:	f7fa fc64 	bl	8008da4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e4dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e4e2:	4952      	ldr	r1, [pc, #328]	@ (800e62c <f_mkfs+0x1034>)
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fa fc5d 	bl	8008da4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e4ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4ec:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	f7fa fc54 	bl	8008da4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e4fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4fe:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e502:	2102      	movs	r1, #2
 800e504:	4618      	mov	r0, r3
 800e506:	f7fa fc4d 	bl	8008da4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e50a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e50c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e510:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e514:	4618      	mov	r0, r3
 800e516:	f7fa fc2a 	bl	8008d6e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e51c:	1dda      	adds	r2, r3, #7
 800e51e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e522:	2301      	movs	r3, #1
 800e524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e526:	f7fa facd 	bl	8008ac4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e52c:	1c5a      	adds	r2, r3, #1
 800e52e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e532:	2301      	movs	r3, #1
 800e534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e536:	f7fa fac5 	bl	8008ac4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e53a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e53c:	2100      	movs	r1, #0
 800e53e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e540:	f7fa fd05 	bl	8008f4e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e54c:	2300      	movs	r3, #0
 800e54e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e550:	e059      	b.n	800e606 <f_mkfs+0x100e>
			if (fmt == FS_FAT32) {
 800e552:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e556:	2b03      	cmp	r3, #3
 800e558:	d113      	bne.n	800e582 <f_mkfs+0xf8a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e55a:	f06f 0107 	mvn.w	r1, #7
 800e55e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e560:	f7fa fc20 	bl	8008da4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e566:	3304      	adds	r3, #4
 800e568:	f04f 31ff 	mov.w	r1, #4294967295
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fa fc19 	bl	8008da4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e574:	3308      	adds	r3, #8
 800e576:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fa fc12 	bl	8008da4 <st_dword>
 800e580:	e00b      	b.n	800e59a <f_mkfs+0xfa2>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e582:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e586:	2b01      	cmp	r3, #1
 800e588:	d101      	bne.n	800e58e <f_mkfs+0xf96>
 800e58a:	4b29      	ldr	r3, [pc, #164]	@ (800e630 <f_mkfs+0x1038>)
 800e58c:	e001      	b.n	800e592 <f_mkfs+0xf9a>
 800e58e:	f06f 0307 	mvn.w	r3, #7
 800e592:	4619      	mov	r1, r3
 800e594:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e596:	f7fa fc05 	bl	8008da4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e59a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e59e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e5a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	bf28      	it	cs
 800e5ac:	4613      	movcs	r3, r2
 800e5ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e5b2:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e5b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e5ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e5be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5c0:	f7fa fa80 	bl	8008ac4 <disk_write>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <f_mkfs+0xfd6>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e0f0      	b.n	800e7b0 <f_mkfs+0x11b8>
				mem_set(buf, 0, ss);
 800e5ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e5d8:	f7fa fcb9 	bl	8008f4e <mem_set>
				sect += n; nsect -= n;
 800e5dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e5e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e5e4:	4413      	add	r3, r2
 800e5e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e5ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e5ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			} while (nsect);
 800e5f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d1d0      	bne.n	800e5a2 <f_mkfs+0xfaa>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e602:	3301      	adds	r3, #1
 800e604:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e606:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d3a1      	bcc.n	800e552 <f_mkfs+0xf5a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e60e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e612:	2b03      	cmp	r3, #3
 800e614:	d10e      	bne.n	800e634 <f_mkfs+0x103c>
 800e616:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e61a:	e00c      	b.n	800e636 <f_mkfs+0x103e>
 800e61c:	0801331c 	.word	0x0801331c
 800e620:	08013328 	.word	0x08013328
 800e624:	0801333c 	.word	0x0801333c
 800e628:	41615252 	.word	0x41615252
 800e62c:	61417272 	.word	0x61417272
 800e630:	00fffff8 	.word	0x00fffff8
 800e634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e63a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e640:	4293      	cmp	r3, r2
 800e642:	bf28      	it	cs
 800e644:	4613      	movcs	r3, r2
 800e646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e64a:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e64e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e652:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e658:	f7fa fa34 	bl	8008ac4 <disk_write>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <f_mkfs+0x106e>
 800e662:	2301      	movs	r3, #1
 800e664:	e0a4      	b.n	800e7b0 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 800e666:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e66a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e66e:	4413      	add	r3, r2
 800e670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e674:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e678:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 800e682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e686:	2b00      	cmp	r3, #0
 800e688:	d1d7      	bne.n	800e63a <f_mkfs+0x1042>
	}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
 800e68a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e68e:	2b04      	cmp	r3, #4
 800e690:	d103      	bne.n	800e69a <f_mkfs+0x10a2>
		sys = 0x07;			/* HPFS/NTFS/exFAT */
 800e692:	2307      	movs	r3, #7
 800e694:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800e698:	e018      	b.n	800e6cc <f_mkfs+0x10d4>
	} else {
		if (fmt == FS_FAT32) {
 800e69a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e69e:	2b03      	cmp	r3, #3
 800e6a0:	d103      	bne.n	800e6aa <f_mkfs+0x10b2>
			sys = 0x0C;		/* FAT32X */
 800e6a2:	230c      	movs	r3, #12
 800e6a4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800e6a8:	e010      	b.n	800e6cc <f_mkfs+0x10d4>
		} else {
			if (sz_vol >= 0x10000) {
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6b0:	d303      	bcc.n	800e6ba <f_mkfs+0x10c2>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e6b2:	2306      	movs	r3, #6
 800e6b4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800e6b8:	e008      	b.n	800e6cc <f_mkfs+0x10d4>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e6ba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d101      	bne.n	800e6c6 <f_mkfs+0x10ce>
 800e6c2:	2304      	movs	r3, #4
 800e6c4:	e000      	b.n	800e6c8 <f_mkfs+0x10d0>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800e6cc:	7afb      	ldrb	r3, [r7, #11]
 800e6ce:	f003 0308 	and.w	r3, r3, #8
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d15f      	bne.n	800e796 <f_mkfs+0x119e>
			mem_set(buf, 0, ss);
 800e6d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e6da:	461a      	mov	r2, r3
 800e6dc:	2100      	movs	r1, #0
 800e6de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e6e0:	f7fa fc35 	bl	8008f4e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e6e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6e6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e6ea:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fa fb3d 	bl	8008d6e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800e6f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6f6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e6fa:	627b      	str	r3, [r7, #36]	@ 0x24
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fe:	2200      	movs	r2, #0
 800e700:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800e702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e704:	3301      	adds	r3, #1
 800e706:	2201      	movs	r2, #1
 800e708:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800e70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70c:	3302      	adds	r3, #2
 800e70e:	2201      	movs	r2, #1
 800e710:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800e712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e714:	3303      	adds	r3, #3
 800e716:	2200      	movs	r2, #0
 800e718:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71c:	3304      	adds	r3, #4
 800e71e:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800e722:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800e724:	69fa      	ldr	r2, [r7, #28]
 800e726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e728:	441a      	add	r2, r3
 800e72a:	4b23      	ldr	r3, [pc, #140]	@ (800e7b8 <f_mkfs+0x11c0>)
 800e72c:	fba3 1302 	umull	r1, r3, r3, r2
 800e730:	1ad2      	subs	r2, r2, r3
 800e732:	0852      	lsrs	r2, r2, #1
 800e734:	4413      	add	r3, r2
 800e736:	0b5b      	lsrs	r3, r3, #13
 800e738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			pte[PTE_EdHead] = 254;				/* End head */
 800e73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73e:	3305      	adds	r3, #5
 800e740:	22fe      	movs	r2, #254	@ 0xfe
 800e742:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800e744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e748:	089b      	lsrs	r3, r3, #2
 800e74a:	b2da      	uxtb	r2, r3
 800e74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74e:	3306      	adds	r3, #6
 800e750:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800e754:	b2d2      	uxtb	r2, r2
 800e756:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	3307      	adds	r3, #7
 800e75c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e760:	b2d2      	uxtb	r2, r2
 800e762:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800e764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e766:	3308      	adds	r3, #8
 800e768:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fa fb1a 	bl	8008da4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800e770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e772:	330c      	adds	r3, #12
 800e774:	69fa      	ldr	r2, [r7, #28]
 800e776:	4611      	mov	r1, r2
 800e778:	4618      	mov	r0, r3
 800e77a:	f7fa fb13 	bl	8008da4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e77e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 800e782:	2301      	movs	r3, #1
 800e784:	2200      	movs	r2, #0
 800e786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e788:	f7fa f99c 	bl	8008ac4 <disk_write>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <f_mkfs+0x119e>
 800e792:	2301      	movs	r3, #1
 800e794:	e00c      	b.n	800e7b0 <f_mkfs+0x11b8>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800e796:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800e79a:	2200      	movs	r2, #0
 800e79c:	2100      	movs	r1, #0
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fa f9b0 	bl	8008b04 <disk_ioctl>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d001      	beq.n	800e7ae <f_mkfs+0x11b6>
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	e000      	b.n	800e7b0 <f_mkfs+0x11b8>

	return FR_OK;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	37a4      	adds	r7, #164	@ 0xa4
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd90      	pop	{r4, r7, pc}
 800e7b8:	0515565b 	.word	0x0515565b

0800e7bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b087      	sub	sp, #28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7d2:	4b1f      	ldr	r3, [pc, #124]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e7d4:	7a5b      	ldrb	r3, [r3, #9]
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d131      	bne.n	800e840 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e7dc:	4b1c      	ldr	r3, [pc, #112]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e7de:	7a5b      	ldrb	r3, [r3, #9]
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	4b1a      	ldr	r3, [pc, #104]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e7ea:	4b19      	ldr	r3, [pc, #100]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e7ec:	7a5b      	ldrb	r3, [r3, #9]
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	4a17      	ldr	r2, [pc, #92]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4413      	add	r3, r2
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e7fa:	4b15      	ldr	r3, [pc, #84]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e7fc:	7a5b      	ldrb	r3, [r3, #9]
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	461a      	mov	r2, r3
 800e802:	4b13      	ldr	r3, [pc, #76]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e804:	4413      	add	r3, r2
 800e806:	79fa      	ldrb	r2, [r7, #7]
 800e808:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e80a:	4b11      	ldr	r3, [pc, #68]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e80c:	7a5b      	ldrb	r3, [r3, #9]
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	b2d1      	uxtb	r1, r2
 800e814:	4a0e      	ldr	r2, [pc, #56]	@ (800e850 <FATFS_LinkDriverEx+0x94>)
 800e816:	7251      	strb	r1, [r2, #9]
 800e818:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e81a:	7dbb      	ldrb	r3, [r7, #22]
 800e81c:	3330      	adds	r3, #48	@ 0x30
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	3301      	adds	r3, #1
 800e828:	223a      	movs	r2, #58	@ 0x3a
 800e82a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	3302      	adds	r3, #2
 800e830:	222f      	movs	r2, #47	@ 0x2f
 800e832:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	3303      	adds	r3, #3
 800e838:	2200      	movs	r2, #0
 800e83a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e83c:	2300      	movs	r3, #0
 800e83e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e840:	7dfb      	ldrb	r3, [r7, #23]
}
 800e842:	4618      	mov	r0, r3
 800e844:	371c      	adds	r7, #28
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	2000123c 	.word	0x2000123c

0800e854 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e85e:	2200      	movs	r2, #0
 800e860:	6839      	ldr	r1, [r7, #0]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff ffaa 	bl	800e7bc <FATFS_LinkDriverEx>
 800e868:	4603      	mov	r3, r0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e874:	b480      	push	{r7}
 800e876:	b089      	sub	sp, #36	@ 0x24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	6039      	str	r1, [r7, #0]
 800e87e:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800e880:	88fb      	ldrh	r3, [r7, #6]
 800e882:	2b7f      	cmp	r3, #127	@ 0x7f
 800e884:	d802      	bhi.n	800e88c <ff_convert+0x18>
		c = chr;
 800e886:	88fb      	ldrh	r3, [r7, #6]
 800e888:	837b      	strh	r3, [r7, #26]
 800e88a:	e045      	b.n	800e918 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d005      	beq.n	800e89e <ff_convert+0x2a>
			p = oem2uni;
 800e892:	4b25      	ldr	r3, [pc, #148]	@ (800e928 <ff_convert+0xb4>)
 800e894:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800e896:	f245 5320 	movw	r3, #21792	@ 0x5520
 800e89a:	60bb      	str	r3, [r7, #8]
 800e89c:	e004      	b.n	800e8a8 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800e89e:	4b23      	ldr	r3, [pc, #140]	@ (800e92c <ff_convert+0xb8>)
 800e8a0:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800e8a2:	f245 5320 	movw	r3, #21792	@ 0x5520
 800e8a6:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800e8ac:	2310      	movs	r3, #16
 800e8ae:	613b      	str	r3, [r7, #16]
 800e8b0:	e021      	b.n	800e8f6 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	1ad3      	subs	r3, r2, r3
 800e8b8:	0fda      	lsrs	r2, r3, #31
 800e8ba:	4413      	add	r3, r2
 800e8bc:	105b      	asrs	r3, r3, #1
 800e8be:	461a      	mov	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	69fa      	ldr	r2, [r7, #28]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	88fa      	ldrh	r2, [r7, #6]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d013      	beq.n	800e8fe <ff_convert+0x8a>
			if (chr > p[i * 2])
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	69fa      	ldr	r2, [r7, #28]
 800e8dc:	4413      	add	r3, r2
 800e8de:	881b      	ldrh	r3, [r3, #0]
 800e8e0:	88fa      	ldrh	r2, [r7, #6]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d902      	bls.n	800e8ec <ff_convert+0x78>
				li = i;
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	60fb      	str	r3, [r7, #12]
 800e8ea:	e001      	b.n	800e8f0 <ff_convert+0x7c>
			else
				hi = i;
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	3b01      	subs	r3, #1
 800e8f4:	613b      	str	r3, [r7, #16]
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1da      	bne.n	800e8b2 <ff_convert+0x3e>
 800e8fc:	e000      	b.n	800e900 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800e8fe:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d006      	beq.n	800e914 <ff_convert+0xa0>
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	3302      	adds	r3, #2
 800e90c:	69fa      	ldr	r2, [r7, #28]
 800e90e:	4413      	add	r3, r2
 800e910:	881b      	ldrh	r3, [r3, #0]
 800e912:	e000      	b.n	800e916 <ff_convert+0xa2>
 800e914:	2300      	movs	r3, #0
 800e916:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800e918:	8b7b      	ldrh	r3, [r7, #26]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3724      	adds	r7, #36	@ 0x24
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	0802884c 	.word	0x0802884c
 800e92c:	080133c8 	.word	0x080133c8

0800e930 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e930:	b480      	push	{r7}
 800e932:	b087      	sub	sp, #28
 800e934:	af00      	add	r7, sp, #0
 800e936:	4603      	mov	r3, r0
 800e938:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e93a:	88fb      	ldrh	r3, [r7, #6]
 800e93c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e940:	d201      	bcs.n	800e946 <ff_wtoupper+0x16>
 800e942:	4b3e      	ldr	r3, [pc, #248]	@ (800ea3c <ff_wtoupper+0x10c>)
 800e944:	e000      	b.n	800e948 <ff_wtoupper+0x18>
 800e946:	4b3e      	ldr	r3, [pc, #248]	@ (800ea40 <ff_wtoupper+0x110>)
 800e948:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	1c9a      	adds	r2, r3, #2
 800e94e:	617a      	str	r2, [r7, #20]
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e954:	8a7b      	ldrh	r3, [r7, #18]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d068      	beq.n	800ea2c <ff_wtoupper+0xfc>
 800e95a:	88fa      	ldrh	r2, [r7, #6]
 800e95c:	8a7b      	ldrh	r3, [r7, #18]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d364      	bcc.n	800ea2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	1c9a      	adds	r2, r3, #2
 800e966:	617a      	str	r2, [r7, #20]
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	823b      	strh	r3, [r7, #16]
 800e96c:	8a3b      	ldrh	r3, [r7, #16]
 800e96e:	0a1b      	lsrs	r3, r3, #8
 800e970:	81fb      	strh	r3, [r7, #14]
 800e972:	8a3b      	ldrh	r3, [r7, #16]
 800e974:	b2db      	uxtb	r3, r3
 800e976:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e978:	88fa      	ldrh	r2, [r7, #6]
 800e97a:	8a79      	ldrh	r1, [r7, #18]
 800e97c:	8a3b      	ldrh	r3, [r7, #16]
 800e97e:	440b      	add	r3, r1
 800e980:	429a      	cmp	r2, r3
 800e982:	da49      	bge.n	800ea18 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e984:	89fb      	ldrh	r3, [r7, #14]
 800e986:	2b08      	cmp	r3, #8
 800e988:	d84f      	bhi.n	800ea2a <ff_wtoupper+0xfa>
 800e98a:	a201      	add	r2, pc, #4	@ (adr r2, 800e990 <ff_wtoupper+0x60>)
 800e98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e990:	0800e9b5 	.word	0x0800e9b5
 800e994:	0800e9c7 	.word	0x0800e9c7
 800e998:	0800e9dd 	.word	0x0800e9dd
 800e99c:	0800e9e5 	.word	0x0800e9e5
 800e9a0:	0800e9ed 	.word	0x0800e9ed
 800e9a4:	0800e9f5 	.word	0x0800e9f5
 800e9a8:	0800e9fd 	.word	0x0800e9fd
 800e9ac:	0800ea05 	.word	0x0800ea05
 800e9b0:	0800ea0d 	.word	0x0800ea0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e9b4:	88fa      	ldrh	r2, [r7, #6]
 800e9b6:	8a7b      	ldrh	r3, [r7, #18]
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	005b      	lsls	r3, r3, #1
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	4413      	add	r3, r2
 800e9c0:	881b      	ldrh	r3, [r3, #0]
 800e9c2:	80fb      	strh	r3, [r7, #6]
 800e9c4:	e027      	b.n	800ea16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e9c6:	88fa      	ldrh	r2, [r7, #6]
 800e9c8:	8a7b      	ldrh	r3, [r7, #18]
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	88fa      	ldrh	r2, [r7, #6]
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	80fb      	strh	r3, [r7, #6]
 800e9da:	e01c      	b.n	800ea16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e9dc:	88fb      	ldrh	r3, [r7, #6]
 800e9de:	3b10      	subs	r3, #16
 800e9e0:	80fb      	strh	r3, [r7, #6]
 800e9e2:	e018      	b.n	800ea16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e9e4:	88fb      	ldrh	r3, [r7, #6]
 800e9e6:	3b20      	subs	r3, #32
 800e9e8:	80fb      	strh	r3, [r7, #6]
 800e9ea:	e014      	b.n	800ea16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e9ec:	88fb      	ldrh	r3, [r7, #6]
 800e9ee:	3b30      	subs	r3, #48	@ 0x30
 800e9f0:	80fb      	strh	r3, [r7, #6]
 800e9f2:	e010      	b.n	800ea16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e9f4:	88fb      	ldrh	r3, [r7, #6]
 800e9f6:	3b1a      	subs	r3, #26
 800e9f8:	80fb      	strh	r3, [r7, #6]
 800e9fa:	e00c      	b.n	800ea16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e9fc:	88fb      	ldrh	r3, [r7, #6]
 800e9fe:	3308      	adds	r3, #8
 800ea00:	80fb      	strh	r3, [r7, #6]
 800ea02:	e008      	b.n	800ea16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ea04:	88fb      	ldrh	r3, [r7, #6]
 800ea06:	3b50      	subs	r3, #80	@ 0x50
 800ea08:	80fb      	strh	r3, [r7, #6]
 800ea0a:	e004      	b.n	800ea16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ea0c:	88fb      	ldrh	r3, [r7, #6]
 800ea0e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ea12:	80fb      	strh	r3, [r7, #6]
 800ea14:	bf00      	nop
			}
			break;
 800ea16:	e008      	b.n	800ea2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ea18:	89fb      	ldrh	r3, [r7, #14]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d195      	bne.n	800e94a <ff_wtoupper+0x1a>
 800ea1e:	8a3b      	ldrh	r3, [r7, #16]
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	697a      	ldr	r2, [r7, #20]
 800ea24:	4413      	add	r3, r2
 800ea26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ea28:	e78f      	b.n	800e94a <ff_wtoupper+0x1a>
			break;
 800ea2a:	bf00      	nop
	}

	return chr;
 800ea2c:	88fb      	ldrh	r3, [r7, #6]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	371c      	adds	r7, #28
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	0803dcd0 	.word	0x0803dcd0
 800ea40:	0803dec4 	.word	0x0803dec4

0800ea44 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 f815 	bl	800ea7c <malloc>
 800ea52:	4603      	mov	r3, r0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 f811 	bl	800ea8c <free>
}
 800ea6a:	bf00      	nop
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <atoi>:
 800ea72:	220a      	movs	r2, #10
 800ea74:	2100      	movs	r1, #0
 800ea76:	f000 b93b 	b.w	800ecf0 <strtol>
	...

0800ea7c <malloc>:
 800ea7c:	4b02      	ldr	r3, [pc, #8]	@ (800ea88 <malloc+0xc>)
 800ea7e:	4601      	mov	r1, r0
 800ea80:	6818      	ldr	r0, [r3, #0]
 800ea82:	f000 b82d 	b.w	800eae0 <_malloc_r>
 800ea86:	bf00      	nop
 800ea88:	20000060 	.word	0x20000060

0800ea8c <free>:
 800ea8c:	4b02      	ldr	r3, [pc, #8]	@ (800ea98 <free+0xc>)
 800ea8e:	4601      	mov	r1, r0
 800ea90:	6818      	ldr	r0, [r3, #0]
 800ea92:	f002 b839 	b.w	8010b08 <_free_r>
 800ea96:	bf00      	nop
 800ea98:	20000060 	.word	0x20000060

0800ea9c <sbrk_aligned>:
 800ea9c:	b570      	push	{r4, r5, r6, lr}
 800ea9e:	4e0f      	ldr	r6, [pc, #60]	@ (800eadc <sbrk_aligned+0x40>)
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	6831      	ldr	r1, [r6, #0]
 800eaa4:	4605      	mov	r5, r0
 800eaa6:	b911      	cbnz	r1, 800eaae <sbrk_aligned+0x12>
 800eaa8:	f001 f970 	bl	800fd8c <_sbrk_r>
 800eaac:	6030      	str	r0, [r6, #0]
 800eaae:	4621      	mov	r1, r4
 800eab0:	4628      	mov	r0, r5
 800eab2:	f001 f96b 	bl	800fd8c <_sbrk_r>
 800eab6:	1c43      	adds	r3, r0, #1
 800eab8:	d103      	bne.n	800eac2 <sbrk_aligned+0x26>
 800eaba:	f04f 34ff 	mov.w	r4, #4294967295
 800eabe:	4620      	mov	r0, r4
 800eac0:	bd70      	pop	{r4, r5, r6, pc}
 800eac2:	1cc4      	adds	r4, r0, #3
 800eac4:	f024 0403 	bic.w	r4, r4, #3
 800eac8:	42a0      	cmp	r0, r4
 800eaca:	d0f8      	beq.n	800eabe <sbrk_aligned+0x22>
 800eacc:	1a21      	subs	r1, r4, r0
 800eace:	4628      	mov	r0, r5
 800ead0:	f001 f95c 	bl	800fd8c <_sbrk_r>
 800ead4:	3001      	adds	r0, #1
 800ead6:	d1f2      	bne.n	800eabe <sbrk_aligned+0x22>
 800ead8:	e7ef      	b.n	800eaba <sbrk_aligned+0x1e>
 800eada:	bf00      	nop
 800eadc:	20001248 	.word	0x20001248

0800eae0 <_malloc_r>:
 800eae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eae4:	1ccd      	adds	r5, r1, #3
 800eae6:	f025 0503 	bic.w	r5, r5, #3
 800eaea:	3508      	adds	r5, #8
 800eaec:	2d0c      	cmp	r5, #12
 800eaee:	bf38      	it	cc
 800eaf0:	250c      	movcc	r5, #12
 800eaf2:	2d00      	cmp	r5, #0
 800eaf4:	4606      	mov	r6, r0
 800eaf6:	db01      	blt.n	800eafc <_malloc_r+0x1c>
 800eaf8:	42a9      	cmp	r1, r5
 800eafa:	d904      	bls.n	800eb06 <_malloc_r+0x26>
 800eafc:	230c      	movs	r3, #12
 800eafe:	6033      	str	r3, [r6, #0]
 800eb00:	2000      	movs	r0, #0
 800eb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ebdc <_malloc_r+0xfc>
 800eb0a:	f000 f869 	bl	800ebe0 <__malloc_lock>
 800eb0e:	f8d8 3000 	ldr.w	r3, [r8]
 800eb12:	461c      	mov	r4, r3
 800eb14:	bb44      	cbnz	r4, 800eb68 <_malloc_r+0x88>
 800eb16:	4629      	mov	r1, r5
 800eb18:	4630      	mov	r0, r6
 800eb1a:	f7ff ffbf 	bl	800ea9c <sbrk_aligned>
 800eb1e:	1c43      	adds	r3, r0, #1
 800eb20:	4604      	mov	r4, r0
 800eb22:	d158      	bne.n	800ebd6 <_malloc_r+0xf6>
 800eb24:	f8d8 4000 	ldr.w	r4, [r8]
 800eb28:	4627      	mov	r7, r4
 800eb2a:	2f00      	cmp	r7, #0
 800eb2c:	d143      	bne.n	800ebb6 <_malloc_r+0xd6>
 800eb2e:	2c00      	cmp	r4, #0
 800eb30:	d04b      	beq.n	800ebca <_malloc_r+0xea>
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	4639      	mov	r1, r7
 800eb36:	4630      	mov	r0, r6
 800eb38:	eb04 0903 	add.w	r9, r4, r3
 800eb3c:	f001 f926 	bl	800fd8c <_sbrk_r>
 800eb40:	4581      	cmp	r9, r0
 800eb42:	d142      	bne.n	800ebca <_malloc_r+0xea>
 800eb44:	6821      	ldr	r1, [r4, #0]
 800eb46:	1a6d      	subs	r5, r5, r1
 800eb48:	4629      	mov	r1, r5
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	f7ff ffa6 	bl	800ea9c <sbrk_aligned>
 800eb50:	3001      	adds	r0, #1
 800eb52:	d03a      	beq.n	800ebca <_malloc_r+0xea>
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	442b      	add	r3, r5
 800eb58:	6023      	str	r3, [r4, #0]
 800eb5a:	f8d8 3000 	ldr.w	r3, [r8]
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	bb62      	cbnz	r2, 800ebbc <_malloc_r+0xdc>
 800eb62:	f8c8 7000 	str.w	r7, [r8]
 800eb66:	e00f      	b.n	800eb88 <_malloc_r+0xa8>
 800eb68:	6822      	ldr	r2, [r4, #0]
 800eb6a:	1b52      	subs	r2, r2, r5
 800eb6c:	d420      	bmi.n	800ebb0 <_malloc_r+0xd0>
 800eb6e:	2a0b      	cmp	r2, #11
 800eb70:	d917      	bls.n	800eba2 <_malloc_r+0xc2>
 800eb72:	1961      	adds	r1, r4, r5
 800eb74:	42a3      	cmp	r3, r4
 800eb76:	6025      	str	r5, [r4, #0]
 800eb78:	bf18      	it	ne
 800eb7a:	6059      	strne	r1, [r3, #4]
 800eb7c:	6863      	ldr	r3, [r4, #4]
 800eb7e:	bf08      	it	eq
 800eb80:	f8c8 1000 	streq.w	r1, [r8]
 800eb84:	5162      	str	r2, [r4, r5]
 800eb86:	604b      	str	r3, [r1, #4]
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f000 f82f 	bl	800ebec <__malloc_unlock>
 800eb8e:	f104 000b 	add.w	r0, r4, #11
 800eb92:	1d23      	adds	r3, r4, #4
 800eb94:	f020 0007 	bic.w	r0, r0, #7
 800eb98:	1ac2      	subs	r2, r0, r3
 800eb9a:	bf1c      	itt	ne
 800eb9c:	1a1b      	subne	r3, r3, r0
 800eb9e:	50a3      	strne	r3, [r4, r2]
 800eba0:	e7af      	b.n	800eb02 <_malloc_r+0x22>
 800eba2:	6862      	ldr	r2, [r4, #4]
 800eba4:	42a3      	cmp	r3, r4
 800eba6:	bf0c      	ite	eq
 800eba8:	f8c8 2000 	streq.w	r2, [r8]
 800ebac:	605a      	strne	r2, [r3, #4]
 800ebae:	e7eb      	b.n	800eb88 <_malloc_r+0xa8>
 800ebb0:	4623      	mov	r3, r4
 800ebb2:	6864      	ldr	r4, [r4, #4]
 800ebb4:	e7ae      	b.n	800eb14 <_malloc_r+0x34>
 800ebb6:	463c      	mov	r4, r7
 800ebb8:	687f      	ldr	r7, [r7, #4]
 800ebba:	e7b6      	b.n	800eb2a <_malloc_r+0x4a>
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	42a3      	cmp	r3, r4
 800ebc2:	d1fb      	bne.n	800ebbc <_malloc_r+0xdc>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	6053      	str	r3, [r2, #4]
 800ebc8:	e7de      	b.n	800eb88 <_malloc_r+0xa8>
 800ebca:	230c      	movs	r3, #12
 800ebcc:	6033      	str	r3, [r6, #0]
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f000 f80c 	bl	800ebec <__malloc_unlock>
 800ebd4:	e794      	b.n	800eb00 <_malloc_r+0x20>
 800ebd6:	6005      	str	r5, [r0, #0]
 800ebd8:	e7d6      	b.n	800eb88 <_malloc_r+0xa8>
 800ebda:	bf00      	nop
 800ebdc:	2000124c 	.word	0x2000124c

0800ebe0 <__malloc_lock>:
 800ebe0:	4801      	ldr	r0, [pc, #4]	@ (800ebe8 <__malloc_lock+0x8>)
 800ebe2:	f001 b920 	b.w	800fe26 <__retarget_lock_acquire_recursive>
 800ebe6:	bf00      	nop
 800ebe8:	20001390 	.word	0x20001390

0800ebec <__malloc_unlock>:
 800ebec:	4801      	ldr	r0, [pc, #4]	@ (800ebf4 <__malloc_unlock+0x8>)
 800ebee:	f001 b91b 	b.w	800fe28 <__retarget_lock_release_recursive>
 800ebf2:	bf00      	nop
 800ebf4:	20001390 	.word	0x20001390

0800ebf8 <_strtol_l.isra.0>:
 800ebf8:	2b24      	cmp	r3, #36	@ 0x24
 800ebfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebfe:	4686      	mov	lr, r0
 800ec00:	4690      	mov	r8, r2
 800ec02:	d801      	bhi.n	800ec08 <_strtol_l.isra.0+0x10>
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d106      	bne.n	800ec16 <_strtol_l.isra.0+0x1e>
 800ec08:	f001 f8e2 	bl	800fdd0 <__errno>
 800ec0c:	2316      	movs	r3, #22
 800ec0e:	6003      	str	r3, [r0, #0]
 800ec10:	2000      	movs	r0, #0
 800ec12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec16:	4834      	ldr	r0, [pc, #208]	@ (800ece8 <_strtol_l.isra.0+0xf0>)
 800ec18:	460d      	mov	r5, r1
 800ec1a:	462a      	mov	r2, r5
 800ec1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec20:	5d06      	ldrb	r6, [r0, r4]
 800ec22:	f016 0608 	ands.w	r6, r6, #8
 800ec26:	d1f8      	bne.n	800ec1a <_strtol_l.isra.0+0x22>
 800ec28:	2c2d      	cmp	r4, #45	@ 0x2d
 800ec2a:	d110      	bne.n	800ec4e <_strtol_l.isra.0+0x56>
 800ec2c:	782c      	ldrb	r4, [r5, #0]
 800ec2e:	2601      	movs	r6, #1
 800ec30:	1c95      	adds	r5, r2, #2
 800ec32:	f033 0210 	bics.w	r2, r3, #16
 800ec36:	d115      	bne.n	800ec64 <_strtol_l.isra.0+0x6c>
 800ec38:	2c30      	cmp	r4, #48	@ 0x30
 800ec3a:	d10d      	bne.n	800ec58 <_strtol_l.isra.0+0x60>
 800ec3c:	782a      	ldrb	r2, [r5, #0]
 800ec3e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec42:	2a58      	cmp	r2, #88	@ 0x58
 800ec44:	d108      	bne.n	800ec58 <_strtol_l.isra.0+0x60>
 800ec46:	786c      	ldrb	r4, [r5, #1]
 800ec48:	3502      	adds	r5, #2
 800ec4a:	2310      	movs	r3, #16
 800ec4c:	e00a      	b.n	800ec64 <_strtol_l.isra.0+0x6c>
 800ec4e:	2c2b      	cmp	r4, #43	@ 0x2b
 800ec50:	bf04      	itt	eq
 800ec52:	782c      	ldrbeq	r4, [r5, #0]
 800ec54:	1c95      	addeq	r5, r2, #2
 800ec56:	e7ec      	b.n	800ec32 <_strtol_l.isra.0+0x3a>
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1f6      	bne.n	800ec4a <_strtol_l.isra.0+0x52>
 800ec5c:	2c30      	cmp	r4, #48	@ 0x30
 800ec5e:	bf14      	ite	ne
 800ec60:	230a      	movne	r3, #10
 800ec62:	2308      	moveq	r3, #8
 800ec64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ec68:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	fbbc f9f3 	udiv	r9, ip, r3
 800ec72:	4610      	mov	r0, r2
 800ec74:	fb03 ca19 	mls	sl, r3, r9, ip
 800ec78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ec7c:	2f09      	cmp	r7, #9
 800ec7e:	d80f      	bhi.n	800eca0 <_strtol_l.isra.0+0xa8>
 800ec80:	463c      	mov	r4, r7
 800ec82:	42a3      	cmp	r3, r4
 800ec84:	dd1b      	ble.n	800ecbe <_strtol_l.isra.0+0xc6>
 800ec86:	1c57      	adds	r7, r2, #1
 800ec88:	d007      	beq.n	800ec9a <_strtol_l.isra.0+0xa2>
 800ec8a:	4581      	cmp	r9, r0
 800ec8c:	d314      	bcc.n	800ecb8 <_strtol_l.isra.0+0xc0>
 800ec8e:	d101      	bne.n	800ec94 <_strtol_l.isra.0+0x9c>
 800ec90:	45a2      	cmp	sl, r4
 800ec92:	db11      	blt.n	800ecb8 <_strtol_l.isra.0+0xc0>
 800ec94:	fb00 4003 	mla	r0, r0, r3, r4
 800ec98:	2201      	movs	r2, #1
 800ec9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec9e:	e7eb      	b.n	800ec78 <_strtol_l.isra.0+0x80>
 800eca0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eca4:	2f19      	cmp	r7, #25
 800eca6:	d801      	bhi.n	800ecac <_strtol_l.isra.0+0xb4>
 800eca8:	3c37      	subs	r4, #55	@ 0x37
 800ecaa:	e7ea      	b.n	800ec82 <_strtol_l.isra.0+0x8a>
 800ecac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ecb0:	2f19      	cmp	r7, #25
 800ecb2:	d804      	bhi.n	800ecbe <_strtol_l.isra.0+0xc6>
 800ecb4:	3c57      	subs	r4, #87	@ 0x57
 800ecb6:	e7e4      	b.n	800ec82 <_strtol_l.isra.0+0x8a>
 800ecb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ecbc:	e7ed      	b.n	800ec9a <_strtol_l.isra.0+0xa2>
 800ecbe:	1c53      	adds	r3, r2, #1
 800ecc0:	d108      	bne.n	800ecd4 <_strtol_l.isra.0+0xdc>
 800ecc2:	2322      	movs	r3, #34	@ 0x22
 800ecc4:	f8ce 3000 	str.w	r3, [lr]
 800ecc8:	4660      	mov	r0, ip
 800ecca:	f1b8 0f00 	cmp.w	r8, #0
 800ecce:	d0a0      	beq.n	800ec12 <_strtol_l.isra.0+0x1a>
 800ecd0:	1e69      	subs	r1, r5, #1
 800ecd2:	e006      	b.n	800ece2 <_strtol_l.isra.0+0xea>
 800ecd4:	b106      	cbz	r6, 800ecd8 <_strtol_l.isra.0+0xe0>
 800ecd6:	4240      	negs	r0, r0
 800ecd8:	f1b8 0f00 	cmp.w	r8, #0
 800ecdc:	d099      	beq.n	800ec12 <_strtol_l.isra.0+0x1a>
 800ecde:	2a00      	cmp	r2, #0
 800ece0:	d1f6      	bne.n	800ecd0 <_strtol_l.isra.0+0xd8>
 800ece2:	f8c8 1000 	str.w	r1, [r8]
 800ece6:	e794      	b.n	800ec12 <_strtol_l.isra.0+0x1a>
 800ece8:	0803df81 	.word	0x0803df81

0800ecec <_strtol_r>:
 800ecec:	f7ff bf84 	b.w	800ebf8 <_strtol_l.isra.0>

0800ecf0 <strtol>:
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	460a      	mov	r2, r1
 800ecf4:	4601      	mov	r1, r0
 800ecf6:	4802      	ldr	r0, [pc, #8]	@ (800ed00 <strtol+0x10>)
 800ecf8:	6800      	ldr	r0, [r0, #0]
 800ecfa:	f7ff bf7d 	b.w	800ebf8 <_strtol_l.isra.0>
 800ecfe:	bf00      	nop
 800ed00:	20000060 	.word	0x20000060

0800ed04 <__cvt>:
 800ed04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed08:	ec57 6b10 	vmov	r6, r7, d0
 800ed0c:	2f00      	cmp	r7, #0
 800ed0e:	460c      	mov	r4, r1
 800ed10:	4619      	mov	r1, r3
 800ed12:	463b      	mov	r3, r7
 800ed14:	bfbb      	ittet	lt
 800ed16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ed1a:	461f      	movlt	r7, r3
 800ed1c:	2300      	movge	r3, #0
 800ed1e:	232d      	movlt	r3, #45	@ 0x2d
 800ed20:	700b      	strb	r3, [r1, #0]
 800ed22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ed28:	4691      	mov	r9, r2
 800ed2a:	f023 0820 	bic.w	r8, r3, #32
 800ed2e:	bfbc      	itt	lt
 800ed30:	4632      	movlt	r2, r6
 800ed32:	4616      	movlt	r6, r2
 800ed34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ed38:	d005      	beq.n	800ed46 <__cvt+0x42>
 800ed3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ed3e:	d100      	bne.n	800ed42 <__cvt+0x3e>
 800ed40:	3401      	adds	r4, #1
 800ed42:	2102      	movs	r1, #2
 800ed44:	e000      	b.n	800ed48 <__cvt+0x44>
 800ed46:	2103      	movs	r1, #3
 800ed48:	ab03      	add	r3, sp, #12
 800ed4a:	9301      	str	r3, [sp, #4]
 800ed4c:	ab02      	add	r3, sp, #8
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	ec47 6b10 	vmov	d0, r6, r7
 800ed54:	4653      	mov	r3, sl
 800ed56:	4622      	mov	r2, r4
 800ed58:	f001 f906 	bl	800ff68 <_dtoa_r>
 800ed5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ed60:	4605      	mov	r5, r0
 800ed62:	d119      	bne.n	800ed98 <__cvt+0x94>
 800ed64:	f019 0f01 	tst.w	r9, #1
 800ed68:	d00e      	beq.n	800ed88 <__cvt+0x84>
 800ed6a:	eb00 0904 	add.w	r9, r0, r4
 800ed6e:	2200      	movs	r2, #0
 800ed70:	2300      	movs	r3, #0
 800ed72:	4630      	mov	r0, r6
 800ed74:	4639      	mov	r1, r7
 800ed76:	f7f1 feb7 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed7a:	b108      	cbz	r0, 800ed80 <__cvt+0x7c>
 800ed7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed80:	2230      	movs	r2, #48	@ 0x30
 800ed82:	9b03      	ldr	r3, [sp, #12]
 800ed84:	454b      	cmp	r3, r9
 800ed86:	d31e      	bcc.n	800edc6 <__cvt+0xc2>
 800ed88:	9b03      	ldr	r3, [sp, #12]
 800ed8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed8c:	1b5b      	subs	r3, r3, r5
 800ed8e:	4628      	mov	r0, r5
 800ed90:	6013      	str	r3, [r2, #0]
 800ed92:	b004      	add	sp, #16
 800ed94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ed9c:	eb00 0904 	add.w	r9, r0, r4
 800eda0:	d1e5      	bne.n	800ed6e <__cvt+0x6a>
 800eda2:	7803      	ldrb	r3, [r0, #0]
 800eda4:	2b30      	cmp	r3, #48	@ 0x30
 800eda6:	d10a      	bne.n	800edbe <__cvt+0xba>
 800eda8:	2200      	movs	r2, #0
 800edaa:	2300      	movs	r3, #0
 800edac:	4630      	mov	r0, r6
 800edae:	4639      	mov	r1, r7
 800edb0:	f7f1 fe9a 	bl	8000ae8 <__aeabi_dcmpeq>
 800edb4:	b918      	cbnz	r0, 800edbe <__cvt+0xba>
 800edb6:	f1c4 0401 	rsb	r4, r4, #1
 800edba:	f8ca 4000 	str.w	r4, [sl]
 800edbe:	f8da 3000 	ldr.w	r3, [sl]
 800edc2:	4499      	add	r9, r3
 800edc4:	e7d3      	b.n	800ed6e <__cvt+0x6a>
 800edc6:	1c59      	adds	r1, r3, #1
 800edc8:	9103      	str	r1, [sp, #12]
 800edca:	701a      	strb	r2, [r3, #0]
 800edcc:	e7d9      	b.n	800ed82 <__cvt+0x7e>

0800edce <__exponent>:
 800edce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edd0:	2900      	cmp	r1, #0
 800edd2:	bfba      	itte	lt
 800edd4:	4249      	neglt	r1, r1
 800edd6:	232d      	movlt	r3, #45	@ 0x2d
 800edd8:	232b      	movge	r3, #43	@ 0x2b
 800edda:	2909      	cmp	r1, #9
 800eddc:	7002      	strb	r2, [r0, #0]
 800edde:	7043      	strb	r3, [r0, #1]
 800ede0:	dd29      	ble.n	800ee36 <__exponent+0x68>
 800ede2:	f10d 0307 	add.w	r3, sp, #7
 800ede6:	461d      	mov	r5, r3
 800ede8:	270a      	movs	r7, #10
 800edea:	461a      	mov	r2, r3
 800edec:	fbb1 f6f7 	udiv	r6, r1, r7
 800edf0:	fb07 1416 	mls	r4, r7, r6, r1
 800edf4:	3430      	adds	r4, #48	@ 0x30
 800edf6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800edfa:	460c      	mov	r4, r1
 800edfc:	2c63      	cmp	r4, #99	@ 0x63
 800edfe:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee02:	4631      	mov	r1, r6
 800ee04:	dcf1      	bgt.n	800edea <__exponent+0x1c>
 800ee06:	3130      	adds	r1, #48	@ 0x30
 800ee08:	1e94      	subs	r4, r2, #2
 800ee0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee0e:	1c41      	adds	r1, r0, #1
 800ee10:	4623      	mov	r3, r4
 800ee12:	42ab      	cmp	r3, r5
 800ee14:	d30a      	bcc.n	800ee2c <__exponent+0x5e>
 800ee16:	f10d 0309 	add.w	r3, sp, #9
 800ee1a:	1a9b      	subs	r3, r3, r2
 800ee1c:	42ac      	cmp	r4, r5
 800ee1e:	bf88      	it	hi
 800ee20:	2300      	movhi	r3, #0
 800ee22:	3302      	adds	r3, #2
 800ee24:	4403      	add	r3, r0
 800ee26:	1a18      	subs	r0, r3, r0
 800ee28:	b003      	add	sp, #12
 800ee2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ee30:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ee34:	e7ed      	b.n	800ee12 <__exponent+0x44>
 800ee36:	2330      	movs	r3, #48	@ 0x30
 800ee38:	3130      	adds	r1, #48	@ 0x30
 800ee3a:	7083      	strb	r3, [r0, #2]
 800ee3c:	70c1      	strb	r1, [r0, #3]
 800ee3e:	1d03      	adds	r3, r0, #4
 800ee40:	e7f1      	b.n	800ee26 <__exponent+0x58>
	...

0800ee44 <_printf_float>:
 800ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee48:	b08d      	sub	sp, #52	@ 0x34
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ee50:	4616      	mov	r6, r2
 800ee52:	461f      	mov	r7, r3
 800ee54:	4605      	mov	r5, r0
 800ee56:	f000 ff61 	bl	800fd1c <_localeconv_r>
 800ee5a:	6803      	ldr	r3, [r0, #0]
 800ee5c:	9304      	str	r3, [sp, #16]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7f1 fa16 	bl	8000290 <strlen>
 800ee64:	2300      	movs	r3, #0
 800ee66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee68:	f8d8 3000 	ldr.w	r3, [r8]
 800ee6c:	9005      	str	r0, [sp, #20]
 800ee6e:	3307      	adds	r3, #7
 800ee70:	f023 0307 	bic.w	r3, r3, #7
 800ee74:	f103 0208 	add.w	r2, r3, #8
 800ee78:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ee7c:	f8d4 b000 	ldr.w	fp, [r4]
 800ee80:	f8c8 2000 	str.w	r2, [r8]
 800ee84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ee8c:	9307      	str	r3, [sp, #28]
 800ee8e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ee96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee9a:	4b9c      	ldr	r3, [pc, #624]	@ (800f10c <_printf_float+0x2c8>)
 800ee9c:	f04f 32ff 	mov.w	r2, #4294967295
 800eea0:	f7f1 fe54 	bl	8000b4c <__aeabi_dcmpun>
 800eea4:	bb70      	cbnz	r0, 800ef04 <_printf_float+0xc0>
 800eea6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeaa:	4b98      	ldr	r3, [pc, #608]	@ (800f10c <_printf_float+0x2c8>)
 800eeac:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb0:	f7f1 fe2e 	bl	8000b10 <__aeabi_dcmple>
 800eeb4:	bb30      	cbnz	r0, 800ef04 <_printf_float+0xc0>
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	2300      	movs	r3, #0
 800eeba:	4640      	mov	r0, r8
 800eebc:	4649      	mov	r1, r9
 800eebe:	f7f1 fe1d 	bl	8000afc <__aeabi_dcmplt>
 800eec2:	b110      	cbz	r0, 800eeca <_printf_float+0x86>
 800eec4:	232d      	movs	r3, #45	@ 0x2d
 800eec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeca:	4a91      	ldr	r2, [pc, #580]	@ (800f110 <_printf_float+0x2cc>)
 800eecc:	4b91      	ldr	r3, [pc, #580]	@ (800f114 <_printf_float+0x2d0>)
 800eece:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eed2:	bf8c      	ite	hi
 800eed4:	4690      	movhi	r8, r2
 800eed6:	4698      	movls	r8, r3
 800eed8:	2303      	movs	r3, #3
 800eeda:	6123      	str	r3, [r4, #16]
 800eedc:	f02b 0304 	bic.w	r3, fp, #4
 800eee0:	6023      	str	r3, [r4, #0]
 800eee2:	f04f 0900 	mov.w	r9, #0
 800eee6:	9700      	str	r7, [sp, #0]
 800eee8:	4633      	mov	r3, r6
 800eeea:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eeec:	4621      	mov	r1, r4
 800eeee:	4628      	mov	r0, r5
 800eef0:	f000 f9d2 	bl	800f298 <_printf_common>
 800eef4:	3001      	adds	r0, #1
 800eef6:	f040 808d 	bne.w	800f014 <_printf_float+0x1d0>
 800eefa:	f04f 30ff 	mov.w	r0, #4294967295
 800eefe:	b00d      	add	sp, #52	@ 0x34
 800ef00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef04:	4642      	mov	r2, r8
 800ef06:	464b      	mov	r3, r9
 800ef08:	4640      	mov	r0, r8
 800ef0a:	4649      	mov	r1, r9
 800ef0c:	f7f1 fe1e 	bl	8000b4c <__aeabi_dcmpun>
 800ef10:	b140      	cbz	r0, 800ef24 <_printf_float+0xe0>
 800ef12:	464b      	mov	r3, r9
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	bfbc      	itt	lt
 800ef18:	232d      	movlt	r3, #45	@ 0x2d
 800ef1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ef1e:	4a7e      	ldr	r2, [pc, #504]	@ (800f118 <_printf_float+0x2d4>)
 800ef20:	4b7e      	ldr	r3, [pc, #504]	@ (800f11c <_printf_float+0x2d8>)
 800ef22:	e7d4      	b.n	800eece <_printf_float+0x8a>
 800ef24:	6863      	ldr	r3, [r4, #4]
 800ef26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ef2a:	9206      	str	r2, [sp, #24]
 800ef2c:	1c5a      	adds	r2, r3, #1
 800ef2e:	d13b      	bne.n	800efa8 <_printf_float+0x164>
 800ef30:	2306      	movs	r3, #6
 800ef32:	6063      	str	r3, [r4, #4]
 800ef34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ef38:	2300      	movs	r3, #0
 800ef3a:	6022      	str	r2, [r4, #0]
 800ef3c:	9303      	str	r3, [sp, #12]
 800ef3e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ef40:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ef44:	ab09      	add	r3, sp, #36	@ 0x24
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	6861      	ldr	r1, [r4, #4]
 800ef4a:	ec49 8b10 	vmov	d0, r8, r9
 800ef4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ef52:	4628      	mov	r0, r5
 800ef54:	f7ff fed6 	bl	800ed04 <__cvt>
 800ef58:	9b06      	ldr	r3, [sp, #24]
 800ef5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef5c:	2b47      	cmp	r3, #71	@ 0x47
 800ef5e:	4680      	mov	r8, r0
 800ef60:	d129      	bne.n	800efb6 <_printf_float+0x172>
 800ef62:	1cc8      	adds	r0, r1, #3
 800ef64:	db02      	blt.n	800ef6c <_printf_float+0x128>
 800ef66:	6863      	ldr	r3, [r4, #4]
 800ef68:	4299      	cmp	r1, r3
 800ef6a:	dd41      	ble.n	800eff0 <_printf_float+0x1ac>
 800ef6c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ef70:	fa5f fa8a 	uxtb.w	sl, sl
 800ef74:	3901      	subs	r1, #1
 800ef76:	4652      	mov	r2, sl
 800ef78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ef7c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef7e:	f7ff ff26 	bl	800edce <__exponent>
 800ef82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef84:	1813      	adds	r3, r2, r0
 800ef86:	2a01      	cmp	r2, #1
 800ef88:	4681      	mov	r9, r0
 800ef8a:	6123      	str	r3, [r4, #16]
 800ef8c:	dc02      	bgt.n	800ef94 <_printf_float+0x150>
 800ef8e:	6822      	ldr	r2, [r4, #0]
 800ef90:	07d2      	lsls	r2, r2, #31
 800ef92:	d501      	bpl.n	800ef98 <_printf_float+0x154>
 800ef94:	3301      	adds	r3, #1
 800ef96:	6123      	str	r3, [r4, #16]
 800ef98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d0a2      	beq.n	800eee6 <_printf_float+0xa2>
 800efa0:	232d      	movs	r3, #45	@ 0x2d
 800efa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efa6:	e79e      	b.n	800eee6 <_printf_float+0xa2>
 800efa8:	9a06      	ldr	r2, [sp, #24]
 800efaa:	2a47      	cmp	r2, #71	@ 0x47
 800efac:	d1c2      	bne.n	800ef34 <_printf_float+0xf0>
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1c0      	bne.n	800ef34 <_printf_float+0xf0>
 800efb2:	2301      	movs	r3, #1
 800efb4:	e7bd      	b.n	800ef32 <_printf_float+0xee>
 800efb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800efba:	d9db      	bls.n	800ef74 <_printf_float+0x130>
 800efbc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800efc0:	d118      	bne.n	800eff4 <_printf_float+0x1b0>
 800efc2:	2900      	cmp	r1, #0
 800efc4:	6863      	ldr	r3, [r4, #4]
 800efc6:	dd0b      	ble.n	800efe0 <_printf_float+0x19c>
 800efc8:	6121      	str	r1, [r4, #16]
 800efca:	b913      	cbnz	r3, 800efd2 <_printf_float+0x18e>
 800efcc:	6822      	ldr	r2, [r4, #0]
 800efce:	07d0      	lsls	r0, r2, #31
 800efd0:	d502      	bpl.n	800efd8 <_printf_float+0x194>
 800efd2:	3301      	adds	r3, #1
 800efd4:	440b      	add	r3, r1
 800efd6:	6123      	str	r3, [r4, #16]
 800efd8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800efda:	f04f 0900 	mov.w	r9, #0
 800efde:	e7db      	b.n	800ef98 <_printf_float+0x154>
 800efe0:	b913      	cbnz	r3, 800efe8 <_printf_float+0x1a4>
 800efe2:	6822      	ldr	r2, [r4, #0]
 800efe4:	07d2      	lsls	r2, r2, #31
 800efe6:	d501      	bpl.n	800efec <_printf_float+0x1a8>
 800efe8:	3302      	adds	r3, #2
 800efea:	e7f4      	b.n	800efd6 <_printf_float+0x192>
 800efec:	2301      	movs	r3, #1
 800efee:	e7f2      	b.n	800efd6 <_printf_float+0x192>
 800eff0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800eff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eff6:	4299      	cmp	r1, r3
 800eff8:	db05      	blt.n	800f006 <_printf_float+0x1c2>
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	6121      	str	r1, [r4, #16]
 800effe:	07d8      	lsls	r0, r3, #31
 800f000:	d5ea      	bpl.n	800efd8 <_printf_float+0x194>
 800f002:	1c4b      	adds	r3, r1, #1
 800f004:	e7e7      	b.n	800efd6 <_printf_float+0x192>
 800f006:	2900      	cmp	r1, #0
 800f008:	bfd4      	ite	le
 800f00a:	f1c1 0202 	rsble	r2, r1, #2
 800f00e:	2201      	movgt	r2, #1
 800f010:	4413      	add	r3, r2
 800f012:	e7e0      	b.n	800efd6 <_printf_float+0x192>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	055a      	lsls	r2, r3, #21
 800f018:	d407      	bmi.n	800f02a <_printf_float+0x1e6>
 800f01a:	6923      	ldr	r3, [r4, #16]
 800f01c:	4642      	mov	r2, r8
 800f01e:	4631      	mov	r1, r6
 800f020:	4628      	mov	r0, r5
 800f022:	47b8      	blx	r7
 800f024:	3001      	adds	r0, #1
 800f026:	d12b      	bne.n	800f080 <_printf_float+0x23c>
 800f028:	e767      	b.n	800eefa <_printf_float+0xb6>
 800f02a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f02e:	f240 80dd 	bls.w	800f1ec <_printf_float+0x3a8>
 800f032:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f036:	2200      	movs	r2, #0
 800f038:	2300      	movs	r3, #0
 800f03a:	f7f1 fd55 	bl	8000ae8 <__aeabi_dcmpeq>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d033      	beq.n	800f0aa <_printf_float+0x266>
 800f042:	4a37      	ldr	r2, [pc, #220]	@ (800f120 <_printf_float+0x2dc>)
 800f044:	2301      	movs	r3, #1
 800f046:	4631      	mov	r1, r6
 800f048:	4628      	mov	r0, r5
 800f04a:	47b8      	blx	r7
 800f04c:	3001      	adds	r0, #1
 800f04e:	f43f af54 	beq.w	800eefa <_printf_float+0xb6>
 800f052:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f056:	4543      	cmp	r3, r8
 800f058:	db02      	blt.n	800f060 <_printf_float+0x21c>
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	07d8      	lsls	r0, r3, #31
 800f05e:	d50f      	bpl.n	800f080 <_printf_float+0x23c>
 800f060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f064:	4631      	mov	r1, r6
 800f066:	4628      	mov	r0, r5
 800f068:	47b8      	blx	r7
 800f06a:	3001      	adds	r0, #1
 800f06c:	f43f af45 	beq.w	800eefa <_printf_float+0xb6>
 800f070:	f04f 0900 	mov.w	r9, #0
 800f074:	f108 38ff 	add.w	r8, r8, #4294967295
 800f078:	f104 0a1a 	add.w	sl, r4, #26
 800f07c:	45c8      	cmp	r8, r9
 800f07e:	dc09      	bgt.n	800f094 <_printf_float+0x250>
 800f080:	6823      	ldr	r3, [r4, #0]
 800f082:	079b      	lsls	r3, r3, #30
 800f084:	f100 8103 	bmi.w	800f28e <_printf_float+0x44a>
 800f088:	68e0      	ldr	r0, [r4, #12]
 800f08a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f08c:	4298      	cmp	r0, r3
 800f08e:	bfb8      	it	lt
 800f090:	4618      	movlt	r0, r3
 800f092:	e734      	b.n	800eefe <_printf_float+0xba>
 800f094:	2301      	movs	r3, #1
 800f096:	4652      	mov	r2, sl
 800f098:	4631      	mov	r1, r6
 800f09a:	4628      	mov	r0, r5
 800f09c:	47b8      	blx	r7
 800f09e:	3001      	adds	r0, #1
 800f0a0:	f43f af2b 	beq.w	800eefa <_printf_float+0xb6>
 800f0a4:	f109 0901 	add.w	r9, r9, #1
 800f0a8:	e7e8      	b.n	800f07c <_printf_float+0x238>
 800f0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	dc39      	bgt.n	800f124 <_printf_float+0x2e0>
 800f0b0:	4a1b      	ldr	r2, [pc, #108]	@ (800f120 <_printf_float+0x2dc>)
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	4631      	mov	r1, r6
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	47b8      	blx	r7
 800f0ba:	3001      	adds	r0, #1
 800f0bc:	f43f af1d 	beq.w	800eefa <_printf_float+0xb6>
 800f0c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f0c4:	ea59 0303 	orrs.w	r3, r9, r3
 800f0c8:	d102      	bne.n	800f0d0 <_printf_float+0x28c>
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	07d9      	lsls	r1, r3, #31
 800f0ce:	d5d7      	bpl.n	800f080 <_printf_float+0x23c>
 800f0d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0d4:	4631      	mov	r1, r6
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	47b8      	blx	r7
 800f0da:	3001      	adds	r0, #1
 800f0dc:	f43f af0d 	beq.w	800eefa <_printf_float+0xb6>
 800f0e0:	f04f 0a00 	mov.w	sl, #0
 800f0e4:	f104 0b1a 	add.w	fp, r4, #26
 800f0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ea:	425b      	negs	r3, r3
 800f0ec:	4553      	cmp	r3, sl
 800f0ee:	dc01      	bgt.n	800f0f4 <_printf_float+0x2b0>
 800f0f0:	464b      	mov	r3, r9
 800f0f2:	e793      	b.n	800f01c <_printf_float+0x1d8>
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	465a      	mov	r2, fp
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b8      	blx	r7
 800f0fe:	3001      	adds	r0, #1
 800f100:	f43f aefb 	beq.w	800eefa <_printf_float+0xb6>
 800f104:	f10a 0a01 	add.w	sl, sl, #1
 800f108:	e7ee      	b.n	800f0e8 <_printf_float+0x2a4>
 800f10a:	bf00      	nop
 800f10c:	7fefffff 	.word	0x7fefffff
 800f110:	0803e085 	.word	0x0803e085
 800f114:	0803e081 	.word	0x0803e081
 800f118:	0803e08d 	.word	0x0803e08d
 800f11c:	0803e089 	.word	0x0803e089
 800f120:	0803e091 	.word	0x0803e091
 800f124:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f126:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f12a:	4553      	cmp	r3, sl
 800f12c:	bfa8      	it	ge
 800f12e:	4653      	movge	r3, sl
 800f130:	2b00      	cmp	r3, #0
 800f132:	4699      	mov	r9, r3
 800f134:	dc36      	bgt.n	800f1a4 <_printf_float+0x360>
 800f136:	f04f 0b00 	mov.w	fp, #0
 800f13a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f13e:	f104 021a 	add.w	r2, r4, #26
 800f142:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f144:	9306      	str	r3, [sp, #24]
 800f146:	eba3 0309 	sub.w	r3, r3, r9
 800f14a:	455b      	cmp	r3, fp
 800f14c:	dc31      	bgt.n	800f1b2 <_printf_float+0x36e>
 800f14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f150:	459a      	cmp	sl, r3
 800f152:	dc3a      	bgt.n	800f1ca <_printf_float+0x386>
 800f154:	6823      	ldr	r3, [r4, #0]
 800f156:	07da      	lsls	r2, r3, #31
 800f158:	d437      	bmi.n	800f1ca <_printf_float+0x386>
 800f15a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f15c:	ebaa 0903 	sub.w	r9, sl, r3
 800f160:	9b06      	ldr	r3, [sp, #24]
 800f162:	ebaa 0303 	sub.w	r3, sl, r3
 800f166:	4599      	cmp	r9, r3
 800f168:	bfa8      	it	ge
 800f16a:	4699      	movge	r9, r3
 800f16c:	f1b9 0f00 	cmp.w	r9, #0
 800f170:	dc33      	bgt.n	800f1da <_printf_float+0x396>
 800f172:	f04f 0800 	mov.w	r8, #0
 800f176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f17a:	f104 0b1a 	add.w	fp, r4, #26
 800f17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f180:	ebaa 0303 	sub.w	r3, sl, r3
 800f184:	eba3 0309 	sub.w	r3, r3, r9
 800f188:	4543      	cmp	r3, r8
 800f18a:	f77f af79 	ble.w	800f080 <_printf_float+0x23c>
 800f18e:	2301      	movs	r3, #1
 800f190:	465a      	mov	r2, fp
 800f192:	4631      	mov	r1, r6
 800f194:	4628      	mov	r0, r5
 800f196:	47b8      	blx	r7
 800f198:	3001      	adds	r0, #1
 800f19a:	f43f aeae 	beq.w	800eefa <_printf_float+0xb6>
 800f19e:	f108 0801 	add.w	r8, r8, #1
 800f1a2:	e7ec      	b.n	800f17e <_printf_float+0x33a>
 800f1a4:	4642      	mov	r2, r8
 800f1a6:	4631      	mov	r1, r6
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	47b8      	blx	r7
 800f1ac:	3001      	adds	r0, #1
 800f1ae:	d1c2      	bne.n	800f136 <_printf_float+0x2f2>
 800f1b0:	e6a3      	b.n	800eefa <_printf_float+0xb6>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	9206      	str	r2, [sp, #24]
 800f1ba:	47b8      	blx	r7
 800f1bc:	3001      	adds	r0, #1
 800f1be:	f43f ae9c 	beq.w	800eefa <_printf_float+0xb6>
 800f1c2:	9a06      	ldr	r2, [sp, #24]
 800f1c4:	f10b 0b01 	add.w	fp, fp, #1
 800f1c8:	e7bb      	b.n	800f142 <_printf_float+0x2fe>
 800f1ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	47b8      	blx	r7
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	d1c0      	bne.n	800f15a <_printf_float+0x316>
 800f1d8:	e68f      	b.n	800eefa <_printf_float+0xb6>
 800f1da:	9a06      	ldr	r2, [sp, #24]
 800f1dc:	464b      	mov	r3, r9
 800f1de:	4442      	add	r2, r8
 800f1e0:	4631      	mov	r1, r6
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	47b8      	blx	r7
 800f1e6:	3001      	adds	r0, #1
 800f1e8:	d1c3      	bne.n	800f172 <_printf_float+0x32e>
 800f1ea:	e686      	b.n	800eefa <_printf_float+0xb6>
 800f1ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f1f0:	f1ba 0f01 	cmp.w	sl, #1
 800f1f4:	dc01      	bgt.n	800f1fa <_printf_float+0x3b6>
 800f1f6:	07db      	lsls	r3, r3, #31
 800f1f8:	d536      	bpl.n	800f268 <_printf_float+0x424>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4642      	mov	r2, r8
 800f1fe:	4631      	mov	r1, r6
 800f200:	4628      	mov	r0, r5
 800f202:	47b8      	blx	r7
 800f204:	3001      	adds	r0, #1
 800f206:	f43f ae78 	beq.w	800eefa <_printf_float+0xb6>
 800f20a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f20e:	4631      	mov	r1, r6
 800f210:	4628      	mov	r0, r5
 800f212:	47b8      	blx	r7
 800f214:	3001      	adds	r0, #1
 800f216:	f43f ae70 	beq.w	800eefa <_printf_float+0xb6>
 800f21a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f21e:	2200      	movs	r2, #0
 800f220:	2300      	movs	r3, #0
 800f222:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f226:	f7f1 fc5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f22a:	b9c0      	cbnz	r0, 800f25e <_printf_float+0x41a>
 800f22c:	4653      	mov	r3, sl
 800f22e:	f108 0201 	add.w	r2, r8, #1
 800f232:	4631      	mov	r1, r6
 800f234:	4628      	mov	r0, r5
 800f236:	47b8      	blx	r7
 800f238:	3001      	adds	r0, #1
 800f23a:	d10c      	bne.n	800f256 <_printf_float+0x412>
 800f23c:	e65d      	b.n	800eefa <_printf_float+0xb6>
 800f23e:	2301      	movs	r3, #1
 800f240:	465a      	mov	r2, fp
 800f242:	4631      	mov	r1, r6
 800f244:	4628      	mov	r0, r5
 800f246:	47b8      	blx	r7
 800f248:	3001      	adds	r0, #1
 800f24a:	f43f ae56 	beq.w	800eefa <_printf_float+0xb6>
 800f24e:	f108 0801 	add.w	r8, r8, #1
 800f252:	45d0      	cmp	r8, sl
 800f254:	dbf3      	blt.n	800f23e <_printf_float+0x3fa>
 800f256:	464b      	mov	r3, r9
 800f258:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f25c:	e6df      	b.n	800f01e <_printf_float+0x1da>
 800f25e:	f04f 0800 	mov.w	r8, #0
 800f262:	f104 0b1a 	add.w	fp, r4, #26
 800f266:	e7f4      	b.n	800f252 <_printf_float+0x40e>
 800f268:	2301      	movs	r3, #1
 800f26a:	4642      	mov	r2, r8
 800f26c:	e7e1      	b.n	800f232 <_printf_float+0x3ee>
 800f26e:	2301      	movs	r3, #1
 800f270:	464a      	mov	r2, r9
 800f272:	4631      	mov	r1, r6
 800f274:	4628      	mov	r0, r5
 800f276:	47b8      	blx	r7
 800f278:	3001      	adds	r0, #1
 800f27a:	f43f ae3e 	beq.w	800eefa <_printf_float+0xb6>
 800f27e:	f108 0801 	add.w	r8, r8, #1
 800f282:	68e3      	ldr	r3, [r4, #12]
 800f284:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f286:	1a5b      	subs	r3, r3, r1
 800f288:	4543      	cmp	r3, r8
 800f28a:	dcf0      	bgt.n	800f26e <_printf_float+0x42a>
 800f28c:	e6fc      	b.n	800f088 <_printf_float+0x244>
 800f28e:	f04f 0800 	mov.w	r8, #0
 800f292:	f104 0919 	add.w	r9, r4, #25
 800f296:	e7f4      	b.n	800f282 <_printf_float+0x43e>

0800f298 <_printf_common>:
 800f298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f29c:	4616      	mov	r6, r2
 800f29e:	4698      	mov	r8, r3
 800f2a0:	688a      	ldr	r2, [r1, #8]
 800f2a2:	690b      	ldr	r3, [r1, #16]
 800f2a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	bfb8      	it	lt
 800f2ac:	4613      	movlt	r3, r2
 800f2ae:	6033      	str	r3, [r6, #0]
 800f2b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f2b4:	4607      	mov	r7, r0
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	b10a      	cbz	r2, 800f2be <_printf_common+0x26>
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	6033      	str	r3, [r6, #0]
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	0699      	lsls	r1, r3, #26
 800f2c2:	bf42      	ittt	mi
 800f2c4:	6833      	ldrmi	r3, [r6, #0]
 800f2c6:	3302      	addmi	r3, #2
 800f2c8:	6033      	strmi	r3, [r6, #0]
 800f2ca:	6825      	ldr	r5, [r4, #0]
 800f2cc:	f015 0506 	ands.w	r5, r5, #6
 800f2d0:	d106      	bne.n	800f2e0 <_printf_common+0x48>
 800f2d2:	f104 0a19 	add.w	sl, r4, #25
 800f2d6:	68e3      	ldr	r3, [r4, #12]
 800f2d8:	6832      	ldr	r2, [r6, #0]
 800f2da:	1a9b      	subs	r3, r3, r2
 800f2dc:	42ab      	cmp	r3, r5
 800f2de:	dc26      	bgt.n	800f32e <_printf_common+0x96>
 800f2e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f2e4:	6822      	ldr	r2, [r4, #0]
 800f2e6:	3b00      	subs	r3, #0
 800f2e8:	bf18      	it	ne
 800f2ea:	2301      	movne	r3, #1
 800f2ec:	0692      	lsls	r2, r2, #26
 800f2ee:	d42b      	bmi.n	800f348 <_printf_common+0xb0>
 800f2f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f2f4:	4641      	mov	r1, r8
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	47c8      	blx	r9
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	d01e      	beq.n	800f33c <_printf_common+0xa4>
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	6922      	ldr	r2, [r4, #16]
 800f302:	f003 0306 	and.w	r3, r3, #6
 800f306:	2b04      	cmp	r3, #4
 800f308:	bf02      	ittt	eq
 800f30a:	68e5      	ldreq	r5, [r4, #12]
 800f30c:	6833      	ldreq	r3, [r6, #0]
 800f30e:	1aed      	subeq	r5, r5, r3
 800f310:	68a3      	ldr	r3, [r4, #8]
 800f312:	bf0c      	ite	eq
 800f314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f318:	2500      	movne	r5, #0
 800f31a:	4293      	cmp	r3, r2
 800f31c:	bfc4      	itt	gt
 800f31e:	1a9b      	subgt	r3, r3, r2
 800f320:	18ed      	addgt	r5, r5, r3
 800f322:	2600      	movs	r6, #0
 800f324:	341a      	adds	r4, #26
 800f326:	42b5      	cmp	r5, r6
 800f328:	d11a      	bne.n	800f360 <_printf_common+0xc8>
 800f32a:	2000      	movs	r0, #0
 800f32c:	e008      	b.n	800f340 <_printf_common+0xa8>
 800f32e:	2301      	movs	r3, #1
 800f330:	4652      	mov	r2, sl
 800f332:	4641      	mov	r1, r8
 800f334:	4638      	mov	r0, r7
 800f336:	47c8      	blx	r9
 800f338:	3001      	adds	r0, #1
 800f33a:	d103      	bne.n	800f344 <_printf_common+0xac>
 800f33c:	f04f 30ff 	mov.w	r0, #4294967295
 800f340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f344:	3501      	adds	r5, #1
 800f346:	e7c6      	b.n	800f2d6 <_printf_common+0x3e>
 800f348:	18e1      	adds	r1, r4, r3
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	2030      	movs	r0, #48	@ 0x30
 800f34e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f352:	4422      	add	r2, r4
 800f354:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f358:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f35c:	3302      	adds	r3, #2
 800f35e:	e7c7      	b.n	800f2f0 <_printf_common+0x58>
 800f360:	2301      	movs	r3, #1
 800f362:	4622      	mov	r2, r4
 800f364:	4641      	mov	r1, r8
 800f366:	4638      	mov	r0, r7
 800f368:	47c8      	blx	r9
 800f36a:	3001      	adds	r0, #1
 800f36c:	d0e6      	beq.n	800f33c <_printf_common+0xa4>
 800f36e:	3601      	adds	r6, #1
 800f370:	e7d9      	b.n	800f326 <_printf_common+0x8e>
	...

0800f374 <_printf_i>:
 800f374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f378:	7e0f      	ldrb	r7, [r1, #24]
 800f37a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f37c:	2f78      	cmp	r7, #120	@ 0x78
 800f37e:	4691      	mov	r9, r2
 800f380:	4680      	mov	r8, r0
 800f382:	460c      	mov	r4, r1
 800f384:	469a      	mov	sl, r3
 800f386:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f38a:	d807      	bhi.n	800f39c <_printf_i+0x28>
 800f38c:	2f62      	cmp	r7, #98	@ 0x62
 800f38e:	d80a      	bhi.n	800f3a6 <_printf_i+0x32>
 800f390:	2f00      	cmp	r7, #0
 800f392:	f000 80d1 	beq.w	800f538 <_printf_i+0x1c4>
 800f396:	2f58      	cmp	r7, #88	@ 0x58
 800f398:	f000 80b8 	beq.w	800f50c <_printf_i+0x198>
 800f39c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f3a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f3a4:	e03a      	b.n	800f41c <_printf_i+0xa8>
 800f3a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f3aa:	2b15      	cmp	r3, #21
 800f3ac:	d8f6      	bhi.n	800f39c <_printf_i+0x28>
 800f3ae:	a101      	add	r1, pc, #4	@ (adr r1, 800f3b4 <_printf_i+0x40>)
 800f3b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3b4:	0800f40d 	.word	0x0800f40d
 800f3b8:	0800f421 	.word	0x0800f421
 800f3bc:	0800f39d 	.word	0x0800f39d
 800f3c0:	0800f39d 	.word	0x0800f39d
 800f3c4:	0800f39d 	.word	0x0800f39d
 800f3c8:	0800f39d 	.word	0x0800f39d
 800f3cc:	0800f421 	.word	0x0800f421
 800f3d0:	0800f39d 	.word	0x0800f39d
 800f3d4:	0800f39d 	.word	0x0800f39d
 800f3d8:	0800f39d 	.word	0x0800f39d
 800f3dc:	0800f39d 	.word	0x0800f39d
 800f3e0:	0800f51f 	.word	0x0800f51f
 800f3e4:	0800f44b 	.word	0x0800f44b
 800f3e8:	0800f4d9 	.word	0x0800f4d9
 800f3ec:	0800f39d 	.word	0x0800f39d
 800f3f0:	0800f39d 	.word	0x0800f39d
 800f3f4:	0800f541 	.word	0x0800f541
 800f3f8:	0800f39d 	.word	0x0800f39d
 800f3fc:	0800f44b 	.word	0x0800f44b
 800f400:	0800f39d 	.word	0x0800f39d
 800f404:	0800f39d 	.word	0x0800f39d
 800f408:	0800f4e1 	.word	0x0800f4e1
 800f40c:	6833      	ldr	r3, [r6, #0]
 800f40e:	1d1a      	adds	r2, r3, #4
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	6032      	str	r2, [r6, #0]
 800f414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f418:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f41c:	2301      	movs	r3, #1
 800f41e:	e09c      	b.n	800f55a <_printf_i+0x1e6>
 800f420:	6833      	ldr	r3, [r6, #0]
 800f422:	6820      	ldr	r0, [r4, #0]
 800f424:	1d19      	adds	r1, r3, #4
 800f426:	6031      	str	r1, [r6, #0]
 800f428:	0606      	lsls	r6, r0, #24
 800f42a:	d501      	bpl.n	800f430 <_printf_i+0xbc>
 800f42c:	681d      	ldr	r5, [r3, #0]
 800f42e:	e003      	b.n	800f438 <_printf_i+0xc4>
 800f430:	0645      	lsls	r5, r0, #25
 800f432:	d5fb      	bpl.n	800f42c <_printf_i+0xb8>
 800f434:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f438:	2d00      	cmp	r5, #0
 800f43a:	da03      	bge.n	800f444 <_printf_i+0xd0>
 800f43c:	232d      	movs	r3, #45	@ 0x2d
 800f43e:	426d      	negs	r5, r5
 800f440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f444:	4858      	ldr	r0, [pc, #352]	@ (800f5a8 <_printf_i+0x234>)
 800f446:	230a      	movs	r3, #10
 800f448:	e011      	b.n	800f46e <_printf_i+0xfa>
 800f44a:	6821      	ldr	r1, [r4, #0]
 800f44c:	6833      	ldr	r3, [r6, #0]
 800f44e:	0608      	lsls	r0, r1, #24
 800f450:	f853 5b04 	ldr.w	r5, [r3], #4
 800f454:	d402      	bmi.n	800f45c <_printf_i+0xe8>
 800f456:	0649      	lsls	r1, r1, #25
 800f458:	bf48      	it	mi
 800f45a:	b2ad      	uxthmi	r5, r5
 800f45c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f45e:	4852      	ldr	r0, [pc, #328]	@ (800f5a8 <_printf_i+0x234>)
 800f460:	6033      	str	r3, [r6, #0]
 800f462:	bf14      	ite	ne
 800f464:	230a      	movne	r3, #10
 800f466:	2308      	moveq	r3, #8
 800f468:	2100      	movs	r1, #0
 800f46a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f46e:	6866      	ldr	r6, [r4, #4]
 800f470:	60a6      	str	r6, [r4, #8]
 800f472:	2e00      	cmp	r6, #0
 800f474:	db05      	blt.n	800f482 <_printf_i+0x10e>
 800f476:	6821      	ldr	r1, [r4, #0]
 800f478:	432e      	orrs	r6, r5
 800f47a:	f021 0104 	bic.w	r1, r1, #4
 800f47e:	6021      	str	r1, [r4, #0]
 800f480:	d04b      	beq.n	800f51a <_printf_i+0x1a6>
 800f482:	4616      	mov	r6, r2
 800f484:	fbb5 f1f3 	udiv	r1, r5, r3
 800f488:	fb03 5711 	mls	r7, r3, r1, r5
 800f48c:	5dc7      	ldrb	r7, [r0, r7]
 800f48e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f492:	462f      	mov	r7, r5
 800f494:	42bb      	cmp	r3, r7
 800f496:	460d      	mov	r5, r1
 800f498:	d9f4      	bls.n	800f484 <_printf_i+0x110>
 800f49a:	2b08      	cmp	r3, #8
 800f49c:	d10b      	bne.n	800f4b6 <_printf_i+0x142>
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	07df      	lsls	r7, r3, #31
 800f4a2:	d508      	bpl.n	800f4b6 <_printf_i+0x142>
 800f4a4:	6923      	ldr	r3, [r4, #16]
 800f4a6:	6861      	ldr	r1, [r4, #4]
 800f4a8:	4299      	cmp	r1, r3
 800f4aa:	bfde      	ittt	le
 800f4ac:	2330      	movle	r3, #48	@ 0x30
 800f4ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f4b6:	1b92      	subs	r2, r2, r6
 800f4b8:	6122      	str	r2, [r4, #16]
 800f4ba:	f8cd a000 	str.w	sl, [sp]
 800f4be:	464b      	mov	r3, r9
 800f4c0:	aa03      	add	r2, sp, #12
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	4640      	mov	r0, r8
 800f4c6:	f7ff fee7 	bl	800f298 <_printf_common>
 800f4ca:	3001      	adds	r0, #1
 800f4cc:	d14a      	bne.n	800f564 <_printf_i+0x1f0>
 800f4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d2:	b004      	add	sp, #16
 800f4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	f043 0320 	orr.w	r3, r3, #32
 800f4de:	6023      	str	r3, [r4, #0]
 800f4e0:	4832      	ldr	r0, [pc, #200]	@ (800f5ac <_printf_i+0x238>)
 800f4e2:	2778      	movs	r7, #120	@ 0x78
 800f4e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	6831      	ldr	r1, [r6, #0]
 800f4ec:	061f      	lsls	r7, r3, #24
 800f4ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800f4f2:	d402      	bmi.n	800f4fa <_printf_i+0x186>
 800f4f4:	065f      	lsls	r7, r3, #25
 800f4f6:	bf48      	it	mi
 800f4f8:	b2ad      	uxthmi	r5, r5
 800f4fa:	6031      	str	r1, [r6, #0]
 800f4fc:	07d9      	lsls	r1, r3, #31
 800f4fe:	bf44      	itt	mi
 800f500:	f043 0320 	orrmi.w	r3, r3, #32
 800f504:	6023      	strmi	r3, [r4, #0]
 800f506:	b11d      	cbz	r5, 800f510 <_printf_i+0x19c>
 800f508:	2310      	movs	r3, #16
 800f50a:	e7ad      	b.n	800f468 <_printf_i+0xf4>
 800f50c:	4826      	ldr	r0, [pc, #152]	@ (800f5a8 <_printf_i+0x234>)
 800f50e:	e7e9      	b.n	800f4e4 <_printf_i+0x170>
 800f510:	6823      	ldr	r3, [r4, #0]
 800f512:	f023 0320 	bic.w	r3, r3, #32
 800f516:	6023      	str	r3, [r4, #0]
 800f518:	e7f6      	b.n	800f508 <_printf_i+0x194>
 800f51a:	4616      	mov	r6, r2
 800f51c:	e7bd      	b.n	800f49a <_printf_i+0x126>
 800f51e:	6833      	ldr	r3, [r6, #0]
 800f520:	6825      	ldr	r5, [r4, #0]
 800f522:	6961      	ldr	r1, [r4, #20]
 800f524:	1d18      	adds	r0, r3, #4
 800f526:	6030      	str	r0, [r6, #0]
 800f528:	062e      	lsls	r6, r5, #24
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	d501      	bpl.n	800f532 <_printf_i+0x1be>
 800f52e:	6019      	str	r1, [r3, #0]
 800f530:	e002      	b.n	800f538 <_printf_i+0x1c4>
 800f532:	0668      	lsls	r0, r5, #25
 800f534:	d5fb      	bpl.n	800f52e <_printf_i+0x1ba>
 800f536:	8019      	strh	r1, [r3, #0]
 800f538:	2300      	movs	r3, #0
 800f53a:	6123      	str	r3, [r4, #16]
 800f53c:	4616      	mov	r6, r2
 800f53e:	e7bc      	b.n	800f4ba <_printf_i+0x146>
 800f540:	6833      	ldr	r3, [r6, #0]
 800f542:	1d1a      	adds	r2, r3, #4
 800f544:	6032      	str	r2, [r6, #0]
 800f546:	681e      	ldr	r6, [r3, #0]
 800f548:	6862      	ldr	r2, [r4, #4]
 800f54a:	2100      	movs	r1, #0
 800f54c:	4630      	mov	r0, r6
 800f54e:	f7f0 fe4f 	bl	80001f0 <memchr>
 800f552:	b108      	cbz	r0, 800f558 <_printf_i+0x1e4>
 800f554:	1b80      	subs	r0, r0, r6
 800f556:	6060      	str	r0, [r4, #4]
 800f558:	6863      	ldr	r3, [r4, #4]
 800f55a:	6123      	str	r3, [r4, #16]
 800f55c:	2300      	movs	r3, #0
 800f55e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f562:	e7aa      	b.n	800f4ba <_printf_i+0x146>
 800f564:	6923      	ldr	r3, [r4, #16]
 800f566:	4632      	mov	r2, r6
 800f568:	4649      	mov	r1, r9
 800f56a:	4640      	mov	r0, r8
 800f56c:	47d0      	blx	sl
 800f56e:	3001      	adds	r0, #1
 800f570:	d0ad      	beq.n	800f4ce <_printf_i+0x15a>
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	079b      	lsls	r3, r3, #30
 800f576:	d413      	bmi.n	800f5a0 <_printf_i+0x22c>
 800f578:	68e0      	ldr	r0, [r4, #12]
 800f57a:	9b03      	ldr	r3, [sp, #12]
 800f57c:	4298      	cmp	r0, r3
 800f57e:	bfb8      	it	lt
 800f580:	4618      	movlt	r0, r3
 800f582:	e7a6      	b.n	800f4d2 <_printf_i+0x15e>
 800f584:	2301      	movs	r3, #1
 800f586:	4632      	mov	r2, r6
 800f588:	4649      	mov	r1, r9
 800f58a:	4640      	mov	r0, r8
 800f58c:	47d0      	blx	sl
 800f58e:	3001      	adds	r0, #1
 800f590:	d09d      	beq.n	800f4ce <_printf_i+0x15a>
 800f592:	3501      	adds	r5, #1
 800f594:	68e3      	ldr	r3, [r4, #12]
 800f596:	9903      	ldr	r1, [sp, #12]
 800f598:	1a5b      	subs	r3, r3, r1
 800f59a:	42ab      	cmp	r3, r5
 800f59c:	dcf2      	bgt.n	800f584 <_printf_i+0x210>
 800f59e:	e7eb      	b.n	800f578 <_printf_i+0x204>
 800f5a0:	2500      	movs	r5, #0
 800f5a2:	f104 0619 	add.w	r6, r4, #25
 800f5a6:	e7f5      	b.n	800f594 <_printf_i+0x220>
 800f5a8:	0803e093 	.word	0x0803e093
 800f5ac:	0803e0a4 	.word	0x0803e0a4

0800f5b0 <_scanf_float>:
 800f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	b087      	sub	sp, #28
 800f5b6:	4691      	mov	r9, r2
 800f5b8:	9303      	str	r3, [sp, #12]
 800f5ba:	688b      	ldr	r3, [r1, #8]
 800f5bc:	1e5a      	subs	r2, r3, #1
 800f5be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f5c2:	bf81      	itttt	hi
 800f5c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f5c8:	eb03 0b05 	addhi.w	fp, r3, r5
 800f5cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f5d0:	608b      	strhi	r3, [r1, #8]
 800f5d2:	680b      	ldr	r3, [r1, #0]
 800f5d4:	460a      	mov	r2, r1
 800f5d6:	f04f 0500 	mov.w	r5, #0
 800f5da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f5de:	f842 3b1c 	str.w	r3, [r2], #28
 800f5e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f5e6:	4680      	mov	r8, r0
 800f5e8:	460c      	mov	r4, r1
 800f5ea:	bf98      	it	ls
 800f5ec:	f04f 0b00 	movls.w	fp, #0
 800f5f0:	9201      	str	r2, [sp, #4]
 800f5f2:	4616      	mov	r6, r2
 800f5f4:	46aa      	mov	sl, r5
 800f5f6:	462f      	mov	r7, r5
 800f5f8:	9502      	str	r5, [sp, #8]
 800f5fa:	68a2      	ldr	r2, [r4, #8]
 800f5fc:	b15a      	cbz	r2, 800f616 <_scanf_float+0x66>
 800f5fe:	f8d9 3000 	ldr.w	r3, [r9]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	2b4e      	cmp	r3, #78	@ 0x4e
 800f606:	d863      	bhi.n	800f6d0 <_scanf_float+0x120>
 800f608:	2b40      	cmp	r3, #64	@ 0x40
 800f60a:	d83b      	bhi.n	800f684 <_scanf_float+0xd4>
 800f60c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f610:	b2c8      	uxtb	r0, r1
 800f612:	280e      	cmp	r0, #14
 800f614:	d939      	bls.n	800f68a <_scanf_float+0xda>
 800f616:	b11f      	cbz	r7, 800f620 <_scanf_float+0x70>
 800f618:	6823      	ldr	r3, [r4, #0]
 800f61a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f61e:	6023      	str	r3, [r4, #0]
 800f620:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f624:	f1ba 0f01 	cmp.w	sl, #1
 800f628:	f200 8114 	bhi.w	800f854 <_scanf_float+0x2a4>
 800f62c:	9b01      	ldr	r3, [sp, #4]
 800f62e:	429e      	cmp	r6, r3
 800f630:	f200 8105 	bhi.w	800f83e <_scanf_float+0x28e>
 800f634:	2001      	movs	r0, #1
 800f636:	b007      	add	sp, #28
 800f638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f640:	2a0d      	cmp	r2, #13
 800f642:	d8e8      	bhi.n	800f616 <_scanf_float+0x66>
 800f644:	a101      	add	r1, pc, #4	@ (adr r1, 800f64c <_scanf_float+0x9c>)
 800f646:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f64a:	bf00      	nop
 800f64c:	0800f795 	.word	0x0800f795
 800f650:	0800f617 	.word	0x0800f617
 800f654:	0800f617 	.word	0x0800f617
 800f658:	0800f617 	.word	0x0800f617
 800f65c:	0800f7f1 	.word	0x0800f7f1
 800f660:	0800f7cb 	.word	0x0800f7cb
 800f664:	0800f617 	.word	0x0800f617
 800f668:	0800f617 	.word	0x0800f617
 800f66c:	0800f7a3 	.word	0x0800f7a3
 800f670:	0800f617 	.word	0x0800f617
 800f674:	0800f617 	.word	0x0800f617
 800f678:	0800f617 	.word	0x0800f617
 800f67c:	0800f617 	.word	0x0800f617
 800f680:	0800f75f 	.word	0x0800f75f
 800f684:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f688:	e7da      	b.n	800f640 <_scanf_float+0x90>
 800f68a:	290e      	cmp	r1, #14
 800f68c:	d8c3      	bhi.n	800f616 <_scanf_float+0x66>
 800f68e:	a001      	add	r0, pc, #4	@ (adr r0, 800f694 <_scanf_float+0xe4>)
 800f690:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f694:	0800f74f 	.word	0x0800f74f
 800f698:	0800f617 	.word	0x0800f617
 800f69c:	0800f74f 	.word	0x0800f74f
 800f6a0:	0800f7df 	.word	0x0800f7df
 800f6a4:	0800f617 	.word	0x0800f617
 800f6a8:	0800f6f1 	.word	0x0800f6f1
 800f6ac:	0800f735 	.word	0x0800f735
 800f6b0:	0800f735 	.word	0x0800f735
 800f6b4:	0800f735 	.word	0x0800f735
 800f6b8:	0800f735 	.word	0x0800f735
 800f6bc:	0800f735 	.word	0x0800f735
 800f6c0:	0800f735 	.word	0x0800f735
 800f6c4:	0800f735 	.word	0x0800f735
 800f6c8:	0800f735 	.word	0x0800f735
 800f6cc:	0800f735 	.word	0x0800f735
 800f6d0:	2b6e      	cmp	r3, #110	@ 0x6e
 800f6d2:	d809      	bhi.n	800f6e8 <_scanf_float+0x138>
 800f6d4:	2b60      	cmp	r3, #96	@ 0x60
 800f6d6:	d8b1      	bhi.n	800f63c <_scanf_float+0x8c>
 800f6d8:	2b54      	cmp	r3, #84	@ 0x54
 800f6da:	d07b      	beq.n	800f7d4 <_scanf_float+0x224>
 800f6dc:	2b59      	cmp	r3, #89	@ 0x59
 800f6de:	d19a      	bne.n	800f616 <_scanf_float+0x66>
 800f6e0:	2d07      	cmp	r5, #7
 800f6e2:	d198      	bne.n	800f616 <_scanf_float+0x66>
 800f6e4:	2508      	movs	r5, #8
 800f6e6:	e02f      	b.n	800f748 <_scanf_float+0x198>
 800f6e8:	2b74      	cmp	r3, #116	@ 0x74
 800f6ea:	d073      	beq.n	800f7d4 <_scanf_float+0x224>
 800f6ec:	2b79      	cmp	r3, #121	@ 0x79
 800f6ee:	e7f6      	b.n	800f6de <_scanf_float+0x12e>
 800f6f0:	6821      	ldr	r1, [r4, #0]
 800f6f2:	05c8      	lsls	r0, r1, #23
 800f6f4:	d51e      	bpl.n	800f734 <_scanf_float+0x184>
 800f6f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f6fa:	6021      	str	r1, [r4, #0]
 800f6fc:	3701      	adds	r7, #1
 800f6fe:	f1bb 0f00 	cmp.w	fp, #0
 800f702:	d003      	beq.n	800f70c <_scanf_float+0x15c>
 800f704:	3201      	adds	r2, #1
 800f706:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f70a:	60a2      	str	r2, [r4, #8]
 800f70c:	68a3      	ldr	r3, [r4, #8]
 800f70e:	3b01      	subs	r3, #1
 800f710:	60a3      	str	r3, [r4, #8]
 800f712:	6923      	ldr	r3, [r4, #16]
 800f714:	3301      	adds	r3, #1
 800f716:	6123      	str	r3, [r4, #16]
 800f718:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f8c9 3004 	str.w	r3, [r9, #4]
 800f724:	f340 8082 	ble.w	800f82c <_scanf_float+0x27c>
 800f728:	f8d9 3000 	ldr.w	r3, [r9]
 800f72c:	3301      	adds	r3, #1
 800f72e:	f8c9 3000 	str.w	r3, [r9]
 800f732:	e762      	b.n	800f5fa <_scanf_float+0x4a>
 800f734:	eb1a 0105 	adds.w	r1, sl, r5
 800f738:	f47f af6d 	bne.w	800f616 <_scanf_float+0x66>
 800f73c:	6822      	ldr	r2, [r4, #0]
 800f73e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f742:	6022      	str	r2, [r4, #0]
 800f744:	460d      	mov	r5, r1
 800f746:	468a      	mov	sl, r1
 800f748:	f806 3b01 	strb.w	r3, [r6], #1
 800f74c:	e7de      	b.n	800f70c <_scanf_float+0x15c>
 800f74e:	6822      	ldr	r2, [r4, #0]
 800f750:	0610      	lsls	r0, r2, #24
 800f752:	f57f af60 	bpl.w	800f616 <_scanf_float+0x66>
 800f756:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f75a:	6022      	str	r2, [r4, #0]
 800f75c:	e7f4      	b.n	800f748 <_scanf_float+0x198>
 800f75e:	f1ba 0f00 	cmp.w	sl, #0
 800f762:	d10c      	bne.n	800f77e <_scanf_float+0x1ce>
 800f764:	b977      	cbnz	r7, 800f784 <_scanf_float+0x1d4>
 800f766:	6822      	ldr	r2, [r4, #0]
 800f768:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f76c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f770:	d108      	bne.n	800f784 <_scanf_float+0x1d4>
 800f772:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f776:	6022      	str	r2, [r4, #0]
 800f778:	f04f 0a01 	mov.w	sl, #1
 800f77c:	e7e4      	b.n	800f748 <_scanf_float+0x198>
 800f77e:	f1ba 0f02 	cmp.w	sl, #2
 800f782:	d050      	beq.n	800f826 <_scanf_float+0x276>
 800f784:	2d01      	cmp	r5, #1
 800f786:	d002      	beq.n	800f78e <_scanf_float+0x1de>
 800f788:	2d04      	cmp	r5, #4
 800f78a:	f47f af44 	bne.w	800f616 <_scanf_float+0x66>
 800f78e:	3501      	adds	r5, #1
 800f790:	b2ed      	uxtb	r5, r5
 800f792:	e7d9      	b.n	800f748 <_scanf_float+0x198>
 800f794:	f1ba 0f01 	cmp.w	sl, #1
 800f798:	f47f af3d 	bne.w	800f616 <_scanf_float+0x66>
 800f79c:	f04f 0a02 	mov.w	sl, #2
 800f7a0:	e7d2      	b.n	800f748 <_scanf_float+0x198>
 800f7a2:	b975      	cbnz	r5, 800f7c2 <_scanf_float+0x212>
 800f7a4:	2f00      	cmp	r7, #0
 800f7a6:	f47f af37 	bne.w	800f618 <_scanf_float+0x68>
 800f7aa:	6822      	ldr	r2, [r4, #0]
 800f7ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f7b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f7b4:	f040 8103 	bne.w	800f9be <_scanf_float+0x40e>
 800f7b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f7bc:	6022      	str	r2, [r4, #0]
 800f7be:	2501      	movs	r5, #1
 800f7c0:	e7c2      	b.n	800f748 <_scanf_float+0x198>
 800f7c2:	2d03      	cmp	r5, #3
 800f7c4:	d0e3      	beq.n	800f78e <_scanf_float+0x1de>
 800f7c6:	2d05      	cmp	r5, #5
 800f7c8:	e7df      	b.n	800f78a <_scanf_float+0x1da>
 800f7ca:	2d02      	cmp	r5, #2
 800f7cc:	f47f af23 	bne.w	800f616 <_scanf_float+0x66>
 800f7d0:	2503      	movs	r5, #3
 800f7d2:	e7b9      	b.n	800f748 <_scanf_float+0x198>
 800f7d4:	2d06      	cmp	r5, #6
 800f7d6:	f47f af1e 	bne.w	800f616 <_scanf_float+0x66>
 800f7da:	2507      	movs	r5, #7
 800f7dc:	e7b4      	b.n	800f748 <_scanf_float+0x198>
 800f7de:	6822      	ldr	r2, [r4, #0]
 800f7e0:	0591      	lsls	r1, r2, #22
 800f7e2:	f57f af18 	bpl.w	800f616 <_scanf_float+0x66>
 800f7e6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f7ea:	6022      	str	r2, [r4, #0]
 800f7ec:	9702      	str	r7, [sp, #8]
 800f7ee:	e7ab      	b.n	800f748 <_scanf_float+0x198>
 800f7f0:	6822      	ldr	r2, [r4, #0]
 800f7f2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f7f6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f7fa:	d005      	beq.n	800f808 <_scanf_float+0x258>
 800f7fc:	0550      	lsls	r0, r2, #21
 800f7fe:	f57f af0a 	bpl.w	800f616 <_scanf_float+0x66>
 800f802:	2f00      	cmp	r7, #0
 800f804:	f000 80db 	beq.w	800f9be <_scanf_float+0x40e>
 800f808:	0591      	lsls	r1, r2, #22
 800f80a:	bf58      	it	pl
 800f80c:	9902      	ldrpl	r1, [sp, #8]
 800f80e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f812:	bf58      	it	pl
 800f814:	1a79      	subpl	r1, r7, r1
 800f816:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f81a:	bf58      	it	pl
 800f81c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f820:	6022      	str	r2, [r4, #0]
 800f822:	2700      	movs	r7, #0
 800f824:	e790      	b.n	800f748 <_scanf_float+0x198>
 800f826:	f04f 0a03 	mov.w	sl, #3
 800f82a:	e78d      	b.n	800f748 <_scanf_float+0x198>
 800f82c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f830:	4649      	mov	r1, r9
 800f832:	4640      	mov	r0, r8
 800f834:	4798      	blx	r3
 800f836:	2800      	cmp	r0, #0
 800f838:	f43f aedf 	beq.w	800f5fa <_scanf_float+0x4a>
 800f83c:	e6eb      	b.n	800f616 <_scanf_float+0x66>
 800f83e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f846:	464a      	mov	r2, r9
 800f848:	4640      	mov	r0, r8
 800f84a:	4798      	blx	r3
 800f84c:	6923      	ldr	r3, [r4, #16]
 800f84e:	3b01      	subs	r3, #1
 800f850:	6123      	str	r3, [r4, #16]
 800f852:	e6eb      	b.n	800f62c <_scanf_float+0x7c>
 800f854:	1e6b      	subs	r3, r5, #1
 800f856:	2b06      	cmp	r3, #6
 800f858:	d824      	bhi.n	800f8a4 <_scanf_float+0x2f4>
 800f85a:	2d02      	cmp	r5, #2
 800f85c:	d836      	bhi.n	800f8cc <_scanf_float+0x31c>
 800f85e:	9b01      	ldr	r3, [sp, #4]
 800f860:	429e      	cmp	r6, r3
 800f862:	f67f aee7 	bls.w	800f634 <_scanf_float+0x84>
 800f866:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f86a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f86e:	464a      	mov	r2, r9
 800f870:	4640      	mov	r0, r8
 800f872:	4798      	blx	r3
 800f874:	6923      	ldr	r3, [r4, #16]
 800f876:	3b01      	subs	r3, #1
 800f878:	6123      	str	r3, [r4, #16]
 800f87a:	e7f0      	b.n	800f85e <_scanf_float+0x2ae>
 800f87c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f880:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f884:	464a      	mov	r2, r9
 800f886:	4640      	mov	r0, r8
 800f888:	4798      	blx	r3
 800f88a:	6923      	ldr	r3, [r4, #16]
 800f88c:	3b01      	subs	r3, #1
 800f88e:	6123      	str	r3, [r4, #16]
 800f890:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f894:	fa5f fa8a 	uxtb.w	sl, sl
 800f898:	f1ba 0f02 	cmp.w	sl, #2
 800f89c:	d1ee      	bne.n	800f87c <_scanf_float+0x2cc>
 800f89e:	3d03      	subs	r5, #3
 800f8a0:	b2ed      	uxtb	r5, r5
 800f8a2:	1b76      	subs	r6, r6, r5
 800f8a4:	6823      	ldr	r3, [r4, #0]
 800f8a6:	05da      	lsls	r2, r3, #23
 800f8a8:	d530      	bpl.n	800f90c <_scanf_float+0x35c>
 800f8aa:	055b      	lsls	r3, r3, #21
 800f8ac:	d511      	bpl.n	800f8d2 <_scanf_float+0x322>
 800f8ae:	9b01      	ldr	r3, [sp, #4]
 800f8b0:	429e      	cmp	r6, r3
 800f8b2:	f67f aebf 	bls.w	800f634 <_scanf_float+0x84>
 800f8b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8be:	464a      	mov	r2, r9
 800f8c0:	4640      	mov	r0, r8
 800f8c2:	4798      	blx	r3
 800f8c4:	6923      	ldr	r3, [r4, #16]
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	6123      	str	r3, [r4, #16]
 800f8ca:	e7f0      	b.n	800f8ae <_scanf_float+0x2fe>
 800f8cc:	46aa      	mov	sl, r5
 800f8ce:	46b3      	mov	fp, r6
 800f8d0:	e7de      	b.n	800f890 <_scanf_float+0x2e0>
 800f8d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f8d6:	6923      	ldr	r3, [r4, #16]
 800f8d8:	2965      	cmp	r1, #101	@ 0x65
 800f8da:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8de:	f106 35ff 	add.w	r5, r6, #4294967295
 800f8e2:	6123      	str	r3, [r4, #16]
 800f8e4:	d00c      	beq.n	800f900 <_scanf_float+0x350>
 800f8e6:	2945      	cmp	r1, #69	@ 0x45
 800f8e8:	d00a      	beq.n	800f900 <_scanf_float+0x350>
 800f8ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8ee:	464a      	mov	r2, r9
 800f8f0:	4640      	mov	r0, r8
 800f8f2:	4798      	blx	r3
 800f8f4:	6923      	ldr	r3, [r4, #16]
 800f8f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	1eb5      	subs	r5, r6, #2
 800f8fe:	6123      	str	r3, [r4, #16]
 800f900:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f904:	464a      	mov	r2, r9
 800f906:	4640      	mov	r0, r8
 800f908:	4798      	blx	r3
 800f90a:	462e      	mov	r6, r5
 800f90c:	6822      	ldr	r2, [r4, #0]
 800f90e:	f012 0210 	ands.w	r2, r2, #16
 800f912:	d001      	beq.n	800f918 <_scanf_float+0x368>
 800f914:	2000      	movs	r0, #0
 800f916:	e68e      	b.n	800f636 <_scanf_float+0x86>
 800f918:	7032      	strb	r2, [r6, #0]
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f924:	d125      	bne.n	800f972 <_scanf_float+0x3c2>
 800f926:	9b02      	ldr	r3, [sp, #8]
 800f928:	429f      	cmp	r7, r3
 800f92a:	d00a      	beq.n	800f942 <_scanf_float+0x392>
 800f92c:	1bda      	subs	r2, r3, r7
 800f92e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f932:	429e      	cmp	r6, r3
 800f934:	bf28      	it	cs
 800f936:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f93a:	4922      	ldr	r1, [pc, #136]	@ (800f9c4 <_scanf_float+0x414>)
 800f93c:	4630      	mov	r0, r6
 800f93e:	f000 f93d 	bl	800fbbc <siprintf>
 800f942:	9901      	ldr	r1, [sp, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	4640      	mov	r0, r8
 800f948:	f002 fbd6 	bl	80120f8 <_strtod_r>
 800f94c:	9b03      	ldr	r3, [sp, #12]
 800f94e:	6821      	ldr	r1, [r4, #0]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f011 0f02 	tst.w	r1, #2
 800f956:	ec57 6b10 	vmov	r6, r7, d0
 800f95a:	f103 0204 	add.w	r2, r3, #4
 800f95e:	d015      	beq.n	800f98c <_scanf_float+0x3dc>
 800f960:	9903      	ldr	r1, [sp, #12]
 800f962:	600a      	str	r2, [r1, #0]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	e9c3 6700 	strd	r6, r7, [r3]
 800f96a:	68e3      	ldr	r3, [r4, #12]
 800f96c:	3301      	adds	r3, #1
 800f96e:	60e3      	str	r3, [r4, #12]
 800f970:	e7d0      	b.n	800f914 <_scanf_float+0x364>
 800f972:	9b04      	ldr	r3, [sp, #16]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d0e4      	beq.n	800f942 <_scanf_float+0x392>
 800f978:	9905      	ldr	r1, [sp, #20]
 800f97a:	230a      	movs	r3, #10
 800f97c:	3101      	adds	r1, #1
 800f97e:	4640      	mov	r0, r8
 800f980:	f7ff f9b4 	bl	800ecec <_strtol_r>
 800f984:	9b04      	ldr	r3, [sp, #16]
 800f986:	9e05      	ldr	r6, [sp, #20]
 800f988:	1ac2      	subs	r2, r0, r3
 800f98a:	e7d0      	b.n	800f92e <_scanf_float+0x37e>
 800f98c:	f011 0f04 	tst.w	r1, #4
 800f990:	9903      	ldr	r1, [sp, #12]
 800f992:	600a      	str	r2, [r1, #0]
 800f994:	d1e6      	bne.n	800f964 <_scanf_float+0x3b4>
 800f996:	681d      	ldr	r5, [r3, #0]
 800f998:	4632      	mov	r2, r6
 800f99a:	463b      	mov	r3, r7
 800f99c:	4630      	mov	r0, r6
 800f99e:	4639      	mov	r1, r7
 800f9a0:	f7f1 f8d4 	bl	8000b4c <__aeabi_dcmpun>
 800f9a4:	b128      	cbz	r0, 800f9b2 <_scanf_float+0x402>
 800f9a6:	4808      	ldr	r0, [pc, #32]	@ (800f9c8 <_scanf_float+0x418>)
 800f9a8:	f000 fa4e 	bl	800fe48 <nanf>
 800f9ac:	ed85 0a00 	vstr	s0, [r5]
 800f9b0:	e7db      	b.n	800f96a <_scanf_float+0x3ba>
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	f7f1 f927 	bl	8000c08 <__aeabi_d2f>
 800f9ba:	6028      	str	r0, [r5, #0]
 800f9bc:	e7d5      	b.n	800f96a <_scanf_float+0x3ba>
 800f9be:	2700      	movs	r7, #0
 800f9c0:	e62e      	b.n	800f620 <_scanf_float+0x70>
 800f9c2:	bf00      	nop
 800f9c4:	0803e0b5 	.word	0x0803e0b5
 800f9c8:	0803e1f6 	.word	0x0803e1f6

0800f9cc <std>:
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	b510      	push	{r4, lr}
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	e9c0 3300 	strd	r3, r3, [r0]
 800f9d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9da:	6083      	str	r3, [r0, #8]
 800f9dc:	8181      	strh	r1, [r0, #12]
 800f9de:	6643      	str	r3, [r0, #100]	@ 0x64
 800f9e0:	81c2      	strh	r2, [r0, #14]
 800f9e2:	6183      	str	r3, [r0, #24]
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	2208      	movs	r2, #8
 800f9e8:	305c      	adds	r0, #92	@ 0x5c
 800f9ea:	f000 f966 	bl	800fcba <memset>
 800f9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800fa24 <std+0x58>)
 800f9f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800fa28 <std+0x5c>)
 800f9f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800fa2c <std+0x60>)
 800f9f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800fa30 <std+0x64>)
 800f9fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800f9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800fa34 <std+0x68>)
 800fa00:	6224      	str	r4, [r4, #32]
 800fa02:	429c      	cmp	r4, r3
 800fa04:	d006      	beq.n	800fa14 <std+0x48>
 800fa06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa0a:	4294      	cmp	r4, r2
 800fa0c:	d002      	beq.n	800fa14 <std+0x48>
 800fa0e:	33d0      	adds	r3, #208	@ 0xd0
 800fa10:	429c      	cmp	r4, r3
 800fa12:	d105      	bne.n	800fa20 <std+0x54>
 800fa14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa1c:	f000 ba02 	b.w	800fe24 <__retarget_lock_init_recursive>
 800fa20:	bd10      	pop	{r4, pc}
 800fa22:	bf00      	nop
 800fa24:	0800fc01 	.word	0x0800fc01
 800fa28:	0800fc23 	.word	0x0800fc23
 800fa2c:	0800fc5b 	.word	0x0800fc5b
 800fa30:	0800fc7f 	.word	0x0800fc7f
 800fa34:	20001250 	.word	0x20001250

0800fa38 <stdio_exit_handler>:
 800fa38:	4a02      	ldr	r2, [pc, #8]	@ (800fa44 <stdio_exit_handler+0xc>)
 800fa3a:	4903      	ldr	r1, [pc, #12]	@ (800fa48 <stdio_exit_handler+0x10>)
 800fa3c:	4803      	ldr	r0, [pc, #12]	@ (800fa4c <stdio_exit_handler+0x14>)
 800fa3e:	f000 b869 	b.w	800fb14 <_fwalk_sglue>
 800fa42:	bf00      	nop
 800fa44:	20000054 	.word	0x20000054
 800fa48:	080124bd 	.word	0x080124bd
 800fa4c:	20000064 	.word	0x20000064

0800fa50 <cleanup_stdio>:
 800fa50:	6841      	ldr	r1, [r0, #4]
 800fa52:	4b0c      	ldr	r3, [pc, #48]	@ (800fa84 <cleanup_stdio+0x34>)
 800fa54:	4299      	cmp	r1, r3
 800fa56:	b510      	push	{r4, lr}
 800fa58:	4604      	mov	r4, r0
 800fa5a:	d001      	beq.n	800fa60 <cleanup_stdio+0x10>
 800fa5c:	f002 fd2e 	bl	80124bc <_fflush_r>
 800fa60:	68a1      	ldr	r1, [r4, #8]
 800fa62:	4b09      	ldr	r3, [pc, #36]	@ (800fa88 <cleanup_stdio+0x38>)
 800fa64:	4299      	cmp	r1, r3
 800fa66:	d002      	beq.n	800fa6e <cleanup_stdio+0x1e>
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f002 fd27 	bl	80124bc <_fflush_r>
 800fa6e:	68e1      	ldr	r1, [r4, #12]
 800fa70:	4b06      	ldr	r3, [pc, #24]	@ (800fa8c <cleanup_stdio+0x3c>)
 800fa72:	4299      	cmp	r1, r3
 800fa74:	d004      	beq.n	800fa80 <cleanup_stdio+0x30>
 800fa76:	4620      	mov	r0, r4
 800fa78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa7c:	f002 bd1e 	b.w	80124bc <_fflush_r>
 800fa80:	bd10      	pop	{r4, pc}
 800fa82:	bf00      	nop
 800fa84:	20001250 	.word	0x20001250
 800fa88:	200012b8 	.word	0x200012b8
 800fa8c:	20001320 	.word	0x20001320

0800fa90 <global_stdio_init.part.0>:
 800fa90:	b510      	push	{r4, lr}
 800fa92:	4b0b      	ldr	r3, [pc, #44]	@ (800fac0 <global_stdio_init.part.0+0x30>)
 800fa94:	4c0b      	ldr	r4, [pc, #44]	@ (800fac4 <global_stdio_init.part.0+0x34>)
 800fa96:	4a0c      	ldr	r2, [pc, #48]	@ (800fac8 <global_stdio_init.part.0+0x38>)
 800fa98:	601a      	str	r2, [r3, #0]
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	2104      	movs	r1, #4
 800faa0:	f7ff ff94 	bl	800f9cc <std>
 800faa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800faa8:	2201      	movs	r2, #1
 800faaa:	2109      	movs	r1, #9
 800faac:	f7ff ff8e 	bl	800f9cc <std>
 800fab0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fab4:	2202      	movs	r2, #2
 800fab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faba:	2112      	movs	r1, #18
 800fabc:	f7ff bf86 	b.w	800f9cc <std>
 800fac0:	20001388 	.word	0x20001388
 800fac4:	20001250 	.word	0x20001250
 800fac8:	0800fa39 	.word	0x0800fa39

0800facc <__sfp_lock_acquire>:
 800facc:	4801      	ldr	r0, [pc, #4]	@ (800fad4 <__sfp_lock_acquire+0x8>)
 800face:	f000 b9aa 	b.w	800fe26 <__retarget_lock_acquire_recursive>
 800fad2:	bf00      	nop
 800fad4:	20001391 	.word	0x20001391

0800fad8 <__sfp_lock_release>:
 800fad8:	4801      	ldr	r0, [pc, #4]	@ (800fae0 <__sfp_lock_release+0x8>)
 800fada:	f000 b9a5 	b.w	800fe28 <__retarget_lock_release_recursive>
 800fade:	bf00      	nop
 800fae0:	20001391 	.word	0x20001391

0800fae4 <__sinit>:
 800fae4:	b510      	push	{r4, lr}
 800fae6:	4604      	mov	r4, r0
 800fae8:	f7ff fff0 	bl	800facc <__sfp_lock_acquire>
 800faec:	6a23      	ldr	r3, [r4, #32]
 800faee:	b11b      	cbz	r3, 800faf8 <__sinit+0x14>
 800faf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faf4:	f7ff bff0 	b.w	800fad8 <__sfp_lock_release>
 800faf8:	4b04      	ldr	r3, [pc, #16]	@ (800fb0c <__sinit+0x28>)
 800fafa:	6223      	str	r3, [r4, #32]
 800fafc:	4b04      	ldr	r3, [pc, #16]	@ (800fb10 <__sinit+0x2c>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d1f5      	bne.n	800faf0 <__sinit+0xc>
 800fb04:	f7ff ffc4 	bl	800fa90 <global_stdio_init.part.0>
 800fb08:	e7f2      	b.n	800faf0 <__sinit+0xc>
 800fb0a:	bf00      	nop
 800fb0c:	0800fa51 	.word	0x0800fa51
 800fb10:	20001388 	.word	0x20001388

0800fb14 <_fwalk_sglue>:
 800fb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb18:	4607      	mov	r7, r0
 800fb1a:	4688      	mov	r8, r1
 800fb1c:	4614      	mov	r4, r2
 800fb1e:	2600      	movs	r6, #0
 800fb20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb24:	f1b9 0901 	subs.w	r9, r9, #1
 800fb28:	d505      	bpl.n	800fb36 <_fwalk_sglue+0x22>
 800fb2a:	6824      	ldr	r4, [r4, #0]
 800fb2c:	2c00      	cmp	r4, #0
 800fb2e:	d1f7      	bne.n	800fb20 <_fwalk_sglue+0xc>
 800fb30:	4630      	mov	r0, r6
 800fb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb36:	89ab      	ldrh	r3, [r5, #12]
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d907      	bls.n	800fb4c <_fwalk_sglue+0x38>
 800fb3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb40:	3301      	adds	r3, #1
 800fb42:	d003      	beq.n	800fb4c <_fwalk_sglue+0x38>
 800fb44:	4629      	mov	r1, r5
 800fb46:	4638      	mov	r0, r7
 800fb48:	47c0      	blx	r8
 800fb4a:	4306      	orrs	r6, r0
 800fb4c:	3568      	adds	r5, #104	@ 0x68
 800fb4e:	e7e9      	b.n	800fb24 <_fwalk_sglue+0x10>

0800fb50 <sniprintf>:
 800fb50:	b40c      	push	{r2, r3}
 800fb52:	b530      	push	{r4, r5, lr}
 800fb54:	4b18      	ldr	r3, [pc, #96]	@ (800fbb8 <sniprintf+0x68>)
 800fb56:	1e0c      	subs	r4, r1, #0
 800fb58:	681d      	ldr	r5, [r3, #0]
 800fb5a:	b09d      	sub	sp, #116	@ 0x74
 800fb5c:	da08      	bge.n	800fb70 <sniprintf+0x20>
 800fb5e:	238b      	movs	r3, #139	@ 0x8b
 800fb60:	602b      	str	r3, [r5, #0]
 800fb62:	f04f 30ff 	mov.w	r0, #4294967295
 800fb66:	b01d      	add	sp, #116	@ 0x74
 800fb68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb6c:	b002      	add	sp, #8
 800fb6e:	4770      	bx	lr
 800fb70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fb74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb78:	f04f 0300 	mov.w	r3, #0
 800fb7c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fb7e:	bf14      	ite	ne
 800fb80:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb84:	4623      	moveq	r3, r4
 800fb86:	9304      	str	r3, [sp, #16]
 800fb88:	9307      	str	r3, [sp, #28]
 800fb8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb8e:	9002      	str	r0, [sp, #8]
 800fb90:	9006      	str	r0, [sp, #24]
 800fb92:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb96:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fb98:	ab21      	add	r3, sp, #132	@ 0x84
 800fb9a:	a902      	add	r1, sp, #8
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	9301      	str	r3, [sp, #4]
 800fba0:	f002 fb0c 	bl	80121bc <_svfiprintf_r>
 800fba4:	1c43      	adds	r3, r0, #1
 800fba6:	bfbc      	itt	lt
 800fba8:	238b      	movlt	r3, #139	@ 0x8b
 800fbaa:	602b      	strlt	r3, [r5, #0]
 800fbac:	2c00      	cmp	r4, #0
 800fbae:	d0da      	beq.n	800fb66 <sniprintf+0x16>
 800fbb0:	9b02      	ldr	r3, [sp, #8]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	701a      	strb	r2, [r3, #0]
 800fbb6:	e7d6      	b.n	800fb66 <sniprintf+0x16>
 800fbb8:	20000060 	.word	0x20000060

0800fbbc <siprintf>:
 800fbbc:	b40e      	push	{r1, r2, r3}
 800fbbe:	b510      	push	{r4, lr}
 800fbc0:	b09d      	sub	sp, #116	@ 0x74
 800fbc2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fbc4:	9002      	str	r0, [sp, #8]
 800fbc6:	9006      	str	r0, [sp, #24]
 800fbc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fbcc:	480a      	ldr	r0, [pc, #40]	@ (800fbf8 <siprintf+0x3c>)
 800fbce:	9107      	str	r1, [sp, #28]
 800fbd0:	9104      	str	r1, [sp, #16]
 800fbd2:	490a      	ldr	r1, [pc, #40]	@ (800fbfc <siprintf+0x40>)
 800fbd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbd8:	9105      	str	r1, [sp, #20]
 800fbda:	2400      	movs	r4, #0
 800fbdc:	a902      	add	r1, sp, #8
 800fbde:	6800      	ldr	r0, [r0, #0]
 800fbe0:	9301      	str	r3, [sp, #4]
 800fbe2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fbe4:	f002 faea 	bl	80121bc <_svfiprintf_r>
 800fbe8:	9b02      	ldr	r3, [sp, #8]
 800fbea:	701c      	strb	r4, [r3, #0]
 800fbec:	b01d      	add	sp, #116	@ 0x74
 800fbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbf2:	b003      	add	sp, #12
 800fbf4:	4770      	bx	lr
 800fbf6:	bf00      	nop
 800fbf8:	20000060 	.word	0x20000060
 800fbfc:	ffff0208 	.word	0xffff0208

0800fc00 <__sread>:
 800fc00:	b510      	push	{r4, lr}
 800fc02:	460c      	mov	r4, r1
 800fc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc08:	f000 f8ae 	bl	800fd68 <_read_r>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	bfab      	itete	ge
 800fc10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc12:	89a3      	ldrhlt	r3, [r4, #12]
 800fc14:	181b      	addge	r3, r3, r0
 800fc16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc1a:	bfac      	ite	ge
 800fc1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc1e:	81a3      	strhlt	r3, [r4, #12]
 800fc20:	bd10      	pop	{r4, pc}

0800fc22 <__swrite>:
 800fc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc26:	461f      	mov	r7, r3
 800fc28:	898b      	ldrh	r3, [r1, #12]
 800fc2a:	05db      	lsls	r3, r3, #23
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	460c      	mov	r4, r1
 800fc30:	4616      	mov	r6, r2
 800fc32:	d505      	bpl.n	800fc40 <__swrite+0x1e>
 800fc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc38:	2302      	movs	r3, #2
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f000 f882 	bl	800fd44 <_lseek_r>
 800fc40:	89a3      	ldrh	r3, [r4, #12]
 800fc42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc4a:	81a3      	strh	r3, [r4, #12]
 800fc4c:	4632      	mov	r2, r6
 800fc4e:	463b      	mov	r3, r7
 800fc50:	4628      	mov	r0, r5
 800fc52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc56:	f000 b8a9 	b.w	800fdac <_write_r>

0800fc5a <__sseek>:
 800fc5a:	b510      	push	{r4, lr}
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc62:	f000 f86f 	bl	800fd44 <_lseek_r>
 800fc66:	1c43      	adds	r3, r0, #1
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	bf15      	itete	ne
 800fc6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc76:	81a3      	strheq	r3, [r4, #12]
 800fc78:	bf18      	it	ne
 800fc7a:	81a3      	strhne	r3, [r4, #12]
 800fc7c:	bd10      	pop	{r4, pc}

0800fc7e <__sclose>:
 800fc7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc82:	f000 b84f 	b.w	800fd24 <_close_r>

0800fc86 <memmove>:
 800fc86:	4288      	cmp	r0, r1
 800fc88:	b510      	push	{r4, lr}
 800fc8a:	eb01 0402 	add.w	r4, r1, r2
 800fc8e:	d902      	bls.n	800fc96 <memmove+0x10>
 800fc90:	4284      	cmp	r4, r0
 800fc92:	4623      	mov	r3, r4
 800fc94:	d807      	bhi.n	800fca6 <memmove+0x20>
 800fc96:	1e43      	subs	r3, r0, #1
 800fc98:	42a1      	cmp	r1, r4
 800fc9a:	d008      	beq.n	800fcae <memmove+0x28>
 800fc9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fca0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fca4:	e7f8      	b.n	800fc98 <memmove+0x12>
 800fca6:	4402      	add	r2, r0
 800fca8:	4601      	mov	r1, r0
 800fcaa:	428a      	cmp	r2, r1
 800fcac:	d100      	bne.n	800fcb0 <memmove+0x2a>
 800fcae:	bd10      	pop	{r4, pc}
 800fcb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcb8:	e7f7      	b.n	800fcaa <memmove+0x24>

0800fcba <memset>:
 800fcba:	4402      	add	r2, r0
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d100      	bne.n	800fcc4 <memset+0xa>
 800fcc2:	4770      	bx	lr
 800fcc4:	f803 1b01 	strb.w	r1, [r3], #1
 800fcc8:	e7f9      	b.n	800fcbe <memset+0x4>

0800fcca <strncmp>:
 800fcca:	b510      	push	{r4, lr}
 800fccc:	b16a      	cbz	r2, 800fcea <strncmp+0x20>
 800fcce:	3901      	subs	r1, #1
 800fcd0:	1884      	adds	r4, r0, r2
 800fcd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcd6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d103      	bne.n	800fce6 <strncmp+0x1c>
 800fcde:	42a0      	cmp	r0, r4
 800fce0:	d001      	beq.n	800fce6 <strncmp+0x1c>
 800fce2:	2a00      	cmp	r2, #0
 800fce4:	d1f5      	bne.n	800fcd2 <strncmp+0x8>
 800fce6:	1ad0      	subs	r0, r2, r3
 800fce8:	bd10      	pop	{r4, pc}
 800fcea:	4610      	mov	r0, r2
 800fcec:	e7fc      	b.n	800fce8 <strncmp+0x1e>

0800fcee <strstr>:
 800fcee:	780a      	ldrb	r2, [r1, #0]
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	b96a      	cbnz	r2, 800fd10 <strstr+0x22>
 800fcf4:	bd70      	pop	{r4, r5, r6, pc}
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d109      	bne.n	800fd0e <strstr+0x20>
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d0f6      	beq.n	800fcf4 <strstr+0x6>
 800fd06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fd0a:	429e      	cmp	r6, r3
 800fd0c:	d0f7      	beq.n	800fcfe <strstr+0x10>
 800fd0e:	3001      	adds	r0, #1
 800fd10:	7803      	ldrb	r3, [r0, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1ef      	bne.n	800fcf6 <strstr+0x8>
 800fd16:	4618      	mov	r0, r3
 800fd18:	e7ec      	b.n	800fcf4 <strstr+0x6>
	...

0800fd1c <_localeconv_r>:
 800fd1c:	4800      	ldr	r0, [pc, #0]	@ (800fd20 <_localeconv_r+0x4>)
 800fd1e:	4770      	bx	lr
 800fd20:	200001a0 	.word	0x200001a0

0800fd24 <_close_r>:
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4d06      	ldr	r5, [pc, #24]	@ (800fd40 <_close_r+0x1c>)
 800fd28:	2300      	movs	r3, #0
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	4608      	mov	r0, r1
 800fd2e:	602b      	str	r3, [r5, #0]
 800fd30:	f7f2 fcd4 	bl	80026dc <_close>
 800fd34:	1c43      	adds	r3, r0, #1
 800fd36:	d102      	bne.n	800fd3e <_close_r+0x1a>
 800fd38:	682b      	ldr	r3, [r5, #0]
 800fd3a:	b103      	cbz	r3, 800fd3e <_close_r+0x1a>
 800fd3c:	6023      	str	r3, [r4, #0]
 800fd3e:	bd38      	pop	{r3, r4, r5, pc}
 800fd40:	2000138c 	.word	0x2000138c

0800fd44 <_lseek_r>:
 800fd44:	b538      	push	{r3, r4, r5, lr}
 800fd46:	4d07      	ldr	r5, [pc, #28]	@ (800fd64 <_lseek_r+0x20>)
 800fd48:	4604      	mov	r4, r0
 800fd4a:	4608      	mov	r0, r1
 800fd4c:	4611      	mov	r1, r2
 800fd4e:	2200      	movs	r2, #0
 800fd50:	602a      	str	r2, [r5, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	f7f2 fce9 	bl	800272a <_lseek>
 800fd58:	1c43      	adds	r3, r0, #1
 800fd5a:	d102      	bne.n	800fd62 <_lseek_r+0x1e>
 800fd5c:	682b      	ldr	r3, [r5, #0]
 800fd5e:	b103      	cbz	r3, 800fd62 <_lseek_r+0x1e>
 800fd60:	6023      	str	r3, [r4, #0]
 800fd62:	bd38      	pop	{r3, r4, r5, pc}
 800fd64:	2000138c 	.word	0x2000138c

0800fd68 <_read_r>:
 800fd68:	b538      	push	{r3, r4, r5, lr}
 800fd6a:	4d07      	ldr	r5, [pc, #28]	@ (800fd88 <_read_r+0x20>)
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	4608      	mov	r0, r1
 800fd70:	4611      	mov	r1, r2
 800fd72:	2200      	movs	r2, #0
 800fd74:	602a      	str	r2, [r5, #0]
 800fd76:	461a      	mov	r2, r3
 800fd78:	f7f2 fc93 	bl	80026a2 <_read>
 800fd7c:	1c43      	adds	r3, r0, #1
 800fd7e:	d102      	bne.n	800fd86 <_read_r+0x1e>
 800fd80:	682b      	ldr	r3, [r5, #0]
 800fd82:	b103      	cbz	r3, 800fd86 <_read_r+0x1e>
 800fd84:	6023      	str	r3, [r4, #0]
 800fd86:	bd38      	pop	{r3, r4, r5, pc}
 800fd88:	2000138c 	.word	0x2000138c

0800fd8c <_sbrk_r>:
 800fd8c:	b538      	push	{r3, r4, r5, lr}
 800fd8e:	4d06      	ldr	r5, [pc, #24]	@ (800fda8 <_sbrk_r+0x1c>)
 800fd90:	2300      	movs	r3, #0
 800fd92:	4604      	mov	r4, r0
 800fd94:	4608      	mov	r0, r1
 800fd96:	602b      	str	r3, [r5, #0]
 800fd98:	f7f2 fcd4 	bl	8002744 <_sbrk>
 800fd9c:	1c43      	adds	r3, r0, #1
 800fd9e:	d102      	bne.n	800fda6 <_sbrk_r+0x1a>
 800fda0:	682b      	ldr	r3, [r5, #0]
 800fda2:	b103      	cbz	r3, 800fda6 <_sbrk_r+0x1a>
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	bd38      	pop	{r3, r4, r5, pc}
 800fda8:	2000138c 	.word	0x2000138c

0800fdac <_write_r>:
 800fdac:	b538      	push	{r3, r4, r5, lr}
 800fdae:	4d07      	ldr	r5, [pc, #28]	@ (800fdcc <_write_r+0x20>)
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	4608      	mov	r0, r1
 800fdb4:	4611      	mov	r1, r2
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	602a      	str	r2, [r5, #0]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	f7f1 fb10 	bl	80013e0 <_write>
 800fdc0:	1c43      	adds	r3, r0, #1
 800fdc2:	d102      	bne.n	800fdca <_write_r+0x1e>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	b103      	cbz	r3, 800fdca <_write_r+0x1e>
 800fdc8:	6023      	str	r3, [r4, #0]
 800fdca:	bd38      	pop	{r3, r4, r5, pc}
 800fdcc:	2000138c 	.word	0x2000138c

0800fdd0 <__errno>:
 800fdd0:	4b01      	ldr	r3, [pc, #4]	@ (800fdd8 <__errno+0x8>)
 800fdd2:	6818      	ldr	r0, [r3, #0]
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop
 800fdd8:	20000060 	.word	0x20000060

0800fddc <__libc_init_array>:
 800fddc:	b570      	push	{r4, r5, r6, lr}
 800fdde:	4d0d      	ldr	r5, [pc, #52]	@ (800fe14 <__libc_init_array+0x38>)
 800fde0:	4c0d      	ldr	r4, [pc, #52]	@ (800fe18 <__libc_init_array+0x3c>)
 800fde2:	1b64      	subs	r4, r4, r5
 800fde4:	10a4      	asrs	r4, r4, #2
 800fde6:	2600      	movs	r6, #0
 800fde8:	42a6      	cmp	r6, r4
 800fdea:	d109      	bne.n	800fe00 <__libc_init_array+0x24>
 800fdec:	4d0b      	ldr	r5, [pc, #44]	@ (800fe1c <__libc_init_array+0x40>)
 800fdee:	4c0c      	ldr	r4, [pc, #48]	@ (800fe20 <__libc_init_array+0x44>)
 800fdf0:	f003 fa0c 	bl	801320c <_init>
 800fdf4:	1b64      	subs	r4, r4, r5
 800fdf6:	10a4      	asrs	r4, r4, #2
 800fdf8:	2600      	movs	r6, #0
 800fdfa:	42a6      	cmp	r6, r4
 800fdfc:	d105      	bne.n	800fe0a <__libc_init_array+0x2e>
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}
 800fe00:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe04:	4798      	blx	r3
 800fe06:	3601      	adds	r6, #1
 800fe08:	e7ee      	b.n	800fde8 <__libc_init_array+0xc>
 800fe0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe0e:	4798      	blx	r3
 800fe10:	3601      	adds	r6, #1
 800fe12:	e7f2      	b.n	800fdfa <__libc_init_array+0x1e>
 800fe14:	0803e3b0 	.word	0x0803e3b0
 800fe18:	0803e3b0 	.word	0x0803e3b0
 800fe1c:	0803e3b0 	.word	0x0803e3b0
 800fe20:	0803e3b4 	.word	0x0803e3b4

0800fe24 <__retarget_lock_init_recursive>:
 800fe24:	4770      	bx	lr

0800fe26 <__retarget_lock_acquire_recursive>:
 800fe26:	4770      	bx	lr

0800fe28 <__retarget_lock_release_recursive>:
 800fe28:	4770      	bx	lr

0800fe2a <memcpy>:
 800fe2a:	440a      	add	r2, r1
 800fe2c:	4291      	cmp	r1, r2
 800fe2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe32:	d100      	bne.n	800fe36 <memcpy+0xc>
 800fe34:	4770      	bx	lr
 800fe36:	b510      	push	{r4, lr}
 800fe38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe40:	4291      	cmp	r1, r2
 800fe42:	d1f9      	bne.n	800fe38 <memcpy+0xe>
 800fe44:	bd10      	pop	{r4, pc}
	...

0800fe48 <nanf>:
 800fe48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fe50 <nanf+0x8>
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	7fc00000 	.word	0x7fc00000

0800fe54 <quorem>:
 800fe54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe58:	6903      	ldr	r3, [r0, #16]
 800fe5a:	690c      	ldr	r4, [r1, #16]
 800fe5c:	42a3      	cmp	r3, r4
 800fe5e:	4607      	mov	r7, r0
 800fe60:	db7e      	blt.n	800ff60 <quorem+0x10c>
 800fe62:	3c01      	subs	r4, #1
 800fe64:	f101 0814 	add.w	r8, r1, #20
 800fe68:	00a3      	lsls	r3, r4, #2
 800fe6a:	f100 0514 	add.w	r5, r0, #20
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe74:	9301      	str	r3, [sp, #4]
 800fe76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	429a      	cmp	r2, r3
 800fe82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe86:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe8a:	d32e      	bcc.n	800feea <quorem+0x96>
 800fe8c:	f04f 0a00 	mov.w	sl, #0
 800fe90:	46c4      	mov	ip, r8
 800fe92:	46ae      	mov	lr, r5
 800fe94:	46d3      	mov	fp, sl
 800fe96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe9a:	b298      	uxth	r0, r3
 800fe9c:	fb06 a000 	mla	r0, r6, r0, sl
 800fea0:	0c02      	lsrs	r2, r0, #16
 800fea2:	0c1b      	lsrs	r3, r3, #16
 800fea4:	fb06 2303 	mla	r3, r6, r3, r2
 800fea8:	f8de 2000 	ldr.w	r2, [lr]
 800feac:	b280      	uxth	r0, r0
 800feae:	b292      	uxth	r2, r2
 800feb0:	1a12      	subs	r2, r2, r0
 800feb2:	445a      	add	r2, fp
 800feb4:	f8de 0000 	ldr.w	r0, [lr]
 800feb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800febc:	b29b      	uxth	r3, r3
 800febe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fec2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fec6:	b292      	uxth	r2, r2
 800fec8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fecc:	45e1      	cmp	r9, ip
 800fece:	f84e 2b04 	str.w	r2, [lr], #4
 800fed2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fed6:	d2de      	bcs.n	800fe96 <quorem+0x42>
 800fed8:	9b00      	ldr	r3, [sp, #0]
 800feda:	58eb      	ldr	r3, [r5, r3]
 800fedc:	b92b      	cbnz	r3, 800feea <quorem+0x96>
 800fede:	9b01      	ldr	r3, [sp, #4]
 800fee0:	3b04      	subs	r3, #4
 800fee2:	429d      	cmp	r5, r3
 800fee4:	461a      	mov	r2, r3
 800fee6:	d32f      	bcc.n	800ff48 <quorem+0xf4>
 800fee8:	613c      	str	r4, [r7, #16]
 800feea:	4638      	mov	r0, r7
 800feec:	f001 f912 	bl	8011114 <__mcmp>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	db25      	blt.n	800ff40 <quorem+0xec>
 800fef4:	4629      	mov	r1, r5
 800fef6:	2000      	movs	r0, #0
 800fef8:	f858 2b04 	ldr.w	r2, [r8], #4
 800fefc:	f8d1 c000 	ldr.w	ip, [r1]
 800ff00:	fa1f fe82 	uxth.w	lr, r2
 800ff04:	fa1f f38c 	uxth.w	r3, ip
 800ff08:	eba3 030e 	sub.w	r3, r3, lr
 800ff0c:	4403      	add	r3, r0
 800ff0e:	0c12      	lsrs	r2, r2, #16
 800ff10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ff14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff1e:	45c1      	cmp	r9, r8
 800ff20:	f841 3b04 	str.w	r3, [r1], #4
 800ff24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ff28:	d2e6      	bcs.n	800fef8 <quorem+0xa4>
 800ff2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff32:	b922      	cbnz	r2, 800ff3e <quorem+0xea>
 800ff34:	3b04      	subs	r3, #4
 800ff36:	429d      	cmp	r5, r3
 800ff38:	461a      	mov	r2, r3
 800ff3a:	d30b      	bcc.n	800ff54 <quorem+0x100>
 800ff3c:	613c      	str	r4, [r7, #16]
 800ff3e:	3601      	adds	r6, #1
 800ff40:	4630      	mov	r0, r6
 800ff42:	b003      	add	sp, #12
 800ff44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff48:	6812      	ldr	r2, [r2, #0]
 800ff4a:	3b04      	subs	r3, #4
 800ff4c:	2a00      	cmp	r2, #0
 800ff4e:	d1cb      	bne.n	800fee8 <quorem+0x94>
 800ff50:	3c01      	subs	r4, #1
 800ff52:	e7c6      	b.n	800fee2 <quorem+0x8e>
 800ff54:	6812      	ldr	r2, [r2, #0]
 800ff56:	3b04      	subs	r3, #4
 800ff58:	2a00      	cmp	r2, #0
 800ff5a:	d1ef      	bne.n	800ff3c <quorem+0xe8>
 800ff5c:	3c01      	subs	r4, #1
 800ff5e:	e7ea      	b.n	800ff36 <quorem+0xe2>
 800ff60:	2000      	movs	r0, #0
 800ff62:	e7ee      	b.n	800ff42 <quorem+0xee>
 800ff64:	0000      	movs	r0, r0
	...

0800ff68 <_dtoa_r>:
 800ff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	69c7      	ldr	r7, [r0, #28]
 800ff6e:	b097      	sub	sp, #92	@ 0x5c
 800ff70:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ff74:	ec55 4b10 	vmov	r4, r5, d0
 800ff78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ff7a:	9107      	str	r1, [sp, #28]
 800ff7c:	4681      	mov	r9, r0
 800ff7e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff80:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff82:	b97f      	cbnz	r7, 800ffa4 <_dtoa_r+0x3c>
 800ff84:	2010      	movs	r0, #16
 800ff86:	f7fe fd79 	bl	800ea7c <malloc>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ff90:	b920      	cbnz	r0, 800ff9c <_dtoa_r+0x34>
 800ff92:	4ba9      	ldr	r3, [pc, #676]	@ (8010238 <_dtoa_r+0x2d0>)
 800ff94:	21ef      	movs	r1, #239	@ 0xef
 800ff96:	48a9      	ldr	r0, [pc, #676]	@ (801023c <_dtoa_r+0x2d4>)
 800ff98:	f002 fac2 	bl	8012520 <__assert_func>
 800ff9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ffa0:	6007      	str	r7, [r0, #0]
 800ffa2:	60c7      	str	r7, [r0, #12]
 800ffa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ffa8:	6819      	ldr	r1, [r3, #0]
 800ffaa:	b159      	cbz	r1, 800ffc4 <_dtoa_r+0x5c>
 800ffac:	685a      	ldr	r2, [r3, #4]
 800ffae:	604a      	str	r2, [r1, #4]
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	4093      	lsls	r3, r2
 800ffb4:	608b      	str	r3, [r1, #8]
 800ffb6:	4648      	mov	r0, r9
 800ffb8:	f000 fe30 	bl	8010c1c <_Bfree>
 800ffbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	601a      	str	r2, [r3, #0]
 800ffc4:	1e2b      	subs	r3, r5, #0
 800ffc6:	bfb9      	ittee	lt
 800ffc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ffcc:	9305      	strlt	r3, [sp, #20]
 800ffce:	2300      	movge	r3, #0
 800ffd0:	6033      	strge	r3, [r6, #0]
 800ffd2:	9f05      	ldr	r7, [sp, #20]
 800ffd4:	4b9a      	ldr	r3, [pc, #616]	@ (8010240 <_dtoa_r+0x2d8>)
 800ffd6:	bfbc      	itt	lt
 800ffd8:	2201      	movlt	r2, #1
 800ffda:	6032      	strlt	r2, [r6, #0]
 800ffdc:	43bb      	bics	r3, r7
 800ffde:	d112      	bne.n	8010006 <_dtoa_r+0x9e>
 800ffe0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ffe2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ffe6:	6013      	str	r3, [r2, #0]
 800ffe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ffec:	4323      	orrs	r3, r4
 800ffee:	f000 855a 	beq.w	8010aa6 <_dtoa_r+0xb3e>
 800fff2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fff4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010254 <_dtoa_r+0x2ec>
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f000 855c 	beq.w	8010ab6 <_dtoa_r+0xb4e>
 800fffe:	f10a 0303 	add.w	r3, sl, #3
 8010002:	f000 bd56 	b.w	8010ab2 <_dtoa_r+0xb4a>
 8010006:	ed9d 7b04 	vldr	d7, [sp, #16]
 801000a:	2200      	movs	r2, #0
 801000c:	ec51 0b17 	vmov	r0, r1, d7
 8010010:	2300      	movs	r3, #0
 8010012:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010016:	f7f0 fd67 	bl	8000ae8 <__aeabi_dcmpeq>
 801001a:	4680      	mov	r8, r0
 801001c:	b158      	cbz	r0, 8010036 <_dtoa_r+0xce>
 801001e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010020:	2301      	movs	r3, #1
 8010022:	6013      	str	r3, [r2, #0]
 8010024:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010026:	b113      	cbz	r3, 801002e <_dtoa_r+0xc6>
 8010028:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801002a:	4b86      	ldr	r3, [pc, #536]	@ (8010244 <_dtoa_r+0x2dc>)
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010258 <_dtoa_r+0x2f0>
 8010032:	f000 bd40 	b.w	8010ab6 <_dtoa_r+0xb4e>
 8010036:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801003a:	aa14      	add	r2, sp, #80	@ 0x50
 801003c:	a915      	add	r1, sp, #84	@ 0x54
 801003e:	4648      	mov	r0, r9
 8010040:	f001 f988 	bl	8011354 <__d2b>
 8010044:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010048:	9002      	str	r0, [sp, #8]
 801004a:	2e00      	cmp	r6, #0
 801004c:	d078      	beq.n	8010140 <_dtoa_r+0x1d8>
 801004e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010050:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801005c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010060:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010064:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010068:	4619      	mov	r1, r3
 801006a:	2200      	movs	r2, #0
 801006c:	4b76      	ldr	r3, [pc, #472]	@ (8010248 <_dtoa_r+0x2e0>)
 801006e:	f7f0 f91b 	bl	80002a8 <__aeabi_dsub>
 8010072:	a36b      	add	r3, pc, #428	@ (adr r3, 8010220 <_dtoa_r+0x2b8>)
 8010074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010078:	f7f0 face 	bl	8000618 <__aeabi_dmul>
 801007c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010228 <_dtoa_r+0x2c0>)
 801007e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010082:	f7f0 f913 	bl	80002ac <__adddf3>
 8010086:	4604      	mov	r4, r0
 8010088:	4630      	mov	r0, r6
 801008a:	460d      	mov	r5, r1
 801008c:	f7f0 fa5a 	bl	8000544 <__aeabi_i2d>
 8010090:	a367      	add	r3, pc, #412	@ (adr r3, 8010230 <_dtoa_r+0x2c8>)
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	f7f0 fabf 	bl	8000618 <__aeabi_dmul>
 801009a:	4602      	mov	r2, r0
 801009c:	460b      	mov	r3, r1
 801009e:	4620      	mov	r0, r4
 80100a0:	4629      	mov	r1, r5
 80100a2:	f7f0 f903 	bl	80002ac <__adddf3>
 80100a6:	4604      	mov	r4, r0
 80100a8:	460d      	mov	r5, r1
 80100aa:	f7f0 fd65 	bl	8000b78 <__aeabi_d2iz>
 80100ae:	2200      	movs	r2, #0
 80100b0:	4607      	mov	r7, r0
 80100b2:	2300      	movs	r3, #0
 80100b4:	4620      	mov	r0, r4
 80100b6:	4629      	mov	r1, r5
 80100b8:	f7f0 fd20 	bl	8000afc <__aeabi_dcmplt>
 80100bc:	b140      	cbz	r0, 80100d0 <_dtoa_r+0x168>
 80100be:	4638      	mov	r0, r7
 80100c0:	f7f0 fa40 	bl	8000544 <__aeabi_i2d>
 80100c4:	4622      	mov	r2, r4
 80100c6:	462b      	mov	r3, r5
 80100c8:	f7f0 fd0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80100cc:	b900      	cbnz	r0, 80100d0 <_dtoa_r+0x168>
 80100ce:	3f01      	subs	r7, #1
 80100d0:	2f16      	cmp	r7, #22
 80100d2:	d852      	bhi.n	801017a <_dtoa_r+0x212>
 80100d4:	4b5d      	ldr	r3, [pc, #372]	@ (801024c <_dtoa_r+0x2e4>)
 80100d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80100e2:	f7f0 fd0b 	bl	8000afc <__aeabi_dcmplt>
 80100e6:	2800      	cmp	r0, #0
 80100e8:	d049      	beq.n	801017e <_dtoa_r+0x216>
 80100ea:	3f01      	subs	r7, #1
 80100ec:	2300      	movs	r3, #0
 80100ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80100f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80100f2:	1b9b      	subs	r3, r3, r6
 80100f4:	1e5a      	subs	r2, r3, #1
 80100f6:	bf45      	ittet	mi
 80100f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80100fc:	9300      	strmi	r3, [sp, #0]
 80100fe:	2300      	movpl	r3, #0
 8010100:	2300      	movmi	r3, #0
 8010102:	9206      	str	r2, [sp, #24]
 8010104:	bf54      	ite	pl
 8010106:	9300      	strpl	r3, [sp, #0]
 8010108:	9306      	strmi	r3, [sp, #24]
 801010a:	2f00      	cmp	r7, #0
 801010c:	db39      	blt.n	8010182 <_dtoa_r+0x21a>
 801010e:	9b06      	ldr	r3, [sp, #24]
 8010110:	970d      	str	r7, [sp, #52]	@ 0x34
 8010112:	443b      	add	r3, r7
 8010114:	9306      	str	r3, [sp, #24]
 8010116:	2300      	movs	r3, #0
 8010118:	9308      	str	r3, [sp, #32]
 801011a:	9b07      	ldr	r3, [sp, #28]
 801011c:	2b09      	cmp	r3, #9
 801011e:	d863      	bhi.n	80101e8 <_dtoa_r+0x280>
 8010120:	2b05      	cmp	r3, #5
 8010122:	bfc4      	itt	gt
 8010124:	3b04      	subgt	r3, #4
 8010126:	9307      	strgt	r3, [sp, #28]
 8010128:	9b07      	ldr	r3, [sp, #28]
 801012a:	f1a3 0302 	sub.w	r3, r3, #2
 801012e:	bfcc      	ite	gt
 8010130:	2400      	movgt	r4, #0
 8010132:	2401      	movle	r4, #1
 8010134:	2b03      	cmp	r3, #3
 8010136:	d863      	bhi.n	8010200 <_dtoa_r+0x298>
 8010138:	e8df f003 	tbb	[pc, r3]
 801013c:	2b375452 	.word	0x2b375452
 8010140:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010144:	441e      	add	r6, r3
 8010146:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801014a:	2b20      	cmp	r3, #32
 801014c:	bfc1      	itttt	gt
 801014e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010152:	409f      	lslgt	r7, r3
 8010154:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010158:	fa24 f303 	lsrgt.w	r3, r4, r3
 801015c:	bfd6      	itet	le
 801015e:	f1c3 0320 	rsble	r3, r3, #32
 8010162:	ea47 0003 	orrgt.w	r0, r7, r3
 8010166:	fa04 f003 	lslle.w	r0, r4, r3
 801016a:	f7f0 f9db 	bl	8000524 <__aeabi_ui2d>
 801016e:	2201      	movs	r2, #1
 8010170:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010174:	3e01      	subs	r6, #1
 8010176:	9212      	str	r2, [sp, #72]	@ 0x48
 8010178:	e776      	b.n	8010068 <_dtoa_r+0x100>
 801017a:	2301      	movs	r3, #1
 801017c:	e7b7      	b.n	80100ee <_dtoa_r+0x186>
 801017e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010180:	e7b6      	b.n	80100f0 <_dtoa_r+0x188>
 8010182:	9b00      	ldr	r3, [sp, #0]
 8010184:	1bdb      	subs	r3, r3, r7
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	427b      	negs	r3, r7
 801018a:	9308      	str	r3, [sp, #32]
 801018c:	2300      	movs	r3, #0
 801018e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010190:	e7c3      	b.n	801011a <_dtoa_r+0x1b2>
 8010192:	2301      	movs	r3, #1
 8010194:	9309      	str	r3, [sp, #36]	@ 0x24
 8010196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010198:	eb07 0b03 	add.w	fp, r7, r3
 801019c:	f10b 0301 	add.w	r3, fp, #1
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	9303      	str	r3, [sp, #12]
 80101a4:	bfb8      	it	lt
 80101a6:	2301      	movlt	r3, #1
 80101a8:	e006      	b.n	80101b8 <_dtoa_r+0x250>
 80101aa:	2301      	movs	r3, #1
 80101ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80101ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	dd28      	ble.n	8010206 <_dtoa_r+0x29e>
 80101b4:	469b      	mov	fp, r3
 80101b6:	9303      	str	r3, [sp, #12]
 80101b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80101bc:	2100      	movs	r1, #0
 80101be:	2204      	movs	r2, #4
 80101c0:	f102 0514 	add.w	r5, r2, #20
 80101c4:	429d      	cmp	r5, r3
 80101c6:	d926      	bls.n	8010216 <_dtoa_r+0x2ae>
 80101c8:	6041      	str	r1, [r0, #4]
 80101ca:	4648      	mov	r0, r9
 80101cc:	f000 fce6 	bl	8010b9c <_Balloc>
 80101d0:	4682      	mov	sl, r0
 80101d2:	2800      	cmp	r0, #0
 80101d4:	d142      	bne.n	801025c <_dtoa_r+0x2f4>
 80101d6:	4b1e      	ldr	r3, [pc, #120]	@ (8010250 <_dtoa_r+0x2e8>)
 80101d8:	4602      	mov	r2, r0
 80101da:	f240 11af 	movw	r1, #431	@ 0x1af
 80101de:	e6da      	b.n	800ff96 <_dtoa_r+0x2e>
 80101e0:	2300      	movs	r3, #0
 80101e2:	e7e3      	b.n	80101ac <_dtoa_r+0x244>
 80101e4:	2300      	movs	r3, #0
 80101e6:	e7d5      	b.n	8010194 <_dtoa_r+0x22c>
 80101e8:	2401      	movs	r4, #1
 80101ea:	2300      	movs	r3, #0
 80101ec:	9307      	str	r3, [sp, #28]
 80101ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80101f0:	f04f 3bff 	mov.w	fp, #4294967295
 80101f4:	2200      	movs	r2, #0
 80101f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80101fa:	2312      	movs	r3, #18
 80101fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80101fe:	e7db      	b.n	80101b8 <_dtoa_r+0x250>
 8010200:	2301      	movs	r3, #1
 8010202:	9309      	str	r3, [sp, #36]	@ 0x24
 8010204:	e7f4      	b.n	80101f0 <_dtoa_r+0x288>
 8010206:	f04f 0b01 	mov.w	fp, #1
 801020a:	f8cd b00c 	str.w	fp, [sp, #12]
 801020e:	465b      	mov	r3, fp
 8010210:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010214:	e7d0      	b.n	80101b8 <_dtoa_r+0x250>
 8010216:	3101      	adds	r1, #1
 8010218:	0052      	lsls	r2, r2, #1
 801021a:	e7d1      	b.n	80101c0 <_dtoa_r+0x258>
 801021c:	f3af 8000 	nop.w
 8010220:	636f4361 	.word	0x636f4361
 8010224:	3fd287a7 	.word	0x3fd287a7
 8010228:	8b60c8b3 	.word	0x8b60c8b3
 801022c:	3fc68a28 	.word	0x3fc68a28
 8010230:	509f79fb 	.word	0x509f79fb
 8010234:	3fd34413 	.word	0x3fd34413
 8010238:	0803e0c7 	.word	0x0803e0c7
 801023c:	0803e0de 	.word	0x0803e0de
 8010240:	7ff00000 	.word	0x7ff00000
 8010244:	0803e092 	.word	0x0803e092
 8010248:	3ff80000 	.word	0x3ff80000
 801024c:	0803e290 	.word	0x0803e290
 8010250:	0803e136 	.word	0x0803e136
 8010254:	0803e0c3 	.word	0x0803e0c3
 8010258:	0803e091 	.word	0x0803e091
 801025c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010260:	6018      	str	r0, [r3, #0]
 8010262:	9b03      	ldr	r3, [sp, #12]
 8010264:	2b0e      	cmp	r3, #14
 8010266:	f200 80a1 	bhi.w	80103ac <_dtoa_r+0x444>
 801026a:	2c00      	cmp	r4, #0
 801026c:	f000 809e 	beq.w	80103ac <_dtoa_r+0x444>
 8010270:	2f00      	cmp	r7, #0
 8010272:	dd33      	ble.n	80102dc <_dtoa_r+0x374>
 8010274:	4b9c      	ldr	r3, [pc, #624]	@ (80104e8 <_dtoa_r+0x580>)
 8010276:	f007 020f 	and.w	r2, r7, #15
 801027a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801027e:	ed93 7b00 	vldr	d7, [r3]
 8010282:	05f8      	lsls	r0, r7, #23
 8010284:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010288:	ea4f 1427 	mov.w	r4, r7, asr #4
 801028c:	d516      	bpl.n	80102bc <_dtoa_r+0x354>
 801028e:	4b97      	ldr	r3, [pc, #604]	@ (80104ec <_dtoa_r+0x584>)
 8010290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010298:	f7f0 fae8 	bl	800086c <__aeabi_ddiv>
 801029c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102a0:	f004 040f 	and.w	r4, r4, #15
 80102a4:	2603      	movs	r6, #3
 80102a6:	4d91      	ldr	r5, [pc, #580]	@ (80104ec <_dtoa_r+0x584>)
 80102a8:	b954      	cbnz	r4, 80102c0 <_dtoa_r+0x358>
 80102aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80102ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102b2:	f7f0 fadb 	bl	800086c <__aeabi_ddiv>
 80102b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102ba:	e028      	b.n	801030e <_dtoa_r+0x3a6>
 80102bc:	2602      	movs	r6, #2
 80102be:	e7f2      	b.n	80102a6 <_dtoa_r+0x33e>
 80102c0:	07e1      	lsls	r1, r4, #31
 80102c2:	d508      	bpl.n	80102d6 <_dtoa_r+0x36e>
 80102c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80102c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80102cc:	f7f0 f9a4 	bl	8000618 <__aeabi_dmul>
 80102d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80102d4:	3601      	adds	r6, #1
 80102d6:	1064      	asrs	r4, r4, #1
 80102d8:	3508      	adds	r5, #8
 80102da:	e7e5      	b.n	80102a8 <_dtoa_r+0x340>
 80102dc:	f000 80af 	beq.w	801043e <_dtoa_r+0x4d6>
 80102e0:	427c      	negs	r4, r7
 80102e2:	4b81      	ldr	r3, [pc, #516]	@ (80104e8 <_dtoa_r+0x580>)
 80102e4:	4d81      	ldr	r5, [pc, #516]	@ (80104ec <_dtoa_r+0x584>)
 80102e6:	f004 020f 	and.w	r2, r4, #15
 80102ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80102f6:	f7f0 f98f 	bl	8000618 <__aeabi_dmul>
 80102fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102fe:	1124      	asrs	r4, r4, #4
 8010300:	2300      	movs	r3, #0
 8010302:	2602      	movs	r6, #2
 8010304:	2c00      	cmp	r4, #0
 8010306:	f040 808f 	bne.w	8010428 <_dtoa_r+0x4c0>
 801030a:	2b00      	cmp	r3, #0
 801030c:	d1d3      	bne.n	80102b6 <_dtoa_r+0x34e>
 801030e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010310:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010314:	2b00      	cmp	r3, #0
 8010316:	f000 8094 	beq.w	8010442 <_dtoa_r+0x4da>
 801031a:	4b75      	ldr	r3, [pc, #468]	@ (80104f0 <_dtoa_r+0x588>)
 801031c:	2200      	movs	r2, #0
 801031e:	4620      	mov	r0, r4
 8010320:	4629      	mov	r1, r5
 8010322:	f7f0 fbeb 	bl	8000afc <__aeabi_dcmplt>
 8010326:	2800      	cmp	r0, #0
 8010328:	f000 808b 	beq.w	8010442 <_dtoa_r+0x4da>
 801032c:	9b03      	ldr	r3, [sp, #12]
 801032e:	2b00      	cmp	r3, #0
 8010330:	f000 8087 	beq.w	8010442 <_dtoa_r+0x4da>
 8010334:	f1bb 0f00 	cmp.w	fp, #0
 8010338:	dd34      	ble.n	80103a4 <_dtoa_r+0x43c>
 801033a:	4620      	mov	r0, r4
 801033c:	4b6d      	ldr	r3, [pc, #436]	@ (80104f4 <_dtoa_r+0x58c>)
 801033e:	2200      	movs	r2, #0
 8010340:	4629      	mov	r1, r5
 8010342:	f7f0 f969 	bl	8000618 <__aeabi_dmul>
 8010346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801034a:	f107 38ff 	add.w	r8, r7, #4294967295
 801034e:	3601      	adds	r6, #1
 8010350:	465c      	mov	r4, fp
 8010352:	4630      	mov	r0, r6
 8010354:	f7f0 f8f6 	bl	8000544 <__aeabi_i2d>
 8010358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801035c:	f7f0 f95c 	bl	8000618 <__aeabi_dmul>
 8010360:	4b65      	ldr	r3, [pc, #404]	@ (80104f8 <_dtoa_r+0x590>)
 8010362:	2200      	movs	r2, #0
 8010364:	f7ef ffa2 	bl	80002ac <__adddf3>
 8010368:	4605      	mov	r5, r0
 801036a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801036e:	2c00      	cmp	r4, #0
 8010370:	d16a      	bne.n	8010448 <_dtoa_r+0x4e0>
 8010372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010376:	4b61      	ldr	r3, [pc, #388]	@ (80104fc <_dtoa_r+0x594>)
 8010378:	2200      	movs	r2, #0
 801037a:	f7ef ff95 	bl	80002a8 <__aeabi_dsub>
 801037e:	4602      	mov	r2, r0
 8010380:	460b      	mov	r3, r1
 8010382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010386:	462a      	mov	r2, r5
 8010388:	4633      	mov	r3, r6
 801038a:	f7f0 fbd5 	bl	8000b38 <__aeabi_dcmpgt>
 801038e:	2800      	cmp	r0, #0
 8010390:	f040 8298 	bne.w	80108c4 <_dtoa_r+0x95c>
 8010394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010398:	462a      	mov	r2, r5
 801039a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801039e:	f7f0 fbad 	bl	8000afc <__aeabi_dcmplt>
 80103a2:	bb38      	cbnz	r0, 80103f4 <_dtoa_r+0x48c>
 80103a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80103a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80103ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f2c0 8157 	blt.w	8010662 <_dtoa_r+0x6fa>
 80103b4:	2f0e      	cmp	r7, #14
 80103b6:	f300 8154 	bgt.w	8010662 <_dtoa_r+0x6fa>
 80103ba:	4b4b      	ldr	r3, [pc, #300]	@ (80104e8 <_dtoa_r+0x580>)
 80103bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80103c0:	ed93 7b00 	vldr	d7, [r3]
 80103c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	ed8d 7b00 	vstr	d7, [sp]
 80103cc:	f280 80e5 	bge.w	801059a <_dtoa_r+0x632>
 80103d0:	9b03      	ldr	r3, [sp, #12]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f300 80e1 	bgt.w	801059a <_dtoa_r+0x632>
 80103d8:	d10c      	bne.n	80103f4 <_dtoa_r+0x48c>
 80103da:	4b48      	ldr	r3, [pc, #288]	@ (80104fc <_dtoa_r+0x594>)
 80103dc:	2200      	movs	r2, #0
 80103de:	ec51 0b17 	vmov	r0, r1, d7
 80103e2:	f7f0 f919 	bl	8000618 <__aeabi_dmul>
 80103e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103ea:	f7f0 fb9b 	bl	8000b24 <__aeabi_dcmpge>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	f000 8266 	beq.w	80108c0 <_dtoa_r+0x958>
 80103f4:	2400      	movs	r4, #0
 80103f6:	4625      	mov	r5, r4
 80103f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103fa:	4656      	mov	r6, sl
 80103fc:	ea6f 0803 	mvn.w	r8, r3
 8010400:	2700      	movs	r7, #0
 8010402:	4621      	mov	r1, r4
 8010404:	4648      	mov	r0, r9
 8010406:	f000 fc09 	bl	8010c1c <_Bfree>
 801040a:	2d00      	cmp	r5, #0
 801040c:	f000 80bd 	beq.w	801058a <_dtoa_r+0x622>
 8010410:	b12f      	cbz	r7, 801041e <_dtoa_r+0x4b6>
 8010412:	42af      	cmp	r7, r5
 8010414:	d003      	beq.n	801041e <_dtoa_r+0x4b6>
 8010416:	4639      	mov	r1, r7
 8010418:	4648      	mov	r0, r9
 801041a:	f000 fbff 	bl	8010c1c <_Bfree>
 801041e:	4629      	mov	r1, r5
 8010420:	4648      	mov	r0, r9
 8010422:	f000 fbfb 	bl	8010c1c <_Bfree>
 8010426:	e0b0      	b.n	801058a <_dtoa_r+0x622>
 8010428:	07e2      	lsls	r2, r4, #31
 801042a:	d505      	bpl.n	8010438 <_dtoa_r+0x4d0>
 801042c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010430:	f7f0 f8f2 	bl	8000618 <__aeabi_dmul>
 8010434:	3601      	adds	r6, #1
 8010436:	2301      	movs	r3, #1
 8010438:	1064      	asrs	r4, r4, #1
 801043a:	3508      	adds	r5, #8
 801043c:	e762      	b.n	8010304 <_dtoa_r+0x39c>
 801043e:	2602      	movs	r6, #2
 8010440:	e765      	b.n	801030e <_dtoa_r+0x3a6>
 8010442:	9c03      	ldr	r4, [sp, #12]
 8010444:	46b8      	mov	r8, r7
 8010446:	e784      	b.n	8010352 <_dtoa_r+0x3ea>
 8010448:	4b27      	ldr	r3, [pc, #156]	@ (80104e8 <_dtoa_r+0x580>)
 801044a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801044c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010454:	4454      	add	r4, sl
 8010456:	2900      	cmp	r1, #0
 8010458:	d054      	beq.n	8010504 <_dtoa_r+0x59c>
 801045a:	4929      	ldr	r1, [pc, #164]	@ (8010500 <_dtoa_r+0x598>)
 801045c:	2000      	movs	r0, #0
 801045e:	f7f0 fa05 	bl	800086c <__aeabi_ddiv>
 8010462:	4633      	mov	r3, r6
 8010464:	462a      	mov	r2, r5
 8010466:	f7ef ff1f 	bl	80002a8 <__aeabi_dsub>
 801046a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801046e:	4656      	mov	r6, sl
 8010470:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010474:	f7f0 fb80 	bl	8000b78 <__aeabi_d2iz>
 8010478:	4605      	mov	r5, r0
 801047a:	f7f0 f863 	bl	8000544 <__aeabi_i2d>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010486:	f7ef ff0f 	bl	80002a8 <__aeabi_dsub>
 801048a:	3530      	adds	r5, #48	@ 0x30
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010494:	f806 5b01 	strb.w	r5, [r6], #1
 8010498:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801049c:	f7f0 fb2e 	bl	8000afc <__aeabi_dcmplt>
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d172      	bne.n	801058a <_dtoa_r+0x622>
 80104a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104a8:	4911      	ldr	r1, [pc, #68]	@ (80104f0 <_dtoa_r+0x588>)
 80104aa:	2000      	movs	r0, #0
 80104ac:	f7ef fefc 	bl	80002a8 <__aeabi_dsub>
 80104b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80104b4:	f7f0 fb22 	bl	8000afc <__aeabi_dcmplt>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	f040 80b4 	bne.w	8010626 <_dtoa_r+0x6be>
 80104be:	42a6      	cmp	r6, r4
 80104c0:	f43f af70 	beq.w	80103a4 <_dtoa_r+0x43c>
 80104c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80104c8:	4b0a      	ldr	r3, [pc, #40]	@ (80104f4 <_dtoa_r+0x58c>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	f7f0 f8a4 	bl	8000618 <__aeabi_dmul>
 80104d0:	4b08      	ldr	r3, [pc, #32]	@ (80104f4 <_dtoa_r+0x58c>)
 80104d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80104d6:	2200      	movs	r2, #0
 80104d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104dc:	f7f0 f89c 	bl	8000618 <__aeabi_dmul>
 80104e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104e4:	e7c4      	b.n	8010470 <_dtoa_r+0x508>
 80104e6:	bf00      	nop
 80104e8:	0803e290 	.word	0x0803e290
 80104ec:	0803e268 	.word	0x0803e268
 80104f0:	3ff00000 	.word	0x3ff00000
 80104f4:	40240000 	.word	0x40240000
 80104f8:	401c0000 	.word	0x401c0000
 80104fc:	40140000 	.word	0x40140000
 8010500:	3fe00000 	.word	0x3fe00000
 8010504:	4631      	mov	r1, r6
 8010506:	4628      	mov	r0, r5
 8010508:	f7f0 f886 	bl	8000618 <__aeabi_dmul>
 801050c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010510:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010512:	4656      	mov	r6, sl
 8010514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010518:	f7f0 fb2e 	bl	8000b78 <__aeabi_d2iz>
 801051c:	4605      	mov	r5, r0
 801051e:	f7f0 f811 	bl	8000544 <__aeabi_i2d>
 8010522:	4602      	mov	r2, r0
 8010524:	460b      	mov	r3, r1
 8010526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801052a:	f7ef febd 	bl	80002a8 <__aeabi_dsub>
 801052e:	3530      	adds	r5, #48	@ 0x30
 8010530:	f806 5b01 	strb.w	r5, [r6], #1
 8010534:	4602      	mov	r2, r0
 8010536:	460b      	mov	r3, r1
 8010538:	42a6      	cmp	r6, r4
 801053a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801053e:	f04f 0200 	mov.w	r2, #0
 8010542:	d124      	bne.n	801058e <_dtoa_r+0x626>
 8010544:	4baf      	ldr	r3, [pc, #700]	@ (8010804 <_dtoa_r+0x89c>)
 8010546:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801054a:	f7ef feaf 	bl	80002ac <__adddf3>
 801054e:	4602      	mov	r2, r0
 8010550:	460b      	mov	r3, r1
 8010552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010556:	f7f0 faef 	bl	8000b38 <__aeabi_dcmpgt>
 801055a:	2800      	cmp	r0, #0
 801055c:	d163      	bne.n	8010626 <_dtoa_r+0x6be>
 801055e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010562:	49a8      	ldr	r1, [pc, #672]	@ (8010804 <_dtoa_r+0x89c>)
 8010564:	2000      	movs	r0, #0
 8010566:	f7ef fe9f 	bl	80002a8 <__aeabi_dsub>
 801056a:	4602      	mov	r2, r0
 801056c:	460b      	mov	r3, r1
 801056e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010572:	f7f0 fac3 	bl	8000afc <__aeabi_dcmplt>
 8010576:	2800      	cmp	r0, #0
 8010578:	f43f af14 	beq.w	80103a4 <_dtoa_r+0x43c>
 801057c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801057e:	1e73      	subs	r3, r6, #1
 8010580:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010582:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010586:	2b30      	cmp	r3, #48	@ 0x30
 8010588:	d0f8      	beq.n	801057c <_dtoa_r+0x614>
 801058a:	4647      	mov	r7, r8
 801058c:	e03b      	b.n	8010606 <_dtoa_r+0x69e>
 801058e:	4b9e      	ldr	r3, [pc, #632]	@ (8010808 <_dtoa_r+0x8a0>)
 8010590:	f7f0 f842 	bl	8000618 <__aeabi_dmul>
 8010594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010598:	e7bc      	b.n	8010514 <_dtoa_r+0x5ac>
 801059a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801059e:	4656      	mov	r6, sl
 80105a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105a4:	4620      	mov	r0, r4
 80105a6:	4629      	mov	r1, r5
 80105a8:	f7f0 f960 	bl	800086c <__aeabi_ddiv>
 80105ac:	f7f0 fae4 	bl	8000b78 <__aeabi_d2iz>
 80105b0:	4680      	mov	r8, r0
 80105b2:	f7ef ffc7 	bl	8000544 <__aeabi_i2d>
 80105b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105ba:	f7f0 f82d 	bl	8000618 <__aeabi_dmul>
 80105be:	4602      	mov	r2, r0
 80105c0:	460b      	mov	r3, r1
 80105c2:	4620      	mov	r0, r4
 80105c4:	4629      	mov	r1, r5
 80105c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80105ca:	f7ef fe6d 	bl	80002a8 <__aeabi_dsub>
 80105ce:	f806 4b01 	strb.w	r4, [r6], #1
 80105d2:	9d03      	ldr	r5, [sp, #12]
 80105d4:	eba6 040a 	sub.w	r4, r6, sl
 80105d8:	42a5      	cmp	r5, r4
 80105da:	4602      	mov	r2, r0
 80105dc:	460b      	mov	r3, r1
 80105de:	d133      	bne.n	8010648 <_dtoa_r+0x6e0>
 80105e0:	f7ef fe64 	bl	80002ac <__adddf3>
 80105e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105e8:	4604      	mov	r4, r0
 80105ea:	460d      	mov	r5, r1
 80105ec:	f7f0 faa4 	bl	8000b38 <__aeabi_dcmpgt>
 80105f0:	b9c0      	cbnz	r0, 8010624 <_dtoa_r+0x6bc>
 80105f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105f6:	4620      	mov	r0, r4
 80105f8:	4629      	mov	r1, r5
 80105fa:	f7f0 fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 80105fe:	b110      	cbz	r0, 8010606 <_dtoa_r+0x69e>
 8010600:	f018 0f01 	tst.w	r8, #1
 8010604:	d10e      	bne.n	8010624 <_dtoa_r+0x6bc>
 8010606:	9902      	ldr	r1, [sp, #8]
 8010608:	4648      	mov	r0, r9
 801060a:	f000 fb07 	bl	8010c1c <_Bfree>
 801060e:	2300      	movs	r3, #0
 8010610:	7033      	strb	r3, [r6, #0]
 8010612:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010614:	3701      	adds	r7, #1
 8010616:	601f      	str	r7, [r3, #0]
 8010618:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801061a:	2b00      	cmp	r3, #0
 801061c:	f000 824b 	beq.w	8010ab6 <_dtoa_r+0xb4e>
 8010620:	601e      	str	r6, [r3, #0]
 8010622:	e248      	b.n	8010ab6 <_dtoa_r+0xb4e>
 8010624:	46b8      	mov	r8, r7
 8010626:	4633      	mov	r3, r6
 8010628:	461e      	mov	r6, r3
 801062a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801062e:	2a39      	cmp	r2, #57	@ 0x39
 8010630:	d106      	bne.n	8010640 <_dtoa_r+0x6d8>
 8010632:	459a      	cmp	sl, r3
 8010634:	d1f8      	bne.n	8010628 <_dtoa_r+0x6c0>
 8010636:	2230      	movs	r2, #48	@ 0x30
 8010638:	f108 0801 	add.w	r8, r8, #1
 801063c:	f88a 2000 	strb.w	r2, [sl]
 8010640:	781a      	ldrb	r2, [r3, #0]
 8010642:	3201      	adds	r2, #1
 8010644:	701a      	strb	r2, [r3, #0]
 8010646:	e7a0      	b.n	801058a <_dtoa_r+0x622>
 8010648:	4b6f      	ldr	r3, [pc, #444]	@ (8010808 <_dtoa_r+0x8a0>)
 801064a:	2200      	movs	r2, #0
 801064c:	f7ef ffe4 	bl	8000618 <__aeabi_dmul>
 8010650:	2200      	movs	r2, #0
 8010652:	2300      	movs	r3, #0
 8010654:	4604      	mov	r4, r0
 8010656:	460d      	mov	r5, r1
 8010658:	f7f0 fa46 	bl	8000ae8 <__aeabi_dcmpeq>
 801065c:	2800      	cmp	r0, #0
 801065e:	d09f      	beq.n	80105a0 <_dtoa_r+0x638>
 8010660:	e7d1      	b.n	8010606 <_dtoa_r+0x69e>
 8010662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010664:	2a00      	cmp	r2, #0
 8010666:	f000 80ea 	beq.w	801083e <_dtoa_r+0x8d6>
 801066a:	9a07      	ldr	r2, [sp, #28]
 801066c:	2a01      	cmp	r2, #1
 801066e:	f300 80cd 	bgt.w	801080c <_dtoa_r+0x8a4>
 8010672:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010674:	2a00      	cmp	r2, #0
 8010676:	f000 80c1 	beq.w	80107fc <_dtoa_r+0x894>
 801067a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801067e:	9c08      	ldr	r4, [sp, #32]
 8010680:	9e00      	ldr	r6, [sp, #0]
 8010682:	9a00      	ldr	r2, [sp, #0]
 8010684:	441a      	add	r2, r3
 8010686:	9200      	str	r2, [sp, #0]
 8010688:	9a06      	ldr	r2, [sp, #24]
 801068a:	2101      	movs	r1, #1
 801068c:	441a      	add	r2, r3
 801068e:	4648      	mov	r0, r9
 8010690:	9206      	str	r2, [sp, #24]
 8010692:	f000 fbc1 	bl	8010e18 <__i2b>
 8010696:	4605      	mov	r5, r0
 8010698:	b166      	cbz	r6, 80106b4 <_dtoa_r+0x74c>
 801069a:	9b06      	ldr	r3, [sp, #24]
 801069c:	2b00      	cmp	r3, #0
 801069e:	dd09      	ble.n	80106b4 <_dtoa_r+0x74c>
 80106a0:	42b3      	cmp	r3, r6
 80106a2:	9a00      	ldr	r2, [sp, #0]
 80106a4:	bfa8      	it	ge
 80106a6:	4633      	movge	r3, r6
 80106a8:	1ad2      	subs	r2, r2, r3
 80106aa:	9200      	str	r2, [sp, #0]
 80106ac:	9a06      	ldr	r2, [sp, #24]
 80106ae:	1af6      	subs	r6, r6, r3
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	9306      	str	r3, [sp, #24]
 80106b4:	9b08      	ldr	r3, [sp, #32]
 80106b6:	b30b      	cbz	r3, 80106fc <_dtoa_r+0x794>
 80106b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	f000 80c6 	beq.w	801084c <_dtoa_r+0x8e4>
 80106c0:	2c00      	cmp	r4, #0
 80106c2:	f000 80c0 	beq.w	8010846 <_dtoa_r+0x8de>
 80106c6:	4629      	mov	r1, r5
 80106c8:	4622      	mov	r2, r4
 80106ca:	4648      	mov	r0, r9
 80106cc:	f000 fc5c 	bl	8010f88 <__pow5mult>
 80106d0:	9a02      	ldr	r2, [sp, #8]
 80106d2:	4601      	mov	r1, r0
 80106d4:	4605      	mov	r5, r0
 80106d6:	4648      	mov	r0, r9
 80106d8:	f000 fbb4 	bl	8010e44 <__multiply>
 80106dc:	9902      	ldr	r1, [sp, #8]
 80106de:	4680      	mov	r8, r0
 80106e0:	4648      	mov	r0, r9
 80106e2:	f000 fa9b 	bl	8010c1c <_Bfree>
 80106e6:	9b08      	ldr	r3, [sp, #32]
 80106e8:	1b1b      	subs	r3, r3, r4
 80106ea:	9308      	str	r3, [sp, #32]
 80106ec:	f000 80b1 	beq.w	8010852 <_dtoa_r+0x8ea>
 80106f0:	9a08      	ldr	r2, [sp, #32]
 80106f2:	4641      	mov	r1, r8
 80106f4:	4648      	mov	r0, r9
 80106f6:	f000 fc47 	bl	8010f88 <__pow5mult>
 80106fa:	9002      	str	r0, [sp, #8]
 80106fc:	2101      	movs	r1, #1
 80106fe:	4648      	mov	r0, r9
 8010700:	f000 fb8a 	bl	8010e18 <__i2b>
 8010704:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010706:	4604      	mov	r4, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	f000 81d8 	beq.w	8010abe <_dtoa_r+0xb56>
 801070e:	461a      	mov	r2, r3
 8010710:	4601      	mov	r1, r0
 8010712:	4648      	mov	r0, r9
 8010714:	f000 fc38 	bl	8010f88 <__pow5mult>
 8010718:	9b07      	ldr	r3, [sp, #28]
 801071a:	2b01      	cmp	r3, #1
 801071c:	4604      	mov	r4, r0
 801071e:	f300 809f 	bgt.w	8010860 <_dtoa_r+0x8f8>
 8010722:	9b04      	ldr	r3, [sp, #16]
 8010724:	2b00      	cmp	r3, #0
 8010726:	f040 8097 	bne.w	8010858 <_dtoa_r+0x8f0>
 801072a:	9b05      	ldr	r3, [sp, #20]
 801072c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010730:	2b00      	cmp	r3, #0
 8010732:	f040 8093 	bne.w	801085c <_dtoa_r+0x8f4>
 8010736:	9b05      	ldr	r3, [sp, #20]
 8010738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801073c:	0d1b      	lsrs	r3, r3, #20
 801073e:	051b      	lsls	r3, r3, #20
 8010740:	b133      	cbz	r3, 8010750 <_dtoa_r+0x7e8>
 8010742:	9b00      	ldr	r3, [sp, #0]
 8010744:	3301      	adds	r3, #1
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	9b06      	ldr	r3, [sp, #24]
 801074a:	3301      	adds	r3, #1
 801074c:	9306      	str	r3, [sp, #24]
 801074e:	2301      	movs	r3, #1
 8010750:	9308      	str	r3, [sp, #32]
 8010752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 81b8 	beq.w	8010aca <_dtoa_r+0xb62>
 801075a:	6923      	ldr	r3, [r4, #16]
 801075c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010760:	6918      	ldr	r0, [r3, #16]
 8010762:	f000 fb0d 	bl	8010d80 <__hi0bits>
 8010766:	f1c0 0020 	rsb	r0, r0, #32
 801076a:	9b06      	ldr	r3, [sp, #24]
 801076c:	4418      	add	r0, r3
 801076e:	f010 001f 	ands.w	r0, r0, #31
 8010772:	f000 8082 	beq.w	801087a <_dtoa_r+0x912>
 8010776:	f1c0 0320 	rsb	r3, r0, #32
 801077a:	2b04      	cmp	r3, #4
 801077c:	dd73      	ble.n	8010866 <_dtoa_r+0x8fe>
 801077e:	9b00      	ldr	r3, [sp, #0]
 8010780:	f1c0 001c 	rsb	r0, r0, #28
 8010784:	4403      	add	r3, r0
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	9b06      	ldr	r3, [sp, #24]
 801078a:	4403      	add	r3, r0
 801078c:	4406      	add	r6, r0
 801078e:	9306      	str	r3, [sp, #24]
 8010790:	9b00      	ldr	r3, [sp, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	dd05      	ble.n	80107a2 <_dtoa_r+0x83a>
 8010796:	9902      	ldr	r1, [sp, #8]
 8010798:	461a      	mov	r2, r3
 801079a:	4648      	mov	r0, r9
 801079c:	f000 fc4e 	bl	801103c <__lshift>
 80107a0:	9002      	str	r0, [sp, #8]
 80107a2:	9b06      	ldr	r3, [sp, #24]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	dd05      	ble.n	80107b4 <_dtoa_r+0x84c>
 80107a8:	4621      	mov	r1, r4
 80107aa:	461a      	mov	r2, r3
 80107ac:	4648      	mov	r0, r9
 80107ae:	f000 fc45 	bl	801103c <__lshift>
 80107b2:	4604      	mov	r4, r0
 80107b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d061      	beq.n	801087e <_dtoa_r+0x916>
 80107ba:	9802      	ldr	r0, [sp, #8]
 80107bc:	4621      	mov	r1, r4
 80107be:	f000 fca9 	bl	8011114 <__mcmp>
 80107c2:	2800      	cmp	r0, #0
 80107c4:	da5b      	bge.n	801087e <_dtoa_r+0x916>
 80107c6:	2300      	movs	r3, #0
 80107c8:	9902      	ldr	r1, [sp, #8]
 80107ca:	220a      	movs	r2, #10
 80107cc:	4648      	mov	r0, r9
 80107ce:	f000 fa47 	bl	8010c60 <__multadd>
 80107d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107d4:	9002      	str	r0, [sp, #8]
 80107d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f000 8177 	beq.w	8010ace <_dtoa_r+0xb66>
 80107e0:	4629      	mov	r1, r5
 80107e2:	2300      	movs	r3, #0
 80107e4:	220a      	movs	r2, #10
 80107e6:	4648      	mov	r0, r9
 80107e8:	f000 fa3a 	bl	8010c60 <__multadd>
 80107ec:	f1bb 0f00 	cmp.w	fp, #0
 80107f0:	4605      	mov	r5, r0
 80107f2:	dc6f      	bgt.n	80108d4 <_dtoa_r+0x96c>
 80107f4:	9b07      	ldr	r3, [sp, #28]
 80107f6:	2b02      	cmp	r3, #2
 80107f8:	dc49      	bgt.n	801088e <_dtoa_r+0x926>
 80107fa:	e06b      	b.n	80108d4 <_dtoa_r+0x96c>
 80107fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80107fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010802:	e73c      	b.n	801067e <_dtoa_r+0x716>
 8010804:	3fe00000 	.word	0x3fe00000
 8010808:	40240000 	.word	0x40240000
 801080c:	9b03      	ldr	r3, [sp, #12]
 801080e:	1e5c      	subs	r4, r3, #1
 8010810:	9b08      	ldr	r3, [sp, #32]
 8010812:	42a3      	cmp	r3, r4
 8010814:	db09      	blt.n	801082a <_dtoa_r+0x8c2>
 8010816:	1b1c      	subs	r4, r3, r4
 8010818:	9b03      	ldr	r3, [sp, #12]
 801081a:	2b00      	cmp	r3, #0
 801081c:	f6bf af30 	bge.w	8010680 <_dtoa_r+0x718>
 8010820:	9b00      	ldr	r3, [sp, #0]
 8010822:	9a03      	ldr	r2, [sp, #12]
 8010824:	1a9e      	subs	r6, r3, r2
 8010826:	2300      	movs	r3, #0
 8010828:	e72b      	b.n	8010682 <_dtoa_r+0x71a>
 801082a:	9b08      	ldr	r3, [sp, #32]
 801082c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801082e:	9408      	str	r4, [sp, #32]
 8010830:	1ae3      	subs	r3, r4, r3
 8010832:	441a      	add	r2, r3
 8010834:	9e00      	ldr	r6, [sp, #0]
 8010836:	9b03      	ldr	r3, [sp, #12]
 8010838:	920d      	str	r2, [sp, #52]	@ 0x34
 801083a:	2400      	movs	r4, #0
 801083c:	e721      	b.n	8010682 <_dtoa_r+0x71a>
 801083e:	9c08      	ldr	r4, [sp, #32]
 8010840:	9e00      	ldr	r6, [sp, #0]
 8010842:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010844:	e728      	b.n	8010698 <_dtoa_r+0x730>
 8010846:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801084a:	e751      	b.n	80106f0 <_dtoa_r+0x788>
 801084c:	9a08      	ldr	r2, [sp, #32]
 801084e:	9902      	ldr	r1, [sp, #8]
 8010850:	e750      	b.n	80106f4 <_dtoa_r+0x78c>
 8010852:	f8cd 8008 	str.w	r8, [sp, #8]
 8010856:	e751      	b.n	80106fc <_dtoa_r+0x794>
 8010858:	2300      	movs	r3, #0
 801085a:	e779      	b.n	8010750 <_dtoa_r+0x7e8>
 801085c:	9b04      	ldr	r3, [sp, #16]
 801085e:	e777      	b.n	8010750 <_dtoa_r+0x7e8>
 8010860:	2300      	movs	r3, #0
 8010862:	9308      	str	r3, [sp, #32]
 8010864:	e779      	b.n	801075a <_dtoa_r+0x7f2>
 8010866:	d093      	beq.n	8010790 <_dtoa_r+0x828>
 8010868:	9a00      	ldr	r2, [sp, #0]
 801086a:	331c      	adds	r3, #28
 801086c:	441a      	add	r2, r3
 801086e:	9200      	str	r2, [sp, #0]
 8010870:	9a06      	ldr	r2, [sp, #24]
 8010872:	441a      	add	r2, r3
 8010874:	441e      	add	r6, r3
 8010876:	9206      	str	r2, [sp, #24]
 8010878:	e78a      	b.n	8010790 <_dtoa_r+0x828>
 801087a:	4603      	mov	r3, r0
 801087c:	e7f4      	b.n	8010868 <_dtoa_r+0x900>
 801087e:	9b03      	ldr	r3, [sp, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	46b8      	mov	r8, r7
 8010884:	dc20      	bgt.n	80108c8 <_dtoa_r+0x960>
 8010886:	469b      	mov	fp, r3
 8010888:	9b07      	ldr	r3, [sp, #28]
 801088a:	2b02      	cmp	r3, #2
 801088c:	dd1e      	ble.n	80108cc <_dtoa_r+0x964>
 801088e:	f1bb 0f00 	cmp.w	fp, #0
 8010892:	f47f adb1 	bne.w	80103f8 <_dtoa_r+0x490>
 8010896:	4621      	mov	r1, r4
 8010898:	465b      	mov	r3, fp
 801089a:	2205      	movs	r2, #5
 801089c:	4648      	mov	r0, r9
 801089e:	f000 f9df 	bl	8010c60 <__multadd>
 80108a2:	4601      	mov	r1, r0
 80108a4:	4604      	mov	r4, r0
 80108a6:	9802      	ldr	r0, [sp, #8]
 80108a8:	f000 fc34 	bl	8011114 <__mcmp>
 80108ac:	2800      	cmp	r0, #0
 80108ae:	f77f ada3 	ble.w	80103f8 <_dtoa_r+0x490>
 80108b2:	4656      	mov	r6, sl
 80108b4:	2331      	movs	r3, #49	@ 0x31
 80108b6:	f806 3b01 	strb.w	r3, [r6], #1
 80108ba:	f108 0801 	add.w	r8, r8, #1
 80108be:	e59f      	b.n	8010400 <_dtoa_r+0x498>
 80108c0:	9c03      	ldr	r4, [sp, #12]
 80108c2:	46b8      	mov	r8, r7
 80108c4:	4625      	mov	r5, r4
 80108c6:	e7f4      	b.n	80108b2 <_dtoa_r+0x94a>
 80108c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80108cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f000 8101 	beq.w	8010ad6 <_dtoa_r+0xb6e>
 80108d4:	2e00      	cmp	r6, #0
 80108d6:	dd05      	ble.n	80108e4 <_dtoa_r+0x97c>
 80108d8:	4629      	mov	r1, r5
 80108da:	4632      	mov	r2, r6
 80108dc:	4648      	mov	r0, r9
 80108de:	f000 fbad 	bl	801103c <__lshift>
 80108e2:	4605      	mov	r5, r0
 80108e4:	9b08      	ldr	r3, [sp, #32]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d05c      	beq.n	80109a4 <_dtoa_r+0xa3c>
 80108ea:	6869      	ldr	r1, [r5, #4]
 80108ec:	4648      	mov	r0, r9
 80108ee:	f000 f955 	bl	8010b9c <_Balloc>
 80108f2:	4606      	mov	r6, r0
 80108f4:	b928      	cbnz	r0, 8010902 <_dtoa_r+0x99a>
 80108f6:	4b82      	ldr	r3, [pc, #520]	@ (8010b00 <_dtoa_r+0xb98>)
 80108f8:	4602      	mov	r2, r0
 80108fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80108fe:	f7ff bb4a 	b.w	800ff96 <_dtoa_r+0x2e>
 8010902:	692a      	ldr	r2, [r5, #16]
 8010904:	3202      	adds	r2, #2
 8010906:	0092      	lsls	r2, r2, #2
 8010908:	f105 010c 	add.w	r1, r5, #12
 801090c:	300c      	adds	r0, #12
 801090e:	f7ff fa8c 	bl	800fe2a <memcpy>
 8010912:	2201      	movs	r2, #1
 8010914:	4631      	mov	r1, r6
 8010916:	4648      	mov	r0, r9
 8010918:	f000 fb90 	bl	801103c <__lshift>
 801091c:	f10a 0301 	add.w	r3, sl, #1
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	eb0a 030b 	add.w	r3, sl, fp
 8010926:	9308      	str	r3, [sp, #32]
 8010928:	9b04      	ldr	r3, [sp, #16]
 801092a:	f003 0301 	and.w	r3, r3, #1
 801092e:	462f      	mov	r7, r5
 8010930:	9306      	str	r3, [sp, #24]
 8010932:	4605      	mov	r5, r0
 8010934:	9b00      	ldr	r3, [sp, #0]
 8010936:	9802      	ldr	r0, [sp, #8]
 8010938:	4621      	mov	r1, r4
 801093a:	f103 3bff 	add.w	fp, r3, #4294967295
 801093e:	f7ff fa89 	bl	800fe54 <quorem>
 8010942:	4603      	mov	r3, r0
 8010944:	3330      	adds	r3, #48	@ 0x30
 8010946:	9003      	str	r0, [sp, #12]
 8010948:	4639      	mov	r1, r7
 801094a:	9802      	ldr	r0, [sp, #8]
 801094c:	9309      	str	r3, [sp, #36]	@ 0x24
 801094e:	f000 fbe1 	bl	8011114 <__mcmp>
 8010952:	462a      	mov	r2, r5
 8010954:	9004      	str	r0, [sp, #16]
 8010956:	4621      	mov	r1, r4
 8010958:	4648      	mov	r0, r9
 801095a:	f000 fbf7 	bl	801114c <__mdiff>
 801095e:	68c2      	ldr	r2, [r0, #12]
 8010960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010962:	4606      	mov	r6, r0
 8010964:	bb02      	cbnz	r2, 80109a8 <_dtoa_r+0xa40>
 8010966:	4601      	mov	r1, r0
 8010968:	9802      	ldr	r0, [sp, #8]
 801096a:	f000 fbd3 	bl	8011114 <__mcmp>
 801096e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010970:	4602      	mov	r2, r0
 8010972:	4631      	mov	r1, r6
 8010974:	4648      	mov	r0, r9
 8010976:	920c      	str	r2, [sp, #48]	@ 0x30
 8010978:	9309      	str	r3, [sp, #36]	@ 0x24
 801097a:	f000 f94f 	bl	8010c1c <_Bfree>
 801097e:	9b07      	ldr	r3, [sp, #28]
 8010980:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010982:	9e00      	ldr	r6, [sp, #0]
 8010984:	ea42 0103 	orr.w	r1, r2, r3
 8010988:	9b06      	ldr	r3, [sp, #24]
 801098a:	4319      	orrs	r1, r3
 801098c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801098e:	d10d      	bne.n	80109ac <_dtoa_r+0xa44>
 8010990:	2b39      	cmp	r3, #57	@ 0x39
 8010992:	d027      	beq.n	80109e4 <_dtoa_r+0xa7c>
 8010994:	9a04      	ldr	r2, [sp, #16]
 8010996:	2a00      	cmp	r2, #0
 8010998:	dd01      	ble.n	801099e <_dtoa_r+0xa36>
 801099a:	9b03      	ldr	r3, [sp, #12]
 801099c:	3331      	adds	r3, #49	@ 0x31
 801099e:	f88b 3000 	strb.w	r3, [fp]
 80109a2:	e52e      	b.n	8010402 <_dtoa_r+0x49a>
 80109a4:	4628      	mov	r0, r5
 80109a6:	e7b9      	b.n	801091c <_dtoa_r+0x9b4>
 80109a8:	2201      	movs	r2, #1
 80109aa:	e7e2      	b.n	8010972 <_dtoa_r+0xa0a>
 80109ac:	9904      	ldr	r1, [sp, #16]
 80109ae:	2900      	cmp	r1, #0
 80109b0:	db04      	blt.n	80109bc <_dtoa_r+0xa54>
 80109b2:	9807      	ldr	r0, [sp, #28]
 80109b4:	4301      	orrs	r1, r0
 80109b6:	9806      	ldr	r0, [sp, #24]
 80109b8:	4301      	orrs	r1, r0
 80109ba:	d120      	bne.n	80109fe <_dtoa_r+0xa96>
 80109bc:	2a00      	cmp	r2, #0
 80109be:	ddee      	ble.n	801099e <_dtoa_r+0xa36>
 80109c0:	9902      	ldr	r1, [sp, #8]
 80109c2:	9300      	str	r3, [sp, #0]
 80109c4:	2201      	movs	r2, #1
 80109c6:	4648      	mov	r0, r9
 80109c8:	f000 fb38 	bl	801103c <__lshift>
 80109cc:	4621      	mov	r1, r4
 80109ce:	9002      	str	r0, [sp, #8]
 80109d0:	f000 fba0 	bl	8011114 <__mcmp>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	9b00      	ldr	r3, [sp, #0]
 80109d8:	dc02      	bgt.n	80109e0 <_dtoa_r+0xa78>
 80109da:	d1e0      	bne.n	801099e <_dtoa_r+0xa36>
 80109dc:	07da      	lsls	r2, r3, #31
 80109de:	d5de      	bpl.n	801099e <_dtoa_r+0xa36>
 80109e0:	2b39      	cmp	r3, #57	@ 0x39
 80109e2:	d1da      	bne.n	801099a <_dtoa_r+0xa32>
 80109e4:	2339      	movs	r3, #57	@ 0x39
 80109e6:	f88b 3000 	strb.w	r3, [fp]
 80109ea:	4633      	mov	r3, r6
 80109ec:	461e      	mov	r6, r3
 80109ee:	3b01      	subs	r3, #1
 80109f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80109f4:	2a39      	cmp	r2, #57	@ 0x39
 80109f6:	d04e      	beq.n	8010a96 <_dtoa_r+0xb2e>
 80109f8:	3201      	adds	r2, #1
 80109fa:	701a      	strb	r2, [r3, #0]
 80109fc:	e501      	b.n	8010402 <_dtoa_r+0x49a>
 80109fe:	2a00      	cmp	r2, #0
 8010a00:	dd03      	ble.n	8010a0a <_dtoa_r+0xaa2>
 8010a02:	2b39      	cmp	r3, #57	@ 0x39
 8010a04:	d0ee      	beq.n	80109e4 <_dtoa_r+0xa7c>
 8010a06:	3301      	adds	r3, #1
 8010a08:	e7c9      	b.n	801099e <_dtoa_r+0xa36>
 8010a0a:	9a00      	ldr	r2, [sp, #0]
 8010a0c:	9908      	ldr	r1, [sp, #32]
 8010a0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010a12:	428a      	cmp	r2, r1
 8010a14:	d028      	beq.n	8010a68 <_dtoa_r+0xb00>
 8010a16:	9902      	ldr	r1, [sp, #8]
 8010a18:	2300      	movs	r3, #0
 8010a1a:	220a      	movs	r2, #10
 8010a1c:	4648      	mov	r0, r9
 8010a1e:	f000 f91f 	bl	8010c60 <__multadd>
 8010a22:	42af      	cmp	r7, r5
 8010a24:	9002      	str	r0, [sp, #8]
 8010a26:	f04f 0300 	mov.w	r3, #0
 8010a2a:	f04f 020a 	mov.w	r2, #10
 8010a2e:	4639      	mov	r1, r7
 8010a30:	4648      	mov	r0, r9
 8010a32:	d107      	bne.n	8010a44 <_dtoa_r+0xadc>
 8010a34:	f000 f914 	bl	8010c60 <__multadd>
 8010a38:	4607      	mov	r7, r0
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	9b00      	ldr	r3, [sp, #0]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	9300      	str	r3, [sp, #0]
 8010a42:	e777      	b.n	8010934 <_dtoa_r+0x9cc>
 8010a44:	f000 f90c 	bl	8010c60 <__multadd>
 8010a48:	4629      	mov	r1, r5
 8010a4a:	4607      	mov	r7, r0
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	220a      	movs	r2, #10
 8010a50:	4648      	mov	r0, r9
 8010a52:	f000 f905 	bl	8010c60 <__multadd>
 8010a56:	4605      	mov	r5, r0
 8010a58:	e7f0      	b.n	8010a3c <_dtoa_r+0xad4>
 8010a5a:	f1bb 0f00 	cmp.w	fp, #0
 8010a5e:	bfcc      	ite	gt
 8010a60:	465e      	movgt	r6, fp
 8010a62:	2601      	movle	r6, #1
 8010a64:	4456      	add	r6, sl
 8010a66:	2700      	movs	r7, #0
 8010a68:	9902      	ldr	r1, [sp, #8]
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	4648      	mov	r0, r9
 8010a70:	f000 fae4 	bl	801103c <__lshift>
 8010a74:	4621      	mov	r1, r4
 8010a76:	9002      	str	r0, [sp, #8]
 8010a78:	f000 fb4c 	bl	8011114 <__mcmp>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	dcb4      	bgt.n	80109ea <_dtoa_r+0xa82>
 8010a80:	d102      	bne.n	8010a88 <_dtoa_r+0xb20>
 8010a82:	9b00      	ldr	r3, [sp, #0]
 8010a84:	07db      	lsls	r3, r3, #31
 8010a86:	d4b0      	bmi.n	80109ea <_dtoa_r+0xa82>
 8010a88:	4633      	mov	r3, r6
 8010a8a:	461e      	mov	r6, r3
 8010a8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a90:	2a30      	cmp	r2, #48	@ 0x30
 8010a92:	d0fa      	beq.n	8010a8a <_dtoa_r+0xb22>
 8010a94:	e4b5      	b.n	8010402 <_dtoa_r+0x49a>
 8010a96:	459a      	cmp	sl, r3
 8010a98:	d1a8      	bne.n	80109ec <_dtoa_r+0xa84>
 8010a9a:	2331      	movs	r3, #49	@ 0x31
 8010a9c:	f108 0801 	add.w	r8, r8, #1
 8010aa0:	f88a 3000 	strb.w	r3, [sl]
 8010aa4:	e4ad      	b.n	8010402 <_dtoa_r+0x49a>
 8010aa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010aa8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010b04 <_dtoa_r+0xb9c>
 8010aac:	b11b      	cbz	r3, 8010ab6 <_dtoa_r+0xb4e>
 8010aae:	f10a 0308 	add.w	r3, sl, #8
 8010ab2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010ab4:	6013      	str	r3, [r2, #0]
 8010ab6:	4650      	mov	r0, sl
 8010ab8:	b017      	add	sp, #92	@ 0x5c
 8010aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010abe:	9b07      	ldr	r3, [sp, #28]
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	f77f ae2e 	ble.w	8010722 <_dtoa_r+0x7ba>
 8010ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ac8:	9308      	str	r3, [sp, #32]
 8010aca:	2001      	movs	r0, #1
 8010acc:	e64d      	b.n	801076a <_dtoa_r+0x802>
 8010ace:	f1bb 0f00 	cmp.w	fp, #0
 8010ad2:	f77f aed9 	ble.w	8010888 <_dtoa_r+0x920>
 8010ad6:	4656      	mov	r6, sl
 8010ad8:	9802      	ldr	r0, [sp, #8]
 8010ada:	4621      	mov	r1, r4
 8010adc:	f7ff f9ba 	bl	800fe54 <quorem>
 8010ae0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010ae4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ae8:	eba6 020a 	sub.w	r2, r6, sl
 8010aec:	4593      	cmp	fp, r2
 8010aee:	ddb4      	ble.n	8010a5a <_dtoa_r+0xaf2>
 8010af0:	9902      	ldr	r1, [sp, #8]
 8010af2:	2300      	movs	r3, #0
 8010af4:	220a      	movs	r2, #10
 8010af6:	4648      	mov	r0, r9
 8010af8:	f000 f8b2 	bl	8010c60 <__multadd>
 8010afc:	9002      	str	r0, [sp, #8]
 8010afe:	e7eb      	b.n	8010ad8 <_dtoa_r+0xb70>
 8010b00:	0803e136 	.word	0x0803e136
 8010b04:	0803e0ba 	.word	0x0803e0ba

08010b08 <_free_r>:
 8010b08:	b538      	push	{r3, r4, r5, lr}
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	2900      	cmp	r1, #0
 8010b0e:	d041      	beq.n	8010b94 <_free_r+0x8c>
 8010b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b14:	1f0c      	subs	r4, r1, #4
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	bfb8      	it	lt
 8010b1a:	18e4      	addlt	r4, r4, r3
 8010b1c:	f7fe f860 	bl	800ebe0 <__malloc_lock>
 8010b20:	4a1d      	ldr	r2, [pc, #116]	@ (8010b98 <_free_r+0x90>)
 8010b22:	6813      	ldr	r3, [r2, #0]
 8010b24:	b933      	cbnz	r3, 8010b34 <_free_r+0x2c>
 8010b26:	6063      	str	r3, [r4, #4]
 8010b28:	6014      	str	r4, [r2, #0]
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b30:	f7fe b85c 	b.w	800ebec <__malloc_unlock>
 8010b34:	42a3      	cmp	r3, r4
 8010b36:	d908      	bls.n	8010b4a <_free_r+0x42>
 8010b38:	6820      	ldr	r0, [r4, #0]
 8010b3a:	1821      	adds	r1, r4, r0
 8010b3c:	428b      	cmp	r3, r1
 8010b3e:	bf01      	itttt	eq
 8010b40:	6819      	ldreq	r1, [r3, #0]
 8010b42:	685b      	ldreq	r3, [r3, #4]
 8010b44:	1809      	addeq	r1, r1, r0
 8010b46:	6021      	streq	r1, [r4, #0]
 8010b48:	e7ed      	b.n	8010b26 <_free_r+0x1e>
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	b10b      	cbz	r3, 8010b54 <_free_r+0x4c>
 8010b50:	42a3      	cmp	r3, r4
 8010b52:	d9fa      	bls.n	8010b4a <_free_r+0x42>
 8010b54:	6811      	ldr	r1, [r2, #0]
 8010b56:	1850      	adds	r0, r2, r1
 8010b58:	42a0      	cmp	r0, r4
 8010b5a:	d10b      	bne.n	8010b74 <_free_r+0x6c>
 8010b5c:	6820      	ldr	r0, [r4, #0]
 8010b5e:	4401      	add	r1, r0
 8010b60:	1850      	adds	r0, r2, r1
 8010b62:	4283      	cmp	r3, r0
 8010b64:	6011      	str	r1, [r2, #0]
 8010b66:	d1e0      	bne.n	8010b2a <_free_r+0x22>
 8010b68:	6818      	ldr	r0, [r3, #0]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	6053      	str	r3, [r2, #4]
 8010b6e:	4408      	add	r0, r1
 8010b70:	6010      	str	r0, [r2, #0]
 8010b72:	e7da      	b.n	8010b2a <_free_r+0x22>
 8010b74:	d902      	bls.n	8010b7c <_free_r+0x74>
 8010b76:	230c      	movs	r3, #12
 8010b78:	602b      	str	r3, [r5, #0]
 8010b7a:	e7d6      	b.n	8010b2a <_free_r+0x22>
 8010b7c:	6820      	ldr	r0, [r4, #0]
 8010b7e:	1821      	adds	r1, r4, r0
 8010b80:	428b      	cmp	r3, r1
 8010b82:	bf04      	itt	eq
 8010b84:	6819      	ldreq	r1, [r3, #0]
 8010b86:	685b      	ldreq	r3, [r3, #4]
 8010b88:	6063      	str	r3, [r4, #4]
 8010b8a:	bf04      	itt	eq
 8010b8c:	1809      	addeq	r1, r1, r0
 8010b8e:	6021      	streq	r1, [r4, #0]
 8010b90:	6054      	str	r4, [r2, #4]
 8010b92:	e7ca      	b.n	8010b2a <_free_r+0x22>
 8010b94:	bd38      	pop	{r3, r4, r5, pc}
 8010b96:	bf00      	nop
 8010b98:	2000124c 	.word	0x2000124c

08010b9c <_Balloc>:
 8010b9c:	b570      	push	{r4, r5, r6, lr}
 8010b9e:	69c6      	ldr	r6, [r0, #28]
 8010ba0:	4604      	mov	r4, r0
 8010ba2:	460d      	mov	r5, r1
 8010ba4:	b976      	cbnz	r6, 8010bc4 <_Balloc+0x28>
 8010ba6:	2010      	movs	r0, #16
 8010ba8:	f7fd ff68 	bl	800ea7c <malloc>
 8010bac:	4602      	mov	r2, r0
 8010bae:	61e0      	str	r0, [r4, #28]
 8010bb0:	b920      	cbnz	r0, 8010bbc <_Balloc+0x20>
 8010bb2:	4b18      	ldr	r3, [pc, #96]	@ (8010c14 <_Balloc+0x78>)
 8010bb4:	4818      	ldr	r0, [pc, #96]	@ (8010c18 <_Balloc+0x7c>)
 8010bb6:	216b      	movs	r1, #107	@ 0x6b
 8010bb8:	f001 fcb2 	bl	8012520 <__assert_func>
 8010bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bc0:	6006      	str	r6, [r0, #0]
 8010bc2:	60c6      	str	r6, [r0, #12]
 8010bc4:	69e6      	ldr	r6, [r4, #28]
 8010bc6:	68f3      	ldr	r3, [r6, #12]
 8010bc8:	b183      	cbz	r3, 8010bec <_Balloc+0x50>
 8010bca:	69e3      	ldr	r3, [r4, #28]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010bd2:	b9b8      	cbnz	r0, 8010c04 <_Balloc+0x68>
 8010bd4:	2101      	movs	r1, #1
 8010bd6:	fa01 f605 	lsl.w	r6, r1, r5
 8010bda:	1d72      	adds	r2, r6, #5
 8010bdc:	0092      	lsls	r2, r2, #2
 8010bde:	4620      	mov	r0, r4
 8010be0:	f001 fcbc 	bl	801255c <_calloc_r>
 8010be4:	b160      	cbz	r0, 8010c00 <_Balloc+0x64>
 8010be6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bea:	e00e      	b.n	8010c0a <_Balloc+0x6e>
 8010bec:	2221      	movs	r2, #33	@ 0x21
 8010bee:	2104      	movs	r1, #4
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	f001 fcb3 	bl	801255c <_calloc_r>
 8010bf6:	69e3      	ldr	r3, [r4, #28]
 8010bf8:	60f0      	str	r0, [r6, #12]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d1e4      	bne.n	8010bca <_Balloc+0x2e>
 8010c00:	2000      	movs	r0, #0
 8010c02:	bd70      	pop	{r4, r5, r6, pc}
 8010c04:	6802      	ldr	r2, [r0, #0]
 8010c06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c10:	e7f7      	b.n	8010c02 <_Balloc+0x66>
 8010c12:	bf00      	nop
 8010c14:	0803e0c7 	.word	0x0803e0c7
 8010c18:	0803e147 	.word	0x0803e147

08010c1c <_Bfree>:
 8010c1c:	b570      	push	{r4, r5, r6, lr}
 8010c1e:	69c6      	ldr	r6, [r0, #28]
 8010c20:	4605      	mov	r5, r0
 8010c22:	460c      	mov	r4, r1
 8010c24:	b976      	cbnz	r6, 8010c44 <_Bfree+0x28>
 8010c26:	2010      	movs	r0, #16
 8010c28:	f7fd ff28 	bl	800ea7c <malloc>
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	61e8      	str	r0, [r5, #28]
 8010c30:	b920      	cbnz	r0, 8010c3c <_Bfree+0x20>
 8010c32:	4b09      	ldr	r3, [pc, #36]	@ (8010c58 <_Bfree+0x3c>)
 8010c34:	4809      	ldr	r0, [pc, #36]	@ (8010c5c <_Bfree+0x40>)
 8010c36:	218f      	movs	r1, #143	@ 0x8f
 8010c38:	f001 fc72 	bl	8012520 <__assert_func>
 8010c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c40:	6006      	str	r6, [r0, #0]
 8010c42:	60c6      	str	r6, [r0, #12]
 8010c44:	b13c      	cbz	r4, 8010c56 <_Bfree+0x3a>
 8010c46:	69eb      	ldr	r3, [r5, #28]
 8010c48:	6862      	ldr	r2, [r4, #4]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c50:	6021      	str	r1, [r4, #0]
 8010c52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c56:	bd70      	pop	{r4, r5, r6, pc}
 8010c58:	0803e0c7 	.word	0x0803e0c7
 8010c5c:	0803e147 	.word	0x0803e147

08010c60 <__multadd>:
 8010c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c64:	690d      	ldr	r5, [r1, #16]
 8010c66:	4607      	mov	r7, r0
 8010c68:	460c      	mov	r4, r1
 8010c6a:	461e      	mov	r6, r3
 8010c6c:	f101 0c14 	add.w	ip, r1, #20
 8010c70:	2000      	movs	r0, #0
 8010c72:	f8dc 3000 	ldr.w	r3, [ip]
 8010c76:	b299      	uxth	r1, r3
 8010c78:	fb02 6101 	mla	r1, r2, r1, r6
 8010c7c:	0c1e      	lsrs	r6, r3, #16
 8010c7e:	0c0b      	lsrs	r3, r1, #16
 8010c80:	fb02 3306 	mla	r3, r2, r6, r3
 8010c84:	b289      	uxth	r1, r1
 8010c86:	3001      	adds	r0, #1
 8010c88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c8c:	4285      	cmp	r5, r0
 8010c8e:	f84c 1b04 	str.w	r1, [ip], #4
 8010c92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c96:	dcec      	bgt.n	8010c72 <__multadd+0x12>
 8010c98:	b30e      	cbz	r6, 8010cde <__multadd+0x7e>
 8010c9a:	68a3      	ldr	r3, [r4, #8]
 8010c9c:	42ab      	cmp	r3, r5
 8010c9e:	dc19      	bgt.n	8010cd4 <__multadd+0x74>
 8010ca0:	6861      	ldr	r1, [r4, #4]
 8010ca2:	4638      	mov	r0, r7
 8010ca4:	3101      	adds	r1, #1
 8010ca6:	f7ff ff79 	bl	8010b9c <_Balloc>
 8010caa:	4680      	mov	r8, r0
 8010cac:	b928      	cbnz	r0, 8010cba <__multadd+0x5a>
 8010cae:	4602      	mov	r2, r0
 8010cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8010ce4 <__multadd+0x84>)
 8010cb2:	480d      	ldr	r0, [pc, #52]	@ (8010ce8 <__multadd+0x88>)
 8010cb4:	21ba      	movs	r1, #186	@ 0xba
 8010cb6:	f001 fc33 	bl	8012520 <__assert_func>
 8010cba:	6922      	ldr	r2, [r4, #16]
 8010cbc:	3202      	adds	r2, #2
 8010cbe:	f104 010c 	add.w	r1, r4, #12
 8010cc2:	0092      	lsls	r2, r2, #2
 8010cc4:	300c      	adds	r0, #12
 8010cc6:	f7ff f8b0 	bl	800fe2a <memcpy>
 8010cca:	4621      	mov	r1, r4
 8010ccc:	4638      	mov	r0, r7
 8010cce:	f7ff ffa5 	bl	8010c1c <_Bfree>
 8010cd2:	4644      	mov	r4, r8
 8010cd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010cd8:	3501      	adds	r5, #1
 8010cda:	615e      	str	r6, [r3, #20]
 8010cdc:	6125      	str	r5, [r4, #16]
 8010cde:	4620      	mov	r0, r4
 8010ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce4:	0803e136 	.word	0x0803e136
 8010ce8:	0803e147 	.word	0x0803e147

08010cec <__s2b>:
 8010cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	4615      	mov	r5, r2
 8010cf4:	461f      	mov	r7, r3
 8010cf6:	2209      	movs	r2, #9
 8010cf8:	3308      	adds	r3, #8
 8010cfa:	4606      	mov	r6, r0
 8010cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d00:	2100      	movs	r1, #0
 8010d02:	2201      	movs	r2, #1
 8010d04:	429a      	cmp	r2, r3
 8010d06:	db09      	blt.n	8010d1c <__s2b+0x30>
 8010d08:	4630      	mov	r0, r6
 8010d0a:	f7ff ff47 	bl	8010b9c <_Balloc>
 8010d0e:	b940      	cbnz	r0, 8010d22 <__s2b+0x36>
 8010d10:	4602      	mov	r2, r0
 8010d12:	4b19      	ldr	r3, [pc, #100]	@ (8010d78 <__s2b+0x8c>)
 8010d14:	4819      	ldr	r0, [pc, #100]	@ (8010d7c <__s2b+0x90>)
 8010d16:	21d3      	movs	r1, #211	@ 0xd3
 8010d18:	f001 fc02 	bl	8012520 <__assert_func>
 8010d1c:	0052      	lsls	r2, r2, #1
 8010d1e:	3101      	adds	r1, #1
 8010d20:	e7f0      	b.n	8010d04 <__s2b+0x18>
 8010d22:	9b08      	ldr	r3, [sp, #32]
 8010d24:	6143      	str	r3, [r0, #20]
 8010d26:	2d09      	cmp	r5, #9
 8010d28:	f04f 0301 	mov.w	r3, #1
 8010d2c:	6103      	str	r3, [r0, #16]
 8010d2e:	dd16      	ble.n	8010d5e <__s2b+0x72>
 8010d30:	f104 0909 	add.w	r9, r4, #9
 8010d34:	46c8      	mov	r8, r9
 8010d36:	442c      	add	r4, r5
 8010d38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010d3c:	4601      	mov	r1, r0
 8010d3e:	3b30      	subs	r3, #48	@ 0x30
 8010d40:	220a      	movs	r2, #10
 8010d42:	4630      	mov	r0, r6
 8010d44:	f7ff ff8c 	bl	8010c60 <__multadd>
 8010d48:	45a0      	cmp	r8, r4
 8010d4a:	d1f5      	bne.n	8010d38 <__s2b+0x4c>
 8010d4c:	f1a5 0408 	sub.w	r4, r5, #8
 8010d50:	444c      	add	r4, r9
 8010d52:	1b2d      	subs	r5, r5, r4
 8010d54:	1963      	adds	r3, r4, r5
 8010d56:	42bb      	cmp	r3, r7
 8010d58:	db04      	blt.n	8010d64 <__s2b+0x78>
 8010d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d5e:	340a      	adds	r4, #10
 8010d60:	2509      	movs	r5, #9
 8010d62:	e7f6      	b.n	8010d52 <__s2b+0x66>
 8010d64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d68:	4601      	mov	r1, r0
 8010d6a:	3b30      	subs	r3, #48	@ 0x30
 8010d6c:	220a      	movs	r2, #10
 8010d6e:	4630      	mov	r0, r6
 8010d70:	f7ff ff76 	bl	8010c60 <__multadd>
 8010d74:	e7ee      	b.n	8010d54 <__s2b+0x68>
 8010d76:	bf00      	nop
 8010d78:	0803e136 	.word	0x0803e136
 8010d7c:	0803e147 	.word	0x0803e147

08010d80 <__hi0bits>:
 8010d80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010d84:	4603      	mov	r3, r0
 8010d86:	bf36      	itet	cc
 8010d88:	0403      	lslcc	r3, r0, #16
 8010d8a:	2000      	movcs	r0, #0
 8010d8c:	2010      	movcc	r0, #16
 8010d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d92:	bf3c      	itt	cc
 8010d94:	021b      	lslcc	r3, r3, #8
 8010d96:	3008      	addcc	r0, #8
 8010d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d9c:	bf3c      	itt	cc
 8010d9e:	011b      	lslcc	r3, r3, #4
 8010da0:	3004      	addcc	r0, #4
 8010da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010da6:	bf3c      	itt	cc
 8010da8:	009b      	lslcc	r3, r3, #2
 8010daa:	3002      	addcc	r0, #2
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	db05      	blt.n	8010dbc <__hi0bits+0x3c>
 8010db0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010db4:	f100 0001 	add.w	r0, r0, #1
 8010db8:	bf08      	it	eq
 8010dba:	2020      	moveq	r0, #32
 8010dbc:	4770      	bx	lr

08010dbe <__lo0bits>:
 8010dbe:	6803      	ldr	r3, [r0, #0]
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	f013 0007 	ands.w	r0, r3, #7
 8010dc6:	d00b      	beq.n	8010de0 <__lo0bits+0x22>
 8010dc8:	07d9      	lsls	r1, r3, #31
 8010dca:	d421      	bmi.n	8010e10 <__lo0bits+0x52>
 8010dcc:	0798      	lsls	r0, r3, #30
 8010dce:	bf49      	itett	mi
 8010dd0:	085b      	lsrmi	r3, r3, #1
 8010dd2:	089b      	lsrpl	r3, r3, #2
 8010dd4:	2001      	movmi	r0, #1
 8010dd6:	6013      	strmi	r3, [r2, #0]
 8010dd8:	bf5c      	itt	pl
 8010dda:	6013      	strpl	r3, [r2, #0]
 8010ddc:	2002      	movpl	r0, #2
 8010dde:	4770      	bx	lr
 8010de0:	b299      	uxth	r1, r3
 8010de2:	b909      	cbnz	r1, 8010de8 <__lo0bits+0x2a>
 8010de4:	0c1b      	lsrs	r3, r3, #16
 8010de6:	2010      	movs	r0, #16
 8010de8:	b2d9      	uxtb	r1, r3
 8010dea:	b909      	cbnz	r1, 8010df0 <__lo0bits+0x32>
 8010dec:	3008      	adds	r0, #8
 8010dee:	0a1b      	lsrs	r3, r3, #8
 8010df0:	0719      	lsls	r1, r3, #28
 8010df2:	bf04      	itt	eq
 8010df4:	091b      	lsreq	r3, r3, #4
 8010df6:	3004      	addeq	r0, #4
 8010df8:	0799      	lsls	r1, r3, #30
 8010dfa:	bf04      	itt	eq
 8010dfc:	089b      	lsreq	r3, r3, #2
 8010dfe:	3002      	addeq	r0, #2
 8010e00:	07d9      	lsls	r1, r3, #31
 8010e02:	d403      	bmi.n	8010e0c <__lo0bits+0x4e>
 8010e04:	085b      	lsrs	r3, r3, #1
 8010e06:	f100 0001 	add.w	r0, r0, #1
 8010e0a:	d003      	beq.n	8010e14 <__lo0bits+0x56>
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	4770      	bx	lr
 8010e10:	2000      	movs	r0, #0
 8010e12:	4770      	bx	lr
 8010e14:	2020      	movs	r0, #32
 8010e16:	4770      	bx	lr

08010e18 <__i2b>:
 8010e18:	b510      	push	{r4, lr}
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	2101      	movs	r1, #1
 8010e1e:	f7ff febd 	bl	8010b9c <_Balloc>
 8010e22:	4602      	mov	r2, r0
 8010e24:	b928      	cbnz	r0, 8010e32 <__i2b+0x1a>
 8010e26:	4b05      	ldr	r3, [pc, #20]	@ (8010e3c <__i2b+0x24>)
 8010e28:	4805      	ldr	r0, [pc, #20]	@ (8010e40 <__i2b+0x28>)
 8010e2a:	f240 1145 	movw	r1, #325	@ 0x145
 8010e2e:	f001 fb77 	bl	8012520 <__assert_func>
 8010e32:	2301      	movs	r3, #1
 8010e34:	6144      	str	r4, [r0, #20]
 8010e36:	6103      	str	r3, [r0, #16]
 8010e38:	bd10      	pop	{r4, pc}
 8010e3a:	bf00      	nop
 8010e3c:	0803e136 	.word	0x0803e136
 8010e40:	0803e147 	.word	0x0803e147

08010e44 <__multiply>:
 8010e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e48:	4617      	mov	r7, r2
 8010e4a:	690a      	ldr	r2, [r1, #16]
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	bfa8      	it	ge
 8010e52:	463b      	movge	r3, r7
 8010e54:	4689      	mov	r9, r1
 8010e56:	bfa4      	itt	ge
 8010e58:	460f      	movge	r7, r1
 8010e5a:	4699      	movge	r9, r3
 8010e5c:	693d      	ldr	r5, [r7, #16]
 8010e5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	6879      	ldr	r1, [r7, #4]
 8010e66:	eb05 060a 	add.w	r6, r5, sl
 8010e6a:	42b3      	cmp	r3, r6
 8010e6c:	b085      	sub	sp, #20
 8010e6e:	bfb8      	it	lt
 8010e70:	3101      	addlt	r1, #1
 8010e72:	f7ff fe93 	bl	8010b9c <_Balloc>
 8010e76:	b930      	cbnz	r0, 8010e86 <__multiply+0x42>
 8010e78:	4602      	mov	r2, r0
 8010e7a:	4b41      	ldr	r3, [pc, #260]	@ (8010f80 <__multiply+0x13c>)
 8010e7c:	4841      	ldr	r0, [pc, #260]	@ (8010f84 <__multiply+0x140>)
 8010e7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010e82:	f001 fb4d 	bl	8012520 <__assert_func>
 8010e86:	f100 0414 	add.w	r4, r0, #20
 8010e8a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010e8e:	4623      	mov	r3, r4
 8010e90:	2200      	movs	r2, #0
 8010e92:	4573      	cmp	r3, lr
 8010e94:	d320      	bcc.n	8010ed8 <__multiply+0x94>
 8010e96:	f107 0814 	add.w	r8, r7, #20
 8010e9a:	f109 0114 	add.w	r1, r9, #20
 8010e9e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010ea2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010ea6:	9302      	str	r3, [sp, #8]
 8010ea8:	1beb      	subs	r3, r5, r7
 8010eaa:	3b15      	subs	r3, #21
 8010eac:	f023 0303 	bic.w	r3, r3, #3
 8010eb0:	3304      	adds	r3, #4
 8010eb2:	3715      	adds	r7, #21
 8010eb4:	42bd      	cmp	r5, r7
 8010eb6:	bf38      	it	cc
 8010eb8:	2304      	movcc	r3, #4
 8010eba:	9301      	str	r3, [sp, #4]
 8010ebc:	9b02      	ldr	r3, [sp, #8]
 8010ebe:	9103      	str	r1, [sp, #12]
 8010ec0:	428b      	cmp	r3, r1
 8010ec2:	d80c      	bhi.n	8010ede <__multiply+0x9a>
 8010ec4:	2e00      	cmp	r6, #0
 8010ec6:	dd03      	ble.n	8010ed0 <__multiply+0x8c>
 8010ec8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d055      	beq.n	8010f7c <__multiply+0x138>
 8010ed0:	6106      	str	r6, [r0, #16]
 8010ed2:	b005      	add	sp, #20
 8010ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed8:	f843 2b04 	str.w	r2, [r3], #4
 8010edc:	e7d9      	b.n	8010e92 <__multiply+0x4e>
 8010ede:	f8b1 a000 	ldrh.w	sl, [r1]
 8010ee2:	f1ba 0f00 	cmp.w	sl, #0
 8010ee6:	d01f      	beq.n	8010f28 <__multiply+0xe4>
 8010ee8:	46c4      	mov	ip, r8
 8010eea:	46a1      	mov	r9, r4
 8010eec:	2700      	movs	r7, #0
 8010eee:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8010ef6:	fa1f fb82 	uxth.w	fp, r2
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	fb0a 330b 	mla	r3, sl, fp, r3
 8010f00:	443b      	add	r3, r7
 8010f02:	f8d9 7000 	ldr.w	r7, [r9]
 8010f06:	0c12      	lsrs	r2, r2, #16
 8010f08:	0c3f      	lsrs	r7, r7, #16
 8010f0a:	fb0a 7202 	mla	r2, sl, r2, r7
 8010f0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f18:	4565      	cmp	r5, ip
 8010f1a:	f849 3b04 	str.w	r3, [r9], #4
 8010f1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010f22:	d8e4      	bhi.n	8010eee <__multiply+0xaa>
 8010f24:	9b01      	ldr	r3, [sp, #4]
 8010f26:	50e7      	str	r7, [r4, r3]
 8010f28:	9b03      	ldr	r3, [sp, #12]
 8010f2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010f2e:	3104      	adds	r1, #4
 8010f30:	f1b9 0f00 	cmp.w	r9, #0
 8010f34:	d020      	beq.n	8010f78 <__multiply+0x134>
 8010f36:	6823      	ldr	r3, [r4, #0]
 8010f38:	4647      	mov	r7, r8
 8010f3a:	46a4      	mov	ip, r4
 8010f3c:	f04f 0a00 	mov.w	sl, #0
 8010f40:	f8b7 b000 	ldrh.w	fp, [r7]
 8010f44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010f48:	fb09 220b 	mla	r2, r9, fp, r2
 8010f4c:	4452      	add	r2, sl
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f54:	f84c 3b04 	str.w	r3, [ip], #4
 8010f58:	f857 3b04 	ldr.w	r3, [r7], #4
 8010f5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f60:	f8bc 3000 	ldrh.w	r3, [ip]
 8010f64:	fb09 330a 	mla	r3, r9, sl, r3
 8010f68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010f6c:	42bd      	cmp	r5, r7
 8010f6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f72:	d8e5      	bhi.n	8010f40 <__multiply+0xfc>
 8010f74:	9a01      	ldr	r2, [sp, #4]
 8010f76:	50a3      	str	r3, [r4, r2]
 8010f78:	3404      	adds	r4, #4
 8010f7a:	e79f      	b.n	8010ebc <__multiply+0x78>
 8010f7c:	3e01      	subs	r6, #1
 8010f7e:	e7a1      	b.n	8010ec4 <__multiply+0x80>
 8010f80:	0803e136 	.word	0x0803e136
 8010f84:	0803e147 	.word	0x0803e147

08010f88 <__pow5mult>:
 8010f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f8c:	4615      	mov	r5, r2
 8010f8e:	f012 0203 	ands.w	r2, r2, #3
 8010f92:	4607      	mov	r7, r0
 8010f94:	460e      	mov	r6, r1
 8010f96:	d007      	beq.n	8010fa8 <__pow5mult+0x20>
 8010f98:	4c25      	ldr	r4, [pc, #148]	@ (8011030 <__pow5mult+0xa8>)
 8010f9a:	3a01      	subs	r2, #1
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010fa2:	f7ff fe5d 	bl	8010c60 <__multadd>
 8010fa6:	4606      	mov	r6, r0
 8010fa8:	10ad      	asrs	r5, r5, #2
 8010faa:	d03d      	beq.n	8011028 <__pow5mult+0xa0>
 8010fac:	69fc      	ldr	r4, [r7, #28]
 8010fae:	b97c      	cbnz	r4, 8010fd0 <__pow5mult+0x48>
 8010fb0:	2010      	movs	r0, #16
 8010fb2:	f7fd fd63 	bl	800ea7c <malloc>
 8010fb6:	4602      	mov	r2, r0
 8010fb8:	61f8      	str	r0, [r7, #28]
 8010fba:	b928      	cbnz	r0, 8010fc8 <__pow5mult+0x40>
 8010fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8011034 <__pow5mult+0xac>)
 8010fbe:	481e      	ldr	r0, [pc, #120]	@ (8011038 <__pow5mult+0xb0>)
 8010fc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010fc4:	f001 faac 	bl	8012520 <__assert_func>
 8010fc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fcc:	6004      	str	r4, [r0, #0]
 8010fce:	60c4      	str	r4, [r0, #12]
 8010fd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010fd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fd8:	b94c      	cbnz	r4, 8010fee <__pow5mult+0x66>
 8010fda:	f240 2171 	movw	r1, #625	@ 0x271
 8010fde:	4638      	mov	r0, r7
 8010fe0:	f7ff ff1a 	bl	8010e18 <__i2b>
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fea:	4604      	mov	r4, r0
 8010fec:	6003      	str	r3, [r0, #0]
 8010fee:	f04f 0900 	mov.w	r9, #0
 8010ff2:	07eb      	lsls	r3, r5, #31
 8010ff4:	d50a      	bpl.n	801100c <__pow5mult+0x84>
 8010ff6:	4631      	mov	r1, r6
 8010ff8:	4622      	mov	r2, r4
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	f7ff ff22 	bl	8010e44 <__multiply>
 8011000:	4631      	mov	r1, r6
 8011002:	4680      	mov	r8, r0
 8011004:	4638      	mov	r0, r7
 8011006:	f7ff fe09 	bl	8010c1c <_Bfree>
 801100a:	4646      	mov	r6, r8
 801100c:	106d      	asrs	r5, r5, #1
 801100e:	d00b      	beq.n	8011028 <__pow5mult+0xa0>
 8011010:	6820      	ldr	r0, [r4, #0]
 8011012:	b938      	cbnz	r0, 8011024 <__pow5mult+0x9c>
 8011014:	4622      	mov	r2, r4
 8011016:	4621      	mov	r1, r4
 8011018:	4638      	mov	r0, r7
 801101a:	f7ff ff13 	bl	8010e44 <__multiply>
 801101e:	6020      	str	r0, [r4, #0]
 8011020:	f8c0 9000 	str.w	r9, [r0]
 8011024:	4604      	mov	r4, r0
 8011026:	e7e4      	b.n	8010ff2 <__pow5mult+0x6a>
 8011028:	4630      	mov	r0, r6
 801102a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801102e:	bf00      	nop
 8011030:	0803e258 	.word	0x0803e258
 8011034:	0803e0c7 	.word	0x0803e0c7
 8011038:	0803e147 	.word	0x0803e147

0801103c <__lshift>:
 801103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011040:	460c      	mov	r4, r1
 8011042:	6849      	ldr	r1, [r1, #4]
 8011044:	6923      	ldr	r3, [r4, #16]
 8011046:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801104a:	68a3      	ldr	r3, [r4, #8]
 801104c:	4607      	mov	r7, r0
 801104e:	4691      	mov	r9, r2
 8011050:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011054:	f108 0601 	add.w	r6, r8, #1
 8011058:	42b3      	cmp	r3, r6
 801105a:	db0b      	blt.n	8011074 <__lshift+0x38>
 801105c:	4638      	mov	r0, r7
 801105e:	f7ff fd9d 	bl	8010b9c <_Balloc>
 8011062:	4605      	mov	r5, r0
 8011064:	b948      	cbnz	r0, 801107a <__lshift+0x3e>
 8011066:	4602      	mov	r2, r0
 8011068:	4b28      	ldr	r3, [pc, #160]	@ (801110c <__lshift+0xd0>)
 801106a:	4829      	ldr	r0, [pc, #164]	@ (8011110 <__lshift+0xd4>)
 801106c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011070:	f001 fa56 	bl	8012520 <__assert_func>
 8011074:	3101      	adds	r1, #1
 8011076:	005b      	lsls	r3, r3, #1
 8011078:	e7ee      	b.n	8011058 <__lshift+0x1c>
 801107a:	2300      	movs	r3, #0
 801107c:	f100 0114 	add.w	r1, r0, #20
 8011080:	f100 0210 	add.w	r2, r0, #16
 8011084:	4618      	mov	r0, r3
 8011086:	4553      	cmp	r3, sl
 8011088:	db33      	blt.n	80110f2 <__lshift+0xb6>
 801108a:	6920      	ldr	r0, [r4, #16]
 801108c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011090:	f104 0314 	add.w	r3, r4, #20
 8011094:	f019 091f 	ands.w	r9, r9, #31
 8011098:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801109c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110a0:	d02b      	beq.n	80110fa <__lshift+0xbe>
 80110a2:	f1c9 0e20 	rsb	lr, r9, #32
 80110a6:	468a      	mov	sl, r1
 80110a8:	2200      	movs	r2, #0
 80110aa:	6818      	ldr	r0, [r3, #0]
 80110ac:	fa00 f009 	lsl.w	r0, r0, r9
 80110b0:	4310      	orrs	r0, r2
 80110b2:	f84a 0b04 	str.w	r0, [sl], #4
 80110b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ba:	459c      	cmp	ip, r3
 80110bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80110c0:	d8f3      	bhi.n	80110aa <__lshift+0x6e>
 80110c2:	ebac 0304 	sub.w	r3, ip, r4
 80110c6:	3b15      	subs	r3, #21
 80110c8:	f023 0303 	bic.w	r3, r3, #3
 80110cc:	3304      	adds	r3, #4
 80110ce:	f104 0015 	add.w	r0, r4, #21
 80110d2:	4560      	cmp	r0, ip
 80110d4:	bf88      	it	hi
 80110d6:	2304      	movhi	r3, #4
 80110d8:	50ca      	str	r2, [r1, r3]
 80110da:	b10a      	cbz	r2, 80110e0 <__lshift+0xa4>
 80110dc:	f108 0602 	add.w	r6, r8, #2
 80110e0:	3e01      	subs	r6, #1
 80110e2:	4638      	mov	r0, r7
 80110e4:	612e      	str	r6, [r5, #16]
 80110e6:	4621      	mov	r1, r4
 80110e8:	f7ff fd98 	bl	8010c1c <_Bfree>
 80110ec:	4628      	mov	r0, r5
 80110ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80110f6:	3301      	adds	r3, #1
 80110f8:	e7c5      	b.n	8011086 <__lshift+0x4a>
 80110fa:	3904      	subs	r1, #4
 80110fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011100:	f841 2f04 	str.w	r2, [r1, #4]!
 8011104:	459c      	cmp	ip, r3
 8011106:	d8f9      	bhi.n	80110fc <__lshift+0xc0>
 8011108:	e7ea      	b.n	80110e0 <__lshift+0xa4>
 801110a:	bf00      	nop
 801110c:	0803e136 	.word	0x0803e136
 8011110:	0803e147 	.word	0x0803e147

08011114 <__mcmp>:
 8011114:	690a      	ldr	r2, [r1, #16]
 8011116:	4603      	mov	r3, r0
 8011118:	6900      	ldr	r0, [r0, #16]
 801111a:	1a80      	subs	r0, r0, r2
 801111c:	b530      	push	{r4, r5, lr}
 801111e:	d10e      	bne.n	801113e <__mcmp+0x2a>
 8011120:	3314      	adds	r3, #20
 8011122:	3114      	adds	r1, #20
 8011124:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011128:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801112c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011130:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011134:	4295      	cmp	r5, r2
 8011136:	d003      	beq.n	8011140 <__mcmp+0x2c>
 8011138:	d205      	bcs.n	8011146 <__mcmp+0x32>
 801113a:	f04f 30ff 	mov.w	r0, #4294967295
 801113e:	bd30      	pop	{r4, r5, pc}
 8011140:	42a3      	cmp	r3, r4
 8011142:	d3f3      	bcc.n	801112c <__mcmp+0x18>
 8011144:	e7fb      	b.n	801113e <__mcmp+0x2a>
 8011146:	2001      	movs	r0, #1
 8011148:	e7f9      	b.n	801113e <__mcmp+0x2a>
	...

0801114c <__mdiff>:
 801114c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011150:	4689      	mov	r9, r1
 8011152:	4606      	mov	r6, r0
 8011154:	4611      	mov	r1, r2
 8011156:	4648      	mov	r0, r9
 8011158:	4614      	mov	r4, r2
 801115a:	f7ff ffdb 	bl	8011114 <__mcmp>
 801115e:	1e05      	subs	r5, r0, #0
 8011160:	d112      	bne.n	8011188 <__mdiff+0x3c>
 8011162:	4629      	mov	r1, r5
 8011164:	4630      	mov	r0, r6
 8011166:	f7ff fd19 	bl	8010b9c <_Balloc>
 801116a:	4602      	mov	r2, r0
 801116c:	b928      	cbnz	r0, 801117a <__mdiff+0x2e>
 801116e:	4b3f      	ldr	r3, [pc, #252]	@ (801126c <__mdiff+0x120>)
 8011170:	f240 2137 	movw	r1, #567	@ 0x237
 8011174:	483e      	ldr	r0, [pc, #248]	@ (8011270 <__mdiff+0x124>)
 8011176:	f001 f9d3 	bl	8012520 <__assert_func>
 801117a:	2301      	movs	r3, #1
 801117c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011180:	4610      	mov	r0, r2
 8011182:	b003      	add	sp, #12
 8011184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011188:	bfbc      	itt	lt
 801118a:	464b      	movlt	r3, r9
 801118c:	46a1      	movlt	r9, r4
 801118e:	4630      	mov	r0, r6
 8011190:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011194:	bfba      	itte	lt
 8011196:	461c      	movlt	r4, r3
 8011198:	2501      	movlt	r5, #1
 801119a:	2500      	movge	r5, #0
 801119c:	f7ff fcfe 	bl	8010b9c <_Balloc>
 80111a0:	4602      	mov	r2, r0
 80111a2:	b918      	cbnz	r0, 80111ac <__mdiff+0x60>
 80111a4:	4b31      	ldr	r3, [pc, #196]	@ (801126c <__mdiff+0x120>)
 80111a6:	f240 2145 	movw	r1, #581	@ 0x245
 80111aa:	e7e3      	b.n	8011174 <__mdiff+0x28>
 80111ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80111b0:	6926      	ldr	r6, [r4, #16]
 80111b2:	60c5      	str	r5, [r0, #12]
 80111b4:	f109 0310 	add.w	r3, r9, #16
 80111b8:	f109 0514 	add.w	r5, r9, #20
 80111bc:	f104 0e14 	add.w	lr, r4, #20
 80111c0:	f100 0b14 	add.w	fp, r0, #20
 80111c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80111c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80111cc:	9301      	str	r3, [sp, #4]
 80111ce:	46d9      	mov	r9, fp
 80111d0:	f04f 0c00 	mov.w	ip, #0
 80111d4:	9b01      	ldr	r3, [sp, #4]
 80111d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80111da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80111de:	9301      	str	r3, [sp, #4]
 80111e0:	fa1f f38a 	uxth.w	r3, sl
 80111e4:	4619      	mov	r1, r3
 80111e6:	b283      	uxth	r3, r0
 80111e8:	1acb      	subs	r3, r1, r3
 80111ea:	0c00      	lsrs	r0, r0, #16
 80111ec:	4463      	add	r3, ip
 80111ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80111f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80111fc:	4576      	cmp	r6, lr
 80111fe:	f849 3b04 	str.w	r3, [r9], #4
 8011202:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011206:	d8e5      	bhi.n	80111d4 <__mdiff+0x88>
 8011208:	1b33      	subs	r3, r6, r4
 801120a:	3b15      	subs	r3, #21
 801120c:	f023 0303 	bic.w	r3, r3, #3
 8011210:	3415      	adds	r4, #21
 8011212:	3304      	adds	r3, #4
 8011214:	42a6      	cmp	r6, r4
 8011216:	bf38      	it	cc
 8011218:	2304      	movcc	r3, #4
 801121a:	441d      	add	r5, r3
 801121c:	445b      	add	r3, fp
 801121e:	461e      	mov	r6, r3
 8011220:	462c      	mov	r4, r5
 8011222:	4544      	cmp	r4, r8
 8011224:	d30e      	bcc.n	8011244 <__mdiff+0xf8>
 8011226:	f108 0103 	add.w	r1, r8, #3
 801122a:	1b49      	subs	r1, r1, r5
 801122c:	f021 0103 	bic.w	r1, r1, #3
 8011230:	3d03      	subs	r5, #3
 8011232:	45a8      	cmp	r8, r5
 8011234:	bf38      	it	cc
 8011236:	2100      	movcc	r1, #0
 8011238:	440b      	add	r3, r1
 801123a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801123e:	b191      	cbz	r1, 8011266 <__mdiff+0x11a>
 8011240:	6117      	str	r7, [r2, #16]
 8011242:	e79d      	b.n	8011180 <__mdiff+0x34>
 8011244:	f854 1b04 	ldr.w	r1, [r4], #4
 8011248:	46e6      	mov	lr, ip
 801124a:	0c08      	lsrs	r0, r1, #16
 801124c:	fa1c fc81 	uxtah	ip, ip, r1
 8011250:	4471      	add	r1, lr
 8011252:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011256:	b289      	uxth	r1, r1
 8011258:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801125c:	f846 1b04 	str.w	r1, [r6], #4
 8011260:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011264:	e7dd      	b.n	8011222 <__mdiff+0xd6>
 8011266:	3f01      	subs	r7, #1
 8011268:	e7e7      	b.n	801123a <__mdiff+0xee>
 801126a:	bf00      	nop
 801126c:	0803e136 	.word	0x0803e136
 8011270:	0803e147 	.word	0x0803e147

08011274 <__ulp>:
 8011274:	b082      	sub	sp, #8
 8011276:	ed8d 0b00 	vstr	d0, [sp]
 801127a:	9a01      	ldr	r2, [sp, #4]
 801127c:	4b0f      	ldr	r3, [pc, #60]	@ (80112bc <__ulp+0x48>)
 801127e:	4013      	ands	r3, r2
 8011280:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011284:	2b00      	cmp	r3, #0
 8011286:	dc08      	bgt.n	801129a <__ulp+0x26>
 8011288:	425b      	negs	r3, r3
 801128a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801128e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011292:	da04      	bge.n	801129e <__ulp+0x2a>
 8011294:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011298:	4113      	asrs	r3, r2
 801129a:	2200      	movs	r2, #0
 801129c:	e008      	b.n	80112b0 <__ulp+0x3c>
 801129e:	f1a2 0314 	sub.w	r3, r2, #20
 80112a2:	2b1e      	cmp	r3, #30
 80112a4:	bfda      	itte	le
 80112a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80112aa:	40da      	lsrle	r2, r3
 80112ac:	2201      	movgt	r2, #1
 80112ae:	2300      	movs	r3, #0
 80112b0:	4619      	mov	r1, r3
 80112b2:	4610      	mov	r0, r2
 80112b4:	ec41 0b10 	vmov	d0, r0, r1
 80112b8:	b002      	add	sp, #8
 80112ba:	4770      	bx	lr
 80112bc:	7ff00000 	.word	0x7ff00000

080112c0 <__b2d>:
 80112c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c4:	6906      	ldr	r6, [r0, #16]
 80112c6:	f100 0814 	add.w	r8, r0, #20
 80112ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80112ce:	1f37      	subs	r7, r6, #4
 80112d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80112d4:	4610      	mov	r0, r2
 80112d6:	f7ff fd53 	bl	8010d80 <__hi0bits>
 80112da:	f1c0 0320 	rsb	r3, r0, #32
 80112de:	280a      	cmp	r0, #10
 80112e0:	600b      	str	r3, [r1, #0]
 80112e2:	491b      	ldr	r1, [pc, #108]	@ (8011350 <__b2d+0x90>)
 80112e4:	dc15      	bgt.n	8011312 <__b2d+0x52>
 80112e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80112ea:	fa22 f30c 	lsr.w	r3, r2, ip
 80112ee:	45b8      	cmp	r8, r7
 80112f0:	ea43 0501 	orr.w	r5, r3, r1
 80112f4:	bf34      	ite	cc
 80112f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80112fa:	2300      	movcs	r3, #0
 80112fc:	3015      	adds	r0, #21
 80112fe:	fa02 f000 	lsl.w	r0, r2, r0
 8011302:	fa23 f30c 	lsr.w	r3, r3, ip
 8011306:	4303      	orrs	r3, r0
 8011308:	461c      	mov	r4, r3
 801130a:	ec45 4b10 	vmov	d0, r4, r5
 801130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011312:	45b8      	cmp	r8, r7
 8011314:	bf3a      	itte	cc
 8011316:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801131a:	f1a6 0708 	subcc.w	r7, r6, #8
 801131e:	2300      	movcs	r3, #0
 8011320:	380b      	subs	r0, #11
 8011322:	d012      	beq.n	801134a <__b2d+0x8a>
 8011324:	f1c0 0120 	rsb	r1, r0, #32
 8011328:	fa23 f401 	lsr.w	r4, r3, r1
 801132c:	4082      	lsls	r2, r0
 801132e:	4322      	orrs	r2, r4
 8011330:	4547      	cmp	r7, r8
 8011332:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011336:	bf8c      	ite	hi
 8011338:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801133c:	2200      	movls	r2, #0
 801133e:	4083      	lsls	r3, r0
 8011340:	40ca      	lsrs	r2, r1
 8011342:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011346:	4313      	orrs	r3, r2
 8011348:	e7de      	b.n	8011308 <__b2d+0x48>
 801134a:	ea42 0501 	orr.w	r5, r2, r1
 801134e:	e7db      	b.n	8011308 <__b2d+0x48>
 8011350:	3ff00000 	.word	0x3ff00000

08011354 <__d2b>:
 8011354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011358:	460f      	mov	r7, r1
 801135a:	2101      	movs	r1, #1
 801135c:	ec59 8b10 	vmov	r8, r9, d0
 8011360:	4616      	mov	r6, r2
 8011362:	f7ff fc1b 	bl	8010b9c <_Balloc>
 8011366:	4604      	mov	r4, r0
 8011368:	b930      	cbnz	r0, 8011378 <__d2b+0x24>
 801136a:	4602      	mov	r2, r0
 801136c:	4b23      	ldr	r3, [pc, #140]	@ (80113fc <__d2b+0xa8>)
 801136e:	4824      	ldr	r0, [pc, #144]	@ (8011400 <__d2b+0xac>)
 8011370:	f240 310f 	movw	r1, #783	@ 0x30f
 8011374:	f001 f8d4 	bl	8012520 <__assert_func>
 8011378:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801137c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011380:	b10d      	cbz	r5, 8011386 <__d2b+0x32>
 8011382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011386:	9301      	str	r3, [sp, #4]
 8011388:	f1b8 0300 	subs.w	r3, r8, #0
 801138c:	d023      	beq.n	80113d6 <__d2b+0x82>
 801138e:	4668      	mov	r0, sp
 8011390:	9300      	str	r3, [sp, #0]
 8011392:	f7ff fd14 	bl	8010dbe <__lo0bits>
 8011396:	e9dd 1200 	ldrd	r1, r2, [sp]
 801139a:	b1d0      	cbz	r0, 80113d2 <__d2b+0x7e>
 801139c:	f1c0 0320 	rsb	r3, r0, #32
 80113a0:	fa02 f303 	lsl.w	r3, r2, r3
 80113a4:	430b      	orrs	r3, r1
 80113a6:	40c2      	lsrs	r2, r0
 80113a8:	6163      	str	r3, [r4, #20]
 80113aa:	9201      	str	r2, [sp, #4]
 80113ac:	9b01      	ldr	r3, [sp, #4]
 80113ae:	61a3      	str	r3, [r4, #24]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	bf0c      	ite	eq
 80113b4:	2201      	moveq	r2, #1
 80113b6:	2202      	movne	r2, #2
 80113b8:	6122      	str	r2, [r4, #16]
 80113ba:	b1a5      	cbz	r5, 80113e6 <__d2b+0x92>
 80113bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80113c0:	4405      	add	r5, r0
 80113c2:	603d      	str	r5, [r7, #0]
 80113c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80113c8:	6030      	str	r0, [r6, #0]
 80113ca:	4620      	mov	r0, r4
 80113cc:	b003      	add	sp, #12
 80113ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113d2:	6161      	str	r1, [r4, #20]
 80113d4:	e7ea      	b.n	80113ac <__d2b+0x58>
 80113d6:	a801      	add	r0, sp, #4
 80113d8:	f7ff fcf1 	bl	8010dbe <__lo0bits>
 80113dc:	9b01      	ldr	r3, [sp, #4]
 80113de:	6163      	str	r3, [r4, #20]
 80113e0:	3020      	adds	r0, #32
 80113e2:	2201      	movs	r2, #1
 80113e4:	e7e8      	b.n	80113b8 <__d2b+0x64>
 80113e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80113ee:	6038      	str	r0, [r7, #0]
 80113f0:	6918      	ldr	r0, [r3, #16]
 80113f2:	f7ff fcc5 	bl	8010d80 <__hi0bits>
 80113f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80113fa:	e7e5      	b.n	80113c8 <__d2b+0x74>
 80113fc:	0803e136 	.word	0x0803e136
 8011400:	0803e147 	.word	0x0803e147

08011404 <__ratio>:
 8011404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011408:	b085      	sub	sp, #20
 801140a:	e9cd 1000 	strd	r1, r0, [sp]
 801140e:	a902      	add	r1, sp, #8
 8011410:	f7ff ff56 	bl	80112c0 <__b2d>
 8011414:	9800      	ldr	r0, [sp, #0]
 8011416:	a903      	add	r1, sp, #12
 8011418:	ec55 4b10 	vmov	r4, r5, d0
 801141c:	f7ff ff50 	bl	80112c0 <__b2d>
 8011420:	9b01      	ldr	r3, [sp, #4]
 8011422:	6919      	ldr	r1, [r3, #16]
 8011424:	9b00      	ldr	r3, [sp, #0]
 8011426:	691b      	ldr	r3, [r3, #16]
 8011428:	1ac9      	subs	r1, r1, r3
 801142a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801142e:	1a9b      	subs	r3, r3, r2
 8011430:	ec5b ab10 	vmov	sl, fp, d0
 8011434:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011438:	2b00      	cmp	r3, #0
 801143a:	bfce      	itee	gt
 801143c:	462a      	movgt	r2, r5
 801143e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011442:	465a      	movle	r2, fp
 8011444:	462f      	mov	r7, r5
 8011446:	46d9      	mov	r9, fp
 8011448:	bfcc      	ite	gt
 801144a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801144e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011452:	464b      	mov	r3, r9
 8011454:	4652      	mov	r2, sl
 8011456:	4620      	mov	r0, r4
 8011458:	4639      	mov	r1, r7
 801145a:	f7ef fa07 	bl	800086c <__aeabi_ddiv>
 801145e:	ec41 0b10 	vmov	d0, r0, r1
 8011462:	b005      	add	sp, #20
 8011464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011468 <__copybits>:
 8011468:	3901      	subs	r1, #1
 801146a:	b570      	push	{r4, r5, r6, lr}
 801146c:	1149      	asrs	r1, r1, #5
 801146e:	6914      	ldr	r4, [r2, #16]
 8011470:	3101      	adds	r1, #1
 8011472:	f102 0314 	add.w	r3, r2, #20
 8011476:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801147a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801147e:	1f05      	subs	r5, r0, #4
 8011480:	42a3      	cmp	r3, r4
 8011482:	d30c      	bcc.n	801149e <__copybits+0x36>
 8011484:	1aa3      	subs	r3, r4, r2
 8011486:	3b11      	subs	r3, #17
 8011488:	f023 0303 	bic.w	r3, r3, #3
 801148c:	3211      	adds	r2, #17
 801148e:	42a2      	cmp	r2, r4
 8011490:	bf88      	it	hi
 8011492:	2300      	movhi	r3, #0
 8011494:	4418      	add	r0, r3
 8011496:	2300      	movs	r3, #0
 8011498:	4288      	cmp	r0, r1
 801149a:	d305      	bcc.n	80114a8 <__copybits+0x40>
 801149c:	bd70      	pop	{r4, r5, r6, pc}
 801149e:	f853 6b04 	ldr.w	r6, [r3], #4
 80114a2:	f845 6f04 	str.w	r6, [r5, #4]!
 80114a6:	e7eb      	b.n	8011480 <__copybits+0x18>
 80114a8:	f840 3b04 	str.w	r3, [r0], #4
 80114ac:	e7f4      	b.n	8011498 <__copybits+0x30>

080114ae <__any_on>:
 80114ae:	f100 0214 	add.w	r2, r0, #20
 80114b2:	6900      	ldr	r0, [r0, #16]
 80114b4:	114b      	asrs	r3, r1, #5
 80114b6:	4298      	cmp	r0, r3
 80114b8:	b510      	push	{r4, lr}
 80114ba:	db11      	blt.n	80114e0 <__any_on+0x32>
 80114bc:	dd0a      	ble.n	80114d4 <__any_on+0x26>
 80114be:	f011 011f 	ands.w	r1, r1, #31
 80114c2:	d007      	beq.n	80114d4 <__any_on+0x26>
 80114c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80114c8:	fa24 f001 	lsr.w	r0, r4, r1
 80114cc:	fa00 f101 	lsl.w	r1, r0, r1
 80114d0:	428c      	cmp	r4, r1
 80114d2:	d10b      	bne.n	80114ec <__any_on+0x3e>
 80114d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80114d8:	4293      	cmp	r3, r2
 80114da:	d803      	bhi.n	80114e4 <__any_on+0x36>
 80114dc:	2000      	movs	r0, #0
 80114de:	bd10      	pop	{r4, pc}
 80114e0:	4603      	mov	r3, r0
 80114e2:	e7f7      	b.n	80114d4 <__any_on+0x26>
 80114e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114e8:	2900      	cmp	r1, #0
 80114ea:	d0f5      	beq.n	80114d8 <__any_on+0x2a>
 80114ec:	2001      	movs	r0, #1
 80114ee:	e7f6      	b.n	80114de <__any_on+0x30>

080114f0 <sulp>:
 80114f0:	b570      	push	{r4, r5, r6, lr}
 80114f2:	4604      	mov	r4, r0
 80114f4:	460d      	mov	r5, r1
 80114f6:	ec45 4b10 	vmov	d0, r4, r5
 80114fa:	4616      	mov	r6, r2
 80114fc:	f7ff feba 	bl	8011274 <__ulp>
 8011500:	ec51 0b10 	vmov	r0, r1, d0
 8011504:	b17e      	cbz	r6, 8011526 <sulp+0x36>
 8011506:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801150a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801150e:	2b00      	cmp	r3, #0
 8011510:	dd09      	ble.n	8011526 <sulp+0x36>
 8011512:	051b      	lsls	r3, r3, #20
 8011514:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011518:	2400      	movs	r4, #0
 801151a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801151e:	4622      	mov	r2, r4
 8011520:	462b      	mov	r3, r5
 8011522:	f7ef f879 	bl	8000618 <__aeabi_dmul>
 8011526:	ec41 0b10 	vmov	d0, r0, r1
 801152a:	bd70      	pop	{r4, r5, r6, pc}
 801152c:	0000      	movs	r0, r0
	...

08011530 <_strtod_l>:
 8011530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011534:	b09f      	sub	sp, #124	@ 0x7c
 8011536:	460c      	mov	r4, r1
 8011538:	9217      	str	r2, [sp, #92]	@ 0x5c
 801153a:	2200      	movs	r2, #0
 801153c:	921a      	str	r2, [sp, #104]	@ 0x68
 801153e:	9005      	str	r0, [sp, #20]
 8011540:	f04f 0a00 	mov.w	sl, #0
 8011544:	f04f 0b00 	mov.w	fp, #0
 8011548:	460a      	mov	r2, r1
 801154a:	9219      	str	r2, [sp, #100]	@ 0x64
 801154c:	7811      	ldrb	r1, [r2, #0]
 801154e:	292b      	cmp	r1, #43	@ 0x2b
 8011550:	d04a      	beq.n	80115e8 <_strtod_l+0xb8>
 8011552:	d838      	bhi.n	80115c6 <_strtod_l+0x96>
 8011554:	290d      	cmp	r1, #13
 8011556:	d832      	bhi.n	80115be <_strtod_l+0x8e>
 8011558:	2908      	cmp	r1, #8
 801155a:	d832      	bhi.n	80115c2 <_strtod_l+0x92>
 801155c:	2900      	cmp	r1, #0
 801155e:	d03b      	beq.n	80115d8 <_strtod_l+0xa8>
 8011560:	2200      	movs	r2, #0
 8011562:	920e      	str	r2, [sp, #56]	@ 0x38
 8011564:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011566:	782a      	ldrb	r2, [r5, #0]
 8011568:	2a30      	cmp	r2, #48	@ 0x30
 801156a:	f040 80b2 	bne.w	80116d2 <_strtod_l+0x1a2>
 801156e:	786a      	ldrb	r2, [r5, #1]
 8011570:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011574:	2a58      	cmp	r2, #88	@ 0x58
 8011576:	d16e      	bne.n	8011656 <_strtod_l+0x126>
 8011578:	9302      	str	r3, [sp, #8]
 801157a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801157c:	9301      	str	r3, [sp, #4]
 801157e:	ab1a      	add	r3, sp, #104	@ 0x68
 8011580:	9300      	str	r3, [sp, #0]
 8011582:	4a8f      	ldr	r2, [pc, #572]	@ (80117c0 <_strtod_l+0x290>)
 8011584:	9805      	ldr	r0, [sp, #20]
 8011586:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011588:	a919      	add	r1, sp, #100	@ 0x64
 801158a:	f001 f863 	bl	8012654 <__gethex>
 801158e:	f010 060f 	ands.w	r6, r0, #15
 8011592:	4604      	mov	r4, r0
 8011594:	d005      	beq.n	80115a2 <_strtod_l+0x72>
 8011596:	2e06      	cmp	r6, #6
 8011598:	d128      	bne.n	80115ec <_strtod_l+0xbc>
 801159a:	3501      	adds	r5, #1
 801159c:	2300      	movs	r3, #0
 801159e:	9519      	str	r5, [sp, #100]	@ 0x64
 80115a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80115a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	f040 858e 	bne.w	80120c6 <_strtod_l+0xb96>
 80115aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115ac:	b1cb      	cbz	r3, 80115e2 <_strtod_l+0xb2>
 80115ae:	4652      	mov	r2, sl
 80115b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80115b4:	ec43 2b10 	vmov	d0, r2, r3
 80115b8:	b01f      	add	sp, #124	@ 0x7c
 80115ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115be:	2920      	cmp	r1, #32
 80115c0:	d1ce      	bne.n	8011560 <_strtod_l+0x30>
 80115c2:	3201      	adds	r2, #1
 80115c4:	e7c1      	b.n	801154a <_strtod_l+0x1a>
 80115c6:	292d      	cmp	r1, #45	@ 0x2d
 80115c8:	d1ca      	bne.n	8011560 <_strtod_l+0x30>
 80115ca:	2101      	movs	r1, #1
 80115cc:	910e      	str	r1, [sp, #56]	@ 0x38
 80115ce:	1c51      	adds	r1, r2, #1
 80115d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80115d2:	7852      	ldrb	r2, [r2, #1]
 80115d4:	2a00      	cmp	r2, #0
 80115d6:	d1c5      	bne.n	8011564 <_strtod_l+0x34>
 80115d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80115da:	9419      	str	r4, [sp, #100]	@ 0x64
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f040 8570 	bne.w	80120c2 <_strtod_l+0xb92>
 80115e2:	4652      	mov	r2, sl
 80115e4:	465b      	mov	r3, fp
 80115e6:	e7e5      	b.n	80115b4 <_strtod_l+0x84>
 80115e8:	2100      	movs	r1, #0
 80115ea:	e7ef      	b.n	80115cc <_strtod_l+0x9c>
 80115ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80115ee:	b13a      	cbz	r2, 8011600 <_strtod_l+0xd0>
 80115f0:	2135      	movs	r1, #53	@ 0x35
 80115f2:	a81c      	add	r0, sp, #112	@ 0x70
 80115f4:	f7ff ff38 	bl	8011468 <__copybits>
 80115f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80115fa:	9805      	ldr	r0, [sp, #20]
 80115fc:	f7ff fb0e 	bl	8010c1c <_Bfree>
 8011600:	3e01      	subs	r6, #1
 8011602:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011604:	2e04      	cmp	r6, #4
 8011606:	d806      	bhi.n	8011616 <_strtod_l+0xe6>
 8011608:	e8df f006 	tbb	[pc, r6]
 801160c:	201d0314 	.word	0x201d0314
 8011610:	14          	.byte	0x14
 8011611:	00          	.byte	0x00
 8011612:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011616:	05e1      	lsls	r1, r4, #23
 8011618:	bf48      	it	mi
 801161a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801161e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011622:	0d1b      	lsrs	r3, r3, #20
 8011624:	051b      	lsls	r3, r3, #20
 8011626:	2b00      	cmp	r3, #0
 8011628:	d1bb      	bne.n	80115a2 <_strtod_l+0x72>
 801162a:	f7fe fbd1 	bl	800fdd0 <__errno>
 801162e:	2322      	movs	r3, #34	@ 0x22
 8011630:	6003      	str	r3, [r0, #0]
 8011632:	e7b6      	b.n	80115a2 <_strtod_l+0x72>
 8011634:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011638:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801163c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011640:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011644:	e7e7      	b.n	8011616 <_strtod_l+0xe6>
 8011646:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80117c8 <_strtod_l+0x298>
 801164a:	e7e4      	b.n	8011616 <_strtod_l+0xe6>
 801164c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011650:	f04f 3aff 	mov.w	sl, #4294967295
 8011654:	e7df      	b.n	8011616 <_strtod_l+0xe6>
 8011656:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011658:	1c5a      	adds	r2, r3, #1
 801165a:	9219      	str	r2, [sp, #100]	@ 0x64
 801165c:	785b      	ldrb	r3, [r3, #1]
 801165e:	2b30      	cmp	r3, #48	@ 0x30
 8011660:	d0f9      	beq.n	8011656 <_strtod_l+0x126>
 8011662:	2b00      	cmp	r3, #0
 8011664:	d09d      	beq.n	80115a2 <_strtod_l+0x72>
 8011666:	2301      	movs	r3, #1
 8011668:	2700      	movs	r7, #0
 801166a:	9308      	str	r3, [sp, #32]
 801166c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801166e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011670:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011672:	46b9      	mov	r9, r7
 8011674:	220a      	movs	r2, #10
 8011676:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011678:	7805      	ldrb	r5, [r0, #0]
 801167a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801167e:	b2d9      	uxtb	r1, r3
 8011680:	2909      	cmp	r1, #9
 8011682:	d928      	bls.n	80116d6 <_strtod_l+0x1a6>
 8011684:	494f      	ldr	r1, [pc, #316]	@ (80117c4 <_strtod_l+0x294>)
 8011686:	2201      	movs	r2, #1
 8011688:	f7fe fb1f 	bl	800fcca <strncmp>
 801168c:	2800      	cmp	r0, #0
 801168e:	d032      	beq.n	80116f6 <_strtod_l+0x1c6>
 8011690:	2000      	movs	r0, #0
 8011692:	462a      	mov	r2, r5
 8011694:	900a      	str	r0, [sp, #40]	@ 0x28
 8011696:	464d      	mov	r5, r9
 8011698:	4603      	mov	r3, r0
 801169a:	2a65      	cmp	r2, #101	@ 0x65
 801169c:	d001      	beq.n	80116a2 <_strtod_l+0x172>
 801169e:	2a45      	cmp	r2, #69	@ 0x45
 80116a0:	d114      	bne.n	80116cc <_strtod_l+0x19c>
 80116a2:	b91d      	cbnz	r5, 80116ac <_strtod_l+0x17c>
 80116a4:	9a08      	ldr	r2, [sp, #32]
 80116a6:	4302      	orrs	r2, r0
 80116a8:	d096      	beq.n	80115d8 <_strtod_l+0xa8>
 80116aa:	2500      	movs	r5, #0
 80116ac:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80116ae:	1c62      	adds	r2, r4, #1
 80116b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80116b2:	7862      	ldrb	r2, [r4, #1]
 80116b4:	2a2b      	cmp	r2, #43	@ 0x2b
 80116b6:	d07a      	beq.n	80117ae <_strtod_l+0x27e>
 80116b8:	2a2d      	cmp	r2, #45	@ 0x2d
 80116ba:	d07e      	beq.n	80117ba <_strtod_l+0x28a>
 80116bc:	f04f 0c00 	mov.w	ip, #0
 80116c0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80116c4:	2909      	cmp	r1, #9
 80116c6:	f240 8085 	bls.w	80117d4 <_strtod_l+0x2a4>
 80116ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80116cc:	f04f 0800 	mov.w	r8, #0
 80116d0:	e0a5      	b.n	801181e <_strtod_l+0x2ee>
 80116d2:	2300      	movs	r3, #0
 80116d4:	e7c8      	b.n	8011668 <_strtod_l+0x138>
 80116d6:	f1b9 0f08 	cmp.w	r9, #8
 80116da:	bfd8      	it	le
 80116dc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80116de:	f100 0001 	add.w	r0, r0, #1
 80116e2:	bfda      	itte	le
 80116e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80116e8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80116ea:	fb02 3707 	mlagt	r7, r2, r7, r3
 80116ee:	f109 0901 	add.w	r9, r9, #1
 80116f2:	9019      	str	r0, [sp, #100]	@ 0x64
 80116f4:	e7bf      	b.n	8011676 <_strtod_l+0x146>
 80116f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80116f8:	1c5a      	adds	r2, r3, #1
 80116fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80116fc:	785a      	ldrb	r2, [r3, #1]
 80116fe:	f1b9 0f00 	cmp.w	r9, #0
 8011702:	d03b      	beq.n	801177c <_strtod_l+0x24c>
 8011704:	900a      	str	r0, [sp, #40]	@ 0x28
 8011706:	464d      	mov	r5, r9
 8011708:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801170c:	2b09      	cmp	r3, #9
 801170e:	d912      	bls.n	8011736 <_strtod_l+0x206>
 8011710:	2301      	movs	r3, #1
 8011712:	e7c2      	b.n	801169a <_strtod_l+0x16a>
 8011714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011716:	1c5a      	adds	r2, r3, #1
 8011718:	9219      	str	r2, [sp, #100]	@ 0x64
 801171a:	785a      	ldrb	r2, [r3, #1]
 801171c:	3001      	adds	r0, #1
 801171e:	2a30      	cmp	r2, #48	@ 0x30
 8011720:	d0f8      	beq.n	8011714 <_strtod_l+0x1e4>
 8011722:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011726:	2b08      	cmp	r3, #8
 8011728:	f200 84d2 	bhi.w	80120d0 <_strtod_l+0xba0>
 801172c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801172e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011730:	2000      	movs	r0, #0
 8011732:	930c      	str	r3, [sp, #48]	@ 0x30
 8011734:	4605      	mov	r5, r0
 8011736:	3a30      	subs	r2, #48	@ 0x30
 8011738:	f100 0301 	add.w	r3, r0, #1
 801173c:	d018      	beq.n	8011770 <_strtod_l+0x240>
 801173e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011740:	4419      	add	r1, r3
 8011742:	910a      	str	r1, [sp, #40]	@ 0x28
 8011744:	462e      	mov	r6, r5
 8011746:	f04f 0e0a 	mov.w	lr, #10
 801174a:	1c71      	adds	r1, r6, #1
 801174c:	eba1 0c05 	sub.w	ip, r1, r5
 8011750:	4563      	cmp	r3, ip
 8011752:	dc15      	bgt.n	8011780 <_strtod_l+0x250>
 8011754:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011758:	182b      	adds	r3, r5, r0
 801175a:	2b08      	cmp	r3, #8
 801175c:	f105 0501 	add.w	r5, r5, #1
 8011760:	4405      	add	r5, r0
 8011762:	dc1a      	bgt.n	801179a <_strtod_l+0x26a>
 8011764:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011766:	230a      	movs	r3, #10
 8011768:	fb03 2301 	mla	r3, r3, r1, r2
 801176c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801176e:	2300      	movs	r3, #0
 8011770:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011772:	1c51      	adds	r1, r2, #1
 8011774:	9119      	str	r1, [sp, #100]	@ 0x64
 8011776:	7852      	ldrb	r2, [r2, #1]
 8011778:	4618      	mov	r0, r3
 801177a:	e7c5      	b.n	8011708 <_strtod_l+0x1d8>
 801177c:	4648      	mov	r0, r9
 801177e:	e7ce      	b.n	801171e <_strtod_l+0x1ee>
 8011780:	2e08      	cmp	r6, #8
 8011782:	dc05      	bgt.n	8011790 <_strtod_l+0x260>
 8011784:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011786:	fb0e f606 	mul.w	r6, lr, r6
 801178a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801178c:	460e      	mov	r6, r1
 801178e:	e7dc      	b.n	801174a <_strtod_l+0x21a>
 8011790:	2910      	cmp	r1, #16
 8011792:	bfd8      	it	le
 8011794:	fb0e f707 	mulle.w	r7, lr, r7
 8011798:	e7f8      	b.n	801178c <_strtod_l+0x25c>
 801179a:	2b0f      	cmp	r3, #15
 801179c:	bfdc      	itt	le
 801179e:	230a      	movle	r3, #10
 80117a0:	fb03 2707 	mlale	r7, r3, r7, r2
 80117a4:	e7e3      	b.n	801176e <_strtod_l+0x23e>
 80117a6:	2300      	movs	r3, #0
 80117a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80117aa:	2301      	movs	r3, #1
 80117ac:	e77a      	b.n	80116a4 <_strtod_l+0x174>
 80117ae:	f04f 0c00 	mov.w	ip, #0
 80117b2:	1ca2      	adds	r2, r4, #2
 80117b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80117b6:	78a2      	ldrb	r2, [r4, #2]
 80117b8:	e782      	b.n	80116c0 <_strtod_l+0x190>
 80117ba:	f04f 0c01 	mov.w	ip, #1
 80117be:	e7f8      	b.n	80117b2 <_strtod_l+0x282>
 80117c0:	0803e36c 	.word	0x0803e36c
 80117c4:	0803e1a0 	.word	0x0803e1a0
 80117c8:	7ff00000 	.word	0x7ff00000
 80117cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80117ce:	1c51      	adds	r1, r2, #1
 80117d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80117d2:	7852      	ldrb	r2, [r2, #1]
 80117d4:	2a30      	cmp	r2, #48	@ 0x30
 80117d6:	d0f9      	beq.n	80117cc <_strtod_l+0x29c>
 80117d8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80117dc:	2908      	cmp	r1, #8
 80117de:	f63f af75 	bhi.w	80116cc <_strtod_l+0x19c>
 80117e2:	3a30      	subs	r2, #48	@ 0x30
 80117e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80117e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80117e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80117ea:	f04f 080a 	mov.w	r8, #10
 80117ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80117f0:	1c56      	adds	r6, r2, #1
 80117f2:	9619      	str	r6, [sp, #100]	@ 0x64
 80117f4:	7852      	ldrb	r2, [r2, #1]
 80117f6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80117fa:	f1be 0f09 	cmp.w	lr, #9
 80117fe:	d939      	bls.n	8011874 <_strtod_l+0x344>
 8011800:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011802:	1a76      	subs	r6, r6, r1
 8011804:	2e08      	cmp	r6, #8
 8011806:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801180a:	dc03      	bgt.n	8011814 <_strtod_l+0x2e4>
 801180c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801180e:	4588      	cmp	r8, r1
 8011810:	bfa8      	it	ge
 8011812:	4688      	movge	r8, r1
 8011814:	f1bc 0f00 	cmp.w	ip, #0
 8011818:	d001      	beq.n	801181e <_strtod_l+0x2ee>
 801181a:	f1c8 0800 	rsb	r8, r8, #0
 801181e:	2d00      	cmp	r5, #0
 8011820:	d14e      	bne.n	80118c0 <_strtod_l+0x390>
 8011822:	9908      	ldr	r1, [sp, #32]
 8011824:	4308      	orrs	r0, r1
 8011826:	f47f aebc 	bne.w	80115a2 <_strtod_l+0x72>
 801182a:	2b00      	cmp	r3, #0
 801182c:	f47f aed4 	bne.w	80115d8 <_strtod_l+0xa8>
 8011830:	2a69      	cmp	r2, #105	@ 0x69
 8011832:	d028      	beq.n	8011886 <_strtod_l+0x356>
 8011834:	dc25      	bgt.n	8011882 <_strtod_l+0x352>
 8011836:	2a49      	cmp	r2, #73	@ 0x49
 8011838:	d025      	beq.n	8011886 <_strtod_l+0x356>
 801183a:	2a4e      	cmp	r2, #78	@ 0x4e
 801183c:	f47f aecc 	bne.w	80115d8 <_strtod_l+0xa8>
 8011840:	499a      	ldr	r1, [pc, #616]	@ (8011aac <_strtod_l+0x57c>)
 8011842:	a819      	add	r0, sp, #100	@ 0x64
 8011844:	f001 f928 	bl	8012a98 <__match>
 8011848:	2800      	cmp	r0, #0
 801184a:	f43f aec5 	beq.w	80115d8 <_strtod_l+0xa8>
 801184e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	2b28      	cmp	r3, #40	@ 0x28
 8011854:	d12e      	bne.n	80118b4 <_strtod_l+0x384>
 8011856:	4996      	ldr	r1, [pc, #600]	@ (8011ab0 <_strtod_l+0x580>)
 8011858:	aa1c      	add	r2, sp, #112	@ 0x70
 801185a:	a819      	add	r0, sp, #100	@ 0x64
 801185c:	f001 f930 	bl	8012ac0 <__hexnan>
 8011860:	2805      	cmp	r0, #5
 8011862:	d127      	bne.n	80118b4 <_strtod_l+0x384>
 8011864:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011866:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801186a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801186e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011872:	e696      	b.n	80115a2 <_strtod_l+0x72>
 8011874:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011876:	fb08 2101 	mla	r1, r8, r1, r2
 801187a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801187e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011880:	e7b5      	b.n	80117ee <_strtod_l+0x2be>
 8011882:	2a6e      	cmp	r2, #110	@ 0x6e
 8011884:	e7da      	b.n	801183c <_strtod_l+0x30c>
 8011886:	498b      	ldr	r1, [pc, #556]	@ (8011ab4 <_strtod_l+0x584>)
 8011888:	a819      	add	r0, sp, #100	@ 0x64
 801188a:	f001 f905 	bl	8012a98 <__match>
 801188e:	2800      	cmp	r0, #0
 8011890:	f43f aea2 	beq.w	80115d8 <_strtod_l+0xa8>
 8011894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011896:	4988      	ldr	r1, [pc, #544]	@ (8011ab8 <_strtod_l+0x588>)
 8011898:	3b01      	subs	r3, #1
 801189a:	a819      	add	r0, sp, #100	@ 0x64
 801189c:	9319      	str	r3, [sp, #100]	@ 0x64
 801189e:	f001 f8fb 	bl	8012a98 <__match>
 80118a2:	b910      	cbnz	r0, 80118aa <_strtod_l+0x37a>
 80118a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80118a6:	3301      	adds	r3, #1
 80118a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80118aa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011ac8 <_strtod_l+0x598>
 80118ae:	f04f 0a00 	mov.w	sl, #0
 80118b2:	e676      	b.n	80115a2 <_strtod_l+0x72>
 80118b4:	4881      	ldr	r0, [pc, #516]	@ (8011abc <_strtod_l+0x58c>)
 80118b6:	f000 fe2b 	bl	8012510 <nan>
 80118ba:	ec5b ab10 	vmov	sl, fp, d0
 80118be:	e670      	b.n	80115a2 <_strtod_l+0x72>
 80118c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80118c4:	eba8 0303 	sub.w	r3, r8, r3
 80118c8:	f1b9 0f00 	cmp.w	r9, #0
 80118cc:	bf08      	it	eq
 80118ce:	46a9      	moveq	r9, r5
 80118d0:	2d10      	cmp	r5, #16
 80118d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80118d4:	462c      	mov	r4, r5
 80118d6:	bfa8      	it	ge
 80118d8:	2410      	movge	r4, #16
 80118da:	f7ee fe23 	bl	8000524 <__aeabi_ui2d>
 80118de:	2d09      	cmp	r5, #9
 80118e0:	4682      	mov	sl, r0
 80118e2:	468b      	mov	fp, r1
 80118e4:	dc13      	bgt.n	801190e <_strtod_l+0x3de>
 80118e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	f43f ae5a 	beq.w	80115a2 <_strtod_l+0x72>
 80118ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118f0:	dd78      	ble.n	80119e4 <_strtod_l+0x4b4>
 80118f2:	2b16      	cmp	r3, #22
 80118f4:	dc5f      	bgt.n	80119b6 <_strtod_l+0x486>
 80118f6:	4972      	ldr	r1, [pc, #456]	@ (8011ac0 <_strtod_l+0x590>)
 80118f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80118fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011900:	4652      	mov	r2, sl
 8011902:	465b      	mov	r3, fp
 8011904:	f7ee fe88 	bl	8000618 <__aeabi_dmul>
 8011908:	4682      	mov	sl, r0
 801190a:	468b      	mov	fp, r1
 801190c:	e649      	b.n	80115a2 <_strtod_l+0x72>
 801190e:	4b6c      	ldr	r3, [pc, #432]	@ (8011ac0 <_strtod_l+0x590>)
 8011910:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011914:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011918:	f7ee fe7e 	bl	8000618 <__aeabi_dmul>
 801191c:	4682      	mov	sl, r0
 801191e:	4638      	mov	r0, r7
 8011920:	468b      	mov	fp, r1
 8011922:	f7ee fdff 	bl	8000524 <__aeabi_ui2d>
 8011926:	4602      	mov	r2, r0
 8011928:	460b      	mov	r3, r1
 801192a:	4650      	mov	r0, sl
 801192c:	4659      	mov	r1, fp
 801192e:	f7ee fcbd 	bl	80002ac <__adddf3>
 8011932:	2d0f      	cmp	r5, #15
 8011934:	4682      	mov	sl, r0
 8011936:	468b      	mov	fp, r1
 8011938:	ddd5      	ble.n	80118e6 <_strtod_l+0x3b6>
 801193a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801193c:	1b2c      	subs	r4, r5, r4
 801193e:	441c      	add	r4, r3
 8011940:	2c00      	cmp	r4, #0
 8011942:	f340 8093 	ble.w	8011a6c <_strtod_l+0x53c>
 8011946:	f014 030f 	ands.w	r3, r4, #15
 801194a:	d00a      	beq.n	8011962 <_strtod_l+0x432>
 801194c:	495c      	ldr	r1, [pc, #368]	@ (8011ac0 <_strtod_l+0x590>)
 801194e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011952:	4652      	mov	r2, sl
 8011954:	465b      	mov	r3, fp
 8011956:	e9d1 0100 	ldrd	r0, r1, [r1]
 801195a:	f7ee fe5d 	bl	8000618 <__aeabi_dmul>
 801195e:	4682      	mov	sl, r0
 8011960:	468b      	mov	fp, r1
 8011962:	f034 040f 	bics.w	r4, r4, #15
 8011966:	d073      	beq.n	8011a50 <_strtod_l+0x520>
 8011968:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801196c:	dd49      	ble.n	8011a02 <_strtod_l+0x4d2>
 801196e:	2400      	movs	r4, #0
 8011970:	46a0      	mov	r8, r4
 8011972:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011974:	46a1      	mov	r9, r4
 8011976:	9a05      	ldr	r2, [sp, #20]
 8011978:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011ac8 <_strtod_l+0x598>
 801197c:	2322      	movs	r3, #34	@ 0x22
 801197e:	6013      	str	r3, [r2, #0]
 8011980:	f04f 0a00 	mov.w	sl, #0
 8011984:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011986:	2b00      	cmp	r3, #0
 8011988:	f43f ae0b 	beq.w	80115a2 <_strtod_l+0x72>
 801198c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801198e:	9805      	ldr	r0, [sp, #20]
 8011990:	f7ff f944 	bl	8010c1c <_Bfree>
 8011994:	9805      	ldr	r0, [sp, #20]
 8011996:	4649      	mov	r1, r9
 8011998:	f7ff f940 	bl	8010c1c <_Bfree>
 801199c:	9805      	ldr	r0, [sp, #20]
 801199e:	4641      	mov	r1, r8
 80119a0:	f7ff f93c 	bl	8010c1c <_Bfree>
 80119a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80119a6:	9805      	ldr	r0, [sp, #20]
 80119a8:	f7ff f938 	bl	8010c1c <_Bfree>
 80119ac:	9805      	ldr	r0, [sp, #20]
 80119ae:	4621      	mov	r1, r4
 80119b0:	f7ff f934 	bl	8010c1c <_Bfree>
 80119b4:	e5f5      	b.n	80115a2 <_strtod_l+0x72>
 80119b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80119bc:	4293      	cmp	r3, r2
 80119be:	dbbc      	blt.n	801193a <_strtod_l+0x40a>
 80119c0:	4c3f      	ldr	r4, [pc, #252]	@ (8011ac0 <_strtod_l+0x590>)
 80119c2:	f1c5 050f 	rsb	r5, r5, #15
 80119c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80119ca:	4652      	mov	r2, sl
 80119cc:	465b      	mov	r3, fp
 80119ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119d2:	f7ee fe21 	bl	8000618 <__aeabi_dmul>
 80119d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119d8:	1b5d      	subs	r5, r3, r5
 80119da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80119de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80119e2:	e78f      	b.n	8011904 <_strtod_l+0x3d4>
 80119e4:	3316      	adds	r3, #22
 80119e6:	dba8      	blt.n	801193a <_strtod_l+0x40a>
 80119e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119ea:	eba3 0808 	sub.w	r8, r3, r8
 80119ee:	4b34      	ldr	r3, [pc, #208]	@ (8011ac0 <_strtod_l+0x590>)
 80119f0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80119f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80119f8:	4650      	mov	r0, sl
 80119fa:	4659      	mov	r1, fp
 80119fc:	f7ee ff36 	bl	800086c <__aeabi_ddiv>
 8011a00:	e782      	b.n	8011908 <_strtod_l+0x3d8>
 8011a02:	2300      	movs	r3, #0
 8011a04:	4f2f      	ldr	r7, [pc, #188]	@ (8011ac4 <_strtod_l+0x594>)
 8011a06:	1124      	asrs	r4, r4, #4
 8011a08:	4650      	mov	r0, sl
 8011a0a:	4659      	mov	r1, fp
 8011a0c:	461e      	mov	r6, r3
 8011a0e:	2c01      	cmp	r4, #1
 8011a10:	dc21      	bgt.n	8011a56 <_strtod_l+0x526>
 8011a12:	b10b      	cbz	r3, 8011a18 <_strtod_l+0x4e8>
 8011a14:	4682      	mov	sl, r0
 8011a16:	468b      	mov	fp, r1
 8011a18:	492a      	ldr	r1, [pc, #168]	@ (8011ac4 <_strtod_l+0x594>)
 8011a1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011a1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011a22:	4652      	mov	r2, sl
 8011a24:	465b      	mov	r3, fp
 8011a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a2a:	f7ee fdf5 	bl	8000618 <__aeabi_dmul>
 8011a2e:	4b26      	ldr	r3, [pc, #152]	@ (8011ac8 <_strtod_l+0x598>)
 8011a30:	460a      	mov	r2, r1
 8011a32:	400b      	ands	r3, r1
 8011a34:	4925      	ldr	r1, [pc, #148]	@ (8011acc <_strtod_l+0x59c>)
 8011a36:	428b      	cmp	r3, r1
 8011a38:	4682      	mov	sl, r0
 8011a3a:	d898      	bhi.n	801196e <_strtod_l+0x43e>
 8011a3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011a40:	428b      	cmp	r3, r1
 8011a42:	bf86      	itte	hi
 8011a44:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011ad0 <_strtod_l+0x5a0>
 8011a48:	f04f 3aff 	movhi.w	sl, #4294967295
 8011a4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011a50:	2300      	movs	r3, #0
 8011a52:	9308      	str	r3, [sp, #32]
 8011a54:	e076      	b.n	8011b44 <_strtod_l+0x614>
 8011a56:	07e2      	lsls	r2, r4, #31
 8011a58:	d504      	bpl.n	8011a64 <_strtod_l+0x534>
 8011a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a5e:	f7ee fddb 	bl	8000618 <__aeabi_dmul>
 8011a62:	2301      	movs	r3, #1
 8011a64:	3601      	adds	r6, #1
 8011a66:	1064      	asrs	r4, r4, #1
 8011a68:	3708      	adds	r7, #8
 8011a6a:	e7d0      	b.n	8011a0e <_strtod_l+0x4de>
 8011a6c:	d0f0      	beq.n	8011a50 <_strtod_l+0x520>
 8011a6e:	4264      	negs	r4, r4
 8011a70:	f014 020f 	ands.w	r2, r4, #15
 8011a74:	d00a      	beq.n	8011a8c <_strtod_l+0x55c>
 8011a76:	4b12      	ldr	r3, [pc, #72]	@ (8011ac0 <_strtod_l+0x590>)
 8011a78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a7c:	4650      	mov	r0, sl
 8011a7e:	4659      	mov	r1, fp
 8011a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a84:	f7ee fef2 	bl	800086c <__aeabi_ddiv>
 8011a88:	4682      	mov	sl, r0
 8011a8a:	468b      	mov	fp, r1
 8011a8c:	1124      	asrs	r4, r4, #4
 8011a8e:	d0df      	beq.n	8011a50 <_strtod_l+0x520>
 8011a90:	2c1f      	cmp	r4, #31
 8011a92:	dd1f      	ble.n	8011ad4 <_strtod_l+0x5a4>
 8011a94:	2400      	movs	r4, #0
 8011a96:	46a0      	mov	r8, r4
 8011a98:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011a9a:	46a1      	mov	r9, r4
 8011a9c:	9a05      	ldr	r2, [sp, #20]
 8011a9e:	2322      	movs	r3, #34	@ 0x22
 8011aa0:	f04f 0a00 	mov.w	sl, #0
 8011aa4:	f04f 0b00 	mov.w	fp, #0
 8011aa8:	6013      	str	r3, [r2, #0]
 8011aaa:	e76b      	b.n	8011984 <_strtod_l+0x454>
 8011aac:	0803e08e 	.word	0x0803e08e
 8011ab0:	0803e358 	.word	0x0803e358
 8011ab4:	0803e086 	.word	0x0803e086
 8011ab8:	0803e0bd 	.word	0x0803e0bd
 8011abc:	0803e1f6 	.word	0x0803e1f6
 8011ac0:	0803e290 	.word	0x0803e290
 8011ac4:	0803e268 	.word	0x0803e268
 8011ac8:	7ff00000 	.word	0x7ff00000
 8011acc:	7ca00000 	.word	0x7ca00000
 8011ad0:	7fefffff 	.word	0x7fefffff
 8011ad4:	f014 0310 	ands.w	r3, r4, #16
 8011ad8:	bf18      	it	ne
 8011ada:	236a      	movne	r3, #106	@ 0x6a
 8011adc:	4ea9      	ldr	r6, [pc, #676]	@ (8011d84 <_strtod_l+0x854>)
 8011ade:	9308      	str	r3, [sp, #32]
 8011ae0:	4650      	mov	r0, sl
 8011ae2:	4659      	mov	r1, fp
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	07e7      	lsls	r7, r4, #31
 8011ae8:	d504      	bpl.n	8011af4 <_strtod_l+0x5c4>
 8011aea:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011aee:	f7ee fd93 	bl	8000618 <__aeabi_dmul>
 8011af2:	2301      	movs	r3, #1
 8011af4:	1064      	asrs	r4, r4, #1
 8011af6:	f106 0608 	add.w	r6, r6, #8
 8011afa:	d1f4      	bne.n	8011ae6 <_strtod_l+0x5b6>
 8011afc:	b10b      	cbz	r3, 8011b02 <_strtod_l+0x5d2>
 8011afe:	4682      	mov	sl, r0
 8011b00:	468b      	mov	fp, r1
 8011b02:	9b08      	ldr	r3, [sp, #32]
 8011b04:	b1b3      	cbz	r3, 8011b34 <_strtod_l+0x604>
 8011b06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011b0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	4659      	mov	r1, fp
 8011b12:	dd0f      	ble.n	8011b34 <_strtod_l+0x604>
 8011b14:	2b1f      	cmp	r3, #31
 8011b16:	dd56      	ble.n	8011bc6 <_strtod_l+0x696>
 8011b18:	2b34      	cmp	r3, #52	@ 0x34
 8011b1a:	bfde      	ittt	le
 8011b1c:	f04f 33ff 	movle.w	r3, #4294967295
 8011b20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011b24:	4093      	lslle	r3, r2
 8011b26:	f04f 0a00 	mov.w	sl, #0
 8011b2a:	bfcc      	ite	gt
 8011b2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011b30:	ea03 0b01 	andle.w	fp, r3, r1
 8011b34:	2200      	movs	r2, #0
 8011b36:	2300      	movs	r3, #0
 8011b38:	4650      	mov	r0, sl
 8011b3a:	4659      	mov	r1, fp
 8011b3c:	f7ee ffd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d1a7      	bne.n	8011a94 <_strtod_l+0x564>
 8011b44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b46:	9300      	str	r3, [sp, #0]
 8011b48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011b4a:	9805      	ldr	r0, [sp, #20]
 8011b4c:	462b      	mov	r3, r5
 8011b4e:	464a      	mov	r2, r9
 8011b50:	f7ff f8cc 	bl	8010cec <__s2b>
 8011b54:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011b56:	2800      	cmp	r0, #0
 8011b58:	f43f af09 	beq.w	801196e <_strtod_l+0x43e>
 8011b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b60:	2a00      	cmp	r2, #0
 8011b62:	eba3 0308 	sub.w	r3, r3, r8
 8011b66:	bfa8      	it	ge
 8011b68:	2300      	movge	r3, #0
 8011b6a:	9312      	str	r3, [sp, #72]	@ 0x48
 8011b6c:	2400      	movs	r4, #0
 8011b6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011b72:	9316      	str	r3, [sp, #88]	@ 0x58
 8011b74:	46a0      	mov	r8, r4
 8011b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b78:	9805      	ldr	r0, [sp, #20]
 8011b7a:	6859      	ldr	r1, [r3, #4]
 8011b7c:	f7ff f80e 	bl	8010b9c <_Balloc>
 8011b80:	4681      	mov	r9, r0
 8011b82:	2800      	cmp	r0, #0
 8011b84:	f43f aef7 	beq.w	8011976 <_strtod_l+0x446>
 8011b88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b8a:	691a      	ldr	r2, [r3, #16]
 8011b8c:	3202      	adds	r2, #2
 8011b8e:	f103 010c 	add.w	r1, r3, #12
 8011b92:	0092      	lsls	r2, r2, #2
 8011b94:	300c      	adds	r0, #12
 8011b96:	f7fe f948 	bl	800fe2a <memcpy>
 8011b9a:	ec4b ab10 	vmov	d0, sl, fp
 8011b9e:	9805      	ldr	r0, [sp, #20]
 8011ba0:	aa1c      	add	r2, sp, #112	@ 0x70
 8011ba2:	a91b      	add	r1, sp, #108	@ 0x6c
 8011ba4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011ba8:	f7ff fbd4 	bl	8011354 <__d2b>
 8011bac:	901a      	str	r0, [sp, #104]	@ 0x68
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	f43f aee1 	beq.w	8011976 <_strtod_l+0x446>
 8011bb4:	9805      	ldr	r0, [sp, #20]
 8011bb6:	2101      	movs	r1, #1
 8011bb8:	f7ff f92e 	bl	8010e18 <__i2b>
 8011bbc:	4680      	mov	r8, r0
 8011bbe:	b948      	cbnz	r0, 8011bd4 <_strtod_l+0x6a4>
 8011bc0:	f04f 0800 	mov.w	r8, #0
 8011bc4:	e6d7      	b.n	8011976 <_strtod_l+0x446>
 8011bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8011bca:	fa02 f303 	lsl.w	r3, r2, r3
 8011bce:	ea03 0a0a 	and.w	sl, r3, sl
 8011bd2:	e7af      	b.n	8011b34 <_strtod_l+0x604>
 8011bd4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011bd6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011bd8:	2d00      	cmp	r5, #0
 8011bda:	bfab      	itete	ge
 8011bdc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011bde:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011be0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011be2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011be4:	bfac      	ite	ge
 8011be6:	18ef      	addge	r7, r5, r3
 8011be8:	1b5e      	sublt	r6, r3, r5
 8011bea:	9b08      	ldr	r3, [sp, #32]
 8011bec:	1aed      	subs	r5, r5, r3
 8011bee:	4415      	add	r5, r2
 8011bf0:	4b65      	ldr	r3, [pc, #404]	@ (8011d88 <_strtod_l+0x858>)
 8011bf2:	3d01      	subs	r5, #1
 8011bf4:	429d      	cmp	r5, r3
 8011bf6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011bfa:	da50      	bge.n	8011c9e <_strtod_l+0x76e>
 8011bfc:	1b5b      	subs	r3, r3, r5
 8011bfe:	2b1f      	cmp	r3, #31
 8011c00:	eba2 0203 	sub.w	r2, r2, r3
 8011c04:	f04f 0101 	mov.w	r1, #1
 8011c08:	dc3d      	bgt.n	8011c86 <_strtod_l+0x756>
 8011c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8011c0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011c10:	2300      	movs	r3, #0
 8011c12:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c14:	18bd      	adds	r5, r7, r2
 8011c16:	9b08      	ldr	r3, [sp, #32]
 8011c18:	42af      	cmp	r7, r5
 8011c1a:	4416      	add	r6, r2
 8011c1c:	441e      	add	r6, r3
 8011c1e:	463b      	mov	r3, r7
 8011c20:	bfa8      	it	ge
 8011c22:	462b      	movge	r3, r5
 8011c24:	42b3      	cmp	r3, r6
 8011c26:	bfa8      	it	ge
 8011c28:	4633      	movge	r3, r6
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	bfc2      	ittt	gt
 8011c2e:	1aed      	subgt	r5, r5, r3
 8011c30:	1af6      	subgt	r6, r6, r3
 8011c32:	1aff      	subgt	r7, r7, r3
 8011c34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	dd16      	ble.n	8011c68 <_strtod_l+0x738>
 8011c3a:	4641      	mov	r1, r8
 8011c3c:	9805      	ldr	r0, [sp, #20]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	f7ff f9a2 	bl	8010f88 <__pow5mult>
 8011c44:	4680      	mov	r8, r0
 8011c46:	2800      	cmp	r0, #0
 8011c48:	d0ba      	beq.n	8011bc0 <_strtod_l+0x690>
 8011c4a:	4601      	mov	r1, r0
 8011c4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011c4e:	9805      	ldr	r0, [sp, #20]
 8011c50:	f7ff f8f8 	bl	8010e44 <__multiply>
 8011c54:	900a      	str	r0, [sp, #40]	@ 0x28
 8011c56:	2800      	cmp	r0, #0
 8011c58:	f43f ae8d 	beq.w	8011976 <_strtod_l+0x446>
 8011c5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011c5e:	9805      	ldr	r0, [sp, #20]
 8011c60:	f7fe ffdc 	bl	8010c1c <_Bfree>
 8011c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c66:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c68:	2d00      	cmp	r5, #0
 8011c6a:	dc1d      	bgt.n	8011ca8 <_strtod_l+0x778>
 8011c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	dd23      	ble.n	8011cba <_strtod_l+0x78a>
 8011c72:	4649      	mov	r1, r9
 8011c74:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011c76:	9805      	ldr	r0, [sp, #20]
 8011c78:	f7ff f986 	bl	8010f88 <__pow5mult>
 8011c7c:	4681      	mov	r9, r0
 8011c7e:	b9e0      	cbnz	r0, 8011cba <_strtod_l+0x78a>
 8011c80:	f04f 0900 	mov.w	r9, #0
 8011c84:	e677      	b.n	8011976 <_strtod_l+0x446>
 8011c86:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011c8a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011c8e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011c92:	35e2      	adds	r5, #226	@ 0xe2
 8011c94:	fa01 f305 	lsl.w	r3, r1, r5
 8011c98:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c9a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011c9c:	e7ba      	b.n	8011c14 <_strtod_l+0x6e4>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	9310      	str	r3, [sp, #64]	@ 0x40
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011ca6:	e7b5      	b.n	8011c14 <_strtod_l+0x6e4>
 8011ca8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011caa:	9805      	ldr	r0, [sp, #20]
 8011cac:	462a      	mov	r2, r5
 8011cae:	f7ff f9c5 	bl	801103c <__lshift>
 8011cb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d1d9      	bne.n	8011c6c <_strtod_l+0x73c>
 8011cb8:	e65d      	b.n	8011976 <_strtod_l+0x446>
 8011cba:	2e00      	cmp	r6, #0
 8011cbc:	dd07      	ble.n	8011cce <_strtod_l+0x79e>
 8011cbe:	4649      	mov	r1, r9
 8011cc0:	9805      	ldr	r0, [sp, #20]
 8011cc2:	4632      	mov	r2, r6
 8011cc4:	f7ff f9ba 	bl	801103c <__lshift>
 8011cc8:	4681      	mov	r9, r0
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	d0d8      	beq.n	8011c80 <_strtod_l+0x750>
 8011cce:	2f00      	cmp	r7, #0
 8011cd0:	dd08      	ble.n	8011ce4 <_strtod_l+0x7b4>
 8011cd2:	4641      	mov	r1, r8
 8011cd4:	9805      	ldr	r0, [sp, #20]
 8011cd6:	463a      	mov	r2, r7
 8011cd8:	f7ff f9b0 	bl	801103c <__lshift>
 8011cdc:	4680      	mov	r8, r0
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	f43f ae49 	beq.w	8011976 <_strtod_l+0x446>
 8011ce4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011ce6:	9805      	ldr	r0, [sp, #20]
 8011ce8:	464a      	mov	r2, r9
 8011cea:	f7ff fa2f 	bl	801114c <__mdiff>
 8011cee:	4604      	mov	r4, r0
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	f43f ae40 	beq.w	8011976 <_strtod_l+0x446>
 8011cf6:	68c3      	ldr	r3, [r0, #12]
 8011cf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	60c3      	str	r3, [r0, #12]
 8011cfe:	4641      	mov	r1, r8
 8011d00:	f7ff fa08 	bl	8011114 <__mcmp>
 8011d04:	2800      	cmp	r0, #0
 8011d06:	da45      	bge.n	8011d94 <_strtod_l+0x864>
 8011d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d0a:	ea53 030a 	orrs.w	r3, r3, sl
 8011d0e:	d16b      	bne.n	8011de8 <_strtod_l+0x8b8>
 8011d10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d167      	bne.n	8011de8 <_strtod_l+0x8b8>
 8011d18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011d1c:	0d1b      	lsrs	r3, r3, #20
 8011d1e:	051b      	lsls	r3, r3, #20
 8011d20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011d24:	d960      	bls.n	8011de8 <_strtod_l+0x8b8>
 8011d26:	6963      	ldr	r3, [r4, #20]
 8011d28:	b913      	cbnz	r3, 8011d30 <_strtod_l+0x800>
 8011d2a:	6923      	ldr	r3, [r4, #16]
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	dd5b      	ble.n	8011de8 <_strtod_l+0x8b8>
 8011d30:	4621      	mov	r1, r4
 8011d32:	2201      	movs	r2, #1
 8011d34:	9805      	ldr	r0, [sp, #20]
 8011d36:	f7ff f981 	bl	801103c <__lshift>
 8011d3a:	4641      	mov	r1, r8
 8011d3c:	4604      	mov	r4, r0
 8011d3e:	f7ff f9e9 	bl	8011114 <__mcmp>
 8011d42:	2800      	cmp	r0, #0
 8011d44:	dd50      	ble.n	8011de8 <_strtod_l+0x8b8>
 8011d46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011d4a:	9a08      	ldr	r2, [sp, #32]
 8011d4c:	0d1b      	lsrs	r3, r3, #20
 8011d4e:	051b      	lsls	r3, r3, #20
 8011d50:	2a00      	cmp	r2, #0
 8011d52:	d06a      	beq.n	8011e2a <_strtod_l+0x8fa>
 8011d54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011d58:	d867      	bhi.n	8011e2a <_strtod_l+0x8fa>
 8011d5a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011d5e:	f67f ae9d 	bls.w	8011a9c <_strtod_l+0x56c>
 8011d62:	4b0a      	ldr	r3, [pc, #40]	@ (8011d8c <_strtod_l+0x85c>)
 8011d64:	4650      	mov	r0, sl
 8011d66:	4659      	mov	r1, fp
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f7ee fc55 	bl	8000618 <__aeabi_dmul>
 8011d6e:	4b08      	ldr	r3, [pc, #32]	@ (8011d90 <_strtod_l+0x860>)
 8011d70:	400b      	ands	r3, r1
 8011d72:	4682      	mov	sl, r0
 8011d74:	468b      	mov	fp, r1
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	f47f ae08 	bne.w	801198c <_strtod_l+0x45c>
 8011d7c:	9a05      	ldr	r2, [sp, #20]
 8011d7e:	2322      	movs	r3, #34	@ 0x22
 8011d80:	6013      	str	r3, [r2, #0]
 8011d82:	e603      	b.n	801198c <_strtod_l+0x45c>
 8011d84:	0803e380 	.word	0x0803e380
 8011d88:	fffffc02 	.word	0xfffffc02
 8011d8c:	39500000 	.word	0x39500000
 8011d90:	7ff00000 	.word	0x7ff00000
 8011d94:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011d98:	d165      	bne.n	8011e66 <_strtod_l+0x936>
 8011d9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011d9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011da0:	b35a      	cbz	r2, 8011dfa <_strtod_l+0x8ca>
 8011da2:	4a9f      	ldr	r2, [pc, #636]	@ (8012020 <_strtod_l+0xaf0>)
 8011da4:	4293      	cmp	r3, r2
 8011da6:	d12b      	bne.n	8011e00 <_strtod_l+0x8d0>
 8011da8:	9b08      	ldr	r3, [sp, #32]
 8011daa:	4651      	mov	r1, sl
 8011dac:	b303      	cbz	r3, 8011df0 <_strtod_l+0x8c0>
 8011dae:	4b9d      	ldr	r3, [pc, #628]	@ (8012024 <_strtod_l+0xaf4>)
 8011db0:	465a      	mov	r2, fp
 8011db2:	4013      	ands	r3, r2
 8011db4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011db8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dbc:	d81b      	bhi.n	8011df6 <_strtod_l+0x8c6>
 8011dbe:	0d1b      	lsrs	r3, r3, #20
 8011dc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8011dc8:	4299      	cmp	r1, r3
 8011dca:	d119      	bne.n	8011e00 <_strtod_l+0x8d0>
 8011dcc:	4b96      	ldr	r3, [pc, #600]	@ (8012028 <_strtod_l+0xaf8>)
 8011dce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d102      	bne.n	8011dda <_strtod_l+0x8aa>
 8011dd4:	3101      	adds	r1, #1
 8011dd6:	f43f adce 	beq.w	8011976 <_strtod_l+0x446>
 8011dda:	4b92      	ldr	r3, [pc, #584]	@ (8012024 <_strtod_l+0xaf4>)
 8011ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011dde:	401a      	ands	r2, r3
 8011de0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011de4:	f04f 0a00 	mov.w	sl, #0
 8011de8:	9b08      	ldr	r3, [sp, #32]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1b9      	bne.n	8011d62 <_strtod_l+0x832>
 8011dee:	e5cd      	b.n	801198c <_strtod_l+0x45c>
 8011df0:	f04f 33ff 	mov.w	r3, #4294967295
 8011df4:	e7e8      	b.n	8011dc8 <_strtod_l+0x898>
 8011df6:	4613      	mov	r3, r2
 8011df8:	e7e6      	b.n	8011dc8 <_strtod_l+0x898>
 8011dfa:	ea53 030a 	orrs.w	r3, r3, sl
 8011dfe:	d0a2      	beq.n	8011d46 <_strtod_l+0x816>
 8011e00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e02:	b1db      	cbz	r3, 8011e3c <_strtod_l+0x90c>
 8011e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e06:	4213      	tst	r3, r2
 8011e08:	d0ee      	beq.n	8011de8 <_strtod_l+0x8b8>
 8011e0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e0c:	9a08      	ldr	r2, [sp, #32]
 8011e0e:	4650      	mov	r0, sl
 8011e10:	4659      	mov	r1, fp
 8011e12:	b1bb      	cbz	r3, 8011e44 <_strtod_l+0x914>
 8011e14:	f7ff fb6c 	bl	80114f0 <sulp>
 8011e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e1c:	ec53 2b10 	vmov	r2, r3, d0
 8011e20:	f7ee fa44 	bl	80002ac <__adddf3>
 8011e24:	4682      	mov	sl, r0
 8011e26:	468b      	mov	fp, r1
 8011e28:	e7de      	b.n	8011de8 <_strtod_l+0x8b8>
 8011e2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011e2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011e32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011e36:	f04f 3aff 	mov.w	sl, #4294967295
 8011e3a:	e7d5      	b.n	8011de8 <_strtod_l+0x8b8>
 8011e3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011e3e:	ea13 0f0a 	tst.w	r3, sl
 8011e42:	e7e1      	b.n	8011e08 <_strtod_l+0x8d8>
 8011e44:	f7ff fb54 	bl	80114f0 <sulp>
 8011e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e4c:	ec53 2b10 	vmov	r2, r3, d0
 8011e50:	f7ee fa2a 	bl	80002a8 <__aeabi_dsub>
 8011e54:	2200      	movs	r2, #0
 8011e56:	2300      	movs	r3, #0
 8011e58:	4682      	mov	sl, r0
 8011e5a:	468b      	mov	fp, r1
 8011e5c:	f7ee fe44 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	d0c1      	beq.n	8011de8 <_strtod_l+0x8b8>
 8011e64:	e61a      	b.n	8011a9c <_strtod_l+0x56c>
 8011e66:	4641      	mov	r1, r8
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f7ff facb 	bl	8011404 <__ratio>
 8011e6e:	ec57 6b10 	vmov	r6, r7, d0
 8011e72:	2200      	movs	r2, #0
 8011e74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011e78:	4630      	mov	r0, r6
 8011e7a:	4639      	mov	r1, r7
 8011e7c:	f7ee fe48 	bl	8000b10 <__aeabi_dcmple>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d06f      	beq.n	8011f64 <_strtod_l+0xa34>
 8011e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d17a      	bne.n	8011f80 <_strtod_l+0xa50>
 8011e8a:	f1ba 0f00 	cmp.w	sl, #0
 8011e8e:	d158      	bne.n	8011f42 <_strtod_l+0xa12>
 8011e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d15a      	bne.n	8011f50 <_strtod_l+0xa20>
 8011e9a:	4b64      	ldr	r3, [pc, #400]	@ (801202c <_strtod_l+0xafc>)
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	4639      	mov	r1, r7
 8011ea2:	f7ee fe2b 	bl	8000afc <__aeabi_dcmplt>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d159      	bne.n	8011f5e <_strtod_l+0xa2e>
 8011eaa:	4630      	mov	r0, r6
 8011eac:	4639      	mov	r1, r7
 8011eae:	4b60      	ldr	r3, [pc, #384]	@ (8012030 <_strtod_l+0xb00>)
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f7ee fbb1 	bl	8000618 <__aeabi_dmul>
 8011eb6:	4606      	mov	r6, r0
 8011eb8:	460f      	mov	r7, r1
 8011eba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011ebe:	9606      	str	r6, [sp, #24]
 8011ec0:	9307      	str	r3, [sp, #28]
 8011ec2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ec6:	4d57      	ldr	r5, [pc, #348]	@ (8012024 <_strtod_l+0xaf4>)
 8011ec8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ece:	401d      	ands	r5, r3
 8011ed0:	4b58      	ldr	r3, [pc, #352]	@ (8012034 <_strtod_l+0xb04>)
 8011ed2:	429d      	cmp	r5, r3
 8011ed4:	f040 80b2 	bne.w	801203c <_strtod_l+0xb0c>
 8011ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011eda:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011ede:	ec4b ab10 	vmov	d0, sl, fp
 8011ee2:	f7ff f9c7 	bl	8011274 <__ulp>
 8011ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011eea:	ec51 0b10 	vmov	r0, r1, d0
 8011eee:	f7ee fb93 	bl	8000618 <__aeabi_dmul>
 8011ef2:	4652      	mov	r2, sl
 8011ef4:	465b      	mov	r3, fp
 8011ef6:	f7ee f9d9 	bl	80002ac <__adddf3>
 8011efa:	460b      	mov	r3, r1
 8011efc:	4949      	ldr	r1, [pc, #292]	@ (8012024 <_strtod_l+0xaf4>)
 8011efe:	4a4e      	ldr	r2, [pc, #312]	@ (8012038 <_strtod_l+0xb08>)
 8011f00:	4019      	ands	r1, r3
 8011f02:	4291      	cmp	r1, r2
 8011f04:	4682      	mov	sl, r0
 8011f06:	d942      	bls.n	8011f8e <_strtod_l+0xa5e>
 8011f08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f0a:	4b47      	ldr	r3, [pc, #284]	@ (8012028 <_strtod_l+0xaf8>)
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d103      	bne.n	8011f18 <_strtod_l+0x9e8>
 8011f10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f12:	3301      	adds	r3, #1
 8011f14:	f43f ad2f 	beq.w	8011976 <_strtod_l+0x446>
 8011f18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012028 <_strtod_l+0xaf8>
 8011f1c:	f04f 3aff 	mov.w	sl, #4294967295
 8011f20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f22:	9805      	ldr	r0, [sp, #20]
 8011f24:	f7fe fe7a 	bl	8010c1c <_Bfree>
 8011f28:	9805      	ldr	r0, [sp, #20]
 8011f2a:	4649      	mov	r1, r9
 8011f2c:	f7fe fe76 	bl	8010c1c <_Bfree>
 8011f30:	9805      	ldr	r0, [sp, #20]
 8011f32:	4641      	mov	r1, r8
 8011f34:	f7fe fe72 	bl	8010c1c <_Bfree>
 8011f38:	9805      	ldr	r0, [sp, #20]
 8011f3a:	4621      	mov	r1, r4
 8011f3c:	f7fe fe6e 	bl	8010c1c <_Bfree>
 8011f40:	e619      	b.n	8011b76 <_strtod_l+0x646>
 8011f42:	f1ba 0f01 	cmp.w	sl, #1
 8011f46:	d103      	bne.n	8011f50 <_strtod_l+0xa20>
 8011f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f43f ada6 	beq.w	8011a9c <_strtod_l+0x56c>
 8011f50:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012000 <_strtod_l+0xad0>
 8011f54:	4f35      	ldr	r7, [pc, #212]	@ (801202c <_strtod_l+0xafc>)
 8011f56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f5a:	2600      	movs	r6, #0
 8011f5c:	e7b1      	b.n	8011ec2 <_strtod_l+0x992>
 8011f5e:	4f34      	ldr	r7, [pc, #208]	@ (8012030 <_strtod_l+0xb00>)
 8011f60:	2600      	movs	r6, #0
 8011f62:	e7aa      	b.n	8011eba <_strtod_l+0x98a>
 8011f64:	4b32      	ldr	r3, [pc, #200]	@ (8012030 <_strtod_l+0xb00>)
 8011f66:	4630      	mov	r0, r6
 8011f68:	4639      	mov	r1, r7
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	f7ee fb54 	bl	8000618 <__aeabi_dmul>
 8011f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f72:	4606      	mov	r6, r0
 8011f74:	460f      	mov	r7, r1
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d09f      	beq.n	8011eba <_strtod_l+0x98a>
 8011f7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011f7e:	e7a0      	b.n	8011ec2 <_strtod_l+0x992>
 8011f80:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012008 <_strtod_l+0xad8>
 8011f84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f88:	ec57 6b17 	vmov	r6, r7, d7
 8011f8c:	e799      	b.n	8011ec2 <_strtod_l+0x992>
 8011f8e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011f92:	9b08      	ldr	r3, [sp, #32]
 8011f94:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d1c1      	bne.n	8011f20 <_strtod_l+0x9f0>
 8011f9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011fa0:	0d1b      	lsrs	r3, r3, #20
 8011fa2:	051b      	lsls	r3, r3, #20
 8011fa4:	429d      	cmp	r5, r3
 8011fa6:	d1bb      	bne.n	8011f20 <_strtod_l+0x9f0>
 8011fa8:	4630      	mov	r0, r6
 8011faa:	4639      	mov	r1, r7
 8011fac:	f7ee fe94 	bl	8000cd8 <__aeabi_d2lz>
 8011fb0:	f7ee fb04 	bl	80005bc <__aeabi_l2d>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	4630      	mov	r0, r6
 8011fba:	4639      	mov	r1, r7
 8011fbc:	f7ee f974 	bl	80002a8 <__aeabi_dsub>
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011fc8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fce:	ea46 060a 	orr.w	r6, r6, sl
 8011fd2:	431e      	orrs	r6, r3
 8011fd4:	d06f      	beq.n	80120b6 <_strtod_l+0xb86>
 8011fd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012010 <_strtod_l+0xae0>)
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	f7ee fd8e 	bl	8000afc <__aeabi_dcmplt>
 8011fe0:	2800      	cmp	r0, #0
 8011fe2:	f47f acd3 	bne.w	801198c <_strtod_l+0x45c>
 8011fe6:	a30c      	add	r3, pc, #48	@ (adr r3, 8012018 <_strtod_l+0xae8>)
 8011fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ff0:	f7ee fda2 	bl	8000b38 <__aeabi_dcmpgt>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	d093      	beq.n	8011f20 <_strtod_l+0x9f0>
 8011ff8:	e4c8      	b.n	801198c <_strtod_l+0x45c>
 8011ffa:	bf00      	nop
 8011ffc:	f3af 8000 	nop.w
 8012000:	00000000 	.word	0x00000000
 8012004:	bff00000 	.word	0xbff00000
 8012008:	00000000 	.word	0x00000000
 801200c:	3ff00000 	.word	0x3ff00000
 8012010:	94a03595 	.word	0x94a03595
 8012014:	3fdfffff 	.word	0x3fdfffff
 8012018:	35afe535 	.word	0x35afe535
 801201c:	3fe00000 	.word	0x3fe00000
 8012020:	000fffff 	.word	0x000fffff
 8012024:	7ff00000 	.word	0x7ff00000
 8012028:	7fefffff 	.word	0x7fefffff
 801202c:	3ff00000 	.word	0x3ff00000
 8012030:	3fe00000 	.word	0x3fe00000
 8012034:	7fe00000 	.word	0x7fe00000
 8012038:	7c9fffff 	.word	0x7c9fffff
 801203c:	9b08      	ldr	r3, [sp, #32]
 801203e:	b323      	cbz	r3, 801208a <_strtod_l+0xb5a>
 8012040:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012044:	d821      	bhi.n	801208a <_strtod_l+0xb5a>
 8012046:	a328      	add	r3, pc, #160	@ (adr r3, 80120e8 <_strtod_l+0xbb8>)
 8012048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204c:	4630      	mov	r0, r6
 801204e:	4639      	mov	r1, r7
 8012050:	f7ee fd5e 	bl	8000b10 <__aeabi_dcmple>
 8012054:	b1a0      	cbz	r0, 8012080 <_strtod_l+0xb50>
 8012056:	4639      	mov	r1, r7
 8012058:	4630      	mov	r0, r6
 801205a:	f7ee fdb5 	bl	8000bc8 <__aeabi_d2uiz>
 801205e:	2801      	cmp	r0, #1
 8012060:	bf38      	it	cc
 8012062:	2001      	movcc	r0, #1
 8012064:	f7ee fa5e 	bl	8000524 <__aeabi_ui2d>
 8012068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801206a:	4606      	mov	r6, r0
 801206c:	460f      	mov	r7, r1
 801206e:	b9fb      	cbnz	r3, 80120b0 <_strtod_l+0xb80>
 8012070:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012074:	9014      	str	r0, [sp, #80]	@ 0x50
 8012076:	9315      	str	r3, [sp, #84]	@ 0x54
 8012078:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801207c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012080:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012082:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012086:	1b5b      	subs	r3, r3, r5
 8012088:	9311      	str	r3, [sp, #68]	@ 0x44
 801208a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801208e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012092:	f7ff f8ef 	bl	8011274 <__ulp>
 8012096:	4650      	mov	r0, sl
 8012098:	ec53 2b10 	vmov	r2, r3, d0
 801209c:	4659      	mov	r1, fp
 801209e:	f7ee fabb 	bl	8000618 <__aeabi_dmul>
 80120a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80120a6:	f7ee f901 	bl	80002ac <__adddf3>
 80120aa:	4682      	mov	sl, r0
 80120ac:	468b      	mov	fp, r1
 80120ae:	e770      	b.n	8011f92 <_strtod_l+0xa62>
 80120b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80120b4:	e7e0      	b.n	8012078 <_strtod_l+0xb48>
 80120b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80120f0 <_strtod_l+0xbc0>)
 80120b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120bc:	f7ee fd1e 	bl	8000afc <__aeabi_dcmplt>
 80120c0:	e798      	b.n	8011ff4 <_strtod_l+0xac4>
 80120c2:	2300      	movs	r3, #0
 80120c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80120c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80120c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80120ca:	6013      	str	r3, [r2, #0]
 80120cc:	f7ff ba6d 	b.w	80115aa <_strtod_l+0x7a>
 80120d0:	2a65      	cmp	r2, #101	@ 0x65
 80120d2:	f43f ab68 	beq.w	80117a6 <_strtod_l+0x276>
 80120d6:	2a45      	cmp	r2, #69	@ 0x45
 80120d8:	f43f ab65 	beq.w	80117a6 <_strtod_l+0x276>
 80120dc:	2301      	movs	r3, #1
 80120de:	f7ff bba0 	b.w	8011822 <_strtod_l+0x2f2>
 80120e2:	bf00      	nop
 80120e4:	f3af 8000 	nop.w
 80120e8:	ffc00000 	.word	0xffc00000
 80120ec:	41dfffff 	.word	0x41dfffff
 80120f0:	94a03595 	.word	0x94a03595
 80120f4:	3fcfffff 	.word	0x3fcfffff

080120f8 <_strtod_r>:
 80120f8:	4b01      	ldr	r3, [pc, #4]	@ (8012100 <_strtod_r+0x8>)
 80120fa:	f7ff ba19 	b.w	8011530 <_strtod_l>
 80120fe:	bf00      	nop
 8012100:	200000b0 	.word	0x200000b0

08012104 <__ssputs_r>:
 8012104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012108:	688e      	ldr	r6, [r1, #8]
 801210a:	461f      	mov	r7, r3
 801210c:	42be      	cmp	r6, r7
 801210e:	680b      	ldr	r3, [r1, #0]
 8012110:	4682      	mov	sl, r0
 8012112:	460c      	mov	r4, r1
 8012114:	4690      	mov	r8, r2
 8012116:	d82d      	bhi.n	8012174 <__ssputs_r+0x70>
 8012118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801211c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012120:	d026      	beq.n	8012170 <__ssputs_r+0x6c>
 8012122:	6965      	ldr	r5, [r4, #20]
 8012124:	6909      	ldr	r1, [r1, #16]
 8012126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801212a:	eba3 0901 	sub.w	r9, r3, r1
 801212e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012132:	1c7b      	adds	r3, r7, #1
 8012134:	444b      	add	r3, r9
 8012136:	106d      	asrs	r5, r5, #1
 8012138:	429d      	cmp	r5, r3
 801213a:	bf38      	it	cc
 801213c:	461d      	movcc	r5, r3
 801213e:	0553      	lsls	r3, r2, #21
 8012140:	d527      	bpl.n	8012192 <__ssputs_r+0x8e>
 8012142:	4629      	mov	r1, r5
 8012144:	f7fc fccc 	bl	800eae0 <_malloc_r>
 8012148:	4606      	mov	r6, r0
 801214a:	b360      	cbz	r0, 80121a6 <__ssputs_r+0xa2>
 801214c:	6921      	ldr	r1, [r4, #16]
 801214e:	464a      	mov	r2, r9
 8012150:	f7fd fe6b 	bl	800fe2a <memcpy>
 8012154:	89a3      	ldrh	r3, [r4, #12]
 8012156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801215a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801215e:	81a3      	strh	r3, [r4, #12]
 8012160:	6126      	str	r6, [r4, #16]
 8012162:	6165      	str	r5, [r4, #20]
 8012164:	444e      	add	r6, r9
 8012166:	eba5 0509 	sub.w	r5, r5, r9
 801216a:	6026      	str	r6, [r4, #0]
 801216c:	60a5      	str	r5, [r4, #8]
 801216e:	463e      	mov	r6, r7
 8012170:	42be      	cmp	r6, r7
 8012172:	d900      	bls.n	8012176 <__ssputs_r+0x72>
 8012174:	463e      	mov	r6, r7
 8012176:	6820      	ldr	r0, [r4, #0]
 8012178:	4632      	mov	r2, r6
 801217a:	4641      	mov	r1, r8
 801217c:	f7fd fd83 	bl	800fc86 <memmove>
 8012180:	68a3      	ldr	r3, [r4, #8]
 8012182:	1b9b      	subs	r3, r3, r6
 8012184:	60a3      	str	r3, [r4, #8]
 8012186:	6823      	ldr	r3, [r4, #0]
 8012188:	4433      	add	r3, r6
 801218a:	6023      	str	r3, [r4, #0]
 801218c:	2000      	movs	r0, #0
 801218e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012192:	462a      	mov	r2, r5
 8012194:	f000 fd41 	bl	8012c1a <_realloc_r>
 8012198:	4606      	mov	r6, r0
 801219a:	2800      	cmp	r0, #0
 801219c:	d1e0      	bne.n	8012160 <__ssputs_r+0x5c>
 801219e:	6921      	ldr	r1, [r4, #16]
 80121a0:	4650      	mov	r0, sl
 80121a2:	f7fe fcb1 	bl	8010b08 <_free_r>
 80121a6:	230c      	movs	r3, #12
 80121a8:	f8ca 3000 	str.w	r3, [sl]
 80121ac:	89a3      	ldrh	r3, [r4, #12]
 80121ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121b2:	81a3      	strh	r3, [r4, #12]
 80121b4:	f04f 30ff 	mov.w	r0, #4294967295
 80121b8:	e7e9      	b.n	801218e <__ssputs_r+0x8a>
	...

080121bc <_svfiprintf_r>:
 80121bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c0:	4698      	mov	r8, r3
 80121c2:	898b      	ldrh	r3, [r1, #12]
 80121c4:	061b      	lsls	r3, r3, #24
 80121c6:	b09d      	sub	sp, #116	@ 0x74
 80121c8:	4607      	mov	r7, r0
 80121ca:	460d      	mov	r5, r1
 80121cc:	4614      	mov	r4, r2
 80121ce:	d510      	bpl.n	80121f2 <_svfiprintf_r+0x36>
 80121d0:	690b      	ldr	r3, [r1, #16]
 80121d2:	b973      	cbnz	r3, 80121f2 <_svfiprintf_r+0x36>
 80121d4:	2140      	movs	r1, #64	@ 0x40
 80121d6:	f7fc fc83 	bl	800eae0 <_malloc_r>
 80121da:	6028      	str	r0, [r5, #0]
 80121dc:	6128      	str	r0, [r5, #16]
 80121de:	b930      	cbnz	r0, 80121ee <_svfiprintf_r+0x32>
 80121e0:	230c      	movs	r3, #12
 80121e2:	603b      	str	r3, [r7, #0]
 80121e4:	f04f 30ff 	mov.w	r0, #4294967295
 80121e8:	b01d      	add	sp, #116	@ 0x74
 80121ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ee:	2340      	movs	r3, #64	@ 0x40
 80121f0:	616b      	str	r3, [r5, #20]
 80121f2:	2300      	movs	r3, #0
 80121f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80121f6:	2320      	movs	r3, #32
 80121f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80121fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012200:	2330      	movs	r3, #48	@ 0x30
 8012202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80123a0 <_svfiprintf_r+0x1e4>
 8012206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801220a:	f04f 0901 	mov.w	r9, #1
 801220e:	4623      	mov	r3, r4
 8012210:	469a      	mov	sl, r3
 8012212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012216:	b10a      	cbz	r2, 801221c <_svfiprintf_r+0x60>
 8012218:	2a25      	cmp	r2, #37	@ 0x25
 801221a:	d1f9      	bne.n	8012210 <_svfiprintf_r+0x54>
 801221c:	ebba 0b04 	subs.w	fp, sl, r4
 8012220:	d00b      	beq.n	801223a <_svfiprintf_r+0x7e>
 8012222:	465b      	mov	r3, fp
 8012224:	4622      	mov	r2, r4
 8012226:	4629      	mov	r1, r5
 8012228:	4638      	mov	r0, r7
 801222a:	f7ff ff6b 	bl	8012104 <__ssputs_r>
 801222e:	3001      	adds	r0, #1
 8012230:	f000 80a7 	beq.w	8012382 <_svfiprintf_r+0x1c6>
 8012234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012236:	445a      	add	r2, fp
 8012238:	9209      	str	r2, [sp, #36]	@ 0x24
 801223a:	f89a 3000 	ldrb.w	r3, [sl]
 801223e:	2b00      	cmp	r3, #0
 8012240:	f000 809f 	beq.w	8012382 <_svfiprintf_r+0x1c6>
 8012244:	2300      	movs	r3, #0
 8012246:	f04f 32ff 	mov.w	r2, #4294967295
 801224a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801224e:	f10a 0a01 	add.w	sl, sl, #1
 8012252:	9304      	str	r3, [sp, #16]
 8012254:	9307      	str	r3, [sp, #28]
 8012256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801225a:	931a      	str	r3, [sp, #104]	@ 0x68
 801225c:	4654      	mov	r4, sl
 801225e:	2205      	movs	r2, #5
 8012260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012264:	484e      	ldr	r0, [pc, #312]	@ (80123a0 <_svfiprintf_r+0x1e4>)
 8012266:	f7ed ffc3 	bl	80001f0 <memchr>
 801226a:	9a04      	ldr	r2, [sp, #16]
 801226c:	b9d8      	cbnz	r0, 80122a6 <_svfiprintf_r+0xea>
 801226e:	06d0      	lsls	r0, r2, #27
 8012270:	bf44      	itt	mi
 8012272:	2320      	movmi	r3, #32
 8012274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012278:	0711      	lsls	r1, r2, #28
 801227a:	bf44      	itt	mi
 801227c:	232b      	movmi	r3, #43	@ 0x2b
 801227e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012282:	f89a 3000 	ldrb.w	r3, [sl]
 8012286:	2b2a      	cmp	r3, #42	@ 0x2a
 8012288:	d015      	beq.n	80122b6 <_svfiprintf_r+0xfa>
 801228a:	9a07      	ldr	r2, [sp, #28]
 801228c:	4654      	mov	r4, sl
 801228e:	2000      	movs	r0, #0
 8012290:	f04f 0c0a 	mov.w	ip, #10
 8012294:	4621      	mov	r1, r4
 8012296:	f811 3b01 	ldrb.w	r3, [r1], #1
 801229a:	3b30      	subs	r3, #48	@ 0x30
 801229c:	2b09      	cmp	r3, #9
 801229e:	d94b      	bls.n	8012338 <_svfiprintf_r+0x17c>
 80122a0:	b1b0      	cbz	r0, 80122d0 <_svfiprintf_r+0x114>
 80122a2:	9207      	str	r2, [sp, #28]
 80122a4:	e014      	b.n	80122d0 <_svfiprintf_r+0x114>
 80122a6:	eba0 0308 	sub.w	r3, r0, r8
 80122aa:	fa09 f303 	lsl.w	r3, r9, r3
 80122ae:	4313      	orrs	r3, r2
 80122b0:	9304      	str	r3, [sp, #16]
 80122b2:	46a2      	mov	sl, r4
 80122b4:	e7d2      	b.n	801225c <_svfiprintf_r+0xa0>
 80122b6:	9b03      	ldr	r3, [sp, #12]
 80122b8:	1d19      	adds	r1, r3, #4
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	9103      	str	r1, [sp, #12]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	bfbb      	ittet	lt
 80122c2:	425b      	neglt	r3, r3
 80122c4:	f042 0202 	orrlt.w	r2, r2, #2
 80122c8:	9307      	strge	r3, [sp, #28]
 80122ca:	9307      	strlt	r3, [sp, #28]
 80122cc:	bfb8      	it	lt
 80122ce:	9204      	strlt	r2, [sp, #16]
 80122d0:	7823      	ldrb	r3, [r4, #0]
 80122d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80122d4:	d10a      	bne.n	80122ec <_svfiprintf_r+0x130>
 80122d6:	7863      	ldrb	r3, [r4, #1]
 80122d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80122da:	d132      	bne.n	8012342 <_svfiprintf_r+0x186>
 80122dc:	9b03      	ldr	r3, [sp, #12]
 80122de:	1d1a      	adds	r2, r3, #4
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	9203      	str	r2, [sp, #12]
 80122e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80122e8:	3402      	adds	r4, #2
 80122ea:	9305      	str	r3, [sp, #20]
 80122ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80123b0 <_svfiprintf_r+0x1f4>
 80122f0:	7821      	ldrb	r1, [r4, #0]
 80122f2:	2203      	movs	r2, #3
 80122f4:	4650      	mov	r0, sl
 80122f6:	f7ed ff7b 	bl	80001f0 <memchr>
 80122fa:	b138      	cbz	r0, 801230c <_svfiprintf_r+0x150>
 80122fc:	9b04      	ldr	r3, [sp, #16]
 80122fe:	eba0 000a 	sub.w	r0, r0, sl
 8012302:	2240      	movs	r2, #64	@ 0x40
 8012304:	4082      	lsls	r2, r0
 8012306:	4313      	orrs	r3, r2
 8012308:	3401      	adds	r4, #1
 801230a:	9304      	str	r3, [sp, #16]
 801230c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012310:	4824      	ldr	r0, [pc, #144]	@ (80123a4 <_svfiprintf_r+0x1e8>)
 8012312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012316:	2206      	movs	r2, #6
 8012318:	f7ed ff6a 	bl	80001f0 <memchr>
 801231c:	2800      	cmp	r0, #0
 801231e:	d036      	beq.n	801238e <_svfiprintf_r+0x1d2>
 8012320:	4b21      	ldr	r3, [pc, #132]	@ (80123a8 <_svfiprintf_r+0x1ec>)
 8012322:	bb1b      	cbnz	r3, 801236c <_svfiprintf_r+0x1b0>
 8012324:	9b03      	ldr	r3, [sp, #12]
 8012326:	3307      	adds	r3, #7
 8012328:	f023 0307 	bic.w	r3, r3, #7
 801232c:	3308      	adds	r3, #8
 801232e:	9303      	str	r3, [sp, #12]
 8012330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012332:	4433      	add	r3, r6
 8012334:	9309      	str	r3, [sp, #36]	@ 0x24
 8012336:	e76a      	b.n	801220e <_svfiprintf_r+0x52>
 8012338:	fb0c 3202 	mla	r2, ip, r2, r3
 801233c:	460c      	mov	r4, r1
 801233e:	2001      	movs	r0, #1
 8012340:	e7a8      	b.n	8012294 <_svfiprintf_r+0xd8>
 8012342:	2300      	movs	r3, #0
 8012344:	3401      	adds	r4, #1
 8012346:	9305      	str	r3, [sp, #20]
 8012348:	4619      	mov	r1, r3
 801234a:	f04f 0c0a 	mov.w	ip, #10
 801234e:	4620      	mov	r0, r4
 8012350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012354:	3a30      	subs	r2, #48	@ 0x30
 8012356:	2a09      	cmp	r2, #9
 8012358:	d903      	bls.n	8012362 <_svfiprintf_r+0x1a6>
 801235a:	2b00      	cmp	r3, #0
 801235c:	d0c6      	beq.n	80122ec <_svfiprintf_r+0x130>
 801235e:	9105      	str	r1, [sp, #20]
 8012360:	e7c4      	b.n	80122ec <_svfiprintf_r+0x130>
 8012362:	fb0c 2101 	mla	r1, ip, r1, r2
 8012366:	4604      	mov	r4, r0
 8012368:	2301      	movs	r3, #1
 801236a:	e7f0      	b.n	801234e <_svfiprintf_r+0x192>
 801236c:	ab03      	add	r3, sp, #12
 801236e:	9300      	str	r3, [sp, #0]
 8012370:	462a      	mov	r2, r5
 8012372:	4b0e      	ldr	r3, [pc, #56]	@ (80123ac <_svfiprintf_r+0x1f0>)
 8012374:	a904      	add	r1, sp, #16
 8012376:	4638      	mov	r0, r7
 8012378:	f7fc fd64 	bl	800ee44 <_printf_float>
 801237c:	1c42      	adds	r2, r0, #1
 801237e:	4606      	mov	r6, r0
 8012380:	d1d6      	bne.n	8012330 <_svfiprintf_r+0x174>
 8012382:	89ab      	ldrh	r3, [r5, #12]
 8012384:	065b      	lsls	r3, r3, #25
 8012386:	f53f af2d 	bmi.w	80121e4 <_svfiprintf_r+0x28>
 801238a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801238c:	e72c      	b.n	80121e8 <_svfiprintf_r+0x2c>
 801238e:	ab03      	add	r3, sp, #12
 8012390:	9300      	str	r3, [sp, #0]
 8012392:	462a      	mov	r2, r5
 8012394:	4b05      	ldr	r3, [pc, #20]	@ (80123ac <_svfiprintf_r+0x1f0>)
 8012396:	a904      	add	r1, sp, #16
 8012398:	4638      	mov	r0, r7
 801239a:	f7fc ffeb 	bl	800f374 <_printf_i>
 801239e:	e7ed      	b.n	801237c <_svfiprintf_r+0x1c0>
 80123a0:	0803e1a2 	.word	0x0803e1a2
 80123a4:	0803e1ac 	.word	0x0803e1ac
 80123a8:	0800ee45 	.word	0x0800ee45
 80123ac:	08012105 	.word	0x08012105
 80123b0:	0803e1a8 	.word	0x0803e1a8

080123b4 <__sflush_r>:
 80123b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80123b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123bc:	0716      	lsls	r6, r2, #28
 80123be:	4605      	mov	r5, r0
 80123c0:	460c      	mov	r4, r1
 80123c2:	d454      	bmi.n	801246e <__sflush_r+0xba>
 80123c4:	684b      	ldr	r3, [r1, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	dc02      	bgt.n	80123d0 <__sflush_r+0x1c>
 80123ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	dd48      	ble.n	8012462 <__sflush_r+0xae>
 80123d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123d2:	2e00      	cmp	r6, #0
 80123d4:	d045      	beq.n	8012462 <__sflush_r+0xae>
 80123d6:	2300      	movs	r3, #0
 80123d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80123dc:	682f      	ldr	r7, [r5, #0]
 80123de:	6a21      	ldr	r1, [r4, #32]
 80123e0:	602b      	str	r3, [r5, #0]
 80123e2:	d030      	beq.n	8012446 <__sflush_r+0x92>
 80123e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80123e6:	89a3      	ldrh	r3, [r4, #12]
 80123e8:	0759      	lsls	r1, r3, #29
 80123ea:	d505      	bpl.n	80123f8 <__sflush_r+0x44>
 80123ec:	6863      	ldr	r3, [r4, #4]
 80123ee:	1ad2      	subs	r2, r2, r3
 80123f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80123f2:	b10b      	cbz	r3, 80123f8 <__sflush_r+0x44>
 80123f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80123f6:	1ad2      	subs	r2, r2, r3
 80123f8:	2300      	movs	r3, #0
 80123fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123fc:	6a21      	ldr	r1, [r4, #32]
 80123fe:	4628      	mov	r0, r5
 8012400:	47b0      	blx	r6
 8012402:	1c43      	adds	r3, r0, #1
 8012404:	89a3      	ldrh	r3, [r4, #12]
 8012406:	d106      	bne.n	8012416 <__sflush_r+0x62>
 8012408:	6829      	ldr	r1, [r5, #0]
 801240a:	291d      	cmp	r1, #29
 801240c:	d82b      	bhi.n	8012466 <__sflush_r+0xb2>
 801240e:	4a2a      	ldr	r2, [pc, #168]	@ (80124b8 <__sflush_r+0x104>)
 8012410:	40ca      	lsrs	r2, r1
 8012412:	07d6      	lsls	r6, r2, #31
 8012414:	d527      	bpl.n	8012466 <__sflush_r+0xb2>
 8012416:	2200      	movs	r2, #0
 8012418:	6062      	str	r2, [r4, #4]
 801241a:	04d9      	lsls	r1, r3, #19
 801241c:	6922      	ldr	r2, [r4, #16]
 801241e:	6022      	str	r2, [r4, #0]
 8012420:	d504      	bpl.n	801242c <__sflush_r+0x78>
 8012422:	1c42      	adds	r2, r0, #1
 8012424:	d101      	bne.n	801242a <__sflush_r+0x76>
 8012426:	682b      	ldr	r3, [r5, #0]
 8012428:	b903      	cbnz	r3, 801242c <__sflush_r+0x78>
 801242a:	6560      	str	r0, [r4, #84]	@ 0x54
 801242c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801242e:	602f      	str	r7, [r5, #0]
 8012430:	b1b9      	cbz	r1, 8012462 <__sflush_r+0xae>
 8012432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012436:	4299      	cmp	r1, r3
 8012438:	d002      	beq.n	8012440 <__sflush_r+0x8c>
 801243a:	4628      	mov	r0, r5
 801243c:	f7fe fb64 	bl	8010b08 <_free_r>
 8012440:	2300      	movs	r3, #0
 8012442:	6363      	str	r3, [r4, #52]	@ 0x34
 8012444:	e00d      	b.n	8012462 <__sflush_r+0xae>
 8012446:	2301      	movs	r3, #1
 8012448:	4628      	mov	r0, r5
 801244a:	47b0      	blx	r6
 801244c:	4602      	mov	r2, r0
 801244e:	1c50      	adds	r0, r2, #1
 8012450:	d1c9      	bne.n	80123e6 <__sflush_r+0x32>
 8012452:	682b      	ldr	r3, [r5, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d0c6      	beq.n	80123e6 <__sflush_r+0x32>
 8012458:	2b1d      	cmp	r3, #29
 801245a:	d001      	beq.n	8012460 <__sflush_r+0xac>
 801245c:	2b16      	cmp	r3, #22
 801245e:	d11e      	bne.n	801249e <__sflush_r+0xea>
 8012460:	602f      	str	r7, [r5, #0]
 8012462:	2000      	movs	r0, #0
 8012464:	e022      	b.n	80124ac <__sflush_r+0xf8>
 8012466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801246a:	b21b      	sxth	r3, r3
 801246c:	e01b      	b.n	80124a6 <__sflush_r+0xf2>
 801246e:	690f      	ldr	r7, [r1, #16]
 8012470:	2f00      	cmp	r7, #0
 8012472:	d0f6      	beq.n	8012462 <__sflush_r+0xae>
 8012474:	0793      	lsls	r3, r2, #30
 8012476:	680e      	ldr	r6, [r1, #0]
 8012478:	bf08      	it	eq
 801247a:	694b      	ldreq	r3, [r1, #20]
 801247c:	600f      	str	r7, [r1, #0]
 801247e:	bf18      	it	ne
 8012480:	2300      	movne	r3, #0
 8012482:	eba6 0807 	sub.w	r8, r6, r7
 8012486:	608b      	str	r3, [r1, #8]
 8012488:	f1b8 0f00 	cmp.w	r8, #0
 801248c:	dde9      	ble.n	8012462 <__sflush_r+0xae>
 801248e:	6a21      	ldr	r1, [r4, #32]
 8012490:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012492:	4643      	mov	r3, r8
 8012494:	463a      	mov	r2, r7
 8012496:	4628      	mov	r0, r5
 8012498:	47b0      	blx	r6
 801249a:	2800      	cmp	r0, #0
 801249c:	dc08      	bgt.n	80124b0 <__sflush_r+0xfc>
 801249e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124a6:	81a3      	strh	r3, [r4, #12]
 80124a8:	f04f 30ff 	mov.w	r0, #4294967295
 80124ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b0:	4407      	add	r7, r0
 80124b2:	eba8 0800 	sub.w	r8, r8, r0
 80124b6:	e7e7      	b.n	8012488 <__sflush_r+0xd4>
 80124b8:	20400001 	.word	0x20400001

080124bc <_fflush_r>:
 80124bc:	b538      	push	{r3, r4, r5, lr}
 80124be:	690b      	ldr	r3, [r1, #16]
 80124c0:	4605      	mov	r5, r0
 80124c2:	460c      	mov	r4, r1
 80124c4:	b913      	cbnz	r3, 80124cc <_fflush_r+0x10>
 80124c6:	2500      	movs	r5, #0
 80124c8:	4628      	mov	r0, r5
 80124ca:	bd38      	pop	{r3, r4, r5, pc}
 80124cc:	b118      	cbz	r0, 80124d6 <_fflush_r+0x1a>
 80124ce:	6a03      	ldr	r3, [r0, #32]
 80124d0:	b90b      	cbnz	r3, 80124d6 <_fflush_r+0x1a>
 80124d2:	f7fd fb07 	bl	800fae4 <__sinit>
 80124d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d0f3      	beq.n	80124c6 <_fflush_r+0xa>
 80124de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80124e0:	07d0      	lsls	r0, r2, #31
 80124e2:	d404      	bmi.n	80124ee <_fflush_r+0x32>
 80124e4:	0599      	lsls	r1, r3, #22
 80124e6:	d402      	bmi.n	80124ee <_fflush_r+0x32>
 80124e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124ea:	f7fd fc9c 	bl	800fe26 <__retarget_lock_acquire_recursive>
 80124ee:	4628      	mov	r0, r5
 80124f0:	4621      	mov	r1, r4
 80124f2:	f7ff ff5f 	bl	80123b4 <__sflush_r>
 80124f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80124f8:	07da      	lsls	r2, r3, #31
 80124fa:	4605      	mov	r5, r0
 80124fc:	d4e4      	bmi.n	80124c8 <_fflush_r+0xc>
 80124fe:	89a3      	ldrh	r3, [r4, #12]
 8012500:	059b      	lsls	r3, r3, #22
 8012502:	d4e1      	bmi.n	80124c8 <_fflush_r+0xc>
 8012504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012506:	f7fd fc8f 	bl	800fe28 <__retarget_lock_release_recursive>
 801250a:	e7dd      	b.n	80124c8 <_fflush_r+0xc>
 801250c:	0000      	movs	r0, r0
	...

08012510 <nan>:
 8012510:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012518 <nan+0x8>
 8012514:	4770      	bx	lr
 8012516:	bf00      	nop
 8012518:	00000000 	.word	0x00000000
 801251c:	7ff80000 	.word	0x7ff80000

08012520 <__assert_func>:
 8012520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012522:	4614      	mov	r4, r2
 8012524:	461a      	mov	r2, r3
 8012526:	4b09      	ldr	r3, [pc, #36]	@ (801254c <__assert_func+0x2c>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4605      	mov	r5, r0
 801252c:	68d8      	ldr	r0, [r3, #12]
 801252e:	b14c      	cbz	r4, 8012544 <__assert_func+0x24>
 8012530:	4b07      	ldr	r3, [pc, #28]	@ (8012550 <__assert_func+0x30>)
 8012532:	9100      	str	r1, [sp, #0]
 8012534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012538:	4906      	ldr	r1, [pc, #24]	@ (8012554 <__assert_func+0x34>)
 801253a:	462b      	mov	r3, r5
 801253c:	f000 fba8 	bl	8012c90 <fiprintf>
 8012540:	f000 fbb8 	bl	8012cb4 <abort>
 8012544:	4b04      	ldr	r3, [pc, #16]	@ (8012558 <__assert_func+0x38>)
 8012546:	461c      	mov	r4, r3
 8012548:	e7f3      	b.n	8012532 <__assert_func+0x12>
 801254a:	bf00      	nop
 801254c:	20000060 	.word	0x20000060
 8012550:	0803e1bb 	.word	0x0803e1bb
 8012554:	0803e1c8 	.word	0x0803e1c8
 8012558:	0803e1f6 	.word	0x0803e1f6

0801255c <_calloc_r>:
 801255c:	b570      	push	{r4, r5, r6, lr}
 801255e:	fba1 5402 	umull	r5, r4, r1, r2
 8012562:	b934      	cbnz	r4, 8012572 <_calloc_r+0x16>
 8012564:	4629      	mov	r1, r5
 8012566:	f7fc fabb 	bl	800eae0 <_malloc_r>
 801256a:	4606      	mov	r6, r0
 801256c:	b928      	cbnz	r0, 801257a <_calloc_r+0x1e>
 801256e:	4630      	mov	r0, r6
 8012570:	bd70      	pop	{r4, r5, r6, pc}
 8012572:	220c      	movs	r2, #12
 8012574:	6002      	str	r2, [r0, #0]
 8012576:	2600      	movs	r6, #0
 8012578:	e7f9      	b.n	801256e <_calloc_r+0x12>
 801257a:	462a      	mov	r2, r5
 801257c:	4621      	mov	r1, r4
 801257e:	f7fd fb9c 	bl	800fcba <memset>
 8012582:	e7f4      	b.n	801256e <_calloc_r+0x12>

08012584 <rshift>:
 8012584:	6903      	ldr	r3, [r0, #16]
 8012586:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801258a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801258e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012592:	f100 0414 	add.w	r4, r0, #20
 8012596:	dd45      	ble.n	8012624 <rshift+0xa0>
 8012598:	f011 011f 	ands.w	r1, r1, #31
 801259c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80125a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80125a4:	d10c      	bne.n	80125c0 <rshift+0x3c>
 80125a6:	f100 0710 	add.w	r7, r0, #16
 80125aa:	4629      	mov	r1, r5
 80125ac:	42b1      	cmp	r1, r6
 80125ae:	d334      	bcc.n	801261a <rshift+0x96>
 80125b0:	1a9b      	subs	r3, r3, r2
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	1eea      	subs	r2, r5, #3
 80125b6:	4296      	cmp	r6, r2
 80125b8:	bf38      	it	cc
 80125ba:	2300      	movcc	r3, #0
 80125bc:	4423      	add	r3, r4
 80125be:	e015      	b.n	80125ec <rshift+0x68>
 80125c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80125c4:	f1c1 0820 	rsb	r8, r1, #32
 80125c8:	40cf      	lsrs	r7, r1
 80125ca:	f105 0e04 	add.w	lr, r5, #4
 80125ce:	46a1      	mov	r9, r4
 80125d0:	4576      	cmp	r6, lr
 80125d2:	46f4      	mov	ip, lr
 80125d4:	d815      	bhi.n	8012602 <rshift+0x7e>
 80125d6:	1a9a      	subs	r2, r3, r2
 80125d8:	0092      	lsls	r2, r2, #2
 80125da:	3a04      	subs	r2, #4
 80125dc:	3501      	adds	r5, #1
 80125de:	42ae      	cmp	r6, r5
 80125e0:	bf38      	it	cc
 80125e2:	2200      	movcc	r2, #0
 80125e4:	18a3      	adds	r3, r4, r2
 80125e6:	50a7      	str	r7, [r4, r2]
 80125e8:	b107      	cbz	r7, 80125ec <rshift+0x68>
 80125ea:	3304      	adds	r3, #4
 80125ec:	1b1a      	subs	r2, r3, r4
 80125ee:	42a3      	cmp	r3, r4
 80125f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80125f4:	bf08      	it	eq
 80125f6:	2300      	moveq	r3, #0
 80125f8:	6102      	str	r2, [r0, #16]
 80125fa:	bf08      	it	eq
 80125fc:	6143      	streq	r3, [r0, #20]
 80125fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012602:	f8dc c000 	ldr.w	ip, [ip]
 8012606:	fa0c fc08 	lsl.w	ip, ip, r8
 801260a:	ea4c 0707 	orr.w	r7, ip, r7
 801260e:	f849 7b04 	str.w	r7, [r9], #4
 8012612:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012616:	40cf      	lsrs	r7, r1
 8012618:	e7da      	b.n	80125d0 <rshift+0x4c>
 801261a:	f851 cb04 	ldr.w	ip, [r1], #4
 801261e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012622:	e7c3      	b.n	80125ac <rshift+0x28>
 8012624:	4623      	mov	r3, r4
 8012626:	e7e1      	b.n	80125ec <rshift+0x68>

08012628 <__hexdig_fun>:
 8012628:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801262c:	2b09      	cmp	r3, #9
 801262e:	d802      	bhi.n	8012636 <__hexdig_fun+0xe>
 8012630:	3820      	subs	r0, #32
 8012632:	b2c0      	uxtb	r0, r0
 8012634:	4770      	bx	lr
 8012636:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801263a:	2b05      	cmp	r3, #5
 801263c:	d801      	bhi.n	8012642 <__hexdig_fun+0x1a>
 801263e:	3847      	subs	r0, #71	@ 0x47
 8012640:	e7f7      	b.n	8012632 <__hexdig_fun+0xa>
 8012642:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012646:	2b05      	cmp	r3, #5
 8012648:	d801      	bhi.n	801264e <__hexdig_fun+0x26>
 801264a:	3827      	subs	r0, #39	@ 0x27
 801264c:	e7f1      	b.n	8012632 <__hexdig_fun+0xa>
 801264e:	2000      	movs	r0, #0
 8012650:	4770      	bx	lr
	...

08012654 <__gethex>:
 8012654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012658:	b085      	sub	sp, #20
 801265a:	468a      	mov	sl, r1
 801265c:	9302      	str	r3, [sp, #8]
 801265e:	680b      	ldr	r3, [r1, #0]
 8012660:	9001      	str	r0, [sp, #4]
 8012662:	4690      	mov	r8, r2
 8012664:	1c9c      	adds	r4, r3, #2
 8012666:	46a1      	mov	r9, r4
 8012668:	f814 0b01 	ldrb.w	r0, [r4], #1
 801266c:	2830      	cmp	r0, #48	@ 0x30
 801266e:	d0fa      	beq.n	8012666 <__gethex+0x12>
 8012670:	eba9 0303 	sub.w	r3, r9, r3
 8012674:	f1a3 0b02 	sub.w	fp, r3, #2
 8012678:	f7ff ffd6 	bl	8012628 <__hexdig_fun>
 801267c:	4605      	mov	r5, r0
 801267e:	2800      	cmp	r0, #0
 8012680:	d168      	bne.n	8012754 <__gethex+0x100>
 8012682:	49a0      	ldr	r1, [pc, #640]	@ (8012904 <__gethex+0x2b0>)
 8012684:	2201      	movs	r2, #1
 8012686:	4648      	mov	r0, r9
 8012688:	f7fd fb1f 	bl	800fcca <strncmp>
 801268c:	4607      	mov	r7, r0
 801268e:	2800      	cmp	r0, #0
 8012690:	d167      	bne.n	8012762 <__gethex+0x10e>
 8012692:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012696:	4626      	mov	r6, r4
 8012698:	f7ff ffc6 	bl	8012628 <__hexdig_fun>
 801269c:	2800      	cmp	r0, #0
 801269e:	d062      	beq.n	8012766 <__gethex+0x112>
 80126a0:	4623      	mov	r3, r4
 80126a2:	7818      	ldrb	r0, [r3, #0]
 80126a4:	2830      	cmp	r0, #48	@ 0x30
 80126a6:	4699      	mov	r9, r3
 80126a8:	f103 0301 	add.w	r3, r3, #1
 80126ac:	d0f9      	beq.n	80126a2 <__gethex+0x4e>
 80126ae:	f7ff ffbb 	bl	8012628 <__hexdig_fun>
 80126b2:	fab0 f580 	clz	r5, r0
 80126b6:	096d      	lsrs	r5, r5, #5
 80126b8:	f04f 0b01 	mov.w	fp, #1
 80126bc:	464a      	mov	r2, r9
 80126be:	4616      	mov	r6, r2
 80126c0:	3201      	adds	r2, #1
 80126c2:	7830      	ldrb	r0, [r6, #0]
 80126c4:	f7ff ffb0 	bl	8012628 <__hexdig_fun>
 80126c8:	2800      	cmp	r0, #0
 80126ca:	d1f8      	bne.n	80126be <__gethex+0x6a>
 80126cc:	498d      	ldr	r1, [pc, #564]	@ (8012904 <__gethex+0x2b0>)
 80126ce:	2201      	movs	r2, #1
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7fd fafa 	bl	800fcca <strncmp>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d13f      	bne.n	801275a <__gethex+0x106>
 80126da:	b944      	cbnz	r4, 80126ee <__gethex+0x9a>
 80126dc:	1c74      	adds	r4, r6, #1
 80126de:	4622      	mov	r2, r4
 80126e0:	4616      	mov	r6, r2
 80126e2:	3201      	adds	r2, #1
 80126e4:	7830      	ldrb	r0, [r6, #0]
 80126e6:	f7ff ff9f 	bl	8012628 <__hexdig_fun>
 80126ea:	2800      	cmp	r0, #0
 80126ec:	d1f8      	bne.n	80126e0 <__gethex+0x8c>
 80126ee:	1ba4      	subs	r4, r4, r6
 80126f0:	00a7      	lsls	r7, r4, #2
 80126f2:	7833      	ldrb	r3, [r6, #0]
 80126f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80126f8:	2b50      	cmp	r3, #80	@ 0x50
 80126fa:	d13e      	bne.n	801277a <__gethex+0x126>
 80126fc:	7873      	ldrb	r3, [r6, #1]
 80126fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8012700:	d033      	beq.n	801276a <__gethex+0x116>
 8012702:	2b2d      	cmp	r3, #45	@ 0x2d
 8012704:	d034      	beq.n	8012770 <__gethex+0x11c>
 8012706:	1c71      	adds	r1, r6, #1
 8012708:	2400      	movs	r4, #0
 801270a:	7808      	ldrb	r0, [r1, #0]
 801270c:	f7ff ff8c 	bl	8012628 <__hexdig_fun>
 8012710:	1e43      	subs	r3, r0, #1
 8012712:	b2db      	uxtb	r3, r3
 8012714:	2b18      	cmp	r3, #24
 8012716:	d830      	bhi.n	801277a <__gethex+0x126>
 8012718:	f1a0 0210 	sub.w	r2, r0, #16
 801271c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012720:	f7ff ff82 	bl	8012628 <__hexdig_fun>
 8012724:	f100 3cff 	add.w	ip, r0, #4294967295
 8012728:	fa5f fc8c 	uxtb.w	ip, ip
 801272c:	f1bc 0f18 	cmp.w	ip, #24
 8012730:	f04f 030a 	mov.w	r3, #10
 8012734:	d91e      	bls.n	8012774 <__gethex+0x120>
 8012736:	b104      	cbz	r4, 801273a <__gethex+0xe6>
 8012738:	4252      	negs	r2, r2
 801273a:	4417      	add	r7, r2
 801273c:	f8ca 1000 	str.w	r1, [sl]
 8012740:	b1ed      	cbz	r5, 801277e <__gethex+0x12a>
 8012742:	f1bb 0f00 	cmp.w	fp, #0
 8012746:	bf0c      	ite	eq
 8012748:	2506      	moveq	r5, #6
 801274a:	2500      	movne	r5, #0
 801274c:	4628      	mov	r0, r5
 801274e:	b005      	add	sp, #20
 8012750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012754:	2500      	movs	r5, #0
 8012756:	462c      	mov	r4, r5
 8012758:	e7b0      	b.n	80126bc <__gethex+0x68>
 801275a:	2c00      	cmp	r4, #0
 801275c:	d1c7      	bne.n	80126ee <__gethex+0x9a>
 801275e:	4627      	mov	r7, r4
 8012760:	e7c7      	b.n	80126f2 <__gethex+0x9e>
 8012762:	464e      	mov	r6, r9
 8012764:	462f      	mov	r7, r5
 8012766:	2501      	movs	r5, #1
 8012768:	e7c3      	b.n	80126f2 <__gethex+0x9e>
 801276a:	2400      	movs	r4, #0
 801276c:	1cb1      	adds	r1, r6, #2
 801276e:	e7cc      	b.n	801270a <__gethex+0xb6>
 8012770:	2401      	movs	r4, #1
 8012772:	e7fb      	b.n	801276c <__gethex+0x118>
 8012774:	fb03 0002 	mla	r0, r3, r2, r0
 8012778:	e7ce      	b.n	8012718 <__gethex+0xc4>
 801277a:	4631      	mov	r1, r6
 801277c:	e7de      	b.n	801273c <__gethex+0xe8>
 801277e:	eba6 0309 	sub.w	r3, r6, r9
 8012782:	3b01      	subs	r3, #1
 8012784:	4629      	mov	r1, r5
 8012786:	2b07      	cmp	r3, #7
 8012788:	dc0a      	bgt.n	80127a0 <__gethex+0x14c>
 801278a:	9801      	ldr	r0, [sp, #4]
 801278c:	f7fe fa06 	bl	8010b9c <_Balloc>
 8012790:	4604      	mov	r4, r0
 8012792:	b940      	cbnz	r0, 80127a6 <__gethex+0x152>
 8012794:	4b5c      	ldr	r3, [pc, #368]	@ (8012908 <__gethex+0x2b4>)
 8012796:	4602      	mov	r2, r0
 8012798:	21e4      	movs	r1, #228	@ 0xe4
 801279a:	485c      	ldr	r0, [pc, #368]	@ (801290c <__gethex+0x2b8>)
 801279c:	f7ff fec0 	bl	8012520 <__assert_func>
 80127a0:	3101      	adds	r1, #1
 80127a2:	105b      	asrs	r3, r3, #1
 80127a4:	e7ef      	b.n	8012786 <__gethex+0x132>
 80127a6:	f100 0a14 	add.w	sl, r0, #20
 80127aa:	2300      	movs	r3, #0
 80127ac:	4655      	mov	r5, sl
 80127ae:	469b      	mov	fp, r3
 80127b0:	45b1      	cmp	r9, r6
 80127b2:	d337      	bcc.n	8012824 <__gethex+0x1d0>
 80127b4:	f845 bb04 	str.w	fp, [r5], #4
 80127b8:	eba5 050a 	sub.w	r5, r5, sl
 80127bc:	10ad      	asrs	r5, r5, #2
 80127be:	6125      	str	r5, [r4, #16]
 80127c0:	4658      	mov	r0, fp
 80127c2:	f7fe fadd 	bl	8010d80 <__hi0bits>
 80127c6:	016d      	lsls	r5, r5, #5
 80127c8:	f8d8 6000 	ldr.w	r6, [r8]
 80127cc:	1a2d      	subs	r5, r5, r0
 80127ce:	42b5      	cmp	r5, r6
 80127d0:	dd54      	ble.n	801287c <__gethex+0x228>
 80127d2:	1bad      	subs	r5, r5, r6
 80127d4:	4629      	mov	r1, r5
 80127d6:	4620      	mov	r0, r4
 80127d8:	f7fe fe69 	bl	80114ae <__any_on>
 80127dc:	4681      	mov	r9, r0
 80127de:	b178      	cbz	r0, 8012800 <__gethex+0x1ac>
 80127e0:	1e6b      	subs	r3, r5, #1
 80127e2:	1159      	asrs	r1, r3, #5
 80127e4:	f003 021f 	and.w	r2, r3, #31
 80127e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80127ec:	f04f 0901 	mov.w	r9, #1
 80127f0:	fa09 f202 	lsl.w	r2, r9, r2
 80127f4:	420a      	tst	r2, r1
 80127f6:	d003      	beq.n	8012800 <__gethex+0x1ac>
 80127f8:	454b      	cmp	r3, r9
 80127fa:	dc36      	bgt.n	801286a <__gethex+0x216>
 80127fc:	f04f 0902 	mov.w	r9, #2
 8012800:	4629      	mov	r1, r5
 8012802:	4620      	mov	r0, r4
 8012804:	f7ff febe 	bl	8012584 <rshift>
 8012808:	442f      	add	r7, r5
 801280a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801280e:	42bb      	cmp	r3, r7
 8012810:	da42      	bge.n	8012898 <__gethex+0x244>
 8012812:	9801      	ldr	r0, [sp, #4]
 8012814:	4621      	mov	r1, r4
 8012816:	f7fe fa01 	bl	8010c1c <_Bfree>
 801281a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801281c:	2300      	movs	r3, #0
 801281e:	6013      	str	r3, [r2, #0]
 8012820:	25a3      	movs	r5, #163	@ 0xa3
 8012822:	e793      	b.n	801274c <__gethex+0xf8>
 8012824:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012828:	2a2e      	cmp	r2, #46	@ 0x2e
 801282a:	d012      	beq.n	8012852 <__gethex+0x1fe>
 801282c:	2b20      	cmp	r3, #32
 801282e:	d104      	bne.n	801283a <__gethex+0x1e6>
 8012830:	f845 bb04 	str.w	fp, [r5], #4
 8012834:	f04f 0b00 	mov.w	fp, #0
 8012838:	465b      	mov	r3, fp
 801283a:	7830      	ldrb	r0, [r6, #0]
 801283c:	9303      	str	r3, [sp, #12]
 801283e:	f7ff fef3 	bl	8012628 <__hexdig_fun>
 8012842:	9b03      	ldr	r3, [sp, #12]
 8012844:	f000 000f 	and.w	r0, r0, #15
 8012848:	4098      	lsls	r0, r3
 801284a:	ea4b 0b00 	orr.w	fp, fp, r0
 801284e:	3304      	adds	r3, #4
 8012850:	e7ae      	b.n	80127b0 <__gethex+0x15c>
 8012852:	45b1      	cmp	r9, r6
 8012854:	d8ea      	bhi.n	801282c <__gethex+0x1d8>
 8012856:	492b      	ldr	r1, [pc, #172]	@ (8012904 <__gethex+0x2b0>)
 8012858:	9303      	str	r3, [sp, #12]
 801285a:	2201      	movs	r2, #1
 801285c:	4630      	mov	r0, r6
 801285e:	f7fd fa34 	bl	800fcca <strncmp>
 8012862:	9b03      	ldr	r3, [sp, #12]
 8012864:	2800      	cmp	r0, #0
 8012866:	d1e1      	bne.n	801282c <__gethex+0x1d8>
 8012868:	e7a2      	b.n	80127b0 <__gethex+0x15c>
 801286a:	1ea9      	subs	r1, r5, #2
 801286c:	4620      	mov	r0, r4
 801286e:	f7fe fe1e 	bl	80114ae <__any_on>
 8012872:	2800      	cmp	r0, #0
 8012874:	d0c2      	beq.n	80127fc <__gethex+0x1a8>
 8012876:	f04f 0903 	mov.w	r9, #3
 801287a:	e7c1      	b.n	8012800 <__gethex+0x1ac>
 801287c:	da09      	bge.n	8012892 <__gethex+0x23e>
 801287e:	1b75      	subs	r5, r6, r5
 8012880:	4621      	mov	r1, r4
 8012882:	9801      	ldr	r0, [sp, #4]
 8012884:	462a      	mov	r2, r5
 8012886:	f7fe fbd9 	bl	801103c <__lshift>
 801288a:	1b7f      	subs	r7, r7, r5
 801288c:	4604      	mov	r4, r0
 801288e:	f100 0a14 	add.w	sl, r0, #20
 8012892:	f04f 0900 	mov.w	r9, #0
 8012896:	e7b8      	b.n	801280a <__gethex+0x1b6>
 8012898:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801289c:	42bd      	cmp	r5, r7
 801289e:	dd6f      	ble.n	8012980 <__gethex+0x32c>
 80128a0:	1bed      	subs	r5, r5, r7
 80128a2:	42ae      	cmp	r6, r5
 80128a4:	dc34      	bgt.n	8012910 <__gethex+0x2bc>
 80128a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128aa:	2b02      	cmp	r3, #2
 80128ac:	d022      	beq.n	80128f4 <__gethex+0x2a0>
 80128ae:	2b03      	cmp	r3, #3
 80128b0:	d024      	beq.n	80128fc <__gethex+0x2a8>
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	d115      	bne.n	80128e2 <__gethex+0x28e>
 80128b6:	42ae      	cmp	r6, r5
 80128b8:	d113      	bne.n	80128e2 <__gethex+0x28e>
 80128ba:	2e01      	cmp	r6, #1
 80128bc:	d10b      	bne.n	80128d6 <__gethex+0x282>
 80128be:	9a02      	ldr	r2, [sp, #8]
 80128c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80128c4:	6013      	str	r3, [r2, #0]
 80128c6:	2301      	movs	r3, #1
 80128c8:	6123      	str	r3, [r4, #16]
 80128ca:	f8ca 3000 	str.w	r3, [sl]
 80128ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128d0:	2562      	movs	r5, #98	@ 0x62
 80128d2:	601c      	str	r4, [r3, #0]
 80128d4:	e73a      	b.n	801274c <__gethex+0xf8>
 80128d6:	1e71      	subs	r1, r6, #1
 80128d8:	4620      	mov	r0, r4
 80128da:	f7fe fde8 	bl	80114ae <__any_on>
 80128de:	2800      	cmp	r0, #0
 80128e0:	d1ed      	bne.n	80128be <__gethex+0x26a>
 80128e2:	9801      	ldr	r0, [sp, #4]
 80128e4:	4621      	mov	r1, r4
 80128e6:	f7fe f999 	bl	8010c1c <_Bfree>
 80128ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128ec:	2300      	movs	r3, #0
 80128ee:	6013      	str	r3, [r2, #0]
 80128f0:	2550      	movs	r5, #80	@ 0x50
 80128f2:	e72b      	b.n	801274c <__gethex+0xf8>
 80128f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1f3      	bne.n	80128e2 <__gethex+0x28e>
 80128fa:	e7e0      	b.n	80128be <__gethex+0x26a>
 80128fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d1dd      	bne.n	80128be <__gethex+0x26a>
 8012902:	e7ee      	b.n	80128e2 <__gethex+0x28e>
 8012904:	0803e1a0 	.word	0x0803e1a0
 8012908:	0803e136 	.word	0x0803e136
 801290c:	0803e1f7 	.word	0x0803e1f7
 8012910:	1e6f      	subs	r7, r5, #1
 8012912:	f1b9 0f00 	cmp.w	r9, #0
 8012916:	d130      	bne.n	801297a <__gethex+0x326>
 8012918:	b127      	cbz	r7, 8012924 <__gethex+0x2d0>
 801291a:	4639      	mov	r1, r7
 801291c:	4620      	mov	r0, r4
 801291e:	f7fe fdc6 	bl	80114ae <__any_on>
 8012922:	4681      	mov	r9, r0
 8012924:	117a      	asrs	r2, r7, #5
 8012926:	2301      	movs	r3, #1
 8012928:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801292c:	f007 071f 	and.w	r7, r7, #31
 8012930:	40bb      	lsls	r3, r7
 8012932:	4213      	tst	r3, r2
 8012934:	4629      	mov	r1, r5
 8012936:	4620      	mov	r0, r4
 8012938:	bf18      	it	ne
 801293a:	f049 0902 	orrne.w	r9, r9, #2
 801293e:	f7ff fe21 	bl	8012584 <rshift>
 8012942:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012946:	1b76      	subs	r6, r6, r5
 8012948:	2502      	movs	r5, #2
 801294a:	f1b9 0f00 	cmp.w	r9, #0
 801294e:	d047      	beq.n	80129e0 <__gethex+0x38c>
 8012950:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012954:	2b02      	cmp	r3, #2
 8012956:	d015      	beq.n	8012984 <__gethex+0x330>
 8012958:	2b03      	cmp	r3, #3
 801295a:	d017      	beq.n	801298c <__gethex+0x338>
 801295c:	2b01      	cmp	r3, #1
 801295e:	d109      	bne.n	8012974 <__gethex+0x320>
 8012960:	f019 0f02 	tst.w	r9, #2
 8012964:	d006      	beq.n	8012974 <__gethex+0x320>
 8012966:	f8da 3000 	ldr.w	r3, [sl]
 801296a:	ea49 0903 	orr.w	r9, r9, r3
 801296e:	f019 0f01 	tst.w	r9, #1
 8012972:	d10e      	bne.n	8012992 <__gethex+0x33e>
 8012974:	f045 0510 	orr.w	r5, r5, #16
 8012978:	e032      	b.n	80129e0 <__gethex+0x38c>
 801297a:	f04f 0901 	mov.w	r9, #1
 801297e:	e7d1      	b.n	8012924 <__gethex+0x2d0>
 8012980:	2501      	movs	r5, #1
 8012982:	e7e2      	b.n	801294a <__gethex+0x2f6>
 8012984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012986:	f1c3 0301 	rsb	r3, r3, #1
 801298a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801298c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801298e:	2b00      	cmp	r3, #0
 8012990:	d0f0      	beq.n	8012974 <__gethex+0x320>
 8012992:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012996:	f104 0314 	add.w	r3, r4, #20
 801299a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801299e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80129a2:	f04f 0c00 	mov.w	ip, #0
 80129a6:	4618      	mov	r0, r3
 80129a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80129b0:	d01b      	beq.n	80129ea <__gethex+0x396>
 80129b2:	3201      	adds	r2, #1
 80129b4:	6002      	str	r2, [r0, #0]
 80129b6:	2d02      	cmp	r5, #2
 80129b8:	f104 0314 	add.w	r3, r4, #20
 80129bc:	d13c      	bne.n	8012a38 <__gethex+0x3e4>
 80129be:	f8d8 2000 	ldr.w	r2, [r8]
 80129c2:	3a01      	subs	r2, #1
 80129c4:	42b2      	cmp	r2, r6
 80129c6:	d109      	bne.n	80129dc <__gethex+0x388>
 80129c8:	1171      	asrs	r1, r6, #5
 80129ca:	2201      	movs	r2, #1
 80129cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80129d0:	f006 061f 	and.w	r6, r6, #31
 80129d4:	fa02 f606 	lsl.w	r6, r2, r6
 80129d8:	421e      	tst	r6, r3
 80129da:	d13a      	bne.n	8012a52 <__gethex+0x3fe>
 80129dc:	f045 0520 	orr.w	r5, r5, #32
 80129e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129e2:	601c      	str	r4, [r3, #0]
 80129e4:	9b02      	ldr	r3, [sp, #8]
 80129e6:	601f      	str	r7, [r3, #0]
 80129e8:	e6b0      	b.n	801274c <__gethex+0xf8>
 80129ea:	4299      	cmp	r1, r3
 80129ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80129f0:	d8d9      	bhi.n	80129a6 <__gethex+0x352>
 80129f2:	68a3      	ldr	r3, [r4, #8]
 80129f4:	459b      	cmp	fp, r3
 80129f6:	db17      	blt.n	8012a28 <__gethex+0x3d4>
 80129f8:	6861      	ldr	r1, [r4, #4]
 80129fa:	9801      	ldr	r0, [sp, #4]
 80129fc:	3101      	adds	r1, #1
 80129fe:	f7fe f8cd 	bl	8010b9c <_Balloc>
 8012a02:	4681      	mov	r9, r0
 8012a04:	b918      	cbnz	r0, 8012a0e <__gethex+0x3ba>
 8012a06:	4b1a      	ldr	r3, [pc, #104]	@ (8012a70 <__gethex+0x41c>)
 8012a08:	4602      	mov	r2, r0
 8012a0a:	2184      	movs	r1, #132	@ 0x84
 8012a0c:	e6c5      	b.n	801279a <__gethex+0x146>
 8012a0e:	6922      	ldr	r2, [r4, #16]
 8012a10:	3202      	adds	r2, #2
 8012a12:	f104 010c 	add.w	r1, r4, #12
 8012a16:	0092      	lsls	r2, r2, #2
 8012a18:	300c      	adds	r0, #12
 8012a1a:	f7fd fa06 	bl	800fe2a <memcpy>
 8012a1e:	4621      	mov	r1, r4
 8012a20:	9801      	ldr	r0, [sp, #4]
 8012a22:	f7fe f8fb 	bl	8010c1c <_Bfree>
 8012a26:	464c      	mov	r4, r9
 8012a28:	6923      	ldr	r3, [r4, #16]
 8012a2a:	1c5a      	adds	r2, r3, #1
 8012a2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012a30:	6122      	str	r2, [r4, #16]
 8012a32:	2201      	movs	r2, #1
 8012a34:	615a      	str	r2, [r3, #20]
 8012a36:	e7be      	b.n	80129b6 <__gethex+0x362>
 8012a38:	6922      	ldr	r2, [r4, #16]
 8012a3a:	455a      	cmp	r2, fp
 8012a3c:	dd0b      	ble.n	8012a56 <__gethex+0x402>
 8012a3e:	2101      	movs	r1, #1
 8012a40:	4620      	mov	r0, r4
 8012a42:	f7ff fd9f 	bl	8012584 <rshift>
 8012a46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a4a:	3701      	adds	r7, #1
 8012a4c:	42bb      	cmp	r3, r7
 8012a4e:	f6ff aee0 	blt.w	8012812 <__gethex+0x1be>
 8012a52:	2501      	movs	r5, #1
 8012a54:	e7c2      	b.n	80129dc <__gethex+0x388>
 8012a56:	f016 061f 	ands.w	r6, r6, #31
 8012a5a:	d0fa      	beq.n	8012a52 <__gethex+0x3fe>
 8012a5c:	4453      	add	r3, sl
 8012a5e:	f1c6 0620 	rsb	r6, r6, #32
 8012a62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012a66:	f7fe f98b 	bl	8010d80 <__hi0bits>
 8012a6a:	42b0      	cmp	r0, r6
 8012a6c:	dbe7      	blt.n	8012a3e <__gethex+0x3ea>
 8012a6e:	e7f0      	b.n	8012a52 <__gethex+0x3fe>
 8012a70:	0803e136 	.word	0x0803e136

08012a74 <L_shift>:
 8012a74:	f1c2 0208 	rsb	r2, r2, #8
 8012a78:	0092      	lsls	r2, r2, #2
 8012a7a:	b570      	push	{r4, r5, r6, lr}
 8012a7c:	f1c2 0620 	rsb	r6, r2, #32
 8012a80:	6843      	ldr	r3, [r0, #4]
 8012a82:	6804      	ldr	r4, [r0, #0]
 8012a84:	fa03 f506 	lsl.w	r5, r3, r6
 8012a88:	432c      	orrs	r4, r5
 8012a8a:	40d3      	lsrs	r3, r2
 8012a8c:	6004      	str	r4, [r0, #0]
 8012a8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a92:	4288      	cmp	r0, r1
 8012a94:	d3f4      	bcc.n	8012a80 <L_shift+0xc>
 8012a96:	bd70      	pop	{r4, r5, r6, pc}

08012a98 <__match>:
 8012a98:	b530      	push	{r4, r5, lr}
 8012a9a:	6803      	ldr	r3, [r0, #0]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012aa2:	b914      	cbnz	r4, 8012aaa <__match+0x12>
 8012aa4:	6003      	str	r3, [r0, #0]
 8012aa6:	2001      	movs	r0, #1
 8012aa8:	bd30      	pop	{r4, r5, pc}
 8012aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012aae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012ab2:	2d19      	cmp	r5, #25
 8012ab4:	bf98      	it	ls
 8012ab6:	3220      	addls	r2, #32
 8012ab8:	42a2      	cmp	r2, r4
 8012aba:	d0f0      	beq.n	8012a9e <__match+0x6>
 8012abc:	2000      	movs	r0, #0
 8012abe:	e7f3      	b.n	8012aa8 <__match+0x10>

08012ac0 <__hexnan>:
 8012ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac4:	680b      	ldr	r3, [r1, #0]
 8012ac6:	6801      	ldr	r1, [r0, #0]
 8012ac8:	115e      	asrs	r6, r3, #5
 8012aca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012ace:	f013 031f 	ands.w	r3, r3, #31
 8012ad2:	b087      	sub	sp, #28
 8012ad4:	bf18      	it	ne
 8012ad6:	3604      	addne	r6, #4
 8012ad8:	2500      	movs	r5, #0
 8012ada:	1f37      	subs	r7, r6, #4
 8012adc:	4682      	mov	sl, r0
 8012ade:	4690      	mov	r8, r2
 8012ae0:	9301      	str	r3, [sp, #4]
 8012ae2:	f846 5c04 	str.w	r5, [r6, #-4]
 8012ae6:	46b9      	mov	r9, r7
 8012ae8:	463c      	mov	r4, r7
 8012aea:	9502      	str	r5, [sp, #8]
 8012aec:	46ab      	mov	fp, r5
 8012aee:	784a      	ldrb	r2, [r1, #1]
 8012af0:	1c4b      	adds	r3, r1, #1
 8012af2:	9303      	str	r3, [sp, #12]
 8012af4:	b342      	cbz	r2, 8012b48 <__hexnan+0x88>
 8012af6:	4610      	mov	r0, r2
 8012af8:	9105      	str	r1, [sp, #20]
 8012afa:	9204      	str	r2, [sp, #16]
 8012afc:	f7ff fd94 	bl	8012628 <__hexdig_fun>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	d151      	bne.n	8012ba8 <__hexnan+0xe8>
 8012b04:	9a04      	ldr	r2, [sp, #16]
 8012b06:	9905      	ldr	r1, [sp, #20]
 8012b08:	2a20      	cmp	r2, #32
 8012b0a:	d818      	bhi.n	8012b3e <__hexnan+0x7e>
 8012b0c:	9b02      	ldr	r3, [sp, #8]
 8012b0e:	459b      	cmp	fp, r3
 8012b10:	dd13      	ble.n	8012b3a <__hexnan+0x7a>
 8012b12:	454c      	cmp	r4, r9
 8012b14:	d206      	bcs.n	8012b24 <__hexnan+0x64>
 8012b16:	2d07      	cmp	r5, #7
 8012b18:	dc04      	bgt.n	8012b24 <__hexnan+0x64>
 8012b1a:	462a      	mov	r2, r5
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f7ff ffa8 	bl	8012a74 <L_shift>
 8012b24:	4544      	cmp	r4, r8
 8012b26:	d952      	bls.n	8012bce <__hexnan+0x10e>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	f1a4 0904 	sub.w	r9, r4, #4
 8012b2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b32:	f8cd b008 	str.w	fp, [sp, #8]
 8012b36:	464c      	mov	r4, r9
 8012b38:	461d      	mov	r5, r3
 8012b3a:	9903      	ldr	r1, [sp, #12]
 8012b3c:	e7d7      	b.n	8012aee <__hexnan+0x2e>
 8012b3e:	2a29      	cmp	r2, #41	@ 0x29
 8012b40:	d157      	bne.n	8012bf2 <__hexnan+0x132>
 8012b42:	3102      	adds	r1, #2
 8012b44:	f8ca 1000 	str.w	r1, [sl]
 8012b48:	f1bb 0f00 	cmp.w	fp, #0
 8012b4c:	d051      	beq.n	8012bf2 <__hexnan+0x132>
 8012b4e:	454c      	cmp	r4, r9
 8012b50:	d206      	bcs.n	8012b60 <__hexnan+0xa0>
 8012b52:	2d07      	cmp	r5, #7
 8012b54:	dc04      	bgt.n	8012b60 <__hexnan+0xa0>
 8012b56:	462a      	mov	r2, r5
 8012b58:	4649      	mov	r1, r9
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	f7ff ff8a 	bl	8012a74 <L_shift>
 8012b60:	4544      	cmp	r4, r8
 8012b62:	d936      	bls.n	8012bd2 <__hexnan+0x112>
 8012b64:	f1a8 0204 	sub.w	r2, r8, #4
 8012b68:	4623      	mov	r3, r4
 8012b6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8012b6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012b72:	429f      	cmp	r7, r3
 8012b74:	d2f9      	bcs.n	8012b6a <__hexnan+0xaa>
 8012b76:	1b3b      	subs	r3, r7, r4
 8012b78:	f023 0303 	bic.w	r3, r3, #3
 8012b7c:	3304      	adds	r3, #4
 8012b7e:	3401      	adds	r4, #1
 8012b80:	3e03      	subs	r6, #3
 8012b82:	42b4      	cmp	r4, r6
 8012b84:	bf88      	it	hi
 8012b86:	2304      	movhi	r3, #4
 8012b88:	4443      	add	r3, r8
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	f843 2b04 	str.w	r2, [r3], #4
 8012b90:	429f      	cmp	r7, r3
 8012b92:	d2fb      	bcs.n	8012b8c <__hexnan+0xcc>
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	b91b      	cbnz	r3, 8012ba0 <__hexnan+0xe0>
 8012b98:	4547      	cmp	r7, r8
 8012b9a:	d128      	bne.n	8012bee <__hexnan+0x12e>
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	603b      	str	r3, [r7, #0]
 8012ba0:	2005      	movs	r0, #5
 8012ba2:	b007      	add	sp, #28
 8012ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba8:	3501      	adds	r5, #1
 8012baa:	2d08      	cmp	r5, #8
 8012bac:	f10b 0b01 	add.w	fp, fp, #1
 8012bb0:	dd06      	ble.n	8012bc0 <__hexnan+0x100>
 8012bb2:	4544      	cmp	r4, r8
 8012bb4:	d9c1      	bls.n	8012b3a <__hexnan+0x7a>
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8012bbc:	2501      	movs	r5, #1
 8012bbe:	3c04      	subs	r4, #4
 8012bc0:	6822      	ldr	r2, [r4, #0]
 8012bc2:	f000 000f 	and.w	r0, r0, #15
 8012bc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012bca:	6020      	str	r0, [r4, #0]
 8012bcc:	e7b5      	b.n	8012b3a <__hexnan+0x7a>
 8012bce:	2508      	movs	r5, #8
 8012bd0:	e7b3      	b.n	8012b3a <__hexnan+0x7a>
 8012bd2:	9b01      	ldr	r3, [sp, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d0dd      	beq.n	8012b94 <__hexnan+0xd4>
 8012bd8:	f1c3 0320 	rsb	r3, r3, #32
 8012bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8012be0:	40da      	lsrs	r2, r3
 8012be2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012be6:	4013      	ands	r3, r2
 8012be8:	f846 3c04 	str.w	r3, [r6, #-4]
 8012bec:	e7d2      	b.n	8012b94 <__hexnan+0xd4>
 8012bee:	3f04      	subs	r7, #4
 8012bf0:	e7d0      	b.n	8012b94 <__hexnan+0xd4>
 8012bf2:	2004      	movs	r0, #4
 8012bf4:	e7d5      	b.n	8012ba2 <__hexnan+0xe2>

08012bf6 <__ascii_mbtowc>:
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	b901      	cbnz	r1, 8012bfc <__ascii_mbtowc+0x6>
 8012bfa:	a901      	add	r1, sp, #4
 8012bfc:	b142      	cbz	r2, 8012c10 <__ascii_mbtowc+0x1a>
 8012bfe:	b14b      	cbz	r3, 8012c14 <__ascii_mbtowc+0x1e>
 8012c00:	7813      	ldrb	r3, [r2, #0]
 8012c02:	600b      	str	r3, [r1, #0]
 8012c04:	7812      	ldrb	r2, [r2, #0]
 8012c06:	1e10      	subs	r0, r2, #0
 8012c08:	bf18      	it	ne
 8012c0a:	2001      	movne	r0, #1
 8012c0c:	b002      	add	sp, #8
 8012c0e:	4770      	bx	lr
 8012c10:	4610      	mov	r0, r2
 8012c12:	e7fb      	b.n	8012c0c <__ascii_mbtowc+0x16>
 8012c14:	f06f 0001 	mvn.w	r0, #1
 8012c18:	e7f8      	b.n	8012c0c <__ascii_mbtowc+0x16>

08012c1a <_realloc_r>:
 8012c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c1e:	4607      	mov	r7, r0
 8012c20:	4614      	mov	r4, r2
 8012c22:	460d      	mov	r5, r1
 8012c24:	b921      	cbnz	r1, 8012c30 <_realloc_r+0x16>
 8012c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c2a:	4611      	mov	r1, r2
 8012c2c:	f7fb bf58 	b.w	800eae0 <_malloc_r>
 8012c30:	b92a      	cbnz	r2, 8012c3e <_realloc_r+0x24>
 8012c32:	f7fd ff69 	bl	8010b08 <_free_r>
 8012c36:	4625      	mov	r5, r4
 8012c38:	4628      	mov	r0, r5
 8012c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c3e:	f000 f840 	bl	8012cc2 <_malloc_usable_size_r>
 8012c42:	4284      	cmp	r4, r0
 8012c44:	4606      	mov	r6, r0
 8012c46:	d802      	bhi.n	8012c4e <_realloc_r+0x34>
 8012c48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c4c:	d8f4      	bhi.n	8012c38 <_realloc_r+0x1e>
 8012c4e:	4621      	mov	r1, r4
 8012c50:	4638      	mov	r0, r7
 8012c52:	f7fb ff45 	bl	800eae0 <_malloc_r>
 8012c56:	4680      	mov	r8, r0
 8012c58:	b908      	cbnz	r0, 8012c5e <_realloc_r+0x44>
 8012c5a:	4645      	mov	r5, r8
 8012c5c:	e7ec      	b.n	8012c38 <_realloc_r+0x1e>
 8012c5e:	42b4      	cmp	r4, r6
 8012c60:	4622      	mov	r2, r4
 8012c62:	4629      	mov	r1, r5
 8012c64:	bf28      	it	cs
 8012c66:	4632      	movcs	r2, r6
 8012c68:	f7fd f8df 	bl	800fe2a <memcpy>
 8012c6c:	4629      	mov	r1, r5
 8012c6e:	4638      	mov	r0, r7
 8012c70:	f7fd ff4a 	bl	8010b08 <_free_r>
 8012c74:	e7f1      	b.n	8012c5a <_realloc_r+0x40>

08012c76 <__ascii_wctomb>:
 8012c76:	4603      	mov	r3, r0
 8012c78:	4608      	mov	r0, r1
 8012c7a:	b141      	cbz	r1, 8012c8e <__ascii_wctomb+0x18>
 8012c7c:	2aff      	cmp	r2, #255	@ 0xff
 8012c7e:	d904      	bls.n	8012c8a <__ascii_wctomb+0x14>
 8012c80:	228a      	movs	r2, #138	@ 0x8a
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	f04f 30ff 	mov.w	r0, #4294967295
 8012c88:	4770      	bx	lr
 8012c8a:	700a      	strb	r2, [r1, #0]
 8012c8c:	2001      	movs	r0, #1
 8012c8e:	4770      	bx	lr

08012c90 <fiprintf>:
 8012c90:	b40e      	push	{r1, r2, r3}
 8012c92:	b503      	push	{r0, r1, lr}
 8012c94:	4601      	mov	r1, r0
 8012c96:	ab03      	add	r3, sp, #12
 8012c98:	4805      	ldr	r0, [pc, #20]	@ (8012cb0 <fiprintf+0x20>)
 8012c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c9e:	6800      	ldr	r0, [r0, #0]
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	f000 f83f 	bl	8012d24 <_vfiprintf_r>
 8012ca6:	b002      	add	sp, #8
 8012ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cac:	b003      	add	sp, #12
 8012cae:	4770      	bx	lr
 8012cb0:	20000060 	.word	0x20000060

08012cb4 <abort>:
 8012cb4:	b508      	push	{r3, lr}
 8012cb6:	2006      	movs	r0, #6
 8012cb8:	f000 fa08 	bl	80130cc <raise>
 8012cbc:	2001      	movs	r0, #1
 8012cbe:	f7ef fce5 	bl	800268c <_exit>

08012cc2 <_malloc_usable_size_r>:
 8012cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cc6:	1f18      	subs	r0, r3, #4
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	bfbc      	itt	lt
 8012ccc:	580b      	ldrlt	r3, [r1, r0]
 8012cce:	18c0      	addlt	r0, r0, r3
 8012cd0:	4770      	bx	lr

08012cd2 <__sfputc_r>:
 8012cd2:	6893      	ldr	r3, [r2, #8]
 8012cd4:	3b01      	subs	r3, #1
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	b410      	push	{r4}
 8012cda:	6093      	str	r3, [r2, #8]
 8012cdc:	da08      	bge.n	8012cf0 <__sfputc_r+0x1e>
 8012cde:	6994      	ldr	r4, [r2, #24]
 8012ce0:	42a3      	cmp	r3, r4
 8012ce2:	db01      	blt.n	8012ce8 <__sfputc_r+0x16>
 8012ce4:	290a      	cmp	r1, #10
 8012ce6:	d103      	bne.n	8012cf0 <__sfputc_r+0x1e>
 8012ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cec:	f000 b932 	b.w	8012f54 <__swbuf_r>
 8012cf0:	6813      	ldr	r3, [r2, #0]
 8012cf2:	1c58      	adds	r0, r3, #1
 8012cf4:	6010      	str	r0, [r2, #0]
 8012cf6:	7019      	strb	r1, [r3, #0]
 8012cf8:	4608      	mov	r0, r1
 8012cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cfe:	4770      	bx	lr

08012d00 <__sfputs_r>:
 8012d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d02:	4606      	mov	r6, r0
 8012d04:	460f      	mov	r7, r1
 8012d06:	4614      	mov	r4, r2
 8012d08:	18d5      	adds	r5, r2, r3
 8012d0a:	42ac      	cmp	r4, r5
 8012d0c:	d101      	bne.n	8012d12 <__sfputs_r+0x12>
 8012d0e:	2000      	movs	r0, #0
 8012d10:	e007      	b.n	8012d22 <__sfputs_r+0x22>
 8012d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d16:	463a      	mov	r2, r7
 8012d18:	4630      	mov	r0, r6
 8012d1a:	f7ff ffda 	bl	8012cd2 <__sfputc_r>
 8012d1e:	1c43      	adds	r3, r0, #1
 8012d20:	d1f3      	bne.n	8012d0a <__sfputs_r+0xa>
 8012d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d24 <_vfiprintf_r>:
 8012d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d28:	460d      	mov	r5, r1
 8012d2a:	b09d      	sub	sp, #116	@ 0x74
 8012d2c:	4614      	mov	r4, r2
 8012d2e:	4698      	mov	r8, r3
 8012d30:	4606      	mov	r6, r0
 8012d32:	b118      	cbz	r0, 8012d3c <_vfiprintf_r+0x18>
 8012d34:	6a03      	ldr	r3, [r0, #32]
 8012d36:	b90b      	cbnz	r3, 8012d3c <_vfiprintf_r+0x18>
 8012d38:	f7fc fed4 	bl	800fae4 <__sinit>
 8012d3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d3e:	07d9      	lsls	r1, r3, #31
 8012d40:	d405      	bmi.n	8012d4e <_vfiprintf_r+0x2a>
 8012d42:	89ab      	ldrh	r3, [r5, #12]
 8012d44:	059a      	lsls	r2, r3, #22
 8012d46:	d402      	bmi.n	8012d4e <_vfiprintf_r+0x2a>
 8012d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d4a:	f7fd f86c 	bl	800fe26 <__retarget_lock_acquire_recursive>
 8012d4e:	89ab      	ldrh	r3, [r5, #12]
 8012d50:	071b      	lsls	r3, r3, #28
 8012d52:	d501      	bpl.n	8012d58 <_vfiprintf_r+0x34>
 8012d54:	692b      	ldr	r3, [r5, #16]
 8012d56:	b99b      	cbnz	r3, 8012d80 <_vfiprintf_r+0x5c>
 8012d58:	4629      	mov	r1, r5
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f000 f938 	bl	8012fd0 <__swsetup_r>
 8012d60:	b170      	cbz	r0, 8012d80 <_vfiprintf_r+0x5c>
 8012d62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d64:	07dc      	lsls	r4, r3, #31
 8012d66:	d504      	bpl.n	8012d72 <_vfiprintf_r+0x4e>
 8012d68:	f04f 30ff 	mov.w	r0, #4294967295
 8012d6c:	b01d      	add	sp, #116	@ 0x74
 8012d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d72:	89ab      	ldrh	r3, [r5, #12]
 8012d74:	0598      	lsls	r0, r3, #22
 8012d76:	d4f7      	bmi.n	8012d68 <_vfiprintf_r+0x44>
 8012d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d7a:	f7fd f855 	bl	800fe28 <__retarget_lock_release_recursive>
 8012d7e:	e7f3      	b.n	8012d68 <_vfiprintf_r+0x44>
 8012d80:	2300      	movs	r3, #0
 8012d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d84:	2320      	movs	r3, #32
 8012d86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d8e:	2330      	movs	r3, #48	@ 0x30
 8012d90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012f40 <_vfiprintf_r+0x21c>
 8012d94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d98:	f04f 0901 	mov.w	r9, #1
 8012d9c:	4623      	mov	r3, r4
 8012d9e:	469a      	mov	sl, r3
 8012da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012da4:	b10a      	cbz	r2, 8012daa <_vfiprintf_r+0x86>
 8012da6:	2a25      	cmp	r2, #37	@ 0x25
 8012da8:	d1f9      	bne.n	8012d9e <_vfiprintf_r+0x7a>
 8012daa:	ebba 0b04 	subs.w	fp, sl, r4
 8012dae:	d00b      	beq.n	8012dc8 <_vfiprintf_r+0xa4>
 8012db0:	465b      	mov	r3, fp
 8012db2:	4622      	mov	r2, r4
 8012db4:	4629      	mov	r1, r5
 8012db6:	4630      	mov	r0, r6
 8012db8:	f7ff ffa2 	bl	8012d00 <__sfputs_r>
 8012dbc:	3001      	adds	r0, #1
 8012dbe:	f000 80a7 	beq.w	8012f10 <_vfiprintf_r+0x1ec>
 8012dc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012dc4:	445a      	add	r2, fp
 8012dc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8012dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	f000 809f 	beq.w	8012f10 <_vfiprintf_r+0x1ec>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8012dd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ddc:	f10a 0a01 	add.w	sl, sl, #1
 8012de0:	9304      	str	r3, [sp, #16]
 8012de2:	9307      	str	r3, [sp, #28]
 8012de4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012de8:	931a      	str	r3, [sp, #104]	@ 0x68
 8012dea:	4654      	mov	r4, sl
 8012dec:	2205      	movs	r2, #5
 8012dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012df2:	4853      	ldr	r0, [pc, #332]	@ (8012f40 <_vfiprintf_r+0x21c>)
 8012df4:	f7ed f9fc 	bl	80001f0 <memchr>
 8012df8:	9a04      	ldr	r2, [sp, #16]
 8012dfa:	b9d8      	cbnz	r0, 8012e34 <_vfiprintf_r+0x110>
 8012dfc:	06d1      	lsls	r1, r2, #27
 8012dfe:	bf44      	itt	mi
 8012e00:	2320      	movmi	r3, #32
 8012e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e06:	0713      	lsls	r3, r2, #28
 8012e08:	bf44      	itt	mi
 8012e0a:	232b      	movmi	r3, #43	@ 0x2b
 8012e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e10:	f89a 3000 	ldrb.w	r3, [sl]
 8012e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e16:	d015      	beq.n	8012e44 <_vfiprintf_r+0x120>
 8012e18:	9a07      	ldr	r2, [sp, #28]
 8012e1a:	4654      	mov	r4, sl
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	f04f 0c0a 	mov.w	ip, #10
 8012e22:	4621      	mov	r1, r4
 8012e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e28:	3b30      	subs	r3, #48	@ 0x30
 8012e2a:	2b09      	cmp	r3, #9
 8012e2c:	d94b      	bls.n	8012ec6 <_vfiprintf_r+0x1a2>
 8012e2e:	b1b0      	cbz	r0, 8012e5e <_vfiprintf_r+0x13a>
 8012e30:	9207      	str	r2, [sp, #28]
 8012e32:	e014      	b.n	8012e5e <_vfiprintf_r+0x13a>
 8012e34:	eba0 0308 	sub.w	r3, r0, r8
 8012e38:	fa09 f303 	lsl.w	r3, r9, r3
 8012e3c:	4313      	orrs	r3, r2
 8012e3e:	9304      	str	r3, [sp, #16]
 8012e40:	46a2      	mov	sl, r4
 8012e42:	e7d2      	b.n	8012dea <_vfiprintf_r+0xc6>
 8012e44:	9b03      	ldr	r3, [sp, #12]
 8012e46:	1d19      	adds	r1, r3, #4
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	9103      	str	r1, [sp, #12]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	bfbb      	ittet	lt
 8012e50:	425b      	neglt	r3, r3
 8012e52:	f042 0202 	orrlt.w	r2, r2, #2
 8012e56:	9307      	strge	r3, [sp, #28]
 8012e58:	9307      	strlt	r3, [sp, #28]
 8012e5a:	bfb8      	it	lt
 8012e5c:	9204      	strlt	r2, [sp, #16]
 8012e5e:	7823      	ldrb	r3, [r4, #0]
 8012e60:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e62:	d10a      	bne.n	8012e7a <_vfiprintf_r+0x156>
 8012e64:	7863      	ldrb	r3, [r4, #1]
 8012e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e68:	d132      	bne.n	8012ed0 <_vfiprintf_r+0x1ac>
 8012e6a:	9b03      	ldr	r3, [sp, #12]
 8012e6c:	1d1a      	adds	r2, r3, #4
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	9203      	str	r2, [sp, #12]
 8012e72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e76:	3402      	adds	r4, #2
 8012e78:	9305      	str	r3, [sp, #20]
 8012e7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012f50 <_vfiprintf_r+0x22c>
 8012e7e:	7821      	ldrb	r1, [r4, #0]
 8012e80:	2203      	movs	r2, #3
 8012e82:	4650      	mov	r0, sl
 8012e84:	f7ed f9b4 	bl	80001f0 <memchr>
 8012e88:	b138      	cbz	r0, 8012e9a <_vfiprintf_r+0x176>
 8012e8a:	9b04      	ldr	r3, [sp, #16]
 8012e8c:	eba0 000a 	sub.w	r0, r0, sl
 8012e90:	2240      	movs	r2, #64	@ 0x40
 8012e92:	4082      	lsls	r2, r0
 8012e94:	4313      	orrs	r3, r2
 8012e96:	3401      	adds	r4, #1
 8012e98:	9304      	str	r3, [sp, #16]
 8012e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e9e:	4829      	ldr	r0, [pc, #164]	@ (8012f44 <_vfiprintf_r+0x220>)
 8012ea0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ea4:	2206      	movs	r2, #6
 8012ea6:	f7ed f9a3 	bl	80001f0 <memchr>
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	d03f      	beq.n	8012f2e <_vfiprintf_r+0x20a>
 8012eae:	4b26      	ldr	r3, [pc, #152]	@ (8012f48 <_vfiprintf_r+0x224>)
 8012eb0:	bb1b      	cbnz	r3, 8012efa <_vfiprintf_r+0x1d6>
 8012eb2:	9b03      	ldr	r3, [sp, #12]
 8012eb4:	3307      	adds	r3, #7
 8012eb6:	f023 0307 	bic.w	r3, r3, #7
 8012eba:	3308      	adds	r3, #8
 8012ebc:	9303      	str	r3, [sp, #12]
 8012ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec0:	443b      	add	r3, r7
 8012ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ec4:	e76a      	b.n	8012d9c <_vfiprintf_r+0x78>
 8012ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012eca:	460c      	mov	r4, r1
 8012ecc:	2001      	movs	r0, #1
 8012ece:	e7a8      	b.n	8012e22 <_vfiprintf_r+0xfe>
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	3401      	adds	r4, #1
 8012ed4:	9305      	str	r3, [sp, #20]
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	f04f 0c0a 	mov.w	ip, #10
 8012edc:	4620      	mov	r0, r4
 8012ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ee2:	3a30      	subs	r2, #48	@ 0x30
 8012ee4:	2a09      	cmp	r2, #9
 8012ee6:	d903      	bls.n	8012ef0 <_vfiprintf_r+0x1cc>
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d0c6      	beq.n	8012e7a <_vfiprintf_r+0x156>
 8012eec:	9105      	str	r1, [sp, #20]
 8012eee:	e7c4      	b.n	8012e7a <_vfiprintf_r+0x156>
 8012ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	e7f0      	b.n	8012edc <_vfiprintf_r+0x1b8>
 8012efa:	ab03      	add	r3, sp, #12
 8012efc:	9300      	str	r3, [sp, #0]
 8012efe:	462a      	mov	r2, r5
 8012f00:	4b12      	ldr	r3, [pc, #72]	@ (8012f4c <_vfiprintf_r+0x228>)
 8012f02:	a904      	add	r1, sp, #16
 8012f04:	4630      	mov	r0, r6
 8012f06:	f7fb ff9d 	bl	800ee44 <_printf_float>
 8012f0a:	4607      	mov	r7, r0
 8012f0c:	1c78      	adds	r0, r7, #1
 8012f0e:	d1d6      	bne.n	8012ebe <_vfiprintf_r+0x19a>
 8012f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012f12:	07d9      	lsls	r1, r3, #31
 8012f14:	d405      	bmi.n	8012f22 <_vfiprintf_r+0x1fe>
 8012f16:	89ab      	ldrh	r3, [r5, #12]
 8012f18:	059a      	lsls	r2, r3, #22
 8012f1a:	d402      	bmi.n	8012f22 <_vfiprintf_r+0x1fe>
 8012f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012f1e:	f7fc ff83 	bl	800fe28 <__retarget_lock_release_recursive>
 8012f22:	89ab      	ldrh	r3, [r5, #12]
 8012f24:	065b      	lsls	r3, r3, #25
 8012f26:	f53f af1f 	bmi.w	8012d68 <_vfiprintf_r+0x44>
 8012f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012f2c:	e71e      	b.n	8012d6c <_vfiprintf_r+0x48>
 8012f2e:	ab03      	add	r3, sp, #12
 8012f30:	9300      	str	r3, [sp, #0]
 8012f32:	462a      	mov	r2, r5
 8012f34:	4b05      	ldr	r3, [pc, #20]	@ (8012f4c <_vfiprintf_r+0x228>)
 8012f36:	a904      	add	r1, sp, #16
 8012f38:	4630      	mov	r0, r6
 8012f3a:	f7fc fa1b 	bl	800f374 <_printf_i>
 8012f3e:	e7e4      	b.n	8012f0a <_vfiprintf_r+0x1e6>
 8012f40:	0803e1a2 	.word	0x0803e1a2
 8012f44:	0803e1ac 	.word	0x0803e1ac
 8012f48:	0800ee45 	.word	0x0800ee45
 8012f4c:	08012d01 	.word	0x08012d01
 8012f50:	0803e1a8 	.word	0x0803e1a8

08012f54 <__swbuf_r>:
 8012f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f56:	460e      	mov	r6, r1
 8012f58:	4614      	mov	r4, r2
 8012f5a:	4605      	mov	r5, r0
 8012f5c:	b118      	cbz	r0, 8012f66 <__swbuf_r+0x12>
 8012f5e:	6a03      	ldr	r3, [r0, #32]
 8012f60:	b90b      	cbnz	r3, 8012f66 <__swbuf_r+0x12>
 8012f62:	f7fc fdbf 	bl	800fae4 <__sinit>
 8012f66:	69a3      	ldr	r3, [r4, #24]
 8012f68:	60a3      	str	r3, [r4, #8]
 8012f6a:	89a3      	ldrh	r3, [r4, #12]
 8012f6c:	071a      	lsls	r2, r3, #28
 8012f6e:	d501      	bpl.n	8012f74 <__swbuf_r+0x20>
 8012f70:	6923      	ldr	r3, [r4, #16]
 8012f72:	b943      	cbnz	r3, 8012f86 <__swbuf_r+0x32>
 8012f74:	4621      	mov	r1, r4
 8012f76:	4628      	mov	r0, r5
 8012f78:	f000 f82a 	bl	8012fd0 <__swsetup_r>
 8012f7c:	b118      	cbz	r0, 8012f86 <__swbuf_r+0x32>
 8012f7e:	f04f 37ff 	mov.w	r7, #4294967295
 8012f82:	4638      	mov	r0, r7
 8012f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f86:	6823      	ldr	r3, [r4, #0]
 8012f88:	6922      	ldr	r2, [r4, #16]
 8012f8a:	1a98      	subs	r0, r3, r2
 8012f8c:	6963      	ldr	r3, [r4, #20]
 8012f8e:	b2f6      	uxtb	r6, r6
 8012f90:	4283      	cmp	r3, r0
 8012f92:	4637      	mov	r7, r6
 8012f94:	dc05      	bgt.n	8012fa2 <__swbuf_r+0x4e>
 8012f96:	4621      	mov	r1, r4
 8012f98:	4628      	mov	r0, r5
 8012f9a:	f7ff fa8f 	bl	80124bc <_fflush_r>
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	d1ed      	bne.n	8012f7e <__swbuf_r+0x2a>
 8012fa2:	68a3      	ldr	r3, [r4, #8]
 8012fa4:	3b01      	subs	r3, #1
 8012fa6:	60a3      	str	r3, [r4, #8]
 8012fa8:	6823      	ldr	r3, [r4, #0]
 8012faa:	1c5a      	adds	r2, r3, #1
 8012fac:	6022      	str	r2, [r4, #0]
 8012fae:	701e      	strb	r6, [r3, #0]
 8012fb0:	6962      	ldr	r2, [r4, #20]
 8012fb2:	1c43      	adds	r3, r0, #1
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d004      	beq.n	8012fc2 <__swbuf_r+0x6e>
 8012fb8:	89a3      	ldrh	r3, [r4, #12]
 8012fba:	07db      	lsls	r3, r3, #31
 8012fbc:	d5e1      	bpl.n	8012f82 <__swbuf_r+0x2e>
 8012fbe:	2e0a      	cmp	r6, #10
 8012fc0:	d1df      	bne.n	8012f82 <__swbuf_r+0x2e>
 8012fc2:	4621      	mov	r1, r4
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	f7ff fa79 	bl	80124bc <_fflush_r>
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d0d9      	beq.n	8012f82 <__swbuf_r+0x2e>
 8012fce:	e7d6      	b.n	8012f7e <__swbuf_r+0x2a>

08012fd0 <__swsetup_r>:
 8012fd0:	b538      	push	{r3, r4, r5, lr}
 8012fd2:	4b29      	ldr	r3, [pc, #164]	@ (8013078 <__swsetup_r+0xa8>)
 8012fd4:	4605      	mov	r5, r0
 8012fd6:	6818      	ldr	r0, [r3, #0]
 8012fd8:	460c      	mov	r4, r1
 8012fda:	b118      	cbz	r0, 8012fe4 <__swsetup_r+0x14>
 8012fdc:	6a03      	ldr	r3, [r0, #32]
 8012fde:	b90b      	cbnz	r3, 8012fe4 <__swsetup_r+0x14>
 8012fe0:	f7fc fd80 	bl	800fae4 <__sinit>
 8012fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fe8:	0719      	lsls	r1, r3, #28
 8012fea:	d422      	bmi.n	8013032 <__swsetup_r+0x62>
 8012fec:	06da      	lsls	r2, r3, #27
 8012fee:	d407      	bmi.n	8013000 <__swsetup_r+0x30>
 8012ff0:	2209      	movs	r2, #9
 8012ff2:	602a      	str	r2, [r5, #0]
 8012ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ff8:	81a3      	strh	r3, [r4, #12]
 8012ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8012ffe:	e033      	b.n	8013068 <__swsetup_r+0x98>
 8013000:	0758      	lsls	r0, r3, #29
 8013002:	d512      	bpl.n	801302a <__swsetup_r+0x5a>
 8013004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013006:	b141      	cbz	r1, 801301a <__swsetup_r+0x4a>
 8013008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801300c:	4299      	cmp	r1, r3
 801300e:	d002      	beq.n	8013016 <__swsetup_r+0x46>
 8013010:	4628      	mov	r0, r5
 8013012:	f7fd fd79 	bl	8010b08 <_free_r>
 8013016:	2300      	movs	r3, #0
 8013018:	6363      	str	r3, [r4, #52]	@ 0x34
 801301a:	89a3      	ldrh	r3, [r4, #12]
 801301c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013020:	81a3      	strh	r3, [r4, #12]
 8013022:	2300      	movs	r3, #0
 8013024:	6063      	str	r3, [r4, #4]
 8013026:	6923      	ldr	r3, [r4, #16]
 8013028:	6023      	str	r3, [r4, #0]
 801302a:	89a3      	ldrh	r3, [r4, #12]
 801302c:	f043 0308 	orr.w	r3, r3, #8
 8013030:	81a3      	strh	r3, [r4, #12]
 8013032:	6923      	ldr	r3, [r4, #16]
 8013034:	b94b      	cbnz	r3, 801304a <__swsetup_r+0x7a>
 8013036:	89a3      	ldrh	r3, [r4, #12]
 8013038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801303c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013040:	d003      	beq.n	801304a <__swsetup_r+0x7a>
 8013042:	4621      	mov	r1, r4
 8013044:	4628      	mov	r0, r5
 8013046:	f000 f883 	bl	8013150 <__smakebuf_r>
 801304a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801304e:	f013 0201 	ands.w	r2, r3, #1
 8013052:	d00a      	beq.n	801306a <__swsetup_r+0x9a>
 8013054:	2200      	movs	r2, #0
 8013056:	60a2      	str	r2, [r4, #8]
 8013058:	6962      	ldr	r2, [r4, #20]
 801305a:	4252      	negs	r2, r2
 801305c:	61a2      	str	r2, [r4, #24]
 801305e:	6922      	ldr	r2, [r4, #16]
 8013060:	b942      	cbnz	r2, 8013074 <__swsetup_r+0xa4>
 8013062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013066:	d1c5      	bne.n	8012ff4 <__swsetup_r+0x24>
 8013068:	bd38      	pop	{r3, r4, r5, pc}
 801306a:	0799      	lsls	r1, r3, #30
 801306c:	bf58      	it	pl
 801306e:	6962      	ldrpl	r2, [r4, #20]
 8013070:	60a2      	str	r2, [r4, #8]
 8013072:	e7f4      	b.n	801305e <__swsetup_r+0x8e>
 8013074:	2000      	movs	r0, #0
 8013076:	e7f7      	b.n	8013068 <__swsetup_r+0x98>
 8013078:	20000060 	.word	0x20000060

0801307c <_raise_r>:
 801307c:	291f      	cmp	r1, #31
 801307e:	b538      	push	{r3, r4, r5, lr}
 8013080:	4605      	mov	r5, r0
 8013082:	460c      	mov	r4, r1
 8013084:	d904      	bls.n	8013090 <_raise_r+0x14>
 8013086:	2316      	movs	r3, #22
 8013088:	6003      	str	r3, [r0, #0]
 801308a:	f04f 30ff 	mov.w	r0, #4294967295
 801308e:	bd38      	pop	{r3, r4, r5, pc}
 8013090:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013092:	b112      	cbz	r2, 801309a <_raise_r+0x1e>
 8013094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013098:	b94b      	cbnz	r3, 80130ae <_raise_r+0x32>
 801309a:	4628      	mov	r0, r5
 801309c:	f000 f830 	bl	8013100 <_getpid_r>
 80130a0:	4622      	mov	r2, r4
 80130a2:	4601      	mov	r1, r0
 80130a4:	4628      	mov	r0, r5
 80130a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130aa:	f000 b817 	b.w	80130dc <_kill_r>
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d00a      	beq.n	80130c8 <_raise_r+0x4c>
 80130b2:	1c59      	adds	r1, r3, #1
 80130b4:	d103      	bne.n	80130be <_raise_r+0x42>
 80130b6:	2316      	movs	r3, #22
 80130b8:	6003      	str	r3, [r0, #0]
 80130ba:	2001      	movs	r0, #1
 80130bc:	e7e7      	b.n	801308e <_raise_r+0x12>
 80130be:	2100      	movs	r1, #0
 80130c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80130c4:	4620      	mov	r0, r4
 80130c6:	4798      	blx	r3
 80130c8:	2000      	movs	r0, #0
 80130ca:	e7e0      	b.n	801308e <_raise_r+0x12>

080130cc <raise>:
 80130cc:	4b02      	ldr	r3, [pc, #8]	@ (80130d8 <raise+0xc>)
 80130ce:	4601      	mov	r1, r0
 80130d0:	6818      	ldr	r0, [r3, #0]
 80130d2:	f7ff bfd3 	b.w	801307c <_raise_r>
 80130d6:	bf00      	nop
 80130d8:	20000060 	.word	0x20000060

080130dc <_kill_r>:
 80130dc:	b538      	push	{r3, r4, r5, lr}
 80130de:	4d07      	ldr	r5, [pc, #28]	@ (80130fc <_kill_r+0x20>)
 80130e0:	2300      	movs	r3, #0
 80130e2:	4604      	mov	r4, r0
 80130e4:	4608      	mov	r0, r1
 80130e6:	4611      	mov	r1, r2
 80130e8:	602b      	str	r3, [r5, #0]
 80130ea:	f7ef fabf 	bl	800266c <_kill>
 80130ee:	1c43      	adds	r3, r0, #1
 80130f0:	d102      	bne.n	80130f8 <_kill_r+0x1c>
 80130f2:	682b      	ldr	r3, [r5, #0]
 80130f4:	b103      	cbz	r3, 80130f8 <_kill_r+0x1c>
 80130f6:	6023      	str	r3, [r4, #0]
 80130f8:	bd38      	pop	{r3, r4, r5, pc}
 80130fa:	bf00      	nop
 80130fc:	2000138c 	.word	0x2000138c

08013100 <_getpid_r>:
 8013100:	f7ef baac 	b.w	800265c <_getpid>

08013104 <__swhatbuf_r>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	460c      	mov	r4, r1
 8013108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801310c:	2900      	cmp	r1, #0
 801310e:	b096      	sub	sp, #88	@ 0x58
 8013110:	4615      	mov	r5, r2
 8013112:	461e      	mov	r6, r3
 8013114:	da0d      	bge.n	8013132 <__swhatbuf_r+0x2e>
 8013116:	89a3      	ldrh	r3, [r4, #12]
 8013118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801311c:	f04f 0100 	mov.w	r1, #0
 8013120:	bf14      	ite	ne
 8013122:	2340      	movne	r3, #64	@ 0x40
 8013124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013128:	2000      	movs	r0, #0
 801312a:	6031      	str	r1, [r6, #0]
 801312c:	602b      	str	r3, [r5, #0]
 801312e:	b016      	add	sp, #88	@ 0x58
 8013130:	bd70      	pop	{r4, r5, r6, pc}
 8013132:	466a      	mov	r2, sp
 8013134:	f000 f848 	bl	80131c8 <_fstat_r>
 8013138:	2800      	cmp	r0, #0
 801313a:	dbec      	blt.n	8013116 <__swhatbuf_r+0x12>
 801313c:	9901      	ldr	r1, [sp, #4]
 801313e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013146:	4259      	negs	r1, r3
 8013148:	4159      	adcs	r1, r3
 801314a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801314e:	e7eb      	b.n	8013128 <__swhatbuf_r+0x24>

08013150 <__smakebuf_r>:
 8013150:	898b      	ldrh	r3, [r1, #12]
 8013152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013154:	079d      	lsls	r5, r3, #30
 8013156:	4606      	mov	r6, r0
 8013158:	460c      	mov	r4, r1
 801315a:	d507      	bpl.n	801316c <__smakebuf_r+0x1c>
 801315c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013160:	6023      	str	r3, [r4, #0]
 8013162:	6123      	str	r3, [r4, #16]
 8013164:	2301      	movs	r3, #1
 8013166:	6163      	str	r3, [r4, #20]
 8013168:	b003      	add	sp, #12
 801316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801316c:	ab01      	add	r3, sp, #4
 801316e:	466a      	mov	r2, sp
 8013170:	f7ff ffc8 	bl	8013104 <__swhatbuf_r>
 8013174:	9f00      	ldr	r7, [sp, #0]
 8013176:	4605      	mov	r5, r0
 8013178:	4639      	mov	r1, r7
 801317a:	4630      	mov	r0, r6
 801317c:	f7fb fcb0 	bl	800eae0 <_malloc_r>
 8013180:	b948      	cbnz	r0, 8013196 <__smakebuf_r+0x46>
 8013182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013186:	059a      	lsls	r2, r3, #22
 8013188:	d4ee      	bmi.n	8013168 <__smakebuf_r+0x18>
 801318a:	f023 0303 	bic.w	r3, r3, #3
 801318e:	f043 0302 	orr.w	r3, r3, #2
 8013192:	81a3      	strh	r3, [r4, #12]
 8013194:	e7e2      	b.n	801315c <__smakebuf_r+0xc>
 8013196:	89a3      	ldrh	r3, [r4, #12]
 8013198:	6020      	str	r0, [r4, #0]
 801319a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801319e:	81a3      	strh	r3, [r4, #12]
 80131a0:	9b01      	ldr	r3, [sp, #4]
 80131a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80131a6:	b15b      	cbz	r3, 80131c0 <__smakebuf_r+0x70>
 80131a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131ac:	4630      	mov	r0, r6
 80131ae:	f000 f81d 	bl	80131ec <_isatty_r>
 80131b2:	b128      	cbz	r0, 80131c0 <__smakebuf_r+0x70>
 80131b4:	89a3      	ldrh	r3, [r4, #12]
 80131b6:	f023 0303 	bic.w	r3, r3, #3
 80131ba:	f043 0301 	orr.w	r3, r3, #1
 80131be:	81a3      	strh	r3, [r4, #12]
 80131c0:	89a3      	ldrh	r3, [r4, #12]
 80131c2:	431d      	orrs	r5, r3
 80131c4:	81a5      	strh	r5, [r4, #12]
 80131c6:	e7cf      	b.n	8013168 <__smakebuf_r+0x18>

080131c8 <_fstat_r>:
 80131c8:	b538      	push	{r3, r4, r5, lr}
 80131ca:	4d07      	ldr	r5, [pc, #28]	@ (80131e8 <_fstat_r+0x20>)
 80131cc:	2300      	movs	r3, #0
 80131ce:	4604      	mov	r4, r0
 80131d0:	4608      	mov	r0, r1
 80131d2:	4611      	mov	r1, r2
 80131d4:	602b      	str	r3, [r5, #0]
 80131d6:	f7ef fa8d 	bl	80026f4 <_fstat>
 80131da:	1c43      	adds	r3, r0, #1
 80131dc:	d102      	bne.n	80131e4 <_fstat_r+0x1c>
 80131de:	682b      	ldr	r3, [r5, #0]
 80131e0:	b103      	cbz	r3, 80131e4 <_fstat_r+0x1c>
 80131e2:	6023      	str	r3, [r4, #0]
 80131e4:	bd38      	pop	{r3, r4, r5, pc}
 80131e6:	bf00      	nop
 80131e8:	2000138c 	.word	0x2000138c

080131ec <_isatty_r>:
 80131ec:	b538      	push	{r3, r4, r5, lr}
 80131ee:	4d06      	ldr	r5, [pc, #24]	@ (8013208 <_isatty_r+0x1c>)
 80131f0:	2300      	movs	r3, #0
 80131f2:	4604      	mov	r4, r0
 80131f4:	4608      	mov	r0, r1
 80131f6:	602b      	str	r3, [r5, #0]
 80131f8:	f7ef fa8c 	bl	8002714 <_isatty>
 80131fc:	1c43      	adds	r3, r0, #1
 80131fe:	d102      	bne.n	8013206 <_isatty_r+0x1a>
 8013200:	682b      	ldr	r3, [r5, #0]
 8013202:	b103      	cbz	r3, 8013206 <_isatty_r+0x1a>
 8013204:	6023      	str	r3, [r4, #0]
 8013206:	bd38      	pop	{r3, r4, r5, pc}
 8013208:	2000138c 	.word	0x2000138c

0801320c <_init>:
 801320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801320e:	bf00      	nop
 8013210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013212:	bc08      	pop	{r3}
 8013214:	469e      	mov	lr, r3
 8013216:	4770      	bx	lr

08013218 <_fini>:
 8013218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801321a:	bf00      	nop
 801321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801321e:	bc08      	pop	{r3}
 8013220:	469e      	mov	lr, r3
 8013222:	4770      	bx	lr
