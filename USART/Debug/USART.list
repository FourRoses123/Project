
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013118  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b2a8  080132a8  080132a8  000142a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803e550  0803e550  00040274  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803e550  0803e550  0003f550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803e558  0803e558  00040274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803e558  0803e558  0003f558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803e55c  0803e55c  0003f55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  0803e560  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b34  20000278  0803e7d4  00040278  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  20002dac  0803e7d4  00040dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc64  00000000  00000000  000402a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000463c  00000000  00000000  0005df08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00062548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001338  00000000  00000000  00063de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c4f  00000000  00000000  00065118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026857  00000000  00000000  0008ed67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddf1b  00000000  00000000  000b55be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001934d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008024  00000000  00000000  0019351c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0019b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013290 	.word	0x08013290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	08013290 	.word	0x08013290

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a25      	ldr	r2, [pc, #148]	@ (80010e0 <MX_DMA_Init+0xa0>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6493      	str	r3, [r2, #72]	@ 0x48
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_DMA_Init+0xa0>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2101      	movs	r1, #1
 800107a:	200c      	movs	r0, #12
 800107c:	f002 fe79 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001080:	200c      	movs	r0, #12
 8001082:	f002 fe92 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 1, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	200d      	movs	r0, #13
 800108c:	f002 fe71 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001090:	200d      	movs	r0, #13
 8001092:	f002 fe8a 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2101      	movs	r1, #1
 800109a:	200e      	movs	r0, #14
 800109c:	f002 fe69 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f002 fe82 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2101      	movs	r1, #1
 80010aa:	200f      	movs	r0, #15
 80010ac:	f002 fe61 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010b0:	200f      	movs	r0, #15
 80010b2:	f002 fe7a 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 1, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	2044      	movs	r0, #68	@ 0x44
 80010bc:	f002 fe59 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80010c0:	2044      	movs	r0, #68	@ 0x44
 80010c2:	f002 fe72 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 1, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	2045      	movs	r0, #69	@ 0x45
 80010cc:	f002 fe51 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80010d0:	2045      	movs	r0, #69	@ 0x45
 80010d2:	f002 fe6a 	bl	8003daa <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <MX_GPIO_Init+0x11c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a40      	ldr	r2, [pc, #256]	@ (8001200 <MX_GPIO_Init+0x11c>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b3e      	ldr	r3, [pc, #248]	@ (8001200 <MX_GPIO_Init+0x11c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <MX_GPIO_Init+0x11c>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a3a      	ldr	r2, [pc, #232]	@ (8001200 <MX_GPIO_Init+0x11c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <MX_GPIO_Init+0x11c>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b35      	ldr	r3, [pc, #212]	@ (8001200 <MX_GPIO_Init+0x11c>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a34      	ldr	r2, [pc, #208]	@ (8001200 <MX_GPIO_Init+0x11c>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <MX_GPIO_Init+0x11c>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2103      	movs	r1, #3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f003 fa69 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2110      	movs	r1, #16
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f003 fa63 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f241 0101 	movw	r1, #4097	@ 0x1001
 8001160:	4828      	ldr	r0, [pc, #160]	@ (8001204 <MX_GPIO_Init+0x120>)
 8001162:	f003 fa5d 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin ASIC_RST_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|ASIC_RST_Pin;
 8001166:	2313      	movs	r3, #19
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f003 f8bc 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8001184:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4819      	ldr	r0, [pc, #100]	@ (8001204 <MX_GPIO_Init+0x120>)
 800119e:	f003 f8ad 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : AFULL_Pin EMPTY_Pin */
  GPIO_InitStruct.Pin = AFULL_Pin|EMPTY_Pin;
 80011a2:	2306      	movs	r3, #6
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4813      	ldr	r0, [pc, #76]	@ (8001204 <MX_GPIO_Init+0x120>)
 80011b6:	f003 f8a1 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin S3_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S3_Pin;
 80011ba:	f640 4308 	movw	r3, #3080	@ 0xc08
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	480d      	ldr	r0, [pc, #52]	@ (8001204 <MX_GPIO_Init+0x120>)
 80011d0:	f003 f894 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 80011d4:	2310      	movs	r3, #16
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011de:	2302      	movs	r3, #2
 80011e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_GPIO_Init+0x120>)
 80011ea:	f003 f887 	bl	80042fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	200a      	movs	r0, #10
 80011f4:	f002 fdbd 	bl	8003d72 <HAL_NVIC_SetPriority>

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400

08001208 <main>:
volatile uint8_t origin = 1;
volatile uint64_t last_trigger_time = 0;
volatile uint32_t timer_ms_count = 0;

int main(void)
{
 8001208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800120c:	b095      	sub	sp, #84	@ 0x54
 800120e:	af02      	add	r7, sp, #8
  HAL_Init();
 8001210:	f002 fc3b 	bl	8003a8a <HAL_Init>
  SystemClock_Config();
 8001214:	f000 f96e 	bl	80014f4 <SystemClock_Config>
  MX_GPIO_Init();
 8001218:	f7ff ff64 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800121c:	f7ff ff10 	bl	8001040 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001220:	f001 fc7c 	bl	8002b1c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001224:	f000 ffaa 	bl	800217c <MX_SPI2_Init>
  MX_FATFS_Init();
 8001228:	f007 fa26 	bl	8008678 <MX_FATFS_Init>
  MX_SPI1_Init();
 800122c:	f000 ff68 	bl	8002100 <MX_SPI1_Init>
  MX_TIM6_Init();
 8001230:	f001 fbaa 	bl	8002988 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001234:	f001 fb5a 	bl	80028ec <MX_TIM2_Init>
  MX_TIM7_Init();
 8001238:	f001 fbde 	bl	80029f8 <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800123c:	4869      	ldr	r0, [pc, #420]	@ (80013e4 <main+0x1dc>)
 800123e:	f005 f9af 	bl	80065a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001242:	4869      	ldr	r0, [pc, #420]	@ (80013e8 <main+0x1e0>)
 8001244:	f005 f9ac 	bl	80065a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001248:	4868      	ldr	r0, [pc, #416]	@ (80013ec <main+0x1e4>)
 800124a:	f005 f9a9 	bl	80065a0 <HAL_TIM_Base_Start_IT>
  UART_Queue_Init();
 800124e:	f002 faf5 	bl	800383c <UART_Queue_Init>
  if(SD_Init() == SD_OK)
 8001252:	f000 fa3d 	bl	80016d0 <SD_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d13a      	bne.n	80012d2 <main+0xca>
  {
	res=f_mount(&fs,"0:",1);
 800125c:	2201      	movs	r2, #1
 800125e:	4964      	ldr	r1, [pc, #400]	@ (80013f0 <main+0x1e8>)
 8001260:	4864      	ldr	r0, [pc, #400]	@ (80013f4 <main+0x1ec>)
 8001262:	f00a ffaf 	bl	800c1c4 <f_mount>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b63      	ldr	r3, [pc, #396]	@ (80013f8 <main+0x1f0>)
 800126c:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 800126e:	4b62      	ldr	r3, [pc, #392]	@ (80013f8 <main+0x1f0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <main+0x72>
		Error_Handler();
 8001276:	f000 f98c 	bl	8001592 <Error_Handler>
	if(file_exists(CONFIG_FILE) != FR_OK)
 800127a:	4b60      	ldr	r3, [pc, #384]	@ (80013fc <main+0x1f4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fce1 	bl	8001c46 <file_exists>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <main+0x86>
		create_default_config();
 800128a:	f000 fecd 	bl	8002028 <create_default_config>
	int log_num = get_next_log_number();
 800128e:	f000 fcf3 	bl	8001c78 <get_next_log_number>
 8001292:	6478      	str	r0, [r7, #68]	@ 0x44
	snprintf(current_log_file, sizeof(current_log_file), "%s%05d.txt", LOG_PREFIX, log_num);
 8001294:	4b5a      	ldr	r3, [pc, #360]	@ (8001400 <main+0x1f8>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	4a59      	ldr	r2, [pc, #356]	@ (8001404 <main+0x1fc>)
 80012a0:	2114      	movs	r1, #20
 80012a2:	4859      	ldr	r0, [pc, #356]	@ (8001408 <main+0x200>)
 80012a4:	f00d fa84 	bl	800e7b0 <sniprintf>
	if(f_open(&fil, current_log_file, FA_CREATE_NEW | FA_WRITE) == FR_OK)
 80012a8:	2206      	movs	r2, #6
 80012aa:	4957      	ldr	r1, [pc, #348]	@ (8001408 <main+0x200>)
 80012ac:	4857      	ldr	r0, [pc, #348]	@ (800140c <main+0x204>)
 80012ae:	f00a ffcf 	bl	800c250 <f_open>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <main+0xb6>
		open = 1;
 80012b8:	4b55      	ldr	r3, [pc, #340]	@ (8001410 <main+0x208>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
	current_config = load_and_apply_config();
 80012be:	4e55      	ldr	r6, [pc, #340]	@ (8001414 <main+0x20c>)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fedc 	bl	8002080 <load_and_apply_config>
 80012c8:	4633      	mov	r3, r6
 80012ca:	463a      	mov	r2, r7
 80012cc:	6810      	ldr	r0, [r2, #0]
 80012ce:	6851      	ldr	r1, [r2, #4]
 80012d0:	c303      	stmia	r3!, {r0, r1}
  }
  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 80012d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012d6:	4950      	ldr	r1, [pc, #320]	@ (8001418 <main+0x210>)
 80012d8:	4850      	ldr	r0, [pc, #320]	@ (800141c <main+0x214>)
 80012da:	f005 febf 	bl	800705c <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80012de:	4b4f      	ldr	r3, [pc, #316]	@ (800141c <main+0x214>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b4d      	ldr	r3, [pc, #308]	@ (800141c <main+0x214>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0210 	orr.w	r2, r2, #16
 80012ec:	601a      	str	r2, [r3, #0]
  ASIC_CMD(0x01, 250);
 80012ee:	21fa      	movs	r1, #250	@ 0xfa
 80012f0:	2001      	movs	r0, #1
 80012f2:	f001 fd19 	bl	8002d28 <ASIC_CMD>
  receivercode = 0x0001;
 80012f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <main+0x218>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	801a      	strh	r2, [r3, #0]
  ON_G();
 80012fc:	2201      	movs	r2, #1
 80012fe:	2102      	movs	r1, #2
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f003 f98c 	bl	8004620 <HAL_GPIO_WritePin>

  while (1)
  {
	  if(data_ready)
 8001308:	4b46      	ldr	r3, [pc, #280]	@ (8001424 <main+0x21c>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d042      	beq.n	8001398 <main+0x190>
	  {
		  time_t receive_time = get_current_systick();
 8001312:	f001 fe75 	bl	8003000 <get_current_systick>
 8001316:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
		  uint8_t time[14];
		  Timing_Status res = GPS_message_process(time);
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4618      	mov	r0, r3
 8001320:	f002 f84c 	bl	80033bc <GPS_message_process>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		  if(origin == 1 && res == Timing_OK)
 800132a:	4b3f      	ldr	r3, [pc, #252]	@ (8001428 <main+0x220>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d133      	bne.n	800139c <main+0x194>
 8001334:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001338:	2b00      	cmp	r3, #0
 800133a:	d12f      	bne.n	800139c <main+0x194>
		  {
			  Toggle_R();
 800133c:	2101      	movs	r1, #1
 800133e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001342:	f003 f985 	bl	8004650 <HAL_GPIO_TogglePin>
			  time_t GPStime = standard_to_stamp(time);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4618      	mov	r0, r3
 800134c:	f002 f9a4 	bl	8003698 <standard_to_stamp>
 8001350:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
			  time_t process_time = get_current_systick();
 8001354:	f001 fe54 	bl	8003000 <get_current_systick>
 8001358:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  time_t timestamp = GPStime + process_time - receive_time;
 800135c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001360:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001364:	1884      	adds	r4, r0, r2
 8001366:	eb41 0503 	adc.w	r5, r1, r3
 800136a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800136e:	ebb4 0802 	subs.w	r8, r4, r2
 8001372:	eb65 0903 	sbc.w	r9, r5, r3
 8001376:	e9c7 8906 	strd	r8, r9, [r7, #24]
			  set_base_time(timestamp);
 800137a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800137e:	f001 fe75 	bl	800306c <set_base_time>
			  HAL_Delay(1000);
 8001382:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001386:	f002 fbf5 	bl	8003b74 <HAL_Delay>
			  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800138a:	200a      	movs	r0, #10
 800138c:	f002 fd0d 	bl	8003daa <HAL_NVIC_EnableIRQ>
			  origin = 0;
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <main+0x220>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e001      	b.n	800139c <main+0x194>
		  }
	  }
	  else
		  maintain_processing_buffer();
 8001398:	f001 ffd2 	bl	8003340 <maintain_processing_buffer>
	  if(sampling_ready == 1)
 800139c:	4b23      	ldr	r3, [pc, #140]	@ (800142c <main+0x224>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d1b0      	bne.n	8001308 <main+0x100>
	  {
	  	  delay_ms_non_blocking(500);
 80013a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013aa:	f000 f869 	bl	8001480 <delay_ms_non_blocking>
		  if(ReadResult() == HAL_OK)
 80013ae:	f001 fcef 	bl	8002d90 <ReadResult>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1a7      	bne.n	8001308 <main+0x100>
		  {
			  Send_Data();
 80013b8:	f001 ff10 	bl	80031dc <Send_Data>
			  if(open == 1)
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <main+0x208>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d1a0      	bne.n	8001308 <main+0x100>
			  {
				  if(f_write(&fil, datatx, transmitlength, &bw) == FR_OK)
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <main+0x228>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <main+0x22c>)
 80013ce:	491a      	ldr	r1, [pc, #104]	@ (8001438 <main+0x230>)
 80013d0:	480e      	ldr	r0, [pc, #56]	@ (800140c <main+0x204>)
 80013d2:	f00b fb8f 	bl	800caf4 <f_write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d195      	bne.n	8001308 <main+0x100>
				  	  f_sync(&fil);
 80013dc:	480b      	ldr	r0, [pc, #44]	@ (800140c <main+0x204>)
 80013de:	f00b fd3d 	bl	800ce5c <f_sync>
	  if(data_ready)
 80013e2:	e791      	b.n	8001308 <main+0x100>
 80013e4:	20001148 	.word	0x20001148
 80013e8:	20001194 	.word	0x20001194
 80013ec:	200011e0 	.word	0x200011e0
 80013f0:	080132a8 	.word	0x080132a8
 80013f4:	20000a98 	.word	0x20000a98
 80013f8:	20000f2c 	.word	0x20000f2c
 80013fc:	20000004 	.word	0x20000004
 8001400:	20000008 	.word	0x20000008
 8001404:	080132ac 	.word	0x080132ac
 8001408:	20000f44 	.word	0x20000f44
 800140c:	20000cd0 	.word	0x20000cd0
 8001410:	20000f38 	.word	0x20000f38
 8001414:	20000f30 	.word	0x20000f30
 8001418:	20000294 	.word	0x20000294
 800141c:	2000122c 	.word	0x2000122c
 8001420:	2000002a 	.word	0x2000002a
 8001424:	20000a96 	.word	0x20000a96
 8001428:	20000000 	.word	0x20000000
 800142c:	2000002c 	.word	0x2000002c
 8001430:	2000002e 	.word	0x2000002e
 8001434:	20000f28 	.word	0x20000f28
 8001438:	20001b8c 	.word	0x20001b8c

0800143c <HAL_GPIO_EXTI_Callback>:
	  }
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == PPS_Pin)
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	2b10      	cmp	r3, #16
 800144a:	d110      	bne.n	800146e <HAL_GPIO_EXTI_Callback+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
	{
		__disable_irq();
		time_t timestamp = base_timestamp + 0xf4240;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	4909      	ldr	r1, [pc, #36]	@ (800147c <HAL_GPIO_EXTI_Callback+0x40>)
 8001458:	1854      	adds	r4, r2, r1
 800145a:	f143 0500 	adc.w	r5, r3, #0
 800145e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		set_base_time(timestamp);
 8001462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001466:	f001 fe01 	bl	800306c <set_base_time>
  __ASM volatile ("cpsie i" : : : "memory");
 800146a:	b662      	cpsie	i
}
 800146c:	bf00      	nop
		__enable_irq();
	}
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bdb0      	pop	{r4, r5, r7, pc}
 8001476:	bf00      	nop
 8001478:	20001b78 	.word	0x20001b78
 800147c:	000f4240 	.word	0x000f4240

08001480 <delay_ms_non_blocking>:

void delay_ms_non_blocking(uint32_t ms)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Stop_IT(&htim7);
 8001488:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <delay_ms_non_blocking+0x44>)
 800148a:	f005 f8dd 	bl	8006648 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_SET_COUNTER(&htim7, 0);
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <delay_ms_non_blocking+0x44>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <delay_ms_non_blocking+0x44>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f06f 0201 	mvn.w	r2, #1
 800149e:	611a      	str	r2, [r3, #16]
    timer_ms_count = ms;
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <delay_ms_non_blocking+0x48>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start_IT(&htim7);
 80014a6:	4807      	ldr	r0, [pc, #28]	@ (80014c4 <delay_ms_non_blocking+0x44>)
 80014a8:	f005 f87a 	bl	80065a0 <HAL_TIM_Base_Start_IT>
    while (timer_ms_count > 0)
 80014ac:	e000      	b.n	80014b0 <delay_ms_non_blocking+0x30>
    {
		__WFI();
 80014ae:	bf30      	wfi
    while (timer_ms_count > 0)
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <delay_ms_non_blocking+0x48>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1fa      	bne.n	80014ae <delay_ms_non_blocking+0x2e>
    }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200011e0 	.word	0x200011e0
 80014c8:	20000f3c 	.word	0x20000f3c

080014cc <_write>:

int _write(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 50);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	2332      	movs	r3, #50	@ 0x32
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <_write+0x24>)
 80014e2:	f005 fcb5 	bl	8006e50 <HAL_UART_Transmit>
    return len;
 80014e6:	687b      	ldr	r3, [r7, #4]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000122c 	.word	0x2000122c

080014f4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	@ 0x58
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2244      	movs	r2, #68	@ 0x44
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00d fa0b 	bl	800e91e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001516:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800151a:	f003 f8d9 	bl	80046d0 <HAL_PWREx_ControlVoltageScaling>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001524:	f000 f835 	bl	8001592 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800152c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001532:	2302      	movs	r3, #2
 8001534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001536:	2303      	movs	r3, #3
 8001538:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800153e:	2314      	movs	r3, #20
 8001540:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001542:	2307      	movs	r3, #7
 8001544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800154a:	2302      	movs	r3, #2
 800154c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4618      	mov	r0, r3
 8001554:	f003 f912 	bl	800477c <HAL_RCC_OscConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800155e:	f000 f818 	bl	8001592 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001562:	230f      	movs	r3, #15
 8001564:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001566:	2303      	movs	r3, #3
 8001568:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	2104      	movs	r1, #4
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fd12 	bl	8004fa4 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001586:	f000 f804 	bl	8001592 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3758      	adds	r7, #88	@ 0x58
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <Error_Handler>:

void Error_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001596:	b672      	cpsid	i
}
 8001598:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  SHINE_R();
 800159a:	f000 f806 	bl	80015aa <SHINE_R>
	  HAL_Delay(1000);
 800159e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015a2:	f002 fae7 	bl	8003b74 <HAL_Delay>
	  SHINE_R();
 80015a6:	bf00      	nop
 80015a8:	e7f7      	b.n	800159a <Error_Handler+0x8>

080015aa <SHINE_R>:
const char *LOG_PREFIX = "log";
char current_log_file[20];
static int cached_max_log_num = -1;

void SHINE_R(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80015ae:	2101      	movs	r1, #1
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f003 f84c 	bl	8004650 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80015b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015bc:	f002 fada 	bl	8003b74 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80015c0:	2101      	movs	r1, #1
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c6:	f003 f843 	bl	8004650 <HAL_GPIO_TogglePin>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <SPI_TransmitReceive>:
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}

uint8_t SPI_TransmitReceive(uint8_t data) //发送接收函数封装
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1 ,100);
 80015da:	f107 020f 	add.w	r2, r7, #15
 80015de:	1df9      	adds	r1, r7, #7
 80015e0:	2364      	movs	r3, #100	@ 0x64
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2301      	movs	r3, #1
 80015e6:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <SPI_TransmitReceive+0x28>)
 80015e8:	f004 fadf 	bl	8005baa <HAL_SPI_TransmitReceive>
    return rx_data;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000fbc 	.word	0x20000fbc

080015fc <SD_PowerOnSeq>:

void SD_PowerOnSeq(void) //80个时钟周期
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8001602:	2201      	movs	r2, #1
 8001604:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <SD_PowerOnSeq+0x34>)
 800160a:	f003 f809 	bl	8004620 <HAL_GPIO_WritePin>
    for(uint8_t i=0; i<10; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e005      	b.n	8001620 <SD_PowerOnSeq+0x24>
    {
        SPI_TransmitReceive(0xFF);
 8001614:	20ff      	movs	r0, #255	@ 0xff
 8001616:	f7ff ffdb 	bl	80015d0 <SPI_TransmitReceive>
    for(uint8_t i=0; i<10; i++)
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	3301      	adds	r3, #1
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2b09      	cmp	r3, #9
 8001624:	d9f6      	bls.n	8001614 <SD_PowerOnSeq+0x18>
    }
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	48000400 	.word	0x48000400

08001634 <SD_SendCmd>:

uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)  //发送cmd命令，arg参数及crc校准
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	4613      	mov	r3, r2
 8001642:	71bb      	strb	r3, [r7, #6]
	uint8_t retry = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
	uint8_t response;
	do{
		retry=SPI_TransmitReceive(0xFF);
 8001648:	20ff      	movs	r0, #255	@ 0xff
 800164a:	f7ff ffc1 	bl	80015d0 <SPI_TransmitReceive>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
	}while(retry!=0xFF);  //这段如果不加，发送CMD8返回值会错误
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2bff      	cmp	r3, #255	@ 0xff
 8001656:	d1f7      	bne.n	8001648 <SD_SendCmd+0x14>

    SPI_TransmitReceive(0x40 | cmd);
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ffb5 	bl	80015d0 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 24) & 0xFF);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	0e1b      	lsrs	r3, r3, #24
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ffaf 	bl	80015d0 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 16) & 0xFF);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ffa9 	bl	80015d0 <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 8)  & 0xFF);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ffa3 	bl	80015d0 <SPI_TransmitReceive>
    SPI_TransmitReceive(arg & 0xFF);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff9e 	bl	80015d0 <SPI_TransmitReceive>
    SPI_TransmitReceive(crc | 0x01);
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff97 	bl	80015d0 <SPI_TransmitReceive>
    retry = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]

	do {
	response = SPI_TransmitReceive(0xFF);
 80016a6:	20ff      	movs	r0, #255	@ 0xff
 80016a8:	f7ff ff92 	bl	80015d0 <SPI_TransmitReceive>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73bb      	strb	r3, [r7, #14]
	retry++;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	3301      	adds	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
	} while ((response & 0x80) && (retry < 0xFF));
 80016b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da02      	bge.n	80016c4 <SD_SendCmd+0x90>
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2bff      	cmp	r3, #255	@ 0xff
 80016c2:	d1f0      	bne.n	80016a6 <SD_SendCmd+0x72>
	return response;
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <SD_Init>:

SD_Status SD_Init(void) //SD卡初始化
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
	uint8_t r1;
	uint8_t buff[6] = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	809a      	strh	r2, [r3, #4]
	uint16_t retry;
	uint8_t i;

	SD_PowerOnSeq();
 80016de:	f7ff ff8d 	bl	80015fc <SD_PowerOnSeq>
	SD_CS_LOW();
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e8:	487a      	ldr	r0, [pc, #488]	@ (80018d4 <SD_Init+0x204>)
 80016ea:	f002 ff99 	bl	8004620 <HAL_GPIO_WritePin>

	retry = 100; // 设置超时值
 80016ee:	2364      	movs	r3, #100	@ 0x64
 80016f0:	81fb      	strh	r3, [r7, #14]
	do {
	    r1 = SD_SendCmd(CMD0, 0, 0x95);
 80016f2:	2295      	movs	r2, #149	@ 0x95
 80016f4:	2100      	movs	r1, #0
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff ff9c 	bl	8001634 <SD_SendCmd>
 80016fc:	4603      	mov	r3, r0
 80016fe:	733b      	strb	r3, [r7, #12]
	    retry--;
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	3b01      	subs	r3, #1
 8001704:	81fb      	strh	r3, [r7, #14]
	} while (r1 != 0x01 && retry > 0);
 8001706:	7b3b      	ldrb	r3, [r7, #12]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d002      	beq.n	8001712 <SD_Init+0x42>
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1ef      	bne.n	80016f2 <SD_Init+0x22>

	if (retry == 0)
 8001712:	89fb      	ldrh	r3, [r7, #14]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <SD_Init+0x58>
	{
	    SD_CS_HIGH();
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800171e:	486d      	ldr	r0, [pc, #436]	@ (80018d4 <SD_Init+0x204>)
 8001720:	f002 ff7e 	bl	8004620 <HAL_GPIO_WritePin>
	    return SD_ERROR; // 超时返回错误
 8001724:	2301      	movs	r3, #1
 8001726:	e0d0      	b.n	80018ca <SD_Init+0x1fa>
	}

	SD_TYPE=0;
 8001728:	4b6b      	ldr	r3, [pc, #428]	@ (80018d8 <SD_Init+0x208>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
	r1 = SD_SendCmd(CMD8, 0x1AA, 0x87);
 800172e:	2287      	movs	r2, #135	@ 0x87
 8001730:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001734:	2008      	movs	r0, #8
 8001736:	f7ff ff7d 	bl	8001634 <SD_SendCmd>
 800173a:	4603      	mov	r3, r0
 800173c:	733b      	strb	r3, [r7, #12]
	if(r1==0x01)
 800173e:	7b3b      	ldrb	r3, [r7, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d161      	bne.n	8001808 <SD_Init+0x138>
	{
		for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0xFF);
 8001744:	2300      	movs	r3, #0
 8001746:	737b      	strb	r3, [r7, #13]
 8001748:	e00d      	b.n	8001766 <SD_Init+0x96>
 800174a:	7b7c      	ldrb	r4, [r7, #13]
 800174c:	20ff      	movs	r0, #255	@ 0xff
 800174e:	f7ff ff3f 	bl	80015d0 <SPI_TransmitReceive>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	f104 0310 	add.w	r3, r4, #16
 800175a:	443b      	add	r3, r7
 800175c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001760:	7b7b      	ldrb	r3, [r7, #13]
 8001762:	3301      	adds	r3, #1
 8001764:	737b      	strb	r3, [r7, #13]
 8001766:	7b7b      	ldrb	r3, [r7, #13]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d9ee      	bls.n	800174a <SD_Init+0x7a>
		if(buff[2]==0X01&&buff[3]==0XAA)
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b01      	cmp	r3, #1
 8001770:	f040 8098 	bne.w	80018a4 <SD_Init+0x1d4>
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2baa      	cmp	r3, #170	@ 0xaa
 8001778:	f040 8094 	bne.w	80018a4 <SD_Init+0x1d4>
		{
			retry=0XFFFE;
 800177c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001780:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2037      	movs	r0, #55	@ 0x37
 8001788:	f7ff ff54 	bl	8001634 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0x40000000,0);
 800178c:	2200      	movs	r2, #0
 800178e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001792:	2029      	movs	r0, #41	@ 0x29
 8001794:	f7ff ff4e 	bl	8001634 <SD_SendCmd>
 8001798:	4603      	mov	r3, r0
 800179a:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 800179c:	7b3b      	ldrb	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <SD_Init+0xdc>
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	1e5a      	subs	r2, r3, #1
 80017a6:	81fa      	strh	r2, [r7, #14]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ea      	bne.n	8001782 <SD_Init+0xb2>
			r1=SD_SendCmd(CMD58,0,0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	203a      	movs	r0, #58	@ 0x3a
 80017b2:	f7ff ff3f 	bl	8001634 <SD_SendCmd>
 80017b6:	4603      	mov	r3, r0
 80017b8:	733b      	strb	r3, [r7, #12]
			if(retry&&r1==0)
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d071      	beq.n	80018a4 <SD_Init+0x1d4>
 80017c0:	7b3b      	ldrb	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d16e      	bne.n	80018a4 <SD_Init+0x1d4>
			{
				for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0XFF);
 80017c6:	2300      	movs	r3, #0
 80017c8:	737b      	strb	r3, [r7, #13]
 80017ca:	e00d      	b.n	80017e8 <SD_Init+0x118>
 80017cc:	7b7c      	ldrb	r4, [r7, #13]
 80017ce:	20ff      	movs	r0, #255	@ 0xff
 80017d0:	f7ff fefe 	bl	80015d0 <SPI_TransmitReceive>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	f104 0310 	add.w	r3, r4, #16
 80017dc:	443b      	add	r3, r7
 80017de:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80017e2:	7b7b      	ldrb	r3, [r7, #13]
 80017e4:	3301      	adds	r3, #1
 80017e6:	737b      	strb	r3, [r7, #13]
 80017e8:	7b7b      	ldrb	r3, [r7, #13]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d9ee      	bls.n	80017cc <SD_Init+0xfc>
				if(buff[0]&0x40){
 80017ee:	793b      	ldrb	r3, [r7, #4]
 80017f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <SD_Init+0x130>
					SD_TYPE=V2HC;
 80017f8:	4b37      	ldr	r3, [pc, #220]	@ (80018d8 <SD_Init+0x208>)
 80017fa:	2206      	movs	r2, #6
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	e051      	b.n	80018a4 <SD_Init+0x1d4>
				}else {
					SD_TYPE=V2;
 8001800:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <SD_Init+0x208>)
 8001802:	2204      	movs	r2, #4
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e04d      	b.n	80018a4 <SD_Init+0x1d4>
			}
		}
	}
	else
	{
		SD_SendCmd(CMD55,0,0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2037      	movs	r0, #55	@ 0x37
 800180e:	f7ff ff11 	bl	8001634 <SD_SendCmd>
		r1=SD_SendCmd(ACMD41,0,0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2029      	movs	r0, #41	@ 0x29
 8001818:	f7ff ff0c 	bl	8001634 <SD_SendCmd>
 800181c:	4603      	mov	r3, r0
 800181e:	733b      	strb	r3, [r7, #12]
		if(r1<=1)
 8001820:	7b3b      	ldrb	r3, [r7, #12]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d81a      	bhi.n	800185c <SD_Init+0x18c>
		{
			SD_TYPE=V1;
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <SD_Init+0x208>)
 8001828:	2202      	movs	r2, #2
 800182a:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 800182c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001830:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2037      	movs	r0, #55	@ 0x37
 8001838:	f7ff fefc 	bl	8001634 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0,0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2029      	movs	r0, #41	@ 0x29
 8001842:	f7ff fef7 	bl	8001634 <SD_SendCmd>
 8001846:	4603      	mov	r3, r0
 8001848:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 800184a:	7b3b      	ldrb	r3, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01a      	beq.n	8001886 <SD_Init+0x1b6>
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	1e5a      	subs	r2, r3, #1
 8001854:	81fa      	strh	r2, [r7, #14]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1eb      	bne.n	8001832 <SD_Init+0x162>
 800185a:	e014      	b.n	8001886 <SD_Init+0x1b6>
		}else
		{
			SD_TYPE=MMC;
 800185c:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <SD_Init+0x208>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 8001862:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001866:	81fb      	strh	r3, [r7, #14]
			do
			{
				r1=SD_SendCmd(CMD1,0,0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2001      	movs	r0, #1
 800186e:	f7ff fee1 	bl	8001634 <SD_SendCmd>
 8001872:	4603      	mov	r3, r0
 8001874:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 8001876:	7b3b      	ldrb	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <SD_Init+0x1b6>
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	81fa      	strh	r2, [r7, #14]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <SD_Init+0x198>
		}
		if(retry==0||SD_SendCmd(CMD16,512,0)!=0)SD_TYPE=ERR;
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <SD_Init+0x1ce>
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001892:	2010      	movs	r0, #16
 8001894:	f7ff fece 	bl	8001634 <SD_SendCmd>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <SD_Init+0x1d4>
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <SD_Init+0x208>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
	}
	SD_CS_HIGH();
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018aa:	480a      	ldr	r0, [pc, #40]	@ (80018d4 <SD_Init+0x204>)
 80018ac:	f002 feb8 	bl	8004620 <HAL_GPIO_WritePin>
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <SD_Init+0x20c>)
 80018b2:	2208      	movs	r2, #8
 80018b4:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 80018b6:	4809      	ldr	r0, [pc, #36]	@ (80018dc <SD_Init+0x20c>)
 80018b8:	f004 f8d4 	bl	8005a64 <HAL_SPI_Init>

    if(SD_TYPE != ERR)
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <SD_Init+0x208>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SD_Init+0x1f8>
    	return SD_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e000      	b.n	80018ca <SD_Init+0x1fa>
    else
    	return SD_ERROR;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	48000400 	.word	0x48000400
 80018d8:	20000f40 	.word	0x20000f40
 80018dc:	20000fbc 	.word	0x20000fbc

080018e0 <SD_ReceiveData>:

uint8_t SD_ReceiveData(uint8_t *data, uint16_t len) //从SD卡读取指定长度的数据块，len为512时为单块大小
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
   uint8_t r1;
   SD_CS_LOW();
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f2:	4817      	ldr	r0, [pc, #92]	@ (8001950 <SD_ReceiveData+0x70>)
 80018f4:	f002 fe94 	bl	8004620 <HAL_GPIO_WritePin>
   do
   {
      r1 = SPI_TransmitReceive(0xFF);
 80018f8:	20ff      	movs	r0, #255	@ 0xff
 80018fa:	f7ff fe69 	bl	80015d0 <SPI_TransmitReceive>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(100);
 8001902:	2064      	movs	r0, #100	@ 0x64
 8001904:	f002 f936 	bl	8003b74 <HAL_Delay>
   }while(r1 != 0xFE); // sd卡spi模式单块读取的起始令牌是0xFE
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2bfe      	cmp	r3, #254	@ 0xfe
 800190c:	d1f4      	bne.n	80018f8 <SD_ReceiveData+0x18>
  while(len--)
 800190e:	e009      	b.n	8001924 <SD_ReceiveData+0x44>
  {
   *data = SPI_TransmitReceive(0xFF);
 8001910:	20ff      	movs	r0, #255	@ 0xff
 8001912:	f7ff fe5d 	bl	80015d0 <SPI_TransmitReceive>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	701a      	strb	r2, [r3, #0]
   data++;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3301      	adds	r3, #1
 8001922:	607b      	str	r3, [r7, #4]
  while(len--)
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	1e5a      	subs	r2, r3, #1
 8001928:	807a      	strh	r2, [r7, #2]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <SD_ReceiveData+0x30>
  }
  SPI_TransmitReceive(0xFF);
 800192e:	20ff      	movs	r0, #255	@ 0xff
 8001930:	f7ff fe4e 	bl	80015d0 <SPI_TransmitReceive>
  SPI_TransmitReceive(0xFF);
 8001934:	20ff      	movs	r0, #255	@ 0xff
 8001936:	f7ff fe4b 	bl	80015d0 <SPI_TransmitReceive>
  SD_CS_HIGH();
 800193a:	2201      	movs	r2, #1
 800193c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001940:	4803      	ldr	r0, [pc, #12]	@ (8001950 <SD_ReceiveData+0x70>)
 8001942:	f002 fe6d 	bl	8004620 <HAL_GPIO_WritePin>
  return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000400 	.word	0x48000400

08001954 <SD_SendBlock>:

uint8_t SD_SendBlock(uint8_t*buf,uint8_t cmd) //写入扇区内容，512字节
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint8_t r1;
	do{
		r1=SPI_TransmitReceive(0xFF);
 8001960:	20ff      	movs	r0, #255	@ 0xff
 8001962:	f7ff fe35 	bl	80015d0 <SPI_TransmitReceive>
 8001966:	4603      	mov	r3, r0
 8001968:	737b      	strb	r3, [r7, #13]
	}while(r1!=0xFF);
 800196a:	7b7b      	ldrb	r3, [r7, #13]
 800196c:	2bff      	cmp	r3, #255	@ 0xff
 800196e:	d1f7      	bne.n	8001960 <SD_SendBlock+0xc>

	SPI_TransmitReceive(cmd);
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fe2c 	bl	80015d0 <SPI_TransmitReceive>
	if(cmd!=0xFD) //0xFD为多块写入停止令牌
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	2bfd      	cmp	r3, #253	@ 0xfd
 800197c:	d022      	beq.n	80019c4 <SD_SendBlock+0x70>
	{
		for(i = 0;i < 512;i++)
 800197e:	2300      	movs	r3, #0
 8001980:	81fb      	strh	r3, [r7, #14]
 8001982:	e009      	b.n	8001998 <SD_SendBlock+0x44>
			SPI_TransmitReceive(buf[i]);
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe1f 	bl	80015d0 <SPI_TransmitReceive>
		for(i = 0;i < 512;i++)
 8001992:	89fb      	ldrh	r3, [r7, #14]
 8001994:	3301      	adds	r3, #1
 8001996:	81fb      	strh	r3, [r7, #14]
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800199e:	d3f1      	bcc.n	8001984 <SD_SendBlock+0x30>
		SPI_TransmitReceive(0xFF);
 80019a0:	20ff      	movs	r0, #255	@ 0xff
 80019a2:	f7ff fe15 	bl	80015d0 <SPI_TransmitReceive>
		SPI_TransmitReceive(0xFF);
 80019a6:	20ff      	movs	r0, #255	@ 0xff
 80019a8:	f7ff fe12 	bl	80015d0 <SPI_TransmitReceive>
		i=SPI_TransmitReceive(0xFF);
 80019ac:	20ff      	movs	r0, #255	@ 0xff
 80019ae:	f7ff fe0f 	bl	80015d0 <SPI_TransmitReceive>
 80019b2:	4603      	mov	r3, r0
 80019b4:	81fb      	strh	r3, [r7, #14]
		if((i&0x1F)!=0x05) //低5位为状态码，高3位为保留，应舍弃，0x05表示接收正确
 80019b6:	89fb      	ldrh	r3, [r7, #14]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d001      	beq.n	80019c4 <SD_SendBlock+0x70>
			return 2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	e000      	b.n	80019c6 <SD_SendBlock+0x72>
	}
    return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <SD_ReadDisk>:

uint8_t SD_ReadDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //读SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	4613      	mov	r3, r2
 80019dc:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e4:	4824      	ldr	r0, [pc, #144]	@ (8001a78 <SD_ReadDisk+0xa8>)
 80019e6:	f002 fe1b 	bl	8004620 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 80019ea:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <SD_ReadDisk+0xac>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d002      	beq.n	80019f8 <SD_ReadDisk+0x28>
		sector *= 512;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d111      	bne.n	8001a22 <SD_ReadDisk+0x52>
	{
		r1=SD_SendCmd(CMD17,sector,0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	2011      	movs	r0, #17
 8001a04:	f7ff fe16 	bl	8001634 <SD_SendCmd>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d127      	bne.n	8001a62 <SD_ReadDisk+0x92>
			r1=SD_ReceiveData(buf,512);
 8001a12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff ff62 	bl	80018e0 <SD_ReceiveData>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	75fb      	strb	r3, [r7, #23]
 8001a20:	e01f      	b.n	8001a62 <SD_ReadDisk+0x92>
	}
	else
	{
		r1=SD_SendCmd(CMD18,sector,0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	2012      	movs	r0, #18
 8001a28:	f7ff fe04 	bl	8001634 <SD_SendCmd>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_ReceiveData(buf,512);
 8001a30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff ff53 	bl	80018e0 <SD_ReceiveData>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	75fb      	strb	r3, [r7, #23]
			buf+=512;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001a44:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	71fb      	strb	r3, [r7, #7]
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <SD_ReadDisk+0x88>
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0eb      	beq.n	8001a30 <SD_ReadDisk+0x60>
		SD_SendCmd(CMD12,0,0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	200c      	movs	r0, #12
 8001a5e:	f7ff fde9 	bl	8001634 <SD_SendCmd>
	}
	SD_CS_HIGH();
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a68:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <SD_ReadDisk+0xa8>)
 8001a6a:	f002 fdd9 	bl	8004620 <HAL_GPIO_WritePin>
	return r1;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	20000f40 	.word	0x20000f40

08001a80 <SD_WriteDisk>:

uint8_t SD_WriteDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //写SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a94:	482d      	ldr	r0, [pc, #180]	@ (8001b4c <SD_WriteDisk+0xcc>)
 8001a96:	f002 fdc3 	bl	8004620 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <SD_WriteDisk+0xd0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d002      	beq.n	8001aa8 <SD_WriteDisk+0x28>
		sector *= 512;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d110      	bne.n	8001ad0 <SD_WriteDisk+0x50>
	{
		r1=SD_SendCmd(CMD24,sector,0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	2018      	movs	r0, #24
 8001ab4:	f7ff fdbe 	bl	8001634 <SD_SendCmd>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d138      	bne.n	8001b34 <SD_WriteDisk+0xb4>
		{
			r1=SD_SendBlock(buf,0xFE);
 8001ac2:	21fe      	movs	r1, #254	@ 0xfe
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff ff45 	bl	8001954 <SD_SendBlock>
 8001aca:	4603      	mov	r3, r0
 8001acc:	75fb      	strb	r3, [r7, #23]
 8001ace:	e031      	b.n	8001b34 <SD_WriteDisk+0xb4>
		}
	}
	else
	{
		if(SD_TYPE!=MMC)
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <SD_WriteDisk+0xd0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d00a      	beq.n	8001aee <SD_WriteDisk+0x6e>
		{
			SD_SendCmd(CMD55,0,0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2037      	movs	r0, #55	@ 0x37
 8001ade:	f7ff fda9 	bl	8001634 <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	2017      	movs	r0, #23
 8001aea:	f7ff fda3 	bl	8001634 <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	2019      	movs	r0, #25
 8001af4:	f7ff fd9e 	bl	8001634 <SD_SendCmd>
 8001af8:	4603      	mov	r3, r0
 8001afa:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <SD_WriteDisk+0xb4>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); //0xFC为多块写入起始令牌
 8001b02:	21fc      	movs	r1, #252	@ 0xfc
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff ff25 	bl	8001954 <SD_SendBlock>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	75fb      	strb	r3, [r7, #23]
				buf+=512;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001b14:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	71fb      	strb	r3, [r7, #7]
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <SD_WriteDisk+0xa8>
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ec      	beq.n	8001b02 <SD_WriteDisk+0x82>
			r1=SD_SendBlock(0,0xFD);
 8001b28:	21fd      	movs	r1, #253	@ 0xfd
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff ff12 	bl	8001954 <SD_SendBlock>
 8001b30:	4603      	mov	r3, r0
 8001b32:	75fb      	strb	r3, [r7, #23]
		}
	}
	SD_CS_HIGH();
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b3a:	4804      	ldr	r0, [pc, #16]	@ (8001b4c <SD_WriteDisk+0xcc>)
 8001b3c:	f002 fd70 	bl	8004620 <HAL_GPIO_WritePin>
	return r1;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	20000f40 	.word	0x20000f40

08001b54 <SD_GETCSD>:

uint8_t SD_GETCSD(uint8_t *csd_data) //获取CSD数据
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	SD_CS_LOW();
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b62:	4810      	ldr	r0, [pc, #64]	@ (8001ba4 <SD_GETCSD+0x50>)
 8001b64:	f002 fd5c 	bl	8004620 <HAL_GPIO_WritePin>
	uint8_t r1;
    if(SD_SendCmd(CMD9,0,0) == 0)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2009      	movs	r0, #9
 8001b6e:	f7ff fd61 	bl	8001634 <SD_SendCmd>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <SD_GETCSD+0x30>
    {
    	r1=SD_ReceiveData(csd_data, 16);
 8001b78:	2110      	movs	r1, #16
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff feb0 	bl	80018e0 <SD_ReceiveData>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]
    }
	SD_CS_HIGH();
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b8a:	4806      	ldr	r0, [pc, #24]	@ (8001ba4 <SD_GETCSD+0x50>)
 8001b8c:	f002 fd48 	bl	8004620 <HAL_GPIO_WritePin>
	if(r1)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SD_GETCSD+0x46>
		return 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <SD_GETCSD+0x48>
	else
		return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <SD_GetSectorCount>:

uint32_t SD_GetSectorCount(void) //获取SD卡总扇区数
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
    uint8_t csd[16];
    uint32_t Capacity;
    uint8_t n;
	uint16_t csize;
    if(SD_GETCSD(csd)!=0)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ffcf 	bl	8001b54 <SD_GETCSD>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SD_GetSectorCount+0x18>
    	return 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e03e      	b.n	8001c3e <SD_GetSectorCount+0x96>
    if((csd[0]&0xC0)==0x40)
 8001bc0:	783b      	ldrb	r3, [r7, #0]
 8001bc2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001bc6:	2b40      	cmp	r3, #64	@ 0x40
 8001bc8:	d10c      	bne.n	8001be4 <SD_GetSectorCount+0x3c>
    {
		csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
 8001bca:	7a7b      	ldrb	r3, [r7, #9]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	7a3b      	ldrb	r3, [r7, #8]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	823b      	strh	r3, [r7, #16]
		Capacity = (uint32_t)csize << 10;
 8001bdc:	8a3b      	ldrh	r3, [r7, #16]
 8001bde:	029b      	lsls	r3, r3, #10
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e02b      	b.n	8001c3c <SD_GetSectorCount+0x94>
    }
    else
    {
		n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001be4:	797b      	ldrb	r3, [r7, #5]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	7abb      	ldrb	r3, [r7, #10]
 8001bee:	09db      	lsrs	r3, r3, #7
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	7a7b      	ldrb	r3, [r7, #9]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f003 0306 	and.w	r3, r3, #6
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3302      	adds	r3, #2
 8001c08:	74fb      	strb	r3, [r7, #19]
		csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8001c0a:	7a3b      	ldrb	r3, [r7, #8]
 8001c0c:	099b      	lsrs	r3, r3, #6
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	823b      	strh	r3, [r7, #16]
		Capacity= (uint32_t)csize << (n - 9);
 8001c30:	8a3a      	ldrh	r2, [r7, #16]
 8001c32:	7cfb      	ldrb	r3, [r7, #19]
 8001c34:	3b09      	subs	r3, #9
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
    }
    return Capacity;
 8001c3c:	697b      	ldr	r3, [r7, #20]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <file_exists>:

FRESULT file_exists(const char *path) //检查配置文件是否存在
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b0ca      	sub	sp, #296	@ 0x128
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001c50:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c54:	6018      	str	r0, [r3, #0]
    FILINFO fno;
    return f_stat(path, &fno);
 8001c56:	f107 0208 	add.w	r2, r7, #8
 8001c5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001c5e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c62:	4611      	mov	r1, r2
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	f00b fb8b 	bl	800d380 <f_stat>
 8001c6a:	4603      	mov	r3, r0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <get_next_log_number>:

int get_next_log_number(void) //寻找sd卡中生成的文件最大的数字并返回最大数字+1
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0e4      	sub	sp, #400	@ 0x190
 8001c7c:	af00      	add	r7, sp, #0
    if (cached_max_log_num == -1)
 8001c7e:	4b54      	ldr	r3, [pc, #336]	@ (8001dd0 <get_next_log_number+0x158>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c86:	f040 8096 	bne.w	8001db6 <get_next_log_number+0x13e>
    {
        DIR dir;
        FILINFO fno;
        const char *prefix = LOG_PREFIX;
 8001c8a:	4b52      	ldr	r3, [pc, #328]	@ (8001dd4 <get_next_log_number+0x15c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        const size_t prefix_len = strlen(prefix);
 8001c92:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8001c96:	f7fe fafb 	bl	8000290 <strlen>
 8001c9a:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
        int max_num = -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

        if (f_opendir(&dir, "/") == FR_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	494b      	ldr	r1, [pc, #300]	@ (8001dd8 <get_next_log_number+0x160>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	f00b fa32 	bl	800d114 <f_opendir>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d179      	bne.n	8001daa <get_next_log_number+0x132>
        {
            while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0)
 8001cb6:	e063      	b.n	8001d80 <get_next_log_number+0x108>
            {
                char* name = fno.fname;
 8001cb8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001cbc:	331a      	adds	r3, #26
 8001cbe:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
                size_t len = strlen(name);
 8001cc2:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001cc6:	f7fe fae3 	bl	8000290 <strlen>
 8001cca:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174

                if (len == prefix_len + 9 && strncmp(name, prefix, prefix_len) == 0)
 8001cce:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001cd2:	3309      	adds	r3, #9
 8001cd4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d151      	bne.n	8001d80 <get_next_log_number+0x108>
 8001cdc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001ce0:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8001ce4:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001ce8:	f00c fe21 	bl	800e92e <strncmp>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d146      	bne.n	8001d80 <get_next_log_number+0x108>
                {
                    int num = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    for (int i = 0; i < 5; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cfe:	e024      	b.n	8001d4a <get_next_log_number+0xd2>
                    {
                        char c = name[prefix_len + i];
 8001d00:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8001d04:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001d08:	4413      	add	r3, r2
 8001d0a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d0e:	4413      	add	r3, r2
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
                        if (c < '0' || c > '9') break;
 8001d16:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001d1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d1c:	d919      	bls.n	8001d52 <get_next_log_number+0xda>
 8001d1e:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001d22:	2b39      	cmp	r3, #57	@ 0x39
 8001d24:	d815      	bhi.n	8001d52 <get_next_log_number+0xda>
                        num = num * 10 + (c - '0');
 8001d26:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	461a      	mov	r2, r3
 8001d34:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001d38:	3b30      	subs	r3, #48	@ 0x30
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    for (int i = 0; i < 5; i++)
 8001d40:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001d44:	3301      	adds	r3, #1
 8001d46:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d4a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	ddd6      	ble.n	8001d00 <get_next_log_number+0x88>
                    }

                    if (strcmp(name + prefix_len + 5, ".txt") == 0)
 8001d52:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001d56:	3305      	adds	r3, #5
 8001d58:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d5c:	4413      	add	r3, r2
 8001d5e:	491f      	ldr	r1, [pc, #124]	@ (8001ddc <get_next_log_number+0x164>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fa35 	bl	80001d0 <strcmp>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <get_next_log_number+0x108>
                    {
                        if (num > max_num) max_num = num;
 8001d6c:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001d70:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dd03      	ble.n	8001d80 <get_next_log_number+0x108>
 8001d78:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d7c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
            while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0)
 8001d80:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001d84:	463b      	mov	r3, r7
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00b faa7 	bl	800d2dc <f_readdir>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <get_next_log_number+0x12a>
 8001d94:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d98:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d9c:	7e9b      	ldrb	r3, [r3, #26]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d18a      	bne.n	8001cb8 <get_next_log_number+0x40>
                    }
                }
            }
            f_closedir(&dir);
 8001da2:	463b      	mov	r3, r7
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00b fa73 	bl	800d290 <f_closedir>
        }
        cached_max_log_num = (max_num < 0) ? 0 : max_num;
 8001daa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001dae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001db2:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <get_next_log_number+0x158>)
 8001db4:	6013      	str	r3, [r2, #0]
    }
    	return ++cached_max_log_num;
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <get_next_log_number+0x158>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <get_next_log_number+0x158>)
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <get_next_log_number+0x158>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000000c 	.word	0x2000000c
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	080132c8 	.word	0x080132c8
 8001ddc:	080132cc 	.word	0x080132cc

08001de0 <read_config>:
#include "sdconfig.h"
#include "user_spi.h"
#include "user_usart.h"

FRESULT read_config(char *buffer, uint16_t buf_size) //读配置文件
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001dec:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001df0:	6018      	str	r0, [r3, #0]
 8001df2:	460a      	mov	r2, r1
 8001df4:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001df8:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001dfc:	801a      	strh	r2, [r3, #0]
    FIL fil;
    FRESULT res = f_open(&fil, CONFIG_FILE, FA_READ);
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <read_config+0x94>)
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	2201      	movs	r2, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00a fa21 	bl	800c250 <f_open>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if(res == FR_OK)
 8001e14:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d124      	bne.n	8001e66 <read_config+0x86>
    {
        UINT br;
        f_read(&fil, buffer, buf_size - 1, &br);
 8001e1c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001e20:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	461c      	mov	r4, r3
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001e32:	f5a2 711b 	sub.w	r1, r2, #620	@ 0x26c
 8001e36:	f107 0010 	add.w	r0, r7, #16
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	6809      	ldr	r1, [r1, #0]
 8001e3e:	f00a fce1 	bl	800c804 <f_read>
        buffer[br] = '\0';
 8001e42:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001e46:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001e50:	f5a2 721b 	sub.w	r2, r2, #620	@ 0x26c
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
        f_close(&fil);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00b f92d 	bl	800d0c0 <f_close>
    }
    return res;
 8001e66:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	20000004 	.word	0x20000004

08001e78 <parse_config>:

SD_Config parse_config(const char *config_text) //寻找配置文件中的相关参数，查看是否有修改，将参数保存并返回
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
	SD_Config config =
 8001e82:	4b47      	ldr	r3, [pc, #284]	@ (8001fa0 <parse_config+0x128>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	813b      	strh	r3, [r7, #8]
 8001e8a:	4b46      	ldr	r3, [pc, #280]	@ (8001fa4 <parse_config+0x12c>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	817b      	strh	r3, [r7, #10]
 8001e90:	4b45      	ldr	r3, [pc, #276]	@ (8001fa8 <parse_config+0x130>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	81bb      	strh	r3, [r7, #12]
 8001e96:	4b45      	ldr	r3, [pc, #276]	@ (8001fac <parse_config+0x134>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	81fb      	strh	r3, [r7, #14]
		.peakth = PEAKTH,
		.almstth = ALMSTTH,
		.pkwnd = PKWND
	};

    const char *section = strstr(config_text, CONFIG_SECTION);
 8001e9c:	4944      	ldr	r1, [pc, #272]	@ (8001fb0 <parse_config+0x138>)
 8001e9e:	6838      	ldr	r0, [r7, #0]
 8001ea0:	f00c fd57 	bl	800e952 <strstr>
 8001ea4:	6138      	str	r0, [r7, #16]
    if (!section) return config;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <parse_config+0x44>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	cb03      	ldmia	r3!, {r0, r1}
 8001eb6:	6010      	str	r0, [r2, #0]
 8001eb8:	6051      	str	r1, [r2, #4]
 8001eba:	e06c      	b.n	8001f96 <parse_config+0x11e>

    const char *ptr = section + strlen(CONFIG_SECTION);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	330a      	adds	r3, #10
 8001ec0:	617b      	str	r3, [r7, #20]

    while (*ptr != '\0' && *ptr != '[')
 8001ec2:	e059      	b.n	8001f78 <parse_config+0x100>
    {
        if (strncmp(ptr, RECODE_KEY, strlen(RECODE_KEY)) == 0)
 8001ec4:	220c      	movs	r2, #12
 8001ec6:	493b      	ldr	r1, [pc, #236]	@ (8001fb4 <parse_config+0x13c>)
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f00c fd30 	bl	800e92e <strncmp>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <parse_config+0x70>
        {
            ptr += strlen(RECODE_KEY) + 1;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	330d      	adds	r3, #13
 8001ed8:	617b      	str	r3, [r7, #20]
            config.receiver_code = atoi(ptr);
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f00b fbf9 	bl	800d6d2 <atoi>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	813b      	strh	r3, [r7, #8]
 8001ee6:	e038      	b.n	8001f5a <parse_config+0xe2>
        }
        else if (strncmp(ptr, PEAKTH_KEY, strlen(PEAKTH_KEY)) == 0)
 8001ee8:	2206      	movs	r2, #6
 8001eea:	4933      	ldr	r1, [pc, #204]	@ (8001fb8 <parse_config+0x140>)
 8001eec:	6978      	ldr	r0, [r7, #20]
 8001eee:	f00c fd1e 	bl	800e92e <strncmp>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <parse_config+0x94>
        {
            ptr += strlen(PEAKTH_KEY) + 1;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3307      	adds	r3, #7
 8001efc:	617b      	str	r3, [r7, #20]
            config.peakth = atoi(ptr);
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f00b fbe7 	bl	800d6d2 <atoi>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	817b      	strh	r3, [r7, #10]
 8001f0a:	e026      	b.n	8001f5a <parse_config+0xe2>
        }
        else if (strncmp(ptr, ALMSTTH_KEY, strlen(ALMSTTH_KEY)) == 0)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	492b      	ldr	r1, [pc, #172]	@ (8001fbc <parse_config+0x144>)
 8001f10:	6978      	ldr	r0, [r7, #20]
 8001f12:	f00c fd0c 	bl	800e92e <strncmp>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <parse_config+0xb8>
        {
            ptr += strlen(ALMSTTH_KEY) + 1;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3308      	adds	r3, #8
 8001f20:	617b      	str	r3, [r7, #20]
            config.almstth = atoi(ptr);
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f00b fbd5 	bl	800d6d2 <atoi>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	81bb      	strh	r3, [r7, #12]
 8001f2e:	e014      	b.n	8001f5a <parse_config+0xe2>
        }
        else if (strncmp(ptr, PKWND_KEY, strlen(PKWND_KEY)) == 0)
 8001f30:	2205      	movs	r2, #5
 8001f32:	4923      	ldr	r1, [pc, #140]	@ (8001fc0 <parse_config+0x148>)
 8001f34:	6978      	ldr	r0, [r7, #20]
 8001f36:	f00c fcfa 	bl	800e92e <strncmp>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10c      	bne.n	8001f5a <parse_config+0xe2>
		{
			ptr += strlen(PKWND_KEY) + 1;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3306      	adds	r3, #6
 8001f44:	617b      	str	r3, [r7, #20]
			config.pkwnd = atoi(ptr);
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f00b fbc3 	bl	800d6d2 <atoi>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	81fb      	strh	r3, [r7, #14]
		}

        while (*ptr != '\n' && *ptr != '\0') ptr++;
 8001f52:	e002      	b.n	8001f5a <parse_config+0xe2>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b0a      	cmp	r3, #10
 8001f60:	d003      	beq.n	8001f6a <parse_config+0xf2>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f4      	bne.n	8001f54 <parse_config+0xdc>
        if (*ptr == '\n') ptr++;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b0a      	cmp	r3, #10
 8001f70:	d102      	bne.n	8001f78 <parse_config+0x100>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
    while (*ptr != '\0' && *ptr != '[')
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <parse_config+0x110>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b5b      	cmp	r3, #91	@ 0x5b
 8001f86:	d19d      	bne.n	8001ec4 <parse_config+0x4c>
    }

    return config;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	cb03      	ldmia	r3!, {r0, r1}
 8001f92:	6010      	str	r0, [r2, #0]
 8001f94:	6051      	str	r1, [r2, #4]
}
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000002a 	.word	0x2000002a
 8001fa4:	20000018 	.word	0x20000018
 8001fa8:	2000001a 	.word	0x2000001a
 8001fac:	2000001c 	.word	0x2000001c
 8001fb0:	080132d4 	.word	0x080132d4
 8001fb4:	080132e0 	.word	0x080132e0
 8001fb8:	080132f0 	.word	0x080132f0
 8001fbc:	080132f8 	.word	0x080132f8
 8001fc0:	08013300 	.word	0x08013300

08001fc4 <apply_config>:

void apply_config(SD_Config *config) // 应用新配置
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	receivercode = config->receiver_code;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	881a      	ldrh	r2, [r3, #0]
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <apply_config+0x54>)
 8001fd2:	801a      	strh	r2, [r3, #0]
	PEAKTH = config->peakth;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	885a      	ldrh	r2, [r3, #2]
 8001fd8:	4b10      	ldr	r3, [pc, #64]	@ (800201c <apply_config+0x58>)
 8001fda:	801a      	strh	r2, [r3, #0]
	ALMSTTH = config->almstth;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	889a      	ldrh	r2, [r3, #4]
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <apply_config+0x5c>)
 8001fe2:	801a      	strh	r2, [r3, #0]
	PKWND = config->pkwnd;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	88da      	ldrh	r2, [r3, #6]
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <apply_config+0x60>)
 8001fea:	801a      	strh	r2, [r3, #0]
	ASIC_CMD(0x01, PEAKTH);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <apply_config+0x58>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 fe98 	bl	8002d28 <ASIC_CMD>
	ASIC_CMD(0x02, ALMSTTH);
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <apply_config+0x5c>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	2002      	movs	r0, #2
 8002000:	f000 fe92 	bl	8002d28 <ASIC_CMD>
	ASIC_CMD(0x04, PKWND);
 8002004:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <apply_config+0x60>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	2004      	movs	r0, #4
 800200c:	f000 fe8c 	bl	8002d28 <ASIC_CMD>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000002a 	.word	0x2000002a
 800201c:	20000018 	.word	0x20000018
 8002020:	2000001a 	.word	0x2000001a
 8002024:	2000001c 	.word	0x2000001c

08002028 <create_default_config>:

void create_default_config(void) //创建配置文件
{
 8002028:	b580      	push	{r7, lr}
 800202a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800202e:	af00      	add	r7, sp, #0
    FIL fil;
    if(f_open(&fil, CONFIG_FILE, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <create_default_config+0x50>)
 8002032:	6819      	ldr	r1, [r3, #0]
 8002034:	f107 0308 	add.w	r3, r7, #8
 8002038:	220a      	movs	r2, #10
 800203a:	4618      	mov	r0, r3
 800203c:	f00a f908 	bl	800c250 <f_open>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d113      	bne.n	800206e <create_default_config+0x46>
    {
        const char *default_config =
 8002046:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <create_default_config+0x54>)
 8002048:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
            "PEAKTH=200\n"
        	"ALMSTTH=32\n"
        	"PKWND=5000";

        UINT bw;
        f_write(&fil, default_config, strlen(default_config), &bw);
 800204c:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 8002050:	f7fe f91e 	bl	8000290 <strlen>
 8002054:	4602      	mov	r2, r0
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	f107 0008 	add.w	r0, r7, #8
 800205c:	f8d7 1264 	ldr.w	r1, [r7, #612]	@ 0x264
 8002060:	f00a fd48 	bl	800caf4 <f_write>
        f_close(&fil);
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	4618      	mov	r0, r3
 800206a:	f00b f829 	bl	800d0c0 <f_close>
    }
}
 800206e:	bf00      	nop
 8002070:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000004 	.word	0x20000004
 800207c:	08013308 	.word	0x08013308

08002080 <load_and_apply_config>:

SD_Config load_and_apply_config(void) //读取并应用配置
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b096      	sub	sp, #88	@ 0x58
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
    char config_buf[64];
    SD_Config config =
 8002088:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <load_and_apply_config+0x70>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	823b      	strh	r3, [r7, #16]
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <load_and_apply_config+0x74>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	827b      	strh	r3, [r7, #18]
 8002096:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <load_and_apply_config+0x78>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	82bb      	strh	r3, [r7, #20]
 800209c:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <load_and_apply_config+0x7c>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	82fb      	strh	r3, [r7, #22]
        .peakth = PEAKTH,
        .almstth = ALMSTTH,
        .pkwnd = PKWND
    };

    if(read_config(config_buf, sizeof(config_buf)) == FR_OK)
 80020a2:	f107 0318 	add.w	r3, r7, #24
 80020a6:	2140      	movs	r1, #64	@ 0x40
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fe99 	bl	8001de0 <read_config>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d111      	bne.n	80020d8 <load_and_apply_config+0x58>
    {
        config = parse_config(config_buf);
 80020b4:	463b      	mov	r3, r7
 80020b6:	f107 0218 	add.w	r2, r7, #24
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fedb 	bl	8001e78 <parse_config>
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	463a      	mov	r2, r7
 80020c8:	6810      	ldr	r0, [r2, #0]
 80020ca:	6851      	ldr	r1, [r2, #4]
 80020cc:	c303      	stmia	r3!, {r0, r1}
        apply_config(&config);
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff76 	bl	8001fc4 <apply_config>
    }
    return config;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	461a      	mov	r2, r3
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	cb03      	ldmia	r3!, {r0, r1}
 80020e2:	6010      	str	r0, [r2, #0]
 80020e4:	6051      	str	r1, [r2, #4]
}
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	3758      	adds	r7, #88	@ 0x58
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000002a 	.word	0x2000002a
 80020f4:	20000018 	.word	0x20000018
 80020f8:	2000001a 	.word	0x2000001a
 80020fc:	2000001c 	.word	0x2000001c

08002100 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <MX_SPI1_Init+0x78>)
 8002108:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <MX_SPI1_Init+0x74>)
 800210c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002110:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002112:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002118:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <MX_SPI1_Init+0x74>)
 800211a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800211e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002126:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_SPI1_Init+0x74>)
 800212e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002132:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002134:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002136:	2208      	movs	r2, #8
 8002138:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_SPI1_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <MX_SPI1_Init+0x74>)
 800214e:	2207      	movs	r2, #7
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_SPI1_Init+0x74>)
 800215a:	2208      	movs	r2, #8
 800215c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_SPI1_Init+0x74>)
 8002160:	f003 fc80 	bl	8005a64 <HAL_SPI_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800216a:	f7ff fa12 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000f58 	.word	0x20000f58
 8002178:	40013000 	.word	0x40013000

0800217c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <MX_SPI2_Init+0x74>)
 8002182:	4a1c      	ldr	r2, [pc, #112]	@ (80021f4 <MX_SPI2_Init+0x78>)
 8002184:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <MX_SPI2_Init+0x74>)
 8002188:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800218c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <MX_SPI2_Init+0x74>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <MX_SPI2_Init+0x74>)
 8002196:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800219a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <MX_SPI2_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021b2:	2238      	movs	r2, #56	@ 0x38
 80021b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021ca:	2207      	movs	r2, #7
 80021cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021d6:	2208      	movs	r2, #8
 80021d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <MX_SPI2_Init+0x74>)
 80021dc:	f003 fc42 	bl	8005a64 <HAL_SPI_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021e6:	f7ff f9d4 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000fbc 	.word	0x20000fbc
 80021f4:	40003800 	.word	0x40003800

080021f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	@ 0x30
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a9b      	ldr	r2, [pc, #620]	@ (8002484 <HAL_SPI_MspInit+0x28c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	f040 8095 	bne.w	8002346 <HAL_SPI_MspInit+0x14e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800221c:	4b9a      	ldr	r3, [pc, #616]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 800221e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002220:	4a99      	ldr	r2, [pc, #612]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 8002222:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002226:	6613      	str	r3, [r2, #96]	@ 0x60
 8002228:	4b97      	ldr	r3, [pc, #604]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 800222a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002234:	4b94      	ldr	r3, [pc, #592]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 8002236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002238:	4a93      	ldr	r2, [pc, #588]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002240:	4b91      	ldr	r3, [pc, #580]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800224c:	23a0      	movs	r3, #160	@ 0xa0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800225c:	2305      	movs	r3, #5
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800226a:	f002 f847 	bl	80042fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800226e:	2340      	movs	r3, #64	@ 0x40
 8002270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002276:	2301      	movs	r3, #1
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800227e:	2305      	movs	r3, #5
 8002280:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800228c:	f002 f836 	bl	80042fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002290:	4b7e      	ldr	r3, [pc, #504]	@ (800248c <HAL_SPI_MspInit+0x294>)
 8002292:	4a7f      	ldr	r2, [pc, #508]	@ (8002490 <HAL_SPI_MspInit+0x298>)
 8002294:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002296:	4b7d      	ldr	r3, [pc, #500]	@ (800248c <HAL_SPI_MspInit+0x294>)
 8002298:	2201      	movs	r2, #1
 800229a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800229c:	4b7b      	ldr	r3, [pc, #492]	@ (800248c <HAL_SPI_MspInit+0x294>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a2:	4b7a      	ldr	r3, [pc, #488]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022a8:	4b78      	ldr	r3, [pc, #480]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022aa:	2280      	movs	r2, #128	@ 0x80
 80022ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ae:	4b77      	ldr	r3, [pc, #476]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b4:	4b75      	ldr	r3, [pc, #468]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80022ba:	4b74      	ldr	r3, [pc, #464]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022bc:	2200      	movs	r2, #0
 80022be:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022c0:	4b72      	ldr	r3, [pc, #456]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022c6:	4871      	ldr	r0, [pc, #452]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022c8:	f001 fd96 	bl	8003df8 <HAL_DMA_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80022d2:	f7ff f95e 	bl	8001592 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a6c      	ldr	r2, [pc, #432]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022da:	659a      	str	r2, [r3, #88]	@ 0x58
 80022dc:	4a6b      	ldr	r2, [pc, #428]	@ (800248c <HAL_SPI_MspInit+0x294>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80022e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 80022e4:	4a6c      	ldr	r2, [pc, #432]	@ (8002498 <HAL_SPI_MspInit+0x2a0>)
 80022e6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80022e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ee:	4b69      	ldr	r3, [pc, #420]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 80022f0:	2210      	movs	r2, #16
 80022f2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f4:	4b67      	ldr	r3, [pc, #412]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022fa:	4b66      	ldr	r3, [pc, #408]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002300:	4b64      	ldr	r3, [pc, #400]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002306:	4b63      	ldr	r3, [pc, #396]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800230c:	4b61      	ldr	r3, [pc, #388]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002312:	4b60      	ldr	r3, [pc, #384]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002318:	485e      	ldr	r0, [pc, #376]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 800231a:	f001 fd6d 	bl	8003df8 <HAL_DMA_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002324:	f7ff f935 	bl	8001592 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a5a      	ldr	r2, [pc, #360]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
 800232e:	4a59      	ldr	r2, [pc, #356]	@ (8002494 <HAL_SPI_MspInit+0x29c>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2101      	movs	r1, #1
 8002338:	2023      	movs	r0, #35	@ 0x23
 800233a:	f001 fd1a 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800233e:	2023      	movs	r0, #35	@ 0x23
 8002340:	f001 fd33 	bl	8003daa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002344:	e099      	b.n	800247a <HAL_SPI_MspInit+0x282>
  else if(spiHandle->Instance==SPI2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a54      	ldr	r2, [pc, #336]	@ (800249c <HAL_SPI_MspInit+0x2a4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 8094 	bne.w	800247a <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002352:	4b4d      	ldr	r3, [pc, #308]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	4a4c      	ldr	r2, [pc, #304]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800235c:	6593      	str	r3, [r2, #88]	@ 0x58
 800235e:	4b4a      	ldr	r3, [pc, #296]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	4a46      	ldr	r2, [pc, #280]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002376:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <HAL_SPI_MspInit+0x290>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002382:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002394:	2305      	movs	r3, #5
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	4840      	ldr	r0, [pc, #256]	@ (80024a0 <HAL_SPI_MspInit+0x2a8>)
 80023a0:	f001 ffac 	bl	80042fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80023a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023b6:	2305      	movs	r3, #5
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	4837      	ldr	r0, [pc, #220]	@ (80024a0 <HAL_SPI_MspInit+0x2a8>)
 80023c2:	f001 ff9b 	bl	80042fc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80023c6:	4b37      	ldr	r3, [pc, #220]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023c8:	4a37      	ldr	r2, [pc, #220]	@ (80024a8 <HAL_SPI_MspInit+0x2b0>)
 80023ca:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 80023cc:	4b35      	ldr	r3, [pc, #212]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d2:	4b34      	ldr	r3, [pc, #208]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d8:	4b32      	ldr	r3, [pc, #200]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023de:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023e0:	2280      	movs	r2, #128	@ 0x80
 80023e2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e4:	4b2f      	ldr	r3, [pc, #188]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ea:	4b2e      	ldr	r3, [pc, #184]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80023f0:	4b2c      	ldr	r3, [pc, #176]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023f6:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80023fc:	4829      	ldr	r0, [pc, #164]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 80023fe:	f001 fcfb 	bl	8003df8 <HAL_DMA_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8002408:	f7ff f8c3 	bl	8001592 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a25      	ldr	r2, [pc, #148]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 8002410:	659a      	str	r2, [r3, #88]	@ 0x58
 8002412:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <HAL_SPI_MspInit+0x2ac>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002418:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 800241a:	4a25      	ldr	r2, [pc, #148]	@ (80024b0 <HAL_SPI_MspInit+0x2b8>)
 800241c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800241e:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 8002420:	2201      	movs	r2, #1
 8002422:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002424:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 8002426:	2210      	movs	r2, #16
 8002428:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800242a:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002430:	4b1e      	ldr	r3, [pc, #120]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 8002432:	2280      	movs	r2, #128	@ 0x80
 8002434:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002436:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 8002438:	2200      	movs	r2, #0
 800243a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800243c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002442:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 8002444:	2200      	movs	r2, #0
 8002446:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002448:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 800244a:	2200      	movs	r2, #0
 800244c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800244e:	4817      	ldr	r0, [pc, #92]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 8002450:	f001 fcd2 	bl	8003df8 <HAL_DMA_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_SPI_MspInit+0x266>
      Error_Handler();
 800245a:	f7ff f89a 	bl	8001592 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a12      	ldr	r2, [pc, #72]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
 8002464:	4a11      	ldr	r2, [pc, #68]	@ (80024ac <HAL_SPI_MspInit+0x2b4>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2101      	movs	r1, #1
 800246e:	2024      	movs	r0, #36	@ 0x24
 8002470:	f001 fc7f 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002474:	2024      	movs	r0, #36	@ 0x24
 8002476:	f001 fc98 	bl	8003daa <HAL_NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3730      	adds	r7, #48	@ 0x30
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40013000 	.word	0x40013000
 8002488:	40021000 	.word	0x40021000
 800248c:	20001020 	.word	0x20001020
 8002490:	4002001c 	.word	0x4002001c
 8002494:	20001068 	.word	0x20001068
 8002498:	40020030 	.word	0x40020030
 800249c:	40003800 	.word	0x40003800
 80024a0:	48000400 	.word	0x48000400
 80024a4:	200010b0 	.word	0x200010b0
 80024a8:	40020044 	.word	0x40020044
 80024ac:	200010f8 	.word	0x200010f8
 80024b0:	40020058 	.word	0x40020058

080024b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_MspInit+0x44>)
 80024bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024be:	4a0e      	ldr	r2, [pc, #56]	@ (80024f8 <HAL_MspInit+0x44>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80024c6:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <HAL_MspInit+0x44>)
 80024c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_MspInit+0x44>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	4a08      	ldr	r2, [pc, #32]	@ (80024f8 <HAL_MspInit+0x44>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_MspInit+0x44>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <NMI_Handler+0x4>

08002504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <MemManage_Handler+0x4>

08002514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <BusFault_Handler+0x4>

0800251c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <UsageFault_Handler+0x4>

08002524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002552:	f001 faef 	bl	8003b34 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002556:	f001 fc42 	bl	8003dde <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}

0800255e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(PPS_Pin);
 8002562:	2010      	movs	r0, #16
 8002564:	f002 f88e 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002570:	4802      	ldr	r0, [pc, #8]	@ (800257c <DMA1_Channel2_IRQHandler+0x10>)
 8002572:	f001 fdd8 	bl	8004126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20001020 	.word	0x20001020

08002580 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002584:	4802      	ldr	r0, [pc, #8]	@ (8002590 <DMA1_Channel3_IRQHandler+0x10>)
 8002586:	f001 fdce 	bl	8004126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20001068 	.word	0x20001068

08002594 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002598:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <DMA1_Channel4_IRQHandler+0x10>)
 800259a:	f001 fdc4 	bl	8004126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200010b0 	.word	0x200010b0

080025a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <DMA1_Channel5_IRQHandler+0x10>)
 80025ae:	f001 fdba 	bl	8004126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200010f8 	.word	0x200010f8

080025bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025bc:	b5b0      	push	{r4, r5, r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025c0:	480c      	ldr	r0, [pc, #48]	@ (80025f4 <TIM2_IRQHandler+0x38>)
 80025c2:	f004 f870 	bl	80066a6 <HAL_TIM_IRQHandler>
  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE))
 80025c6:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <TIM2_IRQHandler+0x38>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d10c      	bne.n	80025ee <TIM2_IRQHandler+0x32>
      {
          __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80025d4:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <TIM2_IRQHandler+0x38>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0201 	mvn.w	r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
          high_counter += 0x100000000;
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <TIM2_IRQHandler+0x3c>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	1c5d      	adds	r5, r3, #1
 80025e6:	4614      	mov	r4, r2
 80025e8:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <TIM2_IRQHandler+0x3c>)
 80025ea:	e9c3 4500 	strd	r4, r5, [r3]
      }
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bdb0      	pop	{r4, r5, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20001148 	.word	0x20001148
 80025f8:	20001b70 	.word	0x20001b70

080025fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002600:	4802      	ldr	r0, [pc, #8]	@ (800260c <SPI1_IRQHandler+0x10>)
 8002602:	f003 fcf1 	bl	8005fe8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000f58 	.word	0x20000f58

08002610 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002614:	4802      	ldr	r0, [pc, #8]	@ (8002620 <SPI2_IRQHandler+0x10>)
 8002616:	f003 fce7 	bl	8005fe8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000fbc 	.word	0x20000fbc

08002624 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800262a:	4836      	ldr	r0, [pc, #216]	@ (8002704 <USART1_IRQHandler+0xe0>)
 800262c:	f004 fe14 	bl	8007258 <HAL_UART_IRQHandler>
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 8002630:	4b34      	ldr	r3, [pc, #208]	@ (8002704 <USART1_IRQHandler+0xe0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b10      	cmp	r3, #16
 800263c:	d15e      	bne.n	80026fc <USART1_IRQHandler+0xd8>
	{
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800263e:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <USART1_IRQHandler+0xe0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2210      	movs	r2, #16
 8002644:	621a      	str	r2, [r3, #32]
	  HAL_UART_AbortReceive(&huart1);
 8002646:	482f      	ldr	r0, [pc, #188]	@ (8002704 <USART1_IRQHandler+0xe0>)
 8002648:	f004 fd54 	bl	80070f4 <HAL_UART_AbortReceive>
	  rx_length = sizeof(rx_buffer) - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 800264c:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <USART1_IRQHandler+0xe0>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <USART1_IRQHandler+0xe4>)
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	2310      	movs	r3, #16
 8002662:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f383 8811 	msr	BASEPRI, r3
}
 800266a:	bf00      	nop
	  __set_BASEPRI(1 << 4);
	  if(rp != wp && wp + rx_length <= &processing_buffer[BUF_SIZE])
 800266c:	4b27      	ldr	r3, [pc, #156]	@ (800270c <USART1_IRQHandler+0xe8>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b27      	ldr	r3, [pc, #156]	@ (8002710 <USART1_IRQHandler+0xec>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d01a      	beq.n	80026ae <USART1_IRQHandler+0x8a>
 8002678:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <USART1_IRQHandler+0xec>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a22      	ldr	r2, [pc, #136]	@ (8002708 <USART1_IRQHandler+0xe4>)
 800267e:	8812      	ldrh	r2, [r2, #0]
 8002680:	b292      	uxth	r2, r2
 8002682:	4413      	add	r3, r2
 8002684:	4a23      	ldr	r2, [pc, #140]	@ (8002714 <USART1_IRQHandler+0xf0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d811      	bhi.n	80026ae <USART1_IRQHandler+0x8a>
	  {
		  memcpy(wp, rx_buffer, rx_length);
 800268a:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <USART1_IRQHandler+0xec>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1e      	ldr	r2, [pc, #120]	@ (8002708 <USART1_IRQHandler+0xe4>)
 8002690:	8812      	ldrh	r2, [r2, #0]
 8002692:	b292      	uxth	r2, r2
 8002694:	4920      	ldr	r1, [pc, #128]	@ (8002718 <USART1_IRQHandler+0xf4>)
 8002696:	4618      	mov	r0, r3
 8002698:	f00c ff77 	bl	800f58a <memcpy>
		  wp += rx_length;
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <USART1_IRQHandler+0xe4>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <USART1_IRQHandler+0xec>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	4a19      	ldr	r2, [pc, #100]	@ (8002710 <USART1_IRQHandler+0xec>)
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e012      	b.n	80026d4 <USART1_IRQHandler+0xb0>
	  }
	  else
	  {
		  memcpy(processing_buffer, rx_buffer, rx_length);
 80026ae:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <USART1_IRQHandler+0xe4>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	4918      	ldr	r1, [pc, #96]	@ (8002718 <USART1_IRQHandler+0xf4>)
 80026b8:	4818      	ldr	r0, [pc, #96]	@ (800271c <USART1_IRQHandler+0xf8>)
 80026ba:	f00c ff66 	bl	800f58a <memcpy>
		  rp = processing_buffer;
 80026be:	4b13      	ldr	r3, [pc, #76]	@ (800270c <USART1_IRQHandler+0xe8>)
 80026c0:	4a16      	ldr	r2, [pc, #88]	@ (800271c <USART1_IRQHandler+0xf8>)
 80026c2:	601a      	str	r2, [r3, #0]
		  wp = rp + rx_length;
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <USART1_IRQHandler+0xe8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002708 <USART1_IRQHandler+0xe4>)
 80026ca:	8812      	ldrh	r2, [r2, #0]
 80026cc:	b292      	uxth	r2, r2
 80026ce:	4413      	add	r3, r2
 80026d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <USART1_IRQHandler+0xec>)
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	2300      	movs	r3, #0
 80026d6:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f383 8811 	msr	BASEPRI, r3
}
 80026de:	bf00      	nop
	  }
	  __set_BASEPRI(0);
	  if(rx_length > 0)
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <USART1_IRQHandler+0xe4>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <USART1_IRQHandler+0xcc>
	  {
		  data_ready = 1;
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <USART1_IRQHandler+0xfc>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	801a      	strh	r2, [r3, #0]
	  }
	  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 80026f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026f4:	4908      	ldr	r1, [pc, #32]	@ (8002718 <USART1_IRQHandler+0xf4>)
 80026f6:	4803      	ldr	r0, [pc, #12]	@ (8002704 <USART1_IRQHandler+0xe0>)
 80026f8:	f004 fcb0 	bl	800705c <HAL_UART_Receive_DMA>
	}
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000122c 	.word	0x2000122c
 8002708:	20000a94 	.word	0x20000a94
 800270c:	20000024 	.word	0x20000024
 8002710:	20000020 	.word	0x20000020
 8002714:	20001b64 	.word	0x20001b64
 8002718:	20000294 	.word	0x20000294
 800271c:	20001364 	.word	0x20001364
 8002720:	20000a96 	.word	0x20000a96

08002724 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <TIM6_DAC_IRQHandler+0x10>)
 800272a:	f003 ffbc 	bl	80066a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20001194 	.word	0x20001194

08002738 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <TIM7_IRQHandler+0x10>)
 800273e:	f003 ffb2 	bl	80066a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200011e0 	.word	0x200011e0

0800274c <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <DMA2_Channel6_IRQHandler+0x10>)
 8002752:	f001 fce8 	bl	8004126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200012fc 	.word	0x200012fc

08002760 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <DMA2_Channel7_IRQHandler+0x10>)
 8002766:	f001 fcde 	bl	8004126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200012b4 	.word	0x200012b4

08002774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return 1;
 8002778:	2301      	movs	r3, #1
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_kill>:

int _kill(int pid, int sig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800278e:	f00c fec5 	bl	800f51c <__errno>
 8002792:	4603      	mov	r3, r0
 8002794:	2216      	movs	r2, #22
 8002796:	601a      	str	r2, [r3, #0]
  return -1;
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_exit>:

void _exit (int status)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ffe7 	bl	8002784 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027b6:	bf00      	nop
 80027b8:	e7fd      	b.n	80027b6 <_exit+0x12>

080027ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e00a      	b.n	80027e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027cc:	f3af 8000 	nop.w
 80027d0:	4601      	mov	r1, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	60ba      	str	r2, [r7, #8]
 80027d8:	b2ca      	uxtb	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3301      	adds	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dbf0      	blt.n	80027cc <_read+0x12>
  }

  return len;
 80027ea:	687b      	ldr	r3, [r7, #4]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800281c:	605a      	str	r2, [r3, #4]
  return 0;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_isatty>:

int _isatty(int file)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002864:	4a14      	ldr	r2, [pc, #80]	@ (80028b8 <_sbrk+0x5c>)
 8002866:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <_sbrk+0x60>)
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002870:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <_sbrk+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <_sbrk+0x64>)
 800287a:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <_sbrk+0x68>)
 800287c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <_sbrk+0x64>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	429a      	cmp	r2, r3
 800288a:	d207      	bcs.n	800289c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800288c:	f00c fe46 	bl	800f51c <__errno>
 8002890:	4603      	mov	r3, r0
 8002892:	220c      	movs	r2, #12
 8002894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e009      	b.n	80028b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <_sbrk+0x64>)
 80028ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ae:	68fb      	ldr	r3, [r7, #12]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000c000 	.word	0x2000c000
 80028bc:	00000400 	.word	0x00000400
 80028c0:	20001144 	.word	0x20001144
 80028c4:	20002db0 	.word	0x20002db0

080028c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <SystemInit+0x20>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	4a05      	ldr	r2, [pc, #20]	@ (80028e8 <SystemInit+0x20>)
 80028d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f2:	f107 0310 	add.w	r3, r7, #16
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800290a:	4b1e      	ldr	r3, [pc, #120]	@ (8002984 <MX_TIM2_Init+0x98>)
 800290c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002910:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002912:	4b1c      	ldr	r3, [pc, #112]	@ (8002984 <MX_TIM2_Init+0x98>)
 8002914:	224f      	movs	r2, #79	@ 0x4f
 8002916:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <MX_TIM2_Init+0x98>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800291e:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <MX_TIM2_Init+0x98>)
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002926:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <MX_TIM2_Init+0x98>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <MX_TIM2_Init+0x98>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002932:	4814      	ldr	r0, [pc, #80]	@ (8002984 <MX_TIM2_Init+0x98>)
 8002934:	f003 fddc 	bl	80064f0 <HAL_TIM_Base_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800293e:	f7fe fe28 	bl	8001592 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4619      	mov	r1, r3
 800294e:	480d      	ldr	r0, [pc, #52]	@ (8002984 <MX_TIM2_Init+0x98>)
 8002950:	f003 ffb0 	bl	80068b4 <HAL_TIM_ConfigClockSource>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800295a:	f7fe fe1a 	bl	8001592 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4806      	ldr	r0, [pc, #24]	@ (8002984 <MX_TIM2_Init+0x98>)
 800296c:	f004 f99e 	bl	8006cac <HAL_TIMEx_MasterConfigSynchronization>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002976:	f7fe fe0c 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20001148 	.word	0x20001148

08002988 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002998:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <MX_TIM6_Init+0x68>)
 800299a:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <MX_TIM6_Init+0x6c>)
 800299c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <MX_TIM6_Init+0x68>)
 80029a0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80029a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a6:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <MX_TIM6_Init+0x68>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 80029ac:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <MX_TIM6_Init+0x68>)
 80029ae:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80029b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <MX_TIM6_Init+0x68>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029ba:	480d      	ldr	r0, [pc, #52]	@ (80029f0 <MX_TIM6_Init+0x68>)
 80029bc:	f003 fd98 	bl	80064f0 <HAL_TIM_Base_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80029c6:	f7fe fde4 	bl	8001592 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	4806      	ldr	r0, [pc, #24]	@ (80029f0 <MX_TIM6_Init+0x68>)
 80029d8:	f004 f968 	bl	8006cac <HAL_TIMEx_MasterConfigSynchronization>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80029e2:	f7fe fdd6 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20001194 	.word	0x20001194
 80029f4:	40001000 	.word	0x40001000

080029f8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a08:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <MX_TIM7_Init+0x64>)
 8002a0a:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <MX_TIM7_Init+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8002a0e:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <MX_TIM7_Init+0x64>)
 8002a10:	224f      	movs	r2, #79	@ 0x4f
 8002a12:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <MX_TIM7_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <MX_TIM7_Init+0x64>)
 8002a1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a20:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <MX_TIM7_Init+0x64>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a28:	480c      	ldr	r0, [pc, #48]	@ (8002a5c <MX_TIM7_Init+0x64>)
 8002a2a:	f003 fd61 	bl	80064f0 <HAL_TIM_Base_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002a34:	f7fe fdad 	bl	8001592 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	@ (8002a5c <MX_TIM7_Init+0x64>)
 8002a46:	f004 f931 	bl	8006cac <HAL_TIMEx_MasterConfigSynchronization>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002a50:	f7fe fd9f 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	200011e0 	.word	0x200011e0
 8002a60:	40001400 	.word	0x40001400

08002a64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a74:	d114      	bne.n	8002aa0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a76:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	4a25      	ldr	r2, [pc, #148]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2101      	movs	r1, #1
 8002a92:	201c      	movs	r0, #28
 8002a94:	f001 f96d 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a98:	201c      	movs	r0, #28
 8002a9a:	f001 f986 	bl	8003daa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002a9e:	e032      	b.n	8002b06 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b14 <HAL_TIM_Base_MspInit+0xb0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d114      	bne.n	8002ad4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aae:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002ab0:	f043 0310 	orr.w	r3, r3, #16
 8002ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab6:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	2036      	movs	r0, #54	@ 0x36
 8002ac8:	f001 f953 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002acc:	2036      	movs	r0, #54	@ 0x36
 8002ace:	f001 f96c 	bl	8003daa <HAL_NVIC_EnableIRQ>
}
 8002ad2:	e018      	b.n	8002b06 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b18 <HAL_TIM_Base_MspInit+0xb4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d113      	bne.n	8002b06 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ade:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002ae4:	f043 0320 	orr.w	r3, r3, #32
 8002ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_TIM_Base_MspInit+0xac>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2105      	movs	r1, #5
 8002afa:	2037      	movs	r0, #55	@ 0x37
 8002afc:	f001 f939 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b00:	2037      	movs	r0, #55	@ 0x37
 8002b02:	f001 f952 	bl	8003daa <HAL_NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40001000 	.word	0x40001000
 8002b18:	40001400 	.word	0x40001400

08002b1c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b22:	4a15      	ldr	r2, [pc, #84]	@ (8002b78 <MX_USART1_UART_Init+0x5c>)
 8002b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b28:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b42:	220c      	movs	r2, #12
 8002b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b5e:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b60:	f004 f928 	bl	8006db4 <HAL_UART_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b6a:	f7fe fd12 	bl	8001592 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000122c 	.word	0x2000122c
 8002b78:	40013800 	.word	0x40013800

08002b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0a2      	sub	sp, #136	@ 0x88
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2260      	movs	r2, #96	@ 0x60
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00b febe 	bl	800e91e <memset>
  if(uartHandle->Instance==USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce4 <HAL_UART_MspInit+0x168>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	f040 8096 	bne.w	8002cda <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fc16 	bl	80053ec <HAL_RCCEx_PeriphCLKConfig>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bc6:	f7fe fce4 	bl	8001592 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bca:	4b47      	ldr	r3, [pc, #284]	@ (8002ce8 <HAL_UART_MspInit+0x16c>)
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bce:	4a46      	ldr	r2, [pc, #280]	@ (8002ce8 <HAL_UART_MspInit+0x16c>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bd6:	4b44      	ldr	r3, [pc, #272]	@ (8002ce8 <HAL_UART_MspInit+0x16c>)
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	4b41      	ldr	r3, [pc, #260]	@ (8002ce8 <HAL_UART_MspInit+0x16c>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	4a40      	ldr	r2, [pc, #256]	@ (8002ce8 <HAL_UART_MspInit+0x16c>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce8 <HAL_UART_MspInit+0x16c>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bfa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002bfe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c04:	2301      	movs	r3, #1
 8002c06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c0e:	2307      	movs	r3, #7
 8002c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1e:	f001 fb6d 	bl	80042fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8002c22:	4b32      	ldr	r3, [pc, #200]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c24:	4a32      	ldr	r2, [pc, #200]	@ (8002cf0 <HAL_UART_MspInit+0x174>)
 8002c26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002c28:	4b30      	ldr	r3, [pc, #192]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c34:	4b2d      	ldr	r3, [pc, #180]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c40:	4b2a      	ldr	r3, [pc, #168]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c46:	4b29      	ldr	r3, [pc, #164]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002c4c:	4b27      	ldr	r3, [pc, #156]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c4e:	2220      	movs	r2, #32
 8002c50:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c52:	4b26      	ldr	r3, [pc, #152]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c5a:	4824      	ldr	r0, [pc, #144]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c5c:	f001 f8cc 	bl	8003df8 <HAL_DMA_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002c66:	f7fe fc94 	bl	8001592 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c6e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c70:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <HAL_UART_MspInit+0x170>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8002c76:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002c78:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <HAL_UART_MspInit+0x17c>)
 8002c7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002c7e:	2202      	movs	r2, #2
 8002c80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c82:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002c84:	2210      	movs	r2, #16
 8002c86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c88:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c8e:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002c90:	2280      	movs	r2, #128	@ 0x80
 8002c92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c94:	4b17      	ldr	r3, [pc, #92]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c9a:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ca0:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002ca8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cae:	4811      	ldr	r0, [pc, #68]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002cb0:	f001 f8a2 	bl	8003df8 <HAL_DMA_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002cba:	f7fe fc6a 	bl	8001592 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002cc2:	671a      	str	r2, [r3, #112]	@ 0x70
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf4 <HAL_UART_MspInit+0x178>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2101      	movs	r1, #1
 8002cce:	2025      	movs	r0, #37	@ 0x25
 8002cd0:	f001 f84f 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cd4:	2025      	movs	r0, #37	@ 0x25
 8002cd6:	f001 f868 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3788      	adds	r7, #136	@ 0x88
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40013800 	.word	0x40013800
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	200012b4 	.word	0x200012b4
 8002cf0:	40020480 	.word	0x40020480
 8002cf4:	200012fc 	.word	0x200012fc
 8002cf8:	4002046c 	.word	0x4002046c

08002cfc <ASIC_TransmitReceive>:
volatile uint32_t wrap_count = 0;

uint64_t get_extended_peaktime(uint64_t peaktime);

uint8_t ASIC_TransmitReceive(uint8_t data) //发送接收函数封装
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, 100);
 8002d06:	f107 020f 	add.w	r2, r7, #15
 8002d0a:	1df9      	adds	r1, r7, #7
 8002d0c:	2364      	movs	r3, #100	@ 0x64
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2301      	movs	r3, #1
 8002d12:	4804      	ldr	r0, [pc, #16]	@ (8002d24 <ASIC_TransmitReceive+0x28>)
 8002d14:	f002 ff49 	bl	8005baa <HAL_SPI_TransmitReceive>
    return rx_data;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000f58 	.word	0x20000f58

08002d28 <ASIC_CMD>:

void ASIC_CMD(uint8_t address, uint16_t data) //ASIC发送参数到指定地址
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460a      	mov	r2, r1
 8002d32:	71fb      	strb	r3, [r7, #7]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80bb      	strh	r3, [r7, #4]
	ASIC_CS_LOW();
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4813      	ldr	r0, [pc, #76]	@ (8002d8c <ASIC_CMD+0x64>)
 8002d3e:	f001 fc6f 	bl	8004620 <HAL_GPIO_WritePin>
	ASIC_TransmitReceive(address);
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ffd9 	bl	8002cfc <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff ffd6 	bl	8002cfc <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7ff ffd3 	bl	8002cfc <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7ff ffd0 	bl	8002cfc <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7ff ffcd 	bl	8002cfc <ASIC_TransmitReceive>
	ASIC_TransmitReceive((data >> 8) & 0xFF);
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ffc6 	bl	8002cfc <ASIC_TransmitReceive>
	ASIC_TransmitReceive(data & 0xFF);
 8002d70:	88bb      	ldrh	r3, [r7, #4]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ffc1 	bl	8002cfc <ASIC_TransmitReceive>
	ASIC_CS_HIGH();
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4803      	ldr	r0, [pc, #12]	@ (8002d8c <ASIC_CMD+0x64>)
 8002d80:	f001 fc4e 	bl	8004620 <HAL_GPIO_WritePin>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	48000400 	.word	0x48000400

08002d90 <ReadResult>:

HAL_StatusTypeDef ReadResult(void) //读取相关结果
{
 8002d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d94:	b093      	sub	sp, #76	@ 0x4c
 8002d96:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(EMPTY_GPIO_Port, EMPTY_Pin) == GPIO_PIN_SET)
 8002d98:	2104      	movs	r1, #4
 8002d9a:	4866      	ldr	r0, [pc, #408]	@ (8002f34 <ReadResult+0x1a4>)
 8002d9c:	f001 fc28 	bl	80045f0 <HAL_GPIO_ReadPin>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <ReadResult+0x1a>
	{
		return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0be      	b.n	8002f28 <ReadResult+0x198>
	}
	else
	{
		ASIC_CS_LOW();
 8002daa:	2200      	movs	r2, #0
 8002dac:	2101      	movs	r1, #1
 8002dae:	4861      	ldr	r0, [pc, #388]	@ (8002f34 <ReadResult+0x1a4>)
 8002db0:	f001 fc36 	bl	8004620 <HAL_GPIO_WritePin>
		uint16_t i;
		uint8_t address = 0x80;
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		ASIC_TransmitReceive(address);
 8002dba:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff9c 	bl	8002cfc <ASIC_TransmitReceive>
		for(i = 0;i < 6;i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002dca:	e00c      	b.n	8002de6 <ReadResult+0x56>
			result[i] = ASIC_TransmitReceive(0x00);
 8002dcc:	f8b7 4046 	ldrh.w	r4, [r7, #70]	@ 0x46
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7ff ff93 	bl	8002cfc <ASIC_TransmitReceive>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a57      	ldr	r2, [pc, #348]	@ (8002f38 <ReadResult+0x1a8>)
 8002dda:	5513      	strb	r3, [r2, r4]
		for(i = 0;i < 6;i++)
 8002ddc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002de0:	3301      	adds	r3, #1
 8002de2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002de6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d9ee      	bls.n	8002dcc <ReadResult+0x3c>
		codeid = (result[0] >> 3) + 1;
 8002dee:	4b52      	ldr	r3, [pc, #328]	@ (8002f38 <ReadResult+0x1a8>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	08db      	lsrs	r3, r3, #3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4a50      	ldr	r2, [pc, #320]	@ (8002f3c <ReadResult+0x1ac>)
 8002dfc:	7013      	strb	r3, [r2, #0]
		peaklevel = (result[1] >> 1) | ((result[0] & 0x07 ) << 7);
 8002dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8002f38 <ReadResult+0x1a8>)
 8002e00:	785b      	ldrb	r3, [r3, #1]
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	b21a      	sxth	r2, r3
 8002e08:	4b4b      	ldr	r3, [pc, #300]	@ (8002f38 <ReadResult+0x1a8>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	01db      	lsls	r3, r3, #7
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	f403 7360 	and.w	r3, r3, #896	@ 0x380
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b21b      	sxth	r3, r3
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4a48      	ldr	r2, [pc, #288]	@ (8002f40 <ReadResult+0x1b0>)
 8002e20:	8013      	strh	r3, [r2, #0]
		peaktime = ((uint64_t)(result[1] & 0x01) << 32) |
 8002e22:	4b45      	ldr	r3, [pc, #276]	@ (8002f38 <ReadResult+0x1a8>)
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e38:	000b      	movs	r3, r1
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	637b      	str	r3, [r7, #52]	@ 0x34
		           ((uint64_t)result[2] << 24) |
 8002e46:	4b3c      	ldr	r3, [pc, #240]	@ (8002f38 <ReadResult+0x1a8>)
 8002e48:	789b      	ldrb	r3, [r3, #2]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8002e56:	460b      	mov	r3, r1
 8002e58:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	ea4f 6803 	mov.w	r8, r3, lsl #24
		peaktime = ((uint64_t)(result[1] & 0x01) << 32) |
 8002e62:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002e66:	460b      	mov	r3, r1
 8002e68:	ea43 0308 	orr.w	r3, r3, r8
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	ea43 0309 	orr.w	r3, r3, r9
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
		           ((uint64_t)result[3] << 16) |
 8002e76:	4b30      	ldr	r3, [pc, #192]	@ (8002f38 <ReadResult+0x1a8>)
 8002e78:	78db      	ldrb	r3, [r3, #3]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	61fa      	str	r2, [r7, #28]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002e8e:	4649      	mov	r1, r9
 8002e90:	040b      	lsls	r3, r1, #16
 8002e92:	4641      	mov	r1, r8
 8002e94:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002e98:	4641      	mov	r1, r8
 8002e9a:	040a      	lsls	r2, r1, #16
		           ((uint64_t)result[2] << 24) |
 8002e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea0:	4641      	mov	r1, r8
 8002ea2:	ea41 0502 	orr.w	r5, r1, r2
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	4319      	orrs	r1, r3
 8002eaa:	460e      	mov	r6, r1
		           ((uint64_t)result[4] << 8)  |
 8002eac:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <ReadResult+0x1a8>)
 8002eae:	791b      	ldrb	r3, [r3, #4]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	617a      	str	r2, [r7, #20]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	020b      	lsls	r3, r1, #8
 8002ec8:	4641      	mov	r1, r8
 8002eca:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002ece:	4641      	mov	r1, r8
 8002ed0:	020a      	lsls	r2, r1, #8
		           ((uint64_t)result[3] << 16) |
 8002ed2:	ea45 0a02 	orr.w	sl, r5, r2
 8002ed6:	ea46 0b03 	orr.w	fp, r6, r3
		           (uint64_t)result[5];
 8002eda:	4b17      	ldr	r3, [pc, #92]	@ (8002f38 <ReadResult+0x1a8>)
 8002edc:	795b      	ldrb	r3, [r3, #5]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	60fa      	str	r2, [r7, #12]
		           ((uint64_t)result[4] << 8)  |
 8002ee6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002eea:	460b      	mov	r3, r1
 8002eec:	ea4a 0303 	orr.w	r3, sl, r3
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	ea4b 0303 	orr.w	r3, fp, r3
 8002ef8:	607b      	str	r3, [r7, #4]
		peaktime = ((uint64_t)(result[1] & 0x01) << 32) |
 8002efa:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <ReadResult+0x1b4>)
 8002efc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f00:	e9c3 1200 	strd	r1, r2, [r3]
		peaktime = get_extended_peaktime(peaktime);
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <ReadResult+0x1b4>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f000 f81b 	bl	8002f48 <get_extended_peaktime>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	490b      	ldr	r1, [pc, #44]	@ (8002f44 <ReadResult+0x1b4>)
 8002f18:	e9c1 2300 	strd	r2, r3, [r1]
		ASIC_CS_HIGH();
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4804      	ldr	r0, [pc, #16]	@ (8002f34 <ReadResult+0x1a4>)
 8002f22:	f001 fb7d 	bl	8004620 <HAL_GPIO_WritePin>
		return HAL_OK;
 8002f26:	2300      	movs	r3, #0
	}
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	374c      	adds	r7, #76	@ 0x4c
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f32:	bf00      	nop
 8002f34:	48000400 	.word	0x48000400
 8002f38:	20001350 	.word	0x20001350
 8002f3c:	20001344 	.word	0x20001344
 8002f40:	20001346 	.word	0x20001346
 8002f44:	20001348 	.word	0x20001348

08002f48 <get_extended_peaktime>:
	HAL_Delay(50);
	HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
}

uint64_t get_extended_peaktime(uint64_t peaktime)
{
 8002f48:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	e9c7 0100 	strd	r0, r1, [r7]
	if(peaktime < pre_peaktime)
 8002f54:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <get_extended_peaktime+0x68>)
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f5e:	4290      	cmp	r0, r2
 8002f60:	eb71 0303 	sbcs.w	r3, r1, r3
 8002f64:	d204      	bcs.n	8002f70 <get_extended_peaktime+0x28>
		wrap_count++;
 8002f66:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <get_extended_peaktime+0x6c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	4a11      	ldr	r2, [pc, #68]	@ (8002fb4 <get_extended_peaktime+0x6c>)
 8002f6e:	6013      	str	r3, [r2, #0]
	pre_peaktime = peaktime;
 8002f70:	490f      	ldr	r1, [pc, #60]	@ (8002fb0 <get_extended_peaktime+0x68>)
 8002f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f76:	e9c1 2300 	strd	r2, r3, [r1]
	return peaktime + (wrap_count * PEAKTIME_PERIOD);
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <get_extended_peaktime+0x6c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	4698      	mov	r8, r3
 8002f82:	4691      	mov	r9, r2
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8002f90:	2200      	movs	r2, #0
 8002f92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f96:	1814      	adds	r4, r2, r0
 8002f98:	eb43 0501 	adc.w	r5, r3, r1
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	462b      	mov	r3, r5
}
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20001358 	.word	0x20001358
 8002fb4:	20001360 	.word	0x20001360

08002fb8 <Checksum>:
{
    return (data[0] << 8) | data[1];
}

uint16_t Checksum(uint8_t *data, uint16_t length) //逐字节校检和
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
	uint16_t sum;
    if(length <= 1)
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d804      	bhi.n	8002fd4 <Checksum+0x1c>
    {
    	sum = (uint16_t)data[0];
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	e010      	b.n	8002ff6 <Checksum+0x3e>
    }
    else
    {
    	sum = (uint16_t)data[length-1]+Checksum(data, length - 1);
 8002fd4:	887b      	ldrh	r3, [r7, #2]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	461c      	mov	r4, r3
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ffe5 	bl	8002fb8 <Checksum>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4423      	add	r3, r4
 8002ff2:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002ff4:	89fb      	ldrh	r3, [r7, #14]
    }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd90      	pop	{r4, r7, pc}
	...

08003000 <get_current_systick>:
	}
	UART_Send_Data(tx_buffer, txlen);
}

time_t get_current_systick(void) //获取当前系统计时 (µs)
{
 8003000:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
  uint32_t high1, low;
  do
  {
    high1 = (uint32_t)(high_counter >> 32);
 8003008:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <get_current_systick+0x68>)
 800300a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	002a      	movs	r2, r5
 8003018:	17eb      	asrs	r3, r5, #31
 800301a:	4613      	mov	r3, r2
 800301c:	607b      	str	r3, [r7, #4]
    low = TIM2->CNT;
 800301e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	603b      	str	r3, [r7, #0]
  } while (high1 != (uint32_t)(high_counter >> 32));
 8003026:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <get_current_systick+0x68>)
 8003028:	e9d3 4500 	ldrd	r4, r5, [r3]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	002a      	movs	r2, r5
 8003036:	17eb      	asrs	r3, r5, #31
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4293      	cmp	r3, r2
 800303c:	d1e4      	bne.n	8003008 <get_current_systick+0x8>
  return high_counter + low; // 返回64位，低32位为定时器记录，高32位由high_counter记录
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2200      	movs	r2, #0
 8003042:	4618      	mov	r0, r3
 8003044:	4611      	mov	r1, r2
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <get_current_systick+0x68>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	eb10 0802 	adds.w	r8, r0, r2
 8003050:	eb41 0903 	adc.w	r9, r1, r3
 8003054:	4642      	mov	r2, r8
 8003056:	464b      	mov	r3, r9
}
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20001b70 	.word	0x20001b70

0800306c <set_base_time>:

void set_base_time(time_t timestamp) // 设置时间基准
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	e9c7 0100 	strd	r0, r1, [r7]
  base_timestamp = timestamp;
 8003076:	4908      	ldr	r1, [pc, #32]	@ (8003098 <set_base_time+0x2c>)
 8003078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800307c:	e9c1 2300 	strd	r2, r3, [r1]
  base_systick = get_current_systick();
 8003080:	f7ff ffbe 	bl	8003000 <get_current_systick>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4904      	ldr	r1, [pc, #16]	@ (800309c <set_base_time+0x30>)
 800308a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20001b78 	.word	0x20001b78
 800309c:	20001b80 	.word	0x20001b80

080030a0 <HAL_TIM_PeriodElapsedCallback>:
	time_buffer[rp3 - rp1 + 11] = tail & 0xFF;
	UART_Send_Data(time_buffer, txlen);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //5s触发增加一次heartcount记数，每30s发送一次心跳
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d106      	bne.n	80030c0 <HAL_TIM_PeriodElapsedCallback+0x20>
		  heartcount++;
 80030b2:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b0f      	ldr	r3, [pc, #60]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80030be:	801a      	strh	r2, [r3, #0]
	  if(heartcount >= 6)
 80030c0:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d904      	bls.n	80030d4 <HAL_TIM_PeriodElapsedCallback+0x34>
	  {
		  Sendheart();
 80030ca:	f000 f81d 	bl	8003108 <Sendheart>
		  heartcount = 0;
 80030ce:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	801a      	strh	r2, [r3, #0]
	  }
	  if (htim->Instance == TIM7)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a09      	ldr	r2, [pc, #36]	@ (8003100 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d108      	bne.n	80030f0 <HAL_TIM_PeriodElapsedCallback+0x50>
	  {
		  if (timer_ms_count > 0)
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_TIM_PeriodElapsedCallback+0x50>
			  timer_ms_count--;
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	4a05      	ldr	r2, [pc, #20]	@ (8003104 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80030ee:	6013      	str	r3, [r2, #0]
	  }
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40001000 	.word	0x40001000
 80030fc:	20001b8a 	.word	0x20001b8a
 8003100:	40001400 	.word	0x40001400
 8003104:	20000f3c 	.word	0x20000f3c

08003108 <Sendheart>:

void Sendheart(void) //发送心跳
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
	  uint16_t length = 14;
 800310e:	230e      	movs	r3, #14
 8003110:	80fb      	strh	r3, [r7, #6]
	  uint16_t head = HEAD;
 8003112:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003116:	80bb      	strh	r3, [r7, #4]
	  uint16_t tail = TAIL;
 8003118:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 800311c:	807b      	strh	r3, [r7, #2]
	  hearttx[0] = (head >> 8) & 0xFF;
 800311e:	88bb      	ldrh	r3, [r7, #4]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	b29b      	uxth	r3, r3
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4b27      	ldr	r3, [pc, #156]	@ (80031c4 <Sendheart+0xbc>)
 8003128:	701a      	strb	r2, [r3, #0]
	  hearttx[1] = head & 0xFF;
 800312a:	88bb      	ldrh	r3, [r7, #4]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <Sendheart+0xbc>)
 8003130:	705a      	strb	r2, [r3, #1]
	  hearttx[2] = version;
 8003132:	4b25      	ldr	r3, [pc, #148]	@ (80031c8 <Sendheart+0xc0>)
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	4b23      	ldr	r3, [pc, #140]	@ (80031c4 <Sendheart+0xbc>)
 8003138:	709a      	strb	r2, [r3, #2]
	  hearttx[3] = (receivercode >> 8) & 0xFF;
 800313a:	4b24      	ldr	r3, [pc, #144]	@ (80031cc <Sendheart+0xc4>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	b29b      	uxth	r3, r3
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <Sendheart+0xbc>)
 8003148:	70da      	strb	r2, [r3, #3]
	  hearttx[4] = receivercode & 0xFF;
 800314a:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <Sendheart+0xc4>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b1c      	ldr	r3, [pc, #112]	@ (80031c4 <Sendheart+0xbc>)
 8003154:	711a      	strb	r2, [r3, #4]
	  hearttx[5] = 0x01;
 8003156:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <Sendheart+0xbc>)
 8003158:	2201      	movs	r2, #1
 800315a:	715a      	strb	r2, [r3, #5]
	  hearttx[6] = 0x00;
 800315c:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <Sendheart+0xbc>)
 800315e:	2200      	movs	r2, #0
 8003160:	719a      	strb	r2, [r3, #6]
	  hearttx[7] = 0x02;
 8003162:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <Sendheart+0xbc>)
 8003164:	2202      	movs	r2, #2
 8003166:	71da      	strb	r2, [r3, #7]
	  hearttx[8] = state;
 8003168:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <Sendheart+0xc8>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <Sendheart+0xbc>)
 8003170:	721a      	strb	r2, [r3, #8]
	  hearttx[9] = (uint8_t)sampling_ready;
 8003172:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <Sendheart+0xcc>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <Sendheart+0xbc>)
 800317c:	725a      	strb	r2, [r3, #9]
	  uint16_t SUM = Checksum(&hearttx[2], 8);
 800317e:	2108      	movs	r1, #8
 8003180:	4815      	ldr	r0, [pc, #84]	@ (80031d8 <Sendheart+0xd0>)
 8003182:	f7ff ff19 	bl	8002fb8 <Checksum>
 8003186:	4603      	mov	r3, r0
 8003188:	803b      	strh	r3, [r7, #0]
	  hearttx[10] = (SUM >> 8) & 0xFF;
 800318a:	883b      	ldrh	r3, [r7, #0]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	b29b      	uxth	r3, r3
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <Sendheart+0xbc>)
 8003194:	729a      	strb	r2, [r3, #10]
	  hearttx[11] = SUM & 0xFF;
 8003196:	883b      	ldrh	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <Sendheart+0xbc>)
 800319c:	72da      	strb	r2, [r3, #11]
	  hearttx[12] = (tail >> 8) & 0xFF;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <Sendheart+0xbc>)
 80031a8:	731a      	strb	r2, [r3, #12]
	  hearttx[13] = tail & 0xFF;
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <Sendheart+0xbc>)
 80031b0:	735a      	strb	r2, [r3, #13]
	  UART_Send_Data(hearttx, length);
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4619      	mov	r1, r3
 80031b6:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <Sendheart+0xbc>)
 80031b8:	f000 fb62 	bl	8003880 <UART_Send_Data>
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20002bec 	.word	0x20002bec
 80031c8:	20000028 	.word	0x20000028
 80031cc:	2000002a 	.word	0x2000002a
 80031d0:	20001b88 	.word	0x20001b88
 80031d4:	2000002c 	.word	0x2000002c
 80031d8:	20002bee 	.word	0x20002bee

080031dc <Send_Data>:

void Send_Data(void) // 数据上送
{
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e0:	b087      	sub	sp, #28
 80031e2:	af00      	add	r7, sp, #0
	  uint16_t head = HEAD;
 80031e4:	f64a 2455 	movw	r4, #43605	@ 0xaa55
 80031e8:	82bc      	strh	r4, [r7, #20]
	  uint16_t tail = TAIL;
 80031ea:	f647 64fe 	movw	r4, #32510	@ 0x7efe
 80031ee:	827c      	strh	r4, [r7, #18]
	  datatx[0] = (head >> 8) & 0xFF;
 80031f0:	8abc      	ldrh	r4, [r7, #20]
 80031f2:	0a24      	lsrs	r4, r4, #8
 80031f4:	b2a4      	uxth	r4, r4
 80031f6:	b2e5      	uxtb	r5, r4
 80031f8:	4c47      	ldr	r4, [pc, #284]	@ (8003318 <Send_Data+0x13c>)
 80031fa:	7025      	strb	r5, [r4, #0]
	  datatx[1] = head & 0xFF;
 80031fc:	8abc      	ldrh	r4, [r7, #20]
 80031fe:	b2e5      	uxtb	r5, r4
 8003200:	4c45      	ldr	r4, [pc, #276]	@ (8003318 <Send_Data+0x13c>)
 8003202:	7065      	strb	r5, [r4, #1]
	  datatx[2] = version;
 8003204:	4c45      	ldr	r4, [pc, #276]	@ (800331c <Send_Data+0x140>)
 8003206:	7825      	ldrb	r5, [r4, #0]
 8003208:	4c43      	ldr	r4, [pc, #268]	@ (8003318 <Send_Data+0x13c>)
 800320a:	70a5      	strb	r5, [r4, #2]
	  datatx[3] = (receivercode >> 8) & 0xFF;
 800320c:	4c44      	ldr	r4, [pc, #272]	@ (8003320 <Send_Data+0x144>)
 800320e:	8824      	ldrh	r4, [r4, #0]
 8003210:	b2a4      	uxth	r4, r4
 8003212:	0a24      	lsrs	r4, r4, #8
 8003214:	b2a4      	uxth	r4, r4
 8003216:	b2e5      	uxtb	r5, r4
 8003218:	4c3f      	ldr	r4, [pc, #252]	@ (8003318 <Send_Data+0x13c>)
 800321a:	70e5      	strb	r5, [r4, #3]
	  datatx[4] = receivercode & 0xFF;
 800321c:	4c40      	ldr	r4, [pc, #256]	@ (8003320 <Send_Data+0x144>)
 800321e:	8824      	ldrh	r4, [r4, #0]
 8003220:	b2a4      	uxth	r4, r4
 8003222:	b2e5      	uxtb	r5, r4
 8003224:	4c3c      	ldr	r4, [pc, #240]	@ (8003318 <Send_Data+0x13c>)
 8003226:	7125      	strb	r5, [r4, #4]
	  datatx[5] = 0x01;
 8003228:	4c3b      	ldr	r4, [pc, #236]	@ (8003318 <Send_Data+0x13c>)
 800322a:	2501      	movs	r5, #1
 800322c:	7165      	strb	r5, [r4, #5]
	  datatx[6] = 0x02;
 800322e:	4c3a      	ldr	r4, [pc, #232]	@ (8003318 <Send_Data+0x13c>)
 8003230:	2502      	movs	r5, #2
 8003232:	71a5      	strb	r5, [r4, #6]
	  datatx[7] = 0x0B;
 8003234:	4c38      	ldr	r4, [pc, #224]	@ (8003318 <Send_Data+0x13c>)
 8003236:	250b      	movs	r5, #11
 8003238:	71e5      	strb	r5, [r4, #7]
	  datatx[8] = codeid;
 800323a:	4c3a      	ldr	r4, [pc, #232]	@ (8003324 <Send_Data+0x148>)
 800323c:	7825      	ldrb	r5, [r4, #0]
 800323e:	4c36      	ldr	r4, [pc, #216]	@ (8003318 <Send_Data+0x13c>)
 8003240:	7225      	strb	r5, [r4, #8]
	  datatx[9] = (peaklevel >> 8) & 0xFF;
 8003242:	4c39      	ldr	r4, [pc, #228]	@ (8003328 <Send_Data+0x14c>)
 8003244:	8824      	ldrh	r4, [r4, #0]
 8003246:	0a24      	lsrs	r4, r4, #8
 8003248:	b2a4      	uxth	r4, r4
 800324a:	b2e5      	uxtb	r5, r4
 800324c:	4c32      	ldr	r4, [pc, #200]	@ (8003318 <Send_Data+0x13c>)
 800324e:	7265      	strb	r5, [r4, #9]
	  datatx[10] = peaklevel & 0xFF;
 8003250:	4c35      	ldr	r4, [pc, #212]	@ (8003328 <Send_Data+0x14c>)
 8003252:	8824      	ldrh	r4, [r4, #0]
 8003254:	b2e5      	uxtb	r5, r4
 8003256:	4c30      	ldr	r4, [pc, #192]	@ (8003318 <Send_Data+0x13c>)
 8003258:	72a5      	strb	r5, [r4, #10]
	  time_t datatime = base_timestamp + peaktime - base_systick;
 800325a:	4c34      	ldr	r4, [pc, #208]	@ (800332c <Send_Data+0x150>)
 800325c:	e9d4 4500 	ldrd	r4, r5, [r4]
 8003260:	46a0      	mov	r8, r4
 8003262:	46a9      	mov	r9, r5
 8003264:	4c32      	ldr	r4, [pc, #200]	@ (8003330 <Send_Data+0x154>)
 8003266:	e9d4 4500 	ldrd	r4, r5, [r4]
 800326a:	eb18 0004 	adds.w	r0, r8, r4
 800326e:	eb49 0105 	adc.w	r1, r9, r5
 8003272:	4c30      	ldr	r4, [pc, #192]	@ (8003334 <Send_Data+0x158>)
 8003274:	e9d4 4500 	ldrd	r4, r5, [r4]
 8003278:	ebb0 0a04 	subs.w	sl, r0, r4
 800327c:	eb61 0b05 	sbc.w	fp, r1, r5
 8003280:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	  for(uint16_t i = 0;i < 8;i++)
 8003284:	2100      	movs	r1, #0
 8003286:	82f9      	strh	r1, [r7, #22]
 8003288:	e01d      	b.n	80032c6 <Send_Data+0xea>
		  datatx[i + 11] = (datatime >> (56 - 8 * i)) & 0xFF;
 800328a:	8af9      	ldrh	r1, [r7, #22]
 800328c:	f1c1 0107 	rsb	r1, r1, #7
 8003290:	00cc      	lsls	r4, r1, #3
 8003292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003296:	f1c4 0620 	rsb	r6, r4, #32
 800329a:	f1b4 0520 	subs.w	r5, r4, #32
 800329e:	fa20 f204 	lsr.w	r2, r0, r4
 80032a2:	fa01 f606 	lsl.w	r6, r1, r6
 80032a6:	ea42 0206 	orr.w	r2, r2, r6
 80032aa:	d402      	bmi.n	80032b2 <Send_Data+0xd6>
 80032ac:	fa41 f505 	asr.w	r5, r1, r5
 80032b0:	432a      	orrs	r2, r5
 80032b2:	fa41 f304 	asr.w	r3, r1, r4
 80032b6:	8af9      	ldrh	r1, [r7, #22]
 80032b8:	310b      	adds	r1, #11
 80032ba:	b2d4      	uxtb	r4, r2
 80032bc:	4816      	ldr	r0, [pc, #88]	@ (8003318 <Send_Data+0x13c>)
 80032be:	5444      	strb	r4, [r0, r1]
	  for(uint16_t i = 0;i < 8;i++)
 80032c0:	8af9      	ldrh	r1, [r7, #22]
 80032c2:	3101      	adds	r1, #1
 80032c4:	82f9      	strh	r1, [r7, #22]
 80032c6:	8af9      	ldrh	r1, [r7, #22]
 80032c8:	2907      	cmp	r1, #7
 80032ca:	d9de      	bls.n	800328a <Send_Data+0xae>
	  uint16_t SUM = Checksum(&datatx[2], 17);
 80032cc:	2111      	movs	r1, #17
 80032ce:	481a      	ldr	r0, [pc, #104]	@ (8003338 <Send_Data+0x15c>)
 80032d0:	f7ff fe72 	bl	8002fb8 <Checksum>
 80032d4:	4603      	mov	r3, r0
 80032d6:	80fb      	strh	r3, [r7, #6]
	  datatx[19] = (SUM >> 8) & 0xFF;
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	b29b      	uxth	r3, r3
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <Send_Data+0x13c>)
 80032e2:	74da      	strb	r2, [r3, #19]
	  datatx[20] = SUM & 0xFF;
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <Send_Data+0x13c>)
 80032ea:	751a      	strb	r2, [r3, #20]
	  datatx[21] = (tail >> 8) & 0xFF;
 80032ec:	8a7b      	ldrh	r3, [r7, #18]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <Send_Data+0x13c>)
 80032f6:	755a      	strb	r2, [r3, #21]
	  datatx[22] = tail & 0xFF;
 80032f8:	8a7b      	ldrh	r3, [r7, #18]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <Send_Data+0x13c>)
 80032fe:	759a      	strb	r2, [r3, #22]
	  UART_Send_Data(datatx, transmitlength);
 8003300:	4b0e      	ldr	r3, [pc, #56]	@ (800333c <Send_Data+0x160>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	4804      	ldr	r0, [pc, #16]	@ (8003318 <Send_Data+0x13c>)
 8003308:	f000 faba 	bl	8003880 <UART_Send_Data>
}
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003316:	bf00      	nop
 8003318:	20001b8c 	.word	0x20001b8c
 800331c:	20000028 	.word	0x20000028
 8003320:	2000002a 	.word	0x2000002a
 8003324:	20001344 	.word	0x20001344
 8003328:	20001346 	.word	0x20001346
 800332c:	20001b78 	.word	0x20001b78
 8003330:	20001348 	.word	0x20001348
 8003334:	20001b80 	.word	0x20001b80
 8003338:	20001b8e 	.word	0x20001b8e
 800333c:	2000002e 	.word	0x2000002e

08003340 <maintain_processing_buffer>:

void maintain_processing_buffer(void) //存储数据超过512字节且处理数据也超过512字节后前移
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
	uint8_t *address = processing_buffer;
 8003346:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <maintain_processing_buffer+0x70>)
 8003348:	60fb      	str	r3, [r7, #12]
    if (wp - address > BUF_SIZE/2 && rp != wp)
 800334a:	4b1a      	ldr	r3, [pc, #104]	@ (80033b4 <maintain_processing_buffer+0x74>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003356:	dd27      	ble.n	80033a8 <maintain_processing_buffer+0x68>
 8003358:	4b17      	ldr	r3, [pc, #92]	@ (80033b8 <maintain_processing_buffer+0x78>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <maintain_processing_buffer+0x74>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d021      	beq.n	80033a8 <maintain_processing_buffer+0x68>
    {
        uint16_t move_len = rp - processing_buffer;
 8003364:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <maintain_processing_buffer+0x78>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a11      	ldr	r2, [pc, #68]	@ (80033b0 <maintain_processing_buffer+0x70>)
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	817b      	strh	r3, [r7, #10]
 800336e:	2310      	movs	r3, #16
 8003370:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f383 8811 	msr	BASEPRI, r3
}
 8003378:	bf00      	nop
        __set_BASEPRI(1 << 4);
        memmove(processing_buffer, rp, move_len);
 800337a:	4b0f      	ldr	r3, [pc, #60]	@ (80033b8 <maintain_processing_buffer+0x78>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	897a      	ldrh	r2, [r7, #10]
 8003380:	4619      	mov	r1, r3
 8003382:	480b      	ldr	r0, [pc, #44]	@ (80033b0 <maintain_processing_buffer+0x70>)
 8003384:	f00b fab1 	bl	800e8ea <memmove>
        wp = wp - move_len;
 8003388:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <maintain_processing_buffer+0x74>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	897b      	ldrh	r3, [r7, #10]
 800338e:	425b      	negs	r3, r3
 8003390:	4413      	add	r3, r2
 8003392:	4a08      	ldr	r2, [pc, #32]	@ (80033b4 <maintain_processing_buffer+0x74>)
 8003394:	6013      	str	r3, [r2, #0]
        rp = processing_buffer;
 8003396:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <maintain_processing_buffer+0x78>)
 8003398:	4a05      	ldr	r2, [pc, #20]	@ (80033b0 <maintain_processing_buffer+0x70>)
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f383 8811 	msr	BASEPRI, r3
}
 80033a6:	bf00      	nop
        __set_BASEPRI(0);
    }
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20001364 	.word	0x20001364
 80033b4:	20000020 	.word	0x20000020
 80033b8:	20000024 	.word	0x20000024

080033bc <GPS_message_process>:
	uint16_t length = 14;
	UART_Send_Data(error_buffer, length);
}

Timing_Status GPS_message_process(uint8_t *time)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b0aa      	sub	sp, #168	@ 0xa8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	while (wp > rp)
 80033c4:	e054      	b.n	8003470 <GPS_message_process+0xb4>
	{
		if(*rp == '$')
 80033c6:	4b9f      	ldr	r3, [pc, #636]	@ (8003644 <GPS_message_process+0x288>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b24      	cmp	r3, #36	@ 0x24
 80033ce:	d14a      	bne.n	8003466 <GPS_message_process+0xaa>
		{
			uint8_t str1[6] = "$GPRMC";
 80033d0:	4a9d      	ldr	r2, [pc, #628]	@ (8003648 <GPS_message_process+0x28c>)
 80033d2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80033d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033da:	6018      	str	r0, [r3, #0]
 80033dc:	3304      	adds	r3, #4
 80033de:	8019      	strh	r1, [r3, #0]
			uint8_t str2[6] = "$GNRMC";
 80033e0:	4a9a      	ldr	r2, [pc, #616]	@ (800364c <GPS_message_process+0x290>)
 80033e2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80033e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ea:	6018      	str	r0, [r3, #0]
 80033ec:	3304      	adds	r3, #4
 80033ee:	8019      	strh	r1, [r3, #0]
			if(strncmp(rp, str1, 6) == 0 || strncmp(rp, str2, 6) == 0)
 80033f0:	4b94      	ldr	r3, [pc, #592]	@ (8003644 <GPS_message_process+0x288>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80033f8:	2206      	movs	r2, #6
 80033fa:	4618      	mov	r0, r3
 80033fc:	f00b fa97 	bl	800e92e <strncmp>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <GPS_message_process+0x60>
 8003406:	4b8f      	ldr	r3, [pc, #572]	@ (8003644 <GPS_message_process+0x288>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800340e:	2206      	movs	r2, #6
 8003410:	4618      	mov	r0, r3
 8003412:	f00b fa8c 	bl	800e92e <strncmp>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d11e      	bne.n	800345a <GPS_message_process+0x9e>
			{
				rp2 = rp + 6;
 800341c:	4b89      	ldr	r3, [pc, #548]	@ (8003644 <GPS_message_process+0x288>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3306      	adds	r3, #6
 8003422:	4a8b      	ldr	r2, [pc, #556]	@ (8003650 <GPS_message_process+0x294>)
 8003424:	6013      	str	r3, [r2, #0]
				uint8_t str3[2] = ",,";
 8003426:	f642 432c 	movw	r3, #11308	@ 0x2c2c
 800342a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
				if(strncmp(rp2, str3, 2) == 0)
 800342e:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <GPS_message_process+0x294>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8003436:	2202      	movs	r2, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f00b fa78 	bl	800e92e <strncmp>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <GPS_message_process+0x94>
					rp++;
 8003444:	4b7f      	ldr	r3, [pc, #508]	@ (8003644 <GPS_message_process+0x288>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	4a7e      	ldr	r2, [pc, #504]	@ (8003644 <GPS_message_process+0x288>)
 800344c:	6013      	str	r3, [r2, #0]
			{
 800344e:	e00f      	b.n	8003470 <GPS_message_process+0xb4>
				else
				{
					rp1 = rp;
 8003450:	4b7c      	ldr	r3, [pc, #496]	@ (8003644 <GPS_message_process+0x288>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a7f      	ldr	r2, [pc, #508]	@ (8003654 <GPS_message_process+0x298>)
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e010      	b.n	800347c <GPS_message_process+0xc0>
					break;
				}
			}
			else
				rp++;
 800345a:	4b7a      	ldr	r3, [pc, #488]	@ (8003644 <GPS_message_process+0x288>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3301      	adds	r3, #1
 8003460:	4a78      	ldr	r2, [pc, #480]	@ (8003644 <GPS_message_process+0x288>)
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e004      	b.n	8003470 <GPS_message_process+0xb4>
		}
		else
			rp++;
 8003466:	4b77      	ldr	r3, [pc, #476]	@ (8003644 <GPS_message_process+0x288>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3301      	adds	r3, #1
 800346c:	4a75      	ldr	r2, [pc, #468]	@ (8003644 <GPS_message_process+0x288>)
 800346e:	6013      	str	r3, [r2, #0]
	while (wp > rp)
 8003470:	4b79      	ldr	r3, [pc, #484]	@ (8003658 <GPS_message_process+0x29c>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b73      	ldr	r3, [pc, #460]	@ (8003644 <GPS_message_process+0x288>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d8a4      	bhi.n	80033c6 <GPS_message_process+0xa>
	}
	if(rp == wp)
 800347c:	4b71      	ldr	r3, [pc, #452]	@ (8003644 <GPS_message_process+0x288>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b75      	ldr	r3, [pc, #468]	@ (8003658 <GPS_message_process+0x29c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d109      	bne.n	800349c <GPS_message_process+0xe0>
	{
		data_ready = 0;
 8003488:	4b74      	ldr	r3, [pc, #464]	@ (800365c <GPS_message_process+0x2a0>)
 800348a:	2200      	movs	r2, #0
 800348c:	801a      	strh	r2, [r3, #0]
		return Timing_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0d3      	b.n	800363a <GPS_message_process+0x27e>
	}
	else
	{
		while(*rp != '\n')
			rp++;
 8003492:	4b6c      	ldr	r3, [pc, #432]	@ (8003644 <GPS_message_process+0x288>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3301      	adds	r3, #1
 8003498:	4a6a      	ldr	r2, [pc, #424]	@ (8003644 <GPS_message_process+0x288>)
 800349a:	6013      	str	r3, [r2, #0]
		while(*rp != '\n')
 800349c:	4b69      	ldr	r3, [pc, #420]	@ (8003644 <GPS_message_process+0x288>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b0a      	cmp	r3, #10
 80034a4:	d1f5      	bne.n	8003492 <GPS_message_process+0xd6>
		rp2 = rp;
 80034a6:	4b67      	ldr	r3, [pc, #412]	@ (8003644 <GPS_message_process+0x288>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a69      	ldr	r2, [pc, #420]	@ (8003650 <GPS_message_process+0x294>)
 80034ac:	6013      	str	r3, [r2, #0]
		uint16_t len = rp2 - rp1 + 1;
 80034ae:	4b68      	ldr	r3, [pc, #416]	@ (8003650 <GPS_message_process+0x294>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b68      	ldr	r3, [pc, #416]	@ (8003654 <GPS_message_process+0x298>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
		uint8_t GPS_buffer[128];
		uint16_t head = HEAD;
 80034c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80034c4:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
		uint16_t tail = TAIL;
 80034c8:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 80034cc:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
		GPS_buffer[0] = (head >> 8) & 0xFF;
 80034d0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	723b      	strb	r3, [r7, #8]
		GPS_buffer[1] = head & 0xFF;
 80034dc:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	727b      	strb	r3, [r7, #9]
		GPS_buffer[2] = version;
 80034e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003660 <GPS_message_process+0x2a4>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	72bb      	strb	r3, [r7, #10]
		GPS_buffer[3] = (receivercode >> 8) & 0xFF;
 80034ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003664 <GPS_message_process+0x2a8>)
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	72fb      	strb	r3, [r7, #11]
		GPS_buffer[4] = receivercode & 0xFF;
 80034f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003664 <GPS_message_process+0x2a8>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	733b      	strb	r3, [r7, #12]
		GPS_buffer[5] = 0x01;
 8003502:	2301      	movs	r3, #1
 8003504:	737b      	strb	r3, [r7, #13]
		GPS_buffer[6] = 0x06;
 8003506:	2306      	movs	r3, #6
 8003508:	73bb      	strb	r3, [r7, #14]
		GPS_buffer[7] = len;
 800350a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800350e:	b2db      	uxtb	r3, r3
 8003510:	73fb      	strb	r3, [r7, #15]
		memcpy(&GPS_buffer[8], rp1, len);
 8003512:	4b50      	ldr	r3, [pc, #320]	@ (8003654 <GPS_message_process+0x298>)
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800351a:	f107 0308 	add.w	r3, r7, #8
 800351e:	3308      	adds	r3, #8
 8003520:	4618      	mov	r0, r3
 8003522:	f00c f832 	bl	800f58a <memcpy>
		uint16_t SUM = Checksum(&GPS_buffer[2], len + 6);
 8003526:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800352a:	3306      	adds	r3, #6
 800352c:	b29a      	uxth	r2, r3
 800352e:	f107 0308 	add.w	r3, r7, #8
 8003532:	3302      	adds	r3, #2
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fd3e 	bl	8002fb8 <Checksum>
 800353c:	4603      	mov	r3, r0
 800353e:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
		GPS_buffer[8 + len] = (SUM >> 8) & 0xFF;
 8003542:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b29a      	uxth	r2, r3
 800354a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800354e:	3308      	adds	r3, #8
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	33a8      	adds	r3, #168	@ 0xa8
 8003554:	443b      	add	r3, r7
 8003556:	f803 2ca0 	strb.w	r2, [r3, #-160]
		GPS_buffer[9 + len] = SUM & 0xFF;
 800355a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800355e:	3309      	adds	r3, #9
 8003560:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	33a8      	adds	r3, #168	@ 0xa8
 8003568:	443b      	add	r3, r7
 800356a:	f803 2ca0 	strb.w	r2, [r3, #-160]
		GPS_buffer[10 + len] = (tail >> 8) & 0xFF;
 800356e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	b29a      	uxth	r2, r3
 8003576:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800357a:	330a      	adds	r3, #10
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	33a8      	adds	r3, #168	@ 0xa8
 8003580:	443b      	add	r3, r7
 8003582:	f803 2ca0 	strb.w	r2, [r3, #-160]
		GPS_buffer[11 + len] = tail & 0xFF;
 8003586:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800358a:	330b      	adds	r3, #11
 800358c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	33a8      	adds	r3, #168	@ 0xa8
 8003594:	443b      	add	r3, r7
 8003596:	f803 2ca0 	strb.w	r2, [r3, #-160]
		UART_Send_Data(GPS_buffer, len + 12);
 800359a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800359e:	330c      	adds	r3, #12
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f969 	bl	8003880 <UART_Send_Data>
		if(origin == 0)
 80035ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003668 <GPS_message_process+0x2ac>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <GPS_message_process+0x200>
			return Timing_DONE;
 80035b8:	2302      	movs	r3, #2
 80035ba:	e03e      	b.n	800363a <GPS_message_process+0x27e>
		else
		{
			volatile uint16_t count = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
			memcpy(&time[6], rp1 + 7, 6);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1d98      	adds	r0, r3, #6
 80035c6:	4b23      	ldr	r3, [pc, #140]	@ (8003654 <GPS_message_process+0x298>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3307      	adds	r3, #7
 80035cc:	2206      	movs	r2, #6
 80035ce:	4619      	mov	r1, r3
 80035d0:	f00b ffdb 	bl	800f58a <memcpy>
			memcpy(&time[12], rp1 + 14, 2);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	330c      	adds	r3, #12
 80035d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003654 <GPS_message_process+0x298>)
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	320e      	adds	r2, #14
 80035de:	8812      	ldrh	r2, [r2, #0]
 80035e0:	b292      	uxth	r2, r2
 80035e2:	801a      	strh	r2, [r3, #0]
			while(rp1 < wp)
 80035e4:	e015      	b.n	8003612 <GPS_message_process+0x256>
			{
				if(*rp1 == ',')
 80035e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <GPS_message_process+0x298>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b2c      	cmp	r3, #44	@ 0x2c
 80035ee:	d106      	bne.n	80035fe <GPS_message_process+0x242>
					count++;
 80035f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				if(count == 9)
 80035fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b09      	cmp	r3, #9
 8003606:	d00b      	beq.n	8003620 <GPS_message_process+0x264>
					break;
				rp1++;
 8003608:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <GPS_message_process+0x298>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	4a11      	ldr	r2, [pc, #68]	@ (8003654 <GPS_message_process+0x298>)
 8003610:	6013      	str	r3, [r2, #0]
			while(rp1 < wp)
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <GPS_message_process+0x298>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <GPS_message_process+0x29c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d3e3      	bcc.n	80035e6 <GPS_message_process+0x22a>
 800361e:	e000      	b.n	8003622 <GPS_message_process+0x266>
					break;
 8003620:	bf00      	nop
			}
			memcpy(time, rp1 + 1, 6);
 8003622:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <GPS_message_process+0x298>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	2206      	movs	r2, #6
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f00b ffac 	bl	800f58a <memcpy>
			data_ready = 0;
 8003632:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <GPS_message_process+0x2a0>)
 8003634:	2200      	movs	r2, #0
 8003636:	801a      	strh	r2, [r3, #0]
			return Timing_OK;
 8003638:	2300      	movs	r3, #0
		}
	}
}
 800363a:	4618      	mov	r0, r3
 800363c:	37a8      	adds	r7, #168	@ 0xa8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000024 	.word	0x20000024
 8003648:	08013380 	.word	0x08013380
 800364c:	08013388 	.word	0x08013388
 8003650:	20001b68 	.word	0x20001b68
 8003654:	20001b64 	.word	0x20001b64
 8003658:	20000020 	.word	0x20000020
 800365c:	20000a96 	.word	0x20000a96
 8003660:	20000028 	.word	0x20000028
 8003664:	2000002a 	.word	0x2000002a
 8003668:	20000000 	.word	0x20000000

0800366c <calculate>:

int calculate(uint16_t *data)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
    return data[0] * 10 + data[1];
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3302      	adds	r3, #2
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	4413      	add	r3, r2
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <standard_to_stamp>:

time_t standard_to_stamp(uint8_t *time)
{
 8003698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800369c:	b0a4      	sub	sp, #144	@ 0x90
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6278      	str	r0, [r7, #36]	@ 0x24
    struct tm stm;
    int year, mon, mday, hour, min, sec, ms;
    uint16_t number[14];
    for(uint16_t i = 0;i < 14;i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80036a8:	e015      	b.n	80036d6 <standard_to_stamp+0x3e>
        number[i] = time[i] - '0';
 80036aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80036b8:	3b30      	subs	r3, #48	@ 0x30
 80036ba:	b299      	uxth	r1, r3
 80036bc:	0053      	lsls	r3, r2, #1
 80036be:	3370      	adds	r3, #112	@ 0x70
 80036c0:	f107 0220 	add.w	r2, r7, #32
 80036c4:	4413      	add	r3, r2
 80036c6:	460a      	mov	r2, r1
 80036c8:	f823 2c68 	strh.w	r2, [r3, #-104]
    for(uint16_t i = 0;i < 14;i++)
 80036cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80036d0:	3301      	adds	r3, #1
 80036d2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80036d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80036da:	2b0d      	cmp	r3, #13
 80036dc:	d9e5      	bls.n	80036aa <standard_to_stamp+0x12>
    year = calculate(&number[4]);
 80036de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036e2:	3308      	adds	r3, #8
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ffc1 	bl	800366c <calculate>
 80036ea:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    mon = calculate(&number[2]);
 80036ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036f2:	3304      	adds	r3, #4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ffb9 	bl	800366c <calculate>
 80036fa:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    mday = calculate(&number[0]);
 80036fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ffb2 	bl	800366c <calculate>
 8003708:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    hour = calculate(&number[6]);
 800370c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003710:	330c      	adds	r3, #12
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ffaa 	bl	800366c <calculate>
 8003718:	67f8      	str	r0, [r7, #124]	@ 0x7c
    min = calculate(&number[8]);
 800371a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800371e:	3310      	adds	r3, #16
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ffa3 	bl	800366c <calculate>
 8003726:	67b8      	str	r0, [r7, #120]	@ 0x78
    sec = calculate(&number[10]);
 8003728:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800372c:	3314      	adds	r3, #20
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff9c 	bl	800366c <calculate>
 8003734:	6778      	str	r0, [r7, #116]	@ 0x74
    ms = calculate(&number[12]);
 8003736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800373a:	3318      	adds	r3, #24
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff95 	bl	800366c <calculate>
 8003742:	6738      	str	r0, [r7, #112]	@ 0x70
    memset(&stm, 0, sizeof(stm));
 8003744:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003748:	2224      	movs	r2, #36	@ 0x24
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f00b f8e6 	bl	800e91e <memset>
    stm.tm_year = year + 100;
 8003752:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003756:	3364      	adds	r3, #100	@ 0x64
 8003758:	65bb      	str	r3, [r7, #88]	@ 0x58
    stm.tm_mon = mon - 1;
 800375a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800375e:	3b01      	subs	r3, #1
 8003760:	657b      	str	r3, [r7, #84]	@ 0x54
    stm.tm_mday = mday;
 8003762:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003766:	653b      	str	r3, [r7, #80]	@ 0x50
    stm.tm_hour = hour;
 8003768:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800376a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    stm.tm_min = min;
 800376c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
    stm.tm_sec = sec;
 8003770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003772:	647b      	str	r3, [r7, #68]	@ 0x44
    time_t systic = mktime(&stm);
 8003774:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003778:	4618      	mov	r0, r3
 800377a:	f00b f9d5 	bl	800eb28 <mktime>
 800377e:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
    systic = systic*1000000 + ms*10000;
 8003782:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8003786:	4622      	mov	r2, r4
 8003788:	462b      	mov	r3, r5
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	0159      	lsls	r1, r3, #5
 8003794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003798:	0150      	lsls	r0, r2, #5
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	ebb2 0804 	subs.w	r8, r2, r4
 80037a2:	eb63 0905 	sbc.w	r9, r3, r5
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80037b2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80037b6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80037ba:	4690      	mov	r8, r2
 80037bc:	4699      	mov	r9, r3
 80037be:	eb18 0a04 	adds.w	sl, r8, r4
 80037c2:	eb49 0b05 	adc.w	fp, r9, r5
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037da:	ebb2 010a 	subs.w	r1, r2, sl
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	eb63 030b 	sbc.w	r3, r3, fp
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037ea:	460b      	mov	r3, r1
 80037ec:	191b      	adds	r3, r3, r4
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	4613      	mov	r3, r2
 80037f2:	eb45 0303 	adc.w	r3, r5, r3
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	17da      	asrs	r2, r3, #31
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	617a      	str	r2, [r7, #20]
 8003808:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800380c:	4623      	mov	r3, r4
 800380e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003812:	4602      	mov	r2, r0
 8003814:	189b      	adds	r3, r3, r2
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	460b      	mov	r3, r1
 800381a:	462a      	mov	r2, r5
 800381c:	eb42 0303 	adc.w	r3, r2, r3
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003826:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    return systic;
 800382a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	3790      	adds	r7, #144	@ 0x90
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800383c <UART_Queue_Init>:

void UART_Queue_Init(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
    txQueue.head = 0;
 8003840:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <UART_Queue_Init+0x40>)
 8003842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003846:	2200      	movs	r2, #0
 8003848:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    txQueue.tail = 0;
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <UART_Queue_Init+0x40>)
 800384e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003852:	2200      	movs	r2, #0
 8003854:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    txQueue.count = 0;
 8003858:	4b08      	ldr	r3, [pc, #32]	@ (800387c <UART_Queue_Init+0x40>)
 800385a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    txQueue.isSending = 0;
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <UART_Queue_Init+0x40>)
 8003866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20001ba4 	.word	0x20001ba4

08003880 <UART_Send_Data>:

uint8_t UART_Send_Data(uint8_t *data, uint16_t len)// 数据入队
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
    if(len == 0 || len > MAX_PACKET_SIZE || txQueue.count >= TX_QUEUE_SIZE)
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <UART_Send_Data+0x26>
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	2b80      	cmp	r3, #128	@ 0x80
 8003896:	d806      	bhi.n	80038a6 <UART_Send_Data+0x26>
 8003898:	4b2f      	ldr	r3, [pc, #188]	@ (8003958 <UART_Send_Data+0xd8>)
 800389a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800389e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038a2:	2b1f      	cmp	r3, #31
 80038a4:	d901      	bls.n	80038aa <UART_Send_Data+0x2a>
        return 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e051      	b.n	800394e <UART_Send_Data+0xce>
 80038aa:	2310      	movs	r3, #16
 80038ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f383 8811 	msr	BASEPRI, r3
}
 80038b4:	bf00      	nop
    __set_BASEPRI(1 << 4);
    UART_Packet *pkt = &txQueue.packets[txQueue.tail];
 80038b6:	4b28      	ldr	r3, [pc, #160]	@ (8003958 <UART_Send_Data+0xd8>)
 80038b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038bc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80038c0:	461a      	mov	r2, r3
 80038c2:	4613      	mov	r3, r2
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	4413      	add	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4a23      	ldr	r2, [pc, #140]	@ (8003958 <UART_Send_Data+0xd8>)
 80038cc:	4413      	add	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    memcpy(pkt->data, data, len);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f00b fe57 	bl	800f58a <memcpy>
    pkt->length = len;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 80038e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <UART_Send_Data+0xd8>)
 80038e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ea:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80038ee:	3301      	adds	r3, #1
 80038f0:	425a      	negs	r2, r3
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	f002 021f 	and.w	r2, r2, #31
 80038fa:	bf58      	it	pl
 80038fc:	4253      	negpl	r3, r2
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <UART_Send_Data+0xd8>)
 8003902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003906:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    txQueue.count++;
 800390a:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <UART_Send_Data+0xd8>)
 800390c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003914:	3301      	adds	r3, #1
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <UART_Send_Data+0xd8>)
 800391a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800391e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f383 8811 	msr	BASEPRI, r3
}
 800392c:	bf00      	nop
    __set_BASEPRI(0);
    if(!txQueue.isSending)
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <UART_Send_Data+0xd8>)
 8003930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <UART_Send_Data+0xcc>
    {
        txQueue.isSending = 1;
 800393c:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <UART_Send_Data+0xd8>)
 800393e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        UART_Start_Send();
 8003948:	f000 f808 	bl	800395c <UART_Start_Send>
    }
    return 1;
 800394c:	2301      	movs	r3, #1
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20001ba4 	.word	0x20001ba4

0800395c <UART_Start_Send>:

void UART_Start_Send(void) // 启动DMA发送
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
    if(txQueue.count == 0)
 8003962:	4b13      	ldr	r3, [pc, #76]	@ (80039b0 <UART_Start_Send+0x54>)
 8003964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <UART_Start_Send+0x22>
    {
        txQueue.isSending = 0;
 8003970:	4b0f      	ldr	r3, [pc, #60]	@ (80039b0 <UART_Start_Send+0x54>)
 8003972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        return;
 800397c:	e015      	b.n	80039aa <UART_Start_Send+0x4e>
    }
    UART_Packet *pkt = &txQueue.packets[txQueue.head];
 800397e:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <UART_Start_Send+0x54>)
 8003980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003984:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003988:	461a      	mov	r2, r3
 800398a:	4613      	mov	r3, r2
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	4413      	add	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4a07      	ldr	r2, [pc, #28]	@ (80039b0 <UART_Start_Send+0x54>)
 8003994:	4413      	add	r3, r2
 8003996:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit_DMA(&huart1, pkt->data, pkt->length);
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	4803      	ldr	r0, [pc, #12]	@ (80039b4 <UART_Start_Send+0x58>)
 80039a6:	f003 fadd 	bl	8006f64 <HAL_UART_Transmit_DMA>
}
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20001ba4 	.word	0x20001ba4
 80039b4:	2000122c 	.word	0x2000122c

080039b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    if(huart->Instance != USART1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <HAL_UART_TxCpltCallback+0x78>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d12d      	bne.n	8003a26 <HAL_UART_TxCpltCallback+0x6e>
 80039ca:	2310      	movs	r3, #16
 80039cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f383 8811 	msr	BASEPRI, r3
}
 80039d4:	bf00      	nop
    	return;
    __set_BASEPRI(1 << 4);
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <HAL_UART_TxCpltCallback+0x7c>)
 80039d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039e0:	3301      	adds	r3, #1
 80039e2:	425a      	negs	r2, r3
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	f002 021f 	and.w	r2, r2, #31
 80039ec:	bf58      	it	pl
 80039ee:	4253      	negpl	r3, r2
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <HAL_UART_TxCpltCallback+0x7c>)
 80039f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    txQueue.count--;
 80039fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <HAL_UART_TxCpltCallback+0x7c>)
 80039fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a34 <HAL_UART_TxCpltCallback+0x7c>)
 8003a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f383 8811 	msr	BASEPRI, r3
}
 8003a1e:	bf00      	nop
    __set_BASEPRI(0);
    UART_Start_Send();
 8003a20:	f7ff ff9c 	bl	800395c <UART_Start_Send>
 8003a24:	e000      	b.n	8003a28 <HAL_UART_TxCpltCallback+0x70>
    	return;
 8003a26:	bf00      	nop
}
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40013800 	.word	0x40013800
 8003a34:	20001ba4 	.word	0x20001ba4

08003a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a3c:	f7fe ff44 	bl	80028c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a40:	480c      	ldr	r0, [pc, #48]	@ (8003a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a42:	490d      	ldr	r1, [pc, #52]	@ (8003a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a44:	4a0d      	ldr	r2, [pc, #52]	@ (8003a7c <LoopForever+0xe>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a48:	e002      	b.n	8003a50 <LoopCopyDataInit>

08003a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4e:	3304      	adds	r3, #4

08003a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a54:	d3f9      	bcc.n	8003a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a56:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a58:	4c0a      	ldr	r4, [pc, #40]	@ (8003a84 <LoopForever+0x16>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a5c:	e001      	b.n	8003a62 <LoopFillZerobss>

08003a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a60:	3204      	adds	r2, #4

08003a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a64:	d3fb      	bcc.n	8003a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a66:	f00b fd5f 	bl	800f528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a6a:	f7fd fbcd 	bl	8001208 <main>

08003a6e <LoopForever>:

LoopForever:
    b LoopForever
 8003a6e:	e7fe      	b.n	8003a6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a70:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a78:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8003a7c:	0803e560 	.word	0x0803e560
  ldr r2, =_sbss
 8003a80:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003a84:	20002dac 	.word	0x20002dac

08003a88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a88:	e7fe      	b.n	8003a88 <ADC1_IRQHandler>

08003a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f000 f961 	bl	8003d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a9a:	200f      	movs	r0, #15
 8003a9c:	f000 f80e 	bl	8003abc <HAL_InitTick>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	71fb      	strb	r3, [r7, #7]
 8003aaa:	e001      	b.n	8003ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003aac:	f7fe fd02 	bl	80024b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ac8:	4b17      	ldr	r3, [pc, #92]	@ (8003b28 <HAL_InitTick+0x6c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d023      	beq.n	8003b18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ad0:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <HAL_InitTick+0x70>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <HAL_InitTick+0x6c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f96d 	bl	8003dc6 <HAL_SYSTICK_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b0f      	cmp	r3, #15
 8003af6:	d809      	bhi.n	8003b0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af8:	2200      	movs	r2, #0
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f000 f937 	bl	8003d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b04:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <HAL_InitTick+0x74>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e007      	b.n	8003b1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e004      	b.n	8003b1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e001      	b.n	8003b1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000034 	.word	0x20000034
 8003b2c:	20000014 	.word	0x20000014
 8003b30:	20000030 	.word	0x20000030

08003b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b38:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_IncTick+0x20>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_IncTick+0x24>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <HAL_IncTick+0x24>)
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000034 	.word	0x20000034
 8003b58:	20002bfc 	.word	0x20002bfc

08003b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <HAL_GetTick+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20002bfc 	.word	0x20002bfc

08003b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b7c:	f7ff ffee 	bl	8003b5c <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d005      	beq.n	8003b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <HAL_Delay+0x44>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b9a:	bf00      	nop
 8003b9c:	f7ff ffde 	bl	8003b5c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d8f7      	bhi.n	8003b9c <HAL_Delay+0x28>
  {
  }
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000034 	.word	0x20000034

08003bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bee:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	60d3      	str	r3, [r2, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <__NVIC_GetPriorityGrouping+0x18>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	f003 0307 	and.w	r3, r3, #7
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db0b      	blt.n	8003c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4907      	ldr	r1, [pc, #28]	@ (8003c58 <__NVIC_EnableIRQ+0x38>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2001      	movs	r0, #1
 8003c42:	fa00 f202 	lsl.w	r2, r0, r2
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	@ (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	@ (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	@ 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d28:	d301      	bcc.n	8003d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <SysTick_Config+0x40>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d36:	210f      	movs	r1, #15
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	f7ff ff8e 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d40:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <SysTick_Config+0x40>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d46:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <SysTick_Config+0x40>)
 8003d48:	2207      	movs	r2, #7
 8003d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	e000e010 	.word	0xe000e010

08003d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff29 	bl	8003bbc <__NVIC_SetPriorityGrouping>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d84:	f7ff ff3e 	bl	8003c04 <__NVIC_GetPriorityGrouping>
 8003d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7ff ff8e 	bl	8003cb0 <NVIC_EncodePriority>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff5d 	bl	8003c5c <__NVIC_SetPriority>
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff31 	bl	8003c20 <__NVIC_EnableIRQ>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ffa2 	bl	8003d18 <SysTick_Config>
 8003dd4:	4603      	mov	r3, r0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003de2:	f000 f802 	bl	8003dea <HAL_SYSTICK_Callback>
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e098      	b.n	8003f3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4b4d      	ldr	r3, [pc, #308]	@ (8003f48 <HAL_DMA_Init+0x150>)
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d80f      	bhi.n	8003e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f4c <HAL_DMA_Init+0x154>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	4a4b      	ldr	r2, [pc, #300]	@ (8003f50 <HAL_DMA_Init+0x158>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	009a      	lsls	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <HAL_DMA_Init+0x15c>)
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e34:	e00e      	b.n	8003e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b46      	ldr	r3, [pc, #280]	@ (8003f58 <HAL_DMA_Init+0x160>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a43      	ldr	r2, [pc, #268]	@ (8003f50 <HAL_DMA_Init+0x158>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	009a      	lsls	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a42      	ldr	r2, [pc, #264]	@ (8003f5c <HAL_DMA_Init+0x164>)
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eae:	d039      	beq.n	8003f24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	4a27      	ldr	r2, [pc, #156]	@ (8003f54 <HAL_DMA_Init+0x15c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d11a      	bne.n	8003ef0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003eba:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <HAL_DMA_Init+0x168>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f003 031c 	and.w	r3, r3, #28
 8003ec6:	210f      	movs	r1, #15
 8003ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	4924      	ldr	r1, [pc, #144]	@ (8003f60 <HAL_DMA_Init+0x168>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ed4:	4b22      	ldr	r3, [pc, #136]	@ (8003f60 <HAL_DMA_Init+0x168>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee0:	f003 031c 	and.w	r3, r3, #28
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	491d      	ldr	r1, [pc, #116]	@ (8003f60 <HAL_DMA_Init+0x168>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
 8003eee:	e019      	b.n	8003f24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f64 <HAL_DMA_Init+0x16c>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef8:	f003 031c 	and.w	r3, r3, #28
 8003efc:	210f      	movs	r1, #15
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	4917      	ldr	r1, [pc, #92]	@ (8003f64 <HAL_DMA_Init+0x16c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f0a:	4b16      	ldr	r3, [pc, #88]	@ (8003f64 <HAL_DMA_Init+0x16c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	f003 031c 	and.w	r3, r3, #28
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	4911      	ldr	r1, [pc, #68]	@ (8003f64 <HAL_DMA_Init+0x16c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40020407 	.word	0x40020407
 8003f4c:	bffdfff8 	.word	0xbffdfff8
 8003f50:	cccccccd 	.word	0xcccccccd
 8003f54:	40020000 	.word	0x40020000
 8003f58:	bffdfbf8 	.word	0xbffdfbf8
 8003f5c:	40020400 	.word	0x40020400
 8003f60:	400200a8 	.word	0x400200a8
 8003f64:	400204a8 	.word	0x400204a8

08003f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_Start_IT+0x20>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e04b      	b.n	8004020 <HAL_DMA_Start_IT+0xb8>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d13a      	bne.n	8004012 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f96b 	bl	800429c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 020e 	orr.w	r2, r2, #14
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e00f      	b.n	8004000 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0204 	bic.w	r2, r2, #4
 8003fee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 020a 	orr.w	r2, r2, #10
 8003ffe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e005      	b.n	800401e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800401a:	2302      	movs	r3, #2
 800401c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d008      	beq.n	8004052 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e022      	b.n	8004098 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 020e 	bic.w	r2, r2, #14
 8004060:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f003 021c 	and.w	r2, r3, #28
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	2101      	movs	r1, #1
 8004080:	fa01 f202 	lsl.w	r2, r1, r2
 8004084:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004096:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d005      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2204      	movs	r2, #4
 80040c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
 80040c6:	e029      	b.n	800411c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 020e 	bic.w	r2, r2, #14
 80040d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ec:	f003 021c 	and.w	r2, r3, #28
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
    }
  }
  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004142:	f003 031c 	and.w	r3, r3, #28
 8004146:	2204      	movs	r2, #4
 8004148:	409a      	lsls	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d026      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x7a>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d021      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0204 	bic.w	r2, r2, #4
 8004178:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	f003 021c 	and.w	r2, r3, #28
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	2104      	movs	r1, #4
 8004188:	fa01 f202 	lsl.w	r2, r1, r2
 800418c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	2b00      	cmp	r3, #0
 8004194:	d071      	beq.n	800427a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800419e:	e06c      	b.n	800427a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a4:	f003 031c 	and.w	r3, r3, #28
 80041a8:	2202      	movs	r2, #2
 80041aa:	409a      	lsls	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d02e      	beq.n	8004212 <HAL_DMA_IRQHandler+0xec>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d029      	beq.n	8004212 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 020a 	bic.w	r2, r2, #10
 80041da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e8:	f003 021c 	and.w	r2, r3, #28
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	2102      	movs	r1, #2
 80041f2:	fa01 f202 	lsl.w	r2, r1, r2
 80041f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d038      	beq.n	800427a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004210:	e033      	b.n	800427a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f003 031c 	and.w	r3, r3, #28
 800421a:	2208      	movs	r2, #8
 800421c:	409a      	lsls	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02a      	beq.n	800427c <HAL_DMA_IRQHandler+0x156>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d025      	beq.n	800427c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 020e 	bic.w	r2, r2, #14
 800423e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004244:	f003 021c 	and.w	r2, r3, #28
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f202 	lsl.w	r2, r1, r2
 8004252:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800427a:	bf00      	nop
 800427c:	bf00      	nop
}
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	f003 021c 	and.w	r2, r3, #28
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	2101      	movs	r1, #1
 80042b8:	fa01 f202 	lsl.w	r2, r1, r2
 80042bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d108      	bne.n	80042e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042de:	e007      	b.n	80042f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	60da      	str	r2, [r3, #12]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800430a:	e154      	b.n	80045b6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	2101      	movs	r1, #1
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8146 	beq.w	80045b0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d005      	beq.n	800433c <HAL_GPIO_Init+0x40>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d130      	bne.n	800439e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004372:	2201      	movs	r2, #1
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0201 	and.w	r2, r3, #1
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d017      	beq.n	80043da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d123      	bne.n	800442e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	08da      	lsrs	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3208      	adds	r2, #8
 80043ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	220f      	movs	r2, #15
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	08da      	lsrs	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3208      	adds	r2, #8
 8004428:	6939      	ldr	r1, [r7, #16]
 800442a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0203 	and.w	r2, r3, #3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80a0 	beq.w	80045b0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004470:	4b58      	ldr	r3, [pc, #352]	@ (80045d4 <HAL_GPIO_Init+0x2d8>)
 8004472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004474:	4a57      	ldr	r2, [pc, #348]	@ (80045d4 <HAL_GPIO_Init+0x2d8>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6613      	str	r3, [r2, #96]	@ 0x60
 800447c:	4b55      	ldr	r3, [pc, #340]	@ (80045d4 <HAL_GPIO_Init+0x2d8>)
 800447e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004488:	4a53      	ldr	r2, [pc, #332]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	3302      	adds	r3, #2
 8004490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	220f      	movs	r2, #15
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4013      	ands	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044b2:	d019      	beq.n	80044e8 <HAL_GPIO_Init+0x1ec>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a49      	ldr	r2, [pc, #292]	@ (80045dc <HAL_GPIO_Init+0x2e0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <HAL_GPIO_Init+0x1e8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a48      	ldr	r2, [pc, #288]	@ (80045e0 <HAL_GPIO_Init+0x2e4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00d      	beq.n	80044e0 <HAL_GPIO_Init+0x1e4>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a47      	ldr	r2, [pc, #284]	@ (80045e4 <HAL_GPIO_Init+0x2e8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <HAL_GPIO_Init+0x1e0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a46      	ldr	r2, [pc, #280]	@ (80045e8 <HAL_GPIO_Init+0x2ec>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_GPIO_Init+0x1dc>
 80044d4:	2304      	movs	r3, #4
 80044d6:	e008      	b.n	80044ea <HAL_GPIO_Init+0x1ee>
 80044d8:	2307      	movs	r3, #7
 80044da:	e006      	b.n	80044ea <HAL_GPIO_Init+0x1ee>
 80044dc:	2303      	movs	r3, #3
 80044de:	e004      	b.n	80044ea <HAL_GPIO_Init+0x1ee>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e002      	b.n	80044ea <HAL_GPIO_Init+0x1ee>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <HAL_GPIO_Init+0x1ee>
 80044e8:	2300      	movs	r3, #0
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	f002 0203 	and.w	r2, r2, #3
 80044f0:	0092      	lsls	r2, r2, #2
 80044f2:	4093      	lsls	r3, r2
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044fa:	4937      	ldr	r1, [pc, #220]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004508:	4b38      	ldr	r3, [pc, #224]	@ (80045ec <HAL_GPIO_Init+0x2f0>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	43db      	mvns	r3, r3
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800452c:	4a2f      	ldr	r2, [pc, #188]	@ (80045ec <HAL_GPIO_Init+0x2f0>)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004532:	4b2e      	ldr	r3, [pc, #184]	@ (80045ec <HAL_GPIO_Init+0x2f0>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	43db      	mvns	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004556:	4a25      	ldr	r2, [pc, #148]	@ (80045ec <HAL_GPIO_Init+0x2f0>)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800455c:	4b23      	ldr	r3, [pc, #140]	@ (80045ec <HAL_GPIO_Init+0x2f0>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	43db      	mvns	r3, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004580:	4a1a      	ldr	r2, [pc, #104]	@ (80045ec <HAL_GPIO_Init+0x2f0>)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004586:	4b19      	ldr	r3, [pc, #100]	@ (80045ec <HAL_GPIO_Init+0x2f0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045aa:	4a10      	ldr	r2, [pc, #64]	@ (80045ec <HAL_GPIO_Init+0x2f0>)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3301      	adds	r3, #1
 80045b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f aea3 	bne.w	800430c <HAL_GPIO_Init+0x10>
  }
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40010000 	.word	0x40010000
 80045dc:	48000400 	.word	0x48000400
 80045e0:	48000800 	.word	0x48000800
 80045e4:	48000c00 	.word	0x48000c00
 80045e8:	48001000 	.word	0x48001000
 80045ec:	40010400 	.word	0x40010400

080045f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	887b      	ldrh	r3, [r7, #2]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	e001      	b.n	8004612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
 800462c:	4613      	mov	r3, r2
 800462e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800463c:	e002      	b.n	8004644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4013      	ands	r3, r2
 8004668:	041a      	lsls	r2, r3, #16
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	43d9      	mvns	r1, r3
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	400b      	ands	r3, r1
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	619a      	str	r2, [r3, #24]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800468e:	4b08      	ldr	r3, [pc, #32]	@ (80046b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800469a:	4a05      	ldr	r2, [pc, #20]	@ (80046b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fc feca 	bl	800143c <HAL_GPIO_EXTI_Callback>
  }
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40010400 	.word	0x40010400

080046b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046b8:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <HAL_PWREx_GetVoltageRange+0x18>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40007000 	.word	0x40007000

080046d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046de:	d130      	bne.n	8004742 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e0:	4b23      	ldr	r3, [pc, #140]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ec:	d038      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ee:	4b20      	ldr	r3, [pc, #128]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2232      	movs	r2, #50	@ 0x32
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	4a1b      	ldr	r2, [pc, #108]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	0c9b      	lsrs	r3, r3, #18
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004714:	e002      	b.n	800471c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b01      	subs	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471c:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004728:	d102      	bne.n	8004730 <HAL_PWREx_ControlVoltageScaling+0x60>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f2      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004730:	4b0f      	ldr	r3, [pc, #60]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473c:	d110      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e00f      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004742:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474e:	d007      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004750:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004758:	4a05      	ldr	r2, [pc, #20]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800475e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40007000 	.word	0x40007000
 8004774:	20000014 	.word	0x20000014
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f000 bc02 	b.w	8004f94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004790:	4b96      	ldr	r3, [pc, #600]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800479a:	4b94      	ldr	r3, [pc, #592]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80e4 	beq.w	800497a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4c>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	f040 808b 	bne.w	80048d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	f040 8087 	bne.w	80048d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c8:	4b88      	ldr	r3, [pc, #544]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_OscConfig+0x64>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e3d9      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	4b81      	ldr	r3, [pc, #516]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <HAL_RCC_OscConfig+0x7e>
 80047f0:	4b7e      	ldr	r3, [pc, #504]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f8:	e005      	b.n	8004806 <HAL_RCC_OscConfig+0x8a>
 80047fa:	4b7c      	ldr	r3, [pc, #496]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80047fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004806:	4293      	cmp	r3, r2
 8004808:	d223      	bcs.n	8004852 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fd8c 	bl	800532c <RCC_SetFlashLatencyFromMSIRange>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e3ba      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800481e:	4b73      	ldr	r3, [pc, #460]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a72      	ldr	r2, [pc, #456]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004824:	f043 0308 	orr.w	r3, r3, #8
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b70      	ldr	r3, [pc, #448]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	496d      	ldr	r1, [pc, #436]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483c:	4b6b      	ldr	r3, [pc, #428]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	4968      	ldr	r1, [pc, #416]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
 8004850:	e025      	b.n	800489e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004852:	4b66      	ldr	r3, [pc, #408]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a65      	ldr	r2, [pc, #404]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b63      	ldr	r3, [pc, #396]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4960      	ldr	r1, [pc, #384]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004870:	4b5e      	ldr	r3, [pc, #376]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	495b      	ldr	r1, [pc, #364]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fd4c 	bl	800532c <RCC_SetFlashLatencyFromMSIRange>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e37a      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489e:	f000 fc81 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 80048a2:	4602      	mov	r2, r0
 80048a4:	4b51      	ldr	r3, [pc, #324]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	4950      	ldr	r1, [pc, #320]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048b0:	5ccb      	ldrb	r3, [r1, r3]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a4e      	ldr	r2, [pc, #312]	@ (80049f4 <HAL_RCC_OscConfig+0x278>)
 80048bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048be:	4b4e      	ldr	r3, [pc, #312]	@ (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff f8fa 	bl	8003abc <HAL_InitTick>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d052      	beq.n	8004978 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	e35e      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d032      	beq.n	8004944 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048de:	4b43      	ldr	r3, [pc, #268]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a42      	ldr	r2, [pc, #264]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ea:	f7ff f937 	bl	8003b5c <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f2:	f7ff f933 	bl	8003b5c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e347      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004904:	4b39      	ldr	r3, [pc, #228]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004910:	4b36      	ldr	r3, [pc, #216]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a35      	ldr	r2, [pc, #212]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004916:	f043 0308 	orr.w	r3, r3, #8
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b33      	ldr	r3, [pc, #204]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4930      	ldr	r1, [pc, #192]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492e:	4b2f      	ldr	r3, [pc, #188]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	492b      	ldr	r1, [pc, #172]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
 8004942:	e01a      	b.n	800497a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004944:	4b29      	ldr	r3, [pc, #164]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a28      	ldr	r2, [pc, #160]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004950:	f7ff f904 	bl	8003b5c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004958:	f7ff f900 	bl	8003b5c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e314      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800496a:	4b20      	ldr	r3, [pc, #128]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x1dc>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d073      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d005      	beq.n	8004998 <HAL_RCC_OscConfig+0x21c>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b0c      	cmp	r3, #12
 8004990:	d10e      	bne.n	80049b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d10b      	bne.n	80049b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d063      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d15f      	bne.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e2f1      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_OscConfig+0x24c>
 80049ba:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a0b      	ldr	r2, [pc, #44]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e025      	b.n	8004a14 <HAL_RCC_OscConfig+0x298>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049d0:	d114      	bne.n	80049fc <HAL_RCC_OscConfig+0x280>
 80049d2:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a05      	ldr	r2, [pc, #20]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b03      	ldr	r3, [pc, #12]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a02      	ldr	r2, [pc, #8]	@ (80049ec <HAL_RCC_OscConfig+0x270>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e013      	b.n	8004a14 <HAL_RCC_OscConfig+0x298>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	080133f0 	.word	0x080133f0
 80049f4:	20000014 	.word	0x20000014
 80049f8:	20000030 	.word	0x20000030
 80049fc:	4ba0      	ldr	r3, [pc, #640]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a9f      	ldr	r2, [pc, #636]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4b9d      	ldr	r3, [pc, #628]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a9c      	ldr	r2, [pc, #624]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7ff f89e 	bl	8003b5c <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7ff f89a 	bl	8003b5c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	@ 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e2ae      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	4b92      	ldr	r3, [pc, #584]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2a8>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7ff f88a 	bl	8003b5c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7ff f886 	bl	8003b5c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	@ 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e29a      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5e:	4b88      	ldr	r3, [pc, #544]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2d0>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d060      	beq.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x310>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d119      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d116      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x328>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e277      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b76      	ldr	r3, [pc, #472]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	4973      	ldr	r1, [pc, #460]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	e040      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d023      	beq.n	8004b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7ff f845 	bl	8003b5c <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad6:	f7ff f841 	bl	8003b5c <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e255      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	4b65      	ldr	r3, [pc, #404]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b62      	ldr	r3, [pc, #392]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	495f      	ldr	r1, [pc, #380]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e018      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7ff f821 	bl	8003b5c <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7ff f81d 	bl	8003b5c <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e231      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b30:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d03c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b50:	4b4b      	ldr	r3, [pc, #300]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b56:	4a4a      	ldr	r2, [pc, #296]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fe fffc 	bl	8003b5c <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fe fff8 	bl	8003b5c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e20c      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7a:	4b41      	ldr	r3, [pc, #260]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3ec>
 8004b88:	e01b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b90:	4a3b      	ldr	r2, [pc, #236]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fe ffdf 	bl	8003b5c <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fe ffdb 	bl	8003b5c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e1ef      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb4:	4b32      	ldr	r3, [pc, #200]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ef      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a6 	beq.w	8004d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10d      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	4b27      	ldr	r3, [pc, #156]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be4:	4a26      	ldr	r2, [pc, #152]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bec:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b21      	ldr	r3, [pc, #132]	@ (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d118      	bne.n	8004c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c08:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c14:	f7fe ffa2 	bl	8003b5c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1c:	f7fe ff9e 	bl	8003b5c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1b2      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2e:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d108      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4d8>
 8004c42:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c48:	4a0d      	ldr	r2, [pc, #52]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c52:	e029      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d115      	bne.n	8004c88 <HAL_RCC_OscConfig+0x50c>
 8004c5c:	4b08      	ldr	r3, [pc, #32]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c62:	4a07      	ldr	r2, [pc, #28]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c6c:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c72:	4a03      	ldr	r2, [pc, #12]	@ (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c7c:	e014      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40007000 	.word	0x40007000
 8004c88:	4b9a      	ldr	r3, [pc, #616]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	4a99      	ldr	r2, [pc, #612]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c98:	4b96      	ldr	r3, [pc, #600]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	4a95      	ldr	r2, [pc, #596]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fe ff54 	bl	8003b5c <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fe ff50 	bl	8003b5c <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e162      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cce:	4b89      	ldr	r3, [pc, #548]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ed      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x53c>
 8004cdc:	e015      	b.n	8004d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cde:	f7fe ff3d 	bl	8003b5c <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fe ff39 	bl	8003b5c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e14b      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfc:	4b7d      	ldr	r3, [pc, #500]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ed      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0a:	7ffb      	ldrb	r3, [r7, #31]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b78      	ldr	r3, [pc, #480]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d14:	4a77      	ldr	r2, [pc, #476]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d03c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d30:	4b70      	ldr	r3, [pc, #448]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d36:	4a6f      	ldr	r2, [pc, #444]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fe ff0c 	bl	8003b5c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d48:	f7fe ff08 	bl	8003b5c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e11c      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d5a:	4b66      	ldr	r3, [pc, #408]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ef      	beq.n	8004d48 <HAL_RCC_OscConfig+0x5cc>
 8004d68:	e01b      	b.n	8004da2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d6a:	4b62      	ldr	r3, [pc, #392]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d70:	4a60      	ldr	r2, [pc, #384]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fe feef 	bl	8003b5c <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d82:	f7fe feeb 	bl	8003b5c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0ff      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d94:	4b57      	ldr	r3, [pc, #348]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ef      	bne.n	8004d82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 80f3 	beq.w	8004f92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	f040 80c9 	bne.w	8004f48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004db6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d12c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d123      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d11b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d113      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d109      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d06b      	beq.n	8004efc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d062      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e2a:	4b32      	ldr	r3, [pc, #200]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e0ac      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e46:	f7fe fe89 	bl	8003b5c <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4e:	f7fe fe85 	bl	8003b5c <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e099      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e60:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f0      	bne.n	8004e4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e6c:	4b21      	ldr	r3, [pc, #132]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	4b21      	ldr	r3, [pc, #132]	@ (8004ef8 <HAL_RCC_OscConfig+0x77c>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e7c:	3a01      	subs	r2, #1
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	4311      	orrs	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e86:	0212      	lsls	r2, r2, #8
 8004e88:	4311      	orrs	r1, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e8e:	0852      	lsrs	r2, r2, #1
 8004e90:	3a01      	subs	r2, #1
 8004e92:	0552      	lsls	r2, r2, #21
 8004e94:	4311      	orrs	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e9a:	0852      	lsrs	r2, r2, #1
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	0652      	lsls	r2, r2, #25
 8004ea0:	4311      	orrs	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ea6:	06d2      	lsls	r2, r2, #27
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	4912      	ldr	r1, [pc, #72]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004eb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ec8:	f7fe fe48 	bl	8003b5c <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fe fe44 	bl	8003b5c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e058      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee2:	4b04      	ldr	r3, [pc, #16]	@ (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eee:	e050      	b.n	8004f92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e04f      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efc:	4b27      	ldr	r3, [pc, #156]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d144      	bne.n	8004f92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f08:	4b24      	ldr	r3, [pc, #144]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a23      	ldr	r2, [pc, #140]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f14:	4b21      	ldr	r3, [pc, #132]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a20      	ldr	r2, [pc, #128]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f20:	f7fe fe1c 	bl	8003b5c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fe fe18 	bl	8003b5c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e02c      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3a:	4b18      	ldr	r3, [pc, #96]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x7ac>
 8004f46:	e024      	b.n	8004f92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d01f      	beq.n	8004f8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b13      	ldr	r3, [pc, #76]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a12      	ldr	r2, [pc, #72]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fe fdff 	bl	8003b5c <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f62:	f7fe fdfb 	bl	8003b5c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e00f      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f74:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004f80:	4b06      	ldr	r3, [pc, #24]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	4905      	ldr	r1, [pc, #20]	@ (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <HAL_RCC_OscConfig+0x824>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60cb      	str	r3, [r1, #12]
 8004f8c:	e001      	b.n	8004f92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	feeefffc 	.word	0xfeeefffc

08004fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0e7      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b75      	ldr	r3, [pc, #468]	@ (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d910      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b72      	ldr	r3, [pc, #456]	@ (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 0207 	bic.w	r2, r3, #7
 8004fce:	4970      	ldr	r1, [pc, #448]	@ (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0cf      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d010      	beq.n	8005016 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	4b66      	ldr	r3, [pc, #408]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005000:	429a      	cmp	r2, r3
 8005002:	d908      	bls.n	8005016 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b63      	ldr	r3, [pc, #396]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4960      	ldr	r1, [pc, #384]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d04c      	beq.n	80050bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502a:	4b5a      	ldr	r3, [pc, #360]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d121      	bne.n	800507a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e0a6      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005042:	4b54      	ldr	r3, [pc, #336]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e09a      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800505a:	4b4e      	ldr	r3, [pc, #312]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e08e      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506a:	4b4a      	ldr	r3, [pc, #296]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e086      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800507a:	4b46      	ldr	r3, [pc, #280]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4943      	ldr	r1, [pc, #268]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005088:	4313      	orrs	r3, r2
 800508a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508c:	f7fe fd66 	bl	8003b5c <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	e00a      	b.n	80050aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f7fe fd62 	bl	8003b5c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e06e      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 020c 	and.w	r2, r3, #12
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1eb      	bne.n	8005094 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d010      	beq.n	80050ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	4b31      	ldr	r3, [pc, #196]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d208      	bcs.n	80050ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	492b      	ldr	r1, [pc, #172]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ea:	4b29      	ldr	r3, [pc, #164]	@ (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d210      	bcs.n	800511a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f8:	4b25      	ldr	r3, [pc, #148]	@ (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 0207 	bic.w	r2, r3, #7
 8005100:	4923      	ldr	r1, [pc, #140]	@ (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005108:	4b21      	ldr	r3, [pc, #132]	@ (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d001      	beq.n	800511a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e036      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005126:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4918      	ldr	r1, [pc, #96]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005134:	4313      	orrs	r3, r2
 8005136:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005144:	4b13      	ldr	r3, [pc, #76]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4910      	ldr	r1, [pc, #64]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005158:	f000 f824 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	490b      	ldr	r1, [pc, #44]	@ (8005198 <HAL_RCC_ClockConfig+0x1f4>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
 8005174:	4a09      	ldr	r2, [pc, #36]	@ (800519c <HAL_RCC_ClockConfig+0x1f8>)
 8005176:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005178:	4b09      	ldr	r3, [pc, #36]	@ (80051a0 <HAL_RCC_ClockConfig+0x1fc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe fc9d 	bl	8003abc <HAL_InitTick>
 8005182:	4603      	mov	r3, r0
 8005184:	72fb      	strb	r3, [r7, #11]

  return status;
 8005186:	7afb      	ldrb	r3, [r7, #11]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40022000 	.word	0x40022000
 8005194:	40021000 	.word	0x40021000
 8005198:	080133f0 	.word	0x080133f0
 800519c:	20000014 	.word	0x20000014
 80051a0:	20000030 	.word	0x20000030

080051a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	@ 0x24
 80051a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	2300      	movs	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b2:	4b3e      	ldr	r3, [pc, #248]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051bc:	4b3b      	ldr	r3, [pc, #236]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x34>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b0c      	cmp	r3, #12
 80051d0:	d121      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d11e      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051d8:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d107      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051e4:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	e005      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051f4:	4b2d      	ldr	r3, [pc, #180]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005200:	4a2b      	ldr	r2, [pc, #172]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10d      	bne.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005214:	e00a      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d102      	bne.n	8005222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800521c:	4b25      	ldr	r3, [pc, #148]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e004      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d101      	bne.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005228:	4b23      	ldr	r3, [pc, #140]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800522a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0c      	cmp	r3, #12
 8005230:	d134      	bne.n	800529c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005232:	4b1e      	ldr	r3, [pc, #120]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d003      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0xa6>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d003      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0xac>
 8005248:	e005      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800524a:	4b1a      	ldr	r3, [pc, #104]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800524c:	617b      	str	r3, [r7, #20]
      break;
 800524e:	e005      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005250:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005252:	617b      	str	r3, [r7, #20]
      break;
 8005254:	e002      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	617b      	str	r3, [r7, #20]
      break;
 800525a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800525c:	4b13      	ldr	r3, [pc, #76]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	3301      	adds	r3, #1
 8005268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800526a:	4b10      	ldr	r3, [pc, #64]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	fb03 f202 	mul.w	r2, r3, r2
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	0e5b      	lsrs	r3, r3, #25
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	3301      	adds	r3, #1
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800529c:	69bb      	ldr	r3, [r7, #24]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3724      	adds	r7, #36	@ 0x24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	08013408 	.word	0x08013408
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	007a1200 	.word	0x007a1200

080052bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c0:	4b03      	ldr	r3, [pc, #12]	@ (80052d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000014 	.word	0x20000014

080052d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052d8:	f7ff fff0 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4904      	ldr	r1, [pc, #16]	@ (80052fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80052ea:	5ccb      	ldrb	r3, [r1, r3]
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	08013400 	.word	0x08013400

08005300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005304:	f7ff ffda 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	0adb      	lsrs	r3, r3, #11
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4904      	ldr	r1, [pc, #16]	@ (8005328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40021000 	.word	0x40021000
 8005328:	08013400 	.word	0x08013400

0800532c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005338:	4b2a      	ldr	r3, [pc, #168]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005344:	f7ff f9b6 	bl	80046b4 <HAL_PWREx_GetVoltageRange>
 8005348:	6178      	str	r0, [r7, #20]
 800534a:	e014      	b.n	8005376 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800534c:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005350:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005356:	6593      	str	r3, [r2, #88]	@ 0x58
 8005358:	4b22      	ldr	r3, [pc, #136]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005364:	f7ff f9a6 	bl	80046b4 <HAL_PWREx_GetVoltageRange>
 8005368:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800536a:	4b1e      	ldr	r3, [pc, #120]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536e:	4a1d      	ldr	r2, [pc, #116]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005374:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800537c:	d10b      	bne.n	8005396 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b80      	cmp	r3, #128	@ 0x80
 8005382:	d919      	bls.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2ba0      	cmp	r3, #160	@ 0xa0
 8005388:	d902      	bls.n	8005390 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800538a:	2302      	movs	r3, #2
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e013      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005390:	2301      	movs	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	e010      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d902      	bls.n	80053a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800539c:	2303      	movs	r3, #3
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	e00a      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b80      	cmp	r3, #128	@ 0x80
 80053a6:	d102      	bne.n	80053ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053a8:	2302      	movs	r3, #2
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	e004      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b70      	cmp	r3, #112	@ 0x70
 80053b2:	d101      	bne.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053b4:	2301      	movs	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f023 0207 	bic.w	r2, r3, #7
 80053c0:	4909      	ldr	r1, [pc, #36]	@ (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053c8:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d001      	beq.n	80053da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40022000 	.word	0x40022000

080053ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f4:	2300      	movs	r3, #0
 80053f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f8:	2300      	movs	r3, #0
 80053fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005404:	2b00      	cmp	r3, #0
 8005406:	d031      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005410:	d01a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005412:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005416:	d814      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800541c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005420:	d10f      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005422:	4b5d      	ldr	r3, [pc, #372]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	4a5c      	ldr	r2, [pc, #368]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800542e:	e00c      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fa22 	bl	8005880 <RCCEx_PLLSAI1_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005440:	e003      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	74fb      	strb	r3, [r7, #19]
      break;
 8005446:	e000      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005450:	4b51      	ldr	r3, [pc, #324]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005456:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545e:	494e      	ldr	r1, [pc, #312]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005466:	e001      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 809e 	beq.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547a:	2300      	movs	r3, #0
 800547c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800547e:	4b46      	ldr	r3, [pc, #280]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	4b40      	ldr	r3, [pc, #256]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005498:	4a3f      	ldr	r2, [pc, #252]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549e:	6593      	str	r3, [r2, #88]	@ 0x58
 80054a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ac:	2301      	movs	r3, #1
 80054ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b0:	4b3a      	ldr	r3, [pc, #232]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a39      	ldr	r2, [pc, #228]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054bc:	f7fe fb4e 	bl	8003b5c <HAL_GetTick>
 80054c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054c2:	e009      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c4:	f7fe fb4a 	bl	8003b5c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d902      	bls.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	74fb      	strb	r3, [r7, #19]
        break;
 80054d6:	e005      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054d8:	4b30      	ldr	r3, [pc, #192]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ef      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d15a      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01e      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	429a      	cmp	r2, r3
 8005504:	d019      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005506:	4b24      	ldr	r3, [pc, #144]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005510:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005512:	4b21      	ldr	r3, [pc, #132]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005518:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800551a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005522:	4b1d      	ldr	r3, [pc, #116]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800552e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005532:	4a19      	ldr	r2, [pc, #100]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d016      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fe fb0a 	bl	8003b5c <HAL_GetTick>
 8005548:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554a:	e00b      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fe fb06 	bl	8003b5c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d902      	bls.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	74fb      	strb	r3, [r7, #19]
            break;
 8005562:	e006      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005564:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0ec      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10b      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005578:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005586:	4904      	ldr	r1, [pc, #16]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800558e:	e009      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005590:	7cfb      	ldrb	r3, [r7, #19]
 8005592:	74bb      	strb	r3, [r7, #18]
 8005594:	e006      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000
 800559c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055a4:	7c7b      	ldrb	r3, [r7, #17]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d105      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055aa:	4b8d      	ldr	r3, [pc, #564]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ae:	4a8c      	ldr	r2, [pc, #560]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c2:	4b87      	ldr	r3, [pc, #540]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c8:	f023 0203 	bic.w	r2, r3, #3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	4983      	ldr	r1, [pc, #524]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055e4:	4b7e      	ldr	r3, [pc, #504]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f023 020c 	bic.w	r2, r3, #12
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	497b      	ldr	r1, [pc, #492]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005606:	4b76      	ldr	r3, [pc, #472]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	4972      	ldr	r1, [pc, #456]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005628:	4b6d      	ldr	r3, [pc, #436]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	496a      	ldr	r1, [pc, #424]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800564a:	4b65      	ldr	r3, [pc, #404]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005650:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005658:	4961      	ldr	r1, [pc, #388]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800566c:	4b5c      	ldr	r3, [pc, #368]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005672:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	4959      	ldr	r1, [pc, #356]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800568e:	4b54      	ldr	r3, [pc, #336]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005694:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569c:	4950      	ldr	r1, [pc, #320]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b0:	4b4b      	ldr	r3, [pc, #300]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056be:	4948      	ldr	r1, [pc, #288]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d2:	4b43      	ldr	r3, [pc, #268]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e0:	493f      	ldr	r1, [pc, #252]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d028      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056f4:	4b3a      	ldr	r3, [pc, #232]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005702:	4937      	ldr	r1, [pc, #220]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800570e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005712:	d106      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005714:	4b32      	ldr	r3, [pc, #200]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a31      	ldr	r2, [pc, #196]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800571a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800571e:	60d3      	str	r3, [r2, #12]
 8005720:	e011      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005726:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800572a:	d10c      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2101      	movs	r1, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f8a4 	bl	8005880 <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005742:	7cfb      	ldrb	r3, [r7, #19]
 8005744:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d028      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005752:	4b23      	ldr	r3, [pc, #140]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005760:	491f      	ldr	r1, [pc, #124]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005770:	d106      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005772:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4a1a      	ldr	r2, [pc, #104]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800577c:	60d3      	str	r3, [r2, #12]
 800577e:	e011      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f000 f875 	bl	8005880 <RCCEx_PLLSAI1_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
 80057a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d02b      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057be:	4908      	ldr	r1, [pc, #32]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ce:	d109      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d0:	4b03      	ldr	r3, [pc, #12]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a02      	ldr	r2, [pc, #8]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057da:	60d3      	str	r3, [r2, #12]
 80057dc:	e014      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80057de:	bf00      	nop
 80057e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ec:	d10c      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2101      	movs	r1, #1
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 f843 	bl	8005880 <RCCEx_PLLSAI1_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01c      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005814:	4b19      	ldr	r3, [pc, #100]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005822:	4916      	ldr	r1, [pc, #88]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005832:	d10c      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	2102      	movs	r1, #2
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f820 	bl	8005880 <RCCEx_PLLSAI1_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005844:	7cfb      	ldrb	r3, [r7, #19]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800585a:	4b08      	ldr	r3, [pc, #32]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005860:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005868:	4904      	ldr	r1, [pc, #16]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005870:	7cbb      	ldrb	r3, [r7, #18]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000

08005880 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800588e:	4b74      	ldr	r3, [pc, #464]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800589a:	4b71      	ldr	r3, [pc, #452]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0203 	and.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d10d      	bne.n	80058c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
       ||
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058b2:	4b6b      	ldr	r3, [pc, #428]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	091b      	lsrs	r3, r3, #4
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
       ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d047      	beq.n	8005956 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	e044      	b.n	8005956 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d018      	beq.n	8005906 <RCCEx_PLLSAI1_Config+0x86>
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d825      	bhi.n	8005924 <RCCEx_PLLSAI1_Config+0xa4>
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d002      	beq.n	80058e2 <RCCEx_PLLSAI1_Config+0x62>
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d009      	beq.n	80058f4 <RCCEx_PLLSAI1_Config+0x74>
 80058e0:	e020      	b.n	8005924 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d11d      	bne.n	800592a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f2:	e01a      	b.n	800592a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d116      	bne.n	800592e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005904:	e013      	b.n	800592e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005906:	4b56      	ldr	r3, [pc, #344]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005912:	4b53      	ldr	r3, [pc, #332]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005922:	e006      	b.n	8005932 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e004      	b.n	8005934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005932:	bf00      	nop
    }

    if(status == HAL_OK)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800593a:	4b49      	ldr	r3, [pc, #292]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	430b      	orrs	r3, r1
 8005950:	4943      	ldr	r1, [pc, #268]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005952:	4313      	orrs	r3, r2
 8005954:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d17c      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800595c:	4b40      	ldr	r3, [pc, #256]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a3f      	ldr	r2, [pc, #252]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005962:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005968:	f7fe f8f8 	bl	8003b5c <HAL_GetTick>
 800596c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800596e:	e009      	b.n	8005984 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005970:	f7fe f8f4 	bl	8003b5c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d902      	bls.n	8005984 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	73fb      	strb	r3, [r7, #15]
        break;
 8005982:	e005      	b.n	8005990 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005984:	4b36      	ldr	r3, [pc, #216]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ef      	bne.n	8005970 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d15f      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800599c:	4b30      	ldr	r3, [pc, #192]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80059a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6892      	ldr	r2, [r2, #8]
 80059ac:	0211      	lsls	r1, r2, #8
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68d2      	ldr	r2, [r2, #12]
 80059b2:	06d2      	lsls	r2, r2, #27
 80059b4:	430a      	orrs	r2, r1
 80059b6:	492a      	ldr	r1, [pc, #168]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]
 80059bc:	e027      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d112      	bne.n	80059ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059c4:	4b26      	ldr	r3, [pc, #152]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80059cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6892      	ldr	r2, [r2, #8]
 80059d4:	0211      	lsls	r1, r2, #8
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6912      	ldr	r2, [r2, #16]
 80059da:	0852      	lsrs	r2, r2, #1
 80059dc:	3a01      	subs	r2, #1
 80059de:	0552      	lsls	r2, r2, #21
 80059e0:	430a      	orrs	r2, r1
 80059e2:	491f      	ldr	r1, [pc, #124]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	610b      	str	r3, [r1, #16]
 80059e8:	e011      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6892      	ldr	r2, [r2, #8]
 80059fa:	0211      	lsls	r1, r2, #8
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6952      	ldr	r2, [r2, #20]
 8005a00:	0852      	lsrs	r2, r2, #1
 8005a02:	3a01      	subs	r2, #1
 8005a04:	0652      	lsls	r2, r2, #25
 8005a06:	430a      	orrs	r2, r1
 8005a08:	4915      	ldr	r1, [pc, #84]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a0e:	4b14      	ldr	r3, [pc, #80]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a13      	ldr	r2, [pc, #76]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1a:	f7fe f89f 	bl	8003b5c <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a20:	e009      	b.n	8005a36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a22:	f7fe f89b 	bl	8003b5c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d902      	bls.n	8005a36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	73fb      	strb	r3, [r7, #15]
          break;
 8005a34:	e005      	b.n	8005a42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a36:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ef      	beq.n	8005a22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a48:	4b05      	ldr	r3, [pc, #20]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	4903      	ldr	r1, [pc, #12]	@ (8005a60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000

08005a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e095      	b.n	8005ba2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d108      	bne.n	8005a90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a86:	d009      	beq.n	8005a9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	61da      	str	r2, [r3, #28]
 8005a8e:	e005      	b.n	8005a9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fc fb9e 	bl	80021f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005adc:	d902      	bls.n	8005ae4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e002      	b.n	8005aea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ae8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005af2:	d007      	beq.n	8005b04 <HAL_SPI_Init+0xa0>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005afc:	d002      	beq.n	8005b04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	ea42 0103 	orr.w	r1, r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	0c1b      	lsrs	r3, r3, #16
 8005b60:	f003 0204 	and.w	r2, r3, #4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b80:	ea42 0103 	orr.w	r1, r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b08a      	sub	sp, #40	@ 0x28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bbc:	f7fd ffce 	bl	8003b5c <HAL_GetTick>
 8005bc0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bc8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bd8:	7ffb      	ldrb	r3, [r7, #31]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d00c      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x4e>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be4:	d106      	bne.n	8005bf4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <HAL_SPI_TransmitReceive+0x4a>
 8005bee:	7ffb      	ldrb	r3, [r7, #31]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d001      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e1f3      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x60>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x60>
 8005c04:	887b      	ldrh	r3, [r7, #2]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e1e8      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x72>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e1e1      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x436>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d003      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2205      	movs	r2, #5
 8005c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	887a      	ldrh	r2, [r7, #2]
 8005c50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c7a:	d802      	bhi.n	8005c82 <HAL_SPI_TransmitReceive+0xd8>
 8005c7c:	8abb      	ldrh	r3, [r7, #20]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d908      	bls.n	8005c94 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	e007      	b.n	8005ca4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ca2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cae:	2b40      	cmp	r3, #64	@ 0x40
 8005cb0:	d007      	beq.n	8005cc2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cca:	f240 8083 	bls.w	8005dd4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_TransmitReceive+0x132>
 8005cd6:	8afb      	ldrh	r3, [r7, #22]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d16f      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce0:	881a      	ldrh	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	1c9a      	adds	r2, r3, #2
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d00:	e05c      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d11b      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x19e>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x19e>
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d113      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d24:	881a      	ldrh	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	1c9a      	adds	r2, r3, #2
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d11c      	bne.n	8005d90 <HAL_SPI_TransmitReceive+0x1e6>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d016      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	b292      	uxth	r2, r2
 8005d6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	1c9a      	adds	r2, r3, #2
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d90:	f7fd fee4 	bl	8003b5c <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d80d      	bhi.n	8005dbc <HAL_SPI_TransmitReceive+0x212>
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d009      	beq.n	8005dbc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e111      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d19d      	bne.n	8005d02 <HAL_SPI_TransmitReceive+0x158>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d197      	bne.n	8005d02 <HAL_SPI_TransmitReceive+0x158>
 8005dd2:	e0e5      	b.n	8005fa0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_SPI_TransmitReceive+0x23a>
 8005ddc:	8afb      	ldrh	r3, [r7, #22]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	f040 80d1 	bne.w	8005f86 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d912      	bls.n	8005e14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df2:	881a      	ldrh	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfe:	1c9a      	adds	r2, r3, #2
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b02      	subs	r3, #2
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e12:	e0b8      	b.n	8005f86 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	7812      	ldrb	r2, [r2, #0]
 8005e20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e3a:	e0a4      	b.n	8005f86 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d134      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x30a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02f      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x30a>
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d12c      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d912      	bls.n	8005e8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	881a      	ldrh	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e74:	1c9a      	adds	r2, r3, #2
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b02      	subs	r3, #2
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e88:	e012      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	7812      	ldrb	r2, [r2, #0]
 8005e96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d148      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x3aa>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d042      	beq.n	8005f54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d923      	bls.n	8005f22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b02      	subs	r3, #2
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d81f      	bhi.n	8005f50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f1e:	605a      	str	r2, [r3, #4]
 8005f20:	e016      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f103 020c 	add.w	r2, r3, #12
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f50:	2301      	movs	r3, #1
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f54:	f7fd fe02 	bl	8003b5c <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d803      	bhi.n	8005f6c <HAL_SPI_TransmitReceive+0x3c2>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6a:	d102      	bne.n	8005f72 <HAL_SPI_TransmitReceive+0x3c8>
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e02c      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f47f af55 	bne.w	8005e3c <HAL_SPI_TransmitReceive+0x292>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f47f af4e 	bne.w	8005e3c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fa0:	6a3a      	ldr	r2, [r7, #32]
 8005fa2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fa5d 	bl	8006464 <SPI_EndRxTxTransaction>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e00e      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005fde:	2300      	movs	r3, #0
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3728      	adds	r7, #40	@ 0x28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	099b      	lsrs	r3, r3, #6
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10f      	bne.n	800602c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	099b      	lsrs	r3, r3, #6
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3
    return;
 800602a:	e0d7      	b.n	80061dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_SPI_IRQHandler+0x66>
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	09db      	lsrs	r3, r3, #7
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
    return;
 800604c:	e0c6      	b.n	80061dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10c      	bne.n	8006074 <HAL_SPI_IRQHandler+0x8c>
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	099b      	lsrs	r3, r3, #6
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80b4 	beq.w	80061dc <HAL_SPI_IRQHandler+0x1f4>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80ad 	beq.w	80061dc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	099b      	lsrs	r3, r3, #6
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d023      	beq.n	80060d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b03      	cmp	r3, #3
 8006098:	d011      	beq.n	80060be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609e:	f043 0204 	orr.w	r2, r3, #4
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	e00b      	b.n	80060d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	693b      	ldr	r3, [r7, #16]
        return;
 80060d4:	e082      	b.n	80061dc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d014      	beq.n	800610c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e6:	f043 0201 	orr.w	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00c      	beq.n	8006132 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800611c:	f043 0208 	orr.w	r2, r3, #8
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006124:	2300      	movs	r3, #0
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006136:	2b00      	cmp	r3, #0
 8006138:	d04f      	beq.n	80061da <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006148:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <HAL_SPI_IRQHandler+0x17e>
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d034      	beq.n	80061d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0203 	bic.w	r2, r2, #3
 8006174:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617a:	2b00      	cmp	r3, #0
 800617c:	d011      	beq.n	80061a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006182:	4a18      	ldr	r2, [pc, #96]	@ (80061e4 <HAL_SPI_IRQHandler+0x1fc>)
 8006184:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618a:	4618      	mov	r0, r3
 800618c:	f7fd ff8a 	bl	80040a4 <HAL_DMA_Abort_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800619a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ae:	4a0d      	ldr	r2, [pc, #52]	@ (80061e4 <HAL_SPI_IRQHandler+0x1fc>)
 80061b0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fd ff74 	bl	80040a4 <HAL_DMA_Abort_IT>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80061ce:	e003      	b.n	80061d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f809 	bl	80061e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80061d6:	e000      	b.n	80061da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80061d8:	bf00      	nop
    return;
 80061da:	bf00      	nop
  }
}
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	080061fd 	.word	0x080061fd

080061e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006208:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7ff ffe5 	bl	80061e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006238:	f7fd fc90 	bl	8003b5c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	4413      	add	r3, r2
 8006246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006248:	f7fd fc88 	bl	8003b5c <HAL_GetTick>
 800624c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800624e:	4b39      	ldr	r3, [pc, #228]	@ (8006334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	015b      	lsls	r3, r3, #5
 8006254:	0d1b      	lsrs	r3, r3, #20
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800625e:	e054      	b.n	800630a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d050      	beq.n	800630a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006268:	f7fd fc78 	bl	8003b5c <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	429a      	cmp	r2, r3
 8006276:	d902      	bls.n	800627e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d13d      	bne.n	80062fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800628c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006296:	d111      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062a0:	d004      	beq.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062aa:	d107      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c4:	d10f      	bne.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e017      	b.n	800632a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3b01      	subs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d19b      	bne.n	8006260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3720      	adds	r7, #32
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000014 	.word	0x20000014

08006338 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	@ 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800634a:	f7fd fc07 	bl	8003b5c <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	4413      	add	r3, r2
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800635a:	f7fd fbff 	bl	8003b5c <HAL_GetTick>
 800635e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006368:	4b3d      	ldr	r3, [pc, #244]	@ (8006460 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	00da      	lsls	r2, r3, #3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	0d1b      	lsrs	r3, r3, #20
 8006378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637a:	fb02 f303 	mul.w	r3, r2, r3
 800637e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006380:	e060      	b.n	8006444 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006388:	d107      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0x62>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006398:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d050      	beq.n	8006444 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063a2:	f7fd fbdb 	bl	8003b5c <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d902      	bls.n	80063b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d13d      	bne.n	8006434 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063d0:	d111      	bne.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063da:	d004      	beq.n	80063e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e4:	d107      	bne.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fe:	d10f      	bne.n	8006420 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800641e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e010      	b.n	8006456 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	3b01      	subs	r3, #1
 8006442:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	4013      	ands	r3, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d196      	bne.n	8006382 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3728      	adds	r7, #40	@ 0x28
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000014 	.word	0x20000014

08006464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff ff5b 	bl	8006338 <SPI_WaitFifoStateUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e027      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	2180      	movs	r1, #128	@ 0x80
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff fec0 	bl	8006228 <SPI_WaitFlagStateUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e014      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff ff34 	bl	8006338 <SPI_WaitFifoStateUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e000      	b.n	80064e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e049      	b.n	8006596 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fc faa4 	bl	8002a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f000 fab2 	bl	8006a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d001      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e03b      	b.n	8006630 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a19      	ldr	r2, [pc, #100]	@ (800663c <HAL_TIM_Base_Start_IT+0x9c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_TIM_Base_Start_IT+0x4e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e2:	d004      	beq.n	80065ee <HAL_TIM_Base_Start_IT+0x4e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a15      	ldr	r2, [pc, #84]	@ (8006640 <HAL_TIM_Base_Start_IT+0xa0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d115      	bne.n	800661a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	4b13      	ldr	r3, [pc, #76]	@ (8006644 <HAL_TIM_Base_Start_IT+0xa4>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d015      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x8c>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006606:	d011      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006618:	e008      	b.n	800662c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0201 	orr.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e000      	b.n	800662e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40014000 	.word	0x40014000
 8006644:	00010007 	.word	0x00010007

08006648 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	f241 1311 	movw	r3, #4369	@ 0x1111
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10f      	bne.n	8006690 <HAL_TIM_Base_Stop_IT+0x48>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	f240 4344 	movw	r3, #1092	@ 0x444
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d107      	bne.n	8006690 <HAL_TIM_Base_Stop_IT+0x48>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0201 	bic.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d020      	beq.n	800670a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01b      	beq.n	800670a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f06f 0202 	mvn.w	r2, #2
 80066da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f9b2 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 80066f6:	e005      	b.n	8006704 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f9a4 	bl	8006a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f9b5 	bl	8006a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d020      	beq.n	8006756 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01b      	beq.n	8006756 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f06f 0204 	mvn.w	r2, #4
 8006726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f98c 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 8006742:	e005      	b.n	8006750 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f97e 	bl	8006a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f98f 	bl	8006a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d020      	beq.n	80067a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 0308 	and.w	r3, r3, #8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01b      	beq.n	80067a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f06f 0208 	mvn.w	r2, #8
 8006772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2204      	movs	r2, #4
 8006778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f966 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 800678e:	e005      	b.n	800679c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f958 	bl	8006a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f969 	bl	8006a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d020      	beq.n	80067ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01b      	beq.n	80067ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f06f 0210 	mvn.w	r2, #16
 80067be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2208      	movs	r2, #8
 80067c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f940 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 80067da:	e005      	b.n	80067e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f932 	bl	8006a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f943 	bl	8006a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00c      	beq.n	8006812 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f06f 0201 	mvn.w	r2, #1
 800680a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fc fc47 	bl	80030a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 faa6 	bl	8006d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00c      	beq.n	8006864 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa9e 	bl	8006da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00c      	beq.n	8006888 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f8fd 	bl	8006a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0220 	mvn.w	r2, #32
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa66 	bl	8006d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_TIM_ConfigClockSource+0x1c>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e0b6      	b.n	8006a3e <HAL_TIM_ConfigClockSource+0x18a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800690c:	d03e      	beq.n	800698c <HAL_TIM_ConfigClockSource+0xd8>
 800690e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006912:	f200 8087 	bhi.w	8006a24 <HAL_TIM_ConfigClockSource+0x170>
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800691a:	f000 8086 	beq.w	8006a2a <HAL_TIM_ConfigClockSource+0x176>
 800691e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006922:	d87f      	bhi.n	8006a24 <HAL_TIM_ConfigClockSource+0x170>
 8006924:	2b70      	cmp	r3, #112	@ 0x70
 8006926:	d01a      	beq.n	800695e <HAL_TIM_ConfigClockSource+0xaa>
 8006928:	2b70      	cmp	r3, #112	@ 0x70
 800692a:	d87b      	bhi.n	8006a24 <HAL_TIM_ConfigClockSource+0x170>
 800692c:	2b60      	cmp	r3, #96	@ 0x60
 800692e:	d050      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0x11e>
 8006930:	2b60      	cmp	r3, #96	@ 0x60
 8006932:	d877      	bhi.n	8006a24 <HAL_TIM_ConfigClockSource+0x170>
 8006934:	2b50      	cmp	r3, #80	@ 0x50
 8006936:	d03c      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0xfe>
 8006938:	2b50      	cmp	r3, #80	@ 0x50
 800693a:	d873      	bhi.n	8006a24 <HAL_TIM_ConfigClockSource+0x170>
 800693c:	2b40      	cmp	r3, #64	@ 0x40
 800693e:	d058      	beq.n	80069f2 <HAL_TIM_ConfigClockSource+0x13e>
 8006940:	2b40      	cmp	r3, #64	@ 0x40
 8006942:	d86f      	bhi.n	8006a24 <HAL_TIM_ConfigClockSource+0x170>
 8006944:	2b30      	cmp	r3, #48	@ 0x30
 8006946:	d064      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0x15e>
 8006948:	2b30      	cmp	r3, #48	@ 0x30
 800694a:	d86b      	bhi.n	8006a24 <HAL_TIM_ConfigClockSource+0x170>
 800694c:	2b20      	cmp	r3, #32
 800694e:	d060      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0x15e>
 8006950:	2b20      	cmp	r3, #32
 8006952:	d867      	bhi.n	8006a24 <HAL_TIM_ConfigClockSource+0x170>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d05c      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0x15e>
 8006958:	2b10      	cmp	r3, #16
 800695a:	d05a      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0x15e>
 800695c:	e062      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800696e:	f000 f97d 	bl	8006c6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006980:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	609a      	str	r2, [r3, #8]
      break;
 800698a:	e04f      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800699c:	f000 f966 	bl	8006c6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069ae:	609a      	str	r2, [r3, #8]
      break;
 80069b0:	e03c      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069be:	461a      	mov	r2, r3
 80069c0:	f000 f8da 	bl	8006b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2150      	movs	r1, #80	@ 0x50
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 f933 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 80069d0:	e02c      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069de:	461a      	mov	r2, r3
 80069e0:	f000 f8f9 	bl	8006bd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2160      	movs	r1, #96	@ 0x60
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f923 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 80069f0:	e01c      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069fe:	461a      	mov	r2, r3
 8006a00:	f000 f8ba 	bl	8006b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2140      	movs	r1, #64	@ 0x40
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f913 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 8006a10:	e00c      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f000 f90a 	bl	8006c36 <TIM_ITRx_SetConfig>
      break;
 8006a22:	e003      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	73fb      	strb	r3, [r7, #15]
      break;
 8006a28:	e000      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a30      	ldr	r2, [pc, #192]	@ (8006b6c <TIM_Base_SetConfig+0xd4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_Base_SetConfig+0x20>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab6:	d108      	bne.n	8006aca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a27      	ldr	r2, [pc, #156]	@ (8006b6c <TIM_Base_SetConfig+0xd4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00b      	beq.n	8006aea <TIM_Base_SetConfig+0x52>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad8:	d007      	beq.n	8006aea <TIM_Base_SetConfig+0x52>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a24      	ldr	r2, [pc, #144]	@ (8006b70 <TIM_Base_SetConfig+0xd8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_Base_SetConfig+0x52>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a23      	ldr	r2, [pc, #140]	@ (8006b74 <TIM_Base_SetConfig+0xdc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d108      	bne.n	8006afc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a12      	ldr	r2, [pc, #72]	@ (8006b6c <TIM_Base_SetConfig+0xd4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d007      	beq.n	8006b38 <TIM_Base_SetConfig+0xa0>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a11      	ldr	r2, [pc, #68]	@ (8006b70 <TIM_Base_SetConfig+0xd8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d003      	beq.n	8006b38 <TIM_Base_SetConfig+0xa0>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a10      	ldr	r2, [pc, #64]	@ (8006b74 <TIM_Base_SetConfig+0xdc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d103      	bne.n	8006b40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	691a      	ldr	r2, [r3, #16]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d105      	bne.n	8006b5e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	611a      	str	r2, [r3, #16]
  }
}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400

08006b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 030a 	bic.w	r3, r3, #10
 8006bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f023 0210 	bic.w	r2, r3, #16
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	031b      	lsls	r3, r3, #12
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f043 0307 	orr.w	r3, r3, #7
 8006c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	609a      	str	r2, [r3, #8]
}
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	021a      	lsls	r2, r3, #8
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e04f      	b.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a21      	ldr	r2, [pc, #132]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d108      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a14      	ldr	r2, [pc, #80]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a10      	ldr	r2, [pc, #64]	@ (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10c      	bne.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40012c00 	.word	0x40012c00
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e040      	b.n	8006e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fb fed0 	bl	8002b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	@ 0x24
 8006de0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ffc0 	bl	8007d80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fd63 	bl	80078cc <UART_SetConfig>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e01b      	b.n	8006e48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f83f 	bl	8007ec4 <UART_CheckIdleState>
 8006e46:	4603      	mov	r3, r0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	@ 0x28
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d177      	bne.n	8006f58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <HAL_UART_Transmit+0x24>
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e070      	b.n	8006f5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2221      	movs	r2, #33	@ 0x21
 8006e84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e86:	f7fc fe69 	bl	8003b5c <HAL_GetTick>
 8006e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	88fa      	ldrh	r2, [r7, #6]
 8006e98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea4:	d108      	bne.n	8006eb8 <HAL_UART_Transmit+0x68>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	e003      	b.n	8006ec0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ec0:	e02f      	b.n	8006f22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2180      	movs	r1, #128	@ 0x80
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f001 f8a1 	bl	8008014 <UART_WaitOnFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e03b      	b.n	8006f5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10b      	bne.n	8006f00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	881a      	ldrh	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	3302      	adds	r3, #2
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	e007      	b.n	8006f10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1c9      	bne.n	8006ec2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2200      	movs	r2, #0
 8006f36:	2140      	movs	r1, #64	@ 0x40
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f001 f86b 	bl	8008014 <UART_WaitOnFlagUntilTimeout>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e005      	b.n	8006f5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	e000      	b.n	8006f5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	@ 0x28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d165      	bne.n	8007046 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_UART_Transmit_DMA+0x22>
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e05e      	b.n	8007048 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	88fa      	ldrh	r2, [r7, #6]
 8006f94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	88fa      	ldrh	r2, [r7, #6]
 8006f9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2221      	movs	r2, #33	@ 0x21
 8006fac:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d027      	beq.n	8007006 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fba:	4a25      	ldr	r2, [pc, #148]	@ (8007050 <HAL_UART_Transmit_DMA+0xec>)
 8006fbc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc2:	4a24      	ldr	r2, [pc, #144]	@ (8007054 <HAL_UART_Transmit_DMA+0xf0>)
 8006fc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fca:	4a23      	ldr	r2, [pc, #140]	@ (8007058 <HAL_UART_Transmit_DMA+0xf4>)
 8006fcc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fde:	4619      	mov	r1, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3328      	adds	r3, #40	@ 0x28
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	f7fc ffbd 	bl	8003f68 <HAL_DMA_Start_IT>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d008      	beq.n	8007006 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2210      	movs	r2, #16
 8006ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e020      	b.n	8007048 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2240      	movs	r2, #64	@ 0x40
 800700c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702e:	623a      	str	r2, [r7, #32]
 8007030:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	69f9      	ldr	r1, [r7, #28]
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	61bb      	str	r3, [r7, #24]
   return(result);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	e000      	b.n	8007048 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007046:	2302      	movs	r3, #2
  }
}
 8007048:	4618      	mov	r0, r3
 800704a:	3728      	adds	r7, #40	@ 0x28
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	08008345 	.word	0x08008345
 8007054:	080083df 	.word	0x080083df
 8007058:	08008565 	.word	0x08008565

0800705c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08a      	sub	sp, #40	@ 0x28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007070:	2b20      	cmp	r3, #32
 8007072:	d137      	bne.n	80070e4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_UART_Receive_DMA+0x24>
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e030      	b.n	80070e6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a18      	ldr	r2, [pc, #96]	@ (80070f0 <HAL_UART_Receive_DMA+0x94>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d01f      	beq.n	80070d4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d018      	beq.n	80070d4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	613b      	str	r3, [r7, #16]
   return(result);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	623b      	str	r3, [r7, #32]
 80070c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	69f9      	ldr	r1, [r7, #28]
 80070c6:	6a3a      	ldr	r2, [r7, #32]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	461a      	mov	r2, r3
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f001 f808 	bl	80080f0 <UART_Start_Receive_DMA>
 80070e0:	4603      	mov	r3, r0
 80070e2:	e000      	b.n	80070e6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070e4:	2302      	movs	r3, #2
  }
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3728      	adds	r7, #40	@ 0x28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	40008000 	.word	0x40008000

080070f4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b09a      	sub	sp, #104	@ 0x68
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800710a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800710c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007110:	667b      	str	r3, [r7, #100]	@ 0x64
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800711a:	657b      	str	r3, [r7, #84]	@ 0x54
 800711c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007120:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e6      	bne.n	80070fc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	663b      	str	r3, [r7, #96]	@ 0x60
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800714e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e5      	bne.n	800712e <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007166:	2b01      	cmp	r3, #1
 8007168:	d118      	bne.n	800719c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	61fb      	str	r3, [r7, #28]
   return(result);
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f023 0310 	bic.w	r3, r3, #16
 800717e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800718a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800718e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e6      	bne.n	800716a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a6:	2b40      	cmp	r3, #64	@ 0x40
 80071a8:	d137      	bne.n	800721a <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3308      	adds	r3, #8
 80071c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071ca:	61ba      	str	r2, [r7, #24]
 80071cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6979      	ldr	r1, [r7, #20]
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	613b      	str	r3, [r7, #16]
   return(result);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e5      	bne.n	80071aa <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d019      	beq.n	800721a <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ea:	2200      	movs	r2, #0
 80071ec:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fc ff18 	bl	8004028 <HAL_DMA_Abort>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00d      	beq.n	800721a <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007202:	4618      	mov	r0, r3
 8007204:	f7fd f83e 	bl	8004284 <HAL_DMA_GetError>
 8007208:	4603      	mov	r3, r0
 800720a:	2b20      	cmp	r3, #32
 800720c:	d105      	bne.n	800721a <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2210      	movs	r2, #16
 8007212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e019      	b.n	800724e <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	220f      	movs	r2, #15
 8007228:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	8b1b      	ldrh	r3, [r3, #24]
 8007230:	b29a      	uxth	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0208 	orr.w	r2, r2, #8
 800723a:	b292      	uxth	r2, r2
 800723c:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3768      	adds	r7, #104	@ 0x68
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b0ba      	sub	sp, #232	@ 0xe8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800727e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007282:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007286:	4013      	ands	r3, r2
 8007288:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800728c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d115      	bne.n	80072c0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00f      	beq.n	80072c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 82ca 	beq.w	800784a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
      }
      return;
 80072be:	e2c4      	b.n	800784a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80072c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8117 	beq.w	80074f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80072ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80072d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80072da:	4b85      	ldr	r3, [pc, #532]	@ (80074f0 <HAL_UART_IRQHandler+0x298>)
 80072dc:	4013      	ands	r3, r2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 810a 	beq.w	80074f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d011      	beq.n	8007314 <HAL_UART_IRQHandler+0xbc>
 80072f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2201      	movs	r2, #1
 8007302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800730a:	f043 0201 	orr.w	r2, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d011      	beq.n	8007344 <HAL_UART_IRQHandler+0xec>
 8007320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2202      	movs	r2, #2
 8007332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800733a:	f043 0204 	orr.w	r2, r3, #4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d011      	beq.n	8007374 <HAL_UART_IRQHandler+0x11c>
 8007350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2204      	movs	r2, #4
 8007362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800736a:	f043 0202 	orr.w	r2, r3, #2
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d017      	beq.n	80073b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007390:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2208      	movs	r2, #8
 800739e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a6:	f043 0208 	orr.w	r2, r3, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d012      	beq.n	80073e2 <HAL_UART_IRQHandler+0x18a>
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d8:	f043 0220 	orr.w	r2, r3, #32
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8230 	beq.w	800784e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00d      	beq.n	8007416 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800741c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800742a:	2b40      	cmp	r3, #64	@ 0x40
 800742c:	d005      	beq.n	800743a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800742e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007432:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007436:	2b00      	cmp	r3, #0
 8007438:	d04f      	beq.n	80074da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 ff1e 	bl	800827c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744a:	2b40      	cmp	r3, #64	@ 0x40
 800744c:	d141      	bne.n	80074d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3308      	adds	r3, #8
 8007454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007464:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800746c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800747a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800747e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1d9      	bne.n	800744e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d013      	beq.n	80074ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074a6:	4a13      	ldr	r2, [pc, #76]	@ (80074f4 <HAL_UART_IRQHandler+0x29c>)
 80074a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fc fdf8 	bl	80040a4 <HAL_DMA_Abort_IT>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d017      	beq.n	80074ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c8:	e00f      	b.n	80074ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f9e8 	bl	80078a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d0:	e00b      	b.n	80074ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f9e4 	bl	80078a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d8:	e007      	b.n	80074ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f9e0 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80074e8:	e1b1      	b.n	800784e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ea:	bf00      	nop
    return;
 80074ec:	e1af      	b.n	800784e <HAL_UART_IRQHandler+0x5f6>
 80074ee:	bf00      	nop
 80074f0:	04000120 	.word	0x04000120
 80074f4:	080085e3 	.word	0x080085e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	f040 816a 	bne.w	80077d6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 8163 	beq.w	80077d6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 815c 	beq.w	80077d6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2210      	movs	r2, #16
 8007524:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007530:	2b40      	cmp	r3, #64	@ 0x40
 8007532:	f040 80d4 	bne.w	80076de <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007542:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 80ad 	beq.w	80076a6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007556:	429a      	cmp	r2, r3
 8007558:	f080 80a5 	bcs.w	80076a6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007562:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0320 	and.w	r3, r3, #32
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 8086 	bne.w	8007684 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800758c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80075ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80075ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1da      	bne.n	8007578 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80075d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80075e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80075ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80075ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80075f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e1      	bne.n	80075c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800760e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e3      	bne.n	80075fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007654:	f023 0310 	bic.w	r3, r3, #16
 8007658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007666:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007668:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800766c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e4      	bne.n	8007644 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767e:	4618      	mov	r0, r3
 8007680:	f7fc fcd2 	bl	8004028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007696:	b29b      	uxth	r3, r3
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	b29b      	uxth	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f908 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80076a4:	e0d5      	b.n	8007852 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076b0:	429a      	cmp	r2, r3
 80076b2:	f040 80ce 	bne.w	8007852 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	f040 80c5 	bne.w	8007852 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f8ec 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
      return;
 80076dc:	e0b9      	b.n	8007852 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 80ab 	beq.w	8007856 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 80a6 	beq.w	8007856 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800771a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800771e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800772c:	647b      	str	r3, [r7, #68]	@ 0x44
 800772e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800773a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e4      	bne.n	800770a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	623b      	str	r3, [r7, #32]
   return(result);
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007764:	633a      	str	r2, [r7, #48]	@ 0x30
 8007766:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800776a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e3      	bne.n	8007740 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	60fb      	str	r3, [r7, #12]
   return(result);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	69b9      	ldr	r1, [r7, #24]
 80077b4:	69fa      	ldr	r2, [r7, #28]
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	617b      	str	r3, [r7, #20]
   return(result);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e4      	bne.n	800778c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f870 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077d4:	e03f      	b.n	8007856 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00e      	beq.n	8007800 <HAL_UART_IRQHandler+0x5a8>
 80077e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80077f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 ff32 	bl	8008662 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077fe:	e02d      	b.n	800785c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00e      	beq.n	800782a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800780c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01c      	beq.n	800785a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
    }
    return;
 8007828:	e017      	b.n	800785a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d012      	beq.n	800785c <HAL_UART_IRQHandler+0x604>
 8007836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800783a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00c      	beq.n	800785c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fee3 	bl	800860e <UART_EndTransmit_IT>
    return;
 8007848:	e008      	b.n	800785c <HAL_UART_IRQHandler+0x604>
      return;
 800784a:	bf00      	nop
 800784c:	e006      	b.n	800785c <HAL_UART_IRQHandler+0x604>
    return;
 800784e:	bf00      	nop
 8007850:	e004      	b.n	800785c <HAL_UART_IRQHandler+0x604>
      return;
 8007852:	bf00      	nop
 8007854:	e002      	b.n	800785c <HAL_UART_IRQHandler+0x604>
      return;
 8007856:	bf00      	nop
 8007858:	e000      	b.n	800785c <HAL_UART_IRQHandler+0x604>
    return;
 800785a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800785c:	37e8      	adds	r7, #232	@ 0xe8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop

08007864 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078d0:	b08a      	sub	sp, #40	@ 0x28
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	431a      	orrs	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b9e      	ldr	r3, [pc, #632]	@ (8007b74 <UART_SetConfig+0x2a8>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	6812      	ldr	r2, [r2, #0]
 8007902:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007904:	430b      	orrs	r3, r1
 8007906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a93      	ldr	r2, [pc, #588]	@ (8007b78 <UART_SetConfig+0x2ac>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007934:	4313      	orrs	r3, r2
 8007936:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007948:	430a      	orrs	r2, r1
 800794a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a8a      	ldr	r2, [pc, #552]	@ (8007b7c <UART_SetConfig+0x2b0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d126      	bne.n	80079a4 <UART_SetConfig+0xd8>
 8007956:	4b8a      	ldr	r3, [pc, #552]	@ (8007b80 <UART_SetConfig+0x2b4>)
 8007958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795c:	f003 0303 	and.w	r3, r3, #3
 8007960:	2b03      	cmp	r3, #3
 8007962:	d81b      	bhi.n	800799c <UART_SetConfig+0xd0>
 8007964:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <UART_SetConfig+0xa0>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	0800797d 	.word	0x0800797d
 8007970:	0800798d 	.word	0x0800798d
 8007974:	08007985 	.word	0x08007985
 8007978:	08007995 	.word	0x08007995
 800797c:	2301      	movs	r3, #1
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007982:	e0ab      	b.n	8007adc <UART_SetConfig+0x210>
 8007984:	2302      	movs	r3, #2
 8007986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800798a:	e0a7      	b.n	8007adc <UART_SetConfig+0x210>
 800798c:	2304      	movs	r3, #4
 800798e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007992:	e0a3      	b.n	8007adc <UART_SetConfig+0x210>
 8007994:	2308      	movs	r3, #8
 8007996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800799a:	e09f      	b.n	8007adc <UART_SetConfig+0x210>
 800799c:	2310      	movs	r3, #16
 800799e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a2:	e09b      	b.n	8007adc <UART_SetConfig+0x210>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a76      	ldr	r2, [pc, #472]	@ (8007b84 <UART_SetConfig+0x2b8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d138      	bne.n	8007a20 <UART_SetConfig+0x154>
 80079ae:	4b74      	ldr	r3, [pc, #464]	@ (8007b80 <UART_SetConfig+0x2b4>)
 80079b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b4:	f003 030c 	and.w	r3, r3, #12
 80079b8:	2b0c      	cmp	r3, #12
 80079ba:	d82d      	bhi.n	8007a18 <UART_SetConfig+0x14c>
 80079bc:	a201      	add	r2, pc, #4	@ (adr r2, 80079c4 <UART_SetConfig+0xf8>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079f9 	.word	0x080079f9
 80079c8:	08007a19 	.word	0x08007a19
 80079cc:	08007a19 	.word	0x08007a19
 80079d0:	08007a19 	.word	0x08007a19
 80079d4:	08007a09 	.word	0x08007a09
 80079d8:	08007a19 	.word	0x08007a19
 80079dc:	08007a19 	.word	0x08007a19
 80079e0:	08007a19 	.word	0x08007a19
 80079e4:	08007a01 	.word	0x08007a01
 80079e8:	08007a19 	.word	0x08007a19
 80079ec:	08007a19 	.word	0x08007a19
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079fe:	e06d      	b.n	8007adc <UART_SetConfig+0x210>
 8007a00:	2302      	movs	r3, #2
 8007a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a06:	e069      	b.n	8007adc <UART_SetConfig+0x210>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a0e:	e065      	b.n	8007adc <UART_SetConfig+0x210>
 8007a10:	2308      	movs	r3, #8
 8007a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a16:	e061      	b.n	8007adc <UART_SetConfig+0x210>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a1e:	e05d      	b.n	8007adc <UART_SetConfig+0x210>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a58      	ldr	r2, [pc, #352]	@ (8007b88 <UART_SetConfig+0x2bc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d125      	bne.n	8007a76 <UART_SetConfig+0x1aa>
 8007a2a:	4b55      	ldr	r3, [pc, #340]	@ (8007b80 <UART_SetConfig+0x2b4>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a34:	2b30      	cmp	r3, #48	@ 0x30
 8007a36:	d016      	beq.n	8007a66 <UART_SetConfig+0x19a>
 8007a38:	2b30      	cmp	r3, #48	@ 0x30
 8007a3a:	d818      	bhi.n	8007a6e <UART_SetConfig+0x1a2>
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d00a      	beq.n	8007a56 <UART_SetConfig+0x18a>
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d814      	bhi.n	8007a6e <UART_SetConfig+0x1a2>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <UART_SetConfig+0x182>
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d008      	beq.n	8007a5e <UART_SetConfig+0x192>
 8007a4c:	e00f      	b.n	8007a6e <UART_SetConfig+0x1a2>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a54:	e042      	b.n	8007adc <UART_SetConfig+0x210>
 8007a56:	2302      	movs	r3, #2
 8007a58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5c:	e03e      	b.n	8007adc <UART_SetConfig+0x210>
 8007a5e:	2304      	movs	r3, #4
 8007a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a64:	e03a      	b.n	8007adc <UART_SetConfig+0x210>
 8007a66:	2308      	movs	r3, #8
 8007a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6c:	e036      	b.n	8007adc <UART_SetConfig+0x210>
 8007a6e:	2310      	movs	r3, #16
 8007a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a74:	e032      	b.n	8007adc <UART_SetConfig+0x210>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8007b78 <UART_SetConfig+0x2ac>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d12a      	bne.n	8007ad6 <UART_SetConfig+0x20a>
 8007a80:	4b3f      	ldr	r3, [pc, #252]	@ (8007b80 <UART_SetConfig+0x2b4>)
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a86:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a8e:	d01a      	beq.n	8007ac6 <UART_SetConfig+0x1fa>
 8007a90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a94:	d81b      	bhi.n	8007ace <UART_SetConfig+0x202>
 8007a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a9a:	d00c      	beq.n	8007ab6 <UART_SetConfig+0x1ea>
 8007a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aa0:	d815      	bhi.n	8007ace <UART_SetConfig+0x202>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <UART_SetConfig+0x1e2>
 8007aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aaa:	d008      	beq.n	8007abe <UART_SetConfig+0x1f2>
 8007aac:	e00f      	b.n	8007ace <UART_SetConfig+0x202>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab4:	e012      	b.n	8007adc <UART_SetConfig+0x210>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007abc:	e00e      	b.n	8007adc <UART_SetConfig+0x210>
 8007abe:	2304      	movs	r3, #4
 8007ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac4:	e00a      	b.n	8007adc <UART_SetConfig+0x210>
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007acc:	e006      	b.n	8007adc <UART_SetConfig+0x210>
 8007ace:	2310      	movs	r3, #16
 8007ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad4:	e002      	b.n	8007adc <UART_SetConfig+0x210>
 8007ad6:	2310      	movs	r3, #16
 8007ad8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a25      	ldr	r2, [pc, #148]	@ (8007b78 <UART_SetConfig+0x2ac>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	f040 808a 	bne.w	8007bfc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d824      	bhi.n	8007b3a <UART_SetConfig+0x26e>
 8007af0:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <UART_SetConfig+0x22c>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007b3b 	.word	0x08007b3b
 8007b00:	08007b25 	.word	0x08007b25
 8007b04:	08007b3b 	.word	0x08007b3b
 8007b08:	08007b2b 	.word	0x08007b2b
 8007b0c:	08007b3b 	.word	0x08007b3b
 8007b10:	08007b3b 	.word	0x08007b3b
 8007b14:	08007b3b 	.word	0x08007b3b
 8007b18:	08007b33 	.word	0x08007b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b1c:	f7fd fbda 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8007b20:	61f8      	str	r0, [r7, #28]
        break;
 8007b22:	e010      	b.n	8007b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b24:	4b19      	ldr	r3, [pc, #100]	@ (8007b8c <UART_SetConfig+0x2c0>)
 8007b26:	61fb      	str	r3, [r7, #28]
        break;
 8007b28:	e00d      	b.n	8007b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b2a:	f7fd fb3b 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8007b2e:	61f8      	str	r0, [r7, #28]
        break;
 8007b30:	e009      	b.n	8007b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b36:	61fb      	str	r3, [r7, #28]
        break;
 8007b38:	e005      	b.n	8007b46 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8109 	beq.w	8007d60 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	4413      	add	r3, r2
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d305      	bcc.n	8007b6a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b64:	69fa      	ldr	r2, [r7, #28]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d912      	bls.n	8007b90 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b70:	e0f6      	b.n	8007d60 <UART_SetConfig+0x494>
 8007b72:	bf00      	nop
 8007b74:	efff69f3 	.word	0xefff69f3
 8007b78:	40008000 	.word	0x40008000
 8007b7c:	40013800 	.word	0x40013800
 8007b80:	40021000 	.word	0x40021000
 8007b84:	40004400 	.word	0x40004400
 8007b88:	40004800 	.word	0x40004800
 8007b8c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	2200      	movs	r2, #0
 8007b94:	461c      	mov	r4, r3
 8007b96:	4615      	mov	r5, r2
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	022b      	lsls	r3, r5, #8
 8007ba2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ba6:	0222      	lsls	r2, r4, #8
 8007ba8:	68f9      	ldr	r1, [r7, #12]
 8007baa:	6849      	ldr	r1, [r1, #4]
 8007bac:	0849      	lsrs	r1, r1, #1
 8007bae:	2000      	movs	r0, #0
 8007bb0:	4688      	mov	r8, r1
 8007bb2:	4681      	mov	r9, r0
 8007bb4:	eb12 0a08 	adds.w	sl, r2, r8
 8007bb8:	eb43 0b09 	adc.w	fp, r3, r9
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bca:	4650      	mov	r0, sl
 8007bcc:	4659      	mov	r1, fp
 8007bce:	f7f9 f86b 	bl	8000ca8 <__aeabi_uldivmod>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007be0:	d308      	bcc.n	8007bf4 <UART_SetConfig+0x328>
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007be8:	d204      	bcs.n	8007bf4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	60da      	str	r2, [r3, #12]
 8007bf2:	e0b5      	b.n	8007d60 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bfa:	e0b1      	b.n	8007d60 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c04:	d15d      	bne.n	8007cc2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007c06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c0a:	2b08      	cmp	r3, #8
 8007c0c:	d827      	bhi.n	8007c5e <UART_SetConfig+0x392>
 8007c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <UART_SetConfig+0x348>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	08007c5f 	.word	0x08007c5f
 8007c24:	08007c4f 	.word	0x08007c4f
 8007c28:	08007c5f 	.word	0x08007c5f
 8007c2c:	08007c5f 	.word	0x08007c5f
 8007c30:	08007c5f 	.word	0x08007c5f
 8007c34:	08007c57 	.word	0x08007c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c38:	f7fd fb4c 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8007c3c:	61f8      	str	r0, [r7, #28]
        break;
 8007c3e:	e014      	b.n	8007c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c40:	f7fd fb5e 	bl	8005300 <HAL_RCC_GetPCLK2Freq>
 8007c44:	61f8      	str	r0, [r7, #28]
        break;
 8007c46:	e010      	b.n	8007c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c48:	4b4c      	ldr	r3, [pc, #304]	@ (8007d7c <UART_SetConfig+0x4b0>)
 8007c4a:	61fb      	str	r3, [r7, #28]
        break;
 8007c4c:	e00d      	b.n	8007c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4e:	f7fd faa9 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8007c52:	61f8      	str	r0, [r7, #28]
        break;
 8007c54:	e009      	b.n	8007c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c5a:	61fb      	str	r3, [r7, #28]
        break;
 8007c5c:	e005      	b.n	8007c6a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d077      	beq.n	8007d60 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	005a      	lsls	r2, r3, #1
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b0f      	cmp	r3, #15
 8007c8a:	d916      	bls.n	8007cba <UART_SetConfig+0x3ee>
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c92:	d212      	bcs.n	8007cba <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f023 030f 	bic.w	r3, r3, #15
 8007c9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	085b      	lsrs	r3, r3, #1
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	8afb      	ldrh	r3, [r7, #22]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	8afa      	ldrh	r2, [r7, #22]
 8007cb6:	60da      	str	r2, [r3, #12]
 8007cb8:	e052      	b.n	8007d60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007cc0:	e04e      	b.n	8007d60 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d827      	bhi.n	8007d1a <UART_SetConfig+0x44e>
 8007cca:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <UART_SetConfig+0x404>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cfd 	.word	0x08007cfd
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	08007d1b 	.word	0x08007d1b
 8007ce0:	08007d0b 	.word	0x08007d0b
 8007ce4:	08007d1b 	.word	0x08007d1b
 8007ce8:	08007d1b 	.word	0x08007d1b
 8007cec:	08007d1b 	.word	0x08007d1b
 8007cf0:	08007d13 	.word	0x08007d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf4:	f7fd faee 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8007cf8:	61f8      	str	r0, [r7, #28]
        break;
 8007cfa:	e014      	b.n	8007d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cfc:	f7fd fb00 	bl	8005300 <HAL_RCC_GetPCLK2Freq>
 8007d00:	61f8      	str	r0, [r7, #28]
        break;
 8007d02:	e010      	b.n	8007d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d04:	4b1d      	ldr	r3, [pc, #116]	@ (8007d7c <UART_SetConfig+0x4b0>)
 8007d06:	61fb      	str	r3, [r7, #28]
        break;
 8007d08:	e00d      	b.n	8007d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0a:	f7fd fa4b 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8007d0e:	61f8      	str	r0, [r7, #28]
        break;
 8007d10:	e009      	b.n	8007d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d16:	61fb      	str	r3, [r7, #28]
        break;
 8007d18:	e005      	b.n	8007d26 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d24:	bf00      	nop
    }

    if (pclk != 0U)
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d019      	beq.n	8007d60 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	085a      	lsrs	r2, r3, #1
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	441a      	add	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b0f      	cmp	r3, #15
 8007d44:	d909      	bls.n	8007d5a <UART_SetConfig+0x48e>
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d4c:	d205      	bcs.n	8007d5a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60da      	str	r2, [r3, #12]
 8007d58:	e002      	b.n	8007d60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3728      	adds	r7, #40	@ 0x28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d7a:	bf00      	nop
 8007d7c:	00f42400 	.word	0x00f42400

08007d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e7e:	d10a      	bne.n	8007e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b098      	sub	sp, #96	@ 0x60
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ed4:	f7fb fe42 	bl	8003b5c <HAL_GetTick>
 8007ed8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d12e      	bne.n	8007f46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f88c 	bl	8008014 <UART_WaitOnFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d021      	beq.n	8007f46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e6      	bne.n	8007f02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e062      	b.n	800800c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d149      	bne.n	8007fe8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f856 	bl	8008014 <UART_WaitOnFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d03c      	beq.n	8007fe8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e6      	bne.n	8007f6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fc0:	61fa      	str	r2, [r7, #28]
 8007fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	69b9      	ldr	r1, [r7, #24]
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e5      	bne.n	8007fa0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e011      	b.n	800800c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3758      	adds	r7, #88	@ 0x58
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	4613      	mov	r3, r2
 8008022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008024:	e04f      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d04b      	beq.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802e:	f7fb fd95 	bl	8003b5c <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	429a      	cmp	r2, r3
 800803c:	d302      	bcc.n	8008044 <UART_WaitOnFlagUntilTimeout+0x30>
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e04e      	b.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b00      	cmp	r3, #0
 8008054:	d037      	beq.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2b80      	cmp	r3, #128	@ 0x80
 800805a:	d034      	beq.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b40      	cmp	r3, #64	@ 0x40
 8008060:	d031      	beq.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b08      	cmp	r3, #8
 800806e:	d110      	bne.n	8008092 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2208      	movs	r2, #8
 8008076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f8ff 	bl	800827c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2208      	movs	r2, #8
 8008082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e029      	b.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800809c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a0:	d111      	bne.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 f8e5 	bl	800827c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e00f      	b.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4013      	ands	r3, r2
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	bf0c      	ite	eq
 80080d6:	2301      	moveq	r3, #1
 80080d8:	2300      	movne	r3, #0
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d0a0      	beq.n	8008026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b096      	sub	sp, #88	@ 0x58
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	88fa      	ldrh	r2, [r7, #6]
 8008108:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2222      	movs	r2, #34	@ 0x22
 8008118:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008120:	2b00      	cmp	r3, #0
 8008122:	d028      	beq.n	8008176 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008128:	4a3e      	ldr	r2, [pc, #248]	@ (8008224 <UART_Start_Receive_DMA+0x134>)
 800812a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008130:	4a3d      	ldr	r2, [pc, #244]	@ (8008228 <UART_Start_Receive_DMA+0x138>)
 8008132:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008138:	4a3c      	ldr	r2, [pc, #240]	@ (800822c <UART_Start_Receive_DMA+0x13c>)
 800813a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008140:	2200      	movs	r2, #0
 8008142:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3324      	adds	r3, #36	@ 0x24
 800814e:	4619      	mov	r1, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008154:	461a      	mov	r2, r3
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	f7fb ff06 	bl	8003f68 <HAL_DMA_Start_IT>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2210      	movs	r2, #16
 8008166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e051      	b.n	800821a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d018      	beq.n	80081b0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008192:	657b      	str	r3, [r7, #84]	@ 0x54
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800819c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800819e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80081aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e6      	bne.n	800817e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3308      	adds	r3, #8
 80081b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80081d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80081d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80081de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e5      	bne.n	80081b0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3308      	adds	r3, #8
 80081ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	613b      	str	r3, [r7, #16]
   return(result);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3308      	adds	r3, #8
 8008202:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008204:	623a      	str	r2, [r7, #32]
 8008206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	69f9      	ldr	r1, [r7, #28]
 800820a:	6a3a      	ldr	r2, [r7, #32]
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	61bb      	str	r3, [r7, #24]
   return(result);
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e5      	bne.n	80081e4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3758      	adds	r7, #88	@ 0x58
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	080083fb 	.word	0x080083fb
 8008228:	08008527 	.word	0x08008527
 800822c:	08008565 	.word	0x08008565

08008230 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008230:	b480      	push	{r7}
 8008232:	b089      	sub	sp, #36	@ 0x24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	60bb      	str	r3, [r7, #8]
   return(result);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6979      	ldr	r1, [r7, #20]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	613b      	str	r3, [r7, #16]
   return(result);
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e6      	bne.n	8008238 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008270:	bf00      	nop
 8008272:	3724      	adds	r7, #36	@ 0x24
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800827c:	b480      	push	{r7}
 800827e:	b095      	sub	sp, #84	@ 0x54
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80082a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e6      	bne.n	8008284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3308      	adds	r3, #8
 80082bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3308      	adds	r3, #8
 80082d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e5      	bne.n	80082b6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d118      	bne.n	8008324 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f023 0310 	bic.w	r3, r3, #16
 8008306:	647b      	str	r3, [r7, #68]	@ 0x44
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008310:	61bb      	str	r3, [r7, #24]
 8008312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	6979      	ldr	r1, [r7, #20]
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	613b      	str	r3, [r7, #16]
   return(result);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e6      	bne.n	80082f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008338:	bf00      	nop
 800833a:	3754      	adds	r7, #84	@ 0x54
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b090      	sub	sp, #64	@ 0x40
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008350:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d137      	bne.n	80083d0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008362:	2200      	movs	r2, #0
 8008364:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	623b      	str	r3, [r7, #32]
   return(result);
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800837e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008388:	633a      	str	r2, [r7, #48]	@ 0x30
 800838a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800838e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e5      	bne.n	8008368 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800839c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ba:	61fb      	str	r3, [r7, #28]
 80083bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	69b9      	ldr	r1, [r7, #24]
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	617b      	str	r3, [r7, #20]
   return(result);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e6      	bne.n	800839c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083ce:	e002      	b.n	80083d6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80083d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80083d2:	f7fb faf1 	bl	80039b8 <HAL_UART_TxCpltCallback>
}
 80083d6:	bf00      	nop
 80083d8:	3740      	adds	r7, #64	@ 0x40
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff fa39 	bl	8007864 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083f2:	bf00      	nop
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b09c      	sub	sp, #112	@ 0x70
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008406:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b00      	cmp	r3, #0
 8008414:	d171      	bne.n	80084fa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008418:	2200      	movs	r2, #0
 800841a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800841e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800842c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800842e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800843c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800843e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800844a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e6      	bne.n	800841e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3308      	adds	r3, #8
 8008456:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008462:	f023 0301 	bic.w	r3, r3, #1
 8008466:	667b      	str	r3, [r7, #100]	@ 0x64
 8008468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008470:	647a      	str	r2, [r7, #68]	@ 0x44
 8008472:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800847e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e5      	bne.n	8008450 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3308      	adds	r3, #8
 800848a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	623b      	str	r3, [r7, #32]
   return(result);
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800849a:	663b      	str	r3, [r7, #96]	@ 0x60
 800849c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3308      	adds	r3, #8
 80084a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80084a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80084a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ac:	e841 2300 	strex	r3, r2, [r1]
 80084b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e5      	bne.n	8008484 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084ba:	2220      	movs	r2, #32
 80084bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d118      	bne.n	80084fa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f023 0310 	bic.w	r3, r3, #16
 80084dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084e6:	61fb      	str	r3, [r7, #28]
 80084e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	69b9      	ldr	r1, [r7, #24]
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	617b      	str	r3, [r7, #20]
   return(result);
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e6      	bne.n	80084c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084fc:	2200      	movs	r2, #0
 80084fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008504:	2b01      	cmp	r3, #1
 8008506:	d107      	bne.n	8008518 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800850a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800850e:	4619      	mov	r1, r3
 8008510:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008512:	f7ff f9cf 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008516:	e002      	b.n	800851e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008518:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800851a:	f7ff f9ad 	bl	8007878 <HAL_UART_RxCpltCallback>
}
 800851e:	bf00      	nop
 8008520:	3770      	adds	r7, #112	@ 0x70
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008532:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800853e:	2b01      	cmp	r3, #1
 8008540:	d109      	bne.n	8008556 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008548:	085b      	lsrs	r3, r3, #1
 800854a:	b29b      	uxth	r3, r3
 800854c:	4619      	mov	r1, r3
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff f9b0 	bl	80078b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008554:	e002      	b.n	800855c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff f998 	bl	800788c <HAL_UART_RxHalfCpltCallback>
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008576:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800858a:	2b80      	cmp	r3, #128	@ 0x80
 800858c:	d109      	bne.n	80085a2 <UART_DMAError+0x3e>
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2b21      	cmp	r3, #33	@ 0x21
 8008592:	d106      	bne.n	80085a2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2200      	movs	r2, #0
 8008598:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800859c:	6978      	ldr	r0, [r7, #20]
 800859e:	f7ff fe47 	bl	8008230 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ac:	2b40      	cmp	r3, #64	@ 0x40
 80085ae:	d109      	bne.n	80085c4 <UART_DMAError+0x60>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b22      	cmp	r3, #34	@ 0x22
 80085b4:	d106      	bne.n	80085c4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80085be:	6978      	ldr	r0, [r7, #20]
 80085c0:	f7ff fe5c 	bl	800827c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ca:	f043 0210 	orr.w	r2, r3, #16
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d4:	6978      	ldr	r0, [r7, #20]
 80085d6:	f7ff f963 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085da:	bf00      	nop
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff f94d 	bl	80078a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b088      	sub	sp, #32
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	60bb      	str	r3, [r7, #8]
   return(result);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800862a:	61fb      	str	r3, [r7, #28]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	6979      	ldr	r1, [r7, #20]
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	613b      	str	r3, [r7, #16]
   return(result);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e6      	bne.n	8008616 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2220      	movs	r2, #32
 800864c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7fb f9af 	bl	80039b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800865a:	bf00      	nop
 800865c:	3720      	adds	r7, #32
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
	...

08008678 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800867c:	4904      	ldr	r1, [pc, #16]	@ (8008690 <MX_FATFS_Init+0x18>)
 800867e:	4805      	ldr	r0, [pc, #20]	@ (8008694 <MX_FATFS_Init+0x1c>)
 8008680:	f004 ff18 	bl	800d4b4 <FATFS_LinkDriver>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	4b03      	ldr	r3, [pc, #12]	@ (8008698 <MX_FATFS_Init+0x20>)
 800868a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800868c:	bf00      	nop
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20002c04 	.word	0x20002c04
 8008694:	20000038 	.word	0x20000038
 8008698:	20002c00 	.word	0x20002c00

0800869c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80086a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USER_initialize>:
};

DSTATUS USER_initialize (
	BYTE pdrv
)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	4603      	mov	r3, r0
 80086b4:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
	res = SD_Init();
 80086b6:	f7f9 f80b 	bl	80016d0 <SD_Init>
 80086ba:	4603      	mov	r3, r0
 80086bc:	73fb      	strb	r3, [r7, #15]
	if(res)
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d008      	beq.n	80086d6 <USER_initialize+0x2a>
	{
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80086c4:	4b09      	ldr	r3, [pc, #36]	@ (80086ec <USER_initialize+0x40>)
 80086c6:	2238      	movs	r2, #56	@ 0x38
 80086c8:	61da      	str	r2, [r3, #28]
		SPI_TransmitReceive(0xFF);
 80086ca:	20ff      	movs	r0, #255	@ 0xff
 80086cc:	f7f8 ff80 	bl	80015d0 <SPI_TransmitReceive>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086d0:	4b06      	ldr	r3, [pc, #24]	@ (80086ec <USER_initialize+0x40>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	61da      	str	r2, [r3, #28]
	}
	if(res)
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <USER_initialize+0x34>
		return  STA_NOINIT;
 80086dc:	2301      	movs	r3, #1
 80086de:	e000      	b.n	80086e2 <USER_initialize+0x36>
	else
		return RES_OK;
 80086e0:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000fbc 	.word	0x20000fbc

080086f0 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv
)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	71fb      	strb	r3, [r7, #7]
	switch (pdrv)
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <USER_status+0x16>
 8008700:	2b01      	cmp	r3, #1
 8008702:	d002      	beq.n	800870a <USER_status+0x1a>
 8008704:	e003      	b.n	800870e <USER_status+0x1e>
	{
		case 0 :
			return RES_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	e002      	b.n	8008710 <USER_status+0x20>
		case 1 :
			return RES_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	e000      	b.n	8008710 <USER_status+0x20>
		default:
			return STA_NOINIT;
 800870e:	2301      	movs	r3, #1
	}
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USER_read>:
	BYTE pdrv,
	BYTE *buff,
	DWORD sector,
	UINT count
)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
	uint8_t res;
  if(count == 0)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <USER_read+0x1a>
	  return RES_PARERR;
 8008732:	2304      	movs	r3, #4
 8008734:	e013      	b.n	800875e <USER_read+0x42>
  switch (pdrv)
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10f      	bne.n	800875c <USER_read+0x40>
  	{
	case 0:
	{
		res=SD_ReadDisk(buff,sector,count);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	461a      	mov	r2, r3
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	68b8      	ldr	r0, [r7, #8]
 8008746:	f7f9 f943 	bl	80019d0 <SD_ReadDisk>
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]
		if(res == 0)
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <USER_read+0x3c>
			return RES_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e002      	b.n	800875e <USER_read+0x42>
		else
			return RES_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <USER_read+0x42>
	}
	default:
		return RES_ERROR;
 800875c:	2301      	movs	r3, #1
  	}
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USER_write>:
	BYTE pdrv,
	const BYTE *buff,
	DWORD sector,
	UINT count
)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	4603      	mov	r3, r0
 8008774:	73fb      	strb	r3, [r7, #15]
	uint8_t  res;
	if( !count )
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <USER_write+0x1a>
	{
		return RES_PARERR;
 800877c:	2304      	movs	r3, #4
 800877e:	e013      	b.n	80087a8 <USER_write+0x42>
	}
	switch (pdrv)
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10f      	bne.n	80087a6 <USER_write+0x40>
	{
		case 0:
			res=SD_WriteDisk((uint8_t *)buff,sector,count);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	461a      	mov	r2, r3
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	68b8      	ldr	r0, [r7, #8]
 8008790:	f7f9 f976 	bl	8001a80 <SD_WriteDisk>
 8008794:	4603      	mov	r3, r0
 8008796:	75fb      	strb	r3, [r7, #23]
				if(res == 0)
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <USER_write+0x3c>
					return RES_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	e002      	b.n	80087a8 <USER_write+0x42>
				else
					return RES_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <USER_write+0x42>
		default:return RES_ERROR;
 80087a6:	2301      	movs	r3, #1
	}
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,
	BYTE cmd,
	void *buff
)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	603a      	str	r2, [r7, #0]
 80087ba:	71fb      	strb	r3, [r7, #7]
 80087bc:	460b      	mov	r3, r1
 80087be:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	 switch(cmd)
 80087c0:	79bb      	ldrb	r3, [r7, #6]
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d837      	bhi.n	8008836 <USER_ioctl+0x86>
 80087c6:	a201      	add	r2, pc, #4	@ (adr r2, 80087cc <USER_ioctl+0x1c>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087dd 	.word	0x080087dd
 80087d0:	08008827 	.word	0x08008827
 80087d4:	0800880d 	.word	0x0800880d
 80087d8:	0800881b 	.word	0x0800881b
		{
			case CTRL_SYNC:
				SD_CS_LOW();
 80087dc:	2200      	movs	r2, #0
 80087de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80087e2:	4819      	ldr	r0, [pc, #100]	@ (8008848 <USER_ioctl+0x98>)
 80087e4:	f7fb ff1c 	bl	8004620 <HAL_GPIO_WritePin>
				do{
					HAL_Delay(20);
 80087e8:	2014      	movs	r0, #20
 80087ea:	f7fb f9c3 	bl	8003b74 <HAL_Delay>
				}while(SPI_TransmitReceive(0xFF)!=0xFF);
 80087ee:	20ff      	movs	r0, #255	@ 0xff
 80087f0:	f7f8 feee 	bl	80015d0 <SPI_TransmitReceive>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2bff      	cmp	r3, #255	@ 0xff
 80087f8:	d1f6      	bne.n	80087e8 <USER_ioctl+0x38>
				res=RES_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
				SD_CS_HIGH();
 80087fe:	2201      	movs	r2, #1
 8008800:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008804:	4810      	ldr	r0, [pc, #64]	@ (8008848 <USER_ioctl+0x98>)
 8008806:	f7fb ff0b 	bl	8004620 <HAL_GPIO_WritePin>
				break;
 800880a:	e017      	b.n	800883c <USER_ioctl+0x8c>
			case GET_SECTOR_SIZE:
				*(WORD*)buff = 512;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008812:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
				break;
 8008818:	e010      	b.n	800883c <USER_ioctl+0x8c>
			case GET_BLOCK_SIZE:
				*(WORD*)buff = 8;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2208      	movs	r2, #8
 800881e:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
				break;
 8008824:	e00a      	b.n	800883c <USER_ioctl+0x8c>
			case GET_SECTOR_COUNT:
				*(DWORD*)buff = SD_GetSectorCount();
 8008826:	f7f9 f9bf 	bl	8001ba8 <SD_GetSectorCount>
 800882a:	4602      	mov	r2, r0
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73fb      	strb	r3, [r7, #15]
				break;
 8008834:	e002      	b.n	800883c <USER_ioctl+0x8c>
			default:
				res = RES_PARERR;
 8008836:	2304      	movs	r3, #4
 8008838:	73fb      	strb	r3, [r7, #15]
				break;
 800883a:	bf00      	nop
		}
		return res;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	48000400 	.word	0x48000400

0800884c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	4a08      	ldr	r2, [pc, #32]	@ (800887c <disk_status+0x30>)
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	79fa      	ldrb	r2, [r7, #7]
 8008864:	4905      	ldr	r1, [pc, #20]	@ (800887c <disk_status+0x30>)
 8008866:	440a      	add	r2, r1
 8008868:	7a12      	ldrb	r2, [r2, #8]
 800886a:	4610      	mov	r0, r2
 800886c:	4798      	blx	r3
 800886e:	4603      	mov	r3, r0
 8008870:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20002c30 	.word	0x20002c30

08008880 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	4a0d      	ldr	r2, [pc, #52]	@ (80088c8 <disk_initialize+0x48>)
 8008892:	5cd3      	ldrb	r3, [r2, r3]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d111      	bne.n	80088bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	4a0b      	ldr	r2, [pc, #44]	@ (80088c8 <disk_initialize+0x48>)
 800889c:	2101      	movs	r1, #1
 800889e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	4a09      	ldr	r2, [pc, #36]	@ (80088c8 <disk_initialize+0x48>)
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	79fa      	ldrb	r2, [r7, #7]
 80088ae:	4906      	ldr	r1, [pc, #24]	@ (80088c8 <disk_initialize+0x48>)
 80088b0:	440a      	add	r2, r1
 80088b2:	7a12      	ldrb	r2, [r2, #8]
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20002c30 	.word	0x20002c30

080088cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80088cc:	b590      	push	{r4, r7, lr}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	4a0a      	ldr	r2, [pc, #40]	@ (8008908 <disk_read+0x3c>)
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	689c      	ldr	r4, [r3, #8]
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4a07      	ldr	r2, [pc, #28]	@ (8008908 <disk_read+0x3c>)
 80088ec:	4413      	add	r3, r2
 80088ee:	7a18      	ldrb	r0, [r3, #8]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	47a0      	blx	r4
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	bd90      	pop	{r4, r7, pc}
 8008906:	bf00      	nop
 8008908:	20002c30 	.word	0x20002c30

0800890c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800890c:	b590      	push	{r4, r7, lr}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	4603      	mov	r3, r0
 800891a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	4a0a      	ldr	r2, [pc, #40]	@ (8008948 <disk_write+0x3c>)
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	68dc      	ldr	r4, [r3, #12]
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	4a07      	ldr	r2, [pc, #28]	@ (8008948 <disk_write+0x3c>)
 800892c:	4413      	add	r3, r2
 800892e:	7a18      	ldrb	r0, [r3, #8]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	47a0      	blx	r4
 8008938:	4603      	mov	r3, r0
 800893a:	75fb      	strb	r3, [r7, #23]
  return res;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
}
 800893e:	4618      	mov	r0, r3
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	bd90      	pop	{r4, r7, pc}
 8008946:	bf00      	nop
 8008948:	20002c30 	.word	0x20002c30

0800894c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	603a      	str	r2, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]
 8008958:	460b      	mov	r3, r1
 800895a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	4a09      	ldr	r2, [pc, #36]	@ (8008984 <disk_ioctl+0x38>)
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	79fa      	ldrb	r2, [r7, #7]
 800896a:	4906      	ldr	r1, [pc, #24]	@ (8008984 <disk_ioctl+0x38>)
 800896c:	440a      	add	r2, r1
 800896e:	7a10      	ldrb	r0, [r2, #8]
 8008970:	79b9      	ldrb	r1, [r7, #6]
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	4798      	blx	r3
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]
  return res;
 800897a:	7bfb      	ldrb	r3, [r7, #15]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	20002c30 	.word	0x20002c30

08008988 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3301      	adds	r3, #1
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	b21a      	sxth	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	b21b      	sxth	r3, r3
 80089a6:	4313      	orrs	r3, r2
 80089a8:	b21b      	sxth	r3, r3
 80089aa:	81fb      	strh	r3, [r7, #14]
	return rv;
 80089ac:	89fb      	ldrh	r3, [r7, #14]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3303      	adds	r3, #3
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	021b      	lsls	r3, r3, #8
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	3202      	adds	r2, #2
 80089d2:	7812      	ldrb	r2, [r2, #0]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	3201      	adds	r2, #1
 80089e0:	7812      	ldrb	r2, [r2, #0]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	7812      	ldrb	r2, [r2, #0]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
	return rv;
 80089f2:	68fb      	ldr	r3, [r7, #12]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8008a00:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008a04:	b09d      	sub	sp, #116	@ 0x74
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8008a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a0c:	3307      	adds	r3, #7
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2200      	movs	r2, #0
 8008a14:	469a      	mov	sl, r3
 8008a16:	4693      	mov	fp, r2
 8008a18:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8008a1c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008a20:	f04f 0000 	mov.w	r0, #0
 8008a24:	f04f 0100 	mov.w	r1, #0
 8008a28:	0219      	lsls	r1, r3, #8
 8008a2a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a2e:	0210      	lsls	r0, r2, #8
 8008a30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a32:	3306      	adds	r3, #6
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2200      	movs	r2, #0
 8008a3a:	461c      	mov	r4, r3
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	ea40 0804 	orr.w	r8, r0, r4
 8008a42:	ea41 0905 	orr.w	r9, r1, r5
 8008a46:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8008a4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008a4e:	f04f 0000 	mov.w	r0, #0
 8008a52:	f04f 0100 	mov.w	r1, #0
 8008a56:	0219      	lsls	r1, r3, #8
 8008a58:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a5c:	0210      	lsls	r0, r2, #8
 8008a5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a60:	3305      	adds	r3, #5
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2200      	movs	r2, #0
 8008a68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008a6c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8008a70:	4623      	mov	r3, r4
 8008a72:	4303      	orrs	r3, r0
 8008a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a76:	462b      	mov	r3, r5
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a7c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008a80:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8008a84:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008a88:	f04f 0000 	mov.w	r0, #0
 8008a8c:	f04f 0100 	mov.w	r1, #0
 8008a90:	0219      	lsls	r1, r3, #8
 8008a92:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a96:	0210      	lsls	r0, r2, #8
 8008a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008aa4:	657a      	str	r2, [r7, #84]	@ 0x54
 8008aa6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8008aaa:	4623      	mov	r3, r4
 8008aac:	4303      	orrs	r3, r0
 8008aae:	623b      	str	r3, [r7, #32]
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ab6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008aba:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8008abe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f04f 0100 	mov.w	r1, #0
 8008aca:	0219      	lsls	r1, r3, #8
 8008acc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008ad0:	0210      	lsls	r0, r2, #8
 8008ad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ad4:	3303      	adds	r3, #3
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2200      	movs	r2, #0
 8008adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ade:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008ae0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	4303      	orrs	r3, r0
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	462b      	mov	r3, r5
 8008aec:	430b      	orrs	r3, r1
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008af4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8008af8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008afc:	f04f 0000 	mov.w	r0, #0
 8008b00:	f04f 0100 	mov.w	r1, #0
 8008b04:	0219      	lsls	r1, r3, #8
 8008b06:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008b0a:	0210      	lsls	r0, r2, #8
 8008b0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b0e:	3302      	adds	r3, #2
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2200      	movs	r2, #0
 8008b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b18:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b1a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8008b1e:	4623      	mov	r3, r4
 8008b20:	4303      	orrs	r3, r0
 8008b22:	613b      	str	r3, [r7, #16]
 8008b24:	462b      	mov	r3, r5
 8008b26:	430b      	orrs	r3, r1
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008b2e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8008b32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	f04f 0300 	mov.w	r3, #0
 8008b3e:	020b      	lsls	r3, r1, #8
 8008b40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b44:	0202      	lsls	r2, r0, #8
 8008b46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008b48:	3101      	adds	r1, #1
 8008b4a:	7809      	ldrb	r1, [r1, #0]
 8008b4c:	b2c9      	uxtb	r1, r1
 8008b4e:	2000      	movs	r0, #0
 8008b50:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008b52:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008b54:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4311      	orrs	r1, r2
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4319      	orrs	r1, r3
 8008b62:	60f9      	str	r1, [r7, #12]
 8008b64:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008b68:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8008b6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	020b      	lsls	r3, r1, #8
 8008b7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b7e:	0202      	lsls	r2, r0, #8
 8008b80:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008b82:	7809      	ldrb	r1, [r1, #0]
 8008b84:	b2c9      	uxtb	r1, r1
 8008b86:	2000      	movs	r0, #0
 8008b88:	6339      	str	r1, [r7, #48]	@ 0x30
 8008b8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b90:	4621      	mov	r1, r4
 8008b92:	4311      	orrs	r1, r2
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	4629      	mov	r1, r5
 8008b98:	4319      	orrs	r1, r3
 8008b9a:	6079      	str	r1, [r7, #4]
 8008b9c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008ba0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8008ba4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4619      	mov	r1, r3
 8008bac:	3774      	adds	r7, #116	@ 0x74
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008bb4:	4770      	bx	lr

08008bb6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	887a      	ldrh	r2, [r7, #2]
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	887b      	ldrh	r3, [r7, #2]
 8008bd0:	0a1b      	lsrs	r3, r3, #8
 8008bd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	887a      	ldrh	r2, [r7, #2]
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	701a      	strb	r2, [r3, #0]
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	b2d2      	uxtb	r2, r2
 8008c00:	701a      	strb	r2, [r3, #0]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	0a1b      	lsrs	r3, r3, #8
 8008c06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	607a      	str	r2, [r7, #4]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	b2d2      	uxtb	r2, r2
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	0a1b      	lsrs	r3, r3, #8
 8008c2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	607a      	str	r2, [r7, #4]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	b2d2      	uxtb	r2, r2
 8008c36:	701a      	strb	r2, [r3, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	60fa      	str	r2, [r7, #12]
 8008c56:	783a      	ldrb	r2, [r7, #0]
 8008c58:	701a      	strb	r2, [r3, #0]
 8008c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	0a02      	lsrs	r2, r0, #8
 8008c68:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c6c:	0a0b      	lsrs	r3, r1, #8
 8008c6e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	60fa      	str	r2, [r7, #12]
 8008c78:	783a      	ldrb	r2, [r7, #0]
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c80:	f04f 0200 	mov.w	r2, #0
 8008c84:	f04f 0300 	mov.w	r3, #0
 8008c88:	0a02      	lsrs	r2, r0, #8
 8008c8a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c8e:	0a0b      	lsrs	r3, r1, #8
 8008c90:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	60fa      	str	r2, [r7, #12]
 8008c9a:	783a      	ldrb	r2, [r7, #0]
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	f04f 0300 	mov.w	r3, #0
 8008caa:	0a02      	lsrs	r2, r0, #8
 8008cac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008cb0:	0a0b      	lsrs	r3, r1, #8
 8008cb2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	60fa      	str	r2, [r7, #12]
 8008cbc:	783a      	ldrb	r2, [r7, #0]
 8008cbe:	701a      	strb	r2, [r3, #0]
 8008cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	0a02      	lsrs	r2, r0, #8
 8008cce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008cd2:	0a0b      	lsrs	r3, r1, #8
 8008cd4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	60fa      	str	r2, [r7, #12]
 8008cde:	783a      	ldrb	r2, [r7, #0]
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ce6:	f04f 0200 	mov.w	r2, #0
 8008cea:	f04f 0300 	mov.w	r3, #0
 8008cee:	0a02      	lsrs	r2, r0, #8
 8008cf0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008cf4:	0a0b      	lsrs	r3, r1, #8
 8008cf6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	60fa      	str	r2, [r7, #12]
 8008d00:	783a      	ldrb	r2, [r7, #0]
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	0a02      	lsrs	r2, r0, #8
 8008d12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d16:	0a0b      	lsrs	r3, r1, #8
 8008d18:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	60fa      	str	r2, [r7, #12]
 8008d22:	783a      	ldrb	r2, [r7, #0]
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	0a02      	lsrs	r2, r0, #8
 8008d34:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d38:	0a0b      	lsrs	r3, r1, #8
 8008d3a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	60fa      	str	r2, [r7, #12]
 8008d44:	783a      	ldrb	r2, [r7, #0]
 8008d46:	701a      	strb	r2, [r3, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00d      	beq.n	8008d8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	1c53      	adds	r3, r2, #1
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	6179      	str	r1, [r7, #20]
 8008d7a:	7812      	ldrb	r2, [r2, #0]
 8008d7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	607b      	str	r3, [r7, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f1      	bne.n	8008d6e <mem_cpy+0x1a>
	}
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d96:	b480      	push	{r7}
 8008d98:	b087      	sub	sp, #28
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	617a      	str	r2, [r7, #20]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	b2d2      	uxtb	r2, r2
 8008db0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f3      	bne.n	8008da6 <mem_set+0x10>
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	371c      	adds	r7, #28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008dcc:	b480      	push	{r7}
 8008dce:	b089      	sub	sp, #36	@ 0x24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	61fa      	str	r2, [r7, #28]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	4619      	mov	r1, r3
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	61ba      	str	r2, [r7, #24]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	1acb      	subs	r3, r1, r3
 8008df8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	607b      	str	r3, [r7, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <mem_cmp+0x40>
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0eb      	beq.n	8008de4 <mem_cmp+0x18>

	return r;
 8008e0c:	697b      	ldr	r3, [r7, #20]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3724      	adds	r7, #36	@ 0x24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008e24:	e002      	b.n	8008e2c <chk_chr+0x12>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	607b      	str	r3, [r7, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d005      	beq.n	8008e40 <chk_chr+0x26>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d1f2      	bne.n	8008e26 <chk_chr+0xc>
	return *str;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	781b      	ldrb	r3, [r3, #0]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60bb      	str	r3, [r7, #8]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	e029      	b.n	8008eb8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008e64:	4a27      	ldr	r2, [pc, #156]	@ (8008f04 <chk_lock+0xb4>)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	011b      	lsls	r3, r3, #4
 8008e6a:	4413      	add	r3, r2
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d01d      	beq.n	8008eae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e72:	4a24      	ldr	r2, [pc, #144]	@ (8008f04 <chk_lock+0xb4>)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	4413      	add	r3, r2
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d116      	bne.n	8008eb2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008e84:	4a1f      	ldr	r2, [pc, #124]	@ (8008f04 <chk_lock+0xb4>)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	011b      	lsls	r3, r3, #4
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d10c      	bne.n	8008eb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008e98:	4a1a      	ldr	r2, [pc, #104]	@ (8008f04 <chk_lock+0xb4>)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d102      	bne.n	8008eb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008eac:	e007      	b.n	8008ebe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d9d2      	bls.n	8008e64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d109      	bne.n	8008ed8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <chk_lock+0x80>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d101      	bne.n	8008ed4 <chk_lock+0x84>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e010      	b.n	8008ef6 <chk_lock+0xa6>
 8008ed4:	2312      	movs	r3, #18
 8008ed6:	e00e      	b.n	8008ef6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d108      	bne.n	8008ef0 <chk_lock+0xa0>
 8008ede:	4a09      	ldr	r2, [pc, #36]	@ (8008f04 <chk_lock+0xb4>)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	4413      	add	r3, r2
 8008ee6:	330c      	adds	r3, #12
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eee:	d101      	bne.n	8008ef4 <chk_lock+0xa4>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	e000      	b.n	8008ef6 <chk_lock+0xa6>
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20002c10 	.word	0x20002c10

08008f08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	607b      	str	r3, [r7, #4]
 8008f12:	e002      	b.n	8008f1a <enq_lock+0x12>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3301      	adds	r3, #1
 8008f18:	607b      	str	r3, [r7, #4]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d806      	bhi.n	8008f2e <enq_lock+0x26>
 8008f20:	4a09      	ldr	r2, [pc, #36]	@ (8008f48 <enq_lock+0x40>)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	4413      	add	r3, r2
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f2      	bne.n	8008f14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	bf14      	ite	ne
 8008f34:	2301      	movne	r3, #1
 8008f36:	2300      	moveq	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	20002c10 	.word	0x20002c10

08008f4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	e01f      	b.n	8008f9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008f5c:	4a41      	ldr	r2, [pc, #260]	@ (8009064 <inc_lock+0x118>)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	4413      	add	r3, r2
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d113      	bne.n	8008f96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8009064 <inc_lock+0x118>)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	4413      	add	r3, r2
 8008f76:	3304      	adds	r3, #4
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d109      	bne.n	8008f96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008f82:	4a38      	ldr	r2, [pc, #224]	@ (8009064 <inc_lock+0x118>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	4413      	add	r3, r2
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d006      	beq.n	8008fa4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d9dc      	bls.n	8008f5c <inc_lock+0x10>
 8008fa2:	e000      	b.n	8008fa6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008fa4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d132      	bne.n	8009012 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	e002      	b.n	8008fb8 <inc_lock+0x6c>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d806      	bhi.n	8008fcc <inc_lock+0x80>
 8008fbe:	4a29      	ldr	r2, [pc, #164]	@ (8009064 <inc_lock+0x118>)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	4413      	add	r3, r2
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f2      	bne.n	8008fb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d101      	bne.n	8008fd6 <inc_lock+0x8a>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e040      	b.n	8009058 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4922      	ldr	r1, [pc, #136]	@ (8009064 <inc_lock+0x118>)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	440b      	add	r3, r1
 8008fe2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	491e      	ldr	r1, [pc, #120]	@ (8009064 <inc_lock+0x118>)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	440b      	add	r3, r1
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ff8:	491a      	ldr	r1, [pc, #104]	@ (8009064 <inc_lock+0x118>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	440b      	add	r3, r1
 8009000:	3308      	adds	r3, #8
 8009002:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009004:	4a17      	ldr	r2, [pc, #92]	@ (8009064 <inc_lock+0x118>)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	4413      	add	r3, r2
 800900c:	330c      	adds	r3, #12
 800900e:	2200      	movs	r2, #0
 8009010:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d009      	beq.n	800902c <inc_lock+0xe0>
 8009018:	4a12      	ldr	r2, [pc, #72]	@ (8009064 <inc_lock+0x118>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	4413      	add	r3, r2
 8009020:	330c      	adds	r3, #12
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <inc_lock+0xe0>
 8009028:	2300      	movs	r3, #0
 800902a:	e015      	b.n	8009058 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d108      	bne.n	8009044 <inc_lock+0xf8>
 8009032:	4a0c      	ldr	r2, [pc, #48]	@ (8009064 <inc_lock+0x118>)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	011b      	lsls	r3, r3, #4
 8009038:	4413      	add	r3, r2
 800903a:	330c      	adds	r3, #12
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	3301      	adds	r3, #1
 8009040:	b29a      	uxth	r2, r3
 8009042:	e001      	b.n	8009048 <inc_lock+0xfc>
 8009044:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009048:	4906      	ldr	r1, [pc, #24]	@ (8009064 <inc_lock+0x118>)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	440b      	add	r3, r1
 8009050:	330c      	adds	r3, #12
 8009052:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	20002c10 	.word	0x20002c10

08009068 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3b01      	subs	r3, #1
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d825      	bhi.n	80090c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800907c:	4a17      	ldr	r2, [pc, #92]	@ (80090dc <dec_lock+0x74>)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	011b      	lsls	r3, r3, #4
 8009082:	4413      	add	r3, r2
 8009084:	330c      	adds	r3, #12
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800908a:	89fb      	ldrh	r3, [r7, #14]
 800908c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009090:	d101      	bne.n	8009096 <dec_lock+0x2e>
 8009092:	2300      	movs	r3, #0
 8009094:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009096:	89fb      	ldrh	r3, [r7, #14]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <dec_lock+0x3a>
 800909c:	89fb      	ldrh	r3, [r7, #14]
 800909e:	3b01      	subs	r3, #1
 80090a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80090a2:	4a0e      	ldr	r2, [pc, #56]	@ (80090dc <dec_lock+0x74>)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	4413      	add	r3, r2
 80090aa:	330c      	adds	r3, #12
 80090ac:	89fa      	ldrh	r2, [r7, #14]
 80090ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80090b0:	89fb      	ldrh	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <dec_lock+0x5a>
 80090b6:	4a09      	ldr	r2, [pc, #36]	@ (80090dc <dec_lock+0x74>)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	4413      	add	r3, r2
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	737b      	strb	r3, [r7, #13]
 80090c6:	e001      	b.n	80090cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80090c8:	2302      	movs	r3, #2
 80090ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80090cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20002c10 	.word	0x20002c10

080090e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e010      	b.n	8009110 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80090ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009124 <clear_lock+0x44>)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	4413      	add	r3, r2
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d105      	bne.n	800910a <clear_lock+0x2a>
 80090fe:	4a09      	ldr	r2, [pc, #36]	@ (8009124 <clear_lock+0x44>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	4413      	add	r3, r2
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3301      	adds	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d9eb      	bls.n	80090ee <clear_lock+0xe>
	}
}
 8009116:	bf00      	nop
 8009118:	bf00      	nop
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	20002c10 	.word	0x20002c10

08009128 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	78db      	ldrb	r3, [r3, #3]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d034      	beq.n	80091a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009140:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	7858      	ldrb	r0, [r3, #1]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800914c:	2301      	movs	r3, #1
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	f7ff fbdc 	bl	800890c <disk_write>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <sync_window+0x38>
			res = FR_DISK_ERR;
 800915a:	2301      	movs	r3, #1
 800915c:	73fb      	strb	r3, [r7, #15]
 800915e:	e022      	b.n	80091a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	1ad2      	subs	r2, r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	429a      	cmp	r2, r3
 8009174:	d217      	bcs.n	80091a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	789b      	ldrb	r3, [r3, #2]
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	e010      	b.n	80091a0 <sync_window+0x78>
					wsect += fs->fsize;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4413      	add	r3, r2
 8009186:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7858      	ldrb	r0, [r3, #1]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009192:	2301      	movs	r3, #1
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	f7ff fbb9 	bl	800890c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	3b01      	subs	r3, #1
 800919e:	613b      	str	r3, [r7, #16]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d8eb      	bhi.n	800917e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d01b      	beq.n	8009200 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ffad 	bl	8009128 <sync_window>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d113      	bne.n	8009200 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7858      	ldrb	r0, [r3, #1]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80091e2:	2301      	movs	r3, #1
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	f7ff fb71 	bl	80088cc <disk_read>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d004      	beq.n	80091fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80091f0:	f04f 33ff 	mov.w	r3, #4294967295
 80091f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ff87 	bl	8009128 <sync_window>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d158      	bne.n	80092d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b03      	cmp	r3, #3
 800922a:	d148      	bne.n	80092be <sync_fs+0xb2>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	791b      	ldrb	r3, [r3, #4]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d144      	bne.n	80092be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3338      	adds	r3, #56	@ 0x38
 8009238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff fda9 	bl	8008d96 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3338      	adds	r3, #56	@ 0x38
 8009248:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800924c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff fcb0 	bl	8008bb6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3338      	adds	r3, #56	@ 0x38
 800925a:	4921      	ldr	r1, [pc, #132]	@ (80092e0 <sync_fs+0xd4>)
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff fcc5 	bl	8008bec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3338      	adds	r3, #56	@ 0x38
 8009266:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800926a:	491e      	ldr	r1, [pc, #120]	@ (80092e4 <sync_fs+0xd8>)
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fcbd 	bl	8008bec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3338      	adds	r3, #56	@ 0x38
 8009276:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	4619      	mov	r1, r3
 8009280:	4610      	mov	r0, r2
 8009282:	f7ff fcb3 	bl	8008bec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3338      	adds	r3, #56	@ 0x38
 800928a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7ff fca9 	bl	8008bec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7858      	ldrb	r0, [r3, #1]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092b2:	2301      	movs	r3, #1
 80092b4:	f7ff fb2a 	bl	800890c <disk_write>
			fs->fsi_flag = 0;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff fb40 	bl	800894c <disk_ioctl>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <sync_fs+0xca>
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	41615252 	.word	0x41615252
 80092e4:	61417272 	.word	0x61417272

080092e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	3b02      	subs	r3, #2
 80092f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	3b02      	subs	r3, #2
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d301      	bcc.n	8009308 <clust2sect+0x20>
 8009304:	2300      	movs	r3, #0
 8009306:	e008      	b.n	800931a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	895b      	ldrh	r3, [r3, #10]
 800930c:	461a      	mov	r2, r3
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	fb03 f202 	mul.w	r2, r3, r2
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009318:	4413      	add	r3, r2
}
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
	...

08009328 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	6809      	ldr	r1, [r1, #0]
 8009336:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	2901      	cmp	r1, #1
 800933c:	d904      	bls.n	8009348 <get_fat+0x20>
 800933e:	69b9      	ldr	r1, [r7, #24]
 8009340:	69c9      	ldr	r1, [r1, #28]
 8009342:	6838      	ldr	r0, [r7, #0]
 8009344:	4288      	cmp	r0, r1
 8009346:	d302      	bcc.n	800934e <get_fat+0x26>
		val = 1;	/* Internal error */
 8009348:	2301      	movs	r3, #1
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	e100      	b.n	8009550 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800934e:	f04f 31ff 	mov.w	r1, #4294967295
 8009352:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8009354:	69b9      	ldr	r1, [r7, #24]
 8009356:	7809      	ldrb	r1, [r1, #0]
 8009358:	3901      	subs	r1, #1
 800935a:	2903      	cmp	r1, #3
 800935c:	f200 80ec 	bhi.w	8009538 <get_fat+0x210>
 8009360:	a001      	add	r0, pc, #4	@ (adr r0, 8009368 <get_fat+0x40>)
 8009362:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009366:	bf00      	nop
 8009368:	08009379 	.word	0x08009379
 800936c:	080093ff 	.word	0x080093ff
 8009370:	08009435 	.word	0x08009435
 8009374:	0800946d 	.word	0x0800946d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	085b      	lsrs	r3, r3, #1
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	0a5b      	lsrs	r3, r3, #9
 800938e:	4413      	add	r3, r2
 8009390:	4619      	mov	r1, r3
 8009392:	69b8      	ldr	r0, [r7, #24]
 8009394:	f7ff ff0c 	bl	80091b0 <move_window>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	f040 80cf 	bne.w	800953e <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	60fa      	str	r2, [r7, #12]
 80093a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	4413      	add	r3, r2
 80093ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80093b2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	0a5b      	lsrs	r3, r3, #9
 80093bc:	4413      	add	r3, r2
 80093be:	4619      	mov	r1, r3
 80093c0:	69b8      	ldr	r0, [r7, #24]
 80093c2:	f7ff fef5 	bl	80091b0 <move_window>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f040 80ba 	bne.w	8009542 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	4413      	add	r3, r2
 80093d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <get_fat+0xcc>
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	091b      	lsrs	r3, r3, #4
 80093f2:	e002      	b.n	80093fa <get_fat+0xd2>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093fa:	61fb      	str	r3, [r7, #28]
			break;
 80093fc:	e0a8      	b.n	8009550 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	4413      	add	r3, r2
 8009408:	4619      	mov	r1, r3
 800940a:	69b8      	ldr	r0, [r7, #24]
 800940c:	f7ff fed0 	bl	80091b0 <move_window>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	f040 8097 	bne.w	8009546 <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009426:	4413      	add	r3, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff faad 	bl	8008988 <ld_word>
 800942e:	4603      	mov	r3, r0
 8009430:	61fb      	str	r3, [r7, #28]
			break;
 8009432:	e08d      	b.n	8009550 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	09db      	lsrs	r3, r3, #7
 800943c:	4413      	add	r3, r2
 800943e:	4619      	mov	r1, r3
 8009440:	69b8      	ldr	r0, [r7, #24]
 8009442:	f7ff feb5 	bl	80091b0 <move_window>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d17e      	bne.n	800954a <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800945a:	4413      	add	r3, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff faac 	bl	80089ba <ld_dword>
 8009462:	4603      	mov	r3, r0
 8009464:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009468:	61fb      	str	r3, [r7, #28]
			break;
 800946a:	e071      	b.n	8009550 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009472:	4301      	orrs	r1, r0
 8009474:	d060      	beq.n	8009538 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	6889      	ldr	r1, [r1, #8]
 800947a:	6838      	ldr	r0, [r7, #0]
 800947c:	1a41      	subs	r1, r0, r1
 800947e:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009486:	1e42      	subs	r2, r0, #1
 8009488:	f141 33ff 	adc.w	r3, r1, #4294967295
 800948c:	f04f 0000 	mov.w	r0, #0
 8009490:	f04f 0100 	mov.w	r1, #0
 8009494:	0a50      	lsrs	r0, r2, #9
 8009496:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800949a:	0a59      	lsrs	r1, r3, #9
 800949c:	4602      	mov	r2, r0
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	895b      	ldrh	r3, [r3, #10]
 80094a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a6:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	79db      	ldrb	r3, [r3, #7]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d10e      	bne.n	80094ce <get_fat+0x1a6>
					if (cofs <= clen) {
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d80a      	bhi.n	80094ce <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d002      	beq.n	80094c6 <get_fat+0x19e>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	3301      	adds	r3, #1
 80094c4:	e001      	b.n	80094ca <get_fat+0x1a2>
 80094c6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80094ca:	61fb      	str	r3, [r7, #28]
						break;
 80094cc:	e040      	b.n	8009550 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	79db      	ldrb	r3, [r3, #7]
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d108      	bne.n	80094e8 <get_fat+0x1c0>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d203      	bcs.n	80094e8 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	3301      	adds	r3, #1
 80094e4:	61fb      	str	r3, [r7, #28]
					break;
 80094e6:	e033      	b.n	8009550 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	79db      	ldrb	r3, [r3, #7]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d023      	beq.n	8009538 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80094f8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80094fc:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80094fe:	e027      	b.n	8009550 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	09db      	lsrs	r3, r3, #7
 8009508:	4413      	add	r3, r2
 800950a:	4619      	mov	r1, r3
 800950c:	69b8      	ldr	r0, [r7, #24]
 800950e:	f7ff fe4f 	bl	80091b0 <move_window>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d11a      	bne.n	800954e <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009526:	4413      	add	r3, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f7ff fa46 	bl	80089ba <ld_dword>
 800952e:	4603      	mov	r3, r0
 8009530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009534:	61fb      	str	r3, [r7, #28]
					break;
 8009536:	e00b      	b.n	8009550 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009538:	2301      	movs	r3, #1
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	e008      	b.n	8009550 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800953e:	bf00      	nop
 8009540:	e006      	b.n	8009550 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009542:	bf00      	nop
 8009544:	e004      	b.n	8009550 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009546:	bf00      	nop
 8009548:	e002      	b.n	8009550 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800954a:	bf00      	nop
 800954c:	e000      	b.n	8009550 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800954e:	bf00      	nop
		}
	}

	return val;
 8009550:	69fb      	ldr	r3, [r7, #28]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop

0800955c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800955c:	b590      	push	{r4, r7, lr}
 800955e:	b089      	sub	sp, #36	@ 0x24
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009568:	2302      	movs	r3, #2
 800956a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b01      	cmp	r3, #1
 8009570:	f240 80dd 	bls.w	800972e <put_fat+0x1d2>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	429a      	cmp	r2, r3
 800957c:	f080 80d7 	bcs.w	800972e <put_fat+0x1d2>
		switch (fs->fs_type) {
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b04      	cmp	r3, #4
 8009586:	f300 80d2 	bgt.w	800972e <put_fat+0x1d2>
 800958a:	2b03      	cmp	r3, #3
 800958c:	f280 8093 	bge.w	80096b6 <put_fat+0x15a>
 8009590:	2b01      	cmp	r3, #1
 8009592:	d002      	beq.n	800959a <put_fat+0x3e>
 8009594:	2b02      	cmp	r3, #2
 8009596:	d06e      	beq.n	8009676 <put_fat+0x11a>
 8009598:	e0c9      	b.n	800972e <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	61bb      	str	r3, [r7, #24]
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	085b      	lsrs	r3, r3, #1
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	4413      	add	r3, r2
 80095a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	0a5b      	lsrs	r3, r3, #9
 80095b0:	4413      	add	r3, r2
 80095b2:	4619      	mov	r1, r3
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff fdfb 	bl	80091b0 <move_window>
 80095ba:	4603      	mov	r3, r0
 80095bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095be:	7ffb      	ldrb	r3, [r7, #31]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f040 80ad 	bne.w	8009720 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	1c59      	adds	r1, r3, #1
 80095d0:	61b9      	str	r1, [r7, #24]
 80095d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d6:	4413      	add	r3, r2
 80095d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00d      	beq.n	8009600 <put_fat+0xa4>
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	b25b      	sxtb	r3, r3
 80095ea:	f003 030f 	and.w	r3, r3, #15
 80095ee:	b25a      	sxtb	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	011b      	lsls	r3, r3, #4
 80095f6:	b25b      	sxtb	r3, r3
 80095f8:	4313      	orrs	r3, r2
 80095fa:	b25b      	sxtb	r3, r3
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	e001      	b.n	8009604 <put_fat+0xa8>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2201      	movs	r2, #1
 800960c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	0a5b      	lsrs	r3, r3, #9
 8009616:	4413      	add	r3, r2
 8009618:	4619      	mov	r1, r3
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f7ff fdc8 	bl	80091b0 <move_window>
 8009620:	4603      	mov	r3, r0
 8009622:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009624:	7ffb      	ldrb	r3, [r7, #31]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d17c      	bne.n	8009724 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009636:	4413      	add	r3, r2
 8009638:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <put_fat+0xf0>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	091b      	lsrs	r3, r3, #4
 8009648:	b2db      	uxtb	r3, r3
 800964a:	e00e      	b.n	800966a <put_fat+0x10e>
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	b25b      	sxtb	r3, r3
 8009652:	f023 030f 	bic.w	r3, r3, #15
 8009656:	b25a      	sxtb	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	b25b      	sxtb	r3, r3
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	b25b      	sxtb	r3, r3
 8009664:	4313      	orrs	r3, r2
 8009666:	b25b      	sxtb	r3, r3
 8009668:	b2db      	uxtb	r3, r3
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	70da      	strb	r2, [r3, #3]
			break;
 8009674:	e05b      	b.n	800972e <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	4413      	add	r3, r2
 8009680:	4619      	mov	r1, r3
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7ff fd94 	bl	80091b0 <move_window>
 8009688:	4603      	mov	r3, r0
 800968a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800968c:	7ffb      	ldrb	r3, [r7, #31]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d14a      	bne.n	8009728 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80096a0:	4413      	add	r3, r2
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	b292      	uxth	r2, r2
 80096a6:	4611      	mov	r1, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff fa84 	bl	8008bb6 <st_word>
			fs->wflag = 1;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	70da      	strb	r2, [r3, #3]
			break;
 80096b4:	e03b      	b.n	800972e <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	09db      	lsrs	r3, r3, #7
 80096be:	4413      	add	r3, r2
 80096c0:	4619      	mov	r1, r3
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f7ff fd74 	bl	80091b0 <move_window>
 80096c8:	4603      	mov	r3, r0
 80096ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096cc:	7ffb      	ldrb	r3, [r7, #31]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d12c      	bne.n	800972c <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d012      	beq.n	8009700 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80096ee:	4413      	add	r3, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff f962 	bl	80089ba <ld_dword>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80096fc:	4323      	orrs	r3, r4
 80096fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800970e:	4413      	add	r3, r2
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fa6a 	bl	8008bec <st_dword>
			fs->wflag = 1;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	70da      	strb	r2, [r3, #3]
			break;
 800971e:	e006      	b.n	800972e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009720:	bf00      	nop
 8009722:	e004      	b.n	800972e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009724:	bf00      	nop
 8009726:	e002      	b.n	800972e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009728:	bf00      	nop
 800972a:	e000      	b.n	800972e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800972c:	bf00      	nop
		}
	}
	return res;
 800972e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3724      	adds	r7, #36	@ 0x24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd90      	pop	{r4, r7, pc}

08009738 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	@ 0x28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	3b02      	subs	r3, #2
 8009748:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	3b02      	subs	r3, #2
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	429a      	cmp	r2, r3
 8009754:	d301      	bcc.n	800975a <find_bitmap+0x22>
 8009756:	2300      	movs	r3, #0
 8009758:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	61bb      	str	r3, [r7, #24]
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	0b1b      	lsrs	r3, r3, #12
 800976e:	4413      	add	r3, r2
 8009770:	4619      	mov	r1, r3
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f7ff fd1c 	bl	80091b0 <move_window>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <find_bitmap+0x4c>
 800977e:	f04f 33ff 	mov.w	r3, #4294967295
 8009782:	e051      	b.n	8009828 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	08db      	lsrs	r3, r3, #3
 8009788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978c:	623b      	str	r3, [r7, #32]
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	2201      	movs	r2, #1
 8009796:	fa02 f303 	lsl.w	r3, r2, r3
 800979a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	4413      	add	r3, r2
 80097a4:	3338      	adds	r3, #56	@ 0x38
 80097a6:	781a      	ldrb	r2, [r3, #0]
 80097a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097ac:	4013      	ands	r3, r2
 80097ae:	74fb      	strb	r3, [r7, #19]
 80097b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	3301      	adds	r3, #1
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	3b02      	subs	r3, #2
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d307      	bcc.n	80097dc <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 80097cc:	2300      	movs	r3, #0
 80097ce:	61fb      	str	r3, [r7, #28]
 80097d0:	2300      	movs	r3, #0
 80097d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097da:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80097dc:	7cfb      	ldrb	r3, [r7, #19]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d109      	bne.n	80097f6 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3301      	adds	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d106      	bne.n	80097fe <find_bitmap+0xc6>
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	3302      	adds	r3, #2
 80097f4:	e018      	b.n	8009828 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	61bb      	str	r3, [r7, #24]
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80097fe:	69fa      	ldr	r2, [r7, #28]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	429a      	cmp	r2, r3
 8009804:	d101      	bne.n	800980a <find_bitmap+0xd2>
 8009806:	2300      	movs	r3, #0
 8009808:	e00e      	b.n	8009828 <find_bitmap+0xf0>
			} while (bm);
 800980a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1c5      	bne.n	800979e <find_bitmap+0x66>
			bm = 1;
 8009812:	2301      	movs	r3, #1
 8009814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	3301      	adds	r3, #1
 800981c:	623b      	str	r3, [r7, #32]
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009824:	d3bb      	bcc.n	800979e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009826:	e79e      	b.n	8009766 <find_bitmap+0x2e>
	}
}
 8009828:	4618      	mov	r0, r3
 800982a:	3728      	adds	r7, #40	@ 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	3b02      	subs	r3, #2
 8009842:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	0b1b      	lsrs	r3, r3, #12
 800984c:	4413      	add	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	08db      	lsrs	r3, r3, #3
 8009854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009858:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	2201      	movs	r2, #1
 8009862:	fa02 f303 	lsl.w	r3, r2, r3
 8009866:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	617a      	str	r2, [r7, #20]
 800986e:	4619      	mov	r1, r3
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7ff fc9d 	bl	80091b0 <move_window>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <change_bitmap+0x50>
 800987c:	2301      	movs	r3, #1
 800987e:	e03d      	b.n	80098fc <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	4413      	add	r3, r2
 8009886:	3338      	adds	r3, #56	@ 0x38
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	7ffb      	ldrb	r3, [r7, #31]
 800988c:	4013      	ands	r3, r2
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	bf14      	ite	ne
 8009894:	2301      	movne	r3, #1
 8009896:	2300      	moveq	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	4293      	cmp	r3, r2
 80098a0:	d101      	bne.n	80098a6 <change_bitmap+0x76>
 80098a2:	2302      	movs	r3, #2
 80098a4:	e02a      	b.n	80098fc <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	4413      	add	r3, r2
 80098ac:	3338      	adds	r3, #56	@ 0x38
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	7ffb      	ldrb	r3, [r7, #31]
 80098b2:	4053      	eors	r3, r2
 80098b4:	b2d9      	uxtb	r1, r3
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	4413      	add	r3, r2
 80098bc:	3338      	adds	r3, #56	@ 0x38
 80098be:	460a      	mov	r2, r1
 80098c0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	607b      	str	r3, [r7, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <change_bitmap+0xa8>
 80098d4:	2300      	movs	r3, #0
 80098d6:	e011      	b.n	80098fc <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80098d8:	7ffb      	ldrb	r3, [r7, #31]
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	77fb      	strb	r3, [r7, #31]
 80098de:	7ffb      	ldrb	r3, [r7, #31]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1cd      	bne.n	8009880 <change_bitmap+0x50>
			bm = 1;
 80098e4:	2301      	movs	r3, #1
 80098e6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	3301      	adds	r3, #1
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098f4:	d3c4      	bcc.n	8009880 <change_bitmap+0x50>
		i = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80098fa:	e7b5      	b.n	8009868 <change_bitmap+0x38>
	}
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3720      	adds	r7, #32
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	79db      	ldrb	r3, [r3, #7]
 8009910:	2b03      	cmp	r3, #3
 8009912:	d121      	bne.n	8009958 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	613b      	str	r3, [r7, #16]
 8009920:	e014      	b.n	800994c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	3301      	adds	r3, #1
 800992a:	461a      	mov	r2, r3
 800992c:	6979      	ldr	r1, [r7, #20]
 800992e:	f7ff fe15 	bl	800955c <put_fat>
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <fill_first_frag+0x3c>
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	e00c      	b.n	800995a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	3301      	adds	r3, #1
 8009944:	617b      	str	r3, [r7, #20]
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3b01      	subs	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e7      	bne.n	8009922 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b086      	sub	sp, #24
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800996e:	e020      	b.n	80099b2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	1c59      	adds	r1, r3, #1
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d905      	bls.n	8009992 <fill_last_frag+0x30>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	3302      	adds	r3, #2
 8009990:	e000      	b.n	8009994 <fill_last_frag+0x32>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	461a      	mov	r2, r3
 8009996:	f7ff fde1 	bl	800955c <put_fat>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <fill_last_frag+0x46>
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	e009      	b.n	80099bc <fill_last_frag+0x5a>
		obj->n_frag--;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	1e5a      	subs	r2, r3, #1
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1da      	bne.n	8009970 <fill_last_frag+0xe>
	}
	return FR_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	@ 0x28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d904      	bls.n	80099f2 <remove_chain+0x2e>
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d301      	bcc.n	80099f6 <remove_chain+0x32>
 80099f2:	2302      	movs	r3, #2
 80099f4:	e096      	b.n	8009b24 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d014      	beq.n	8009a26 <remove_chain+0x62>
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d103      	bne.n	8009a0c <remove_chain+0x48>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	79db      	ldrb	r3, [r3, #7]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d00c      	beq.n	8009a26 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	69b8      	ldr	r0, [r7, #24]
 8009a14:	f7ff fda2 	bl	800955c <put_fat>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009a1c:	7ffb      	ldrb	r3, [r7, #31]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <remove_chain+0x62>
 8009a22:	7ffb      	ldrb	r3, [r7, #31]
 8009a24:	e07e      	b.n	8009b24 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff fc7d 	bl	8009328 <get_fat>
 8009a2e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d055      	beq.n	8009ae2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <remove_chain+0x7c>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e071      	b.n	8009b24 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a46:	d101      	bne.n	8009a4c <remove_chain+0x88>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e06b      	b.n	8009b24 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d00b      	beq.n	8009a6c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009a54:	2200      	movs	r2, #0
 8009a56:	68b9      	ldr	r1, [r7, #8]
 8009a58:	69b8      	ldr	r0, [r7, #24]
 8009a5a:	f7ff fd7f 	bl	800955c <put_fat>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009a62:	7ffb      	ldrb	r3, [r7, #31]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <remove_chain+0xa8>
 8009a68:	7ffb      	ldrb	r3, [r7, #31]
 8009a6a:	e05b      	b.n	8009b24 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	699a      	ldr	r2, [r3, #24]
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	3b02      	subs	r3, #2
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d20b      	bcs.n	8009a92 <remove_chain+0xce>
			fs->free_clst++;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	791b      	ldrb	r3, [r3, #4]
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	3301      	adds	r3, #1
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d102      	bne.n	8009aa2 <remove_chain+0xde>
			ecl = nxt;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	623b      	str	r3, [r7, #32]
 8009aa0:	e017      	b.n	8009ad2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d10f      	bne.n	8009aca <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009aaa:	6a3a      	ldr	r2, [r7, #32]
 8009aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ab6:	69b8      	ldr	r0, [r7, #24]
 8009ab8:	f7ff feba 	bl	8009830 <change_bitmap>
 8009abc:	4603      	mov	r3, r0
 8009abe:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009ac0:	7ffb      	ldrb	r3, [r7, #31]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <remove_chain+0x106>
 8009ac6:	7ffb      	ldrb	r3, [r7, #31]
 8009ac8:	e02c      	b.n	8009b24 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	623b      	str	r3, [r7, #32]
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d3a2      	bcc.n	8009a26 <remove_chain+0x62>
 8009ae0:	e000      	b.n	8009ae4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009ae2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d11a      	bne.n	8009b22 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d103      	bne.n	8009afa <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	71da      	strb	r2, [r3, #7]
 8009af8:	e013      	b.n	8009b22 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	79db      	ldrb	r3, [r3, #7]
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d10f      	bne.n	8009b22 <remove_chain+0x15e>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d30a      	bcc.n	8009b22 <remove_chain+0x15e>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	4413      	add	r3, r2
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d802      	bhi.n	8009b22 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3728      	adds	r7, #40	@ 0x28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10d      	bne.n	8009b5e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d004      	beq.n	8009b58 <create_chain+0x2c>
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d31b      	bcc.n	8009b90 <create_chain+0x64>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	61bb      	str	r3, [r7, #24]
 8009b5c:	e018      	b.n	8009b90 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff fbe1 	bl	8009328 <get_fat>
 8009b66:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d801      	bhi.n	8009b72 <create_chain+0x46>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e0d9      	b.n	8009d26 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b78:	d101      	bne.n	8009b7e <create_chain+0x52>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	e0d3      	b.n	8009d26 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d201      	bcs.n	8009b8c <create_chain+0x60>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	e0cc      	b.n	8009d26 <create_chain+0x1fa>
		scl = clst;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d164      	bne.n	8009c62 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009b98:	2201      	movs	r2, #1
 8009b9a:	69b9      	ldr	r1, [r7, #24]
 8009b9c:	6938      	ldr	r0, [r7, #16]
 8009b9e:	f7ff fdcb 	bl	8009738 <find_bitmap>
 8009ba2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <create_chain+0x86>
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb0:	d101      	bne.n	8009bb6 <create_chain+0x8a>
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	e0b7      	b.n	8009d26 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	2201      	movs	r2, #1
 8009bba:	69f9      	ldr	r1, [r7, #28]
 8009bbc:	6938      	ldr	r0, [r7, #16]
 8009bbe:	f7ff fe37 	bl	8009830 <change_bitmap>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d101      	bne.n	8009bd0 <create_chain+0xa4>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e0aa      	b.n	8009d26 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d102      	bne.n	8009bdc <create_chain+0xb0>
 8009bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bda:	e0a4      	b.n	8009d26 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d103      	bne.n	8009bea <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2202      	movs	r2, #2
 8009be6:	71da      	strb	r2, [r3, #7]
 8009be8:	e011      	b.n	8009c0e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	79db      	ldrb	r3, [r3, #7]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d10d      	bne.n	8009c0e <create_chain+0xe2>
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d008      	beq.n	8009c0e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	69ba      	ldr	r2, [r7, #24]
 8009c02:	1ad2      	subs	r2, r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	79db      	ldrb	r3, [r3, #7]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d064      	beq.n	8009ce0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d10b      	bne.n	8009c38 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d003      	beq.n	8009c30 <create_chain+0x104>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	e000      	b.n	8009c32 <create_chain+0x106>
 8009c30:	2302      	movs	r3, #2
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	61d3      	str	r3, [r2, #28]
 8009c36:	e053      	b.n	8009ce0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d102      	bne.n	8009c46 <create_chain+0x11a>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009c46:	69fa      	ldr	r2, [r7, #28]
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fe89 	bl	8009962 <fill_last_frag>
 8009c50:	4603      	mov	r3, r0
 8009c52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d142      	bne.n	8009ce0 <create_chain+0x1b4>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	61da      	str	r2, [r3, #28]
 8009c60:	e03e      	b.n	8009ce0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d307      	bcc.n	8009c86 <create_chain+0x15a>
				ncl = 2;
 8009c76:	2302      	movs	r3, #2
 8009c78:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009c7a:	69fa      	ldr	r2, [r7, #28]
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d901      	bls.n	8009c86 <create_chain+0x15a>
 8009c82:	2300      	movs	r3, #0
 8009c84:	e04f      	b.n	8009d26 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009c86:	69f9      	ldr	r1, [r7, #28]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7ff fb4d 	bl	8009328 <get_fat>
 8009c8e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00e      	beq.n	8009cb4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d003      	beq.n	8009ca4 <create_chain+0x178>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d101      	bne.n	8009ca8 <create_chain+0x17c>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	e03e      	b.n	8009d26 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009ca8:	69fa      	ldr	r2, [r7, #28]
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d1da      	bne.n	8009c66 <create_chain+0x13a>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e038      	b.n	8009d26 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009cb4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cba:	69f9      	ldr	r1, [r7, #28]
 8009cbc:	6938      	ldr	r0, [r7, #16]
 8009cbe:	f7ff fc4d 	bl	800955c <put_fat>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d109      	bne.n	8009ce0 <create_chain+0x1b4>
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d006      	beq.n	8009ce0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009cd2:	69fa      	ldr	r2, [r7, #28]
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6938      	ldr	r0, [r7, #16]
 8009cd8:	f7ff fc40 	bl	800955c <put_fat>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d116      	bne.n	8009d14 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	69fa      	ldr	r2, [r7, #28]
 8009cea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	699a      	ldr	r2, [r3, #24]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	3b02      	subs	r3, #2
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d804      	bhi.n	8009d04 <create_chain+0x1d8>
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	1e5a      	subs	r2, r3, #1
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	791b      	ldrb	r3, [r3, #4]
 8009d08:	f043 0301 	orr.w	r3, r3, #1
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	711a      	strb	r2, [r3, #4]
 8009d12:	e007      	b.n	8009d24 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d102      	bne.n	8009d20 <create_chain+0x1f4>
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1e:	e000      	b.n	8009d22 <create_chain+0x1f6>
 8009d20:	2301      	movs	r3, #1
 8009d22:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009d24:	69fb      	ldr	r3, [r7, #28]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3720      	adds	r7, #32
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d2e:	b5b0      	push	{r4, r5, r7, lr}
 8009d30:	b088      	sub	sp, #32
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d44:	3304      	adds	r3, #4
 8009d46:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d4c:	f04f 0000 	mov.w	r0, #0
 8009d50:	f04f 0100 	mov.w	r1, #0
 8009d54:	0a50      	lsrs	r0, r2, #9
 8009d56:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009d5a:	0a59      	lsrs	r1, r3, #9
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	895b      	ldrh	r3, [r3, #10]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2200      	movs	r2, #0
 8009d64:	461c      	mov	r4, r3
 8009d66:	4615      	mov	r5, r2
 8009d68:	4622      	mov	r2, r4
 8009d6a:	462b      	mov	r3, r5
 8009d6c:	f7f6 ff9c 	bl	8000ca8 <__aeabi_uldivmod>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4613      	mov	r3, r2
 8009d76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	1d1a      	adds	r2, r3, #4
 8009d7c:	61ba      	str	r2, [r7, #24]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <clmt_clust+0x5e>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	e010      	b.n	8009dae <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8009d8c:	69fa      	ldr	r2, [r7, #28]
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d307      	bcc.n	8009da4 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d94:	69fa      	ldr	r2, [r7, #28]
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	61fb      	str	r3, [r7, #28]
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009da2:	e7e9      	b.n	8009d78 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8009da4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	4413      	add	r3, r2
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bdb0      	pop	{r4, r5, r7, pc}

08009db6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b086      	sub	sp, #24
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d102      	bne.n	8009dd4 <dir_sdi+0x1e>
 8009dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dd2:	e001      	b.n	8009dd8 <dir_sdi+0x22>
 8009dd4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d904      	bls.n	8009de8 <dir_sdi+0x32>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	f003 031f 	and.w	r3, r3, #31
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <dir_sdi+0x36>
		return FR_INT_ERR;
 8009de8:	2302      	movs	r3, #2
 8009dea:	e066      	b.n	8009eba <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d109      	bne.n	8009e12 <dir_sdi+0x5c>
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d905      	bls.n	8009e12 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10c      	bne.n	8009e32 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	095b      	lsrs	r3, r3, #5
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	8912      	ldrh	r2, [r2, #8]
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d301      	bcc.n	8009e28 <dir_sdi+0x72>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e048      	b.n	8009eba <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e30:	e029      	b.n	8009e86 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	895b      	ldrh	r3, [r3, #10]
 8009e36:	025b      	lsls	r3, r3, #9
 8009e38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e3a:	e019      	b.n	8009e70 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6979      	ldr	r1, [r7, #20]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7ff fa71 	bl	8009328 <get_fat>
 8009e46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4e:	d101      	bne.n	8009e54 <dir_sdi+0x9e>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e032      	b.n	8009eba <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d904      	bls.n	8009e64 <dir_sdi+0xae>
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d301      	bcc.n	8009e68 <dir_sdi+0xb2>
 8009e64:	2302      	movs	r3, #2
 8009e66:	e028      	b.n	8009eba <dir_sdi+0x104>
			ofs -= csz;
 8009e68:	683a      	ldr	r2, [r7, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d2e1      	bcs.n	8009e3c <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8009e78:	6979      	ldr	r1, [r7, #20]
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f7ff fa34 	bl	80092e8 <clust2sect>
 8009e80:	4602      	mov	r2, r0
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <dir_sdi+0xe2>
 8009e94:	2302      	movs	r3, #2
 8009e96:	e010      	b.n	8009eba <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	0a5b      	lsrs	r3, r3, #9
 8009ea0:	441a      	add	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb2:	441a      	add	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed6:	3320      	adds	r3, #32
 8009ed8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <dir_next+0x38>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b04      	cmp	r3, #4
 8009ee8:	d102      	bne.n	8009ef0 <dir_next+0x2e>
 8009eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eee:	e001      	b.n	8009ef4 <dir_next+0x32>
 8009ef0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d801      	bhi.n	8009efe <dir_next+0x3c>
 8009efa:	2304      	movs	r3, #4
 8009efc:	e0b2      	b.n	800a064 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 80a0 	bne.w	800a04a <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10b      	bne.n	8009f34 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	8912      	ldrh	r2, [r2, #8]
 8009f24:	4293      	cmp	r3, r2
 8009f26:	f0c0 8090 	bcc.w	800a04a <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f30:	2304      	movs	r3, #4
 8009f32:	e097      	b.n	800a064 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	0a5b      	lsrs	r3, r3, #9
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	8952      	ldrh	r2, [r2, #10]
 8009f3c:	3a01      	subs	r2, #1
 8009f3e:	4013      	ands	r3, r2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f040 8082 	bne.w	800a04a <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4610      	mov	r0, r2
 8009f50:	f7ff f9ea 	bl	8009328 <get_fat>
 8009f54:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d801      	bhi.n	8009f60 <dir_next+0x9e>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e081      	b.n	800a064 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d101      	bne.n	8009f6c <dir_next+0xaa>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e07b      	b.n	800a064 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	69db      	ldr	r3, [r3, #28]
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d35f      	bcc.n	800a036 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f82:	2304      	movs	r3, #4
 8009f84:	e06e      	b.n	800a064 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f7ff fdcc 	bl	8009b2c <create_chain>
 8009f94:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d101      	bne.n	8009fa0 <dir_next+0xde>
 8009f9c:	2307      	movs	r3, #7
 8009f9e:	e061      	b.n	800a064 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <dir_next+0xe8>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e05c      	b.n	800a064 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d101      	bne.n	8009fb6 <dir_next+0xf4>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e056      	b.n	800a064 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	79db      	ldrb	r3, [r3, #7]
 8009fba:	f043 0304 	orr.w	r3, r3, #4
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7ff f8af 	bl	8009128 <sync_window>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <dir_next+0x112>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e047      	b.n	800a064 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3338      	adds	r3, #56	@ 0x38
 8009fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fe fed9 	bl	8008d96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	613b      	str	r3, [r7, #16]
 8009fe8:	6979      	ldr	r1, [r7, #20]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff f97c 	bl	80092e8 <clust2sect>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	635a      	str	r2, [r3, #52]	@ 0x34
 8009ff6:	e012      	b.n	800a01e <dir_next+0x15c>
						fs->wflag = 1;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff f892 	bl	8009128 <sync_window>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <dir_next+0x14c>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e02a      	b.n	800a064 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	3301      	adds	r3, #1
 800a012:	613b      	str	r3, [r7, #16]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	895b      	ldrh	r3, [r3, #10]
 800a022:	461a      	mov	r2, r3
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	4293      	cmp	r3, r2
 800a028:	d3e6      	bcc.n	8009ff8 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	1ad2      	subs	r2, r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800a03c:	6979      	ldr	r1, [r7, #20]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff f952 	bl	80092e8 <clust2sect>
 800a044:	4602      	mov	r2, r0
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a05c:	441a      	add	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a07c:	2100      	movs	r1, #0
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff fe99 	bl	8009db6 <dir_sdi>
 800a084:	4603      	mov	r3, r0
 800a086:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a088:	7dfb      	ldrb	r3, [r7, #23]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d140      	bne.n	800a110 <dir_alloc+0xa4>
		n = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a096:	4619      	mov	r1, r3
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f7ff f889 	bl	80091b0 <move_window>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d132      	bne.n	800a10e <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d108      	bne.n	800a0c2 <dir_alloc+0x56>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	09db      	lsrs	r3, r3, #7
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	e00f      	b.n	800a0e2 <dir_alloc+0x76>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2be5      	cmp	r3, #229	@ 0xe5
 800a0ca:	d004      	beq.n	800a0d6 <dir_alloc+0x6a>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <dir_alloc+0x6e>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <dir_alloc+0x70>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d007      	beq.n	800a0f6 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	613b      	str	r3, [r7, #16]
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d102      	bne.n	800a0fa <dir_alloc+0x8e>
 800a0f4:	e00c      	b.n	800a110 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff fee0 	bl	8009ec2 <dir_next>
 800a102:	4603      	mov	r3, r0
 800a104:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d0c2      	beq.n	800a092 <dir_alloc+0x26>
 800a10c:	e000      	b.n	800a110 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a10e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	2b04      	cmp	r3, #4
 800a114:	d101      	bne.n	800a11a <dir_alloc+0xae>
 800a116:	2307      	movs	r3, #7
 800a118:	75fb      	strb	r3, [r7, #23]
	return res;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	331a      	adds	r3, #26
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fc28 	bl	8008988 <ld_word>
 800a138:	4603      	mov	r3, r0
 800a13a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b03      	cmp	r3, #3
 800a142:	d109      	bne.n	800a158 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	3314      	adds	r3, #20
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe fc1d 	bl	8008988 <ld_word>
 800a14e:	4603      	mov	r3, r0
 800a150:	041b      	lsls	r3, r3, #16
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4313      	orrs	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a158:	68fb      	ldr	r3, [r7, #12]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	331a      	adds	r3, #26
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	b292      	uxth	r2, r2
 800a176:	4611      	mov	r1, r2
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe fd1c 	bl	8008bb6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b03      	cmp	r3, #3
 800a184:	d109      	bne.n	800a19a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f103 0214 	add.w	r2, r3, #20
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	0c1b      	lsrs	r3, r3, #16
 800a190:	b29b      	uxth	r3, r3
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7fe fd0e 	bl	8008bb6 <st_word>
	}
}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a1a4:	b590      	push	{r4, r7, lr}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	331a      	adds	r3, #26
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fbe8 	bl	8008988 <ld_word>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <cmp_lfn+0x1e>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e059      	b.n	800a276 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1ca:	1e5a      	subs	r2, r3, #1
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	4413      	add	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a1d8:	2301      	movs	r3, #1
 800a1da:	81fb      	strh	r3, [r7, #14]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	613b      	str	r3, [r7, #16]
 800a1e0:	e033      	b.n	800a24a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a1e2:	4a27      	ldr	r2, [pc, #156]	@ (800a280 <cmp_lfn+0xdc>)
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe fbc9 	bl	8008988 <ld_word>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a1fa:	89fb      	ldrh	r3, [r7, #14]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01a      	beq.n	800a236 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	2bfe      	cmp	r3, #254	@ 0xfe
 800a204:	d812      	bhi.n	800a22c <cmp_lfn+0x88>
 800a206:	89bb      	ldrh	r3, [r7, #12]
 800a208:	4618      	mov	r0, r3
 800a20a:	f003 f9c1 	bl	800d590 <ff_wtoupper>
 800a20e:	4603      	mov	r3, r0
 800a210:	461c      	mov	r4, r3
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	617a      	str	r2, [r7, #20]
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4413      	add	r3, r2
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	4618      	mov	r0, r3
 800a222:	f003 f9b5 	bl	800d590 <ff_wtoupper>
 800a226:	4603      	mov	r3, r0
 800a228:	429c      	cmp	r4, r3
 800a22a:	d001      	beq.n	800a230 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a22c:	2300      	movs	r3, #0
 800a22e:	e022      	b.n	800a276 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a230:	89bb      	ldrh	r3, [r7, #12]
 800a232:	81fb      	strh	r3, [r7, #14]
 800a234:	e006      	b.n	800a244 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a236:	89bb      	ldrh	r3, [r7, #12]
 800a238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d001      	beq.n	800a244 <cmp_lfn+0xa0>
 800a240:	2300      	movs	r3, #0
 800a242:	e018      	b.n	800a276 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	3301      	adds	r3, #1
 800a248:	613b      	str	r3, [r7, #16]
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b0c      	cmp	r3, #12
 800a24e:	d9c8      	bls.n	800a1e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <cmp_lfn+0xd0>
 800a25c:	89fb      	ldrh	r3, [r7, #14]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d008      	beq.n	800a274 <cmp_lfn+0xd0>
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	4413      	add	r3, r2
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <cmp_lfn+0xd0>
 800a270:	2300      	movs	r3, #0
 800a272:	e000      	b.n	800a276 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a274:	2301      	movs	r3, #1
}
 800a276:	4618      	mov	r0, r3
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd90      	pop	{r4, r7, pc}
 800a27e:	bf00      	nop
 800a280:	08013438 	.word	0x08013438

0800a284 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	331a      	adds	r3, #26
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe fb78 	bl	8008988 <ld_word>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <pick_lfn+0x1e>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e04d      	b.n	800a33e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2aa:	1e5a      	subs	r2, r3, #1
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	81fb      	strh	r3, [r7, #14]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	613b      	str	r3, [r7, #16]
 800a2c0:	e028      	b.n	800a314 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a2c2:	4a21      	ldr	r2, [pc, #132]	@ (800a348 <pick_lfn+0xc4>)
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe fb59 	bl	8008988 <ld_word>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a2da:	89fb      	ldrh	r3, [r7, #14]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00f      	beq.n	800a300 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2bfe      	cmp	r3, #254	@ 0xfe
 800a2e4:	d901      	bls.n	800a2ea <pick_lfn+0x66>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e029      	b.n	800a33e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a2ea:	89bb      	ldrh	r3, [r7, #12]
 800a2ec:	81fb      	strh	r3, [r7, #14]
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	1c5a      	adds	r2, r3, #1
 800a2f2:	617a      	str	r2, [r7, #20]
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	89fa      	ldrh	r2, [r7, #14]
 800a2fc:	801a      	strh	r2, [r3, #0]
 800a2fe:	e006      	b.n	800a30e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a300:	89bb      	ldrh	r3, [r7, #12]
 800a302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a306:	4293      	cmp	r3, r2
 800a308:	d001      	beq.n	800a30e <pick_lfn+0x8a>
 800a30a:	2300      	movs	r3, #0
 800a30c:	e017      	b.n	800a33e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3301      	adds	r3, #1
 800a312:	613b      	str	r3, [r7, #16]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b0c      	cmp	r3, #12
 800a318:	d9d3      	bls.n	800a2c2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00a      	beq.n	800a33c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2bfe      	cmp	r3, #254	@ 0xfe
 800a32a:	d901      	bls.n	800a330 <pick_lfn+0xac>
 800a32c:	2300      	movs	r3, #0
 800a32e:	e006      	b.n	800a33e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	4413      	add	r3, r2
 800a338:	2200      	movs	r2, #0
 800a33a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a33c:	2301      	movs	r3, #1
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	08013438 	.word	0x08013438

0800a34c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	4611      	mov	r1, r2
 800a358:	461a      	mov	r2, r3
 800a35a:	460b      	mov	r3, r1
 800a35c:	71fb      	strb	r3, [r7, #7]
 800a35e:	4613      	mov	r3, r2
 800a360:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	330d      	adds	r3, #13
 800a366:	79ba      	ldrb	r2, [r7, #6]
 800a368:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	330b      	adds	r3, #11
 800a36e:	220f      	movs	r2, #15
 800a370:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	330c      	adds	r3, #12
 800a376:	2200      	movs	r2, #0
 800a378:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	331a      	adds	r3, #26
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe fc18 	bl	8008bb6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	1e5a      	subs	r2, r3, #1
 800a38a:	4613      	mov	r3, r2
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	82fb      	strh	r3, [r7, #22]
 800a39a:	2300      	movs	r3, #0
 800a39c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a39e:	8afb      	ldrh	r3, [r7, #22]
 800a3a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d007      	beq.n	800a3b8 <put_lfn+0x6c>
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	61fa      	str	r2, [r7, #28]
 800a3ae:	005b      	lsls	r3, r3, #1
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a3b8:	4a17      	ldr	r2, [pc, #92]	@ (800a418 <put_lfn+0xcc>)
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	4413      	add	r3, r2
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	8afa      	ldrh	r2, [r7, #22]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fbf3 	bl	8008bb6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a3d0:	8afb      	ldrh	r3, [r7, #22]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d102      	bne.n	800a3dc <put_lfn+0x90>
 800a3d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	61bb      	str	r3, [r7, #24]
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	2b0c      	cmp	r3, #12
 800a3e6:	d9da      	bls.n	800a39e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a3e8:	8afb      	ldrh	r3, [r7, #22]
 800a3ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d006      	beq.n	800a400 <put_lfn+0xb4>
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <put_lfn+0xbc>
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a406:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	79fa      	ldrb	r2, [r7, #7]
 800a40c:	701a      	strb	r2, [r3, #0]
}
 800a40e:	bf00      	nop
 800a410:	3720      	adds	r7, #32
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	08013438 	.word	0x08013438

0800a41c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08c      	sub	sp, #48	@ 0x30
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a42a:	220b      	movs	r2, #11
 800a42c:	68b9      	ldr	r1, [r7, #8]
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7fe fc90 	bl	8008d54 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2b05      	cmp	r3, #5
 800a438:	d92b      	bls.n	800a492 <gen_numname+0x76>
		sr = seq;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a43e:	e022      	b.n	800a486 <gen_numname+0x6a>
			wc = *lfn++;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	1c9a      	adds	r2, r3, #2
 800a444:	607a      	str	r2, [r7, #4]
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a44a:	2300      	movs	r3, #0
 800a44c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a44e:	e017      	b.n	800a480 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	005a      	lsls	r2, r3, #1
 800a454:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	4413      	add	r3, r2
 800a45c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a45e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d005      	beq.n	800a47a <gen_numname+0x5e>
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a474:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a478:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	3301      	adds	r3, #1
 800a47e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a482:	2b0f      	cmp	r3, #15
 800a484:	d9e4      	bls.n	800a450 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1d8      	bne.n	800a440 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a492:	2307      	movs	r3, #7
 800a494:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f003 030f 	and.w	r3, r3, #15
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	3330      	adds	r3, #48	@ 0x30
 800a4a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a4a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4aa:	2b39      	cmp	r3, #57	@ 0x39
 800a4ac:	d904      	bls.n	800a4b8 <gen_numname+0x9c>
 800a4ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4b2:	3307      	adds	r3, #7
 800a4b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	1e5a      	subs	r2, r3, #1
 800a4bc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a4be:	3330      	adds	r3, #48	@ 0x30
 800a4c0:	443b      	add	r3, r7
 800a4c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a4c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	091b      	lsrs	r3, r3, #4
 800a4ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1df      	bne.n	800a496 <gen_numname+0x7a>
	ns[i] = '~';
 800a4d6:	f107 0214 	add.w	r2, r7, #20
 800a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4dc:	4413      	add	r3, r2
 800a4de:	227e      	movs	r2, #126	@ 0x7e
 800a4e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4e6:	e016      	b.n	800a516 <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	4413      	add	r3, r2
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b80      	cmp	r3, #128	@ 0x80
 800a4f2:	d90d      	bls.n	800a510 <gen_numname+0xf4>
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f8:	4413      	add	r3, r2
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2bff      	cmp	r3, #255	@ 0xff
 800a4fe:	d007      	beq.n	800a510 <gen_numname+0xf4>
			if (j == i - 1) break;
 800a500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a502:	3b01      	subs	r3, #1
 800a504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a506:	429a      	cmp	r2, r3
 800a508:	d010      	beq.n	800a52c <gen_numname+0x110>
			j++;
 800a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50c:	3301      	adds	r3, #1
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	3301      	adds	r3, #1
 800a514:	627b      	str	r3, [r7, #36]	@ 0x24
 800a516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d207      	bcs.n	800a52e <gen_numname+0x112>
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	4413      	add	r3, r2
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b20      	cmp	r3, #32
 800a528:	d1de      	bne.n	800a4e8 <gen_numname+0xcc>
 800a52a:	e000      	b.n	800a52e <gen_numname+0x112>
			if (j == i - 1) break;
 800a52c:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a530:	2b07      	cmp	r3, #7
 800a532:	d807      	bhi.n	800a544 <gen_numname+0x128>
 800a534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a53a:	3330      	adds	r3, #48	@ 0x30
 800a53c:	443b      	add	r3, r7
 800a53e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a542:	e000      	b.n	800a546 <gen_numname+0x12a>
 800a544:	2120      	movs	r1, #32
 800a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4413      	add	r3, r2
 800a550:	460a      	mov	r2, r1
 800a552:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a556:	2b07      	cmp	r3, #7
 800a558:	d9e9      	bls.n	800a52e <gen_numname+0x112>
}
 800a55a:	bf00      	nop
 800a55c:	bf00      	nop
 800a55e:	3730      	adds	r7, #48	@ 0x30
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a570:	230b      	movs	r3, #11
 800a572:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	b2da      	uxtb	r2, r3
 800a578:	0852      	lsrs	r2, r2, #1
 800a57a:	01db      	lsls	r3, r3, #7
 800a57c:	4313      	orrs	r3, r2
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	1c59      	adds	r1, r3, #1
 800a584:	6079      	str	r1, [r7, #4]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	4413      	add	r3, r2
 800a58a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	3b01      	subs	r3, #1
 800a590:	60bb      	str	r3, [r7, #8]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1ed      	bne.n	800a574 <sum_sfn+0x10>
	return sum;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b087      	sub	sp, #28
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	015b      	lsls	r3, r3, #5
 800a5b8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	827b      	strh	r3, [r7, #18]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	e015      	b.n	800a5f0 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d103      	bne.n	800a5d2 <xdir_sum+0x2c>
			i++;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	e00b      	b.n	800a5ea <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a5d2:	8a7b      	ldrh	r3, [r7, #18]
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	0852      	lsrs	r2, r2, #1
 800a5d8:	03db      	lsls	r3, r3, #15
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	440a      	add	r2, r1
 800a5e4:	7812      	ldrb	r2, [r2, #0]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d3e5      	bcc.n	800a5c4 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a5f8:	8a7b      	ldrh	r3, [r7, #18]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a612:	e01b      	b.n	800a64c <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a614:	89bb      	ldrh	r3, [r7, #12]
 800a616:	4618      	mov	r0, r3
 800a618:	f002 ffba 	bl	800d590 <ff_wtoupper>
 800a61c:	4603      	mov	r3, r0
 800a61e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a620:	89fb      	ldrh	r3, [r7, #14]
 800a622:	b29a      	uxth	r2, r3
 800a624:	0852      	lsrs	r2, r2, #1
 800a626:	03db      	lsls	r3, r3, #15
 800a628:	4313      	orrs	r3, r2
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	89bb      	ldrh	r3, [r7, #12]
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	b29b      	uxth	r3, r3
 800a632:	4413      	add	r3, r2
 800a634:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a636:	89fb      	ldrh	r3, [r7, #14]
 800a638:	b29a      	uxth	r2, r3
 800a63a:	0852      	lsrs	r2, r2, #1
 800a63c:	03db      	lsls	r3, r3, #15
 800a63e:	4313      	orrs	r3, r2
 800a640:	b29a      	uxth	r2, r3
 800a642:	89bb      	ldrh	r3, [r7, #12]
 800a644:	0a1b      	lsrs	r3, r3, #8
 800a646:	b29b      	uxth	r3, r3
 800a648:	4413      	add	r3, r2
 800a64a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	1c9a      	adds	r2, r3, #2
 800a650:	607a      	str	r2, [r7, #4]
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	81bb      	strh	r3, [r7, #12]
 800a656:	89bb      	ldrh	r3, [r7, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1db      	bne.n	800a614 <xname_sum+0xe>
	}
	return sum;
 800a65c:	89fb      	ldrh	r3, [r7, #14]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b086      	sub	sp, #24
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a674:	2340      	movs	r3, #64	@ 0x40
 800a676:	613b      	str	r3, [r7, #16]
 800a678:	2300      	movs	r3, #0
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	e03a      	b.n	800a6f4 <get_xdir_info+0x8e>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f003 031f 	and.w	r3, r3, #31
 800a684:	2b00      	cmp	r3, #0
 800a686:	d102      	bne.n	800a68e <get_xdir_info+0x28>
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	3302      	adds	r3, #2
 800a68c:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	4413      	add	r3, r2
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe f977 	bl	8008988 <ld_word>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2100      	movs	r1, #0
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f002 ff18 	bl	800d4d4 <ff_convert>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
 800a6a8:	897b      	ldrh	r3, [r7, #10]
 800a6aa:	2bff      	cmp	r3, #255	@ 0xff
 800a6ac:	d90a      	bls.n	800a6c4 <get_xdir_info+0x5e>
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
 800a6ae:	897b      	ldrh	r3, [r7, #10]
 800a6b0:	0a1b      	lsrs	r3, r3, #8
 800a6b2:	b299      	uxth	r1, r3
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	617a      	str	r2, [r7, #20]
 800a6ba:	b2c9      	uxtb	r1, r1
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	4413      	add	r3, r2
 800a6c0:	460a      	mov	r2, r1
 800a6c2:	769a      	strb	r2, [r3, #26]
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800a6c4:	897b      	ldrh	r3, [r7, #10]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <get_xdir_info+0x6a>
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2bfe      	cmp	r3, #254	@ 0xfe
 800a6ce:	d902      	bls.n	800a6d6 <get_xdir_info+0x70>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]
 800a6d4:	e015      	b.n	800a702 <get_xdir_info+0x9c>
		fno->fname[di++] = (char)w;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	617a      	str	r2, [r7, #20]
 800a6dc:	897a      	ldrh	r2, [r7, #10]
 800a6de:	b2d1      	uxtb	r1, r2
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	460a      	mov	r2, r1
 800a6e6:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	3302      	adds	r3, #2
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3323      	adds	r3, #35	@ 0x23
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d3bd      	bcc.n	800a67e <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <get_xdir_info+0xb0>
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	617a      	str	r2, [r7, #20]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	4413      	add	r3, r2
 800a712:	223f      	movs	r2, #63	@ 0x3f
 800a714:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4413      	add	r3, r2
 800a71c:	331a      	adds	r3, #26
 800a71e:	2200      	movs	r2, #0
 800a720:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2200      	movs	r2, #0
 800a726:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	791a      	ldrb	r2, [r3, #4]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	7b1b      	ldrb	r3, [r3, #12]
 800a734:	f003 0310 	and.w	r3, r3, #16
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d107      	bne.n	800a74c <get_xdir_info+0xe6>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3338      	adds	r3, #56	@ 0x38
 800a740:	4618      	mov	r0, r3
 800a742:	f7fe f95d 	bl	8008a00 <ld_qword>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	e003      	b.n	800a754 <get_xdir_info+0xee>
 800a74c:	f04f 0200 	mov.w	r2, #0
 800a750:	f04f 0300 	mov.w	r3, #0
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	330c      	adds	r3, #12
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe f912 	bl	8008988 <ld_word>
 800a764:	4603      	mov	r3, r0
 800a766:	461a      	mov	r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	330e      	adds	r3, #14
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe f909 	bl	8008988 <ld_word>
 800a776:	4603      	mov	r3, r0
 800a778:	461a      	mov	r2, r3
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	811a      	strh	r2, [r3, #8]
}
 800a77e:	bf00      	nop
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a788:	b590      	push	{r4, r7, lr}
 800a78a:	b087      	sub	sp, #28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f7fe fd04 	bl	80091b0 <move_window>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <load_xdir+0x2e>
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
 800a7b4:	e09f      	b.n	800a8f6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	2b85      	cmp	r3, #133	@ 0x85
 800a7be:	d001      	beq.n	800a7c4 <load_xdir+0x3c>
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	e098      	b.n	800a8f6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c8:	2220      	movs	r2, #32
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6938      	ldr	r0, [r7, #16]
 800a7ce:	f7fe fac1 	bl	8008d54 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	015b      	lsls	r3, r3, #5
 800a7dc:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b5f      	cmp	r3, #95	@ 0x5f
 800a7e2:	d903      	bls.n	800a7ec <load_xdir+0x64>
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a7ea:	d901      	bls.n	800a7f0 <load_xdir+0x68>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	e082      	b.n	800a8f6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff fb65 	bl	8009ec2 <dir_next>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <load_xdir+0x7e>
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	e077      	b.n	800a8f6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a80e:	4619      	mov	r1, r3
 800a810:	4610      	mov	r0, r2
 800a812:	f7fe fccd 	bl	80091b0 <move_window>
 800a816:	4603      	mov	r3, r0
 800a818:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <load_xdir+0x9c>
 800a820:	7bfb      	ldrb	r3, [r7, #15]
 800a822:	e068      	b.n	800a8f6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a82c:	d001      	beq.n	800a832 <load_xdir+0xaa>
 800a82e:	2302      	movs	r3, #2
 800a830:	e061      	b.n	800a8f6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f103 0020 	add.w	r0, r3, #32
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83c:	2220      	movs	r2, #32
 800a83e:	4619      	mov	r1, r3
 800a840:	f7fe fa88 	bl	8008d54 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	3323      	adds	r3, #35	@ 0x23
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	332c      	adds	r3, #44	@ 0x2c
 800a84c:	4a2c      	ldr	r2, [pc, #176]	@ (800a900 <load_xdir+0x178>)
 800a84e:	fba2 2303 	umull	r2, r3, r2, r3
 800a852:	08db      	lsrs	r3, r3, #3
 800a854:	015b      	lsls	r3, r3, #5
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d201      	bcs.n	800a860 <load_xdir+0xd8>
 800a85c:	2302      	movs	r3, #2
 800a85e:	e04a      	b.n	800a8f6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800a860:	2340      	movs	r3, #64	@ 0x40
 800a862:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800a864:	2100      	movs	r1, #0
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff fb2b 	bl	8009ec2 <dir_next>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <load_xdir+0xf2>
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	e03d      	b.n	800a8f6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a882:	4619      	mov	r1, r3
 800a884:	4610      	mov	r0, r2
 800a886:	f7fe fc93 	bl	80091b0 <move_window>
 800a88a:	4603      	mov	r3, r0
 800a88c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <load_xdir+0x110>
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	e02e      	b.n	800a8f6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	2bc1      	cmp	r3, #193	@ 0xc1
 800a8a0:	d001      	beq.n	800a8a6 <load_xdir+0x11e>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	e027      	b.n	800a8f6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a8ac:	d208      	bcs.n	800a8c0 <load_xdir+0x138>
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	18d0      	adds	r0, r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	f7fe fa4a 	bl	8008d54 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	3320      	adds	r3, #32
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d3ca      	bcc.n	800a864 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a8d4:	d80e      	bhi.n	800a8f4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800a8d6:	6938      	ldr	r0, [r7, #16]
 800a8d8:	f7ff fe65 	bl	800a5a6 <xdir_sum>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461c      	mov	r4, r3
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	3302      	adds	r3, #2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fe f84f 	bl	8008988 <ld_word>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	d001      	beq.n	800a8f4 <load_xdir+0x16c>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e000      	b.n	800a8f6 <load_xdir+0x16e>
	}
	return FR_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd90      	pop	{r4, r7, pc}
 800a8fe:	bf00      	nop
 800a900:	88888889 	.word	0x88888889

0800a904 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800a904:	b5b0      	push	{r4, r5, r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	6808      	ldr	r0, [r1, #0]
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6a08      	ldr	r0, [r1, #32]
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800a922:	b2c8      	uxtb	r0, r1
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800a92c:	2000      	movs	r0, #0
 800a92e:	460c      	mov	r4, r1
 800a930:	4605      	mov	r5, r0
 800a932:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800a936:	2300      	movs	r3, #0
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff fa32 	bl	8009db6 <dir_sdi>
 800a952:	4603      	mov	r3, r0
 800a954:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff ff13 	bl	800a788 <load_xdir>
 800a962:	4603      	mov	r3, r0
 800a964:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bdb0      	pop	{r4, r5, r7, pc}

0800a970 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800a970:	b590      	push	{r4, r7, lr}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	1c9c      	adds	r4, r3, #2
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f7ff fe0e 	bl	800a5a6 <xdir_sum>
 800a98a:	4603      	mov	r3, r0
 800a98c:	4619      	mov	r1, r3
 800a98e:	4620      	mov	r0, r4
 800a990:	f7fe f911 	bl	8008bb6 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3301      	adds	r3, #1
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	3301      	adds	r3, #1
 800a99c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff fa06 	bl	8009db6 <dir_sdi>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800a9ae:	e026      	b.n	800a9fe <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f7fe fbf8 	bl	80091b0 <move_window>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d11d      	bne.n	800aa06 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	68f9      	ldr	r1, [r7, #12]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe f9be 	bl	8008d54 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	613b      	str	r3, [r7, #16]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00e      	beq.n	800aa0a <store_xdir+0x9a>
		dirb += SZDIRE;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	3320      	adds	r3, #32
 800a9f0:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff fa64 	bl	8009ec2 <dir_next>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0d5      	beq.n	800a9b0 <store_xdir+0x40>
 800aa04:	e002      	b.n	800aa0c <store_xdir+0x9c>
		if (res != FR_OK) break;
 800aa06:	bf00      	nop
 800aa08:	e000      	b.n	800aa0c <store_xdir+0x9c>
		if (--nent == 0) break;
 800aa0a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <store_xdir+0xa8>
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <store_xdir+0xac>
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
 800aa1a:	e000      	b.n	800aa1e <store_xdir+0xae>
 800aa1c:	2302      	movs	r3, #2
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd90      	pop	{r4, r7, pc}

0800aa26 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800aa26:	b590      	push	{r4, r7, lr}
 800aa28:	b085      	sub	sp, #20
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800aa30:	2240      	movs	r2, #64	@ 0x40
 800aa32:	2100      	movs	r1, #0
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7fe f9ae 	bl	8008d96 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2285      	movs	r2, #133	@ 0x85
 800aa3e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3320      	adds	r3, #32
 800aa44:	22c0      	movs	r2, #192	@ 0xc0
 800aa46:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	72bb      	strb	r3, [r7, #10]
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	72fb      	strb	r3, [r7, #11]
 800aa50:	2301      	movs	r3, #1
 800aa52:	813b      	strh	r3, [r7, #8]
 800aa54:	2340      	movs	r3, #64	@ 0x40
 800aa56:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	60fa      	str	r2, [r7, #12]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	4413      	add	r3, r2
 800aa62:	22c1      	movs	r2, #193	@ 0xc1
 800aa64:	701a      	strb	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	60fa      	str	r2, [r7, #12]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	4413      	add	r3, r2
 800aa70:	2200      	movs	r2, #0
 800aa72:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800aa74:	893b      	ldrh	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00b      	beq.n	800aa92 <create_xdir+0x6c>
 800aa7a:	7abb      	ldrb	r3, [r7, #10]
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	4413      	add	r3, r2
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	813b      	strh	r3, [r7, #8]
 800aa86:	893b      	ldrh	r3, [r7, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <create_xdir+0x6c>
 800aa8c:	7abb      	ldrb	r3, [r7, #10]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	893a      	ldrh	r2, [r7, #8]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe f88a 	bl	8008bb6 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3302      	adds	r3, #2
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f003 031f 	and.w	r3, r3, #31
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e0      	bne.n	800aa74 <create_xdir+0x4e>
		nb++;
 800aab2:	7afb      	ldrb	r3, [r7, #11]
 800aab4:	3301      	adds	r3, #1
 800aab6:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800aab8:	7abb      	ldrb	r3, [r7, #10]
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	4413      	add	r3, r2
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1c8      	bne.n	800aa58 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	3323      	adds	r3, #35	@ 0x23
 800aaca:	7aba      	ldrb	r2, [r7, #10]
 800aacc:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3301      	adds	r3, #1
 800aad2:	7afa      	ldrb	r2, [r7, #11]
 800aad4:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800aadc:	6838      	ldr	r0, [r7, #0]
 800aade:	f7ff fd92 	bl	800a606 <xname_sum>
 800aae2:	4603      	mov	r3, r0
 800aae4:	4619      	mov	r1, r3
 800aae6:	4620      	mov	r0, r4
 800aae8:	f7fe f865 	bl	8008bb6 <st_word>
}
 800aaec:	bf00      	nop
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd90      	pop	{r4, r7, pc}

0800aaf4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aafe:	2304      	movs	r3, #4
 800ab00:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ab08:	23ff      	movs	r3, #255	@ 0xff
 800ab0a:	757b      	strb	r3, [r7, #21]
 800ab0c:	23ff      	movs	r3, #255	@ 0xff
 800ab0e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ab10:	e09f      	b.n	800ac52 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab16:	4619      	mov	r1, r3
 800ab18:	6938      	ldr	r0, [r7, #16]
 800ab1a:	f7fe fb49 	bl	80091b0 <move_window>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f040 809a 	bne.w	800ac5e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ab32:	7dbb      	ldrb	r3, [r7, #22]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d102      	bne.n	800ab3e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ab38:	2304      	movs	r3, #4
 800ab3a:	75fb      	strb	r3, [r7, #23]
 800ab3c:	e096      	b.n	800ac6c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	2b04      	cmp	r3, #4
 800ab44:	d118      	bne.n	800ab78 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ab46:	7dbb      	ldrb	r3, [r7, #22]
 800ab48:	2b85      	cmp	r3, #133	@ 0x85
 800ab4a:	d179      	bne.n	800ac40 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff fe17 	bl	800a788 <load_xdir>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d17e      	bne.n	800ac62 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ab76:	e074      	b.n	800ac62 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7c:	330b      	adds	r3, #11
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab84:	73fb      	strb	r3, [r7, #15]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	7bfa      	ldrb	r2, [r7, #15]
 800ab8a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ab8c:	7dbb      	ldrb	r3, [r7, #22]
 800ab8e:	2be5      	cmp	r3, #229	@ 0xe5
 800ab90:	d00e      	beq.n	800abb0 <dir_read+0xbc>
 800ab92:	7dbb      	ldrb	r3, [r7, #22]
 800ab94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab96:	d00b      	beq.n	800abb0 <dir_read+0xbc>
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	f023 0320 	bic.w	r3, r3, #32
 800ab9e:	2b08      	cmp	r3, #8
 800aba0:	bf0c      	ite	eq
 800aba2:	2301      	moveq	r3, #1
 800aba4:	2300      	movne	r3, #0
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	461a      	mov	r2, r3
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	4293      	cmp	r3, r2
 800abae:	d002      	beq.n	800abb6 <dir_read+0xc2>
				ord = 0xFF;
 800abb0:	23ff      	movs	r3, #255	@ 0xff
 800abb2:	757b      	strb	r3, [r7, #21]
 800abb4:	e044      	b.n	800ac40 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	2b0f      	cmp	r3, #15
 800abba:	d12f      	bne.n	800ac1c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800abbc:	7dbb      	ldrb	r3, [r7, #22]
 800abbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00d      	beq.n	800abe2 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abca:	7b5b      	ldrb	r3, [r3, #13]
 800abcc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800abce:	7dbb      	ldrb	r3, [r7, #22]
 800abd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abd4:	75bb      	strb	r3, [r7, #22]
 800abd6:	7dbb      	ldrb	r3, [r7, #22]
 800abd8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800abe2:	7dba      	ldrb	r2, [r7, #22]
 800abe4:	7d7b      	ldrb	r3, [r7, #21]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d115      	bne.n	800ac16 <dir_read+0x122>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abee:	330d      	adds	r3, #13
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	7d3a      	ldrb	r2, [r7, #20]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d10e      	bne.n	800ac16 <dir_read+0x122>
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	f7ff fb3e 	bl	800a284 <pick_lfn>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <dir_read+0x122>
 800ac0e:	7d7b      	ldrb	r3, [r7, #21]
 800ac10:	3b01      	subs	r3, #1
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	e000      	b.n	800ac18 <dir_read+0x124>
 800ac16:	23ff      	movs	r3, #255	@ 0xff
 800ac18:	757b      	strb	r3, [r7, #21]
 800ac1a:	e011      	b.n	800ac40 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ac1c:	7d7b      	ldrb	r3, [r7, #21]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d109      	bne.n	800ac36 <dir_read+0x142>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fc9c 	bl	800a564 <sum_sfn>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	461a      	mov	r2, r3
 800ac30:	7d3b      	ldrb	r3, [r7, #20]
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d017      	beq.n	800ac66 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3c:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800ac3e:	e012      	b.n	800ac66 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ac40:	2100      	movs	r1, #0
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff f93d 	bl	8009ec2 <dir_next>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac4c:	7dfb      	ldrb	r3, [r7, #23]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10b      	bne.n	800ac6a <dir_read+0x176>
	while (dp->sect) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f47f af5b 	bne.w	800ab12 <dir_read+0x1e>
 800ac5c:	e006      	b.n	800ac6c <dir_read+0x178>
		if (res != FR_OK) break;
 800ac5e:	bf00      	nop
 800ac60:	e004      	b.n	800ac6c <dir_read+0x178>
					break;
 800ac62:	bf00      	nop
 800ac64:	e002      	b.n	800ac6c <dir_read+0x178>
					break;
 800ac66:	bf00      	nop
 800ac68:	e000      	b.n	800ac6c <dir_read+0x178>
		if (res != FR_OK) break;
 800ac6a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ac6c:	7dfb      	ldrb	r3, [r7, #23]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <dir_read+0x184>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ac82:	b590      	push	{r4, r7, lr}
 800ac84:	b089      	sub	sp, #36	@ 0x24
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ac90:	2100      	movs	r1, #0
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff f88f 	bl	8009db6 <dir_sdi>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800ac9c:	7ffb      	ldrb	r3, [r7, #31]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <dir_find+0x24>
 800aca2:	7ffb      	ldrb	r3, [r7, #31]
 800aca4:	e113      	b.n	800aece <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	2b04      	cmp	r3, #4
 800acac:	d165      	bne.n	800ad7a <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7ff fca7 	bl	800a606 <xname_sum>
 800acb8:	4603      	mov	r3, r0
 800acba:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800acbc:	e050      	b.n	800ad60 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	3324      	adds	r3, #36	@ 0x24
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fd fe5f 	bl	8008988 <ld_word>
 800acca:	4603      	mov	r3, r0
 800accc:	461a      	mov	r2, r3
 800acce:	893b      	ldrh	r3, [r7, #8]
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d144      	bne.n	800ad5e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800acdc:	76fb      	strb	r3, [r7, #27]
 800acde:	2340      	movs	r3, #64	@ 0x40
 800ace0:	617b      	str	r3, [r7, #20]
 800ace2:	2300      	movs	r3, #0
 800ace4:	613b      	str	r3, [r7, #16]
 800ace6:	e029      	b.n	800ad3c <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f003 031f 	and.w	r3, r3, #31
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d102      	bne.n	800acf8 <dir_find+0x76>
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	3302      	adds	r3, #2
 800acf6:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	691a      	ldr	r2, [r3, #16]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	4413      	add	r3, r2
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd fe41 	bl	8008988 <ld_word>
 800ad06:	4603      	mov	r3, r0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f002 fc41 	bl	800d590 <ff_wtoupper>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	461c      	mov	r4, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	68da      	ldr	r2, [r3, #12]
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	4413      	add	r3, r2
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f002 fc36 	bl	800d590 <ff_wtoupper>
 800ad24:	4603      	mov	r3, r0
 800ad26:	429c      	cmp	r4, r3
 800ad28:	d10c      	bne.n	800ad44 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ad2a:	7efb      	ldrb	r3, [r7, #27]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	76fb      	strb	r3, [r7, #27]
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	3302      	adds	r3, #2
 800ad34:	617b      	str	r3, [r7, #20]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	7efb      	ldrb	r3, [r7, #27]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1d2      	bne.n	800ace8 <dir_find+0x66>
 800ad42:	e000      	b.n	800ad46 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ad44:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ad46:	7efb      	ldrb	r3, [r7, #27]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d109      	bne.n	800ad60 <dir_find+0xde>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	005b      	lsls	r3, r3, #1
 800ad54:	4413      	add	r3, r2
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <dir_find+0xf2>
 800ad5c:	e000      	b.n	800ad60 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800ad5e:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ad60:	2100      	movs	r1, #0
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7ff fec6 	bl	800aaf4 <dir_read>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	77fb      	strb	r3, [r7, #31]
 800ad6c:	7ffb      	ldrb	r3, [r7, #31]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d0a5      	beq.n	800acbe <dir_find+0x3c>
 800ad72:	e000      	b.n	800ad76 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ad74:	bf00      	nop
		}
		return res;
 800ad76:	7ffb      	ldrb	r3, [r7, #31]
 800ad78:	e0a9      	b.n	800aece <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ad7a:	23ff      	movs	r3, #255	@ 0xff
 800ad7c:	773b      	strb	r3, [r7, #28]
 800ad7e:	7f3b      	ldrb	r3, [r7, #28]
 800ad80:	777b      	strb	r3, [r7, #29]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f04f 32ff 	mov.w	r2, #4294967295
 800ad88:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8e:	4619      	mov	r1, r3
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7fe fa0d 	bl	80091b0 <move_window>
 800ad96:	4603      	mov	r3, r0
 800ad98:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800ad9a:	7ffb      	ldrb	r3, [r7, #31]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 8090 	bne.w	800aec2 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800adaa:	7fbb      	ldrb	r3, [r7, #30]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <dir_find+0x134>
 800adb0:	2304      	movs	r3, #4
 800adb2:	77fb      	strb	r3, [r7, #31]
 800adb4:	e08a      	b.n	800aecc <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adba:	330b      	adds	r3, #11
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adc2:	72fb      	strb	r3, [r7, #11]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7afa      	ldrb	r2, [r7, #11]
 800adc8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800adca:	7fbb      	ldrb	r3, [r7, #30]
 800adcc:	2be5      	cmp	r3, #229	@ 0xe5
 800adce:	d007      	beq.n	800ade0 <dir_find+0x15e>
 800add0:	7afb      	ldrb	r3, [r7, #11]
 800add2:	f003 0308 	and.w	r3, r3, #8
 800add6:	2b00      	cmp	r3, #0
 800add8:	d009      	beq.n	800adee <dir_find+0x16c>
 800adda:	7afb      	ldrb	r3, [r7, #11]
 800addc:	2b0f      	cmp	r3, #15
 800adde:	d006      	beq.n	800adee <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ade0:	23ff      	movs	r3, #255	@ 0xff
 800ade2:	777b      	strb	r3, [r7, #29]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f04f 32ff 	mov.w	r2, #4294967295
 800adea:	64da      	str	r2, [r3, #76]	@ 0x4c
 800adec:	e05e      	b.n	800aeac <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800adee:	7afb      	ldrb	r3, [r7, #11]
 800adf0:	2b0f      	cmp	r3, #15
 800adf2:	d136      	bne.n	800ae62 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800adfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d154      	bne.n	800aeac <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae02:	7fbb      	ldrb	r3, [r7, #30]
 800ae04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00d      	beq.n	800ae28 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae10:	7b5b      	ldrb	r3, [r3, #13]
 800ae12:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ae14:	7fbb      	ldrb	r3, [r7, #30]
 800ae16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae1a:	77bb      	strb	r3, [r7, #30]
 800ae1c:	7fbb      	ldrb	r3, [r7, #30]
 800ae1e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ae28:	7fba      	ldrb	r2, [r7, #30]
 800ae2a:	7f7b      	ldrb	r3, [r7, #29]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d115      	bne.n	800ae5c <dir_find+0x1da>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae34:	330d      	adds	r3, #13
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	7f3a      	ldrb	r2, [r7, #28]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d10e      	bne.n	800ae5c <dir_find+0x1da>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	68da      	ldr	r2, [r3, #12]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7ff f9ab 	bl	800a1a4 <cmp_lfn>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <dir_find+0x1da>
 800ae54:	7f7b      	ldrb	r3, [r7, #29]
 800ae56:	3b01      	subs	r3, #1
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	e000      	b.n	800ae5e <dir_find+0x1dc>
 800ae5c:	23ff      	movs	r3, #255	@ 0xff
 800ae5e:	777b      	strb	r3, [r7, #29]
 800ae60:	e024      	b.n	800aeac <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ae62:	7f7b      	ldrb	r3, [r7, #29]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d109      	bne.n	800ae7c <dir_find+0x1fa>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff fb79 	bl	800a564 <sum_sfn>
 800ae72:	4603      	mov	r3, r0
 800ae74:	461a      	mov	r2, r3
 800ae76:	7f3b      	ldrb	r3, [r7, #28]
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d024      	beq.n	800aec6 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <dir_find+0x21e>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3340      	adds	r3, #64	@ 0x40
 800ae92:	220b      	movs	r2, #11
 800ae94:	4619      	mov	r1, r3
 800ae96:	f7fd ff99 	bl	8008dcc <mem_cmp>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d014      	beq.n	800aeca <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aea0:	23ff      	movs	r3, #255	@ 0xff
 800aea2:	777b      	strb	r3, [r7, #29]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeaa:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aeac:	2100      	movs	r1, #0
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff f807 	bl	8009ec2 <dir_next>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800aeb8:	7ffb      	ldrb	r3, [r7, #31]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f43f af65 	beq.w	800ad8a <dir_find+0x108>
 800aec0:	e004      	b.n	800aecc <dir_find+0x24a>
		if (res != FR_OK) break;
 800aec2:	bf00      	nop
 800aec4:	e002      	b.n	800aecc <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aec6:	bf00      	nop
 800aec8:	e000      	b.n	800aecc <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aeca:	bf00      	nop

	return res;
 800aecc:	7ffb      	ldrb	r3, [r7, #31]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3724      	adds	r7, #36	@ 0x24
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd90      	pop	{r4, r7, pc}
	...

0800aed8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aedc:	b0a0      	sub	sp, #128	@ 0x80
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800aeee:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <dir_register+0x22>
 800aef6:	2306      	movs	r3, #6
 800aef8:	e18e      	b.n	800b218 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800aefa:	2300      	movs	r3, #0
 800aefc:	677b      	str	r3, [r7, #116]	@ 0x74
 800aefe:	e002      	b.n	800af06 <dir_register+0x2e>
 800af00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af02:	3301      	adds	r3, #1
 800af04:	677b      	str	r3, [r7, #116]	@ 0x74
 800af06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af08:	68da      	ldr	r2, [r3, #12]
 800af0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af0c:	005b      	lsls	r3, r3, #1
 800af0e:	4413      	add	r3, r2
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1f4      	bne.n	800af00 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800af16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	f040 809f 	bne.w	800b05e <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800af20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af22:	330e      	adds	r3, #14
 800af24:	4aa2      	ldr	r2, [pc, #648]	@ (800b1b0 <dir_register+0x2d8>)
 800af26:	fba2 2303 	umull	r2, r3, r2, r3
 800af2a:	08db      	lsrs	r3, r3, #3
 800af2c:	3302      	adds	r3, #2
 800af2e:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800af30:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff f89a 	bl	800a06c <dir_alloc>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800af3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <dir_register+0x74>
 800af46:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af4a:	e165      	b.n	800b218 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af52:	3b01      	subs	r3, #1
 800af54:	015b      	lsls	r3, r3, #5
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d072      	beq.n	800b04a <dir_register+0x172>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	79db      	ldrb	r3, [r3, #7]
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d06c      	beq.n	800b04a <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800af76:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800af78:	8949      	ldrh	r1, [r1, #10]
 800af7a:	0249      	lsls	r1, r1, #9
 800af7c:	2000      	movs	r0, #0
 800af7e:	460c      	mov	r4, r1
 800af80:	4605      	mov	r5, r0
 800af82:	eb12 0804 	adds.w	r8, r2, r4
 800af86:	eb43 0905 	adc.w	r9, r3, r5
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	f7fe fcb6 	bl	8009904 <fill_first_frag>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800af9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <dir_register+0xd4>
 800afa6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afaa:	e135      	b.n	800b218 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afb2:	f04f 32ff 	mov.w	r2, #4294967295
 800afb6:	4619      	mov	r1, r3
 800afb8:	f7fe fcd3 	bl	8009962 <fill_last_frag>
 800afbc:	4603      	mov	r3, r0
 800afbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800afc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <dir_register+0xf8>
 800afca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afce:	e123      	b.n	800b218 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	f107 0308 	add.w	r3, r7, #8
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff fc93 	bl	800a904 <load_obj_dir>
 800afde:	4603      	mov	r3, r0
 800afe0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800afe4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <dir_register+0x11a>
 800afec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800aff0:	e112      	b.n	800b218 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800aff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b000:	4608      	mov	r0, r1
 800b002:	f7fd fe1f 	bl	8008c44 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b014:	4608      	mov	r0, r1
 800b016:	f7fd fe15 	bl	8008c44 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	79da      	ldrb	r2, [r3, #7]
 800b01e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	3321      	adds	r3, #33	@ 0x21
 800b024:	f042 0201 	orr.w	r2, r2, #1
 800b028:	b2d2      	uxtb	r2, r2
 800b02a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b02c:	f107 0308 	add.w	r3, r7, #8
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fc9d 	bl	800a970 <store_xdir>
 800b036:	4603      	mov	r3, r0
 800b038:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b03c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <dir_register+0x172>
 800b044:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b048:	e0e6      	b.n	800b218 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b04a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b04c:	691a      	ldr	r2, [r3, #16]
 800b04e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	4619      	mov	r1, r3
 800b054:	4610      	mov	r0, r2
 800b056:	f7ff fce6 	bl	800aa26 <create_xdir>
		return FR_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	e0dc      	b.n	800b218 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b064:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b068:	220c      	movs	r2, #12
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fd fe72 	bl	8008d54 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b070:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d033      	beq.n	800b0e4 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2240      	movs	r2, #64	@ 0x40
 800b080:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800b084:	2301      	movs	r3, #1
 800b086:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b088:	e016      	b.n	800b0b8 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800b090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b092:	68da      	ldr	r2, [r3, #12]
 800b094:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800b098:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b09a:	f7ff f9bf 	bl	800a41c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff fdef 	bl	800ac82 <dir_find>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800b0aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800b0b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b0b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0ba:	2b63      	cmp	r3, #99	@ 0x63
 800b0bc:	d9e5      	bls.n	800b08a <dir_register+0x1b2>
 800b0be:	e000      	b.n	800b0c2 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800b0c0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b0c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0c4:	2b64      	cmp	r3, #100	@ 0x64
 800b0c6:	d101      	bne.n	800b0cc <dir_register+0x1f4>
 800b0c8:	2307      	movs	r3, #7
 800b0ca:	e0a5      	b.n	800b218 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b0cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	d002      	beq.n	800b0da <dir_register+0x202>
 800b0d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b0d8:	e09e      	b.n	800b218 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b0da:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b0e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b0e8:	f003 0302 	and.w	r3, r3, #2
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d007      	beq.n	800b100 <dir_register+0x228>
 800b0f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0f2:	330c      	adds	r3, #12
 800b0f4:	4a2f      	ldr	r2, [pc, #188]	@ (800b1b4 <dir_register+0x2dc>)
 800b0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0fa:	089b      	lsrs	r3, r3, #2
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	e000      	b.n	800b102 <dir_register+0x22a>
 800b100:	2301      	movs	r3, #1
 800b102:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b104:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7fe ffb0 	bl	800a06c <dir_alloc>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b112:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b116:	2b00      	cmp	r3, #0
 800b118:	d14f      	bne.n	800b1ba <dir_register+0x2e2>
 800b11a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b11c:	3b01      	subs	r3, #1
 800b11e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b120:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b122:	2b00      	cmp	r3, #0
 800b124:	d049      	beq.n	800b1ba <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b12a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b12c:	015b      	lsls	r3, r3, #5
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7fe fe3f 	bl	8009db6 <dir_sdi>
 800b138:	4603      	mov	r3, r0
 800b13a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b13e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b142:	2b00      	cmp	r3, #0
 800b144:	d139      	bne.n	800b1ba <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3340      	adds	r3, #64	@ 0x40
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7ff fa0a 	bl	800a564 <sum_sfn>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b15a:	4619      	mov	r1, r3
 800b15c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b15e:	f7fe f827 	bl	80091b0 <move_window>
 800b162:	4603      	mov	r3, r0
 800b164:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800b168:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d123      	bne.n	800b1b8 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b172:	68d8      	ldr	r0, [r3, #12]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b178:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800b180:	f7ff f8e4 	bl	800a34c <put_lfn>
				fs->wflag = 1;
 800b184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b186:	2201      	movs	r2, #1
 800b188:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b18a:	2100      	movs	r1, #0
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fe fe98 	bl	8009ec2 <dir_next>
 800b192:	4603      	mov	r3, r0
 800b194:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800b198:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10c      	bne.n	800b1ba <dir_register+0x2e2>
 800b1a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b1a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1d4      	bne.n	800b156 <dir_register+0x27e>
 800b1ac:	e005      	b.n	800b1ba <dir_register+0x2e2>
 800b1ae:	bf00      	nop
 800b1b0:	88888889 	.word	0x88888889
 800b1b4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b1b8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b1ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d128      	bne.n	800b214 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b1ca:	f7fd fff1 	bl	80091b0 <move_window>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b1d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d11b      	bne.n	800b214 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e0:	2220      	movs	r2, #32
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fd fdd6 	bl	8008d96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3340      	adds	r3, #64	@ 0x40
 800b1f2:	220b      	movs	r2, #11
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	f7fd fdad 	bl	8008d54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b204:	330c      	adds	r3, #12
 800b206:	f002 0218 	and.w	r2, r2, #24
 800b20a:	b2d2      	uxtb	r2, r2
 800b20c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b20e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b210:	2201      	movs	r2, #1
 800b212:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b214:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3780      	adds	r7, #128	@ 0x80
 800b21c:	46bd      	mov	sp, r7
 800b21e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b222:	bf00      	nop

0800b224 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b224:	b5b0      	push	{r4, r5, r7, lr}
 800b226:	b088      	sub	sp, #32
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2200      	movs	r2, #0
 800b238:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 80e7 	beq.w	800b412 <get_fileinfo+0x1ee>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d106      	bne.n	800b25a <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff fa07 	bl	800a666 <get_xdir_info>
		return;
 800b258:	e0dc      	b.n	800b414 <get_fileinfo+0x1f0>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b262:	d040      	beq.n	800b2e6 <get_fileinfo+0xc2>
			i = j = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	61bb      	str	r3, [r7, #24]
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b26c:	e029      	b.n	800b2c2 <get_fileinfo+0x9e>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b26e:	89fb      	ldrh	r3, [r7, #14]
 800b270:	2100      	movs	r1, #0
 800b272:	4618      	mov	r0, r3
 800b274:	f002 f92e 	bl	800d4d4 <ff_convert>
 800b278:	4603      	mov	r3, r0
 800b27a:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b27c:	89fb      	ldrh	r3, [r7, #14]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d102      	bne.n	800b288 <get_fileinfo+0x64>
 800b282:	2300      	movs	r3, #0
 800b284:	61fb      	str	r3, [r7, #28]
 800b286:	e028      	b.n	800b2da <get_fileinfo+0xb6>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800b288:	89fb      	ldrh	r3, [r7, #14]
 800b28a:	2bff      	cmp	r3, #255	@ 0xff
 800b28c:	d90a      	bls.n	800b2a4 <get_fileinfo+0x80>
					fno->fname[i++] = (char)(w >> 8);
 800b28e:	89fb      	ldrh	r3, [r7, #14]
 800b290:	0a1b      	lsrs	r3, r3, #8
 800b292:	b299      	uxth	r1, r3
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	61fa      	str	r2, [r7, #28]
 800b29a:	b2c9      	uxtb	r1, r1
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	4413      	add	r3, r2
 800b2a0:	460a      	mov	r2, r1
 800b2a2:	769a      	strb	r2, [r3, #26]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	2bfe      	cmp	r3, #254	@ 0xfe
 800b2a8:	d902      	bls.n	800b2b0 <get_fileinfo+0x8c>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	e014      	b.n	800b2da <get_fileinfo+0xb6>
				fno->fname[i++] = (TCHAR)w;
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	1c5a      	adds	r2, r3, #1
 800b2b4:	61fa      	str	r2, [r7, #28]
 800b2b6:	89fa      	ldrh	r2, [r7, #14]
 800b2b8:	b2d1      	uxtb	r1, r2
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	4413      	add	r3, r2
 800b2be:	460a      	mov	r2, r1
 800b2c0:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	68da      	ldr	r2, [r3, #12]
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	1c59      	adds	r1, r3, #1
 800b2ca:	61b9      	str	r1, [r7, #24]
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	81fb      	strh	r3, [r7, #14]
 800b2d4:	89fb      	ldrh	r3, [r7, #14]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1c9      	bne.n	800b26e <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	4413      	add	r3, r2
 800b2e0:	331a      	adds	r3, #26
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	61bb      	str	r3, [r7, #24]
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	331a      	adds	r3, #26
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b2fa:	e04d      	b.n	800b398 <get_fileinfo+0x174>
		c = (TCHAR)dp->dir[i++];
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	1c59      	adds	r1, r3, #1
 800b304:	61f9      	str	r1, [r7, #28]
 800b306:	4413      	add	r3, r2
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
 800b30e:	2b20      	cmp	r3, #32
 800b310:	d041      	beq.n	800b396 <get_fileinfo+0x172>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b05      	cmp	r3, #5
 800b316:	d101      	bne.n	800b31c <get_fileinfo+0xf8>
 800b318:	23e5      	movs	r3, #229	@ 0xe5
 800b31a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	2b09      	cmp	r3, #9
 800b320:	d10f      	bne.n	800b342 <get_fileinfo+0x11e>
			if (!lfv) fno->fname[j] = '.';
 800b322:	89bb      	ldrh	r3, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d105      	bne.n	800b334 <get_fileinfo+0x110>
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	4413      	add	r3, r2
 800b32e:	331a      	adds	r3, #26
 800b330:	222e      	movs	r2, #46	@ 0x2e
 800b332:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	1c5a      	adds	r2, r3, #1
 800b338:	61ba      	str	r2, [r7, #24]
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	4413      	add	r3, r2
 800b33e:	222e      	movs	r2, #46	@ 0x2e
 800b340:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	4413      	add	r3, r2
 800b348:	330d      	adds	r3, #13
 800b34a:	7dfa      	ldrb	r2, [r7, #23]
 800b34c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b34e:	89bb      	ldrh	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d11c      	bne.n	800b38e <get_fileinfo+0x16a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b354:	7dfb      	ldrb	r3, [r7, #23]
 800b356:	2b40      	cmp	r3, #64	@ 0x40
 800b358:	d913      	bls.n	800b382 <get_fileinfo+0x15e>
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
 800b35c:	2b5a      	cmp	r3, #90	@ 0x5a
 800b35e:	d810      	bhi.n	800b382 <get_fileinfo+0x15e>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b364:	330c      	adds	r3, #12
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	461a      	mov	r2, r3
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	2b08      	cmp	r3, #8
 800b36e:	d901      	bls.n	800b374 <get_fileinfo+0x150>
 800b370:	2310      	movs	r3, #16
 800b372:	e000      	b.n	800b376 <get_fileinfo+0x152>
 800b374:	2308      	movs	r3, #8
 800b376:	4013      	ands	r3, r2
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <get_fileinfo+0x15e>
				c += 0x20;			/* To lower */
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	3320      	adds	r3, #32
 800b380:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	4413      	add	r3, r2
 800b388:	331a      	adds	r3, #26
 800b38a:	7dfa      	ldrb	r2, [r7, #23]
 800b38c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	3301      	adds	r3, #1
 800b392:	61bb      	str	r3, [r7, #24]
 800b394:	e000      	b.n	800b398 <get_fileinfo+0x174>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b396:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	2b0a      	cmp	r3, #10
 800b39c:	d9ae      	bls.n	800b2fc <get_fileinfo+0xd8>
	}
	if (!lfv) {
 800b39e:	89bb      	ldrh	r3, [r7, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10d      	bne.n	800b3c0 <get_fileinfo+0x19c>
		fno->fname[j] = 0;
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	331a      	adds	r3, #26
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b4:	330c      	adds	r3, #12
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <get_fileinfo+0x19c>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	330d      	adds	r3, #13
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3d0:	7ada      	ldrb	r2, [r3, #11]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3da:	331c      	adds	r3, #28
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7fd faec 	bl	80089ba <ld_dword>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	461c      	mov	r4, r3
 800b3e8:	4615      	mov	r5, r2
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3f4:	3316      	adds	r3, #22
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fd fadf 	bl	80089ba <ld_dword>
 800b3fc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	b29a      	uxth	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	815a      	strh	r2, [r3, #10]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	0c1b      	lsrs	r3, r3, #16
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	811a      	strh	r2, [r3, #8]
 800b410:	e000      	b.n	800b414 <get_fileinfo+0x1f0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b412:	bf00      	nop
}
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b41c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08a      	sub	sp, #40	@ 0x28
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	613b      	str	r3, [r7, #16]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	2300      	movs	r3, #0
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	61ba      	str	r2, [r7, #24]
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	4413      	add	r3, r2
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b44a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b44c:	2b1f      	cmp	r3, #31
 800b44e:	d96a      	bls.n	800b526 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b452:	2b2f      	cmp	r3, #47	@ 0x2f
 800b454:	d006      	beq.n	800b464 <create_name+0x48>
 800b456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b458:	2b5c      	cmp	r3, #92	@ 0x5c
 800b45a:	d110      	bne.n	800b47e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b45c:	e002      	b.n	800b464 <create_name+0x48>
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	3301      	adds	r3, #1
 800b462:	61bb      	str	r3, [r7, #24]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	4413      	add	r3, r2
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b46e:	d0f6      	beq.n	800b45e <create_name+0x42>
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	4413      	add	r3, r2
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b5c      	cmp	r3, #92	@ 0x5c
 800b47a:	d0f0      	beq.n	800b45e <create_name+0x42>
			break;
 800b47c:	e054      	b.n	800b528 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	2bfe      	cmp	r3, #254	@ 0xfe
 800b482:	d901      	bls.n	800b488 <create_name+0x6c>
 800b484:	2306      	movs	r3, #6
 800b486:	e1bf      	b.n	800b808 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b488:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800b48e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b80      	cmp	r3, #128	@ 0x80
 800b494:	d925      	bls.n	800b4e2 <create_name+0xc6>
 800b496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2bff      	cmp	r3, #255	@ 0xff
 800b49c:	d021      	beq.n	800b4e2 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	1c5a      	adds	r2, r3, #1
 800b4a2:	61ba      	str	r2, [r7, #24]
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800b4ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4b0:	021b      	lsls	r3, r3, #8
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	4413      	add	r3, r2
 800b4bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800b4be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4c2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b4c4:	d903      	bls.n	800b4ce <create_name+0xb2>
 800b4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4ca:	2b7e      	cmp	r3, #126	@ 0x7e
 800b4cc:	d909      	bls.n	800b4e2 <create_name+0xc6>
 800b4ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	da03      	bge.n	800b4de <create_name+0xc2>
 800b4d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4da:	2bff      	cmp	r3, #255	@ 0xff
 800b4dc:	d101      	bne.n	800b4e2 <create_name+0xc6>
 800b4de:	2306      	movs	r3, #6
 800b4e0:	e192      	b.n	800b808 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b4e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f001 fff4 	bl	800d4d4 <ff_convert>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b4f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <create_name+0xde>
 800b4f6:	2306      	movs	r3, #6
 800b4f8:	e186      	b.n	800b808 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b4fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4fe:	d809      	bhi.n	800b514 <create_name+0xf8>
 800b500:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b502:	4619      	mov	r1, r3
 800b504:	489a      	ldr	r0, [pc, #616]	@ (800b770 <create_name+0x354>)
 800b506:	f7fd fc88 	bl	8008e1a <chk_chr>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <create_name+0xf8>
 800b510:	2306      	movs	r3, #6
 800b512:	e179      	b.n	800b808 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	1c5a      	adds	r2, r3, #1
 800b518:	617a      	str	r2, [r7, #20]
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	4413      	add	r3, r2
 800b520:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b522:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b524:	e78a      	b.n	800b43c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b526:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	441a      	add	r2, r3
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b534:	2b1f      	cmp	r3, #31
 800b536:	d801      	bhi.n	800b53c <create_name+0x120>
 800b538:	2304      	movs	r3, #4
 800b53a:	e000      	b.n	800b53e <create_name+0x122>
 800b53c:	2300      	movs	r3, #0
 800b53e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b542:	e011      	b.n	800b568 <create_name+0x14c>
		w = lfn[di - 1];
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b54a:	3b01      	subs	r3, #1
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	4413      	add	r3, r2
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b556:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b558:	2b20      	cmp	r3, #32
 800b55a:	d002      	beq.n	800b562 <create_name+0x146>
 800b55c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b55e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b560:	d106      	bne.n	800b570 <create_name+0x154>
		di--;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	3b01      	subs	r3, #1
 800b566:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1ea      	bne.n	800b544 <create_name+0x128>
 800b56e:	e000      	b.n	800b572 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800b570:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	4413      	add	r3, r2
 800b57a:	2200      	movs	r2, #0
 800b57c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <create_name+0x16c>
 800b584:	2306      	movs	r3, #6
 800b586:	e13f      	b.n	800b808 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3340      	adds	r3, #64	@ 0x40
 800b58c:	220b      	movs	r2, #11
 800b58e:	2120      	movs	r1, #32
 800b590:	4618      	mov	r0, r3
 800b592:	f7fd fc00 	bl	8008d96 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b596:	2300      	movs	r3, #0
 800b598:	61bb      	str	r3, [r7, #24]
 800b59a:	e002      	b.n	800b5a2 <create_name+0x186>
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	61bb      	str	r3, [r7, #24]
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	d0f5      	beq.n	800b59c <create_name+0x180>
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5bc:	d0ee      	beq.n	800b59c <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d009      	beq.n	800b5d8 <create_name+0x1bc>
 800b5c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5c8:	f043 0303 	orr.w	r3, r3, #3
 800b5cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b5d0:	e002      	b.n	800b5d8 <create_name+0x1bc>
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	617b      	str	r3, [r7, #20]
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d009      	beq.n	800b5f2 <create_name+0x1d6>
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5f0:	d1ef      	bne.n	800b5d2 <create_name+0x1b6>

	i = b = 0; ni = 8;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	623b      	str	r3, [r7, #32]
 800b5fc:	2308      	movs	r3, #8
 800b5fe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	61ba      	str	r2, [r7, #24]
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	4413      	add	r3, r2
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b610:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b612:	2b00      	cmp	r3, #0
 800b614:	f000 80aa 	beq.w	800b76c <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b61a:	2b20      	cmp	r3, #32
 800b61c:	d006      	beq.n	800b62c <create_name+0x210>
 800b61e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b620:	2b2e      	cmp	r3, #46	@ 0x2e
 800b622:	d10a      	bne.n	800b63a <create_name+0x21e>
 800b624:	69ba      	ldr	r2, [r7, #24]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d006      	beq.n	800b63a <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800b62c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b630:	f043 0303 	orr.w	r3, r3, #3
 800b634:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b638:	e097      	b.n	800b76a <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b63a:	6a3a      	ldr	r2, [r7, #32]
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d203      	bcs.n	800b64a <create_name+0x22e>
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	429a      	cmp	r2, r3
 800b648:	d123      	bne.n	800b692 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	2b0b      	cmp	r3, #11
 800b64e:	d106      	bne.n	800b65e <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800b650:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b654:	f043 0303 	orr.w	r3, r3, #3
 800b658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b65c:	e08d      	b.n	800b77a <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	429a      	cmp	r2, r3
 800b664:	d005      	beq.n	800b672 <create_name+0x256>
 800b666:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b66a:	f043 0303 	orr.w	r3, r3, #3
 800b66e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 800b672:	69ba      	ldr	r2, [r7, #24]
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	429a      	cmp	r2, r3
 800b678:	d87e      	bhi.n	800b778 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	61bb      	str	r3, [r7, #24]
 800b67e:	2308      	movs	r3, #8
 800b680:	623b      	str	r3, [r7, #32]
 800b682:	230b      	movs	r3, #11
 800b684:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b686:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b690:	e06b      	b.n	800b76a <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b694:	2b7f      	cmp	r3, #127	@ 0x7f
 800b696:	d910      	bls.n	800b6ba <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800b698:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b69a:	4618      	mov	r0, r3
 800b69c:	f001 ff78 	bl	800d590 <ff_wtoupper>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f001 ff15 	bl	800d4d4 <ff_convert>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b6ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6b2:	f043 0302 	orr.w	r3, r3, #2
 800b6b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800b6ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6bc:	2bff      	cmp	r3, #255	@ 0xff
 800b6be:	d91a      	bls.n	800b6f6 <create_name+0x2da>
			if (i >= ni - 1) {
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	6a3a      	ldr	r2, [r7, #32]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d308      	bcc.n	800b6dc <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800b6ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6ce:	f043 0303 	orr.w	r3, r3, #3
 800b6d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	623b      	str	r3, [r7, #32]
 800b6da:	e046      	b.n	800b76a <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800b6dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6de:	0a1b      	lsrs	r3, r3, #8
 800b6e0:	b299      	uxth	r1, r3
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	623a      	str	r2, [r7, #32]
 800b6e8:	b2c9      	uxtb	r1, r1
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	460a      	mov	r2, r1
 800b6f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6f4:	e02f      	b.n	800b756 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b6f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <create_name+0x2f0>
 800b6fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6fe:	4619      	mov	r1, r3
 800b700:	481c      	ldr	r0, [pc, #112]	@ (800b774 <create_name+0x358>)
 800b702:	f7fd fb8a 	bl	8008e1a <chk_chr>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b70c:	235f      	movs	r3, #95	@ 0x5f
 800b70e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b714:	f043 0303 	orr.w	r3, r3, #3
 800b718:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b71c:	e01b      	b.n	800b756 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b71e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b720:	2b40      	cmp	r3, #64	@ 0x40
 800b722:	d909      	bls.n	800b738 <create_name+0x31c>
 800b724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b726:	2b5a      	cmp	r3, #90	@ 0x5a
 800b728:	d806      	bhi.n	800b738 <create_name+0x31c>
					b |= 2;
 800b72a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b72e:	f043 0302 	orr.w	r3, r3, #2
 800b732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b736:	e00e      	b.n	800b756 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b738:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b73a:	2b60      	cmp	r3, #96	@ 0x60
 800b73c:	d90b      	bls.n	800b756 <create_name+0x33a>
 800b73e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b740:	2b7a      	cmp	r3, #122	@ 0x7a
 800b742:	d808      	bhi.n	800b756 <create_name+0x33a>
						b |= 1; w -= 0x20;
 800b744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b748:	f043 0301 	orr.w	r3, r3, #1
 800b74c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b750:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b752:	3b20      	subs	r3, #32
 800b754:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b756:	6a3b      	ldr	r3, [r7, #32]
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	623a      	str	r2, [r7, #32]
 800b75c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b75e:	b2d1      	uxtb	r1, r2
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	4413      	add	r3, r2
 800b764:	460a      	mov	r2, r1
 800b766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b76a:	e749      	b.n	800b600 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800b76c:	bf00      	nop
 800b76e:	e004      	b.n	800b77a <create_name+0x35e>
 800b770:	08013390 	.word	0x08013390
 800b774:	0801339c 	.word	0x0801339c
			if (si > di) break;			/* No extension */
 800b778:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b780:	2be5      	cmp	r3, #229	@ 0xe5
 800b782:	d103      	bne.n	800b78c <create_name+0x370>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2205      	movs	r2, #5
 800b788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	2b08      	cmp	r3, #8
 800b790:	d104      	bne.n	800b79c <create_name+0x380>
 800b792:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b79c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7a0:	f003 030c 	and.w	r3, r3, #12
 800b7a4:	2b0c      	cmp	r3, #12
 800b7a6:	d005      	beq.n	800b7b4 <create_name+0x398>
 800b7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7ac:	f003 0303 	and.w	r3, r3, #3
 800b7b0:	2b03      	cmp	r3, #3
 800b7b2:	d105      	bne.n	800b7c0 <create_name+0x3a4>
 800b7b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7b8:	f043 0302 	orr.w	r3, r3, #2
 800b7bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b7c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7c4:	f003 0302 	and.w	r3, r3, #2
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d117      	bne.n	800b7fc <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7d0:	f003 0303 	and.w	r3, r3, #3
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d105      	bne.n	800b7e4 <create_name+0x3c8>
 800b7d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7dc:	f043 0310 	orr.w	r3, r3, #16
 800b7e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7e8:	f003 030c 	and.w	r3, r3, #12
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	d105      	bne.n	800b7fc <create_name+0x3e0>
 800b7f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7f4:	f043 0308 	orr.w	r3, r3, #8
 800b7f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b802:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800b806:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3728      	adds	r7, #40	@ 0x28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b824:	e002      	b.n	800b82c <follow_path+0x1c>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	3301      	adds	r3, #1
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b2f      	cmp	r3, #47	@ 0x2f
 800b832:	d0f8      	beq.n	800b826 <follow_path+0x16>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b5c      	cmp	r3, #92	@ 0x5c
 800b83a:	d0f4      	beq.n	800b826 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	2200      	movs	r2, #0
 800b840:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	2200      	movs	r2, #0
 800b846:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b1f      	cmp	r3, #31
 800b84e:	d80a      	bhi.n	800b866 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2280      	movs	r2, #128	@ 0x80
 800b854:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800b858:	2100      	movs	r1, #0
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7fe faab 	bl	8009db6 <dir_sdi>
 800b860:	4603      	mov	r3, r0
 800b862:	75fb      	strb	r3, [r7, #23]
 800b864:	e078      	b.n	800b958 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b866:	463b      	mov	r3, r7
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff fdd6 	bl	800b41c <create_name>
 800b870:	4603      	mov	r3, r0
 800b872:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d169      	bne.n	800b94e <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fa01 	bl	800ac82 <dir_find>
 800b880:	4603      	mov	r3, r0
 800b882:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b88a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00a      	beq.n	800b8a8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	2b04      	cmp	r3, #4
 800b896:	d15c      	bne.n	800b952 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b898:	7afb      	ldrb	r3, [r7, #11]
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d157      	bne.n	800b952 <follow_path+0x142>
 800b8a2:	2305      	movs	r3, #5
 800b8a4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b8a6:	e054      	b.n	800b952 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b8a8:	7afb      	ldrb	r3, [r7, #11]
 800b8aa:	f003 0304 	and.w	r3, r3, #4
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d151      	bne.n	800b956 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	799b      	ldrb	r3, [r3, #6]
 800b8b6:	f003 0310 	and.w	r3, r3, #16
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d102      	bne.n	800b8c4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800b8be:	2305      	movs	r3, #5
 800b8c0:	75fb      	strb	r3, [r7, #23]
 800b8c2:	e049      	b.n	800b958 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b04      	cmp	r3, #4
 800b8ca:	d130      	bne.n	800b92e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	79d2      	ldrb	r2, [r2, #7]
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	3334      	adds	r3, #52	@ 0x34
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fd f85e 	bl	80089ba <ld_dword>
 800b8fe:	4602      	mov	r2, r0
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	3321      	adds	r3, #33	@ 0x21
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	b2da      	uxtb	r2, r3
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	3338      	adds	r3, #56	@ 0x38
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fd f86f 	bl	8008a00 <ld_qword>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	6939      	ldr	r1, [r7, #16]
 800b928:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b92c:	e79b      	b.n	800b866 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b93c:	4413      	add	r3, r2
 800b93e:	4619      	mov	r1, r3
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f7fe fbef 	bl	800a124 <ld_clust>
 800b946:	4602      	mov	r2, r0
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b94c:	e78b      	b.n	800b866 <follow_path+0x56>
			if (res != FR_OK) break;
 800b94e:	bf00      	nop
 800b950:	e002      	b.n	800b958 <follow_path+0x148>
				break;
 800b952:	bf00      	nop
 800b954:	e000      	b.n	800b958 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b956:	bf00      	nop
			}
		}
	}

	return res;
 800b958:	7dfb      	ldrb	r3, [r7, #23]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b962:	b480      	push	{r7}
 800b964:	b087      	sub	sp, #28
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b96a:	f04f 33ff 	mov.w	r3, #4294967295
 800b96e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d031      	beq.n	800b9dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	617b      	str	r3, [r7, #20]
 800b97e:	e002      	b.n	800b986 <get_ldnumber+0x24>
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	3301      	adds	r3, #1
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	2b1f      	cmp	r3, #31
 800b98c:	d903      	bls.n	800b996 <get_ldnumber+0x34>
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b3a      	cmp	r3, #58	@ 0x3a
 800b994:	d1f4      	bne.n	800b980 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	2b3a      	cmp	r3, #58	@ 0x3a
 800b99c:	d11c      	bne.n	800b9d8 <get_ldnumber+0x76>
			tp = *path;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	60fa      	str	r2, [r7, #12]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	3b30      	subs	r3, #48	@ 0x30
 800b9ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	2b09      	cmp	r3, #9
 800b9b4:	d80e      	bhi.n	800b9d4 <get_ldnumber+0x72>
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d10a      	bne.n	800b9d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d107      	bne.n	800b9d4 <get_ldnumber+0x72>
					vol = (int)i;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	617b      	str	r3, [r7, #20]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	e002      	b.n	800b9de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b9d8:	2300      	movs	r3, #0
 800b9da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b9dc:	693b      	ldr	r3, [r7, #16]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	371c      	adds	r7, #28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
	...

0800b9ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	70da      	strb	r2, [r3, #3]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ba02:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7fd fbd2 	bl	80091b0 <move_window>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <check_fs+0x2a>
 800ba12:	2304      	movs	r3, #4
 800ba14:	e044      	b.n	800baa0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3338      	adds	r3, #56	@ 0x38
 800ba1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fc ffb2 	bl	8008988 <ld_word>
 800ba24:	4603      	mov	r3, r0
 800ba26:	461a      	mov	r2, r3
 800ba28:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d001      	beq.n	800ba34 <check_fs+0x48>
 800ba30:	2303      	movs	r3, #3
 800ba32:	e035      	b.n	800baa0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba3a:	2be9      	cmp	r3, #233	@ 0xe9
 800ba3c:	d009      	beq.n	800ba52 <check_fs+0x66>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba44:	2beb      	cmp	r3, #235	@ 0xeb
 800ba46:	d11e      	bne.n	800ba86 <check_fs+0x9a>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ba4e:	2b90      	cmp	r3, #144	@ 0x90
 800ba50:	d119      	bne.n	800ba86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	3338      	adds	r3, #56	@ 0x38
 800ba56:	3336      	adds	r3, #54	@ 0x36
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fc ffae 	bl	80089ba <ld_dword>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ba64:	4a10      	ldr	r2, [pc, #64]	@ (800baa8 <check_fs+0xbc>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d101      	bne.n	800ba6e <check_fs+0x82>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e018      	b.n	800baa0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3338      	adds	r3, #56	@ 0x38
 800ba72:	3352      	adds	r3, #82	@ 0x52
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fc ffa0 	bl	80089ba <ld_dword>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4a0b      	ldr	r2, [pc, #44]	@ (800baac <check_fs+0xc0>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d101      	bne.n	800ba86 <check_fs+0x9a>
 800ba82:	2300      	movs	r3, #0
 800ba84:	e00c      	b.n	800baa0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	3338      	adds	r3, #56	@ 0x38
 800ba8a:	220b      	movs	r2, #11
 800ba8c:	4908      	ldr	r1, [pc, #32]	@ (800bab0 <check_fs+0xc4>)
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fd f99c 	bl	8008dcc <mem_cmp>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d101      	bne.n	800ba9e <check_fs+0xb2>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e000      	b.n	800baa0 <check_fs+0xb4>
#endif
	return 2;
 800ba9e:	2302      	movs	r3, #2
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	00544146 	.word	0x00544146
 800baac:	33544146 	.word	0x33544146
 800bab0:	080133a4 	.word	0x080133a4

0800bab4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bab8:	b09c      	sub	sp, #112	@ 0x70
 800baba:	af00      	add	r7, sp, #0
 800babc:	61f8      	str	r0, [r7, #28]
 800babe:	61b9      	str	r1, [r7, #24]
 800bac0:	4613      	mov	r3, r2
 800bac2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800baca:	69f8      	ldr	r0, [r7, #28]
 800bacc:	f7ff ff49 	bl	800b962 <get_ldnumber>
 800bad0:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800bad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	da01      	bge.n	800badc <find_volume+0x28>
 800bad8:	230b      	movs	r3, #11
 800bada:	e331      	b.n	800c140 <find_volume+0x68c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800badc:	4a99      	ldr	r2, [pc, #612]	@ (800bd44 <find_volume+0x290>)
 800bade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bae4:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <find_volume+0x3c>
 800baec:	230c      	movs	r3, #12
 800baee:	e327      	b.n	800c140 <find_volume+0x68c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800baf4:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	f023 0301 	bic.w	r3, r3, #1
 800bafc:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bafe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d01a      	beq.n	800bb3c <find_volume+0x88>
		stat = disk_status(fs->drv);
 800bb06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb08:	785b      	ldrb	r3, [r3, #1]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fc fe9e 	bl	800884c <disk_status>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bb16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10c      	bne.n	800bb3c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d007      	beq.n	800bb38 <find_volume+0x84>
 800bb28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800bb34:	230a      	movs	r3, #10
 800bb36:	e303      	b.n	800c140 <find_volume+0x68c>
			}
			return FR_OK;				/* The file system object is valid */
 800bb38:	2300      	movs	r3, #0
 800bb3a:	e301      	b.n	800c140 <find_volume+0x68c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bb3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bb42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb48:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bb4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb4c:	785b      	ldrb	r3, [r3, #1]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fc fe96 	bl	8008880 <disk_initialize>
 800bb54:	4603      	mov	r3, r0
 800bb56:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bb5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bb66:	2303      	movs	r3, #3
 800bb68:	e2ea      	b.n	800c140 <find_volume+0x68c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <find_volume+0xcc>
 800bb70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800bb7c:	230a      	movs	r3, #10
 800bb7e:	e2df      	b.n	800c140 <find_volume+0x68c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bb80:	2300      	movs	r3, #0
 800bb82:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bb84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bb86:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bb88:	f7ff ff30 	bl	800b9ec <check_fs>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bb92:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d14d      	bne.n	800bc36 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb9e:	e020      	b.n	800bbe2 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bba2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bba8:	011b      	lsls	r3, r3, #4
 800bbaa:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bbae:	4413      	add	r3, r2
 800bbb0:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bbb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d006      	beq.n	800bbca <find_volume+0x116>
 800bbbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbbe:	3308      	adds	r3, #8
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fc fefa 	bl	80089ba <ld_dword>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	e000      	b.n	800bbcc <find_volume+0x118>
 800bbca:	2200      	movs	r2, #0
 800bbcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	3360      	adds	r3, #96	@ 0x60
 800bbd2:	f107 0110 	add.w	r1, r7, #16
 800bbd6:	440b      	add	r3, r1
 800bbd8:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bbdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbde:	3301      	adds	r3, #1
 800bbe0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d9db      	bls.n	800bba0 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bbe8:	2300      	movs	r3, #0
 800bbea:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800bbec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d002      	beq.n	800bbf8 <find_volume+0x144>
 800bbf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bbf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	3360      	adds	r3, #96	@ 0x60
 800bbfe:	f107 0210 	add.w	r2, r7, #16
 800bc02:	4413      	add	r3, r2
 800bc04:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bc08:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bc0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d005      	beq.n	800bc1c <find_volume+0x168>
 800bc10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc12:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bc14:	f7ff feea 	bl	800b9ec <check_fs>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	e000      	b.n	800bc1e <find_volume+0x16a>
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bc22:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d905      	bls.n	800bc36 <find_volume+0x182>
 800bc2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d9e0      	bls.n	800bbf8 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bc36:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bc3a:	2b04      	cmp	r3, #4
 800bc3c:	d101      	bne.n	800bc42 <find_volume+0x18e>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e27e      	b.n	800c140 <find_volume+0x68c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bc42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d901      	bls.n	800bc4e <find_volume+0x19a>
 800bc4a:	230d      	movs	r3, #13
 800bc4c:	e278      	b.n	800c140 <find_volume+0x68c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800bc4e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	f040 80fa 	bne.w	800be4c <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800bc58:	230b      	movs	r3, #11
 800bc5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc5c:	e002      	b.n	800bc64 <find_volume+0x1b0>
 800bc5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc60:	3301      	adds	r3, #1
 800bc62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc66:	2b3f      	cmp	r3, #63	@ 0x3f
 800bc68:	d806      	bhi.n	800bc78 <find_volume+0x1c4>
 800bc6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc6e:	4413      	add	r3, r2
 800bc70:	3338      	adds	r3, #56	@ 0x38
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0f2      	beq.n	800bc5e <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800bc78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc7a:	2b3f      	cmp	r3, #63	@ 0x3f
 800bc7c:	d801      	bhi.n	800bc82 <find_volume+0x1ce>
 800bc7e:	230d      	movs	r3, #13
 800bc80:	e25e      	b.n	800c140 <find_volume+0x68c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800bc82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc84:	3338      	adds	r3, #56	@ 0x38
 800bc86:	3368      	adds	r3, #104	@ 0x68
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fc fe7d 	bl	8008988 <ld_word>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc94:	d001      	beq.n	800bc9a <find_volume+0x1e6>
 800bc96:	230d      	movs	r3, #13
 800bc98:	e252      	b.n	800c140 <find_volume+0x68c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800bc9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc9c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bca0:	2b09      	cmp	r3, #9
 800bca2:	d001      	beq.n	800bca8 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800bca4:	230d      	movs	r3, #13
 800bca6:	e24b      	b.n	800c140 <find_volume+0x68c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800bca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcaa:	3338      	adds	r3, #56	@ 0x38
 800bcac:	3348      	adds	r3, #72	@ 0x48
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fc fea6 	bl	8008a00 <ld_qword>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bcba:	2000      	movs	r0, #0
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	68b9      	ldr	r1, [r7, #8]
 800bcc2:	1851      	adds	r1, r2, r1
 800bcc4:	6039      	str	r1, [r7, #0]
 800bcc6:	68f9      	ldr	r1, [r7, #12]
 800bcc8:	eb43 0101 	adc.w	r1, r3, r1
 800bccc:	6079      	str	r1, [r7, #4]
 800bcce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800bcd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d301      	bcc.n	800bce2 <find_volume+0x22e>
 800bcde:	230d      	movs	r3, #13
 800bce0:	e22e      	b.n	800c140 <find_volume+0x68c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800bce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bce4:	3338      	adds	r3, #56	@ 0x38
 800bce6:	3354      	adds	r3, #84	@ 0x54
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fc fe66 	bl	80089ba <ld_dword>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcf2:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800bcf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcf6:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800bcfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcfc:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800bcfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd00:	789b      	ldrb	r3, [r3, #2]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d001      	beq.n	800bd0a <find_volume+0x256>
 800bd06:	230d      	movs	r3, #13
 800bd08:	e21a      	b.n	800c140 <find_volume+0x68c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800bd0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd10:	461a      	mov	r2, r3
 800bd12:	2301      	movs	r3, #1
 800bd14:	4093      	lsls	r3, r2
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd1a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800bd1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd1e:	895b      	ldrh	r3, [r3, #10]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <find_volume+0x274>
 800bd24:	230d      	movs	r3, #13
 800bd26:	e20b      	b.n	800c140 <find_volume+0x68c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800bd28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd2a:	3338      	adds	r3, #56	@ 0x38
 800bd2c:	335c      	adds	r3, #92	@ 0x5c
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fc fe43 	bl	80089ba <ld_dword>
 800bd34:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800bd36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd38:	4a03      	ldr	r2, [pc, #12]	@ (800bd48 <find_volume+0x294>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d906      	bls.n	800bd4c <find_volume+0x298>
 800bd3e:	230d      	movs	r3, #13
 800bd40:	e1fe      	b.n	800c140 <find_volume+0x68c>
 800bd42:	bf00      	nop
 800bd44:	20002c08 	.word	0x20002c08
 800bd48:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800bd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd4e:	1c9a      	adds	r2, r3, #2
 800bd50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd52:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800bd54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd56:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bd58:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800bd5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd5c:	3338      	adds	r3, #56	@ 0x38
 800bd5e:	3358      	adds	r3, #88	@ 0x58
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fc fe2a 	bl	80089ba <ld_dword>
 800bd66:	4602      	mov	r2, r0
 800bd68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd6a:	441a      	add	r2, r3
 800bd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd6e:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800bd70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd72:	3338      	adds	r3, #56	@ 0x38
 800bd74:	3350      	adds	r3, #80	@ 0x50
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fc fe1f 	bl	80089ba <ld_dword>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd80:	441a      	add	r2, r3
 800bd82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd84:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800bd86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	469a      	mov	sl, r3
 800bd8e:	4693      	mov	fp, r2
 800bd90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd92:	895b      	ldrh	r3, [r3, #10]
 800bd94:	461a      	mov	r2, r3
 800bd96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd98:	fb02 f303 	mul.w	r3, r2, r3
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	4698      	mov	r8, r3
 800bda0:	4691      	mov	r9, r2
 800bda2:	eb1a 0408 	adds.w	r4, sl, r8
 800bda6:	eb4b 0509 	adc.w	r5, fp, r9
 800bdaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bdae:	42a2      	cmp	r2, r4
 800bdb0:	41ab      	sbcs	r3, r5
 800bdb2:	d201      	bcs.n	800bdb8 <find_volume+0x304>
 800bdb4:	230d      	movs	r3, #13
 800bdb6:	e1c3      	b.n	800c140 <find_volume+0x68c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800bdb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdba:	3338      	adds	r3, #56	@ 0x38
 800bdbc:	3360      	adds	r3, #96	@ 0x60
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fc fdfb 	bl	80089ba <ld_dword>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdc8:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800bdca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdce:	4619      	mov	r1, r3
 800bdd0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bdd2:	f7fd fa89 	bl	80092e8 <clust2sect>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bddc:	f7fd f9e8 	bl	80091b0 <move_window>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <find_volume+0x336>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e1aa      	b.n	800c140 <find_volume+0x68c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bdea:	2300      	movs	r3, #0
 800bdec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bdee:	e015      	b.n	800be1c <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800bdf0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bdf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3338      	adds	r3, #56	@ 0x38
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	2b81      	cmp	r3, #129	@ 0x81
 800bdfc:	d10b      	bne.n	800be16 <find_volume+0x362>
 800bdfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be00:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800be04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be06:	3314      	adds	r3, #20
 800be08:	4413      	add	r3, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fc fdd5 	bl	80089ba <ld_dword>
 800be10:	4603      	mov	r3, r0
 800be12:	2b02      	cmp	r3, #2
 800be14:	d007      	beq.n	800be26 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800be16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be18:	3320      	adds	r3, #32
 800be1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be22:	d3e5      	bcc.n	800bdf0 <find_volume+0x33c>
 800be24:	e000      	b.n	800be28 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800be26:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800be28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be2e:	d101      	bne.n	800be34 <find_volume+0x380>
 800be30:	230d      	movs	r3, #13
 800be32:	e185      	b.n	800c140 <find_volume+0x68c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800be34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be36:	f04f 32ff 	mov.w	r2, #4294967295
 800be3a:	619a      	str	r2, [r3, #24]
 800be3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be3e:	699a      	ldr	r2, [r3, #24]
 800be40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be42:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800be44:	2304      	movs	r3, #4
 800be46:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800be4a:	e167      	b.n	800c11c <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800be4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be4e:	3338      	adds	r3, #56	@ 0x38
 800be50:	330b      	adds	r3, #11
 800be52:	4618      	mov	r0, r3
 800be54:	f7fc fd98 	bl	8008988 <ld_word>
 800be58:	4603      	mov	r3, r0
 800be5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be5e:	d001      	beq.n	800be64 <find_volume+0x3b0>
 800be60:	230d      	movs	r3, #13
 800be62:	e16d      	b.n	800c140 <find_volume+0x68c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800be64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be66:	3338      	adds	r3, #56	@ 0x38
 800be68:	3316      	adds	r3, #22
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fc fd8c 	bl	8008988 <ld_word>
 800be70:	4603      	mov	r3, r0
 800be72:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800be74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be76:	2b00      	cmp	r3, #0
 800be78:	d106      	bne.n	800be88 <find_volume+0x3d4>
 800be7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be7c:	3338      	adds	r3, #56	@ 0x38
 800be7e:	3324      	adds	r3, #36	@ 0x24
 800be80:	4618      	mov	r0, r3
 800be82:	f7fc fd9a 	bl	80089ba <ld_dword>
 800be86:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800be88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800be8c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800be8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be90:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800be94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800be98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be9a:	789b      	ldrb	r3, [r3, #2]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d005      	beq.n	800beac <find_volume+0x3f8>
 800bea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea2:	789b      	ldrb	r3, [r3, #2]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d001      	beq.n	800beac <find_volume+0x3f8>
 800bea8:	230d      	movs	r3, #13
 800beaa:	e149      	b.n	800c140 <find_volume+0x68c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800beac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beae:	789b      	ldrb	r3, [r3, #2]
 800beb0:	461a      	mov	r2, r3
 800beb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beb4:	fb02 f303 	mul.w	r3, r2, r3
 800beb8:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800beba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bebc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bec0:	461a      	mov	r2, r3
 800bec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bec4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bec8:	895b      	ldrh	r3, [r3, #10]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d008      	beq.n	800bee0 <find_volume+0x42c>
 800bece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bed0:	895b      	ldrh	r3, [r3, #10]
 800bed2:	461a      	mov	r2, r3
 800bed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bed6:	895b      	ldrh	r3, [r3, #10]
 800bed8:	3b01      	subs	r3, #1
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <find_volume+0x430>
 800bee0:	230d      	movs	r3, #13
 800bee2:	e12d      	b.n	800c140 <find_volume+0x68c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bee6:	3338      	adds	r3, #56	@ 0x38
 800bee8:	3311      	adds	r3, #17
 800beea:	4618      	mov	r0, r3
 800beec:	f7fc fd4c 	bl	8008988 <ld_word>
 800bef0:	4603      	mov	r3, r0
 800bef2:	461a      	mov	r2, r3
 800bef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800befa:	891b      	ldrh	r3, [r3, #8]
 800befc:	f003 030f 	and.w	r3, r3, #15
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <find_volume+0x456>
 800bf06:	230d      	movs	r3, #13
 800bf08:	e11a      	b.n	800c140 <find_volume+0x68c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bf0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf0c:	3338      	adds	r3, #56	@ 0x38
 800bf0e:	3313      	adds	r3, #19
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fc fd39 	bl	8008988 <ld_word>
 800bf16:	4603      	mov	r3, r0
 800bf18:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bf1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d106      	bne.n	800bf2e <find_volume+0x47a>
 800bf20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf22:	3338      	adds	r3, #56	@ 0x38
 800bf24:	3320      	adds	r3, #32
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fc fd47 	bl	80089ba <ld_dword>
 800bf2c:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bf2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf30:	3338      	adds	r3, #56	@ 0x38
 800bf32:	330e      	adds	r3, #14
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fc fd27 	bl	8008988 <ld_word>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bf40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <find_volume+0x498>
 800bf48:	230d      	movs	r3, #13
 800bf4a:	e0f9      	b.n	800c140 <find_volume+0x68c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bf4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800bf50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf52:	4413      	add	r3, r2
 800bf54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf56:	8912      	ldrh	r2, [r2, #8]
 800bf58:	0912      	lsrs	r2, r2, #4
 800bf5a:	b292      	uxth	r2, r2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bf60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d201      	bcs.n	800bf6c <find_volume+0x4b8>
 800bf68:	230d      	movs	r3, #13
 800bf6a:	e0e9      	b.n	800c140 <find_volume+0x68c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bf6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf74:	8952      	ldrh	r2, [r2, #10]
 800bf76:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bf7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d101      	bne.n	800bf86 <find_volume+0x4d2>
 800bf82:	230d      	movs	r3, #13
 800bf84:	e0dc      	b.n	800c140 <find_volume+0x68c>
		fmt = FS_FAT32;
 800bf86:	2303      	movs	r3, #3
 800bf88:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bf8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf8e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d802      	bhi.n	800bf9c <find_volume+0x4e8>
 800bf96:	2302      	movs	r3, #2
 800bf98:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bf9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf9e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d802      	bhi.n	800bfac <find_volume+0x4f8>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bfac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfae:	1c9a      	adds	r2, r3, #2
 800bfb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfb2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bfb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfb6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bfb8:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bfba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800bfbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfc0:	441a      	add	r2, r3
 800bfc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfc4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bfc6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bfc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfca:	441a      	add	r2, r3
 800bfcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfce:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800bfd0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d11e      	bne.n	800c016 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bfd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfda:	3338      	adds	r3, #56	@ 0x38
 800bfdc:	332a      	adds	r3, #42	@ 0x2a
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fc fcd2 	bl	8008988 <ld_word>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <find_volume+0x53a>
 800bfea:	230d      	movs	r3, #13
 800bfec:	e0a8      	b.n	800c140 <find_volume+0x68c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bfee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bff0:	891b      	ldrh	r3, [r3, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <find_volume+0x546>
 800bff6:	230d      	movs	r3, #13
 800bff8:	e0a2      	b.n	800c140 <find_volume+0x68c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bffc:	3338      	adds	r3, #56	@ 0x38
 800bffe:	332c      	adds	r3, #44	@ 0x2c
 800c000:	4618      	mov	r0, r3
 800c002:	f7fc fcda 	bl	80089ba <ld_dword>
 800c006:	4602      	mov	r2, r0
 800c008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c00a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c00c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c00e:	69db      	ldr	r3, [r3, #28]
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c014:	e01f      	b.n	800c056 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c018:	891b      	ldrh	r3, [r3, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <find_volume+0x56e>
 800c01e:	230d      	movs	r3, #13
 800c020:	e08e      	b.n	800c140 <find_volume+0x68c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c028:	441a      	add	r2, r3
 800c02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c02c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c02e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c032:	2b02      	cmp	r3, #2
 800c034:	d103      	bne.n	800c03e <find_volume+0x58a>
 800c036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	005b      	lsls	r3, r3, #1
 800c03c:	e00a      	b.n	800c054 <find_volume+0x5a0>
 800c03e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c040:	69da      	ldr	r2, [r3, #28]
 800c042:	4613      	mov	r3, r2
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	4413      	add	r3, r2
 800c048:	085a      	lsrs	r2, r3, #1
 800c04a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c04c:	69db      	ldr	r3, [r3, #28]
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c054:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c058:	6a1a      	ldr	r2, [r3, #32]
 800c05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c05c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c060:	0a5b      	lsrs	r3, r3, #9
 800c062:	429a      	cmp	r2, r3
 800c064:	d201      	bcs.n	800c06a <find_volume+0x5b6>
 800c066:	230d      	movs	r3, #13
 800c068:	e06a      	b.n	800c140 <find_volume+0x68c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c06c:	f04f 32ff 	mov.w	r2, #4294967295
 800c070:	619a      	str	r2, [r3, #24]
 800c072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c074:	699a      	ldr	r2, [r3, #24]
 800c076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c078:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c07c:	2280      	movs	r2, #128	@ 0x80
 800c07e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c080:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c084:	2b03      	cmp	r3, #3
 800c086:	d149      	bne.n	800c11c <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c08a:	3338      	adds	r3, #56	@ 0x38
 800c08c:	3330      	adds	r3, #48	@ 0x30
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fc fc7a 	bl	8008988 <ld_word>
 800c094:	4603      	mov	r3, r0
 800c096:	2b01      	cmp	r3, #1
 800c098:	d140      	bne.n	800c11c <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c09a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c09c:	3301      	adds	r3, #1
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c0a2:	f7fd f885 	bl	80091b0 <move_window>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d137      	bne.n	800c11c <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800c0ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c0b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b4:	3338      	adds	r3, #56	@ 0x38
 800c0b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fc fc64 	bl	8008988 <ld_word>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d127      	bne.n	800c11c <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c0cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ce:	3338      	adds	r3, #56	@ 0x38
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fc fc72 	bl	80089ba <ld_dword>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	4a1c      	ldr	r2, [pc, #112]	@ (800c14c <find_volume+0x698>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d11e      	bne.n	800c11c <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0e0:	3338      	adds	r3, #56	@ 0x38
 800c0e2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fc fc67 	bl	80089ba <ld_dword>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	4a18      	ldr	r2, [pc, #96]	@ (800c150 <find_volume+0x69c>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d113      	bne.n	800c11c <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c0f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0f6:	3338      	adds	r3, #56	@ 0x38
 800c0f8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fc fc5c 	bl	80089ba <ld_dword>
 800c102:	4602      	mov	r2, r0
 800c104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c106:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c10a:	3338      	adds	r3, #56	@ 0x38
 800c10c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c110:	4618      	mov	r0, r3
 800c112:	f7fc fc52 	bl	80089ba <ld_dword>
 800c116:	4602      	mov	r2, r0
 800c118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c11a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c11c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c11e:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800c122:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c124:	4b0b      	ldr	r3, [pc, #44]	@ (800c154 <find_volume+0x6a0>)
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	3301      	adds	r3, #1
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	4b09      	ldr	r3, [pc, #36]	@ (800c154 <find_volume+0x6a0>)
 800c12e:	801a      	strh	r2, [r3, #0]
 800c130:	4b08      	ldr	r3, [pc, #32]	@ (800c154 <find_volume+0x6a0>)
 800c132:	881a      	ldrh	r2, [r3, #0]
 800c134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c136:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c138:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c13a:	f7fc ffd1 	bl	80090e0 <clear_lock>
#endif
	return FR_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3770      	adds	r7, #112	@ 0x70
 800c144:	46bd      	mov	sp, r7
 800c146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c14a:	bf00      	nop
 800c14c:	41615252 	.word	0x41615252
 800c150:	61417272 	.word	0x61417272
 800c154:	20002c0c 	.word	0x20002c0c

0800c158 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c162:	2309      	movs	r3, #9
 800c164:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01c      	beq.n	800c1a6 <validate+0x4e>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d018      	beq.n	800c1a6 <validate+0x4e>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d013      	beq.n	800c1a6 <validate+0x4e>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	889a      	ldrh	r2, [r3, #4]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	88db      	ldrh	r3, [r3, #6]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d10c      	bne.n	800c1a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	785b      	ldrb	r3, [r3, #1]
 800c192:	4618      	mov	r0, r3
 800c194:	f7fc fb5a 	bl	800884c <disk_status>
 800c198:	4603      	mov	r3, r0
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <validate+0x4e>
			res = FR_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <validate+0x5a>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	e000      	b.n	800c1b4 <validate+0x5c>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	6013      	str	r3, [r2, #0]
	return res;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c1d6:	f107 0310 	add.w	r3, r7, #16
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7ff fbc1 	bl	800b962 <get_ldnumber>
 800c1e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	da01      	bge.n	800c1ec <f_mount+0x28>
 800c1e8:	230b      	movs	r3, #11
 800c1ea:	e02b      	b.n	800c244 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c1ec:	4a17      	ldr	r2, [pc, #92]	@ (800c24c <f_mount+0x88>)
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d005      	beq.n	800c208 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c1fc:	69b8      	ldr	r0, [r7, #24]
 800c1fe:	f7fc ff6f 	bl	80090e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	2200      	movs	r2, #0
 800c206:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	490d      	ldr	r1, [pc, #52]	@ (800c24c <f_mount+0x88>)
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <f_mount+0x66>
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d001      	beq.n	800c22e <f_mount+0x6a>
 800c22a:	2300      	movs	r3, #0
 800c22c:	e00a      	b.n	800c244 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c22e:	f107 010c 	add.w	r1, r7, #12
 800c232:	f107 0308 	add.w	r3, r7, #8
 800c236:	2200      	movs	r2, #0
 800c238:	4618      	mov	r0, r3
 800c23a:	f7ff fc3b 	bl	800bab4 <find_volume>
 800c23e:	4603      	mov	r3, r0
 800c240:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c242:	7dfb      	ldrb	r3, [r7, #23]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3720      	adds	r7, #32
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	20002c08 	.word	0x20002c08

0800c250 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c254:	b0a8      	sub	sp, #160	@ 0xa0
 800c256:	af00      	add	r7, sp, #0
 800c258:	61f8      	str	r0, [r7, #28]
 800c25a:	61b9      	str	r1, [r7, #24]
 800c25c:	4613      	mov	r3, r2
 800c25e:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <f_open+0x1a>
 800c266:	2309      	movs	r3, #9
 800c268:	e2c7      	b.n	800c7fa <f_open+0x5aa>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c270:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800c272:	7dfa      	ldrb	r2, [r7, #23]
 800c274:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c278:	f107 0318 	add.w	r3, r7, #24
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff fc19 	bl	800bab4 <find_volume>
 800c282:	4603      	mov	r3, r0
 800c284:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800c288:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f040 82ab 	bne.w	800c7e8 <f_open+0x598>
		dj.obj.fs = fs;
 800c292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c294:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
 800c296:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800c29a:	f001 fa03 	bl	800d6a4 <ff_memalloc>
 800c29e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800c2a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <f_open+0x5e>
 800c2aa:	2311      	movs	r3, #17
 800c2ac:	e2a5      	b.n	800c7fa <f_open+0x5aa>
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c2b4:	60da      	str	r2, [r3, #12]
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c2bc:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800c2c0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff faa0 	bl	800b810 <follow_path>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c2d6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d118      	bne.n	800c310 <f_open+0xc0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c2de:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800c2e2:	b25b      	sxtb	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	da03      	bge.n	800c2f0 <f_open+0xa0>
				res = FR_INVALID_NAME;
 800c2e8:	2306      	movs	r3, #6
 800c2ea:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c2ee:	e00f      	b.n	800c310 <f_open+0xc0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	bf8c      	ite	hi
 800c2f6:	2301      	movhi	r3, #1
 800c2f8:	2300      	movls	r3, #0
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c302:	4611      	mov	r1, r2
 800c304:	4618      	mov	r0, r3
 800c306:	f7fc fda3 	bl	8008e50 <chk_lock>
 800c30a:	4603      	mov	r3, r0
 800c30c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c310:	7dfb      	ldrb	r3, [r7, #23]
 800c312:	f003 031c 	and.w	r3, r3, #28
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 8115 	beq.w	800c546 <f_open+0x2f6>
			if (res != FR_OK) {					/* No file, create new */
 800c31c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c320:	2b00      	cmp	r3, #0
 800c322:	d017      	beq.n	800c354 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c324:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c328:	2b04      	cmp	r3, #4
 800c32a:	d10e      	bne.n	800c34a <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c32c:	f7fc fdec 	bl	8008f08 <enq_lock>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d006      	beq.n	800c344 <f_open+0xf4>
 800c336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe fdcc 	bl	800aed8 <dir_register>
 800c340:	4603      	mov	r3, r0
 800c342:	e000      	b.n	800c346 <f_open+0xf6>
 800c344:	2312      	movs	r3, #18
 800c346:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
 800c34c:	f043 0308 	orr.w	r3, r3, #8
 800c350:	75fb      	strb	r3, [r7, #23]
 800c352:	e011      	b.n	800c378 <f_open+0x128>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c354:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c358:	f003 0311 	and.w	r3, r3, #17
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <f_open+0x118>
					res = FR_DENIED;
 800c360:	2307      	movs	r3, #7
 800c362:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c366:	e007      	b.n	800c378 <f_open+0x128>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	f003 0304 	and.w	r3, r3, #4
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <f_open+0x128>
 800c372:	2308      	movs	r3, #8
 800c374:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c378:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f040 80fe 	bne.w	800c57e <f_open+0x32e>
 800c382:	7dfb      	ldrb	r3, [r7, #23]
 800c384:	f003 0308 	and.w	r3, r3, #8
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 80f8 	beq.w	800c57e <f_open+0x32e>
				dw = GET_FATTIME();
 800c38e:	f7fc f985 	bl	800869c <get_fattime>
 800c392:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	2b04      	cmp	r3, #4
 800c39c:	f040 8084 	bne.w	800c4a8 <f_open+0x258>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c3a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	3334      	adds	r3, #52	@ 0x34
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7fc fb04 	bl	80089ba <ld_dword>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	3338      	adds	r3, #56	@ 0x38
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fc fb1e 	bl	8008a00 <ld_qword>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	69f9      	ldr	r1, [r7, #28]
 800c3ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	3321      	adds	r3, #33	@ 0x21
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fc fbfb 	bl	8008bec <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	3314      	adds	r3, #20
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	330c      	adds	r3, #12
 800c406:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fc fbee 	bl	8008bec <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	3315      	adds	r3, #21
 800c416:	2200      	movs	r2, #0
 800c418:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41c:	691b      	ldr	r3, [r3, #16]
 800c41e:	3304      	adds	r3, #4
 800c420:	2220      	movs	r2, #32
 800c422:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	3334      	adds	r3, #52	@ 0x34
 800c42a:	2100      	movs	r1, #0
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fc fbdd 	bl	8008bec <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c43a:	f04f 0200 	mov.w	r2, #0
 800c43e:	f04f 0300 	mov.w	r3, #0
 800c442:	4608      	mov	r0, r1
 800c444:	f7fc fbfe 	bl	8008c44 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c450:	f04f 0200 	mov.w	r2, #0
 800c454:	f04f 0300 	mov.w	r3, #0
 800c458:	4608      	mov	r0, r1
 800c45a:	f7fc fbf3 	bl	8008c44 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	3321      	adds	r3, #33	@ 0x21
 800c464:	2201      	movs	r2, #1
 800c466:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800c468:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe fa7f 	bl	800a970 <store_xdir>
 800c472:	4603      	mov	r3, r0
 800c474:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c478:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d17e      	bne.n	800c57e <f_open+0x32e>
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d07a      	beq.n	800c57e <f_open+0x32e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c488:	69f8      	ldr	r0, [r7, #28]
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	2200      	movs	r2, #0
 800c490:	4619      	mov	r1, r3
 800c492:	f7fd fa97 	bl	80099c4 <remove_chain>
 800c496:	4603      	mov	r3, r0
 800c498:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	689a      	ldr	r2, [r3, #8]
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a2:	3a01      	subs	r2, #1
 800c4a4:	615a      	str	r2, [r3, #20]
 800c4a6:	e06a      	b.n	800c57e <f_open+0x32e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c4a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4aa:	330e      	adds	r3, #14
 800c4ac:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fc fb9b 	bl	8008bec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c4b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4b8:	3316      	adds	r3, #22
 800c4ba:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fc fb94 	bl	8008bec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c4c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4c6:	330b      	adds	r3, #11
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fd fe26 	bl	800a124 <ld_clust>
 800c4d8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4de:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fd fe3d 	bl	800a162 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c4e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4ea:	331c      	adds	r3, #28
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fc fb7c 	bl	8008bec <st_dword>
					fs->wflag = 1;
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c4fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d03d      	beq.n	800c57e <f_open+0x32e>
						dw = fs->winsect;
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						res = remove_chain(&dj.obj, cl, 0);
 800c50a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c50e:	2200      	movs	r2, #0
 800c510:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c514:	4618      	mov	r0, r3
 800c516:	f7fd fa55 	bl	80099c4 <remove_chain>
 800c51a:	4603      	mov	r3, r0
 800c51c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 800c520:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c524:	2b00      	cmp	r3, #0
 800c526:	d12a      	bne.n	800c57e <f_open+0x32e>
							res = move_window(fs, dw);
 800c528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fc fe3e 	bl	80091b0 <move_window>
 800c534:	4603      	mov	r3, r0
 800c536:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c540:	3a01      	subs	r2, #1
 800c542:	615a      	str	r2, [r3, #20]
 800c544:	e01b      	b.n	800c57e <f_open+0x32e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c546:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d117      	bne.n	800c57e <f_open+0x32e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c54e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c552:	f003 0310 	and.w	r3, r3, #16
 800c556:	2b00      	cmp	r3, #0
 800c558:	d003      	beq.n	800c562 <f_open+0x312>
					res = FR_NO_FILE;
 800c55a:	2304      	movs	r3, #4
 800c55c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c560:	e00d      	b.n	800c57e <f_open+0x32e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	f003 0302 	and.w	r3, r3, #2
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d008      	beq.n	800c57e <f_open+0x32e>
 800c56c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <f_open+0x32e>
						res = FR_DENIED;
 800c578:	2307      	movs	r3, #7
 800c57a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c57e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c582:	2b00      	cmp	r3, #0
 800c584:	d126      	bne.n	800c5d4 <f_open+0x384>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	f003 0308 	and.w	r3, r3, #8
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <f_open+0x348>
				mode |= FA_MODIFIED;
 800c590:	7dfb      	ldrb	r3, [r7, #23]
 800c592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c596:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800c5a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	bf8c      	ite	hi
 800c5ac:	2301      	movhi	r3, #1
 800c5ae:	2300      	movls	r3, #0
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fc fcc6 	bl	8008f4c <inc_lock>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d102      	bne.n	800c5d4 <f_open+0x384>
 800c5ce:	2302      	movs	r3, #2
 800c5d0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c5d4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f040 8101 	bne.w	800c7e0 <f_open+0x590>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	d12d      	bne.n	800c642 <f_open+0x3f2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c5e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c5ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c5f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c5fa:	431a      	orrs	r2, r3
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c600:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	3334      	adds	r3, #52	@ 0x34
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fc f9d4 	bl	80089ba <ld_dword>
 800c612:	4602      	mov	r2, r0
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	3338      	adds	r3, #56	@ 0x38
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fc f9ee 	bl	8008a00 <ld_qword>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	69f9      	ldr	r1, [r7, #28]
 800c62a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	3321      	adds	r3, #33	@ 0x21
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 0302 	and.w	r3, r3, #2
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	71da      	strb	r2, [r3, #7]
 800c640:	e016      	b.n	800c670 <f_open+0x420>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c646:	4611      	mov	r1, r2
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fd fd6b 	bl	800a124 <ld_clust>
 800c64e:	4602      	mov	r2, r0
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c654:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c656:	331c      	adds	r3, #28
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fc f9ae 	bl	80089ba <ld_dword>
 800c65e:	4603      	mov	r3, r0
 800c660:	2200      	movs	r2, #0
 800c662:	60bb      	str	r3, [r7, #8]
 800c664:	60fa      	str	r2, [r7, #12]
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c66c:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	2200      	movs	r2, #0
 800c674:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67e:	88da      	ldrh	r2, [r3, #6]
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	7dfa      	ldrb	r2, [r7, #23]
 800c688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2200      	movs	r2, #0
 800c698:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c69a:	69f9      	ldr	r1, [r7, #28]
 800c69c:	f04f 0200 	mov.w	r2, #0
 800c6a0:	f04f 0300 	mov.w	r3, #0
 800c6a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	3354      	adds	r3, #84	@ 0x54
 800c6ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fc fb6f 	bl	8008d96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ba:	f003 0320 	and.w	r3, r3, #32
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 808e 	beq.w	800c7e0 <f_open+0x590>
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	f000 8088 	beq.w	800c7e0 <f_open+0x590>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c6d6:	69f9      	ldr	r1, [r7, #28]
 800c6d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6de:	895b      	ldrh	r3, [r3, #10]
 800c6e0:	025b      	lsls	r3, r3, #9
 800c6e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c6f4:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800c6f8:	e027      	b.n	800c74a <f_open+0x4fa>
					clst = get_fat(&fp->obj, clst);
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c700:	4618      	mov	r0, r3
 800c702:	f7fc fe11 	bl	8009328 <get_fat>
 800c706:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800c70a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d802      	bhi.n	800c718 <f_open+0x4c8>
 800c712:	2302      	movs	r3, #2
 800c714:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c720:	d102      	bne.n	800c728 <f_open+0x4d8>
 800c722:	2301      	movs	r3, #1
 800c724:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c728:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c72c:	2200      	movs	r2, #0
 800c72e:	469a      	mov	sl, r3
 800c730:	4693      	mov	fp, r2
 800c732:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c736:	ebb2 010a 	subs.w	r1, r2, sl
 800c73a:	6039      	str	r1, [r7, #0]
 800c73c:	eb63 030b 	sbc.w	r3, r3, fp
 800c740:	607b      	str	r3, [r7, #4]
 800c742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c746:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800c74a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10a      	bne.n	800c768 <f_open+0x518>
 800c752:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c756:	2200      	movs	r2, #0
 800c758:	4698      	mov	r8, r3
 800c75a:	4691      	mov	r9, r2
 800c75c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c760:	4590      	cmp	r8, r2
 800c762:	eb79 0303 	sbcs.w	r3, r9, r3
 800c766:	d3c8      	bcc.n	800c6fa <f_open+0x4aa>
				}
				fp->clust = clst;
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c76e:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c770:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c774:	2b00      	cmp	r3, #0
 800c776:	d133      	bne.n	800c7e0 <f_open+0x590>
 800c778:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c77c:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c780:	2500      	movs	r5, #0
 800c782:	ea54 0305 	orrs.w	r3, r4, r5
 800c786:	d02b      	beq.n	800c7e0 <f_open+0x590>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fc fdaa 	bl	80092e8 <clust2sect>
 800c794:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d103      	bne.n	800c7a4 <f_open+0x554>
						res = FR_INT_ERR;
 800c79c:	2302      	movs	r3, #2
 800c79e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c7a2:	e01d      	b.n	800c7e0 <f_open+0x590>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7a4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800c7a8:	f04f 0200 	mov.w	r2, #0
 800c7ac:	f04f 0300 	mov.w	r3, #0
 800c7b0:	0a42      	lsrs	r2, r0, #9
 800c7b2:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c7b6:	0a4b      	lsrs	r3, r1, #9
 800c7b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7ba:	441a      	add	r2, r3
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c2:	7858      	ldrb	r0, [r3, #1]
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	f7fc f87c 	bl	80088cc <disk_read>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <f_open+0x590>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800c7e0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c7e4:	f000 ff6a 	bl	800d6bc <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c7e8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <f_open+0x5a6>
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c7f6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	37a0      	adds	r7, #160	@ 0xa0
 800c7fe:	46bd      	mov	sp, r7
 800c800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c804 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	b095      	sub	sp, #84	@ 0x54
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	61f8      	str	r0, [r7, #28]
 800c80e:	61b9      	str	r1, [r7, #24]
 800c810:	617a      	str	r2, [r7, #20]
 800c812:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c824:	4611      	mov	r1, r2
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff fc96 	bl	800c158 <validate>
 800c82c:	4603      	mov	r3, r0
 800c82e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c832:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c836:	2b00      	cmp	r3, #0
 800c838:	d108      	bne.n	800c84c <f_read+0x48>
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c840:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c844:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d002      	beq.n	800c852 <f_read+0x4e>
 800c84c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c850:	e14b      	b.n	800caea <f_read+0x2e6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d101      	bne.n	800c864 <f_read+0x60>
 800c860:	2307      	movs	r3, #7
 800c862:	e142      	b.n	800caea <f_read+0x2e6>
	remain = fp->obj.objsize - fp->fptr;
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c870:	1a86      	subs	r6, r0, r2
 800c872:	603e      	str	r6, [r7, #0]
 800c874:	eb61 0303 	sbc.w	r3, r1, r3
 800c878:	607b      	str	r3, [r7, #4]
 800c87a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c87e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	2200      	movs	r2, #0
 800c886:	469a      	mov	sl, r3
 800c888:	4693      	mov	fp, r2
 800c88a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c88e:	4552      	cmp	r2, sl
 800c890:	eb73 030b 	sbcs.w	r3, r3, fp
 800c894:	f080 8124 	bcs.w	800cae0 <f_read+0x2dc>
 800c898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89a:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800c89c:	e120      	b.n	800cae0 <f_read+0x2dc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c8a4:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c8a8:	2500      	movs	r5, #0
 800c8aa:	ea54 0305 	orrs.w	r3, r4, r5
 800c8ae:	f040 80d9 	bne.w	800ca64 <f_read+0x260>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c8b8:	f04f 0200 	mov.w	r2, #0
 800c8bc:	f04f 0300 	mov.w	r3, #0
 800c8c0:	0a42      	lsrs	r2, r0, #9
 800c8c2:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c8c6:	0a4b      	lsrs	r3, r1, #9
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ca:	895b      	ldrh	r3, [r3, #10]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800c8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d132      	bne.n	800c93e <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	d103      	bne.n	800c8ea <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8e8:	e013      	b.n	800c912 <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d007      	beq.n	800c902 <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c8f8:	69f8      	ldr	r0, [r7, #28]
 800c8fa:	f7fd fa18 	bl	8009d2e <clmt_clust>
 800c8fe:	64b8      	str	r0, [r7, #72]	@ 0x48
 800c900:	e007      	b.n	800c912 <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c902:	69fa      	ldr	r2, [r7, #28]
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c908:	4619      	mov	r1, r3
 800c90a:	4610      	mov	r0, r2
 800c90c:	f7fc fd0c 	bl	8009328 <get_fat>
 800c910:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c914:	2b01      	cmp	r3, #1
 800c916:	d805      	bhi.n	800c924 <f_read+0x120>
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	2202      	movs	r2, #2
 800c91c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c920:	2302      	movs	r3, #2
 800c922:	e0e2      	b.n	800caea <f_read+0x2e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c92a:	d105      	bne.n	800c938 <f_read+0x134>
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c934:	2301      	movs	r3, #1
 800c936:	e0d8      	b.n	800caea <f_read+0x2e6>
				fp->clust = clst;				/* Update current cluster */
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c93c:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c93e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c944:	4619      	mov	r1, r3
 800c946:	4610      	mov	r0, r2
 800c948:	f7fc fcce 	bl	80092e8 <clust2sect>
 800c94c:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c950:	2b00      	cmp	r3, #0
 800c952:	d105      	bne.n	800c960 <f_read+0x15c>
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	2202      	movs	r2, #2
 800c958:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c95c:	2302      	movs	r3, #2
 800c95e:	e0c4      	b.n	800caea <f_read+0x2e6>
			sect += csect;
 800c960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c964:	4413      	add	r3, r2
 800c966:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	0a5b      	lsrs	r3, r3, #9
 800c96c:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c96e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c970:	2b00      	cmp	r3, #0
 800c972:	d03b      	beq.n	800c9ec <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c978:	4413      	add	r3, r2
 800c97a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c97c:	8952      	ldrh	r2, [r2, #10]
 800c97e:	4293      	cmp	r3, r2
 800c980:	d905      	bls.n	800c98e <f_read+0x18a>
					cc = fs->csize - csect;
 800c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c984:	895b      	ldrh	r3, [r3, #10]
 800c986:	461a      	mov	r2, r3
 800c988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	7858      	ldrb	r0, [r3, #1]
 800c992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c998:	f7fb ff98 	bl	80088cc <disk_read>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d005      	beq.n	800c9ae <f_read+0x1aa>
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e09d      	b.n	800caea <f_read+0x2e6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9b4:	b25b      	sxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	da14      	bge.n	800c9e4 <f_read+0x1e0>
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d90d      	bls.n	800c9e4 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	025b      	lsls	r3, r3, #9
 800c9d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9d4:	18d0      	adds	r0, r2, r3
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	3354      	adds	r3, #84	@ 0x54
 800c9da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9de:	4619      	mov	r1, r3
 800c9e0:	f7fc f9b8 	bl	8008d54 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c9e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9e6:	025b      	lsls	r3, r3, #9
 800c9e8:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800c9ea:	e059      	b.n	800caa0 <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d033      	beq.n	800ca5e <f_read+0x25a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9fc:	b25b      	sxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	da1b      	bge.n	800ca3a <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca04:	7858      	ldrb	r0, [r3, #1]
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca10:	2301      	movs	r3, #1
 800ca12:	f7fb ff7b 	bl	800890c <disk_write>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d005      	beq.n	800ca28 <f_read+0x224>
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ca24:	2301      	movs	r3, #1
 800ca26:	e060      	b.n	800caea <f_read+0x2e6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3c:	7858      	ldrb	r0, [r3, #1]
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ca44:	2301      	movs	r3, #1
 800ca46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca48:	f7fb ff40 	bl	80088cc <disk_read>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d005      	beq.n	800ca5e <f_read+0x25a>
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e045      	b.n	800caea <f_read+0x2e6>
			}
#endif
			fp->sect = sect;
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca70:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ca74:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ca76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d901      	bls.n	800ca82 <f_read+0x27e>
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ca8e:	4613      	mov	r3, r2
 800ca90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca94:	440b      	add	r3, r1
 800ca96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ca9c:	f7fc f95a 	bl	8008d54 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800caa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800caa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caa4:	4413      	add	r3, r2
 800caa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800caae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cab0:	2000      	movs	r0, #0
 800cab2:	4688      	mov	r8, r1
 800cab4:	4681      	mov	r9, r0
 800cab6:	eb12 0108 	adds.w	r1, r2, r8
 800caba:	60b9      	str	r1, [r7, #8]
 800cabc:	eb43 0309 	adc.w	r3, r3, r9
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cac8:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cad2:	441a      	add	r2, r3
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f47f aedb 	bne.w	800c89e <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3754      	adds	r7, #84	@ 0x54
 800caee:	46bd      	mov	sp, r7
 800caf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800caf4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800caf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf8:	b08d      	sub	sp, #52	@ 0x34
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	60b9      	str	r1, [r7, #8]
 800cb00:	607a      	str	r2, [r7, #4]
 800cb02:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f107 0210 	add.w	r2, r7, #16
 800cb14:	4611      	mov	r1, r2
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff fb1e 	bl	800c158 <validate>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d108      	bne.n	800cb3c <f_write+0x48>
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cb30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cb34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <f_write+0x4e>
 800cb3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb40:	e187      	b.n	800ce52 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb48:	f003 0302 	and.w	r3, r3, #2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d101      	bne.n	800cb54 <f_write+0x60>
 800cb50:	2307      	movs	r3, #7
 800cb52:	e17e      	b.n	800ce52 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b04      	cmp	r3, #4
 800cb5a:	f000 816a 	beq.w	800ce32 <f_write+0x33e>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	18d1      	adds	r1, r2, r3
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cb6e:	4613      	mov	r3, r2
 800cb70:	4299      	cmp	r1, r3
 800cb72:	f080 815e 	bcs.w	800ce32 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	43db      	mvns	r3, r3
 800cb80:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cb82:	e156      	b.n	800ce32 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cb8a:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800cb8e:	2500      	movs	r5, #0
 800cb90:	ea54 0305 	orrs.w	r3, r4, r5
 800cb94:	f040 80fb 	bne.w	800cd8e <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cb9e:	f04f 0200 	mov.w	r2, #0
 800cba2:	f04f 0300 	mov.w	r3, #0
 800cba6:	0a42      	lsrs	r2, r0, #9
 800cba8:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800cbac:	0a4b      	lsrs	r3, r1, #9
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	895b      	ldrh	r3, [r3, #10]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d146      	bne.n	800cc4c <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	d10c      	bne.n	800cbe2 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d11a      	bne.n	800cc0a <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fc ffa7 	bl	8009b2c <create_chain>
 800cbde:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cbe0:	e013      	b.n	800cc0a <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d007      	beq.n	800cbfa <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7fd f89c 	bl	8009d2e <clmt_clust>
 800cbf6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cbf8:	e007      	b.n	800cc0a <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc00:	4619      	mov	r1, r3
 800cc02:	4610      	mov	r0, r2
 800cc04:	f7fc ff92 	bl	8009b2c <create_chain>
 800cc08:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 8115 	beq.w	800ce3c <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d105      	bne.n	800cc24 <f_write+0x130>
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2202      	movs	r2, #2
 800cc1c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc20:	2302      	movs	r3, #2
 800cc22:	e116      	b.n	800ce52 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2a:	d105      	bne.n	800cc38 <f_write+0x144>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc34:	2301      	movs	r3, #1
 800cc36:	e10c      	b.n	800ce52 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc3c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d102      	bne.n	800cc4c <f_write+0x158>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc4a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc52:	b25b      	sxtb	r3, r3
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	da1b      	bge.n	800cc90 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	7858      	ldrb	r0, [r3, #1]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc66:	2301      	movs	r3, #1
 800cc68:	f7fb fe50 	bl	800890c <disk_write>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d005      	beq.n	800cc7e <f_write+0x18a>
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2201      	movs	r2, #1
 800cc76:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e0e9      	b.n	800ce52 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc96:	4619      	mov	r1, r3
 800cc98:	4610      	mov	r0, r2
 800cc9a:	f7fc fb25 	bl	80092e8 <clust2sect>
 800cc9e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d105      	bne.n	800ccb2 <f_write+0x1be>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2202      	movs	r2, #2
 800ccaa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ccae:	2302      	movs	r3, #2
 800ccb0:	e0cf      	b.n	800ce52 <f_write+0x35e>
			sect += csect;
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	0a5b      	lsrs	r3, r3, #9
 800ccbe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d03f      	beq.n	800cd46 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ccc6:	69ba      	ldr	r2, [r7, #24]
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	4413      	add	r3, r2
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	8952      	ldrh	r2, [r2, #10]
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d905      	bls.n	800cce0 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	895b      	ldrh	r3, [r3, #10]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	7858      	ldrb	r0, [r3, #1]
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	69f9      	ldr	r1, [r7, #28]
 800ccea:	f7fb fe0f 	bl	800890c <disk_write>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d005      	beq.n	800cd00 <f_write+0x20c>
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e0a8      	b.n	800ce52 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	6a3a      	ldr	r2, [r7, #32]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d917      	bls.n	800cd3e <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	025b      	lsls	r3, r3, #9
 800cd1e:	69fa      	ldr	r2, [r7, #28]
 800cd20:	4413      	add	r3, r2
 800cd22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd26:	4619      	mov	r1, r3
 800cd28:	f7fc f814 	bl	8008d54 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cd3e:	6a3b      	ldr	r3, [r7, #32]
 800cd40:	025b      	lsls	r3, r3, #9
 800cd42:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cd44:	e04a      	b.n	800cddc <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d01b      	beq.n	800cd88 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd5c:	4290      	cmp	r0, r2
 800cd5e:	eb71 0303 	sbcs.w	r3, r1, r3
 800cd62:	d211      	bcs.n	800cd88 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	7858      	ldrb	r0, [r3, #1]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cd6e:	2301      	movs	r3, #1
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	f7fb fdab 	bl	80088cc <disk_read>
 800cd76:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d005      	beq.n	800cd88 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cd84:	2301      	movs	r3, #1
 800cd86:	e064      	b.n	800ce52 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd94:	4613      	mov	r3, r2
 800cd96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd9a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cd9e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cda0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d901      	bls.n	800cdac <f_write+0x2b8>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cdb8:	4613      	mov	r3, r2
 800cdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdbe:	440b      	add	r3, r1
 800cdc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdc2:	69f9      	ldr	r1, [r7, #28]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7fb ffc5 	bl	8008d54 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cdd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cddc:	69fa      	ldr	r2, [r7, #28]
 800cdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde0:	4413      	add	r3, r2
 800cde2:	61fb      	str	r3, [r7, #28]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cdea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdec:	2000      	movs	r0, #0
 800cdee:	4688      	mov	r8, r1
 800cdf0:	4681      	mov	r9, r0
 800cdf2:	eb12 0a08 	adds.w	sl, r2, r8
 800cdf6:	eb43 0b09 	adc.w	fp, r3, r9
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce06:	68f9      	ldr	r1, [r7, #12]
 800ce08:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800ce0c:	4282      	cmp	r2, r0
 800ce0e:	eb73 0601 	sbcs.w	r6, r3, r1
 800ce12:	d201      	bcs.n	800ce18 <f_write+0x324>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	68f9      	ldr	r1, [r7, #12]
 800ce1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce24:	441a      	add	r2, r3
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	601a      	str	r2, [r3, #0]
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f47f aea5 	bne.w	800cb84 <f_write+0x90>
 800ce3a:	e000      	b.n	800ce3e <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce3c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3734      	adds	r7, #52	@ 0x34
 800ce56:	46bd      	mov	sp, r7
 800ce58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce5c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b09c      	sub	sp, #112	@ 0x70
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff f973 	bl	800c158 <validate>
 800ce72:	4603      	mov	r3, r0
 800ce74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800ce78:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f040 8119 	bne.w	800d0b4 <f_sync+0x258>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 8111 	beq.w	800d0b4 <f_sync+0x258>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce98:	b25b      	sxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	da17      	bge.n	800cece <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ce9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cea0:	7858      	ldrb	r0, [r3, #1]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceac:	2301      	movs	r3, #1
 800ceae:	f7fb fd2d 	bl	800890c <disk_write>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <f_sync+0x60>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e0fd      	b.n	800d0b8 <f_sync+0x25c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cece:	f7fb fbe5 	bl	800869c <get_fattime>
 800ced2:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ced4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	f040 80a0 	bne.w	800d01e <f_sync+0x1c2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fc fd0f 	bl	8009904 <fill_first_frag>
 800cee6:	4603      	mov	r3, r0
 800cee8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800ceec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10a      	bne.n	800cf0a <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cefa:	f04f 32ff 	mov.w	r2, #4294967295
 800cefe:	4619      	mov	r1, r3
 800cf00:	f7fc fd2f 	bl	8009962 <fill_last_frag>
 800cf04:	4603      	mov	r3, r0
 800cf06:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800cf0a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f040 80d0 	bne.w	800d0b4 <f_sync+0x258>
					INIT_NAMBUF(fs);
 800cf14:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800cf18:	f000 fbc4 	bl	800d6a4 <ff_memalloc>
 800cf1c:	6638      	str	r0, [r7, #96]	@ 0x60
 800cf1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <f_sync+0xcc>
 800cf24:	2311      	movs	r3, #17
 800cf26:	e0c7      	b.n	800d0b8 <f_sync+0x25c>
 800cf28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cf2c:	60da      	str	r2, [r3, #12]
 800cf2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cf32:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800cf36:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	f107 0308 	add.w	r3, r7, #8
 800cf3e:	4611      	mov	r1, r2
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fd fcdf 	bl	800a904 <load_obj_dir>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800cf4c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d160      	bne.n	800d016 <f_sync+0x1ba>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800cf54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	781a      	ldrb	r2, [r3, #0]
 800cf5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	3304      	adds	r3, #4
 800cf62:	f042 0220 	orr.w	r2, r2, #32
 800cf66:	b2d2      	uxtb	r2, r2
 800cf68:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	79da      	ldrb	r2, [r3, #7]
 800cf6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	3321      	adds	r3, #33	@ 0x21
 800cf74:	f042 0201 	orr.w	r2, r2, #1
 800cf78:	b2d2      	uxtb	r2, r2
 800cf7a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800cf7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	4610      	mov	r0, r2
 800cf8c:	f7fb fe2e 	bl	8008bec <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800cf90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cf9e:	4608      	mov	r0, r1
 800cfa0:	f7fb fe50 	bl	8008c44 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800cfa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cfb2:	4608      	mov	r0, r1
 800cfb4:	f7fb fe46 	bl	8008c44 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800cfb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	330c      	adds	r3, #12
 800cfbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fb fe13 	bl	8008bec <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800cfc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	3315      	adds	r3, #21
 800cfcc:	2200      	movs	r2, #0
 800cfce:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800cfd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	3310      	adds	r3, #16
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fb fe07 	bl	8008bec <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800cfde:	f107 0308 	add.w	r3, r7, #8
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fd fcc4 	bl	800a970 <store_xdir>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800cfee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10f      	bne.n	800d016 <f_sync+0x1ba>
							res = sync_fs(fs);
 800cff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fc f907 	bl	800920c <sync_fs>
 800cffe:	4603      	mov	r3, r0
 800d000:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d00a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800d016:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d018:	f000 fb50 	bl	800d6bc <ff_memfree>
 800d01c:	e04a      	b.n	800d0b4 <f_sync+0x258>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d01e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d024:	4619      	mov	r1, r3
 800d026:	4610      	mov	r0, r2
 800d028:	f7fc f8c2 	bl	80091b0 <move_window>
 800d02c:	4603      	mov	r3, r0
 800d02e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800d032:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d036:	2b00      	cmp	r3, #0
 800d038:	d13c      	bne.n	800d0b4 <f_sync+0x258>
					dir = fp->dir_ptr;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d03e:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d042:	330b      	adds	r3, #11
 800d044:	781a      	ldrb	r2, [r3, #0]
 800d046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d048:	330b      	adds	r3, #11
 800d04a:	f042 0220 	orr.w	r2, r2, #32
 800d04e:	b2d2      	uxtb	r2, r2
 800d050:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6818      	ldr	r0, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	461a      	mov	r2, r3
 800d05c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d05e:	f7fd f880 	bl	800a162 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d064:	f103 001c 	add.w	r0, r3, #28
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d06e:	4613      	mov	r3, r2
 800d070:	4619      	mov	r1, r3
 800d072:	f7fb fdbb 	bl	8008bec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d078:	3316      	adds	r3, #22
 800d07a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fb fdb5 	bl	8008bec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d084:	3312      	adds	r3, #18
 800d086:	2100      	movs	r1, #0
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fb fd94 	bl	8008bb6 <st_word>
					fs->wflag = 1;
 800d08e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d090:	2201      	movs	r2, #1
 800d092:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d096:	4618      	mov	r0, r3
 800d098:	f7fc f8b8 	bl	800920c <sync_fs>
 800d09c:	4603      	mov	r3, r0
 800d09e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d0a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0ac:	b2da      	uxtb	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d0b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3770      	adds	r7, #112	@ 0x70
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7ff fec7 	bl	800ce5c <f_sync>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d118      	bne.n	800d10a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f107 0208 	add.w	r2, r7, #8
 800d0de:	4611      	mov	r1, r2
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7ff f839 	bl	800c158 <validate>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10c      	bne.n	800d10a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fb ffb7 	bl	8009068 <dec_lock>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d0fe:	7bfb      	ldrb	r3, [r7, #15]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d102      	bne.n	800d10a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3710      	adds	r7, #16
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d101      	bne.n	800d128 <f_opendir+0x14>
 800d124:	2309      	movs	r3, #9
 800d126:	e0af      	b.n	800d288 <f_opendir+0x174>

	/* Get logical drive */
	obj = &dp->obj;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d12c:	f107 0108 	add.w	r1, r7, #8
 800d130:	463b      	mov	r3, r7
 800d132:	2200      	movs	r2, #0
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe fcbd 	bl	800bab4 <find_volume>
 800d13a:	4603      	mov	r3, r0
 800d13c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d13e:	7dfb      	ldrb	r3, [r7, #23]
 800d140:	2b00      	cmp	r3, #0
 800d142:	f040 809a 	bne.w	800d27a <f_opendir+0x166>
		obj->fs = fs;
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d14c:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d150:	f000 faa8 	bl	800d6a4 <ff_memalloc>
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d101      	bne.n	800d160 <f_opendir+0x4c>
 800d15c:	2311      	movs	r3, #17
 800d15e:	e093      	b.n	800d288 <f_opendir+0x174>
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	60da      	str	r2, [r3, #12]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d16e:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7fe fb4b 	bl	800b810 <follow_path>
 800d17a:	4603      	mov	r3, r0
 800d17c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d172      	bne.n	800d26a <f_opendir+0x156>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d18a:	b25b      	sxtb	r3, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	db47      	blt.n	800d220 <f_opendir+0x10c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	799b      	ldrb	r3, [r3, #6]
 800d194:	f003 0310 	and.w	r3, r3, #16
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d03f      	beq.n	800d21c <f_opendir+0x108>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b04      	cmp	r3, #4
 800d1a2:	d130      	bne.n	800d206 <f_opendir+0xf2>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	689a      	ldr	r2, [r3, #8]
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d1b8:	693a      	ldr	r2, [r7, #16]
 800d1ba:	79d2      	ldrb	r2, [r2, #7]
 800d1bc:	431a      	orrs	r2, r3
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	3334      	adds	r3, #52	@ 0x34
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fb fbf2 	bl	80089ba <ld_dword>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	3338      	adds	r3, #56	@ 0x38
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fb fc0c 	bl	8008a00 <ld_qword>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	6939      	ldr	r1, [r7, #16]
 800d1ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	3321      	adds	r3, #33	@ 0x21
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	f003 0302 	and.w	r3, r3, #2
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	71da      	strb	r2, [r3, #7]
 800d204:	e00c      	b.n	800d220 <f_opendir+0x10c>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	f7fc ff88 	bl	800a124 <ld_clust>
 800d214:	4602      	mov	r2, r0
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	609a      	str	r2, [r3, #8]
 800d21a:	e001      	b.n	800d220 <f_opendir+0x10c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d21c:	2305      	movs	r3, #5
 800d21e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d220:	7dfb      	ldrb	r3, [r7, #23]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d121      	bne.n	800d26a <f_opendir+0x156>
				obj->id = fs->id;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	88da      	ldrh	r2, [r3, #6]
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d22e:	2100      	movs	r1, #0
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7fc fdc0 	bl	8009db6 <dir_sdi>
 800d236:	4603      	mov	r3, r0
 800d238:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d23a:	7dfb      	ldrb	r3, [r7, #23]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d114      	bne.n	800d26a <f_opendir+0x156>
					if (obj->sclust) {
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00d      	beq.n	800d264 <f_opendir+0x150>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d248:	2100      	movs	r1, #0
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7fb fe7e 	bl	8008f4c <inc_lock>
 800d250:	4602      	mov	r2, r0
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d105      	bne.n	800d26a <f_opendir+0x156>
 800d25e:	2312      	movs	r3, #18
 800d260:	75fb      	strb	r3, [r7, #23]
 800d262:	e002      	b.n	800d26a <f_opendir+0x156>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	2200      	movs	r2, #0
 800d268:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f000 fa26 	bl	800d6bc <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d270:	7dfb      	ldrb	r3, [r7, #23]
 800d272:	2b04      	cmp	r3, #4
 800d274:	d101      	bne.n	800d27a <f_opendir+0x166>
 800d276:	2305      	movs	r3, #5
 800d278:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d27a:	7dfb      	ldrb	r3, [r7, #23]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <f_opendir+0x172>
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d286:	7dfb      	ldrb	r3, [r7, #23]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3718      	adds	r7, #24
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f107 0208 	add.w	r2, r7, #8
 800d29e:	4611      	mov	r1, r2
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fe ff59 	bl	800c158 <validate>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d110      	bne.n	800d2d2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d006      	beq.n	800d2c6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fb fed3 	bl	8009068 <dec_lock>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d102      	bne.n	800d2d2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f107 020c 	add.w	r2, r7, #12
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe ff32 	bl	800c158 <validate>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d2f8:	7dfb      	ldrb	r3, [r7, #23]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d13b      	bne.n	800d376 <f_readdir+0x9a>
		if (!fno) {
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d304:	2100      	movs	r1, #0
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f7fc fd55 	bl	8009db6 <dir_sdi>
 800d30c:	4603      	mov	r3, r0
 800d30e:	75fb      	strb	r3, [r7, #23]
 800d310:	e031      	b.n	800d376 <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 800d312:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d316:	f000 f9c5 	bl	800d6a4 <ff_memalloc>
 800d31a:	6138      	str	r0, [r7, #16]
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <f_readdir+0x4a>
 800d322:	2311      	movs	r3, #17
 800d324:	e028      	b.n	800d378 <f_readdir+0x9c>
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	693a      	ldr	r2, [r7, #16]
 800d32a:	60da      	str	r2, [r3, #12]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	693a      	ldr	r2, [r7, #16]
 800d330:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d334:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800d336:	2100      	movs	r1, #0
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f7fd fbdb 	bl	800aaf4 <dir_read>
 800d33e:	4603      	mov	r3, r0
 800d340:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d342:	7dfb      	ldrb	r3, [r7, #23]
 800d344:	2b04      	cmp	r3, #4
 800d346:	d101      	bne.n	800d34c <f_readdir+0x70>
 800d348:	2300      	movs	r3, #0
 800d34a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d10e      	bne.n	800d370 <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7fd ff65 	bl	800b224 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d35a:	2100      	movs	r1, #0
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7fc fdb0 	bl	8009ec2 <dir_next>
 800d362:	4603      	mov	r3, r0
 800d364:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	2b04      	cmp	r3, #4
 800d36a:	d101      	bne.n	800d370 <f_readdir+0x94>
 800d36c:	2300      	movs	r3, #0
 800d36e:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800d370:	6938      	ldr	r0, [r7, #16]
 800d372:	f000 f9a3 	bl	800d6bc <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800d376:	7dfb      	ldrb	r3, [r7, #23]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b098      	sub	sp, #96	@ 0x60
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d38a:	f107 0108 	add.w	r1, r7, #8
 800d38e:	1d3b      	adds	r3, r7, #4
 800d390:	2200      	movs	r2, #0
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fb8e 	bl	800bab4 <find_volume>
 800d398:	4603      	mov	r3, r0
 800d39a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d39e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d134      	bne.n	800d410 <f_stat+0x90>
		INIT_NAMBUF(dj.obj.fs);
 800d3a6:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d3aa:	f000 f97b 	bl	800d6a4 <ff_memalloc>
 800d3ae:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d3b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <f_stat+0x3a>
 800d3b6:	2311      	movs	r3, #17
 800d3b8:	e02c      	b.n	800d414 <f_stat+0x94>
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3be:	60da      	str	r2, [r3, #12]
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3c4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d3c8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	f107 0308 	add.w	r3, r7, #8
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fe fa1c 	bl	800b810 <follow_path>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d3de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d111      	bne.n	800d40a <f_stat+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d3e6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d3ea:	b25b      	sxtb	r3, r3
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	da03      	bge.n	800d3f8 <f_stat+0x78>
				res = FR_INVALID_NAME;
 800d3f0:	2306      	movs	r3, #6
 800d3f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d3f6:	e008      	b.n	800d40a <f_stat+0x8a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d005      	beq.n	800d40a <f_stat+0x8a>
 800d3fe:	f107 0308 	add.w	r3, r7, #8
 800d402:	6839      	ldr	r1, [r7, #0]
 800d404:	4618      	mov	r0, r3
 800d406:	f7fd ff0d 	bl	800b224 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800d40a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d40c:	f000 f956 	bl	800d6bc <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800d410:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d414:	4618      	mov	r0, r3
 800d416:	3760      	adds	r7, #96	@ 0x60
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b087      	sub	sp, #28
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	4613      	mov	r3, r2
 800d428:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d42a:	2301      	movs	r3, #1
 800d42c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d432:	4b1f      	ldr	r3, [pc, #124]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d434:	7a5b      	ldrb	r3, [r3, #9]
 800d436:	b2db      	uxtb	r3, r3
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d131      	bne.n	800d4a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d43c:	4b1c      	ldr	r3, [pc, #112]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d43e:	7a5b      	ldrb	r3, [r3, #9]
 800d440:	b2db      	uxtb	r3, r3
 800d442:	461a      	mov	r2, r3
 800d444:	4b1a      	ldr	r3, [pc, #104]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d446:	2100      	movs	r1, #0
 800d448:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d44a:	4b19      	ldr	r3, [pc, #100]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d44c:	7a5b      	ldrb	r3, [r3, #9]
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	4a17      	ldr	r2, [pc, #92]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d45a:	4b15      	ldr	r3, [pc, #84]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d45c:	7a5b      	ldrb	r3, [r3, #9]
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	461a      	mov	r2, r3
 800d462:	4b13      	ldr	r3, [pc, #76]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d464:	4413      	add	r3, r2
 800d466:	79fa      	ldrb	r2, [r7, #7]
 800d468:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d46a:	4b11      	ldr	r3, [pc, #68]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d46c:	7a5b      	ldrb	r3, [r3, #9]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	b2d1      	uxtb	r1, r2
 800d474:	4a0e      	ldr	r2, [pc, #56]	@ (800d4b0 <FATFS_LinkDriverEx+0x94>)
 800d476:	7251      	strb	r1, [r2, #9]
 800d478:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d47a:	7dbb      	ldrb	r3, [r7, #22]
 800d47c:	3330      	adds	r3, #48	@ 0x30
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	3301      	adds	r3, #1
 800d488:	223a      	movs	r2, #58	@ 0x3a
 800d48a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	3302      	adds	r3, #2
 800d490:	222f      	movs	r2, #47	@ 0x2f
 800d492:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	3303      	adds	r3, #3
 800d498:	2200      	movs	r2, #0
 800d49a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d49c:	2300      	movs	r3, #0
 800d49e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	371c      	adds	r7, #28
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	20002c30 	.word	0x20002c30

0800d4b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d4be:	2200      	movs	r2, #0
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff ffaa 	bl	800d41c <FATFS_LinkDriverEx>
 800d4c8:	4603      	mov	r3, r0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
	...

0800d4d4 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b089      	sub	sp, #36	@ 0x24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	6039      	str	r1, [r7, #0]
 800d4de:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800d4e0:	88fb      	ldrh	r3, [r7, #6]
 800d4e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4e4:	d802      	bhi.n	800d4ec <ff_convert+0x18>
		c = chr;
 800d4e6:	88fb      	ldrh	r3, [r7, #6]
 800d4e8:	837b      	strh	r3, [r7, #26]
 800d4ea:	e045      	b.n	800d578 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <ff_convert+0x2a>
			p = oem2uni;
 800d4f2:	4b25      	ldr	r3, [pc, #148]	@ (800d588 <ff_convert+0xb4>)
 800d4f4:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800d4f6:	f245 5320 	movw	r3, #21792	@ 0x5520
 800d4fa:	60bb      	str	r3, [r7, #8]
 800d4fc:	e004      	b.n	800d508 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800d4fe:	4b23      	ldr	r3, [pc, #140]	@ (800d58c <ff_convert+0xb8>)
 800d500:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800d502:	f245 5320 	movw	r3, #21792	@ 0x5520
 800d506:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800d508:	2300      	movs	r3, #0
 800d50a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800d50c:	2310      	movs	r3, #16
 800d50e:	613b      	str	r3, [r7, #16]
 800d510:	e021      	b.n	800d556 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	0fda      	lsrs	r2, r3, #31
 800d51a:	4413      	add	r3, r2
 800d51c:	105b      	asrs	r3, r3, #1
 800d51e:	461a      	mov	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	4413      	add	r3, r2
 800d524:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	69fa      	ldr	r2, [r7, #28]
 800d52c:	4413      	add	r3, r2
 800d52e:	881b      	ldrh	r3, [r3, #0]
 800d530:	88fa      	ldrh	r2, [r7, #6]
 800d532:	429a      	cmp	r2, r3
 800d534:	d013      	beq.n	800d55e <ff_convert+0x8a>
			if (chr > p[i * 2])
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	69fa      	ldr	r2, [r7, #28]
 800d53c:	4413      	add	r3, r2
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	88fa      	ldrh	r2, [r7, #6]
 800d542:	429a      	cmp	r2, r3
 800d544:	d902      	bls.n	800d54c <ff_convert+0x78>
				li = i;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	e001      	b.n	800d550 <ff_convert+0x7c>
			else
				hi = i;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	3b01      	subs	r3, #1
 800d554:	613b      	str	r3, [r7, #16]
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1da      	bne.n	800d512 <ff_convert+0x3e>
 800d55c:	e000      	b.n	800d560 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800d55e:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d006      	beq.n	800d574 <ff_convert+0xa0>
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	3302      	adds	r3, #2
 800d56c:	69fa      	ldr	r2, [r7, #28]
 800d56e:	4413      	add	r3, r2
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	e000      	b.n	800d576 <ff_convert+0xa2>
 800d574:	2300      	movs	r3, #0
 800d576:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800d578:	8b7b      	ldrh	r3, [r7, #26]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3724      	adds	r7, #36	@ 0x24
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	080288cc 	.word	0x080288cc
 800d58c:	08013448 	.word	0x08013448

0800d590 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	4603      	mov	r3, r0
 800d598:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d59a:	88fb      	ldrh	r3, [r7, #6]
 800d59c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5a0:	d201      	bcs.n	800d5a6 <ff_wtoupper+0x16>
 800d5a2:	4b3e      	ldr	r3, [pc, #248]	@ (800d69c <ff_wtoupper+0x10c>)
 800d5a4:	e000      	b.n	800d5a8 <ff_wtoupper+0x18>
 800d5a6:	4b3e      	ldr	r3, [pc, #248]	@ (800d6a0 <ff_wtoupper+0x110>)
 800d5a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	1c9a      	adds	r2, r3, #2
 800d5ae:	617a      	str	r2, [r7, #20]
 800d5b0:	881b      	ldrh	r3, [r3, #0]
 800d5b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d5b4:	8a7b      	ldrh	r3, [r7, #18]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d068      	beq.n	800d68c <ff_wtoupper+0xfc>
 800d5ba:	88fa      	ldrh	r2, [r7, #6]
 800d5bc:	8a7b      	ldrh	r3, [r7, #18]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d364      	bcc.n	800d68c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	1c9a      	adds	r2, r3, #2
 800d5c6:	617a      	str	r2, [r7, #20]
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	823b      	strh	r3, [r7, #16]
 800d5cc:	8a3b      	ldrh	r3, [r7, #16]
 800d5ce:	0a1b      	lsrs	r3, r3, #8
 800d5d0:	81fb      	strh	r3, [r7, #14]
 800d5d2:	8a3b      	ldrh	r3, [r7, #16]
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d5d8:	88fa      	ldrh	r2, [r7, #6]
 800d5da:	8a79      	ldrh	r1, [r7, #18]
 800d5dc:	8a3b      	ldrh	r3, [r7, #16]
 800d5de:	440b      	add	r3, r1
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	da49      	bge.n	800d678 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d5e4:	89fb      	ldrh	r3, [r7, #14]
 800d5e6:	2b08      	cmp	r3, #8
 800d5e8:	d84f      	bhi.n	800d68a <ff_wtoupper+0xfa>
 800d5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f0 <ff_wtoupper+0x60>)
 800d5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f0:	0800d615 	.word	0x0800d615
 800d5f4:	0800d627 	.word	0x0800d627
 800d5f8:	0800d63d 	.word	0x0800d63d
 800d5fc:	0800d645 	.word	0x0800d645
 800d600:	0800d64d 	.word	0x0800d64d
 800d604:	0800d655 	.word	0x0800d655
 800d608:	0800d65d 	.word	0x0800d65d
 800d60c:	0800d665 	.word	0x0800d665
 800d610:	0800d66d 	.word	0x0800d66d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d614:	88fa      	ldrh	r2, [r7, #6]
 800d616:	8a7b      	ldrh	r3, [r7, #18]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	4413      	add	r3, r2
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	80fb      	strh	r3, [r7, #6]
 800d624:	e027      	b.n	800d676 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d626:	88fa      	ldrh	r2, [r7, #6]
 800d628:	8a7b      	ldrh	r3, [r7, #18]
 800d62a:	1ad3      	subs	r3, r2, r3
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	b29b      	uxth	r3, r3
 800d634:	88fa      	ldrh	r2, [r7, #6]
 800d636:	1ad3      	subs	r3, r2, r3
 800d638:	80fb      	strh	r3, [r7, #6]
 800d63a:	e01c      	b.n	800d676 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d63c:	88fb      	ldrh	r3, [r7, #6]
 800d63e:	3b10      	subs	r3, #16
 800d640:	80fb      	strh	r3, [r7, #6]
 800d642:	e018      	b.n	800d676 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d644:	88fb      	ldrh	r3, [r7, #6]
 800d646:	3b20      	subs	r3, #32
 800d648:	80fb      	strh	r3, [r7, #6]
 800d64a:	e014      	b.n	800d676 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d64c:	88fb      	ldrh	r3, [r7, #6]
 800d64e:	3b30      	subs	r3, #48	@ 0x30
 800d650:	80fb      	strh	r3, [r7, #6]
 800d652:	e010      	b.n	800d676 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d654:	88fb      	ldrh	r3, [r7, #6]
 800d656:	3b1a      	subs	r3, #26
 800d658:	80fb      	strh	r3, [r7, #6]
 800d65a:	e00c      	b.n	800d676 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d65c:	88fb      	ldrh	r3, [r7, #6]
 800d65e:	3308      	adds	r3, #8
 800d660:	80fb      	strh	r3, [r7, #6]
 800d662:	e008      	b.n	800d676 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d664:	88fb      	ldrh	r3, [r7, #6]
 800d666:	3b50      	subs	r3, #80	@ 0x50
 800d668:	80fb      	strh	r3, [r7, #6]
 800d66a:	e004      	b.n	800d676 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d66c:	88fb      	ldrh	r3, [r7, #6]
 800d66e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d672:	80fb      	strh	r3, [r7, #6]
 800d674:	bf00      	nop
			}
			break;
 800d676:	e008      	b.n	800d68a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d678:	89fb      	ldrh	r3, [r7, #14]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d195      	bne.n	800d5aa <ff_wtoupper+0x1a>
 800d67e:	8a3b      	ldrh	r3, [r7, #16]
 800d680:	005b      	lsls	r3, r3, #1
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	4413      	add	r3, r2
 800d686:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d688:	e78f      	b.n	800d5aa <ff_wtoupper+0x1a>
			break;
 800d68a:	bf00      	nop
	}

	return chr;
 800d68c:	88fb      	ldrh	r3, [r7, #6]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	371c      	adds	r7, #28
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	0803dd50 	.word	0x0803dd50
 800d6a0:	0803df44 	.word	0x0803df44

0800d6a4 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f815 	bl	800d6dc <malloc>
 800d6b2:	4603      	mov	r3, r0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f811 	bl	800d6ec <free>
}
 800d6ca:	bf00      	nop
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <atoi>:
 800d6d2:	220a      	movs	r2, #10
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	f000 b93b 	b.w	800d950 <strtol>
	...

0800d6dc <malloc>:
 800d6dc:	4b02      	ldr	r3, [pc, #8]	@ (800d6e8 <malloc+0xc>)
 800d6de:	4601      	mov	r1, r0
 800d6e0:	6818      	ldr	r0, [r3, #0]
 800d6e2:	f000 b82d 	b.w	800d740 <_malloc_r>
 800d6e6:	bf00      	nop
 800d6e8:	20000060 	.word	0x20000060

0800d6ec <free>:
 800d6ec:	4b02      	ldr	r3, [pc, #8]	@ (800d6f8 <free+0xc>)
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	6818      	ldr	r0, [r3, #0]
 800d6f2:	f002 bdc1 	b.w	8010278 <_free_r>
 800d6f6:	bf00      	nop
 800d6f8:	20000060 	.word	0x20000060

0800d6fc <sbrk_aligned>:
 800d6fc:	b570      	push	{r4, r5, r6, lr}
 800d6fe:	4e0f      	ldr	r6, [pc, #60]	@ (800d73c <sbrk_aligned+0x40>)
 800d700:	460c      	mov	r4, r1
 800d702:	6831      	ldr	r1, [r6, #0]
 800d704:	4605      	mov	r5, r0
 800d706:	b911      	cbnz	r1, 800d70e <sbrk_aligned+0x12>
 800d708:	f001 fee6 	bl	800f4d8 <_sbrk_r>
 800d70c:	6030      	str	r0, [r6, #0]
 800d70e:	4621      	mov	r1, r4
 800d710:	4628      	mov	r0, r5
 800d712:	f001 fee1 	bl	800f4d8 <_sbrk_r>
 800d716:	1c43      	adds	r3, r0, #1
 800d718:	d103      	bne.n	800d722 <sbrk_aligned+0x26>
 800d71a:	f04f 34ff 	mov.w	r4, #4294967295
 800d71e:	4620      	mov	r0, r4
 800d720:	bd70      	pop	{r4, r5, r6, pc}
 800d722:	1cc4      	adds	r4, r0, #3
 800d724:	f024 0403 	bic.w	r4, r4, #3
 800d728:	42a0      	cmp	r0, r4
 800d72a:	d0f8      	beq.n	800d71e <sbrk_aligned+0x22>
 800d72c:	1a21      	subs	r1, r4, r0
 800d72e:	4628      	mov	r0, r5
 800d730:	f001 fed2 	bl	800f4d8 <_sbrk_r>
 800d734:	3001      	adds	r0, #1
 800d736:	d1f2      	bne.n	800d71e <sbrk_aligned+0x22>
 800d738:	e7ef      	b.n	800d71a <sbrk_aligned+0x1e>
 800d73a:	bf00      	nop
 800d73c:	20002c3c 	.word	0x20002c3c

0800d740 <_malloc_r>:
 800d740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d744:	1ccd      	adds	r5, r1, #3
 800d746:	f025 0503 	bic.w	r5, r5, #3
 800d74a:	3508      	adds	r5, #8
 800d74c:	2d0c      	cmp	r5, #12
 800d74e:	bf38      	it	cc
 800d750:	250c      	movcc	r5, #12
 800d752:	2d00      	cmp	r5, #0
 800d754:	4606      	mov	r6, r0
 800d756:	db01      	blt.n	800d75c <_malloc_r+0x1c>
 800d758:	42a9      	cmp	r1, r5
 800d75a:	d904      	bls.n	800d766 <_malloc_r+0x26>
 800d75c:	230c      	movs	r3, #12
 800d75e:	6033      	str	r3, [r6, #0]
 800d760:	2000      	movs	r0, #0
 800d762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d766:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d83c <_malloc_r+0xfc>
 800d76a:	f000 f869 	bl	800d840 <__malloc_lock>
 800d76e:	f8d8 3000 	ldr.w	r3, [r8]
 800d772:	461c      	mov	r4, r3
 800d774:	bb44      	cbnz	r4, 800d7c8 <_malloc_r+0x88>
 800d776:	4629      	mov	r1, r5
 800d778:	4630      	mov	r0, r6
 800d77a:	f7ff ffbf 	bl	800d6fc <sbrk_aligned>
 800d77e:	1c43      	adds	r3, r0, #1
 800d780:	4604      	mov	r4, r0
 800d782:	d158      	bne.n	800d836 <_malloc_r+0xf6>
 800d784:	f8d8 4000 	ldr.w	r4, [r8]
 800d788:	4627      	mov	r7, r4
 800d78a:	2f00      	cmp	r7, #0
 800d78c:	d143      	bne.n	800d816 <_malloc_r+0xd6>
 800d78e:	2c00      	cmp	r4, #0
 800d790:	d04b      	beq.n	800d82a <_malloc_r+0xea>
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	4639      	mov	r1, r7
 800d796:	4630      	mov	r0, r6
 800d798:	eb04 0903 	add.w	r9, r4, r3
 800d79c:	f001 fe9c 	bl	800f4d8 <_sbrk_r>
 800d7a0:	4581      	cmp	r9, r0
 800d7a2:	d142      	bne.n	800d82a <_malloc_r+0xea>
 800d7a4:	6821      	ldr	r1, [r4, #0]
 800d7a6:	1a6d      	subs	r5, r5, r1
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f7ff ffa6 	bl	800d6fc <sbrk_aligned>
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	d03a      	beq.n	800d82a <_malloc_r+0xea>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	442b      	add	r3, r5
 800d7b8:	6023      	str	r3, [r4, #0]
 800d7ba:	f8d8 3000 	ldr.w	r3, [r8]
 800d7be:	685a      	ldr	r2, [r3, #4]
 800d7c0:	bb62      	cbnz	r2, 800d81c <_malloc_r+0xdc>
 800d7c2:	f8c8 7000 	str.w	r7, [r8]
 800d7c6:	e00f      	b.n	800d7e8 <_malloc_r+0xa8>
 800d7c8:	6822      	ldr	r2, [r4, #0]
 800d7ca:	1b52      	subs	r2, r2, r5
 800d7cc:	d420      	bmi.n	800d810 <_malloc_r+0xd0>
 800d7ce:	2a0b      	cmp	r2, #11
 800d7d0:	d917      	bls.n	800d802 <_malloc_r+0xc2>
 800d7d2:	1961      	adds	r1, r4, r5
 800d7d4:	42a3      	cmp	r3, r4
 800d7d6:	6025      	str	r5, [r4, #0]
 800d7d8:	bf18      	it	ne
 800d7da:	6059      	strne	r1, [r3, #4]
 800d7dc:	6863      	ldr	r3, [r4, #4]
 800d7de:	bf08      	it	eq
 800d7e0:	f8c8 1000 	streq.w	r1, [r8]
 800d7e4:	5162      	str	r2, [r4, r5]
 800d7e6:	604b      	str	r3, [r1, #4]
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	f000 f82f 	bl	800d84c <__malloc_unlock>
 800d7ee:	f104 000b 	add.w	r0, r4, #11
 800d7f2:	1d23      	adds	r3, r4, #4
 800d7f4:	f020 0007 	bic.w	r0, r0, #7
 800d7f8:	1ac2      	subs	r2, r0, r3
 800d7fa:	bf1c      	itt	ne
 800d7fc:	1a1b      	subne	r3, r3, r0
 800d7fe:	50a3      	strne	r3, [r4, r2]
 800d800:	e7af      	b.n	800d762 <_malloc_r+0x22>
 800d802:	6862      	ldr	r2, [r4, #4]
 800d804:	42a3      	cmp	r3, r4
 800d806:	bf0c      	ite	eq
 800d808:	f8c8 2000 	streq.w	r2, [r8]
 800d80c:	605a      	strne	r2, [r3, #4]
 800d80e:	e7eb      	b.n	800d7e8 <_malloc_r+0xa8>
 800d810:	4623      	mov	r3, r4
 800d812:	6864      	ldr	r4, [r4, #4]
 800d814:	e7ae      	b.n	800d774 <_malloc_r+0x34>
 800d816:	463c      	mov	r4, r7
 800d818:	687f      	ldr	r7, [r7, #4]
 800d81a:	e7b6      	b.n	800d78a <_malloc_r+0x4a>
 800d81c:	461a      	mov	r2, r3
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	42a3      	cmp	r3, r4
 800d822:	d1fb      	bne.n	800d81c <_malloc_r+0xdc>
 800d824:	2300      	movs	r3, #0
 800d826:	6053      	str	r3, [r2, #4]
 800d828:	e7de      	b.n	800d7e8 <_malloc_r+0xa8>
 800d82a:	230c      	movs	r3, #12
 800d82c:	6033      	str	r3, [r6, #0]
 800d82e:	4630      	mov	r0, r6
 800d830:	f000 f80c 	bl	800d84c <__malloc_unlock>
 800d834:	e794      	b.n	800d760 <_malloc_r+0x20>
 800d836:	6005      	str	r5, [r0, #0]
 800d838:	e7d6      	b.n	800d7e8 <_malloc_r+0xa8>
 800d83a:	bf00      	nop
 800d83c:	20002c40 	.word	0x20002c40

0800d840 <__malloc_lock>:
 800d840:	4801      	ldr	r0, [pc, #4]	@ (800d848 <__malloc_lock+0x8>)
 800d842:	f001 be97 	b.w	800f574 <__retarget_lock_acquire_recursive>
 800d846:	bf00      	nop
 800d848:	20002daa 	.word	0x20002daa

0800d84c <__malloc_unlock>:
 800d84c:	4801      	ldr	r0, [pc, #4]	@ (800d854 <__malloc_unlock+0x8>)
 800d84e:	f001 be93 	b.w	800f578 <__retarget_lock_release_recursive>
 800d852:	bf00      	nop
 800d854:	20002daa 	.word	0x20002daa

0800d858 <_strtol_l.isra.0>:
 800d858:	2b24      	cmp	r3, #36	@ 0x24
 800d85a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d85e:	4686      	mov	lr, r0
 800d860:	4690      	mov	r8, r2
 800d862:	d801      	bhi.n	800d868 <_strtol_l.isra.0+0x10>
 800d864:	2b01      	cmp	r3, #1
 800d866:	d106      	bne.n	800d876 <_strtol_l.isra.0+0x1e>
 800d868:	f001 fe58 	bl	800f51c <__errno>
 800d86c:	2316      	movs	r3, #22
 800d86e:	6003      	str	r3, [r0, #0]
 800d870:	2000      	movs	r0, #0
 800d872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d876:	4834      	ldr	r0, [pc, #208]	@ (800d948 <_strtol_l.isra.0+0xf0>)
 800d878:	460d      	mov	r5, r1
 800d87a:	462a      	mov	r2, r5
 800d87c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d880:	5d06      	ldrb	r6, [r0, r4]
 800d882:	f016 0608 	ands.w	r6, r6, #8
 800d886:	d1f8      	bne.n	800d87a <_strtol_l.isra.0+0x22>
 800d888:	2c2d      	cmp	r4, #45	@ 0x2d
 800d88a:	d110      	bne.n	800d8ae <_strtol_l.isra.0+0x56>
 800d88c:	782c      	ldrb	r4, [r5, #0]
 800d88e:	2601      	movs	r6, #1
 800d890:	1c95      	adds	r5, r2, #2
 800d892:	f033 0210 	bics.w	r2, r3, #16
 800d896:	d115      	bne.n	800d8c4 <_strtol_l.isra.0+0x6c>
 800d898:	2c30      	cmp	r4, #48	@ 0x30
 800d89a:	d10d      	bne.n	800d8b8 <_strtol_l.isra.0+0x60>
 800d89c:	782a      	ldrb	r2, [r5, #0]
 800d89e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8a2:	2a58      	cmp	r2, #88	@ 0x58
 800d8a4:	d108      	bne.n	800d8b8 <_strtol_l.isra.0+0x60>
 800d8a6:	786c      	ldrb	r4, [r5, #1]
 800d8a8:	3502      	adds	r5, #2
 800d8aa:	2310      	movs	r3, #16
 800d8ac:	e00a      	b.n	800d8c4 <_strtol_l.isra.0+0x6c>
 800d8ae:	2c2b      	cmp	r4, #43	@ 0x2b
 800d8b0:	bf04      	itt	eq
 800d8b2:	782c      	ldrbeq	r4, [r5, #0]
 800d8b4:	1c95      	addeq	r5, r2, #2
 800d8b6:	e7ec      	b.n	800d892 <_strtol_l.isra.0+0x3a>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1f6      	bne.n	800d8aa <_strtol_l.isra.0+0x52>
 800d8bc:	2c30      	cmp	r4, #48	@ 0x30
 800d8be:	bf14      	ite	ne
 800d8c0:	230a      	movne	r3, #10
 800d8c2:	2308      	moveq	r3, #8
 800d8c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d8c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	fbbc f9f3 	udiv	r9, ip, r3
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	fb03 ca19 	mls	sl, r3, r9, ip
 800d8d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d8dc:	2f09      	cmp	r7, #9
 800d8de:	d80f      	bhi.n	800d900 <_strtol_l.isra.0+0xa8>
 800d8e0:	463c      	mov	r4, r7
 800d8e2:	42a3      	cmp	r3, r4
 800d8e4:	dd1b      	ble.n	800d91e <_strtol_l.isra.0+0xc6>
 800d8e6:	1c57      	adds	r7, r2, #1
 800d8e8:	d007      	beq.n	800d8fa <_strtol_l.isra.0+0xa2>
 800d8ea:	4581      	cmp	r9, r0
 800d8ec:	d314      	bcc.n	800d918 <_strtol_l.isra.0+0xc0>
 800d8ee:	d101      	bne.n	800d8f4 <_strtol_l.isra.0+0x9c>
 800d8f0:	45a2      	cmp	sl, r4
 800d8f2:	db11      	blt.n	800d918 <_strtol_l.isra.0+0xc0>
 800d8f4:	fb00 4003 	mla	r0, r0, r3, r4
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8fe:	e7eb      	b.n	800d8d8 <_strtol_l.isra.0+0x80>
 800d900:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d904:	2f19      	cmp	r7, #25
 800d906:	d801      	bhi.n	800d90c <_strtol_l.isra.0+0xb4>
 800d908:	3c37      	subs	r4, #55	@ 0x37
 800d90a:	e7ea      	b.n	800d8e2 <_strtol_l.isra.0+0x8a>
 800d90c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d910:	2f19      	cmp	r7, #25
 800d912:	d804      	bhi.n	800d91e <_strtol_l.isra.0+0xc6>
 800d914:	3c57      	subs	r4, #87	@ 0x57
 800d916:	e7e4      	b.n	800d8e2 <_strtol_l.isra.0+0x8a>
 800d918:	f04f 32ff 	mov.w	r2, #4294967295
 800d91c:	e7ed      	b.n	800d8fa <_strtol_l.isra.0+0xa2>
 800d91e:	1c53      	adds	r3, r2, #1
 800d920:	d108      	bne.n	800d934 <_strtol_l.isra.0+0xdc>
 800d922:	2322      	movs	r3, #34	@ 0x22
 800d924:	f8ce 3000 	str.w	r3, [lr]
 800d928:	4660      	mov	r0, ip
 800d92a:	f1b8 0f00 	cmp.w	r8, #0
 800d92e:	d0a0      	beq.n	800d872 <_strtol_l.isra.0+0x1a>
 800d930:	1e69      	subs	r1, r5, #1
 800d932:	e006      	b.n	800d942 <_strtol_l.isra.0+0xea>
 800d934:	b106      	cbz	r6, 800d938 <_strtol_l.isra.0+0xe0>
 800d936:	4240      	negs	r0, r0
 800d938:	f1b8 0f00 	cmp.w	r8, #0
 800d93c:	d099      	beq.n	800d872 <_strtol_l.isra.0+0x1a>
 800d93e:	2a00      	cmp	r2, #0
 800d940:	d1f6      	bne.n	800d930 <_strtol_l.isra.0+0xd8>
 800d942:	f8c8 1000 	str.w	r1, [r8]
 800d946:	e794      	b.n	800d872 <_strtol_l.isra.0+0x1a>
 800d948:	0803e001 	.word	0x0803e001

0800d94c <_strtol_r>:
 800d94c:	f7ff bf84 	b.w	800d858 <_strtol_l.isra.0>

0800d950 <strtol>:
 800d950:	4613      	mov	r3, r2
 800d952:	460a      	mov	r2, r1
 800d954:	4601      	mov	r1, r0
 800d956:	4802      	ldr	r0, [pc, #8]	@ (800d960 <strtol+0x10>)
 800d958:	6800      	ldr	r0, [r0, #0]
 800d95a:	f7ff bf7d 	b.w	800d858 <_strtol_l.isra.0>
 800d95e:	bf00      	nop
 800d960:	20000060 	.word	0x20000060

0800d964 <__cvt>:
 800d964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d968:	ec57 6b10 	vmov	r6, r7, d0
 800d96c:	2f00      	cmp	r7, #0
 800d96e:	460c      	mov	r4, r1
 800d970:	4619      	mov	r1, r3
 800d972:	463b      	mov	r3, r7
 800d974:	bfbb      	ittet	lt
 800d976:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d97a:	461f      	movlt	r7, r3
 800d97c:	2300      	movge	r3, #0
 800d97e:	232d      	movlt	r3, #45	@ 0x2d
 800d980:	700b      	strb	r3, [r1, #0]
 800d982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d984:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d988:	4691      	mov	r9, r2
 800d98a:	f023 0820 	bic.w	r8, r3, #32
 800d98e:	bfbc      	itt	lt
 800d990:	4632      	movlt	r2, r6
 800d992:	4616      	movlt	r6, r2
 800d994:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d998:	d005      	beq.n	800d9a6 <__cvt+0x42>
 800d99a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d99e:	d100      	bne.n	800d9a2 <__cvt+0x3e>
 800d9a0:	3401      	adds	r4, #1
 800d9a2:	2102      	movs	r1, #2
 800d9a4:	e000      	b.n	800d9a8 <__cvt+0x44>
 800d9a6:	2103      	movs	r1, #3
 800d9a8:	ab03      	add	r3, sp, #12
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	ab02      	add	r3, sp, #8
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	ec47 6b10 	vmov	d0, r6, r7
 800d9b4:	4653      	mov	r3, sl
 800d9b6:	4622      	mov	r2, r4
 800d9b8:	f001 fe8e 	bl	800f6d8 <_dtoa_r>
 800d9bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	d119      	bne.n	800d9f8 <__cvt+0x94>
 800d9c4:	f019 0f01 	tst.w	r9, #1
 800d9c8:	d00e      	beq.n	800d9e8 <__cvt+0x84>
 800d9ca:	eb00 0904 	add.w	r9, r0, r4
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	f7f3 f887 	bl	8000ae8 <__aeabi_dcmpeq>
 800d9da:	b108      	cbz	r0, 800d9e0 <__cvt+0x7c>
 800d9dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9e0:	2230      	movs	r2, #48	@ 0x30
 800d9e2:	9b03      	ldr	r3, [sp, #12]
 800d9e4:	454b      	cmp	r3, r9
 800d9e6:	d31e      	bcc.n	800da26 <__cvt+0xc2>
 800d9e8:	9b03      	ldr	r3, [sp, #12]
 800d9ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9ec:	1b5b      	subs	r3, r3, r5
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	6013      	str	r3, [r2, #0]
 800d9f2:	b004      	add	sp, #16
 800d9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d9fc:	eb00 0904 	add.w	r9, r0, r4
 800da00:	d1e5      	bne.n	800d9ce <__cvt+0x6a>
 800da02:	7803      	ldrb	r3, [r0, #0]
 800da04:	2b30      	cmp	r3, #48	@ 0x30
 800da06:	d10a      	bne.n	800da1e <__cvt+0xba>
 800da08:	2200      	movs	r2, #0
 800da0a:	2300      	movs	r3, #0
 800da0c:	4630      	mov	r0, r6
 800da0e:	4639      	mov	r1, r7
 800da10:	f7f3 f86a 	bl	8000ae8 <__aeabi_dcmpeq>
 800da14:	b918      	cbnz	r0, 800da1e <__cvt+0xba>
 800da16:	f1c4 0401 	rsb	r4, r4, #1
 800da1a:	f8ca 4000 	str.w	r4, [sl]
 800da1e:	f8da 3000 	ldr.w	r3, [sl]
 800da22:	4499      	add	r9, r3
 800da24:	e7d3      	b.n	800d9ce <__cvt+0x6a>
 800da26:	1c59      	adds	r1, r3, #1
 800da28:	9103      	str	r1, [sp, #12]
 800da2a:	701a      	strb	r2, [r3, #0]
 800da2c:	e7d9      	b.n	800d9e2 <__cvt+0x7e>

0800da2e <__exponent>:
 800da2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da30:	2900      	cmp	r1, #0
 800da32:	bfba      	itte	lt
 800da34:	4249      	neglt	r1, r1
 800da36:	232d      	movlt	r3, #45	@ 0x2d
 800da38:	232b      	movge	r3, #43	@ 0x2b
 800da3a:	2909      	cmp	r1, #9
 800da3c:	7002      	strb	r2, [r0, #0]
 800da3e:	7043      	strb	r3, [r0, #1]
 800da40:	dd29      	ble.n	800da96 <__exponent+0x68>
 800da42:	f10d 0307 	add.w	r3, sp, #7
 800da46:	461d      	mov	r5, r3
 800da48:	270a      	movs	r7, #10
 800da4a:	461a      	mov	r2, r3
 800da4c:	fbb1 f6f7 	udiv	r6, r1, r7
 800da50:	fb07 1416 	mls	r4, r7, r6, r1
 800da54:	3430      	adds	r4, #48	@ 0x30
 800da56:	f802 4c01 	strb.w	r4, [r2, #-1]
 800da5a:	460c      	mov	r4, r1
 800da5c:	2c63      	cmp	r4, #99	@ 0x63
 800da5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800da62:	4631      	mov	r1, r6
 800da64:	dcf1      	bgt.n	800da4a <__exponent+0x1c>
 800da66:	3130      	adds	r1, #48	@ 0x30
 800da68:	1e94      	subs	r4, r2, #2
 800da6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800da6e:	1c41      	adds	r1, r0, #1
 800da70:	4623      	mov	r3, r4
 800da72:	42ab      	cmp	r3, r5
 800da74:	d30a      	bcc.n	800da8c <__exponent+0x5e>
 800da76:	f10d 0309 	add.w	r3, sp, #9
 800da7a:	1a9b      	subs	r3, r3, r2
 800da7c:	42ac      	cmp	r4, r5
 800da7e:	bf88      	it	hi
 800da80:	2300      	movhi	r3, #0
 800da82:	3302      	adds	r3, #2
 800da84:	4403      	add	r3, r0
 800da86:	1a18      	subs	r0, r3, r0
 800da88:	b003      	add	sp, #12
 800da8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800da90:	f801 6f01 	strb.w	r6, [r1, #1]!
 800da94:	e7ed      	b.n	800da72 <__exponent+0x44>
 800da96:	2330      	movs	r3, #48	@ 0x30
 800da98:	3130      	adds	r1, #48	@ 0x30
 800da9a:	7083      	strb	r3, [r0, #2]
 800da9c:	70c1      	strb	r1, [r0, #3]
 800da9e:	1d03      	adds	r3, r0, #4
 800daa0:	e7f1      	b.n	800da86 <__exponent+0x58>
	...

0800daa4 <_printf_float>:
 800daa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa8:	b08d      	sub	sp, #52	@ 0x34
 800daaa:	460c      	mov	r4, r1
 800daac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dab0:	4616      	mov	r6, r2
 800dab2:	461f      	mov	r7, r3
 800dab4:	4605      	mov	r5, r0
 800dab6:	f001 fcd7 	bl	800f468 <_localeconv_r>
 800daba:	6803      	ldr	r3, [r0, #0]
 800dabc:	9304      	str	r3, [sp, #16]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f2 fbe6 	bl	8000290 <strlen>
 800dac4:	2300      	movs	r3, #0
 800dac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dac8:	f8d8 3000 	ldr.w	r3, [r8]
 800dacc:	9005      	str	r0, [sp, #20]
 800dace:	3307      	adds	r3, #7
 800dad0:	f023 0307 	bic.w	r3, r3, #7
 800dad4:	f103 0208 	add.w	r2, r3, #8
 800dad8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dadc:	f8d4 b000 	ldr.w	fp, [r4]
 800dae0:	f8c8 2000 	str.w	r2, [r8]
 800dae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dae8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800daec:	9307      	str	r3, [sp, #28]
 800daee:	f8cd 8018 	str.w	r8, [sp, #24]
 800daf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800daf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dafa:	4b9c      	ldr	r3, [pc, #624]	@ (800dd6c <_printf_float+0x2c8>)
 800dafc:	f04f 32ff 	mov.w	r2, #4294967295
 800db00:	f7f3 f824 	bl	8000b4c <__aeabi_dcmpun>
 800db04:	bb70      	cbnz	r0, 800db64 <_printf_float+0xc0>
 800db06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db0a:	4b98      	ldr	r3, [pc, #608]	@ (800dd6c <_printf_float+0x2c8>)
 800db0c:	f04f 32ff 	mov.w	r2, #4294967295
 800db10:	f7f2 fffe 	bl	8000b10 <__aeabi_dcmple>
 800db14:	bb30      	cbnz	r0, 800db64 <_printf_float+0xc0>
 800db16:	2200      	movs	r2, #0
 800db18:	2300      	movs	r3, #0
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f2 ffed 	bl	8000afc <__aeabi_dcmplt>
 800db22:	b110      	cbz	r0, 800db2a <_printf_float+0x86>
 800db24:	232d      	movs	r3, #45	@ 0x2d
 800db26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db2a:	4a91      	ldr	r2, [pc, #580]	@ (800dd70 <_printf_float+0x2cc>)
 800db2c:	4b91      	ldr	r3, [pc, #580]	@ (800dd74 <_printf_float+0x2d0>)
 800db2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800db32:	bf8c      	ite	hi
 800db34:	4690      	movhi	r8, r2
 800db36:	4698      	movls	r8, r3
 800db38:	2303      	movs	r3, #3
 800db3a:	6123      	str	r3, [r4, #16]
 800db3c:	f02b 0304 	bic.w	r3, fp, #4
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	f04f 0900 	mov.w	r9, #0
 800db46:	9700      	str	r7, [sp, #0]
 800db48:	4633      	mov	r3, r6
 800db4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800db4c:	4621      	mov	r1, r4
 800db4e:	4628      	mov	r0, r5
 800db50:	f000 f9d2 	bl	800def8 <_printf_common>
 800db54:	3001      	adds	r0, #1
 800db56:	f040 808d 	bne.w	800dc74 <_printf_float+0x1d0>
 800db5a:	f04f 30ff 	mov.w	r0, #4294967295
 800db5e:	b00d      	add	sp, #52	@ 0x34
 800db60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db64:	4642      	mov	r2, r8
 800db66:	464b      	mov	r3, r9
 800db68:	4640      	mov	r0, r8
 800db6a:	4649      	mov	r1, r9
 800db6c:	f7f2 ffee 	bl	8000b4c <__aeabi_dcmpun>
 800db70:	b140      	cbz	r0, 800db84 <_printf_float+0xe0>
 800db72:	464b      	mov	r3, r9
 800db74:	2b00      	cmp	r3, #0
 800db76:	bfbc      	itt	lt
 800db78:	232d      	movlt	r3, #45	@ 0x2d
 800db7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800db7e:	4a7e      	ldr	r2, [pc, #504]	@ (800dd78 <_printf_float+0x2d4>)
 800db80:	4b7e      	ldr	r3, [pc, #504]	@ (800dd7c <_printf_float+0x2d8>)
 800db82:	e7d4      	b.n	800db2e <_printf_float+0x8a>
 800db84:	6863      	ldr	r3, [r4, #4]
 800db86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800db8a:	9206      	str	r2, [sp, #24]
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	d13b      	bne.n	800dc08 <_printf_float+0x164>
 800db90:	2306      	movs	r3, #6
 800db92:	6063      	str	r3, [r4, #4]
 800db94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800db98:	2300      	movs	r3, #0
 800db9a:	6022      	str	r2, [r4, #0]
 800db9c:	9303      	str	r3, [sp, #12]
 800db9e:	ab0a      	add	r3, sp, #40	@ 0x28
 800dba0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dba4:	ab09      	add	r3, sp, #36	@ 0x24
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	6861      	ldr	r1, [r4, #4]
 800dbaa:	ec49 8b10 	vmov	d0, r8, r9
 800dbae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f7ff fed6 	bl	800d964 <__cvt>
 800dbb8:	9b06      	ldr	r3, [sp, #24]
 800dbba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbbc:	2b47      	cmp	r3, #71	@ 0x47
 800dbbe:	4680      	mov	r8, r0
 800dbc0:	d129      	bne.n	800dc16 <_printf_float+0x172>
 800dbc2:	1cc8      	adds	r0, r1, #3
 800dbc4:	db02      	blt.n	800dbcc <_printf_float+0x128>
 800dbc6:	6863      	ldr	r3, [r4, #4]
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	dd41      	ble.n	800dc50 <_printf_float+0x1ac>
 800dbcc:	f1aa 0a02 	sub.w	sl, sl, #2
 800dbd0:	fa5f fa8a 	uxtb.w	sl, sl
 800dbd4:	3901      	subs	r1, #1
 800dbd6:	4652      	mov	r2, sl
 800dbd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dbdc:	9109      	str	r1, [sp, #36]	@ 0x24
 800dbde:	f7ff ff26 	bl	800da2e <__exponent>
 800dbe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbe4:	1813      	adds	r3, r2, r0
 800dbe6:	2a01      	cmp	r2, #1
 800dbe8:	4681      	mov	r9, r0
 800dbea:	6123      	str	r3, [r4, #16]
 800dbec:	dc02      	bgt.n	800dbf4 <_printf_float+0x150>
 800dbee:	6822      	ldr	r2, [r4, #0]
 800dbf0:	07d2      	lsls	r2, r2, #31
 800dbf2:	d501      	bpl.n	800dbf8 <_printf_float+0x154>
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	6123      	str	r3, [r4, #16]
 800dbf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0a2      	beq.n	800db46 <_printf_float+0xa2>
 800dc00:	232d      	movs	r3, #45	@ 0x2d
 800dc02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc06:	e79e      	b.n	800db46 <_printf_float+0xa2>
 800dc08:	9a06      	ldr	r2, [sp, #24]
 800dc0a:	2a47      	cmp	r2, #71	@ 0x47
 800dc0c:	d1c2      	bne.n	800db94 <_printf_float+0xf0>
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1c0      	bne.n	800db94 <_printf_float+0xf0>
 800dc12:	2301      	movs	r3, #1
 800dc14:	e7bd      	b.n	800db92 <_printf_float+0xee>
 800dc16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc1a:	d9db      	bls.n	800dbd4 <_printf_float+0x130>
 800dc1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dc20:	d118      	bne.n	800dc54 <_printf_float+0x1b0>
 800dc22:	2900      	cmp	r1, #0
 800dc24:	6863      	ldr	r3, [r4, #4]
 800dc26:	dd0b      	ble.n	800dc40 <_printf_float+0x19c>
 800dc28:	6121      	str	r1, [r4, #16]
 800dc2a:	b913      	cbnz	r3, 800dc32 <_printf_float+0x18e>
 800dc2c:	6822      	ldr	r2, [r4, #0]
 800dc2e:	07d0      	lsls	r0, r2, #31
 800dc30:	d502      	bpl.n	800dc38 <_printf_float+0x194>
 800dc32:	3301      	adds	r3, #1
 800dc34:	440b      	add	r3, r1
 800dc36:	6123      	str	r3, [r4, #16]
 800dc38:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dc3a:	f04f 0900 	mov.w	r9, #0
 800dc3e:	e7db      	b.n	800dbf8 <_printf_float+0x154>
 800dc40:	b913      	cbnz	r3, 800dc48 <_printf_float+0x1a4>
 800dc42:	6822      	ldr	r2, [r4, #0]
 800dc44:	07d2      	lsls	r2, r2, #31
 800dc46:	d501      	bpl.n	800dc4c <_printf_float+0x1a8>
 800dc48:	3302      	adds	r3, #2
 800dc4a:	e7f4      	b.n	800dc36 <_printf_float+0x192>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e7f2      	b.n	800dc36 <_printf_float+0x192>
 800dc50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dc54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc56:	4299      	cmp	r1, r3
 800dc58:	db05      	blt.n	800dc66 <_printf_float+0x1c2>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	6121      	str	r1, [r4, #16]
 800dc5e:	07d8      	lsls	r0, r3, #31
 800dc60:	d5ea      	bpl.n	800dc38 <_printf_float+0x194>
 800dc62:	1c4b      	adds	r3, r1, #1
 800dc64:	e7e7      	b.n	800dc36 <_printf_float+0x192>
 800dc66:	2900      	cmp	r1, #0
 800dc68:	bfd4      	ite	le
 800dc6a:	f1c1 0202 	rsble	r2, r1, #2
 800dc6e:	2201      	movgt	r2, #1
 800dc70:	4413      	add	r3, r2
 800dc72:	e7e0      	b.n	800dc36 <_printf_float+0x192>
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	055a      	lsls	r2, r3, #21
 800dc78:	d407      	bmi.n	800dc8a <_printf_float+0x1e6>
 800dc7a:	6923      	ldr	r3, [r4, #16]
 800dc7c:	4642      	mov	r2, r8
 800dc7e:	4631      	mov	r1, r6
 800dc80:	4628      	mov	r0, r5
 800dc82:	47b8      	blx	r7
 800dc84:	3001      	adds	r0, #1
 800dc86:	d12b      	bne.n	800dce0 <_printf_float+0x23c>
 800dc88:	e767      	b.n	800db5a <_printf_float+0xb6>
 800dc8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc8e:	f240 80dd 	bls.w	800de4c <_printf_float+0x3a8>
 800dc92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dc96:	2200      	movs	r2, #0
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f7f2 ff25 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d033      	beq.n	800dd0a <_printf_float+0x266>
 800dca2:	4a37      	ldr	r2, [pc, #220]	@ (800dd80 <_printf_float+0x2dc>)
 800dca4:	2301      	movs	r3, #1
 800dca6:	4631      	mov	r1, r6
 800dca8:	4628      	mov	r0, r5
 800dcaa:	47b8      	blx	r7
 800dcac:	3001      	adds	r0, #1
 800dcae:	f43f af54 	beq.w	800db5a <_printf_float+0xb6>
 800dcb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dcb6:	4543      	cmp	r3, r8
 800dcb8:	db02      	blt.n	800dcc0 <_printf_float+0x21c>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	07d8      	lsls	r0, r3, #31
 800dcbe:	d50f      	bpl.n	800dce0 <_printf_float+0x23c>
 800dcc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	47b8      	blx	r7
 800dcca:	3001      	adds	r0, #1
 800dccc:	f43f af45 	beq.w	800db5a <_printf_float+0xb6>
 800dcd0:	f04f 0900 	mov.w	r9, #0
 800dcd4:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcd8:	f104 0a1a 	add.w	sl, r4, #26
 800dcdc:	45c8      	cmp	r8, r9
 800dcde:	dc09      	bgt.n	800dcf4 <_printf_float+0x250>
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	079b      	lsls	r3, r3, #30
 800dce4:	f100 8103 	bmi.w	800deee <_printf_float+0x44a>
 800dce8:	68e0      	ldr	r0, [r4, #12]
 800dcea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcec:	4298      	cmp	r0, r3
 800dcee:	bfb8      	it	lt
 800dcf0:	4618      	movlt	r0, r3
 800dcf2:	e734      	b.n	800db5e <_printf_float+0xba>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	4652      	mov	r2, sl
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b8      	blx	r7
 800dcfe:	3001      	adds	r0, #1
 800dd00:	f43f af2b 	beq.w	800db5a <_printf_float+0xb6>
 800dd04:	f109 0901 	add.w	r9, r9, #1
 800dd08:	e7e8      	b.n	800dcdc <_printf_float+0x238>
 800dd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	dc39      	bgt.n	800dd84 <_printf_float+0x2e0>
 800dd10:	4a1b      	ldr	r2, [pc, #108]	@ (800dd80 <_printf_float+0x2dc>)
 800dd12:	2301      	movs	r3, #1
 800dd14:	4631      	mov	r1, r6
 800dd16:	4628      	mov	r0, r5
 800dd18:	47b8      	blx	r7
 800dd1a:	3001      	adds	r0, #1
 800dd1c:	f43f af1d 	beq.w	800db5a <_printf_float+0xb6>
 800dd20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dd24:	ea59 0303 	orrs.w	r3, r9, r3
 800dd28:	d102      	bne.n	800dd30 <_printf_float+0x28c>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	07d9      	lsls	r1, r3, #31
 800dd2e:	d5d7      	bpl.n	800dce0 <_printf_float+0x23c>
 800dd30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd34:	4631      	mov	r1, r6
 800dd36:	4628      	mov	r0, r5
 800dd38:	47b8      	blx	r7
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	f43f af0d 	beq.w	800db5a <_printf_float+0xb6>
 800dd40:	f04f 0a00 	mov.w	sl, #0
 800dd44:	f104 0b1a 	add.w	fp, r4, #26
 800dd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4a:	425b      	negs	r3, r3
 800dd4c:	4553      	cmp	r3, sl
 800dd4e:	dc01      	bgt.n	800dd54 <_printf_float+0x2b0>
 800dd50:	464b      	mov	r3, r9
 800dd52:	e793      	b.n	800dc7c <_printf_float+0x1d8>
 800dd54:	2301      	movs	r3, #1
 800dd56:	465a      	mov	r2, fp
 800dd58:	4631      	mov	r1, r6
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	47b8      	blx	r7
 800dd5e:	3001      	adds	r0, #1
 800dd60:	f43f aefb 	beq.w	800db5a <_printf_float+0xb6>
 800dd64:	f10a 0a01 	add.w	sl, sl, #1
 800dd68:	e7ee      	b.n	800dd48 <_printf_float+0x2a4>
 800dd6a:	bf00      	nop
 800dd6c:	7fefffff 	.word	0x7fefffff
 800dd70:	0803e105 	.word	0x0803e105
 800dd74:	0803e101 	.word	0x0803e101
 800dd78:	0803e10d 	.word	0x0803e10d
 800dd7c:	0803e109 	.word	0x0803e109
 800dd80:	0803e339 	.word	0x0803e339
 800dd84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd8a:	4553      	cmp	r3, sl
 800dd8c:	bfa8      	it	ge
 800dd8e:	4653      	movge	r3, sl
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	4699      	mov	r9, r3
 800dd94:	dc36      	bgt.n	800de04 <_printf_float+0x360>
 800dd96:	f04f 0b00 	mov.w	fp, #0
 800dd9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd9e:	f104 021a 	add.w	r2, r4, #26
 800dda2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dda4:	9306      	str	r3, [sp, #24]
 800dda6:	eba3 0309 	sub.w	r3, r3, r9
 800ddaa:	455b      	cmp	r3, fp
 800ddac:	dc31      	bgt.n	800de12 <_printf_float+0x36e>
 800ddae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddb0:	459a      	cmp	sl, r3
 800ddb2:	dc3a      	bgt.n	800de2a <_printf_float+0x386>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	07da      	lsls	r2, r3, #31
 800ddb8:	d437      	bmi.n	800de2a <_printf_float+0x386>
 800ddba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddbc:	ebaa 0903 	sub.w	r9, sl, r3
 800ddc0:	9b06      	ldr	r3, [sp, #24]
 800ddc2:	ebaa 0303 	sub.w	r3, sl, r3
 800ddc6:	4599      	cmp	r9, r3
 800ddc8:	bfa8      	it	ge
 800ddca:	4699      	movge	r9, r3
 800ddcc:	f1b9 0f00 	cmp.w	r9, #0
 800ddd0:	dc33      	bgt.n	800de3a <_printf_float+0x396>
 800ddd2:	f04f 0800 	mov.w	r8, #0
 800ddd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddda:	f104 0b1a 	add.w	fp, r4, #26
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	ebaa 0303 	sub.w	r3, sl, r3
 800dde4:	eba3 0309 	sub.w	r3, r3, r9
 800dde8:	4543      	cmp	r3, r8
 800ddea:	f77f af79 	ble.w	800dce0 <_printf_float+0x23c>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	465a      	mov	r2, fp
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	47b8      	blx	r7
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	f43f aeae 	beq.w	800db5a <_printf_float+0xb6>
 800ddfe:	f108 0801 	add.w	r8, r8, #1
 800de02:	e7ec      	b.n	800ddde <_printf_float+0x33a>
 800de04:	4642      	mov	r2, r8
 800de06:	4631      	mov	r1, r6
 800de08:	4628      	mov	r0, r5
 800de0a:	47b8      	blx	r7
 800de0c:	3001      	adds	r0, #1
 800de0e:	d1c2      	bne.n	800dd96 <_printf_float+0x2f2>
 800de10:	e6a3      	b.n	800db5a <_printf_float+0xb6>
 800de12:	2301      	movs	r3, #1
 800de14:	4631      	mov	r1, r6
 800de16:	4628      	mov	r0, r5
 800de18:	9206      	str	r2, [sp, #24]
 800de1a:	47b8      	blx	r7
 800de1c:	3001      	adds	r0, #1
 800de1e:	f43f ae9c 	beq.w	800db5a <_printf_float+0xb6>
 800de22:	9a06      	ldr	r2, [sp, #24]
 800de24:	f10b 0b01 	add.w	fp, fp, #1
 800de28:	e7bb      	b.n	800dda2 <_printf_float+0x2fe>
 800de2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de2e:	4631      	mov	r1, r6
 800de30:	4628      	mov	r0, r5
 800de32:	47b8      	blx	r7
 800de34:	3001      	adds	r0, #1
 800de36:	d1c0      	bne.n	800ddba <_printf_float+0x316>
 800de38:	e68f      	b.n	800db5a <_printf_float+0xb6>
 800de3a:	9a06      	ldr	r2, [sp, #24]
 800de3c:	464b      	mov	r3, r9
 800de3e:	4442      	add	r2, r8
 800de40:	4631      	mov	r1, r6
 800de42:	4628      	mov	r0, r5
 800de44:	47b8      	blx	r7
 800de46:	3001      	adds	r0, #1
 800de48:	d1c3      	bne.n	800ddd2 <_printf_float+0x32e>
 800de4a:	e686      	b.n	800db5a <_printf_float+0xb6>
 800de4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800de50:	f1ba 0f01 	cmp.w	sl, #1
 800de54:	dc01      	bgt.n	800de5a <_printf_float+0x3b6>
 800de56:	07db      	lsls	r3, r3, #31
 800de58:	d536      	bpl.n	800dec8 <_printf_float+0x424>
 800de5a:	2301      	movs	r3, #1
 800de5c:	4642      	mov	r2, r8
 800de5e:	4631      	mov	r1, r6
 800de60:	4628      	mov	r0, r5
 800de62:	47b8      	blx	r7
 800de64:	3001      	adds	r0, #1
 800de66:	f43f ae78 	beq.w	800db5a <_printf_float+0xb6>
 800de6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de6e:	4631      	mov	r1, r6
 800de70:	4628      	mov	r0, r5
 800de72:	47b8      	blx	r7
 800de74:	3001      	adds	r0, #1
 800de76:	f43f ae70 	beq.w	800db5a <_printf_float+0xb6>
 800de7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800de7e:	2200      	movs	r2, #0
 800de80:	2300      	movs	r3, #0
 800de82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de86:	f7f2 fe2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800de8a:	b9c0      	cbnz	r0, 800debe <_printf_float+0x41a>
 800de8c:	4653      	mov	r3, sl
 800de8e:	f108 0201 	add.w	r2, r8, #1
 800de92:	4631      	mov	r1, r6
 800de94:	4628      	mov	r0, r5
 800de96:	47b8      	blx	r7
 800de98:	3001      	adds	r0, #1
 800de9a:	d10c      	bne.n	800deb6 <_printf_float+0x412>
 800de9c:	e65d      	b.n	800db5a <_printf_float+0xb6>
 800de9e:	2301      	movs	r3, #1
 800dea0:	465a      	mov	r2, fp
 800dea2:	4631      	mov	r1, r6
 800dea4:	4628      	mov	r0, r5
 800dea6:	47b8      	blx	r7
 800dea8:	3001      	adds	r0, #1
 800deaa:	f43f ae56 	beq.w	800db5a <_printf_float+0xb6>
 800deae:	f108 0801 	add.w	r8, r8, #1
 800deb2:	45d0      	cmp	r8, sl
 800deb4:	dbf3      	blt.n	800de9e <_printf_float+0x3fa>
 800deb6:	464b      	mov	r3, r9
 800deb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800debc:	e6df      	b.n	800dc7e <_printf_float+0x1da>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	f104 0b1a 	add.w	fp, r4, #26
 800dec6:	e7f4      	b.n	800deb2 <_printf_float+0x40e>
 800dec8:	2301      	movs	r3, #1
 800deca:	4642      	mov	r2, r8
 800decc:	e7e1      	b.n	800de92 <_printf_float+0x3ee>
 800dece:	2301      	movs	r3, #1
 800ded0:	464a      	mov	r2, r9
 800ded2:	4631      	mov	r1, r6
 800ded4:	4628      	mov	r0, r5
 800ded6:	47b8      	blx	r7
 800ded8:	3001      	adds	r0, #1
 800deda:	f43f ae3e 	beq.w	800db5a <_printf_float+0xb6>
 800dede:	f108 0801 	add.w	r8, r8, #1
 800dee2:	68e3      	ldr	r3, [r4, #12]
 800dee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dee6:	1a5b      	subs	r3, r3, r1
 800dee8:	4543      	cmp	r3, r8
 800deea:	dcf0      	bgt.n	800dece <_printf_float+0x42a>
 800deec:	e6fc      	b.n	800dce8 <_printf_float+0x244>
 800deee:	f04f 0800 	mov.w	r8, #0
 800def2:	f104 0919 	add.w	r9, r4, #25
 800def6:	e7f4      	b.n	800dee2 <_printf_float+0x43e>

0800def8 <_printf_common>:
 800def8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800defc:	4616      	mov	r6, r2
 800defe:	4698      	mov	r8, r3
 800df00:	688a      	ldr	r2, [r1, #8]
 800df02:	690b      	ldr	r3, [r1, #16]
 800df04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df08:	4293      	cmp	r3, r2
 800df0a:	bfb8      	it	lt
 800df0c:	4613      	movlt	r3, r2
 800df0e:	6033      	str	r3, [r6, #0]
 800df10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df14:	4607      	mov	r7, r0
 800df16:	460c      	mov	r4, r1
 800df18:	b10a      	cbz	r2, 800df1e <_printf_common+0x26>
 800df1a:	3301      	adds	r3, #1
 800df1c:	6033      	str	r3, [r6, #0]
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	0699      	lsls	r1, r3, #26
 800df22:	bf42      	ittt	mi
 800df24:	6833      	ldrmi	r3, [r6, #0]
 800df26:	3302      	addmi	r3, #2
 800df28:	6033      	strmi	r3, [r6, #0]
 800df2a:	6825      	ldr	r5, [r4, #0]
 800df2c:	f015 0506 	ands.w	r5, r5, #6
 800df30:	d106      	bne.n	800df40 <_printf_common+0x48>
 800df32:	f104 0a19 	add.w	sl, r4, #25
 800df36:	68e3      	ldr	r3, [r4, #12]
 800df38:	6832      	ldr	r2, [r6, #0]
 800df3a:	1a9b      	subs	r3, r3, r2
 800df3c:	42ab      	cmp	r3, r5
 800df3e:	dc26      	bgt.n	800df8e <_printf_common+0x96>
 800df40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df44:	6822      	ldr	r2, [r4, #0]
 800df46:	3b00      	subs	r3, #0
 800df48:	bf18      	it	ne
 800df4a:	2301      	movne	r3, #1
 800df4c:	0692      	lsls	r2, r2, #26
 800df4e:	d42b      	bmi.n	800dfa8 <_printf_common+0xb0>
 800df50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df54:	4641      	mov	r1, r8
 800df56:	4638      	mov	r0, r7
 800df58:	47c8      	blx	r9
 800df5a:	3001      	adds	r0, #1
 800df5c:	d01e      	beq.n	800df9c <_printf_common+0xa4>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	6922      	ldr	r2, [r4, #16]
 800df62:	f003 0306 	and.w	r3, r3, #6
 800df66:	2b04      	cmp	r3, #4
 800df68:	bf02      	ittt	eq
 800df6a:	68e5      	ldreq	r5, [r4, #12]
 800df6c:	6833      	ldreq	r3, [r6, #0]
 800df6e:	1aed      	subeq	r5, r5, r3
 800df70:	68a3      	ldr	r3, [r4, #8]
 800df72:	bf0c      	ite	eq
 800df74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df78:	2500      	movne	r5, #0
 800df7a:	4293      	cmp	r3, r2
 800df7c:	bfc4      	itt	gt
 800df7e:	1a9b      	subgt	r3, r3, r2
 800df80:	18ed      	addgt	r5, r5, r3
 800df82:	2600      	movs	r6, #0
 800df84:	341a      	adds	r4, #26
 800df86:	42b5      	cmp	r5, r6
 800df88:	d11a      	bne.n	800dfc0 <_printf_common+0xc8>
 800df8a:	2000      	movs	r0, #0
 800df8c:	e008      	b.n	800dfa0 <_printf_common+0xa8>
 800df8e:	2301      	movs	r3, #1
 800df90:	4652      	mov	r2, sl
 800df92:	4641      	mov	r1, r8
 800df94:	4638      	mov	r0, r7
 800df96:	47c8      	blx	r9
 800df98:	3001      	adds	r0, #1
 800df9a:	d103      	bne.n	800dfa4 <_printf_common+0xac>
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfa4:	3501      	adds	r5, #1
 800dfa6:	e7c6      	b.n	800df36 <_printf_common+0x3e>
 800dfa8:	18e1      	adds	r1, r4, r3
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	2030      	movs	r0, #48	@ 0x30
 800dfae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dfb2:	4422      	add	r2, r4
 800dfb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dfb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dfbc:	3302      	adds	r3, #2
 800dfbe:	e7c7      	b.n	800df50 <_printf_common+0x58>
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	4641      	mov	r1, r8
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	47c8      	blx	r9
 800dfca:	3001      	adds	r0, #1
 800dfcc:	d0e6      	beq.n	800df9c <_printf_common+0xa4>
 800dfce:	3601      	adds	r6, #1
 800dfd0:	e7d9      	b.n	800df86 <_printf_common+0x8e>
	...

0800dfd4 <_printf_i>:
 800dfd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd8:	7e0f      	ldrb	r7, [r1, #24]
 800dfda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfdc:	2f78      	cmp	r7, #120	@ 0x78
 800dfde:	4691      	mov	r9, r2
 800dfe0:	4680      	mov	r8, r0
 800dfe2:	460c      	mov	r4, r1
 800dfe4:	469a      	mov	sl, r3
 800dfe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfea:	d807      	bhi.n	800dffc <_printf_i+0x28>
 800dfec:	2f62      	cmp	r7, #98	@ 0x62
 800dfee:	d80a      	bhi.n	800e006 <_printf_i+0x32>
 800dff0:	2f00      	cmp	r7, #0
 800dff2:	f000 80d1 	beq.w	800e198 <_printf_i+0x1c4>
 800dff6:	2f58      	cmp	r7, #88	@ 0x58
 800dff8:	f000 80b8 	beq.w	800e16c <_printf_i+0x198>
 800dffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e004:	e03a      	b.n	800e07c <_printf_i+0xa8>
 800e006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e00a:	2b15      	cmp	r3, #21
 800e00c:	d8f6      	bhi.n	800dffc <_printf_i+0x28>
 800e00e:	a101      	add	r1, pc, #4	@ (adr r1, 800e014 <_printf_i+0x40>)
 800e010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e014:	0800e06d 	.word	0x0800e06d
 800e018:	0800e081 	.word	0x0800e081
 800e01c:	0800dffd 	.word	0x0800dffd
 800e020:	0800dffd 	.word	0x0800dffd
 800e024:	0800dffd 	.word	0x0800dffd
 800e028:	0800dffd 	.word	0x0800dffd
 800e02c:	0800e081 	.word	0x0800e081
 800e030:	0800dffd 	.word	0x0800dffd
 800e034:	0800dffd 	.word	0x0800dffd
 800e038:	0800dffd 	.word	0x0800dffd
 800e03c:	0800dffd 	.word	0x0800dffd
 800e040:	0800e17f 	.word	0x0800e17f
 800e044:	0800e0ab 	.word	0x0800e0ab
 800e048:	0800e139 	.word	0x0800e139
 800e04c:	0800dffd 	.word	0x0800dffd
 800e050:	0800dffd 	.word	0x0800dffd
 800e054:	0800e1a1 	.word	0x0800e1a1
 800e058:	0800dffd 	.word	0x0800dffd
 800e05c:	0800e0ab 	.word	0x0800e0ab
 800e060:	0800dffd 	.word	0x0800dffd
 800e064:	0800dffd 	.word	0x0800dffd
 800e068:	0800e141 	.word	0x0800e141
 800e06c:	6833      	ldr	r3, [r6, #0]
 800e06e:	1d1a      	adds	r2, r3, #4
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6032      	str	r2, [r6, #0]
 800e074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e07c:	2301      	movs	r3, #1
 800e07e:	e09c      	b.n	800e1ba <_printf_i+0x1e6>
 800e080:	6833      	ldr	r3, [r6, #0]
 800e082:	6820      	ldr	r0, [r4, #0]
 800e084:	1d19      	adds	r1, r3, #4
 800e086:	6031      	str	r1, [r6, #0]
 800e088:	0606      	lsls	r6, r0, #24
 800e08a:	d501      	bpl.n	800e090 <_printf_i+0xbc>
 800e08c:	681d      	ldr	r5, [r3, #0]
 800e08e:	e003      	b.n	800e098 <_printf_i+0xc4>
 800e090:	0645      	lsls	r5, r0, #25
 800e092:	d5fb      	bpl.n	800e08c <_printf_i+0xb8>
 800e094:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e098:	2d00      	cmp	r5, #0
 800e09a:	da03      	bge.n	800e0a4 <_printf_i+0xd0>
 800e09c:	232d      	movs	r3, #45	@ 0x2d
 800e09e:	426d      	negs	r5, r5
 800e0a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0a4:	4858      	ldr	r0, [pc, #352]	@ (800e208 <_printf_i+0x234>)
 800e0a6:	230a      	movs	r3, #10
 800e0a8:	e011      	b.n	800e0ce <_printf_i+0xfa>
 800e0aa:	6821      	ldr	r1, [r4, #0]
 800e0ac:	6833      	ldr	r3, [r6, #0]
 800e0ae:	0608      	lsls	r0, r1, #24
 800e0b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0b4:	d402      	bmi.n	800e0bc <_printf_i+0xe8>
 800e0b6:	0649      	lsls	r1, r1, #25
 800e0b8:	bf48      	it	mi
 800e0ba:	b2ad      	uxthmi	r5, r5
 800e0bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0be:	4852      	ldr	r0, [pc, #328]	@ (800e208 <_printf_i+0x234>)
 800e0c0:	6033      	str	r3, [r6, #0]
 800e0c2:	bf14      	ite	ne
 800e0c4:	230a      	movne	r3, #10
 800e0c6:	2308      	moveq	r3, #8
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0ce:	6866      	ldr	r6, [r4, #4]
 800e0d0:	60a6      	str	r6, [r4, #8]
 800e0d2:	2e00      	cmp	r6, #0
 800e0d4:	db05      	blt.n	800e0e2 <_printf_i+0x10e>
 800e0d6:	6821      	ldr	r1, [r4, #0]
 800e0d8:	432e      	orrs	r6, r5
 800e0da:	f021 0104 	bic.w	r1, r1, #4
 800e0de:	6021      	str	r1, [r4, #0]
 800e0e0:	d04b      	beq.n	800e17a <_printf_i+0x1a6>
 800e0e2:	4616      	mov	r6, r2
 800e0e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0e8:	fb03 5711 	mls	r7, r3, r1, r5
 800e0ec:	5dc7      	ldrb	r7, [r0, r7]
 800e0ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0f2:	462f      	mov	r7, r5
 800e0f4:	42bb      	cmp	r3, r7
 800e0f6:	460d      	mov	r5, r1
 800e0f8:	d9f4      	bls.n	800e0e4 <_printf_i+0x110>
 800e0fa:	2b08      	cmp	r3, #8
 800e0fc:	d10b      	bne.n	800e116 <_printf_i+0x142>
 800e0fe:	6823      	ldr	r3, [r4, #0]
 800e100:	07df      	lsls	r7, r3, #31
 800e102:	d508      	bpl.n	800e116 <_printf_i+0x142>
 800e104:	6923      	ldr	r3, [r4, #16]
 800e106:	6861      	ldr	r1, [r4, #4]
 800e108:	4299      	cmp	r1, r3
 800e10a:	bfde      	ittt	le
 800e10c:	2330      	movle	r3, #48	@ 0x30
 800e10e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e112:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e116:	1b92      	subs	r2, r2, r6
 800e118:	6122      	str	r2, [r4, #16]
 800e11a:	f8cd a000 	str.w	sl, [sp]
 800e11e:	464b      	mov	r3, r9
 800e120:	aa03      	add	r2, sp, #12
 800e122:	4621      	mov	r1, r4
 800e124:	4640      	mov	r0, r8
 800e126:	f7ff fee7 	bl	800def8 <_printf_common>
 800e12a:	3001      	adds	r0, #1
 800e12c:	d14a      	bne.n	800e1c4 <_printf_i+0x1f0>
 800e12e:	f04f 30ff 	mov.w	r0, #4294967295
 800e132:	b004      	add	sp, #16
 800e134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e138:	6823      	ldr	r3, [r4, #0]
 800e13a:	f043 0320 	orr.w	r3, r3, #32
 800e13e:	6023      	str	r3, [r4, #0]
 800e140:	4832      	ldr	r0, [pc, #200]	@ (800e20c <_printf_i+0x238>)
 800e142:	2778      	movs	r7, #120	@ 0x78
 800e144:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	6831      	ldr	r1, [r6, #0]
 800e14c:	061f      	lsls	r7, r3, #24
 800e14e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e152:	d402      	bmi.n	800e15a <_printf_i+0x186>
 800e154:	065f      	lsls	r7, r3, #25
 800e156:	bf48      	it	mi
 800e158:	b2ad      	uxthmi	r5, r5
 800e15a:	6031      	str	r1, [r6, #0]
 800e15c:	07d9      	lsls	r1, r3, #31
 800e15e:	bf44      	itt	mi
 800e160:	f043 0320 	orrmi.w	r3, r3, #32
 800e164:	6023      	strmi	r3, [r4, #0]
 800e166:	b11d      	cbz	r5, 800e170 <_printf_i+0x19c>
 800e168:	2310      	movs	r3, #16
 800e16a:	e7ad      	b.n	800e0c8 <_printf_i+0xf4>
 800e16c:	4826      	ldr	r0, [pc, #152]	@ (800e208 <_printf_i+0x234>)
 800e16e:	e7e9      	b.n	800e144 <_printf_i+0x170>
 800e170:	6823      	ldr	r3, [r4, #0]
 800e172:	f023 0320 	bic.w	r3, r3, #32
 800e176:	6023      	str	r3, [r4, #0]
 800e178:	e7f6      	b.n	800e168 <_printf_i+0x194>
 800e17a:	4616      	mov	r6, r2
 800e17c:	e7bd      	b.n	800e0fa <_printf_i+0x126>
 800e17e:	6833      	ldr	r3, [r6, #0]
 800e180:	6825      	ldr	r5, [r4, #0]
 800e182:	6961      	ldr	r1, [r4, #20]
 800e184:	1d18      	adds	r0, r3, #4
 800e186:	6030      	str	r0, [r6, #0]
 800e188:	062e      	lsls	r6, r5, #24
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	d501      	bpl.n	800e192 <_printf_i+0x1be>
 800e18e:	6019      	str	r1, [r3, #0]
 800e190:	e002      	b.n	800e198 <_printf_i+0x1c4>
 800e192:	0668      	lsls	r0, r5, #25
 800e194:	d5fb      	bpl.n	800e18e <_printf_i+0x1ba>
 800e196:	8019      	strh	r1, [r3, #0]
 800e198:	2300      	movs	r3, #0
 800e19a:	6123      	str	r3, [r4, #16]
 800e19c:	4616      	mov	r6, r2
 800e19e:	e7bc      	b.n	800e11a <_printf_i+0x146>
 800e1a0:	6833      	ldr	r3, [r6, #0]
 800e1a2:	1d1a      	adds	r2, r3, #4
 800e1a4:	6032      	str	r2, [r6, #0]
 800e1a6:	681e      	ldr	r6, [r3, #0]
 800e1a8:	6862      	ldr	r2, [r4, #4]
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	f7f2 f81f 	bl	80001f0 <memchr>
 800e1b2:	b108      	cbz	r0, 800e1b8 <_printf_i+0x1e4>
 800e1b4:	1b80      	subs	r0, r0, r6
 800e1b6:	6060      	str	r0, [r4, #4]
 800e1b8:	6863      	ldr	r3, [r4, #4]
 800e1ba:	6123      	str	r3, [r4, #16]
 800e1bc:	2300      	movs	r3, #0
 800e1be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1c2:	e7aa      	b.n	800e11a <_printf_i+0x146>
 800e1c4:	6923      	ldr	r3, [r4, #16]
 800e1c6:	4632      	mov	r2, r6
 800e1c8:	4649      	mov	r1, r9
 800e1ca:	4640      	mov	r0, r8
 800e1cc:	47d0      	blx	sl
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	d0ad      	beq.n	800e12e <_printf_i+0x15a>
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	079b      	lsls	r3, r3, #30
 800e1d6:	d413      	bmi.n	800e200 <_printf_i+0x22c>
 800e1d8:	68e0      	ldr	r0, [r4, #12]
 800e1da:	9b03      	ldr	r3, [sp, #12]
 800e1dc:	4298      	cmp	r0, r3
 800e1de:	bfb8      	it	lt
 800e1e0:	4618      	movlt	r0, r3
 800e1e2:	e7a6      	b.n	800e132 <_printf_i+0x15e>
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	4632      	mov	r2, r6
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	4640      	mov	r0, r8
 800e1ec:	47d0      	blx	sl
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	d09d      	beq.n	800e12e <_printf_i+0x15a>
 800e1f2:	3501      	adds	r5, #1
 800e1f4:	68e3      	ldr	r3, [r4, #12]
 800e1f6:	9903      	ldr	r1, [sp, #12]
 800e1f8:	1a5b      	subs	r3, r3, r1
 800e1fa:	42ab      	cmp	r3, r5
 800e1fc:	dcf2      	bgt.n	800e1e4 <_printf_i+0x210>
 800e1fe:	e7eb      	b.n	800e1d8 <_printf_i+0x204>
 800e200:	2500      	movs	r5, #0
 800e202:	f104 0619 	add.w	r6, r4, #25
 800e206:	e7f5      	b.n	800e1f4 <_printf_i+0x220>
 800e208:	0803e111 	.word	0x0803e111
 800e20c:	0803e122 	.word	0x0803e122

0800e210 <_scanf_float>:
 800e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e214:	b087      	sub	sp, #28
 800e216:	4691      	mov	r9, r2
 800e218:	9303      	str	r3, [sp, #12]
 800e21a:	688b      	ldr	r3, [r1, #8]
 800e21c:	1e5a      	subs	r2, r3, #1
 800e21e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e222:	bf81      	itttt	hi
 800e224:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e228:	eb03 0b05 	addhi.w	fp, r3, r5
 800e22c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e230:	608b      	strhi	r3, [r1, #8]
 800e232:	680b      	ldr	r3, [r1, #0]
 800e234:	460a      	mov	r2, r1
 800e236:	f04f 0500 	mov.w	r5, #0
 800e23a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e23e:	f842 3b1c 	str.w	r3, [r2], #28
 800e242:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e246:	4680      	mov	r8, r0
 800e248:	460c      	mov	r4, r1
 800e24a:	bf98      	it	ls
 800e24c:	f04f 0b00 	movls.w	fp, #0
 800e250:	9201      	str	r2, [sp, #4]
 800e252:	4616      	mov	r6, r2
 800e254:	46aa      	mov	sl, r5
 800e256:	462f      	mov	r7, r5
 800e258:	9502      	str	r5, [sp, #8]
 800e25a:	68a2      	ldr	r2, [r4, #8]
 800e25c:	b15a      	cbz	r2, 800e276 <_scanf_float+0x66>
 800e25e:	f8d9 3000 	ldr.w	r3, [r9]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b4e      	cmp	r3, #78	@ 0x4e
 800e266:	d863      	bhi.n	800e330 <_scanf_float+0x120>
 800e268:	2b40      	cmp	r3, #64	@ 0x40
 800e26a:	d83b      	bhi.n	800e2e4 <_scanf_float+0xd4>
 800e26c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e270:	b2c8      	uxtb	r0, r1
 800e272:	280e      	cmp	r0, #14
 800e274:	d939      	bls.n	800e2ea <_scanf_float+0xda>
 800e276:	b11f      	cbz	r7, 800e280 <_scanf_float+0x70>
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e27e:	6023      	str	r3, [r4, #0]
 800e280:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e284:	f1ba 0f01 	cmp.w	sl, #1
 800e288:	f200 8114 	bhi.w	800e4b4 <_scanf_float+0x2a4>
 800e28c:	9b01      	ldr	r3, [sp, #4]
 800e28e:	429e      	cmp	r6, r3
 800e290:	f200 8105 	bhi.w	800e49e <_scanf_float+0x28e>
 800e294:	2001      	movs	r0, #1
 800e296:	b007      	add	sp, #28
 800e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e2a0:	2a0d      	cmp	r2, #13
 800e2a2:	d8e8      	bhi.n	800e276 <_scanf_float+0x66>
 800e2a4:	a101      	add	r1, pc, #4	@ (adr r1, 800e2ac <_scanf_float+0x9c>)
 800e2a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e2aa:	bf00      	nop
 800e2ac:	0800e3f5 	.word	0x0800e3f5
 800e2b0:	0800e277 	.word	0x0800e277
 800e2b4:	0800e277 	.word	0x0800e277
 800e2b8:	0800e277 	.word	0x0800e277
 800e2bc:	0800e451 	.word	0x0800e451
 800e2c0:	0800e42b 	.word	0x0800e42b
 800e2c4:	0800e277 	.word	0x0800e277
 800e2c8:	0800e277 	.word	0x0800e277
 800e2cc:	0800e403 	.word	0x0800e403
 800e2d0:	0800e277 	.word	0x0800e277
 800e2d4:	0800e277 	.word	0x0800e277
 800e2d8:	0800e277 	.word	0x0800e277
 800e2dc:	0800e277 	.word	0x0800e277
 800e2e0:	0800e3bf 	.word	0x0800e3bf
 800e2e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e2e8:	e7da      	b.n	800e2a0 <_scanf_float+0x90>
 800e2ea:	290e      	cmp	r1, #14
 800e2ec:	d8c3      	bhi.n	800e276 <_scanf_float+0x66>
 800e2ee:	a001      	add	r0, pc, #4	@ (adr r0, 800e2f4 <_scanf_float+0xe4>)
 800e2f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e2f4:	0800e3af 	.word	0x0800e3af
 800e2f8:	0800e277 	.word	0x0800e277
 800e2fc:	0800e3af 	.word	0x0800e3af
 800e300:	0800e43f 	.word	0x0800e43f
 800e304:	0800e277 	.word	0x0800e277
 800e308:	0800e351 	.word	0x0800e351
 800e30c:	0800e395 	.word	0x0800e395
 800e310:	0800e395 	.word	0x0800e395
 800e314:	0800e395 	.word	0x0800e395
 800e318:	0800e395 	.word	0x0800e395
 800e31c:	0800e395 	.word	0x0800e395
 800e320:	0800e395 	.word	0x0800e395
 800e324:	0800e395 	.word	0x0800e395
 800e328:	0800e395 	.word	0x0800e395
 800e32c:	0800e395 	.word	0x0800e395
 800e330:	2b6e      	cmp	r3, #110	@ 0x6e
 800e332:	d809      	bhi.n	800e348 <_scanf_float+0x138>
 800e334:	2b60      	cmp	r3, #96	@ 0x60
 800e336:	d8b1      	bhi.n	800e29c <_scanf_float+0x8c>
 800e338:	2b54      	cmp	r3, #84	@ 0x54
 800e33a:	d07b      	beq.n	800e434 <_scanf_float+0x224>
 800e33c:	2b59      	cmp	r3, #89	@ 0x59
 800e33e:	d19a      	bne.n	800e276 <_scanf_float+0x66>
 800e340:	2d07      	cmp	r5, #7
 800e342:	d198      	bne.n	800e276 <_scanf_float+0x66>
 800e344:	2508      	movs	r5, #8
 800e346:	e02f      	b.n	800e3a8 <_scanf_float+0x198>
 800e348:	2b74      	cmp	r3, #116	@ 0x74
 800e34a:	d073      	beq.n	800e434 <_scanf_float+0x224>
 800e34c:	2b79      	cmp	r3, #121	@ 0x79
 800e34e:	e7f6      	b.n	800e33e <_scanf_float+0x12e>
 800e350:	6821      	ldr	r1, [r4, #0]
 800e352:	05c8      	lsls	r0, r1, #23
 800e354:	d51e      	bpl.n	800e394 <_scanf_float+0x184>
 800e356:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e35a:	6021      	str	r1, [r4, #0]
 800e35c:	3701      	adds	r7, #1
 800e35e:	f1bb 0f00 	cmp.w	fp, #0
 800e362:	d003      	beq.n	800e36c <_scanf_float+0x15c>
 800e364:	3201      	adds	r2, #1
 800e366:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e36a:	60a2      	str	r2, [r4, #8]
 800e36c:	68a3      	ldr	r3, [r4, #8]
 800e36e:	3b01      	subs	r3, #1
 800e370:	60a3      	str	r3, [r4, #8]
 800e372:	6923      	ldr	r3, [r4, #16]
 800e374:	3301      	adds	r3, #1
 800e376:	6123      	str	r3, [r4, #16]
 800e378:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f8c9 3004 	str.w	r3, [r9, #4]
 800e384:	f340 8082 	ble.w	800e48c <_scanf_float+0x27c>
 800e388:	f8d9 3000 	ldr.w	r3, [r9]
 800e38c:	3301      	adds	r3, #1
 800e38e:	f8c9 3000 	str.w	r3, [r9]
 800e392:	e762      	b.n	800e25a <_scanf_float+0x4a>
 800e394:	eb1a 0105 	adds.w	r1, sl, r5
 800e398:	f47f af6d 	bne.w	800e276 <_scanf_float+0x66>
 800e39c:	6822      	ldr	r2, [r4, #0]
 800e39e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e3a2:	6022      	str	r2, [r4, #0]
 800e3a4:	460d      	mov	r5, r1
 800e3a6:	468a      	mov	sl, r1
 800e3a8:	f806 3b01 	strb.w	r3, [r6], #1
 800e3ac:	e7de      	b.n	800e36c <_scanf_float+0x15c>
 800e3ae:	6822      	ldr	r2, [r4, #0]
 800e3b0:	0610      	lsls	r0, r2, #24
 800e3b2:	f57f af60 	bpl.w	800e276 <_scanf_float+0x66>
 800e3b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e3ba:	6022      	str	r2, [r4, #0]
 800e3bc:	e7f4      	b.n	800e3a8 <_scanf_float+0x198>
 800e3be:	f1ba 0f00 	cmp.w	sl, #0
 800e3c2:	d10c      	bne.n	800e3de <_scanf_float+0x1ce>
 800e3c4:	b977      	cbnz	r7, 800e3e4 <_scanf_float+0x1d4>
 800e3c6:	6822      	ldr	r2, [r4, #0]
 800e3c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e3cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e3d0:	d108      	bne.n	800e3e4 <_scanf_float+0x1d4>
 800e3d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e3d6:	6022      	str	r2, [r4, #0]
 800e3d8:	f04f 0a01 	mov.w	sl, #1
 800e3dc:	e7e4      	b.n	800e3a8 <_scanf_float+0x198>
 800e3de:	f1ba 0f02 	cmp.w	sl, #2
 800e3e2:	d050      	beq.n	800e486 <_scanf_float+0x276>
 800e3e4:	2d01      	cmp	r5, #1
 800e3e6:	d002      	beq.n	800e3ee <_scanf_float+0x1de>
 800e3e8:	2d04      	cmp	r5, #4
 800e3ea:	f47f af44 	bne.w	800e276 <_scanf_float+0x66>
 800e3ee:	3501      	adds	r5, #1
 800e3f0:	b2ed      	uxtb	r5, r5
 800e3f2:	e7d9      	b.n	800e3a8 <_scanf_float+0x198>
 800e3f4:	f1ba 0f01 	cmp.w	sl, #1
 800e3f8:	f47f af3d 	bne.w	800e276 <_scanf_float+0x66>
 800e3fc:	f04f 0a02 	mov.w	sl, #2
 800e400:	e7d2      	b.n	800e3a8 <_scanf_float+0x198>
 800e402:	b975      	cbnz	r5, 800e422 <_scanf_float+0x212>
 800e404:	2f00      	cmp	r7, #0
 800e406:	f47f af37 	bne.w	800e278 <_scanf_float+0x68>
 800e40a:	6822      	ldr	r2, [r4, #0]
 800e40c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e410:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e414:	f040 8103 	bne.w	800e61e <_scanf_float+0x40e>
 800e418:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e41c:	6022      	str	r2, [r4, #0]
 800e41e:	2501      	movs	r5, #1
 800e420:	e7c2      	b.n	800e3a8 <_scanf_float+0x198>
 800e422:	2d03      	cmp	r5, #3
 800e424:	d0e3      	beq.n	800e3ee <_scanf_float+0x1de>
 800e426:	2d05      	cmp	r5, #5
 800e428:	e7df      	b.n	800e3ea <_scanf_float+0x1da>
 800e42a:	2d02      	cmp	r5, #2
 800e42c:	f47f af23 	bne.w	800e276 <_scanf_float+0x66>
 800e430:	2503      	movs	r5, #3
 800e432:	e7b9      	b.n	800e3a8 <_scanf_float+0x198>
 800e434:	2d06      	cmp	r5, #6
 800e436:	f47f af1e 	bne.w	800e276 <_scanf_float+0x66>
 800e43a:	2507      	movs	r5, #7
 800e43c:	e7b4      	b.n	800e3a8 <_scanf_float+0x198>
 800e43e:	6822      	ldr	r2, [r4, #0]
 800e440:	0591      	lsls	r1, r2, #22
 800e442:	f57f af18 	bpl.w	800e276 <_scanf_float+0x66>
 800e446:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e44a:	6022      	str	r2, [r4, #0]
 800e44c:	9702      	str	r7, [sp, #8]
 800e44e:	e7ab      	b.n	800e3a8 <_scanf_float+0x198>
 800e450:	6822      	ldr	r2, [r4, #0]
 800e452:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e456:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e45a:	d005      	beq.n	800e468 <_scanf_float+0x258>
 800e45c:	0550      	lsls	r0, r2, #21
 800e45e:	f57f af0a 	bpl.w	800e276 <_scanf_float+0x66>
 800e462:	2f00      	cmp	r7, #0
 800e464:	f000 80db 	beq.w	800e61e <_scanf_float+0x40e>
 800e468:	0591      	lsls	r1, r2, #22
 800e46a:	bf58      	it	pl
 800e46c:	9902      	ldrpl	r1, [sp, #8]
 800e46e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e472:	bf58      	it	pl
 800e474:	1a79      	subpl	r1, r7, r1
 800e476:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e47a:	bf58      	it	pl
 800e47c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e480:	6022      	str	r2, [r4, #0]
 800e482:	2700      	movs	r7, #0
 800e484:	e790      	b.n	800e3a8 <_scanf_float+0x198>
 800e486:	f04f 0a03 	mov.w	sl, #3
 800e48a:	e78d      	b.n	800e3a8 <_scanf_float+0x198>
 800e48c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e490:	4649      	mov	r1, r9
 800e492:	4640      	mov	r0, r8
 800e494:	4798      	blx	r3
 800e496:	2800      	cmp	r0, #0
 800e498:	f43f aedf 	beq.w	800e25a <_scanf_float+0x4a>
 800e49c:	e6eb      	b.n	800e276 <_scanf_float+0x66>
 800e49e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4a6:	464a      	mov	r2, r9
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	4798      	blx	r3
 800e4ac:	6923      	ldr	r3, [r4, #16]
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	6123      	str	r3, [r4, #16]
 800e4b2:	e6eb      	b.n	800e28c <_scanf_float+0x7c>
 800e4b4:	1e6b      	subs	r3, r5, #1
 800e4b6:	2b06      	cmp	r3, #6
 800e4b8:	d824      	bhi.n	800e504 <_scanf_float+0x2f4>
 800e4ba:	2d02      	cmp	r5, #2
 800e4bc:	d836      	bhi.n	800e52c <_scanf_float+0x31c>
 800e4be:	9b01      	ldr	r3, [sp, #4]
 800e4c0:	429e      	cmp	r6, r3
 800e4c2:	f67f aee7 	bls.w	800e294 <_scanf_float+0x84>
 800e4c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4ce:	464a      	mov	r2, r9
 800e4d0:	4640      	mov	r0, r8
 800e4d2:	4798      	blx	r3
 800e4d4:	6923      	ldr	r3, [r4, #16]
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	6123      	str	r3, [r4, #16]
 800e4da:	e7f0      	b.n	800e4be <_scanf_float+0x2ae>
 800e4dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e4e4:	464a      	mov	r2, r9
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	4798      	blx	r3
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	6123      	str	r3, [r4, #16]
 800e4f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4f4:	fa5f fa8a 	uxtb.w	sl, sl
 800e4f8:	f1ba 0f02 	cmp.w	sl, #2
 800e4fc:	d1ee      	bne.n	800e4dc <_scanf_float+0x2cc>
 800e4fe:	3d03      	subs	r5, #3
 800e500:	b2ed      	uxtb	r5, r5
 800e502:	1b76      	subs	r6, r6, r5
 800e504:	6823      	ldr	r3, [r4, #0]
 800e506:	05da      	lsls	r2, r3, #23
 800e508:	d530      	bpl.n	800e56c <_scanf_float+0x35c>
 800e50a:	055b      	lsls	r3, r3, #21
 800e50c:	d511      	bpl.n	800e532 <_scanf_float+0x322>
 800e50e:	9b01      	ldr	r3, [sp, #4]
 800e510:	429e      	cmp	r6, r3
 800e512:	f67f aebf 	bls.w	800e294 <_scanf_float+0x84>
 800e516:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e51a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e51e:	464a      	mov	r2, r9
 800e520:	4640      	mov	r0, r8
 800e522:	4798      	blx	r3
 800e524:	6923      	ldr	r3, [r4, #16]
 800e526:	3b01      	subs	r3, #1
 800e528:	6123      	str	r3, [r4, #16]
 800e52a:	e7f0      	b.n	800e50e <_scanf_float+0x2fe>
 800e52c:	46aa      	mov	sl, r5
 800e52e:	46b3      	mov	fp, r6
 800e530:	e7de      	b.n	800e4f0 <_scanf_float+0x2e0>
 800e532:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e536:	6923      	ldr	r3, [r4, #16]
 800e538:	2965      	cmp	r1, #101	@ 0x65
 800e53a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e53e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e542:	6123      	str	r3, [r4, #16]
 800e544:	d00c      	beq.n	800e560 <_scanf_float+0x350>
 800e546:	2945      	cmp	r1, #69	@ 0x45
 800e548:	d00a      	beq.n	800e560 <_scanf_float+0x350>
 800e54a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e54e:	464a      	mov	r2, r9
 800e550:	4640      	mov	r0, r8
 800e552:	4798      	blx	r3
 800e554:	6923      	ldr	r3, [r4, #16]
 800e556:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	1eb5      	subs	r5, r6, #2
 800e55e:	6123      	str	r3, [r4, #16]
 800e560:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e564:	464a      	mov	r2, r9
 800e566:	4640      	mov	r0, r8
 800e568:	4798      	blx	r3
 800e56a:	462e      	mov	r6, r5
 800e56c:	6822      	ldr	r2, [r4, #0]
 800e56e:	f012 0210 	ands.w	r2, r2, #16
 800e572:	d001      	beq.n	800e578 <_scanf_float+0x368>
 800e574:	2000      	movs	r0, #0
 800e576:	e68e      	b.n	800e296 <_scanf_float+0x86>
 800e578:	7032      	strb	r2, [r6, #0]
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e584:	d125      	bne.n	800e5d2 <_scanf_float+0x3c2>
 800e586:	9b02      	ldr	r3, [sp, #8]
 800e588:	429f      	cmp	r7, r3
 800e58a:	d00a      	beq.n	800e5a2 <_scanf_float+0x392>
 800e58c:	1bda      	subs	r2, r3, r7
 800e58e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e592:	429e      	cmp	r6, r3
 800e594:	bf28      	it	cs
 800e596:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e59a:	4922      	ldr	r1, [pc, #136]	@ (800e624 <_scanf_float+0x414>)
 800e59c:	4630      	mov	r0, r6
 800e59e:	f000 f93d 	bl	800e81c <siprintf>
 800e5a2:	9901      	ldr	r1, [sp, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	4640      	mov	r0, r8
 800e5a8:	f003 f9a2 	bl	80118f0 <_strtod_r>
 800e5ac:	9b03      	ldr	r3, [sp, #12]
 800e5ae:	6821      	ldr	r1, [r4, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f011 0f02 	tst.w	r1, #2
 800e5b6:	ec57 6b10 	vmov	r6, r7, d0
 800e5ba:	f103 0204 	add.w	r2, r3, #4
 800e5be:	d015      	beq.n	800e5ec <_scanf_float+0x3dc>
 800e5c0:	9903      	ldr	r1, [sp, #12]
 800e5c2:	600a      	str	r2, [r1, #0]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	e9c3 6700 	strd	r6, r7, [r3]
 800e5ca:	68e3      	ldr	r3, [r4, #12]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	60e3      	str	r3, [r4, #12]
 800e5d0:	e7d0      	b.n	800e574 <_scanf_float+0x364>
 800e5d2:	9b04      	ldr	r3, [sp, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0e4      	beq.n	800e5a2 <_scanf_float+0x392>
 800e5d8:	9905      	ldr	r1, [sp, #20]
 800e5da:	230a      	movs	r3, #10
 800e5dc:	3101      	adds	r1, #1
 800e5de:	4640      	mov	r0, r8
 800e5e0:	f7ff f9b4 	bl	800d94c <_strtol_r>
 800e5e4:	9b04      	ldr	r3, [sp, #16]
 800e5e6:	9e05      	ldr	r6, [sp, #20]
 800e5e8:	1ac2      	subs	r2, r0, r3
 800e5ea:	e7d0      	b.n	800e58e <_scanf_float+0x37e>
 800e5ec:	f011 0f04 	tst.w	r1, #4
 800e5f0:	9903      	ldr	r1, [sp, #12]
 800e5f2:	600a      	str	r2, [r1, #0]
 800e5f4:	d1e6      	bne.n	800e5c4 <_scanf_float+0x3b4>
 800e5f6:	681d      	ldr	r5, [r3, #0]
 800e5f8:	4632      	mov	r2, r6
 800e5fa:	463b      	mov	r3, r7
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	4639      	mov	r1, r7
 800e600:	f7f2 faa4 	bl	8000b4c <__aeabi_dcmpun>
 800e604:	b128      	cbz	r0, 800e612 <_scanf_float+0x402>
 800e606:	4808      	ldr	r0, [pc, #32]	@ (800e628 <_scanf_float+0x418>)
 800e608:	f000 ffce 	bl	800f5a8 <nanf>
 800e60c:	ed85 0a00 	vstr	s0, [r5]
 800e610:	e7db      	b.n	800e5ca <_scanf_float+0x3ba>
 800e612:	4630      	mov	r0, r6
 800e614:	4639      	mov	r1, r7
 800e616:	f7f2 faf7 	bl	8000c08 <__aeabi_d2f>
 800e61a:	6028      	str	r0, [r5, #0]
 800e61c:	e7d5      	b.n	800e5ca <_scanf_float+0x3ba>
 800e61e:	2700      	movs	r7, #0
 800e620:	e62e      	b.n	800e280 <_scanf_float+0x70>
 800e622:	bf00      	nop
 800e624:	0803e133 	.word	0x0803e133
 800e628:	0803e2c2 	.word	0x0803e2c2

0800e62c <std>:
 800e62c:	2300      	movs	r3, #0
 800e62e:	b510      	push	{r4, lr}
 800e630:	4604      	mov	r4, r0
 800e632:	e9c0 3300 	strd	r3, r3, [r0]
 800e636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e63a:	6083      	str	r3, [r0, #8]
 800e63c:	8181      	strh	r1, [r0, #12]
 800e63e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e640:	81c2      	strh	r2, [r0, #14]
 800e642:	6183      	str	r3, [r0, #24]
 800e644:	4619      	mov	r1, r3
 800e646:	2208      	movs	r2, #8
 800e648:	305c      	adds	r0, #92	@ 0x5c
 800e64a:	f000 f968 	bl	800e91e <memset>
 800e64e:	4b0d      	ldr	r3, [pc, #52]	@ (800e684 <std+0x58>)
 800e650:	6263      	str	r3, [r4, #36]	@ 0x24
 800e652:	4b0d      	ldr	r3, [pc, #52]	@ (800e688 <std+0x5c>)
 800e654:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e656:	4b0d      	ldr	r3, [pc, #52]	@ (800e68c <std+0x60>)
 800e658:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e65a:	4b0d      	ldr	r3, [pc, #52]	@ (800e690 <std+0x64>)
 800e65c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e65e:	4b0d      	ldr	r3, [pc, #52]	@ (800e694 <std+0x68>)
 800e660:	6224      	str	r4, [r4, #32]
 800e662:	429c      	cmp	r4, r3
 800e664:	d006      	beq.n	800e674 <std+0x48>
 800e666:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e66a:	4294      	cmp	r4, r2
 800e66c:	d002      	beq.n	800e674 <std+0x48>
 800e66e:	33d0      	adds	r3, #208	@ 0xd0
 800e670:	429c      	cmp	r4, r3
 800e672:	d105      	bne.n	800e680 <std+0x54>
 800e674:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e67c:	f000 bf78 	b.w	800f570 <__retarget_lock_init_recursive>
 800e680:	bd10      	pop	{r4, pc}
 800e682:	bf00      	nop
 800e684:	0800e861 	.word	0x0800e861
 800e688:	0800e887 	.word	0x0800e887
 800e68c:	0800e8bf 	.word	0x0800e8bf
 800e690:	0800e8e3 	.word	0x0800e8e3
 800e694:	20002c44 	.word	0x20002c44

0800e698 <stdio_exit_handler>:
 800e698:	4a02      	ldr	r2, [pc, #8]	@ (800e6a4 <stdio_exit_handler+0xc>)
 800e69a:	4903      	ldr	r1, [pc, #12]	@ (800e6a8 <stdio_exit_handler+0x10>)
 800e69c:	4803      	ldr	r0, [pc, #12]	@ (800e6ac <stdio_exit_handler+0x14>)
 800e69e:	f000 b869 	b.w	800e774 <_fwalk_sglue>
 800e6a2:	bf00      	nop
 800e6a4:	2000004c 	.word	0x2000004c
 800e6a8:	08011da9 	.word	0x08011da9
 800e6ac:	20000064 	.word	0x20000064

0800e6b0 <cleanup_stdio>:
 800e6b0:	6841      	ldr	r1, [r0, #4]
 800e6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e6e4 <cleanup_stdio+0x34>)
 800e6b4:	4299      	cmp	r1, r3
 800e6b6:	b510      	push	{r4, lr}
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	d001      	beq.n	800e6c0 <cleanup_stdio+0x10>
 800e6bc:	f003 fb74 	bl	8011da8 <_fflush_r>
 800e6c0:	68a1      	ldr	r1, [r4, #8]
 800e6c2:	4b09      	ldr	r3, [pc, #36]	@ (800e6e8 <cleanup_stdio+0x38>)
 800e6c4:	4299      	cmp	r1, r3
 800e6c6:	d002      	beq.n	800e6ce <cleanup_stdio+0x1e>
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f003 fb6d 	bl	8011da8 <_fflush_r>
 800e6ce:	68e1      	ldr	r1, [r4, #12]
 800e6d0:	4b06      	ldr	r3, [pc, #24]	@ (800e6ec <cleanup_stdio+0x3c>)
 800e6d2:	4299      	cmp	r1, r3
 800e6d4:	d004      	beq.n	800e6e0 <cleanup_stdio+0x30>
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6dc:	f003 bb64 	b.w	8011da8 <_fflush_r>
 800e6e0:	bd10      	pop	{r4, pc}
 800e6e2:	bf00      	nop
 800e6e4:	20002c44 	.word	0x20002c44
 800e6e8:	20002cac 	.word	0x20002cac
 800e6ec:	20002d14 	.word	0x20002d14

0800e6f0 <global_stdio_init.part.0>:
 800e6f0:	b510      	push	{r4, lr}
 800e6f2:	4b0b      	ldr	r3, [pc, #44]	@ (800e720 <global_stdio_init.part.0+0x30>)
 800e6f4:	4c0b      	ldr	r4, [pc, #44]	@ (800e724 <global_stdio_init.part.0+0x34>)
 800e6f6:	4a0c      	ldr	r2, [pc, #48]	@ (800e728 <global_stdio_init.part.0+0x38>)
 800e6f8:	601a      	str	r2, [r3, #0]
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	2104      	movs	r1, #4
 800e700:	f7ff ff94 	bl	800e62c <std>
 800e704:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e708:	2201      	movs	r2, #1
 800e70a:	2109      	movs	r1, #9
 800e70c:	f7ff ff8e 	bl	800e62c <std>
 800e710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e714:	2202      	movs	r2, #2
 800e716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e71a:	2112      	movs	r1, #18
 800e71c:	f7ff bf86 	b.w	800e62c <std>
 800e720:	20002d7c 	.word	0x20002d7c
 800e724:	20002c44 	.word	0x20002c44
 800e728:	0800e699 	.word	0x0800e699

0800e72c <__sfp_lock_acquire>:
 800e72c:	4801      	ldr	r0, [pc, #4]	@ (800e734 <__sfp_lock_acquire+0x8>)
 800e72e:	f000 bf21 	b.w	800f574 <__retarget_lock_acquire_recursive>
 800e732:	bf00      	nop
 800e734:	20002dab 	.word	0x20002dab

0800e738 <__sfp_lock_release>:
 800e738:	4801      	ldr	r0, [pc, #4]	@ (800e740 <__sfp_lock_release+0x8>)
 800e73a:	f000 bf1d 	b.w	800f578 <__retarget_lock_release_recursive>
 800e73e:	bf00      	nop
 800e740:	20002dab 	.word	0x20002dab

0800e744 <__sinit>:
 800e744:	b510      	push	{r4, lr}
 800e746:	4604      	mov	r4, r0
 800e748:	f7ff fff0 	bl	800e72c <__sfp_lock_acquire>
 800e74c:	6a23      	ldr	r3, [r4, #32]
 800e74e:	b11b      	cbz	r3, 800e758 <__sinit+0x14>
 800e750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e754:	f7ff bff0 	b.w	800e738 <__sfp_lock_release>
 800e758:	4b04      	ldr	r3, [pc, #16]	@ (800e76c <__sinit+0x28>)
 800e75a:	6223      	str	r3, [r4, #32]
 800e75c:	4b04      	ldr	r3, [pc, #16]	@ (800e770 <__sinit+0x2c>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1f5      	bne.n	800e750 <__sinit+0xc>
 800e764:	f7ff ffc4 	bl	800e6f0 <global_stdio_init.part.0>
 800e768:	e7f2      	b.n	800e750 <__sinit+0xc>
 800e76a:	bf00      	nop
 800e76c:	0800e6b1 	.word	0x0800e6b1
 800e770:	20002d7c 	.word	0x20002d7c

0800e774 <_fwalk_sglue>:
 800e774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e778:	4607      	mov	r7, r0
 800e77a:	4688      	mov	r8, r1
 800e77c:	4614      	mov	r4, r2
 800e77e:	2600      	movs	r6, #0
 800e780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e784:	f1b9 0901 	subs.w	r9, r9, #1
 800e788:	d505      	bpl.n	800e796 <_fwalk_sglue+0x22>
 800e78a:	6824      	ldr	r4, [r4, #0]
 800e78c:	2c00      	cmp	r4, #0
 800e78e:	d1f7      	bne.n	800e780 <_fwalk_sglue+0xc>
 800e790:	4630      	mov	r0, r6
 800e792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e796:	89ab      	ldrh	r3, [r5, #12]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d907      	bls.n	800e7ac <_fwalk_sglue+0x38>
 800e79c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	d003      	beq.n	800e7ac <_fwalk_sglue+0x38>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	47c0      	blx	r8
 800e7aa:	4306      	orrs	r6, r0
 800e7ac:	3568      	adds	r5, #104	@ 0x68
 800e7ae:	e7e9      	b.n	800e784 <_fwalk_sglue+0x10>

0800e7b0 <sniprintf>:
 800e7b0:	b40c      	push	{r2, r3}
 800e7b2:	b530      	push	{r4, r5, lr}
 800e7b4:	4b18      	ldr	r3, [pc, #96]	@ (800e818 <sniprintf+0x68>)
 800e7b6:	1e0c      	subs	r4, r1, #0
 800e7b8:	681d      	ldr	r5, [r3, #0]
 800e7ba:	b09d      	sub	sp, #116	@ 0x74
 800e7bc:	da08      	bge.n	800e7d0 <sniprintf+0x20>
 800e7be:	238b      	movs	r3, #139	@ 0x8b
 800e7c0:	602b      	str	r3, [r5, #0]
 800e7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c6:	b01d      	add	sp, #116	@ 0x74
 800e7c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7cc:	b002      	add	sp, #8
 800e7ce:	4770      	bx	lr
 800e7d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e7d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e7d8:	f04f 0300 	mov.w	r3, #0
 800e7dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e7de:	bf14      	ite	ne
 800e7e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e7e4:	4623      	moveq	r3, r4
 800e7e6:	9304      	str	r3, [sp, #16]
 800e7e8:	9307      	str	r3, [sp, #28]
 800e7ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e7ee:	9002      	str	r0, [sp, #8]
 800e7f0:	9006      	str	r0, [sp, #24]
 800e7f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e7f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e7f8:	ab21      	add	r3, sp, #132	@ 0x84
 800e7fa:	a902      	add	r1, sp, #8
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	9301      	str	r3, [sp, #4]
 800e800:	f003 f952 	bl	8011aa8 <_svfiprintf_r>
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	bfbc      	itt	lt
 800e808:	238b      	movlt	r3, #139	@ 0x8b
 800e80a:	602b      	strlt	r3, [r5, #0]
 800e80c:	2c00      	cmp	r4, #0
 800e80e:	d0da      	beq.n	800e7c6 <sniprintf+0x16>
 800e810:	9b02      	ldr	r3, [sp, #8]
 800e812:	2200      	movs	r2, #0
 800e814:	701a      	strb	r2, [r3, #0]
 800e816:	e7d6      	b.n	800e7c6 <sniprintf+0x16>
 800e818:	20000060 	.word	0x20000060

0800e81c <siprintf>:
 800e81c:	b40e      	push	{r1, r2, r3}
 800e81e:	b510      	push	{r4, lr}
 800e820:	b09d      	sub	sp, #116	@ 0x74
 800e822:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e824:	9002      	str	r0, [sp, #8]
 800e826:	9006      	str	r0, [sp, #24]
 800e828:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e82c:	480a      	ldr	r0, [pc, #40]	@ (800e858 <siprintf+0x3c>)
 800e82e:	9107      	str	r1, [sp, #28]
 800e830:	9104      	str	r1, [sp, #16]
 800e832:	490a      	ldr	r1, [pc, #40]	@ (800e85c <siprintf+0x40>)
 800e834:	f853 2b04 	ldr.w	r2, [r3], #4
 800e838:	9105      	str	r1, [sp, #20]
 800e83a:	2400      	movs	r4, #0
 800e83c:	a902      	add	r1, sp, #8
 800e83e:	6800      	ldr	r0, [r0, #0]
 800e840:	9301      	str	r3, [sp, #4]
 800e842:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e844:	f003 f930 	bl	8011aa8 <_svfiprintf_r>
 800e848:	9b02      	ldr	r3, [sp, #8]
 800e84a:	701c      	strb	r4, [r3, #0]
 800e84c:	b01d      	add	sp, #116	@ 0x74
 800e84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e852:	b003      	add	sp, #12
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	20000060 	.word	0x20000060
 800e85c:	ffff0208 	.word	0xffff0208

0800e860 <__sread>:
 800e860:	b510      	push	{r4, lr}
 800e862:	460c      	mov	r4, r1
 800e864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e868:	f000 fe24 	bl	800f4b4 <_read_r>
 800e86c:	2800      	cmp	r0, #0
 800e86e:	bfab      	itete	ge
 800e870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e872:	89a3      	ldrhlt	r3, [r4, #12]
 800e874:	181b      	addge	r3, r3, r0
 800e876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e87a:	bfac      	ite	ge
 800e87c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e87e:	81a3      	strhlt	r3, [r4, #12]
 800e880:	bd10      	pop	{r4, pc}

0800e882 <__seofread>:
 800e882:	2000      	movs	r0, #0
 800e884:	4770      	bx	lr

0800e886 <__swrite>:
 800e886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e88a:	461f      	mov	r7, r3
 800e88c:	898b      	ldrh	r3, [r1, #12]
 800e88e:	05db      	lsls	r3, r3, #23
 800e890:	4605      	mov	r5, r0
 800e892:	460c      	mov	r4, r1
 800e894:	4616      	mov	r6, r2
 800e896:	d505      	bpl.n	800e8a4 <__swrite+0x1e>
 800e898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e89c:	2302      	movs	r3, #2
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f000 fdf6 	bl	800f490 <_lseek_r>
 800e8a4:	89a3      	ldrh	r3, [r4, #12]
 800e8a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8ae:	81a3      	strh	r3, [r4, #12]
 800e8b0:	4632      	mov	r2, r6
 800e8b2:	463b      	mov	r3, r7
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ba:	f000 be1d 	b.w	800f4f8 <_write_r>

0800e8be <__sseek>:
 800e8be:	b510      	push	{r4, lr}
 800e8c0:	460c      	mov	r4, r1
 800e8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8c6:	f000 fde3 	bl	800f490 <_lseek_r>
 800e8ca:	1c43      	adds	r3, r0, #1
 800e8cc:	89a3      	ldrh	r3, [r4, #12]
 800e8ce:	bf15      	itete	ne
 800e8d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e8d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e8d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e8da:	81a3      	strheq	r3, [r4, #12]
 800e8dc:	bf18      	it	ne
 800e8de:	81a3      	strhne	r3, [r4, #12]
 800e8e0:	bd10      	pop	{r4, pc}

0800e8e2 <__sclose>:
 800e8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e6:	f000 bdc3 	b.w	800f470 <_close_r>

0800e8ea <memmove>:
 800e8ea:	4288      	cmp	r0, r1
 800e8ec:	b510      	push	{r4, lr}
 800e8ee:	eb01 0402 	add.w	r4, r1, r2
 800e8f2:	d902      	bls.n	800e8fa <memmove+0x10>
 800e8f4:	4284      	cmp	r4, r0
 800e8f6:	4623      	mov	r3, r4
 800e8f8:	d807      	bhi.n	800e90a <memmove+0x20>
 800e8fa:	1e43      	subs	r3, r0, #1
 800e8fc:	42a1      	cmp	r1, r4
 800e8fe:	d008      	beq.n	800e912 <memmove+0x28>
 800e900:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e904:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e908:	e7f8      	b.n	800e8fc <memmove+0x12>
 800e90a:	4402      	add	r2, r0
 800e90c:	4601      	mov	r1, r0
 800e90e:	428a      	cmp	r2, r1
 800e910:	d100      	bne.n	800e914 <memmove+0x2a>
 800e912:	bd10      	pop	{r4, pc}
 800e914:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e918:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e91c:	e7f7      	b.n	800e90e <memmove+0x24>

0800e91e <memset>:
 800e91e:	4402      	add	r2, r0
 800e920:	4603      	mov	r3, r0
 800e922:	4293      	cmp	r3, r2
 800e924:	d100      	bne.n	800e928 <memset+0xa>
 800e926:	4770      	bx	lr
 800e928:	f803 1b01 	strb.w	r1, [r3], #1
 800e92c:	e7f9      	b.n	800e922 <memset+0x4>

0800e92e <strncmp>:
 800e92e:	b510      	push	{r4, lr}
 800e930:	b16a      	cbz	r2, 800e94e <strncmp+0x20>
 800e932:	3901      	subs	r1, #1
 800e934:	1884      	adds	r4, r0, r2
 800e936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e93a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e93e:	429a      	cmp	r2, r3
 800e940:	d103      	bne.n	800e94a <strncmp+0x1c>
 800e942:	42a0      	cmp	r0, r4
 800e944:	d001      	beq.n	800e94a <strncmp+0x1c>
 800e946:	2a00      	cmp	r2, #0
 800e948:	d1f5      	bne.n	800e936 <strncmp+0x8>
 800e94a:	1ad0      	subs	r0, r2, r3
 800e94c:	bd10      	pop	{r4, pc}
 800e94e:	4610      	mov	r0, r2
 800e950:	e7fc      	b.n	800e94c <strncmp+0x1e>

0800e952 <strstr>:
 800e952:	780a      	ldrb	r2, [r1, #0]
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	b96a      	cbnz	r2, 800e974 <strstr+0x22>
 800e958:	bd70      	pop	{r4, r5, r6, pc}
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d109      	bne.n	800e972 <strstr+0x20>
 800e95e:	460c      	mov	r4, r1
 800e960:	4605      	mov	r5, r0
 800e962:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e966:	2b00      	cmp	r3, #0
 800e968:	d0f6      	beq.n	800e958 <strstr+0x6>
 800e96a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e96e:	429e      	cmp	r6, r3
 800e970:	d0f7      	beq.n	800e962 <strstr+0x10>
 800e972:	3001      	adds	r0, #1
 800e974:	7803      	ldrb	r3, [r0, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1ef      	bne.n	800e95a <strstr+0x8>
 800e97a:	4618      	mov	r0, r3
 800e97c:	e7ec      	b.n	800e958 <strstr+0x6>
	...

0800e980 <validate_structure>:
 800e980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e982:	6801      	ldr	r1, [r0, #0]
 800e984:	293b      	cmp	r1, #59	@ 0x3b
 800e986:	4604      	mov	r4, r0
 800e988:	d911      	bls.n	800e9ae <validate_structure+0x2e>
 800e98a:	223c      	movs	r2, #60	@ 0x3c
 800e98c:	4668      	mov	r0, sp
 800e98e:	f000 fe11 	bl	800f5b4 <div>
 800e992:	9a01      	ldr	r2, [sp, #4]
 800e994:	6863      	ldr	r3, [r4, #4]
 800e996:	9900      	ldr	r1, [sp, #0]
 800e998:	2a00      	cmp	r2, #0
 800e99a:	440b      	add	r3, r1
 800e99c:	6063      	str	r3, [r4, #4]
 800e99e:	bfbb      	ittet	lt
 800e9a0:	323c      	addlt	r2, #60	@ 0x3c
 800e9a2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e9a6:	6022      	strge	r2, [r4, #0]
 800e9a8:	6022      	strlt	r2, [r4, #0]
 800e9aa:	bfb8      	it	lt
 800e9ac:	6063      	strlt	r3, [r4, #4]
 800e9ae:	6861      	ldr	r1, [r4, #4]
 800e9b0:	293b      	cmp	r1, #59	@ 0x3b
 800e9b2:	d911      	bls.n	800e9d8 <validate_structure+0x58>
 800e9b4:	223c      	movs	r2, #60	@ 0x3c
 800e9b6:	4668      	mov	r0, sp
 800e9b8:	f000 fdfc 	bl	800f5b4 <div>
 800e9bc:	9a01      	ldr	r2, [sp, #4]
 800e9be:	68a3      	ldr	r3, [r4, #8]
 800e9c0:	9900      	ldr	r1, [sp, #0]
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	440b      	add	r3, r1
 800e9c6:	60a3      	str	r3, [r4, #8]
 800e9c8:	bfbb      	ittet	lt
 800e9ca:	323c      	addlt	r2, #60	@ 0x3c
 800e9cc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e9d0:	6062      	strge	r2, [r4, #4]
 800e9d2:	6062      	strlt	r2, [r4, #4]
 800e9d4:	bfb8      	it	lt
 800e9d6:	60a3      	strlt	r3, [r4, #8]
 800e9d8:	68a1      	ldr	r1, [r4, #8]
 800e9da:	2917      	cmp	r1, #23
 800e9dc:	d911      	bls.n	800ea02 <validate_structure+0x82>
 800e9de:	2218      	movs	r2, #24
 800e9e0:	4668      	mov	r0, sp
 800e9e2:	f000 fde7 	bl	800f5b4 <div>
 800e9e6:	9a01      	ldr	r2, [sp, #4]
 800e9e8:	68e3      	ldr	r3, [r4, #12]
 800e9ea:	9900      	ldr	r1, [sp, #0]
 800e9ec:	2a00      	cmp	r2, #0
 800e9ee:	440b      	add	r3, r1
 800e9f0:	60e3      	str	r3, [r4, #12]
 800e9f2:	bfbb      	ittet	lt
 800e9f4:	3218      	addlt	r2, #24
 800e9f6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e9fa:	60a2      	strge	r2, [r4, #8]
 800e9fc:	60a2      	strlt	r2, [r4, #8]
 800e9fe:	bfb8      	it	lt
 800ea00:	60e3      	strlt	r3, [r4, #12]
 800ea02:	6921      	ldr	r1, [r4, #16]
 800ea04:	290b      	cmp	r1, #11
 800ea06:	d911      	bls.n	800ea2c <validate_structure+0xac>
 800ea08:	220c      	movs	r2, #12
 800ea0a:	4668      	mov	r0, sp
 800ea0c:	f000 fdd2 	bl	800f5b4 <div>
 800ea10:	9a01      	ldr	r2, [sp, #4]
 800ea12:	6963      	ldr	r3, [r4, #20]
 800ea14:	9900      	ldr	r1, [sp, #0]
 800ea16:	2a00      	cmp	r2, #0
 800ea18:	440b      	add	r3, r1
 800ea1a:	6163      	str	r3, [r4, #20]
 800ea1c:	bfbb      	ittet	lt
 800ea1e:	320c      	addlt	r2, #12
 800ea20:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ea24:	6122      	strge	r2, [r4, #16]
 800ea26:	6122      	strlt	r2, [r4, #16]
 800ea28:	bfb8      	it	lt
 800ea2a:	6163      	strlt	r3, [r4, #20]
 800ea2c:	6963      	ldr	r3, [r4, #20]
 800ea2e:	079a      	lsls	r2, r3, #30
 800ea30:	d11c      	bne.n	800ea6c <validate_structure+0xec>
 800ea32:	2164      	movs	r1, #100	@ 0x64
 800ea34:	fb93 f2f1 	sdiv	r2, r3, r1
 800ea38:	fb01 3212 	mls	r2, r1, r2, r3
 800ea3c:	b9c2      	cbnz	r2, 800ea70 <validate_structure+0xf0>
 800ea3e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800ea42:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ea46:	fb93 f1f2 	sdiv	r1, r3, r2
 800ea4a:	fb02 3311 	mls	r3, r2, r1, r3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	bf0c      	ite	eq
 800ea52:	231d      	moveq	r3, #29
 800ea54:	231c      	movne	r3, #28
 800ea56:	68e2      	ldr	r2, [r4, #12]
 800ea58:	2a00      	cmp	r2, #0
 800ea5a:	dc0b      	bgt.n	800ea74 <validate_structure+0xf4>
 800ea5c:	4d31      	ldr	r5, [pc, #196]	@ (800eb24 <validate_structure+0x1a4>)
 800ea5e:	200b      	movs	r0, #11
 800ea60:	2164      	movs	r1, #100	@ 0x64
 800ea62:	68e6      	ldr	r6, [r4, #12]
 800ea64:	2e00      	cmp	r6, #0
 800ea66:	dd30      	ble.n	800eaca <validate_structure+0x14a>
 800ea68:	b003      	add	sp, #12
 800ea6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea6c:	231c      	movs	r3, #28
 800ea6e:	e7f2      	b.n	800ea56 <validate_structure+0xd6>
 800ea70:	231d      	movs	r3, #29
 800ea72:	e7f0      	b.n	800ea56 <validate_structure+0xd6>
 800ea74:	4d2b      	ldr	r5, [pc, #172]	@ (800eb24 <validate_structure+0x1a4>)
 800ea76:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800ea7a:	2a01      	cmp	r2, #1
 800ea7c:	bf14      	ite	ne
 800ea7e:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800ea82:	4618      	moveq	r0, r3
 800ea84:	4281      	cmp	r1, r0
 800ea86:	ddef      	ble.n	800ea68 <validate_structure+0xe8>
 800ea88:	3201      	adds	r2, #1
 800ea8a:	1a09      	subs	r1, r1, r0
 800ea8c:	2a0c      	cmp	r2, #12
 800ea8e:	60e1      	str	r1, [r4, #12]
 800ea90:	6122      	str	r2, [r4, #16]
 800ea92:	d1f0      	bne.n	800ea76 <validate_structure+0xf6>
 800ea94:	6963      	ldr	r3, [r4, #20]
 800ea96:	2100      	movs	r1, #0
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	6121      	str	r1, [r4, #16]
 800ea9c:	0791      	lsls	r1, r2, #30
 800ea9e:	6162      	str	r2, [r4, #20]
 800eaa0:	d13c      	bne.n	800eb1c <validate_structure+0x19c>
 800eaa2:	2164      	movs	r1, #100	@ 0x64
 800eaa4:	fb92 f0f1 	sdiv	r0, r2, r1
 800eaa8:	fb01 2210 	mls	r2, r1, r0, r2
 800eaac:	2a00      	cmp	r2, #0
 800eaae:	d137      	bne.n	800eb20 <validate_structure+0x1a0>
 800eab0:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800eab4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800eab8:	fb93 f1f2 	sdiv	r1, r3, r2
 800eabc:	fb02 3311 	mls	r3, r2, r1, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	bf0c      	ite	eq
 800eac4:	231d      	moveq	r3, #29
 800eac6:	231c      	movne	r3, #28
 800eac8:	e7d5      	b.n	800ea76 <validate_structure+0xf6>
 800eaca:	6922      	ldr	r2, [r4, #16]
 800eacc:	3a01      	subs	r2, #1
 800eace:	6122      	str	r2, [r4, #16]
 800ead0:	3201      	adds	r2, #1
 800ead2:	d116      	bne.n	800eb02 <validate_structure+0x182>
 800ead4:	6963      	ldr	r3, [r4, #20]
 800ead6:	1e5a      	subs	r2, r3, #1
 800ead8:	0797      	lsls	r7, r2, #30
 800eada:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800eade:	d119      	bne.n	800eb14 <validate_structure+0x194>
 800eae0:	fb92 f7f1 	sdiv	r7, r2, r1
 800eae4:	fb01 2217 	mls	r2, r1, r7, r2
 800eae8:	b9b2      	cbnz	r2, 800eb18 <validate_structure+0x198>
 800eaea:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800eaee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800eaf2:	fb93 f7f2 	sdiv	r7, r3, r2
 800eaf6:	fb02 3317 	mls	r3, r2, r7, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	bf0c      	ite	eq
 800eafe:	231d      	moveq	r3, #29
 800eb00:	231c      	movne	r3, #28
 800eb02:	6922      	ldr	r2, [r4, #16]
 800eb04:	2a01      	cmp	r2, #1
 800eb06:	bf14      	ite	ne
 800eb08:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800eb0c:	461a      	moveq	r2, r3
 800eb0e:	4432      	add	r2, r6
 800eb10:	60e2      	str	r2, [r4, #12]
 800eb12:	e7a6      	b.n	800ea62 <validate_structure+0xe2>
 800eb14:	231c      	movs	r3, #28
 800eb16:	e7f4      	b.n	800eb02 <validate_structure+0x182>
 800eb18:	231d      	movs	r3, #29
 800eb1a:	e7f2      	b.n	800eb02 <validate_structure+0x182>
 800eb1c:	231c      	movs	r3, #28
 800eb1e:	e7aa      	b.n	800ea76 <validate_structure+0xf6>
 800eb20:	231d      	movs	r3, #29
 800eb22:	e7a8      	b.n	800ea76 <validate_structure+0xf6>
 800eb24:	0803e370 	.word	0x0803e370

0800eb28 <mktime>:
 800eb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2c:	b085      	sub	sp, #20
 800eb2e:	4607      	mov	r7, r0
 800eb30:	f003 f98e 	bl	8011e50 <__gettzinfo>
 800eb34:	4681      	mov	r9, r0
 800eb36:	4638      	mov	r0, r7
 800eb38:	f7ff ff22 	bl	800e980 <validate_structure>
 800eb3c:	e9d7 4300 	ldrd	r4, r3, [r7]
 800eb40:	223c      	movs	r2, #60	@ 0x3c
 800eb42:	fb02 4403 	mla	r4, r2, r3, r4
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	697d      	ldr	r5, [r7, #20]
 800eb4a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800eb4e:	fb02 4403 	mla	r4, r2, r3, r4
 800eb52:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800eb56:	4ac3      	ldr	r2, [pc, #780]	@ (800ee64 <mktime+0x33c>)
 800eb58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eb5c:	3e01      	subs	r6, #1
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	4416      	add	r6, r2
 800eb62:	dd11      	ble.n	800eb88 <mktime+0x60>
 800eb64:	07a9      	lsls	r1, r5, #30
 800eb66:	d10f      	bne.n	800eb88 <mktime+0x60>
 800eb68:	2264      	movs	r2, #100	@ 0x64
 800eb6a:	fb95 f3f2 	sdiv	r3, r5, r2
 800eb6e:	fb02 5313 	mls	r3, r2, r3, r5
 800eb72:	b943      	cbnz	r3, 800eb86 <mktime+0x5e>
 800eb74:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800eb78:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800eb7c:	fb93 f1f2 	sdiv	r1, r3, r2
 800eb80:	fb02 3311 	mls	r3, r2, r1, r3
 800eb84:	b903      	cbnz	r3, 800eb88 <mktime+0x60>
 800eb86:	3601      	adds	r6, #1
 800eb88:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800eb8c:	3310      	adds	r3, #16
 800eb8e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800eb92:	4293      	cmp	r3, r2
 800eb94:	61fe      	str	r6, [r7, #28]
 800eb96:	f200 8170 	bhi.w	800ee7a <mktime+0x352>
 800eb9a:	2d46      	cmp	r5, #70	@ 0x46
 800eb9c:	f340 80b6 	ble.w	800ed0c <mktime+0x1e4>
 800eba0:	2346      	movs	r3, #70	@ 0x46
 800eba2:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800eba6:	2164      	movs	r1, #100	@ 0x64
 800eba8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ebac:	079a      	lsls	r2, r3, #30
 800ebae:	f040 80a7 	bne.w	800ed00 <mktime+0x1d8>
 800ebb2:	fb93 f2f1 	sdiv	r2, r3, r1
 800ebb6:	fb01 3212 	mls	r2, r1, r2, r3
 800ebba:	2a00      	cmp	r2, #0
 800ebbc:	f040 80a3 	bne.w	800ed06 <mktime+0x1de>
 800ebc0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ebc4:	fb92 fef0 	sdiv	lr, r2, r0
 800ebc8:	fb00 221e 	mls	r2, r0, lr, r2
 800ebcc:	2a00      	cmp	r2, #0
 800ebce:	bf0c      	ite	eq
 800ebd0:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ebd4:	4662      	movne	r2, ip
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	429d      	cmp	r5, r3
 800ebda:	4416      	add	r6, r2
 800ebdc:	d1e6      	bne.n	800ebac <mktime+0x84>
 800ebde:	4ba2      	ldr	r3, [pc, #648]	@ (800ee68 <mktime+0x340>)
 800ebe0:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800ebe4:	fbc6 4803 	smlal	r4, r8, r6, r3
 800ebe8:	f000 fa0a 	bl	800f000 <__tz_lock>
 800ebec:	f000 fa14 	bl	800f018 <_tzset_unlocked>
 800ebf0:	4b9e      	ldr	r3, [pc, #632]	@ (800ee6c <mktime+0x344>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f000 8147 	beq.w	800ee88 <mktime+0x360>
 800ebfa:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800ebfe:	6978      	ldr	r0, [r7, #20]
 800ec00:	4653      	mov	r3, sl
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	bfa8      	it	ge
 800ec06:	2301      	movge	r3, #1
 800ec08:	9301      	str	r3, [sp, #4]
 800ec0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ec0e:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800ec12:	4283      	cmp	r3, r0
 800ec14:	f040 80bd 	bne.w	800ed92 <mktime+0x26a>
 800ec18:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800ec1c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800ec20:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800ec24:	1a13      	subs	r3, r2, r0
 800ec26:	9303      	str	r3, [sp, #12]
 800ec28:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800ec2c:	9302      	str	r3, [sp, #8]
 800ec2e:	9a02      	ldr	r2, [sp, #8]
 800ec30:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800ec34:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800ec38:	ebb2 0e03 	subs.w	lr, r2, r3
 800ec3c:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800ec40:	4574      	cmp	r4, lr
 800ec42:	eb78 0201 	sbcs.w	r2, r8, r1
 800ec46:	f280 80c7 	bge.w	800edd8 <mktime+0x2b0>
 800ec4a:	f8d9 2000 	ldr.w	r2, [r9]
 800ec4e:	2a00      	cmp	r2, #0
 800ec50:	f000 80d0 	beq.w	800edf4 <mktime+0x2cc>
 800ec54:	9a03      	ldr	r2, [sp, #12]
 800ec56:	4294      	cmp	r4, r2
 800ec58:	eb78 020b 	sbcs.w	r2, r8, fp
 800ec5c:	f2c0 8111 	blt.w	800ee82 <mktime+0x35a>
 800ec60:	4574      	cmp	r4, lr
 800ec62:	eb78 0101 	sbcs.w	r1, r8, r1
 800ec66:	bfb4      	ite	lt
 800ec68:	f04f 0b01 	movlt.w	fp, #1
 800ec6c:	f04f 0b00 	movge.w	fp, #0
 800ec70:	f1ba 0f00 	cmp.w	sl, #0
 800ec74:	f2c0 8094 	blt.w	800eda0 <mktime+0x278>
 800ec78:	9a01      	ldr	r2, [sp, #4]
 800ec7a:	ea82 0a0b 	eor.w	sl, r2, fp
 800ec7e:	f1ba 0f01 	cmp.w	sl, #1
 800ec82:	f040 808d 	bne.w	800eda0 <mktime+0x278>
 800ec86:	f1bb 0f00 	cmp.w	fp, #0
 800ec8a:	f000 80c2 	beq.w	800ee12 <mktime+0x2ea>
 800ec8e:	1a1b      	subs	r3, r3, r0
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	441a      	add	r2, r3
 800ec94:	191c      	adds	r4, r3, r4
 800ec96:	603a      	str	r2, [r7, #0]
 800ec98:	4638      	mov	r0, r7
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	9201      	str	r2, [sp, #4]
 800ec9e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800eca2:	f7ff fe6d 	bl	800e980 <validate_structure>
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	9a01      	ldr	r2, [sp, #4]
 800ecaa:	1a9b      	subs	r3, r3, r2
 800ecac:	d078      	beq.n	800eda0 <mktime+0x278>
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	f300 80b1 	bgt.w	800ee16 <mktime+0x2ee>
 800ecb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb8:	bfa8      	it	ge
 800ecba:	469a      	movge	sl, r3
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	eb1a 0303 	adds.w	r3, sl, r3
 800ecc2:	4456      	add	r6, sl
 800ecc4:	f140 80b0 	bpl.w	800ee28 <mktime+0x300>
 800ecc8:	1e6b      	subs	r3, r5, #1
 800ecca:	0799      	lsls	r1, r3, #30
 800eccc:	f040 80a6 	bne.w	800ee1c <mktime+0x2f4>
 800ecd0:	2264      	movs	r2, #100	@ 0x64
 800ecd2:	fb93 f1f2 	sdiv	r1, r3, r2
 800ecd6:	fb02 3311 	mls	r3, r2, r1, r3
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f040 80a1 	bne.w	800ee22 <mktime+0x2fa>
 800ece0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ece4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800ece8:	fb95 f2f3 	sdiv	r2, r5, r3
 800ecec:	fb03 5512 	mls	r5, r3, r2, r5
 800ecf0:	2d00      	cmp	r5, #0
 800ecf2:	f240 136d 	movw	r3, #365	@ 0x16d
 800ecf6:	bf18      	it	ne
 800ecf8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800ecfc:	61fb      	str	r3, [r7, #28]
 800ecfe:	e04f      	b.n	800eda0 <mktime+0x278>
 800ed00:	f240 126d 	movw	r2, #365	@ 0x16d
 800ed04:	e767      	b.n	800ebd6 <mktime+0xae>
 800ed06:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ed0a:	e764      	b.n	800ebd6 <mktime+0xae>
 800ed0c:	f43f af67 	beq.w	800ebde <mktime+0xb6>
 800ed10:	2345      	movs	r3, #69	@ 0x45
 800ed12:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800ed16:	2164      	movs	r1, #100	@ 0x64
 800ed18:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ed1c:	e012      	b.n	800ed44 <mktime+0x21c>
 800ed1e:	bb62      	cbnz	r2, 800ed7a <mktime+0x252>
 800ed20:	fb93 f2f1 	sdiv	r2, r3, r1
 800ed24:	fb01 3212 	mls	r2, r1, r2, r3
 800ed28:	bb52      	cbnz	r2, 800ed80 <mktime+0x258>
 800ed2a:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ed2e:	fb92 fef0 	sdiv	lr, r2, r0
 800ed32:	fb00 221e 	mls	r2, r0, lr, r2
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	bf0c      	ite	eq
 800ed3a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ed3e:	4662      	movne	r2, ip
 800ed40:	1ab6      	subs	r6, r6, r2
 800ed42:	3b01      	subs	r3, #1
 800ed44:	429d      	cmp	r5, r3
 800ed46:	f003 0203 	and.w	r2, r3, #3
 800ed4a:	dbe8      	blt.n	800ed1e <mktime+0x1f6>
 800ed4c:	b9da      	cbnz	r2, 800ed86 <mktime+0x25e>
 800ed4e:	2264      	movs	r2, #100	@ 0x64
 800ed50:	fb95 f3f2 	sdiv	r3, r5, r2
 800ed54:	fb02 5313 	mls	r3, r2, r3, r5
 800ed58:	b9c3      	cbnz	r3, 800ed8c <mktime+0x264>
 800ed5a:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800ed5e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ed62:	fb93 f1f2 	sdiv	r1, r3, r2
 800ed66:	fb02 3311 	mls	r3, r2, r1, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f240 136d 	movw	r3, #365	@ 0x16d
 800ed70:	bf08      	it	eq
 800ed72:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800ed76:	1af6      	subs	r6, r6, r3
 800ed78:	e731      	b.n	800ebde <mktime+0xb6>
 800ed7a:	f240 126d 	movw	r2, #365	@ 0x16d
 800ed7e:	e7df      	b.n	800ed40 <mktime+0x218>
 800ed80:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ed84:	e7dc      	b.n	800ed40 <mktime+0x218>
 800ed86:	f240 136d 	movw	r3, #365	@ 0x16d
 800ed8a:	e7f4      	b.n	800ed76 <mktime+0x24e>
 800ed8c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800ed90:	e7f1      	b.n	800ed76 <mktime+0x24e>
 800ed92:	f000 f881 	bl	800ee98 <__tzcalc_limits>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f47f af3e 	bne.w	800ec18 <mktime+0xf0>
 800ed9c:	f8dd b004 	ldr.w	fp, [sp, #4]
 800eda0:	f1bb 0f01 	cmp.w	fp, #1
 800eda4:	d172      	bne.n	800ee8c <mktime+0x364>
 800eda6:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800edaa:	191c      	adds	r4, r3, r4
 800edac:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800edb0:	f04f 0b01 	mov.w	fp, #1
 800edb4:	f000 f92a 	bl	800f00c <__tz_unlock>
 800edb8:	3604      	adds	r6, #4
 800edba:	2307      	movs	r3, #7
 800edbc:	fb96 f3f3 	sdiv	r3, r6, r3
 800edc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800edc4:	1af6      	subs	r6, r6, r3
 800edc6:	d456      	bmi.n	800ee76 <mktime+0x34e>
 800edc8:	f8c7 b020 	str.w	fp, [r7, #32]
 800edcc:	61be      	str	r6, [r7, #24]
 800edce:	4620      	mov	r0, r4
 800edd0:	4641      	mov	r1, r8
 800edd2:	b005      	add	sp, #20
 800edd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd8:	9a02      	ldr	r2, [sp, #8]
 800edda:	1a12      	subs	r2, r2, r0
 800eddc:	9202      	str	r2, [sp, #8]
 800edde:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800ede2:	eb6c 0c02 	sbc.w	ip, ip, r2
 800ede6:	9a02      	ldr	r2, [sp, #8]
 800ede8:	4294      	cmp	r4, r2
 800edea:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800edee:	f6bf af2c 	bge.w	800ec4a <mktime+0x122>
 800edf2:	e7d3      	b.n	800ed9c <mktime+0x274>
 800edf4:	9a03      	ldr	r2, [sp, #12]
 800edf6:	4294      	cmp	r4, r2
 800edf8:	eb78 020b 	sbcs.w	r2, r8, fp
 800edfc:	f6ff af30 	blt.w	800ec60 <mktime+0x138>
 800ee00:	f1ba 0f00 	cmp.w	sl, #0
 800ee04:	dbcf      	blt.n	800eda6 <mktime+0x27e>
 800ee06:	f04f 0b01 	mov.w	fp, #1
 800ee0a:	e735      	b.n	800ec78 <mktime+0x150>
 800ee0c:	f04f 0b00 	mov.w	fp, #0
 800ee10:	e732      	b.n	800ec78 <mktime+0x150>
 800ee12:	1ac3      	subs	r3, r0, r3
 800ee14:	e73c      	b.n	800ec90 <mktime+0x168>
 800ee16:	f04f 3aff 	mov.w	sl, #4294967295
 800ee1a:	e74f      	b.n	800ecbc <mktime+0x194>
 800ee1c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800ee20:	e76c      	b.n	800ecfc <mktime+0x1d4>
 800ee22:	f240 136d 	movw	r3, #365	@ 0x16d
 800ee26:	e769      	b.n	800ecfc <mktime+0x1d4>
 800ee28:	07aa      	lsls	r2, r5, #30
 800ee2a:	d117      	bne.n	800ee5c <mktime+0x334>
 800ee2c:	2164      	movs	r1, #100	@ 0x64
 800ee2e:	fb95 f2f1 	sdiv	r2, r5, r1
 800ee32:	fb01 5212 	mls	r2, r1, r2, r5
 800ee36:	b9da      	cbnz	r2, 800ee70 <mktime+0x348>
 800ee38:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ee3c:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800ee40:	fb95 f1f2 	sdiv	r1, r5, r2
 800ee44:	fb02 5511 	mls	r5, r2, r1, r5
 800ee48:	2d00      	cmp	r5, #0
 800ee4a:	f240 126d 	movw	r2, #365	@ 0x16d
 800ee4e:	bf08      	it	eq
 800ee50:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ee54:	4293      	cmp	r3, r2
 800ee56:	bfa8      	it	ge
 800ee58:	1a9b      	subge	r3, r3, r2
 800ee5a:	e74f      	b.n	800ecfc <mktime+0x1d4>
 800ee5c:	f240 126d 	movw	r2, #365	@ 0x16d
 800ee60:	e7f8      	b.n	800ee54 <mktime+0x32c>
 800ee62:	bf00      	nop
 800ee64:	0803e340 	.word	0x0803e340
 800ee68:	00015180 	.word	0x00015180
 800ee6c:	20002da0 	.word	0x20002da0
 800ee70:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ee74:	e7ee      	b.n	800ee54 <mktime+0x32c>
 800ee76:	3607      	adds	r6, #7
 800ee78:	e7a6      	b.n	800edc8 <mktime+0x2a0>
 800ee7a:	f04f 34ff 	mov.w	r4, #4294967295
 800ee7e:	46a0      	mov	r8, r4
 800ee80:	e7a5      	b.n	800edce <mktime+0x2a6>
 800ee82:	f1ba 0f00 	cmp.w	sl, #0
 800ee86:	dac1      	bge.n	800ee0c <mktime+0x2e4>
 800ee88:	f04f 0b00 	mov.w	fp, #0
 800ee8c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800ee90:	191c      	adds	r4, r3, r4
 800ee92:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ee96:	e78d      	b.n	800edb4 <mktime+0x28c>

0800ee98 <__tzcalc_limits>:
 800ee98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee9c:	4604      	mov	r4, r0
 800ee9e:	f002 ffd7 	bl	8011e50 <__gettzinfo>
 800eea2:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800eea6:	429c      	cmp	r4, r3
 800eea8:	f340 80a3 	ble.w	800eff2 <__tzcalc_limits+0x15a>
 800eeac:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800eeb0:	1865      	adds	r5, r4, r1
 800eeb2:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800eeb6:	f240 126d 	movw	r2, #365	@ 0x16d
 800eeba:	10ad      	asrs	r5, r5, #2
 800eebc:	fb02 5503 	mla	r5, r2, r3, r5
 800eec0:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800eec4:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800eec8:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800eecc:	fb93 f3f2 	sdiv	r3, r3, r2
 800eed0:	441d      	add	r5, r3
 800eed2:	19a3      	adds	r3, r4, r6
 800eed4:	4e48      	ldr	r6, [pc, #288]	@ (800eff8 <__tzcalc_limits+0x160>)
 800eed6:	6044      	str	r4, [r0, #4]
 800eed8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800eedc:	4601      	mov	r1, r0
 800eede:	fbb3 f3f2 	udiv	r3, r3, r2
 800eee2:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800eee6:	441d      	add	r5, r3
 800eee8:	7a0b      	ldrb	r3, [r1, #8]
 800eeea:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800eeee:	2b4a      	cmp	r3, #74	@ 0x4a
 800eef0:	d138      	bne.n	800ef64 <__tzcalc_limits+0xcc>
 800eef2:	07a2      	lsls	r2, r4, #30
 800eef4:	eb05 030c 	add.w	r3, r5, ip
 800eef8:	d106      	bne.n	800ef08 <__tzcalc_limits+0x70>
 800eefa:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800eefe:	fb94 f2fe 	sdiv	r2, r4, lr
 800ef02:	fb0e 4212 	mls	r2, lr, r2, r4
 800ef06:	b932      	cbnz	r2, 800ef16 <__tzcalc_limits+0x7e>
 800ef08:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800ef0c:	fb94 f2fe 	sdiv	r2, r4, lr
 800ef10:	fb0e 4212 	mls	r2, lr, r2, r4
 800ef14:	bb1a      	cbnz	r2, 800ef5e <__tzcalc_limits+0xc6>
 800ef16:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800ef1a:	bfd4      	ite	le
 800ef1c:	f04f 0c00 	movle.w	ip, #0
 800ef20:	f04f 0c01 	movgt.w	ip, #1
 800ef24:	4463      	add	r3, ip
 800ef26:	3b01      	subs	r3, #1
 800ef28:	698a      	ldr	r2, [r1, #24]
 800ef2a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800ef2e:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800ef32:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800ef34:	18d2      	adds	r2, r2, r3
 800ef36:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800ef3a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800ef3e:	3128      	adds	r1, #40	@ 0x28
 800ef40:	428f      	cmp	r7, r1
 800ef42:	d1d1      	bne.n	800eee8 <__tzcalc_limits+0x50>
 800ef44:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800ef48:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800ef4c:	428c      	cmp	r4, r1
 800ef4e:	4193      	sbcs	r3, r2
 800ef50:	bfb4      	ite	lt
 800ef52:	2301      	movlt	r3, #1
 800ef54:	2300      	movge	r3, #0
 800ef56:	6003      	str	r3, [r0, #0]
 800ef58:	2001      	movs	r0, #1
 800ef5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef5e:	f04f 0c00 	mov.w	ip, #0
 800ef62:	e7df      	b.n	800ef24 <__tzcalc_limits+0x8c>
 800ef64:	2b44      	cmp	r3, #68	@ 0x44
 800ef66:	d102      	bne.n	800ef6e <__tzcalc_limits+0xd6>
 800ef68:	eb05 030c 	add.w	r3, r5, ip
 800ef6c:	e7dc      	b.n	800ef28 <__tzcalc_limits+0x90>
 800ef6e:	07a3      	lsls	r3, r4, #30
 800ef70:	d105      	bne.n	800ef7e <__tzcalc_limits+0xe6>
 800ef72:	2264      	movs	r2, #100	@ 0x64
 800ef74:	fb94 f3f2 	sdiv	r3, r4, r2
 800ef78:	fb02 4313 	mls	r3, r2, r3, r4
 800ef7c:	bb93      	cbnz	r3, 800efe4 <__tzcalc_limits+0x14c>
 800ef7e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ef82:	fb94 f3f2 	sdiv	r3, r4, r2
 800ef86:	fb02 4313 	mls	r3, r2, r3, r4
 800ef8a:	fab3 f383 	clz	r3, r3
 800ef8e:	095b      	lsrs	r3, r3, #5
 800ef90:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800effc <__tzcalc_limits+0x164>
 800ef94:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800ef98:	425b      	negs	r3, r3
 800ef9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ef9e:	462a      	mov	r2, r5
 800efa0:	f04f 0800 	mov.w	r8, #0
 800efa4:	4473      	add	r3, lr
 800efa6:	f108 0801 	add.w	r8, r8, #1
 800efaa:	45c1      	cmp	r9, r8
 800efac:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800efb0:	dc1a      	bgt.n	800efe8 <__tzcalc_limits+0x150>
 800efb2:	f102 0804 	add.w	r8, r2, #4
 800efb6:	2307      	movs	r3, #7
 800efb8:	fb98 f3f3 	sdiv	r3, r8, r3
 800efbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800efc0:	eba8 0303 	sub.w	r3, r8, r3
 800efc4:	ebbc 0c03 	subs.w	ip, ip, r3
 800efc8:	690b      	ldr	r3, [r1, #16]
 800efca:	f103 33ff 	add.w	r3, r3, #4294967295
 800efce:	bf48      	it	mi
 800efd0:	f10c 0c07 	addmi.w	ip, ip, #7
 800efd4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800efd8:	449c      	add	ip, r3
 800efda:	45f4      	cmp	ip, lr
 800efdc:	da06      	bge.n	800efec <__tzcalc_limits+0x154>
 800efde:	eb02 030c 	add.w	r3, r2, ip
 800efe2:	e7a1      	b.n	800ef28 <__tzcalc_limits+0x90>
 800efe4:	2301      	movs	r3, #1
 800efe6:	e7d3      	b.n	800ef90 <__tzcalc_limits+0xf8>
 800efe8:	4472      	add	r2, lr
 800efea:	e7dc      	b.n	800efa6 <__tzcalc_limits+0x10e>
 800efec:	f1ac 0c07 	sub.w	ip, ip, #7
 800eff0:	e7f3      	b.n	800efda <__tzcalc_limits+0x142>
 800eff2:	2000      	movs	r0, #0
 800eff4:	e7b1      	b.n	800ef5a <__tzcalc_limits+0xc2>
 800eff6:	bf00      	nop
 800eff8:	00015180 	.word	0x00015180
 800effc:	0803e4ec 	.word	0x0803e4ec

0800f000 <__tz_lock>:
 800f000:	4801      	ldr	r0, [pc, #4]	@ (800f008 <__tz_lock+0x8>)
 800f002:	f000 bab6 	b.w	800f572 <__retarget_lock_acquire>
 800f006:	bf00      	nop
 800f008:	20002da8 	.word	0x20002da8

0800f00c <__tz_unlock>:
 800f00c:	4801      	ldr	r0, [pc, #4]	@ (800f014 <__tz_unlock+0x8>)
 800f00e:	f000 bab2 	b.w	800f576 <__retarget_lock_release>
 800f012:	bf00      	nop
 800f014:	20002da8 	.word	0x20002da8

0800f018 <_tzset_unlocked>:
 800f018:	4b01      	ldr	r3, [pc, #4]	@ (800f020 <_tzset_unlocked+0x8>)
 800f01a:	6818      	ldr	r0, [r3, #0]
 800f01c:	f000 b802 	b.w	800f024 <_tzset_unlocked_r>
 800f020:	20000060 	.word	0x20000060

0800f024 <_tzset_unlocked_r>:
 800f024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f028:	b08d      	sub	sp, #52	@ 0x34
 800f02a:	4607      	mov	r7, r0
 800f02c:	f002 ff10 	bl	8011e50 <__gettzinfo>
 800f030:	49bc      	ldr	r1, [pc, #752]	@ (800f324 <_tzset_unlocked_r+0x300>)
 800f032:	4dbd      	ldr	r5, [pc, #756]	@ (800f328 <_tzset_unlocked_r+0x304>)
 800f034:	4604      	mov	r4, r0
 800f036:	4638      	mov	r0, r7
 800f038:	f001 f9a4 	bl	8010384 <_getenv_r>
 800f03c:	4606      	mov	r6, r0
 800f03e:	bb10      	cbnz	r0, 800f086 <_tzset_unlocked_r+0x62>
 800f040:	4bba      	ldr	r3, [pc, #744]	@ (800f32c <_tzset_unlocked_r+0x308>)
 800f042:	4abb      	ldr	r2, [pc, #748]	@ (800f330 <_tzset_unlocked_r+0x30c>)
 800f044:	6018      	str	r0, [r3, #0]
 800f046:	4bbb      	ldr	r3, [pc, #748]	@ (800f334 <_tzset_unlocked_r+0x310>)
 800f048:	62a0      	str	r0, [r4, #40]	@ 0x28
 800f04a:	6018      	str	r0, [r3, #0]
 800f04c:	4bba      	ldr	r3, [pc, #744]	@ (800f338 <_tzset_unlocked_r+0x314>)
 800f04e:	6520      	str	r0, [r4, #80]	@ 0x50
 800f050:	e9c3 2200 	strd	r2, r2, [r3]
 800f054:	214a      	movs	r1, #74	@ 0x4a
 800f056:	2200      	movs	r2, #0
 800f058:	2300      	movs	r3, #0
 800f05a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800f05e:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800f062:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800f066:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800f06a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f06e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800f072:	6828      	ldr	r0, [r5, #0]
 800f074:	7221      	strb	r1, [r4, #8]
 800f076:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800f07a:	f7fe fb37 	bl	800d6ec <free>
 800f07e:	602e      	str	r6, [r5, #0]
 800f080:	b00d      	add	sp, #52	@ 0x34
 800f082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f086:	6829      	ldr	r1, [r5, #0]
 800f088:	2900      	cmp	r1, #0
 800f08a:	f040 808e 	bne.w	800f1aa <_tzset_unlocked_r+0x186>
 800f08e:	6828      	ldr	r0, [r5, #0]
 800f090:	f7fe fb2c 	bl	800d6ec <free>
 800f094:	4630      	mov	r0, r6
 800f096:	f7f1 f8fb 	bl	8000290 <strlen>
 800f09a:	1c41      	adds	r1, r0, #1
 800f09c:	4638      	mov	r0, r7
 800f09e:	f7fe fb4f 	bl	800d740 <_malloc_r>
 800f0a2:	6028      	str	r0, [r5, #0]
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	f040 8086 	bne.w	800f1b6 <_tzset_unlocked_r+0x192>
 800f0aa:	4aa2      	ldr	r2, [pc, #648]	@ (800f334 <_tzset_unlocked_r+0x310>)
 800f0ac:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800f338 <_tzset_unlocked_r+0x314>
 800f0b0:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800f32c <_tzset_unlocked_r+0x308>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	6013      	str	r3, [r2, #0]
 800f0b8:	4aa0      	ldr	r2, [pc, #640]	@ (800f33c <_tzset_unlocked_r+0x318>)
 800f0ba:	f8ca 3000 	str.w	r3, [sl]
 800f0be:	2000      	movs	r0, #0
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	e9c8 2200 	strd	r2, r2, [r8]
 800f0c6:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800f0ca:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800f0ce:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800f0d2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800f0d6:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800f0da:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800f0de:	224a      	movs	r2, #74	@ 0x4a
 800f0e0:	7222      	strb	r2, [r4, #8]
 800f0e2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f0e4:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800f0e8:	6523      	str	r3, [r4, #80]	@ 0x50
 800f0ea:	7833      	ldrb	r3, [r6, #0]
 800f0ec:	2b3a      	cmp	r3, #58	@ 0x3a
 800f0ee:	bf08      	it	eq
 800f0f0:	3601      	addeq	r6, #1
 800f0f2:	7833      	ldrb	r3, [r6, #0]
 800f0f4:	2b3c      	cmp	r3, #60	@ 0x3c
 800f0f6:	d162      	bne.n	800f1be <_tzset_unlocked_r+0x19a>
 800f0f8:	1c75      	adds	r5, r6, #1
 800f0fa:	4a91      	ldr	r2, [pc, #580]	@ (800f340 <_tzset_unlocked_r+0x31c>)
 800f0fc:	4991      	ldr	r1, [pc, #580]	@ (800f344 <_tzset_unlocked_r+0x320>)
 800f0fe:	ab0a      	add	r3, sp, #40	@ 0x28
 800f100:	4628      	mov	r0, r5
 800f102:	f002 fe79 	bl	8011df8 <siscanf>
 800f106:	2800      	cmp	r0, #0
 800f108:	ddba      	ble.n	800f080 <_tzset_unlocked_r+0x5c>
 800f10a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f10c:	1eda      	subs	r2, r3, #3
 800f10e:	2a07      	cmp	r2, #7
 800f110:	d8b6      	bhi.n	800f080 <_tzset_unlocked_r+0x5c>
 800f112:	5ceb      	ldrb	r3, [r5, r3]
 800f114:	2b3e      	cmp	r3, #62	@ 0x3e
 800f116:	d1b3      	bne.n	800f080 <_tzset_unlocked_r+0x5c>
 800f118:	3602      	adds	r6, #2
 800f11a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f11c:	18f5      	adds	r5, r6, r3
 800f11e:	5cf3      	ldrb	r3, [r6, r3]
 800f120:	2b2d      	cmp	r3, #45	@ 0x2d
 800f122:	d15a      	bne.n	800f1da <_tzset_unlocked_r+0x1b6>
 800f124:	3501      	adds	r5, #1
 800f126:	f04f 39ff 	mov.w	r9, #4294967295
 800f12a:	2300      	movs	r3, #0
 800f12c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f130:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f134:	af08      	add	r7, sp, #32
 800f136:	ab0a      	add	r3, sp, #40	@ 0x28
 800f138:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800f13c:	9303      	str	r3, [sp, #12]
 800f13e:	f10d 031e 	add.w	r3, sp, #30
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	4980      	ldr	r1, [pc, #512]	@ (800f348 <_tzset_unlocked_r+0x324>)
 800f146:	ab0a      	add	r3, sp, #40	@ 0x28
 800f148:	aa07      	add	r2, sp, #28
 800f14a:	4628      	mov	r0, r5
 800f14c:	f002 fe54 	bl	8011df8 <siscanf>
 800f150:	2800      	cmp	r0, #0
 800f152:	dd95      	ble.n	800f080 <_tzset_unlocked_r+0x5c>
 800f154:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f158:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800f15c:	223c      	movs	r2, #60	@ 0x3c
 800f15e:	fb02 6603 	mla	r6, r2, r3, r6
 800f162:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f166:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800f16a:	fb02 6603 	mla	r6, r2, r3, r6
 800f16e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f170:	fb09 f606 	mul.w	r6, r9, r6
 800f174:	eb05 0903 	add.w	r9, r5, r3
 800f178:	5ceb      	ldrb	r3, [r5, r3]
 800f17a:	2b3c      	cmp	r3, #60	@ 0x3c
 800f17c:	f040 80ee 	bne.w	800f35c <_tzset_unlocked_r+0x338>
 800f180:	f109 0501 	add.w	r5, r9, #1
 800f184:	4a71      	ldr	r2, [pc, #452]	@ (800f34c <_tzset_unlocked_r+0x328>)
 800f186:	496f      	ldr	r1, [pc, #444]	@ (800f344 <_tzset_unlocked_r+0x320>)
 800f188:	ab0a      	add	r3, sp, #40	@ 0x28
 800f18a:	4628      	mov	r0, r5
 800f18c:	f002 fe34 	bl	8011df8 <siscanf>
 800f190:	2800      	cmp	r0, #0
 800f192:	dc28      	bgt.n	800f1e6 <_tzset_unlocked_r+0x1c2>
 800f194:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f198:	2b3e      	cmp	r3, #62	@ 0x3e
 800f19a:	d124      	bne.n	800f1e6 <_tzset_unlocked_r+0x1c2>
 800f19c:	4b68      	ldr	r3, [pc, #416]	@ (800f340 <_tzset_unlocked_r+0x31c>)
 800f19e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800f1a0:	e9c8 3300 	strd	r3, r3, [r8]
 800f1a4:	f8ca 6000 	str.w	r6, [sl]
 800f1a8:	e76a      	b.n	800f080 <_tzset_unlocked_r+0x5c>
 800f1aa:	f7f1 f811 	bl	80001d0 <strcmp>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	f47f af6d 	bne.w	800f08e <_tzset_unlocked_r+0x6a>
 800f1b4:	e764      	b.n	800f080 <_tzset_unlocked_r+0x5c>
 800f1b6:	4631      	mov	r1, r6
 800f1b8:	f000 f9df 	bl	800f57a <strcpy>
 800f1bc:	e775      	b.n	800f0aa <_tzset_unlocked_r+0x86>
 800f1be:	4a60      	ldr	r2, [pc, #384]	@ (800f340 <_tzset_unlocked_r+0x31c>)
 800f1c0:	4963      	ldr	r1, [pc, #396]	@ (800f350 <_tzset_unlocked_r+0x32c>)
 800f1c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800f1c4:	4630      	mov	r0, r6
 800f1c6:	f002 fe17 	bl	8011df8 <siscanf>
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	f77f af58 	ble.w	800f080 <_tzset_unlocked_r+0x5c>
 800f1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1d2:	3b03      	subs	r3, #3
 800f1d4:	2b07      	cmp	r3, #7
 800f1d6:	d9a0      	bls.n	800f11a <_tzset_unlocked_r+0xf6>
 800f1d8:	e752      	b.n	800f080 <_tzset_unlocked_r+0x5c>
 800f1da:	2b2b      	cmp	r3, #43	@ 0x2b
 800f1dc:	bf08      	it	eq
 800f1de:	3501      	addeq	r5, #1
 800f1e0:	f04f 0901 	mov.w	r9, #1
 800f1e4:	e7a1      	b.n	800f12a <_tzset_unlocked_r+0x106>
 800f1e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1e8:	1eda      	subs	r2, r3, #3
 800f1ea:	2a07      	cmp	r2, #7
 800f1ec:	f63f af48 	bhi.w	800f080 <_tzset_unlocked_r+0x5c>
 800f1f0:	5ceb      	ldrb	r3, [r5, r3]
 800f1f2:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1f4:	f47f af44 	bne.w	800f080 <_tzset_unlocked_r+0x5c>
 800f1f8:	f109 0902 	add.w	r9, r9, #2
 800f1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1fe:	eb09 0503 	add.w	r5, r9, r3
 800f202:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f206:	2b2d      	cmp	r3, #45	@ 0x2d
 800f208:	f040 80b7 	bne.w	800f37a <_tzset_unlocked_r+0x356>
 800f20c:	3501      	adds	r5, #1
 800f20e:	f04f 39ff 	mov.w	r9, #4294967295
 800f212:	2300      	movs	r3, #0
 800f214:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f218:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f21c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f220:	930a      	str	r3, [sp, #40]	@ 0x28
 800f222:	ab0a      	add	r3, sp, #40	@ 0x28
 800f224:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800f228:	9301      	str	r3, [sp, #4]
 800f22a:	f10d 031e 	add.w	r3, sp, #30
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	4945      	ldr	r1, [pc, #276]	@ (800f348 <_tzset_unlocked_r+0x324>)
 800f232:	ab0a      	add	r3, sp, #40	@ 0x28
 800f234:	aa07      	add	r2, sp, #28
 800f236:	4628      	mov	r0, r5
 800f238:	f002 fdde 	bl	8011df8 <siscanf>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	f300 80a2 	bgt.w	800f386 <_tzset_unlocked_r+0x362>
 800f242:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800f246:	9304      	str	r3, [sp, #16]
 800f248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f24a:	4627      	mov	r7, r4
 800f24c:	441d      	add	r5, r3
 800f24e:	f04f 0b00 	mov.w	fp, #0
 800f252:	782b      	ldrb	r3, [r5, #0]
 800f254:	2b2c      	cmp	r3, #44	@ 0x2c
 800f256:	bf08      	it	eq
 800f258:	3501      	addeq	r5, #1
 800f25a:	f895 9000 	ldrb.w	r9, [r5]
 800f25e:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800f262:	f040 80a3 	bne.w	800f3ac <_tzset_unlocked_r+0x388>
 800f266:	ab0a      	add	r3, sp, #40	@ 0x28
 800f268:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800f26c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f270:	aa09      	add	r2, sp, #36	@ 0x24
 800f272:	9200      	str	r2, [sp, #0]
 800f274:	4937      	ldr	r1, [pc, #220]	@ (800f354 <_tzset_unlocked_r+0x330>)
 800f276:	9303      	str	r3, [sp, #12]
 800f278:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800f27c:	4628      	mov	r0, r5
 800f27e:	f002 fdbb 	bl	8011df8 <siscanf>
 800f282:	2803      	cmp	r0, #3
 800f284:	f47f aefc 	bne.w	800f080 <_tzset_unlocked_r+0x5c>
 800f288:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800f28c:	1e4b      	subs	r3, r1, #1
 800f28e:	2b0b      	cmp	r3, #11
 800f290:	f63f aef6 	bhi.w	800f080 <_tzset_unlocked_r+0x5c>
 800f294:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800f298:	1e53      	subs	r3, r2, #1
 800f29a:	2b04      	cmp	r3, #4
 800f29c:	f63f aef0 	bhi.w	800f080 <_tzset_unlocked_r+0x5c>
 800f2a0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800f2a4:	2b06      	cmp	r3, #6
 800f2a6:	f63f aeeb 	bhi.w	800f080 <_tzset_unlocked_r+0x5c>
 800f2aa:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800f2ae:	f887 9008 	strb.w	r9, [r7, #8]
 800f2b2:	617b      	str	r3, [r7, #20]
 800f2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2b6:	eb05 0903 	add.w	r9, r5, r3
 800f2ba:	2500      	movs	r5, #0
 800f2bc:	f04f 0302 	mov.w	r3, #2
 800f2c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f2c4:	f8ad 501e 	strh.w	r5, [sp, #30]
 800f2c8:	f8ad 5020 	strh.w	r5, [sp, #32]
 800f2cc:	950a      	str	r5, [sp, #40]	@ 0x28
 800f2ce:	f899 3000 	ldrb.w	r3, [r9]
 800f2d2:	2b2f      	cmp	r3, #47	@ 0x2f
 800f2d4:	f040 8096 	bne.w	800f404 <_tzset_unlocked_r+0x3e0>
 800f2d8:	ab0a      	add	r3, sp, #40	@ 0x28
 800f2da:	aa08      	add	r2, sp, #32
 800f2dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f2e0:	f10d 021e 	add.w	r2, sp, #30
 800f2e4:	9200      	str	r2, [sp, #0]
 800f2e6:	491c      	ldr	r1, [pc, #112]	@ (800f358 <_tzset_unlocked_r+0x334>)
 800f2e8:	9303      	str	r3, [sp, #12]
 800f2ea:	aa07      	add	r2, sp, #28
 800f2ec:	4648      	mov	r0, r9
 800f2ee:	f002 fd83 	bl	8011df8 <siscanf>
 800f2f2:	42a8      	cmp	r0, r5
 800f2f4:	f300 8086 	bgt.w	800f404 <_tzset_unlocked_r+0x3e0>
 800f2f8:	214a      	movs	r1, #74	@ 0x4a
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800f302:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f306:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f30a:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800f30e:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800f312:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800f316:	7221      	strb	r1, [r4, #8]
 800f318:	62a5      	str	r5, [r4, #40]	@ 0x28
 800f31a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800f31e:	6525      	str	r5, [r4, #80]	@ 0x50
 800f320:	e6ae      	b.n	800f080 <_tzset_unlocked_r+0x5c>
 800f322:	bf00      	nop
 800f324:	0803e138 	.word	0x0803e138
 800f328:	20002d80 	.word	0x20002d80
 800f32c:	20002d9c 	.word	0x20002d9c
 800f330:	0803e13b 	.word	0x0803e13b
 800f334:	20002da0 	.word	0x20002da0
 800f338:	20000058 	.word	0x20000058
 800f33c:	0803e2c2 	.word	0x0803e2c2
 800f340:	20002d90 	.word	0x20002d90
 800f344:	0803e13f 	.word	0x0803e13f
 800f348:	0803e174 	.word	0x0803e174
 800f34c:	20002d84 	.word	0x20002d84
 800f350:	0803e152 	.word	0x0803e152
 800f354:	0803e160 	.word	0x0803e160
 800f358:	0803e173 	.word	0x0803e173
 800f35c:	4a3e      	ldr	r2, [pc, #248]	@ (800f458 <_tzset_unlocked_r+0x434>)
 800f35e:	493f      	ldr	r1, [pc, #252]	@ (800f45c <_tzset_unlocked_r+0x438>)
 800f360:	ab0a      	add	r3, sp, #40	@ 0x28
 800f362:	4648      	mov	r0, r9
 800f364:	f002 fd48 	bl	8011df8 <siscanf>
 800f368:	2800      	cmp	r0, #0
 800f36a:	f77f af17 	ble.w	800f19c <_tzset_unlocked_r+0x178>
 800f36e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f370:	3b03      	subs	r3, #3
 800f372:	2b07      	cmp	r3, #7
 800f374:	f67f af42 	bls.w	800f1fc <_tzset_unlocked_r+0x1d8>
 800f378:	e682      	b.n	800f080 <_tzset_unlocked_r+0x5c>
 800f37a:	2b2b      	cmp	r3, #43	@ 0x2b
 800f37c:	bf08      	it	eq
 800f37e:	3501      	addeq	r5, #1
 800f380:	f04f 0901 	mov.w	r9, #1
 800f384:	e745      	b.n	800f212 <_tzset_unlocked_r+0x1ee>
 800f386:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f38a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f38e:	213c      	movs	r1, #60	@ 0x3c
 800f390:	fb01 3302 	mla	r3, r1, r2, r3
 800f394:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f398:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800f39c:	fb01 3302 	mla	r3, r1, r2, r3
 800f3a0:	fb09 f303 	mul.w	r3, r9, r3
 800f3a4:	e74f      	b.n	800f246 <_tzset_unlocked_r+0x222>
 800f3a6:	f04f 0b01 	mov.w	fp, #1
 800f3aa:	e752      	b.n	800f252 <_tzset_unlocked_r+0x22e>
 800f3ac:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800f3b0:	bf06      	itte	eq
 800f3b2:	3501      	addeq	r5, #1
 800f3b4:	464b      	moveq	r3, r9
 800f3b6:	2344      	movne	r3, #68	@ 0x44
 800f3b8:	220a      	movs	r2, #10
 800f3ba:	a90b      	add	r1, sp, #44	@ 0x2c
 800f3bc:	4628      	mov	r0, r5
 800f3be:	9305      	str	r3, [sp, #20]
 800f3c0:	f002 fb0c 	bl	80119dc <strtoul>
 800f3c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800f3c8:	9b05      	ldr	r3, [sp, #20]
 800f3ca:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800f3ce:	45a9      	cmp	r9, r5
 800f3d0:	d114      	bne.n	800f3fc <_tzset_unlocked_r+0x3d8>
 800f3d2:	234d      	movs	r3, #77	@ 0x4d
 800f3d4:	f1bb 0f00 	cmp.w	fp, #0
 800f3d8:	d107      	bne.n	800f3ea <_tzset_unlocked_r+0x3c6>
 800f3da:	7223      	strb	r3, [r4, #8]
 800f3dc:	2103      	movs	r1, #3
 800f3de:	2302      	movs	r3, #2
 800f3e0:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800f3e4:	f8c4 b014 	str.w	fp, [r4, #20]
 800f3e8:	e767      	b.n	800f2ba <_tzset_unlocked_r+0x296>
 800f3ea:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800f3ee:	220b      	movs	r2, #11
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f3fa:	e75e      	b.n	800f2ba <_tzset_unlocked_r+0x296>
 800f3fc:	b280      	uxth	r0, r0
 800f3fe:	723b      	strb	r3, [r7, #8]
 800f400:	6178      	str	r0, [r7, #20]
 800f402:	e75a      	b.n	800f2ba <_tzset_unlocked_r+0x296>
 800f404:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f408:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f40c:	213c      	movs	r1, #60	@ 0x3c
 800f40e:	fb01 3302 	mla	r3, r1, r2, r3
 800f412:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f416:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800f41a:	fb01 3302 	mla	r3, r1, r2, r3
 800f41e:	61bb      	str	r3, [r7, #24]
 800f420:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f422:	3728      	adds	r7, #40	@ 0x28
 800f424:	444d      	add	r5, r9
 800f426:	f1bb 0f00 	cmp.w	fp, #0
 800f42a:	d0bc      	beq.n	800f3a6 <_tzset_unlocked_r+0x382>
 800f42c:	9b04      	ldr	r3, [sp, #16]
 800f42e:	6523      	str	r3, [r4, #80]	@ 0x50
 800f430:	4b0b      	ldr	r3, [pc, #44]	@ (800f460 <_tzset_unlocked_r+0x43c>)
 800f432:	f8c8 3000 	str.w	r3, [r8]
 800f436:	6860      	ldr	r0, [r4, #4]
 800f438:	4b07      	ldr	r3, [pc, #28]	@ (800f458 <_tzset_unlocked_r+0x434>)
 800f43a:	62a6      	str	r6, [r4, #40]	@ 0x28
 800f43c:	f8c8 3004 	str.w	r3, [r8, #4]
 800f440:	f7ff fd2a 	bl	800ee98 <__tzcalc_limits>
 800f444:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f446:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f448:	f8ca 2000 	str.w	r2, [sl]
 800f44c:	1a9b      	subs	r3, r3, r2
 800f44e:	4a05      	ldr	r2, [pc, #20]	@ (800f464 <_tzset_unlocked_r+0x440>)
 800f450:	bf18      	it	ne
 800f452:	2301      	movne	r3, #1
 800f454:	6013      	str	r3, [r2, #0]
 800f456:	e613      	b.n	800f080 <_tzset_unlocked_r+0x5c>
 800f458:	20002d84 	.word	0x20002d84
 800f45c:	0803e152 	.word	0x0803e152
 800f460:	20002d90 	.word	0x20002d90
 800f464:	20002da0 	.word	0x20002da0

0800f468 <_localeconv_r>:
 800f468:	4800      	ldr	r0, [pc, #0]	@ (800f46c <_localeconv_r+0x4>)
 800f46a:	4770      	bx	lr
 800f46c:	200001f8 	.word	0x200001f8

0800f470 <_close_r>:
 800f470:	b538      	push	{r3, r4, r5, lr}
 800f472:	4d06      	ldr	r5, [pc, #24]	@ (800f48c <_close_r+0x1c>)
 800f474:	2300      	movs	r3, #0
 800f476:	4604      	mov	r4, r0
 800f478:	4608      	mov	r0, r1
 800f47a:	602b      	str	r3, [r5, #0]
 800f47c:	f7f3 f9ba 	bl	80027f4 <_close>
 800f480:	1c43      	adds	r3, r0, #1
 800f482:	d102      	bne.n	800f48a <_close_r+0x1a>
 800f484:	682b      	ldr	r3, [r5, #0]
 800f486:	b103      	cbz	r3, 800f48a <_close_r+0x1a>
 800f488:	6023      	str	r3, [r4, #0]
 800f48a:	bd38      	pop	{r3, r4, r5, pc}
 800f48c:	20002da4 	.word	0x20002da4

0800f490 <_lseek_r>:
 800f490:	b538      	push	{r3, r4, r5, lr}
 800f492:	4d07      	ldr	r5, [pc, #28]	@ (800f4b0 <_lseek_r+0x20>)
 800f494:	4604      	mov	r4, r0
 800f496:	4608      	mov	r0, r1
 800f498:	4611      	mov	r1, r2
 800f49a:	2200      	movs	r2, #0
 800f49c:	602a      	str	r2, [r5, #0]
 800f49e:	461a      	mov	r2, r3
 800f4a0:	f7f3 f9cf 	bl	8002842 <_lseek>
 800f4a4:	1c43      	adds	r3, r0, #1
 800f4a6:	d102      	bne.n	800f4ae <_lseek_r+0x1e>
 800f4a8:	682b      	ldr	r3, [r5, #0]
 800f4aa:	b103      	cbz	r3, 800f4ae <_lseek_r+0x1e>
 800f4ac:	6023      	str	r3, [r4, #0]
 800f4ae:	bd38      	pop	{r3, r4, r5, pc}
 800f4b0:	20002da4 	.word	0x20002da4

0800f4b4 <_read_r>:
 800f4b4:	b538      	push	{r3, r4, r5, lr}
 800f4b6:	4d07      	ldr	r5, [pc, #28]	@ (800f4d4 <_read_r+0x20>)
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	4608      	mov	r0, r1
 800f4bc:	4611      	mov	r1, r2
 800f4be:	2200      	movs	r2, #0
 800f4c0:	602a      	str	r2, [r5, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	f7f3 f979 	bl	80027ba <_read>
 800f4c8:	1c43      	adds	r3, r0, #1
 800f4ca:	d102      	bne.n	800f4d2 <_read_r+0x1e>
 800f4cc:	682b      	ldr	r3, [r5, #0]
 800f4ce:	b103      	cbz	r3, 800f4d2 <_read_r+0x1e>
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	bd38      	pop	{r3, r4, r5, pc}
 800f4d4:	20002da4 	.word	0x20002da4

0800f4d8 <_sbrk_r>:
 800f4d8:	b538      	push	{r3, r4, r5, lr}
 800f4da:	4d06      	ldr	r5, [pc, #24]	@ (800f4f4 <_sbrk_r+0x1c>)
 800f4dc:	2300      	movs	r3, #0
 800f4de:	4604      	mov	r4, r0
 800f4e0:	4608      	mov	r0, r1
 800f4e2:	602b      	str	r3, [r5, #0]
 800f4e4:	f7f3 f9ba 	bl	800285c <_sbrk>
 800f4e8:	1c43      	adds	r3, r0, #1
 800f4ea:	d102      	bne.n	800f4f2 <_sbrk_r+0x1a>
 800f4ec:	682b      	ldr	r3, [r5, #0]
 800f4ee:	b103      	cbz	r3, 800f4f2 <_sbrk_r+0x1a>
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	bd38      	pop	{r3, r4, r5, pc}
 800f4f4:	20002da4 	.word	0x20002da4

0800f4f8 <_write_r>:
 800f4f8:	b538      	push	{r3, r4, r5, lr}
 800f4fa:	4d07      	ldr	r5, [pc, #28]	@ (800f518 <_write_r+0x20>)
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	4608      	mov	r0, r1
 800f500:	4611      	mov	r1, r2
 800f502:	2200      	movs	r2, #0
 800f504:	602a      	str	r2, [r5, #0]
 800f506:	461a      	mov	r2, r3
 800f508:	f7f1 ffe0 	bl	80014cc <_write>
 800f50c:	1c43      	adds	r3, r0, #1
 800f50e:	d102      	bne.n	800f516 <_write_r+0x1e>
 800f510:	682b      	ldr	r3, [r5, #0]
 800f512:	b103      	cbz	r3, 800f516 <_write_r+0x1e>
 800f514:	6023      	str	r3, [r4, #0]
 800f516:	bd38      	pop	{r3, r4, r5, pc}
 800f518:	20002da4 	.word	0x20002da4

0800f51c <__errno>:
 800f51c:	4b01      	ldr	r3, [pc, #4]	@ (800f524 <__errno+0x8>)
 800f51e:	6818      	ldr	r0, [r3, #0]
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop
 800f524:	20000060 	.word	0x20000060

0800f528 <__libc_init_array>:
 800f528:	b570      	push	{r4, r5, r6, lr}
 800f52a:	4d0d      	ldr	r5, [pc, #52]	@ (800f560 <__libc_init_array+0x38>)
 800f52c:	4c0d      	ldr	r4, [pc, #52]	@ (800f564 <__libc_init_array+0x3c>)
 800f52e:	1b64      	subs	r4, r4, r5
 800f530:	10a4      	asrs	r4, r4, #2
 800f532:	2600      	movs	r6, #0
 800f534:	42a6      	cmp	r6, r4
 800f536:	d109      	bne.n	800f54c <__libc_init_array+0x24>
 800f538:	4d0b      	ldr	r5, [pc, #44]	@ (800f568 <__libc_init_array+0x40>)
 800f53a:	4c0c      	ldr	r4, [pc, #48]	@ (800f56c <__libc_init_array+0x44>)
 800f53c:	f003 fea8 	bl	8013290 <_init>
 800f540:	1b64      	subs	r4, r4, r5
 800f542:	10a4      	asrs	r4, r4, #2
 800f544:	2600      	movs	r6, #0
 800f546:	42a6      	cmp	r6, r4
 800f548:	d105      	bne.n	800f556 <__libc_init_array+0x2e>
 800f54a:	bd70      	pop	{r4, r5, r6, pc}
 800f54c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f550:	4798      	blx	r3
 800f552:	3601      	adds	r6, #1
 800f554:	e7ee      	b.n	800f534 <__libc_init_array+0xc>
 800f556:	f855 3b04 	ldr.w	r3, [r5], #4
 800f55a:	4798      	blx	r3
 800f55c:	3601      	adds	r6, #1
 800f55e:	e7f2      	b.n	800f546 <__libc_init_array+0x1e>
 800f560:	0803e558 	.word	0x0803e558
 800f564:	0803e558 	.word	0x0803e558
 800f568:	0803e558 	.word	0x0803e558
 800f56c:	0803e55c 	.word	0x0803e55c

0800f570 <__retarget_lock_init_recursive>:
 800f570:	4770      	bx	lr

0800f572 <__retarget_lock_acquire>:
 800f572:	4770      	bx	lr

0800f574 <__retarget_lock_acquire_recursive>:
 800f574:	4770      	bx	lr

0800f576 <__retarget_lock_release>:
 800f576:	4770      	bx	lr

0800f578 <__retarget_lock_release_recursive>:
 800f578:	4770      	bx	lr

0800f57a <strcpy>:
 800f57a:	4603      	mov	r3, r0
 800f57c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f580:	f803 2b01 	strb.w	r2, [r3], #1
 800f584:	2a00      	cmp	r2, #0
 800f586:	d1f9      	bne.n	800f57c <strcpy+0x2>
 800f588:	4770      	bx	lr

0800f58a <memcpy>:
 800f58a:	440a      	add	r2, r1
 800f58c:	4291      	cmp	r1, r2
 800f58e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f592:	d100      	bne.n	800f596 <memcpy+0xc>
 800f594:	4770      	bx	lr
 800f596:	b510      	push	{r4, lr}
 800f598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f59c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5a0:	4291      	cmp	r1, r2
 800f5a2:	d1f9      	bne.n	800f598 <memcpy+0xe>
 800f5a4:	bd10      	pop	{r4, pc}
	...

0800f5a8 <nanf>:
 800f5a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f5b0 <nanf+0x8>
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	7fc00000 	.word	0x7fc00000

0800f5b4 <div>:
 800f5b4:	b510      	push	{r4, lr}
 800f5b6:	fb91 f4f2 	sdiv	r4, r1, r2
 800f5ba:	fb02 1114 	mls	r1, r2, r4, r1
 800f5be:	6004      	str	r4, [r0, #0]
 800f5c0:	6041      	str	r1, [r0, #4]
 800f5c2:	bd10      	pop	{r4, pc}

0800f5c4 <quorem>:
 800f5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c8:	6903      	ldr	r3, [r0, #16]
 800f5ca:	690c      	ldr	r4, [r1, #16]
 800f5cc:	42a3      	cmp	r3, r4
 800f5ce:	4607      	mov	r7, r0
 800f5d0:	db7e      	blt.n	800f6d0 <quorem+0x10c>
 800f5d2:	3c01      	subs	r4, #1
 800f5d4:	f101 0814 	add.w	r8, r1, #20
 800f5d8:	00a3      	lsls	r3, r4, #2
 800f5da:	f100 0514 	add.w	r5, r0, #20
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f5ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f5f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f5fa:	d32e      	bcc.n	800f65a <quorem+0x96>
 800f5fc:	f04f 0a00 	mov.w	sl, #0
 800f600:	46c4      	mov	ip, r8
 800f602:	46ae      	mov	lr, r5
 800f604:	46d3      	mov	fp, sl
 800f606:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f60a:	b298      	uxth	r0, r3
 800f60c:	fb06 a000 	mla	r0, r6, r0, sl
 800f610:	0c02      	lsrs	r2, r0, #16
 800f612:	0c1b      	lsrs	r3, r3, #16
 800f614:	fb06 2303 	mla	r3, r6, r3, r2
 800f618:	f8de 2000 	ldr.w	r2, [lr]
 800f61c:	b280      	uxth	r0, r0
 800f61e:	b292      	uxth	r2, r2
 800f620:	1a12      	subs	r2, r2, r0
 800f622:	445a      	add	r2, fp
 800f624:	f8de 0000 	ldr.w	r0, [lr]
 800f628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f632:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f636:	b292      	uxth	r2, r2
 800f638:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f63c:	45e1      	cmp	r9, ip
 800f63e:	f84e 2b04 	str.w	r2, [lr], #4
 800f642:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f646:	d2de      	bcs.n	800f606 <quorem+0x42>
 800f648:	9b00      	ldr	r3, [sp, #0]
 800f64a:	58eb      	ldr	r3, [r5, r3]
 800f64c:	b92b      	cbnz	r3, 800f65a <quorem+0x96>
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	3b04      	subs	r3, #4
 800f652:	429d      	cmp	r5, r3
 800f654:	461a      	mov	r2, r3
 800f656:	d32f      	bcc.n	800f6b8 <quorem+0xf4>
 800f658:	613c      	str	r4, [r7, #16]
 800f65a:	4638      	mov	r0, r7
 800f65c:	f001 f956 	bl	801090c <__mcmp>
 800f660:	2800      	cmp	r0, #0
 800f662:	db25      	blt.n	800f6b0 <quorem+0xec>
 800f664:	4629      	mov	r1, r5
 800f666:	2000      	movs	r0, #0
 800f668:	f858 2b04 	ldr.w	r2, [r8], #4
 800f66c:	f8d1 c000 	ldr.w	ip, [r1]
 800f670:	fa1f fe82 	uxth.w	lr, r2
 800f674:	fa1f f38c 	uxth.w	r3, ip
 800f678:	eba3 030e 	sub.w	r3, r3, lr
 800f67c:	4403      	add	r3, r0
 800f67e:	0c12      	lsrs	r2, r2, #16
 800f680:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f684:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f688:	b29b      	uxth	r3, r3
 800f68a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f68e:	45c1      	cmp	r9, r8
 800f690:	f841 3b04 	str.w	r3, [r1], #4
 800f694:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f698:	d2e6      	bcs.n	800f668 <quorem+0xa4>
 800f69a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f69e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6a2:	b922      	cbnz	r2, 800f6ae <quorem+0xea>
 800f6a4:	3b04      	subs	r3, #4
 800f6a6:	429d      	cmp	r5, r3
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	d30b      	bcc.n	800f6c4 <quorem+0x100>
 800f6ac:	613c      	str	r4, [r7, #16]
 800f6ae:	3601      	adds	r6, #1
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	b003      	add	sp, #12
 800f6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b8:	6812      	ldr	r2, [r2, #0]
 800f6ba:	3b04      	subs	r3, #4
 800f6bc:	2a00      	cmp	r2, #0
 800f6be:	d1cb      	bne.n	800f658 <quorem+0x94>
 800f6c0:	3c01      	subs	r4, #1
 800f6c2:	e7c6      	b.n	800f652 <quorem+0x8e>
 800f6c4:	6812      	ldr	r2, [r2, #0]
 800f6c6:	3b04      	subs	r3, #4
 800f6c8:	2a00      	cmp	r2, #0
 800f6ca:	d1ef      	bne.n	800f6ac <quorem+0xe8>
 800f6cc:	3c01      	subs	r4, #1
 800f6ce:	e7ea      	b.n	800f6a6 <quorem+0xe2>
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	e7ee      	b.n	800f6b2 <quorem+0xee>
 800f6d4:	0000      	movs	r0, r0
	...

0800f6d8 <_dtoa_r>:
 800f6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6dc:	69c7      	ldr	r7, [r0, #28]
 800f6de:	b097      	sub	sp, #92	@ 0x5c
 800f6e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f6e4:	ec55 4b10 	vmov	r4, r5, d0
 800f6e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f6ea:	9107      	str	r1, [sp, #28]
 800f6ec:	4681      	mov	r9, r0
 800f6ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800f6f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f6f2:	b97f      	cbnz	r7, 800f714 <_dtoa_r+0x3c>
 800f6f4:	2010      	movs	r0, #16
 800f6f6:	f7fd fff1 	bl	800d6dc <malloc>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	f8c9 001c 	str.w	r0, [r9, #28]
 800f700:	b920      	cbnz	r0, 800f70c <_dtoa_r+0x34>
 800f702:	4ba9      	ldr	r3, [pc, #676]	@ (800f9a8 <_dtoa_r+0x2d0>)
 800f704:	21ef      	movs	r1, #239	@ 0xef
 800f706:	48a9      	ldr	r0, [pc, #676]	@ (800f9ac <_dtoa_r+0x2d4>)
 800f708:	f002 fbae 	bl	8011e68 <__assert_func>
 800f70c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f710:	6007      	str	r7, [r0, #0]
 800f712:	60c7      	str	r7, [r0, #12]
 800f714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f718:	6819      	ldr	r1, [r3, #0]
 800f71a:	b159      	cbz	r1, 800f734 <_dtoa_r+0x5c>
 800f71c:	685a      	ldr	r2, [r3, #4]
 800f71e:	604a      	str	r2, [r1, #4]
 800f720:	2301      	movs	r3, #1
 800f722:	4093      	lsls	r3, r2
 800f724:	608b      	str	r3, [r1, #8]
 800f726:	4648      	mov	r0, r9
 800f728:	f000 fe74 	bl	8010414 <_Bfree>
 800f72c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f730:	2200      	movs	r2, #0
 800f732:	601a      	str	r2, [r3, #0]
 800f734:	1e2b      	subs	r3, r5, #0
 800f736:	bfb9      	ittee	lt
 800f738:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f73c:	9305      	strlt	r3, [sp, #20]
 800f73e:	2300      	movge	r3, #0
 800f740:	6033      	strge	r3, [r6, #0]
 800f742:	9f05      	ldr	r7, [sp, #20]
 800f744:	4b9a      	ldr	r3, [pc, #616]	@ (800f9b0 <_dtoa_r+0x2d8>)
 800f746:	bfbc      	itt	lt
 800f748:	2201      	movlt	r2, #1
 800f74a:	6032      	strlt	r2, [r6, #0]
 800f74c:	43bb      	bics	r3, r7
 800f74e:	d112      	bne.n	800f776 <_dtoa_r+0x9e>
 800f750:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f752:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f756:	6013      	str	r3, [r2, #0]
 800f758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f75c:	4323      	orrs	r3, r4
 800f75e:	f000 855a 	beq.w	8010216 <_dtoa_r+0xb3e>
 800f762:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f764:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f9c4 <_dtoa_r+0x2ec>
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 855c 	beq.w	8010226 <_dtoa_r+0xb4e>
 800f76e:	f10a 0303 	add.w	r3, sl, #3
 800f772:	f000 bd56 	b.w	8010222 <_dtoa_r+0xb4a>
 800f776:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f77a:	2200      	movs	r2, #0
 800f77c:	ec51 0b17 	vmov	r0, r1, d7
 800f780:	2300      	movs	r3, #0
 800f782:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f786:	f7f1 f9af 	bl	8000ae8 <__aeabi_dcmpeq>
 800f78a:	4680      	mov	r8, r0
 800f78c:	b158      	cbz	r0, 800f7a6 <_dtoa_r+0xce>
 800f78e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f790:	2301      	movs	r3, #1
 800f792:	6013      	str	r3, [r2, #0]
 800f794:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f796:	b113      	cbz	r3, 800f79e <_dtoa_r+0xc6>
 800f798:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f79a:	4b86      	ldr	r3, [pc, #536]	@ (800f9b4 <_dtoa_r+0x2dc>)
 800f79c:	6013      	str	r3, [r2, #0]
 800f79e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f9c8 <_dtoa_r+0x2f0>
 800f7a2:	f000 bd40 	b.w	8010226 <_dtoa_r+0xb4e>
 800f7a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f7aa:	aa14      	add	r2, sp, #80	@ 0x50
 800f7ac:	a915      	add	r1, sp, #84	@ 0x54
 800f7ae:	4648      	mov	r0, r9
 800f7b0:	f001 f9cc 	bl	8010b4c <__d2b>
 800f7b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f7b8:	9002      	str	r0, [sp, #8]
 800f7ba:	2e00      	cmp	r6, #0
 800f7bc:	d078      	beq.n	800f8b0 <_dtoa_r+0x1d8>
 800f7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f7c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f7cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f7d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f7d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f7d8:	4619      	mov	r1, r3
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4b76      	ldr	r3, [pc, #472]	@ (800f9b8 <_dtoa_r+0x2e0>)
 800f7de:	f7f0 fd63 	bl	80002a8 <__aeabi_dsub>
 800f7e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800f990 <_dtoa_r+0x2b8>)
 800f7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e8:	f7f0 ff16 	bl	8000618 <__aeabi_dmul>
 800f7ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800f998 <_dtoa_r+0x2c0>)
 800f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f2:	f7f0 fd5b 	bl	80002ac <__adddf3>
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	460d      	mov	r5, r1
 800f7fc:	f7f0 fea2 	bl	8000544 <__aeabi_i2d>
 800f800:	a367      	add	r3, pc, #412	@ (adr r3, 800f9a0 <_dtoa_r+0x2c8>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	f7f0 ff07 	bl	8000618 <__aeabi_dmul>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	4620      	mov	r0, r4
 800f810:	4629      	mov	r1, r5
 800f812:	f7f0 fd4b 	bl	80002ac <__adddf3>
 800f816:	4604      	mov	r4, r0
 800f818:	460d      	mov	r5, r1
 800f81a:	f7f1 f9ad 	bl	8000b78 <__aeabi_d2iz>
 800f81e:	2200      	movs	r2, #0
 800f820:	4607      	mov	r7, r0
 800f822:	2300      	movs	r3, #0
 800f824:	4620      	mov	r0, r4
 800f826:	4629      	mov	r1, r5
 800f828:	f7f1 f968 	bl	8000afc <__aeabi_dcmplt>
 800f82c:	b140      	cbz	r0, 800f840 <_dtoa_r+0x168>
 800f82e:	4638      	mov	r0, r7
 800f830:	f7f0 fe88 	bl	8000544 <__aeabi_i2d>
 800f834:	4622      	mov	r2, r4
 800f836:	462b      	mov	r3, r5
 800f838:	f7f1 f956 	bl	8000ae8 <__aeabi_dcmpeq>
 800f83c:	b900      	cbnz	r0, 800f840 <_dtoa_r+0x168>
 800f83e:	3f01      	subs	r7, #1
 800f840:	2f16      	cmp	r7, #22
 800f842:	d852      	bhi.n	800f8ea <_dtoa_r+0x212>
 800f844:	4b5d      	ldr	r3, [pc, #372]	@ (800f9bc <_dtoa_r+0x2e4>)
 800f846:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f852:	f7f1 f953 	bl	8000afc <__aeabi_dcmplt>
 800f856:	2800      	cmp	r0, #0
 800f858:	d049      	beq.n	800f8ee <_dtoa_r+0x216>
 800f85a:	3f01      	subs	r7, #1
 800f85c:	2300      	movs	r3, #0
 800f85e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f860:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f862:	1b9b      	subs	r3, r3, r6
 800f864:	1e5a      	subs	r2, r3, #1
 800f866:	bf45      	ittet	mi
 800f868:	f1c3 0301 	rsbmi	r3, r3, #1
 800f86c:	9300      	strmi	r3, [sp, #0]
 800f86e:	2300      	movpl	r3, #0
 800f870:	2300      	movmi	r3, #0
 800f872:	9206      	str	r2, [sp, #24]
 800f874:	bf54      	ite	pl
 800f876:	9300      	strpl	r3, [sp, #0]
 800f878:	9306      	strmi	r3, [sp, #24]
 800f87a:	2f00      	cmp	r7, #0
 800f87c:	db39      	blt.n	800f8f2 <_dtoa_r+0x21a>
 800f87e:	9b06      	ldr	r3, [sp, #24]
 800f880:	970d      	str	r7, [sp, #52]	@ 0x34
 800f882:	443b      	add	r3, r7
 800f884:	9306      	str	r3, [sp, #24]
 800f886:	2300      	movs	r3, #0
 800f888:	9308      	str	r3, [sp, #32]
 800f88a:	9b07      	ldr	r3, [sp, #28]
 800f88c:	2b09      	cmp	r3, #9
 800f88e:	d863      	bhi.n	800f958 <_dtoa_r+0x280>
 800f890:	2b05      	cmp	r3, #5
 800f892:	bfc4      	itt	gt
 800f894:	3b04      	subgt	r3, #4
 800f896:	9307      	strgt	r3, [sp, #28]
 800f898:	9b07      	ldr	r3, [sp, #28]
 800f89a:	f1a3 0302 	sub.w	r3, r3, #2
 800f89e:	bfcc      	ite	gt
 800f8a0:	2400      	movgt	r4, #0
 800f8a2:	2401      	movle	r4, #1
 800f8a4:	2b03      	cmp	r3, #3
 800f8a6:	d863      	bhi.n	800f970 <_dtoa_r+0x298>
 800f8a8:	e8df f003 	tbb	[pc, r3]
 800f8ac:	2b375452 	.word	0x2b375452
 800f8b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f8b4:	441e      	add	r6, r3
 800f8b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f8ba:	2b20      	cmp	r3, #32
 800f8bc:	bfc1      	itttt	gt
 800f8be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f8c2:	409f      	lslgt	r7, r3
 800f8c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f8c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f8cc:	bfd6      	itet	le
 800f8ce:	f1c3 0320 	rsble	r3, r3, #32
 800f8d2:	ea47 0003 	orrgt.w	r0, r7, r3
 800f8d6:	fa04 f003 	lslle.w	r0, r4, r3
 800f8da:	f7f0 fe23 	bl	8000524 <__aeabi_ui2d>
 800f8de:	2201      	movs	r2, #1
 800f8e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f8e4:	3e01      	subs	r6, #1
 800f8e6:	9212      	str	r2, [sp, #72]	@ 0x48
 800f8e8:	e776      	b.n	800f7d8 <_dtoa_r+0x100>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	e7b7      	b.n	800f85e <_dtoa_r+0x186>
 800f8ee:	9010      	str	r0, [sp, #64]	@ 0x40
 800f8f0:	e7b6      	b.n	800f860 <_dtoa_r+0x188>
 800f8f2:	9b00      	ldr	r3, [sp, #0]
 800f8f4:	1bdb      	subs	r3, r3, r7
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	427b      	negs	r3, r7
 800f8fa:	9308      	str	r3, [sp, #32]
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800f900:	e7c3      	b.n	800f88a <_dtoa_r+0x1b2>
 800f902:	2301      	movs	r3, #1
 800f904:	9309      	str	r3, [sp, #36]	@ 0x24
 800f906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f908:	eb07 0b03 	add.w	fp, r7, r3
 800f90c:	f10b 0301 	add.w	r3, fp, #1
 800f910:	2b01      	cmp	r3, #1
 800f912:	9303      	str	r3, [sp, #12]
 800f914:	bfb8      	it	lt
 800f916:	2301      	movlt	r3, #1
 800f918:	e006      	b.n	800f928 <_dtoa_r+0x250>
 800f91a:	2301      	movs	r3, #1
 800f91c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f91e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f920:	2b00      	cmp	r3, #0
 800f922:	dd28      	ble.n	800f976 <_dtoa_r+0x29e>
 800f924:	469b      	mov	fp, r3
 800f926:	9303      	str	r3, [sp, #12]
 800f928:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f92c:	2100      	movs	r1, #0
 800f92e:	2204      	movs	r2, #4
 800f930:	f102 0514 	add.w	r5, r2, #20
 800f934:	429d      	cmp	r5, r3
 800f936:	d926      	bls.n	800f986 <_dtoa_r+0x2ae>
 800f938:	6041      	str	r1, [r0, #4]
 800f93a:	4648      	mov	r0, r9
 800f93c:	f000 fd2a 	bl	8010394 <_Balloc>
 800f940:	4682      	mov	sl, r0
 800f942:	2800      	cmp	r0, #0
 800f944:	d142      	bne.n	800f9cc <_dtoa_r+0x2f4>
 800f946:	4b1e      	ldr	r3, [pc, #120]	@ (800f9c0 <_dtoa_r+0x2e8>)
 800f948:	4602      	mov	r2, r0
 800f94a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f94e:	e6da      	b.n	800f706 <_dtoa_r+0x2e>
 800f950:	2300      	movs	r3, #0
 800f952:	e7e3      	b.n	800f91c <_dtoa_r+0x244>
 800f954:	2300      	movs	r3, #0
 800f956:	e7d5      	b.n	800f904 <_dtoa_r+0x22c>
 800f958:	2401      	movs	r4, #1
 800f95a:	2300      	movs	r3, #0
 800f95c:	9307      	str	r3, [sp, #28]
 800f95e:	9409      	str	r4, [sp, #36]	@ 0x24
 800f960:	f04f 3bff 	mov.w	fp, #4294967295
 800f964:	2200      	movs	r2, #0
 800f966:	f8cd b00c 	str.w	fp, [sp, #12]
 800f96a:	2312      	movs	r3, #18
 800f96c:	920c      	str	r2, [sp, #48]	@ 0x30
 800f96e:	e7db      	b.n	800f928 <_dtoa_r+0x250>
 800f970:	2301      	movs	r3, #1
 800f972:	9309      	str	r3, [sp, #36]	@ 0x24
 800f974:	e7f4      	b.n	800f960 <_dtoa_r+0x288>
 800f976:	f04f 0b01 	mov.w	fp, #1
 800f97a:	f8cd b00c 	str.w	fp, [sp, #12]
 800f97e:	465b      	mov	r3, fp
 800f980:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f984:	e7d0      	b.n	800f928 <_dtoa_r+0x250>
 800f986:	3101      	adds	r1, #1
 800f988:	0052      	lsls	r2, r2, #1
 800f98a:	e7d1      	b.n	800f930 <_dtoa_r+0x258>
 800f98c:	f3af 8000 	nop.w
 800f990:	636f4361 	.word	0x636f4361
 800f994:	3fd287a7 	.word	0x3fd287a7
 800f998:	8b60c8b3 	.word	0x8b60c8b3
 800f99c:	3fc68a28 	.word	0x3fc68a28
 800f9a0:	509f79fb 	.word	0x509f79fb
 800f9a4:	3fd34413 	.word	0x3fd34413
 800f9a8:	0803e193 	.word	0x0803e193
 800f9ac:	0803e1aa 	.word	0x0803e1aa
 800f9b0:	7ff00000 	.word	0x7ff00000
 800f9b4:	0803e33a 	.word	0x0803e33a
 800f9b8:	3ff80000 	.word	0x3ff80000
 800f9bc:	0803e3d8 	.word	0x0803e3d8
 800f9c0:	0803e202 	.word	0x0803e202
 800f9c4:	0803e18f 	.word	0x0803e18f
 800f9c8:	0803e339 	.word	0x0803e339
 800f9cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f9d0:	6018      	str	r0, [r3, #0]
 800f9d2:	9b03      	ldr	r3, [sp, #12]
 800f9d4:	2b0e      	cmp	r3, #14
 800f9d6:	f200 80a1 	bhi.w	800fb1c <_dtoa_r+0x444>
 800f9da:	2c00      	cmp	r4, #0
 800f9dc:	f000 809e 	beq.w	800fb1c <_dtoa_r+0x444>
 800f9e0:	2f00      	cmp	r7, #0
 800f9e2:	dd33      	ble.n	800fa4c <_dtoa_r+0x374>
 800f9e4:	4b9c      	ldr	r3, [pc, #624]	@ (800fc58 <_dtoa_r+0x580>)
 800f9e6:	f007 020f 	and.w	r2, r7, #15
 800f9ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9ee:	ed93 7b00 	vldr	d7, [r3]
 800f9f2:	05f8      	lsls	r0, r7, #23
 800f9f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f9f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f9fc:	d516      	bpl.n	800fa2c <_dtoa_r+0x354>
 800f9fe:	4b97      	ldr	r3, [pc, #604]	@ (800fc5c <_dtoa_r+0x584>)
 800fa00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fa04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa08:	f7f0 ff30 	bl	800086c <__aeabi_ddiv>
 800fa0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa10:	f004 040f 	and.w	r4, r4, #15
 800fa14:	2603      	movs	r6, #3
 800fa16:	4d91      	ldr	r5, [pc, #580]	@ (800fc5c <_dtoa_r+0x584>)
 800fa18:	b954      	cbnz	r4, 800fa30 <_dtoa_r+0x358>
 800fa1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa22:	f7f0 ff23 	bl	800086c <__aeabi_ddiv>
 800fa26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa2a:	e028      	b.n	800fa7e <_dtoa_r+0x3a6>
 800fa2c:	2602      	movs	r6, #2
 800fa2e:	e7f2      	b.n	800fa16 <_dtoa_r+0x33e>
 800fa30:	07e1      	lsls	r1, r4, #31
 800fa32:	d508      	bpl.n	800fa46 <_dtoa_r+0x36e>
 800fa34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fa38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa3c:	f7f0 fdec 	bl	8000618 <__aeabi_dmul>
 800fa40:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fa44:	3601      	adds	r6, #1
 800fa46:	1064      	asrs	r4, r4, #1
 800fa48:	3508      	adds	r5, #8
 800fa4a:	e7e5      	b.n	800fa18 <_dtoa_r+0x340>
 800fa4c:	f000 80af 	beq.w	800fbae <_dtoa_r+0x4d6>
 800fa50:	427c      	negs	r4, r7
 800fa52:	4b81      	ldr	r3, [pc, #516]	@ (800fc58 <_dtoa_r+0x580>)
 800fa54:	4d81      	ldr	r5, [pc, #516]	@ (800fc5c <_dtoa_r+0x584>)
 800fa56:	f004 020f 	and.w	r2, r4, #15
 800fa5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fa66:	f7f0 fdd7 	bl	8000618 <__aeabi_dmul>
 800fa6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa6e:	1124      	asrs	r4, r4, #4
 800fa70:	2300      	movs	r3, #0
 800fa72:	2602      	movs	r6, #2
 800fa74:	2c00      	cmp	r4, #0
 800fa76:	f040 808f 	bne.w	800fb98 <_dtoa_r+0x4c0>
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1d3      	bne.n	800fa26 <_dtoa_r+0x34e>
 800fa7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa80:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f000 8094 	beq.w	800fbb2 <_dtoa_r+0x4da>
 800fa8a:	4b75      	ldr	r3, [pc, #468]	@ (800fc60 <_dtoa_r+0x588>)
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	4620      	mov	r0, r4
 800fa90:	4629      	mov	r1, r5
 800fa92:	f7f1 f833 	bl	8000afc <__aeabi_dcmplt>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	f000 808b 	beq.w	800fbb2 <_dtoa_r+0x4da>
 800fa9c:	9b03      	ldr	r3, [sp, #12]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f000 8087 	beq.w	800fbb2 <_dtoa_r+0x4da>
 800faa4:	f1bb 0f00 	cmp.w	fp, #0
 800faa8:	dd34      	ble.n	800fb14 <_dtoa_r+0x43c>
 800faaa:	4620      	mov	r0, r4
 800faac:	4b6d      	ldr	r3, [pc, #436]	@ (800fc64 <_dtoa_r+0x58c>)
 800faae:	2200      	movs	r2, #0
 800fab0:	4629      	mov	r1, r5
 800fab2:	f7f0 fdb1 	bl	8000618 <__aeabi_dmul>
 800fab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800faba:	f107 38ff 	add.w	r8, r7, #4294967295
 800fabe:	3601      	adds	r6, #1
 800fac0:	465c      	mov	r4, fp
 800fac2:	4630      	mov	r0, r6
 800fac4:	f7f0 fd3e 	bl	8000544 <__aeabi_i2d>
 800fac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800facc:	f7f0 fda4 	bl	8000618 <__aeabi_dmul>
 800fad0:	4b65      	ldr	r3, [pc, #404]	@ (800fc68 <_dtoa_r+0x590>)
 800fad2:	2200      	movs	r2, #0
 800fad4:	f7f0 fbea 	bl	80002ac <__adddf3>
 800fad8:	4605      	mov	r5, r0
 800fada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fade:	2c00      	cmp	r4, #0
 800fae0:	d16a      	bne.n	800fbb8 <_dtoa_r+0x4e0>
 800fae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fae6:	4b61      	ldr	r3, [pc, #388]	@ (800fc6c <_dtoa_r+0x594>)
 800fae8:	2200      	movs	r2, #0
 800faea:	f7f0 fbdd 	bl	80002a8 <__aeabi_dsub>
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800faf6:	462a      	mov	r2, r5
 800faf8:	4633      	mov	r3, r6
 800fafa:	f7f1 f81d 	bl	8000b38 <__aeabi_dcmpgt>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	f040 8298 	bne.w	8010034 <_dtoa_r+0x95c>
 800fb04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb08:	462a      	mov	r2, r5
 800fb0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fb0e:	f7f0 fff5 	bl	8000afc <__aeabi_dcmplt>
 800fb12:	bb38      	cbnz	r0, 800fb64 <_dtoa_r+0x48c>
 800fb14:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fb18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fb1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f2c0 8157 	blt.w	800fdd2 <_dtoa_r+0x6fa>
 800fb24:	2f0e      	cmp	r7, #14
 800fb26:	f300 8154 	bgt.w	800fdd2 <_dtoa_r+0x6fa>
 800fb2a:	4b4b      	ldr	r3, [pc, #300]	@ (800fc58 <_dtoa_r+0x580>)
 800fb2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb30:	ed93 7b00 	vldr	d7, [r3]
 800fb34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	ed8d 7b00 	vstr	d7, [sp]
 800fb3c:	f280 80e5 	bge.w	800fd0a <_dtoa_r+0x632>
 800fb40:	9b03      	ldr	r3, [sp, #12]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f300 80e1 	bgt.w	800fd0a <_dtoa_r+0x632>
 800fb48:	d10c      	bne.n	800fb64 <_dtoa_r+0x48c>
 800fb4a:	4b48      	ldr	r3, [pc, #288]	@ (800fc6c <_dtoa_r+0x594>)
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	ec51 0b17 	vmov	r0, r1, d7
 800fb52:	f7f0 fd61 	bl	8000618 <__aeabi_dmul>
 800fb56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb5a:	f7f0 ffe3 	bl	8000b24 <__aeabi_dcmpge>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	f000 8266 	beq.w	8010030 <_dtoa_r+0x958>
 800fb64:	2400      	movs	r4, #0
 800fb66:	4625      	mov	r5, r4
 800fb68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb6a:	4656      	mov	r6, sl
 800fb6c:	ea6f 0803 	mvn.w	r8, r3
 800fb70:	2700      	movs	r7, #0
 800fb72:	4621      	mov	r1, r4
 800fb74:	4648      	mov	r0, r9
 800fb76:	f000 fc4d 	bl	8010414 <_Bfree>
 800fb7a:	2d00      	cmp	r5, #0
 800fb7c:	f000 80bd 	beq.w	800fcfa <_dtoa_r+0x622>
 800fb80:	b12f      	cbz	r7, 800fb8e <_dtoa_r+0x4b6>
 800fb82:	42af      	cmp	r7, r5
 800fb84:	d003      	beq.n	800fb8e <_dtoa_r+0x4b6>
 800fb86:	4639      	mov	r1, r7
 800fb88:	4648      	mov	r0, r9
 800fb8a:	f000 fc43 	bl	8010414 <_Bfree>
 800fb8e:	4629      	mov	r1, r5
 800fb90:	4648      	mov	r0, r9
 800fb92:	f000 fc3f 	bl	8010414 <_Bfree>
 800fb96:	e0b0      	b.n	800fcfa <_dtoa_r+0x622>
 800fb98:	07e2      	lsls	r2, r4, #31
 800fb9a:	d505      	bpl.n	800fba8 <_dtoa_r+0x4d0>
 800fb9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fba0:	f7f0 fd3a 	bl	8000618 <__aeabi_dmul>
 800fba4:	3601      	adds	r6, #1
 800fba6:	2301      	movs	r3, #1
 800fba8:	1064      	asrs	r4, r4, #1
 800fbaa:	3508      	adds	r5, #8
 800fbac:	e762      	b.n	800fa74 <_dtoa_r+0x39c>
 800fbae:	2602      	movs	r6, #2
 800fbb0:	e765      	b.n	800fa7e <_dtoa_r+0x3a6>
 800fbb2:	9c03      	ldr	r4, [sp, #12]
 800fbb4:	46b8      	mov	r8, r7
 800fbb6:	e784      	b.n	800fac2 <_dtoa_r+0x3ea>
 800fbb8:	4b27      	ldr	r3, [pc, #156]	@ (800fc58 <_dtoa_r+0x580>)
 800fbba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fbbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fbc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fbc4:	4454      	add	r4, sl
 800fbc6:	2900      	cmp	r1, #0
 800fbc8:	d054      	beq.n	800fc74 <_dtoa_r+0x59c>
 800fbca:	4929      	ldr	r1, [pc, #164]	@ (800fc70 <_dtoa_r+0x598>)
 800fbcc:	2000      	movs	r0, #0
 800fbce:	f7f0 fe4d 	bl	800086c <__aeabi_ddiv>
 800fbd2:	4633      	mov	r3, r6
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	f7f0 fb67 	bl	80002a8 <__aeabi_dsub>
 800fbda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fbde:	4656      	mov	r6, sl
 800fbe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbe4:	f7f0 ffc8 	bl	8000b78 <__aeabi_d2iz>
 800fbe8:	4605      	mov	r5, r0
 800fbea:	f7f0 fcab 	bl	8000544 <__aeabi_i2d>
 800fbee:	4602      	mov	r2, r0
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbf6:	f7f0 fb57 	bl	80002a8 <__aeabi_dsub>
 800fbfa:	3530      	adds	r5, #48	@ 0x30
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	460b      	mov	r3, r1
 800fc00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fc04:	f806 5b01 	strb.w	r5, [r6], #1
 800fc08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fc0c:	f7f0 ff76 	bl	8000afc <__aeabi_dcmplt>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d172      	bne.n	800fcfa <_dtoa_r+0x622>
 800fc14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc18:	4911      	ldr	r1, [pc, #68]	@ (800fc60 <_dtoa_r+0x588>)
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	f7f0 fb44 	bl	80002a8 <__aeabi_dsub>
 800fc20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fc24:	f7f0 ff6a 	bl	8000afc <__aeabi_dcmplt>
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	f040 80b4 	bne.w	800fd96 <_dtoa_r+0x6be>
 800fc2e:	42a6      	cmp	r6, r4
 800fc30:	f43f af70 	beq.w	800fb14 <_dtoa_r+0x43c>
 800fc34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fc38:	4b0a      	ldr	r3, [pc, #40]	@ (800fc64 <_dtoa_r+0x58c>)
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f7f0 fcec 	bl	8000618 <__aeabi_dmul>
 800fc40:	4b08      	ldr	r3, [pc, #32]	@ (800fc64 <_dtoa_r+0x58c>)
 800fc42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fc46:	2200      	movs	r2, #0
 800fc48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc4c:	f7f0 fce4 	bl	8000618 <__aeabi_dmul>
 800fc50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc54:	e7c4      	b.n	800fbe0 <_dtoa_r+0x508>
 800fc56:	bf00      	nop
 800fc58:	0803e3d8 	.word	0x0803e3d8
 800fc5c:	0803e3b0 	.word	0x0803e3b0
 800fc60:	3ff00000 	.word	0x3ff00000
 800fc64:	40240000 	.word	0x40240000
 800fc68:	401c0000 	.word	0x401c0000
 800fc6c:	40140000 	.word	0x40140000
 800fc70:	3fe00000 	.word	0x3fe00000
 800fc74:	4631      	mov	r1, r6
 800fc76:	4628      	mov	r0, r5
 800fc78:	f7f0 fcce 	bl	8000618 <__aeabi_dmul>
 800fc7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fc80:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fc82:	4656      	mov	r6, sl
 800fc84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc88:	f7f0 ff76 	bl	8000b78 <__aeabi_d2iz>
 800fc8c:	4605      	mov	r5, r0
 800fc8e:	f7f0 fc59 	bl	8000544 <__aeabi_i2d>
 800fc92:	4602      	mov	r2, r0
 800fc94:	460b      	mov	r3, r1
 800fc96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc9a:	f7f0 fb05 	bl	80002a8 <__aeabi_dsub>
 800fc9e:	3530      	adds	r5, #48	@ 0x30
 800fca0:	f806 5b01 	strb.w	r5, [r6], #1
 800fca4:	4602      	mov	r2, r0
 800fca6:	460b      	mov	r3, r1
 800fca8:	42a6      	cmp	r6, r4
 800fcaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fcae:	f04f 0200 	mov.w	r2, #0
 800fcb2:	d124      	bne.n	800fcfe <_dtoa_r+0x626>
 800fcb4:	4baf      	ldr	r3, [pc, #700]	@ (800ff74 <_dtoa_r+0x89c>)
 800fcb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fcba:	f7f0 faf7 	bl	80002ac <__adddf3>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcc6:	f7f0 ff37 	bl	8000b38 <__aeabi_dcmpgt>
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d163      	bne.n	800fd96 <_dtoa_r+0x6be>
 800fcce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fcd2:	49a8      	ldr	r1, [pc, #672]	@ (800ff74 <_dtoa_r+0x89c>)
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	f7f0 fae7 	bl	80002a8 <__aeabi_dsub>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	460b      	mov	r3, r1
 800fcde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fce2:	f7f0 ff0b 	bl	8000afc <__aeabi_dcmplt>
 800fce6:	2800      	cmp	r0, #0
 800fce8:	f43f af14 	beq.w	800fb14 <_dtoa_r+0x43c>
 800fcec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fcee:	1e73      	subs	r3, r6, #1
 800fcf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fcf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fcf6:	2b30      	cmp	r3, #48	@ 0x30
 800fcf8:	d0f8      	beq.n	800fcec <_dtoa_r+0x614>
 800fcfa:	4647      	mov	r7, r8
 800fcfc:	e03b      	b.n	800fd76 <_dtoa_r+0x69e>
 800fcfe:	4b9e      	ldr	r3, [pc, #632]	@ (800ff78 <_dtoa_r+0x8a0>)
 800fd00:	f7f0 fc8a 	bl	8000618 <__aeabi_dmul>
 800fd04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd08:	e7bc      	b.n	800fc84 <_dtoa_r+0x5ac>
 800fd0a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fd0e:	4656      	mov	r6, sl
 800fd10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd14:	4620      	mov	r0, r4
 800fd16:	4629      	mov	r1, r5
 800fd18:	f7f0 fda8 	bl	800086c <__aeabi_ddiv>
 800fd1c:	f7f0 ff2c 	bl	8000b78 <__aeabi_d2iz>
 800fd20:	4680      	mov	r8, r0
 800fd22:	f7f0 fc0f 	bl	8000544 <__aeabi_i2d>
 800fd26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd2a:	f7f0 fc75 	bl	8000618 <__aeabi_dmul>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	460b      	mov	r3, r1
 800fd32:	4620      	mov	r0, r4
 800fd34:	4629      	mov	r1, r5
 800fd36:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fd3a:	f7f0 fab5 	bl	80002a8 <__aeabi_dsub>
 800fd3e:	f806 4b01 	strb.w	r4, [r6], #1
 800fd42:	9d03      	ldr	r5, [sp, #12]
 800fd44:	eba6 040a 	sub.w	r4, r6, sl
 800fd48:	42a5      	cmp	r5, r4
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	d133      	bne.n	800fdb8 <_dtoa_r+0x6e0>
 800fd50:	f7f0 faac 	bl	80002ac <__adddf3>
 800fd54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd58:	4604      	mov	r4, r0
 800fd5a:	460d      	mov	r5, r1
 800fd5c:	f7f0 feec 	bl	8000b38 <__aeabi_dcmpgt>
 800fd60:	b9c0      	cbnz	r0, 800fd94 <_dtoa_r+0x6bc>
 800fd62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd66:	4620      	mov	r0, r4
 800fd68:	4629      	mov	r1, r5
 800fd6a:	f7f0 febd 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd6e:	b110      	cbz	r0, 800fd76 <_dtoa_r+0x69e>
 800fd70:	f018 0f01 	tst.w	r8, #1
 800fd74:	d10e      	bne.n	800fd94 <_dtoa_r+0x6bc>
 800fd76:	9902      	ldr	r1, [sp, #8]
 800fd78:	4648      	mov	r0, r9
 800fd7a:	f000 fb4b 	bl	8010414 <_Bfree>
 800fd7e:	2300      	movs	r3, #0
 800fd80:	7033      	strb	r3, [r6, #0]
 800fd82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fd84:	3701      	adds	r7, #1
 800fd86:	601f      	str	r7, [r3, #0]
 800fd88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f000 824b 	beq.w	8010226 <_dtoa_r+0xb4e>
 800fd90:	601e      	str	r6, [r3, #0]
 800fd92:	e248      	b.n	8010226 <_dtoa_r+0xb4e>
 800fd94:	46b8      	mov	r8, r7
 800fd96:	4633      	mov	r3, r6
 800fd98:	461e      	mov	r6, r3
 800fd9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd9e:	2a39      	cmp	r2, #57	@ 0x39
 800fda0:	d106      	bne.n	800fdb0 <_dtoa_r+0x6d8>
 800fda2:	459a      	cmp	sl, r3
 800fda4:	d1f8      	bne.n	800fd98 <_dtoa_r+0x6c0>
 800fda6:	2230      	movs	r2, #48	@ 0x30
 800fda8:	f108 0801 	add.w	r8, r8, #1
 800fdac:	f88a 2000 	strb.w	r2, [sl]
 800fdb0:	781a      	ldrb	r2, [r3, #0]
 800fdb2:	3201      	adds	r2, #1
 800fdb4:	701a      	strb	r2, [r3, #0]
 800fdb6:	e7a0      	b.n	800fcfa <_dtoa_r+0x622>
 800fdb8:	4b6f      	ldr	r3, [pc, #444]	@ (800ff78 <_dtoa_r+0x8a0>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f7f0 fc2c 	bl	8000618 <__aeabi_dmul>
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	4604      	mov	r4, r0
 800fdc6:	460d      	mov	r5, r1
 800fdc8:	f7f0 fe8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	d09f      	beq.n	800fd10 <_dtoa_r+0x638>
 800fdd0:	e7d1      	b.n	800fd76 <_dtoa_r+0x69e>
 800fdd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdd4:	2a00      	cmp	r2, #0
 800fdd6:	f000 80ea 	beq.w	800ffae <_dtoa_r+0x8d6>
 800fdda:	9a07      	ldr	r2, [sp, #28]
 800fddc:	2a01      	cmp	r2, #1
 800fdde:	f300 80cd 	bgt.w	800ff7c <_dtoa_r+0x8a4>
 800fde2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fde4:	2a00      	cmp	r2, #0
 800fde6:	f000 80c1 	beq.w	800ff6c <_dtoa_r+0x894>
 800fdea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fdee:	9c08      	ldr	r4, [sp, #32]
 800fdf0:	9e00      	ldr	r6, [sp, #0]
 800fdf2:	9a00      	ldr	r2, [sp, #0]
 800fdf4:	441a      	add	r2, r3
 800fdf6:	9200      	str	r2, [sp, #0]
 800fdf8:	9a06      	ldr	r2, [sp, #24]
 800fdfa:	2101      	movs	r1, #1
 800fdfc:	441a      	add	r2, r3
 800fdfe:	4648      	mov	r0, r9
 800fe00:	9206      	str	r2, [sp, #24]
 800fe02:	f000 fc05 	bl	8010610 <__i2b>
 800fe06:	4605      	mov	r5, r0
 800fe08:	b166      	cbz	r6, 800fe24 <_dtoa_r+0x74c>
 800fe0a:	9b06      	ldr	r3, [sp, #24]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	dd09      	ble.n	800fe24 <_dtoa_r+0x74c>
 800fe10:	42b3      	cmp	r3, r6
 800fe12:	9a00      	ldr	r2, [sp, #0]
 800fe14:	bfa8      	it	ge
 800fe16:	4633      	movge	r3, r6
 800fe18:	1ad2      	subs	r2, r2, r3
 800fe1a:	9200      	str	r2, [sp, #0]
 800fe1c:	9a06      	ldr	r2, [sp, #24]
 800fe1e:	1af6      	subs	r6, r6, r3
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	9306      	str	r3, [sp, #24]
 800fe24:	9b08      	ldr	r3, [sp, #32]
 800fe26:	b30b      	cbz	r3, 800fe6c <_dtoa_r+0x794>
 800fe28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	f000 80c6 	beq.w	800ffbc <_dtoa_r+0x8e4>
 800fe30:	2c00      	cmp	r4, #0
 800fe32:	f000 80c0 	beq.w	800ffb6 <_dtoa_r+0x8de>
 800fe36:	4629      	mov	r1, r5
 800fe38:	4622      	mov	r2, r4
 800fe3a:	4648      	mov	r0, r9
 800fe3c:	f000 fca0 	bl	8010780 <__pow5mult>
 800fe40:	9a02      	ldr	r2, [sp, #8]
 800fe42:	4601      	mov	r1, r0
 800fe44:	4605      	mov	r5, r0
 800fe46:	4648      	mov	r0, r9
 800fe48:	f000 fbf8 	bl	801063c <__multiply>
 800fe4c:	9902      	ldr	r1, [sp, #8]
 800fe4e:	4680      	mov	r8, r0
 800fe50:	4648      	mov	r0, r9
 800fe52:	f000 fadf 	bl	8010414 <_Bfree>
 800fe56:	9b08      	ldr	r3, [sp, #32]
 800fe58:	1b1b      	subs	r3, r3, r4
 800fe5a:	9308      	str	r3, [sp, #32]
 800fe5c:	f000 80b1 	beq.w	800ffc2 <_dtoa_r+0x8ea>
 800fe60:	9a08      	ldr	r2, [sp, #32]
 800fe62:	4641      	mov	r1, r8
 800fe64:	4648      	mov	r0, r9
 800fe66:	f000 fc8b 	bl	8010780 <__pow5mult>
 800fe6a:	9002      	str	r0, [sp, #8]
 800fe6c:	2101      	movs	r1, #1
 800fe6e:	4648      	mov	r0, r9
 800fe70:	f000 fbce 	bl	8010610 <__i2b>
 800fe74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe76:	4604      	mov	r4, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f000 81d8 	beq.w	801022e <_dtoa_r+0xb56>
 800fe7e:	461a      	mov	r2, r3
 800fe80:	4601      	mov	r1, r0
 800fe82:	4648      	mov	r0, r9
 800fe84:	f000 fc7c 	bl	8010780 <__pow5mult>
 800fe88:	9b07      	ldr	r3, [sp, #28]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	f300 809f 	bgt.w	800ffd0 <_dtoa_r+0x8f8>
 800fe92:	9b04      	ldr	r3, [sp, #16]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f040 8097 	bne.w	800ffc8 <_dtoa_r+0x8f0>
 800fe9a:	9b05      	ldr	r3, [sp, #20]
 800fe9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 8093 	bne.w	800ffcc <_dtoa_r+0x8f4>
 800fea6:	9b05      	ldr	r3, [sp, #20]
 800fea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800feac:	0d1b      	lsrs	r3, r3, #20
 800feae:	051b      	lsls	r3, r3, #20
 800feb0:	b133      	cbz	r3, 800fec0 <_dtoa_r+0x7e8>
 800feb2:	9b00      	ldr	r3, [sp, #0]
 800feb4:	3301      	adds	r3, #1
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	9b06      	ldr	r3, [sp, #24]
 800feba:	3301      	adds	r3, #1
 800febc:	9306      	str	r3, [sp, #24]
 800febe:	2301      	movs	r3, #1
 800fec0:	9308      	str	r3, [sp, #32]
 800fec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	f000 81b8 	beq.w	801023a <_dtoa_r+0xb62>
 800feca:	6923      	ldr	r3, [r4, #16]
 800fecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fed0:	6918      	ldr	r0, [r3, #16]
 800fed2:	f000 fb51 	bl	8010578 <__hi0bits>
 800fed6:	f1c0 0020 	rsb	r0, r0, #32
 800feda:	9b06      	ldr	r3, [sp, #24]
 800fedc:	4418      	add	r0, r3
 800fede:	f010 001f 	ands.w	r0, r0, #31
 800fee2:	f000 8082 	beq.w	800ffea <_dtoa_r+0x912>
 800fee6:	f1c0 0320 	rsb	r3, r0, #32
 800feea:	2b04      	cmp	r3, #4
 800feec:	dd73      	ble.n	800ffd6 <_dtoa_r+0x8fe>
 800feee:	9b00      	ldr	r3, [sp, #0]
 800fef0:	f1c0 001c 	rsb	r0, r0, #28
 800fef4:	4403      	add	r3, r0
 800fef6:	9300      	str	r3, [sp, #0]
 800fef8:	9b06      	ldr	r3, [sp, #24]
 800fefa:	4403      	add	r3, r0
 800fefc:	4406      	add	r6, r0
 800fefe:	9306      	str	r3, [sp, #24]
 800ff00:	9b00      	ldr	r3, [sp, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	dd05      	ble.n	800ff12 <_dtoa_r+0x83a>
 800ff06:	9902      	ldr	r1, [sp, #8]
 800ff08:	461a      	mov	r2, r3
 800ff0a:	4648      	mov	r0, r9
 800ff0c:	f000 fc92 	bl	8010834 <__lshift>
 800ff10:	9002      	str	r0, [sp, #8]
 800ff12:	9b06      	ldr	r3, [sp, #24]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	dd05      	ble.n	800ff24 <_dtoa_r+0x84c>
 800ff18:	4621      	mov	r1, r4
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	4648      	mov	r0, r9
 800ff1e:	f000 fc89 	bl	8010834 <__lshift>
 800ff22:	4604      	mov	r4, r0
 800ff24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d061      	beq.n	800ffee <_dtoa_r+0x916>
 800ff2a:	9802      	ldr	r0, [sp, #8]
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f000 fced 	bl	801090c <__mcmp>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	da5b      	bge.n	800ffee <_dtoa_r+0x916>
 800ff36:	2300      	movs	r3, #0
 800ff38:	9902      	ldr	r1, [sp, #8]
 800ff3a:	220a      	movs	r2, #10
 800ff3c:	4648      	mov	r0, r9
 800ff3e:	f000 fa8b 	bl	8010458 <__multadd>
 800ff42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff44:	9002      	str	r0, [sp, #8]
 800ff46:	f107 38ff 	add.w	r8, r7, #4294967295
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f000 8177 	beq.w	801023e <_dtoa_r+0xb66>
 800ff50:	4629      	mov	r1, r5
 800ff52:	2300      	movs	r3, #0
 800ff54:	220a      	movs	r2, #10
 800ff56:	4648      	mov	r0, r9
 800ff58:	f000 fa7e 	bl	8010458 <__multadd>
 800ff5c:	f1bb 0f00 	cmp.w	fp, #0
 800ff60:	4605      	mov	r5, r0
 800ff62:	dc6f      	bgt.n	8010044 <_dtoa_r+0x96c>
 800ff64:	9b07      	ldr	r3, [sp, #28]
 800ff66:	2b02      	cmp	r3, #2
 800ff68:	dc49      	bgt.n	800fffe <_dtoa_r+0x926>
 800ff6a:	e06b      	b.n	8010044 <_dtoa_r+0x96c>
 800ff6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ff6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ff72:	e73c      	b.n	800fdee <_dtoa_r+0x716>
 800ff74:	3fe00000 	.word	0x3fe00000
 800ff78:	40240000 	.word	0x40240000
 800ff7c:	9b03      	ldr	r3, [sp, #12]
 800ff7e:	1e5c      	subs	r4, r3, #1
 800ff80:	9b08      	ldr	r3, [sp, #32]
 800ff82:	42a3      	cmp	r3, r4
 800ff84:	db09      	blt.n	800ff9a <_dtoa_r+0x8c2>
 800ff86:	1b1c      	subs	r4, r3, r4
 800ff88:	9b03      	ldr	r3, [sp, #12]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	f6bf af30 	bge.w	800fdf0 <_dtoa_r+0x718>
 800ff90:	9b00      	ldr	r3, [sp, #0]
 800ff92:	9a03      	ldr	r2, [sp, #12]
 800ff94:	1a9e      	subs	r6, r3, r2
 800ff96:	2300      	movs	r3, #0
 800ff98:	e72b      	b.n	800fdf2 <_dtoa_r+0x71a>
 800ff9a:	9b08      	ldr	r3, [sp, #32]
 800ff9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff9e:	9408      	str	r4, [sp, #32]
 800ffa0:	1ae3      	subs	r3, r4, r3
 800ffa2:	441a      	add	r2, r3
 800ffa4:	9e00      	ldr	r6, [sp, #0]
 800ffa6:	9b03      	ldr	r3, [sp, #12]
 800ffa8:	920d      	str	r2, [sp, #52]	@ 0x34
 800ffaa:	2400      	movs	r4, #0
 800ffac:	e721      	b.n	800fdf2 <_dtoa_r+0x71a>
 800ffae:	9c08      	ldr	r4, [sp, #32]
 800ffb0:	9e00      	ldr	r6, [sp, #0]
 800ffb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ffb4:	e728      	b.n	800fe08 <_dtoa_r+0x730>
 800ffb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ffba:	e751      	b.n	800fe60 <_dtoa_r+0x788>
 800ffbc:	9a08      	ldr	r2, [sp, #32]
 800ffbe:	9902      	ldr	r1, [sp, #8]
 800ffc0:	e750      	b.n	800fe64 <_dtoa_r+0x78c>
 800ffc2:	f8cd 8008 	str.w	r8, [sp, #8]
 800ffc6:	e751      	b.n	800fe6c <_dtoa_r+0x794>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	e779      	b.n	800fec0 <_dtoa_r+0x7e8>
 800ffcc:	9b04      	ldr	r3, [sp, #16]
 800ffce:	e777      	b.n	800fec0 <_dtoa_r+0x7e8>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	9308      	str	r3, [sp, #32]
 800ffd4:	e779      	b.n	800feca <_dtoa_r+0x7f2>
 800ffd6:	d093      	beq.n	800ff00 <_dtoa_r+0x828>
 800ffd8:	9a00      	ldr	r2, [sp, #0]
 800ffda:	331c      	adds	r3, #28
 800ffdc:	441a      	add	r2, r3
 800ffde:	9200      	str	r2, [sp, #0]
 800ffe0:	9a06      	ldr	r2, [sp, #24]
 800ffe2:	441a      	add	r2, r3
 800ffe4:	441e      	add	r6, r3
 800ffe6:	9206      	str	r2, [sp, #24]
 800ffe8:	e78a      	b.n	800ff00 <_dtoa_r+0x828>
 800ffea:	4603      	mov	r3, r0
 800ffec:	e7f4      	b.n	800ffd8 <_dtoa_r+0x900>
 800ffee:	9b03      	ldr	r3, [sp, #12]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	46b8      	mov	r8, r7
 800fff4:	dc20      	bgt.n	8010038 <_dtoa_r+0x960>
 800fff6:	469b      	mov	fp, r3
 800fff8:	9b07      	ldr	r3, [sp, #28]
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	dd1e      	ble.n	801003c <_dtoa_r+0x964>
 800fffe:	f1bb 0f00 	cmp.w	fp, #0
 8010002:	f47f adb1 	bne.w	800fb68 <_dtoa_r+0x490>
 8010006:	4621      	mov	r1, r4
 8010008:	465b      	mov	r3, fp
 801000a:	2205      	movs	r2, #5
 801000c:	4648      	mov	r0, r9
 801000e:	f000 fa23 	bl	8010458 <__multadd>
 8010012:	4601      	mov	r1, r0
 8010014:	4604      	mov	r4, r0
 8010016:	9802      	ldr	r0, [sp, #8]
 8010018:	f000 fc78 	bl	801090c <__mcmp>
 801001c:	2800      	cmp	r0, #0
 801001e:	f77f ada3 	ble.w	800fb68 <_dtoa_r+0x490>
 8010022:	4656      	mov	r6, sl
 8010024:	2331      	movs	r3, #49	@ 0x31
 8010026:	f806 3b01 	strb.w	r3, [r6], #1
 801002a:	f108 0801 	add.w	r8, r8, #1
 801002e:	e59f      	b.n	800fb70 <_dtoa_r+0x498>
 8010030:	9c03      	ldr	r4, [sp, #12]
 8010032:	46b8      	mov	r8, r7
 8010034:	4625      	mov	r5, r4
 8010036:	e7f4      	b.n	8010022 <_dtoa_r+0x94a>
 8010038:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801003c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801003e:	2b00      	cmp	r3, #0
 8010040:	f000 8101 	beq.w	8010246 <_dtoa_r+0xb6e>
 8010044:	2e00      	cmp	r6, #0
 8010046:	dd05      	ble.n	8010054 <_dtoa_r+0x97c>
 8010048:	4629      	mov	r1, r5
 801004a:	4632      	mov	r2, r6
 801004c:	4648      	mov	r0, r9
 801004e:	f000 fbf1 	bl	8010834 <__lshift>
 8010052:	4605      	mov	r5, r0
 8010054:	9b08      	ldr	r3, [sp, #32]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d05c      	beq.n	8010114 <_dtoa_r+0xa3c>
 801005a:	6869      	ldr	r1, [r5, #4]
 801005c:	4648      	mov	r0, r9
 801005e:	f000 f999 	bl	8010394 <_Balloc>
 8010062:	4606      	mov	r6, r0
 8010064:	b928      	cbnz	r0, 8010072 <_dtoa_r+0x99a>
 8010066:	4b82      	ldr	r3, [pc, #520]	@ (8010270 <_dtoa_r+0xb98>)
 8010068:	4602      	mov	r2, r0
 801006a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801006e:	f7ff bb4a 	b.w	800f706 <_dtoa_r+0x2e>
 8010072:	692a      	ldr	r2, [r5, #16]
 8010074:	3202      	adds	r2, #2
 8010076:	0092      	lsls	r2, r2, #2
 8010078:	f105 010c 	add.w	r1, r5, #12
 801007c:	300c      	adds	r0, #12
 801007e:	f7ff fa84 	bl	800f58a <memcpy>
 8010082:	2201      	movs	r2, #1
 8010084:	4631      	mov	r1, r6
 8010086:	4648      	mov	r0, r9
 8010088:	f000 fbd4 	bl	8010834 <__lshift>
 801008c:	f10a 0301 	add.w	r3, sl, #1
 8010090:	9300      	str	r3, [sp, #0]
 8010092:	eb0a 030b 	add.w	r3, sl, fp
 8010096:	9308      	str	r3, [sp, #32]
 8010098:	9b04      	ldr	r3, [sp, #16]
 801009a:	f003 0301 	and.w	r3, r3, #1
 801009e:	462f      	mov	r7, r5
 80100a0:	9306      	str	r3, [sp, #24]
 80100a2:	4605      	mov	r5, r0
 80100a4:	9b00      	ldr	r3, [sp, #0]
 80100a6:	9802      	ldr	r0, [sp, #8]
 80100a8:	4621      	mov	r1, r4
 80100aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80100ae:	f7ff fa89 	bl	800f5c4 <quorem>
 80100b2:	4603      	mov	r3, r0
 80100b4:	3330      	adds	r3, #48	@ 0x30
 80100b6:	9003      	str	r0, [sp, #12]
 80100b8:	4639      	mov	r1, r7
 80100ba:	9802      	ldr	r0, [sp, #8]
 80100bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80100be:	f000 fc25 	bl	801090c <__mcmp>
 80100c2:	462a      	mov	r2, r5
 80100c4:	9004      	str	r0, [sp, #16]
 80100c6:	4621      	mov	r1, r4
 80100c8:	4648      	mov	r0, r9
 80100ca:	f000 fc3b 	bl	8010944 <__mdiff>
 80100ce:	68c2      	ldr	r2, [r0, #12]
 80100d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100d2:	4606      	mov	r6, r0
 80100d4:	bb02      	cbnz	r2, 8010118 <_dtoa_r+0xa40>
 80100d6:	4601      	mov	r1, r0
 80100d8:	9802      	ldr	r0, [sp, #8]
 80100da:	f000 fc17 	bl	801090c <__mcmp>
 80100de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100e0:	4602      	mov	r2, r0
 80100e2:	4631      	mov	r1, r6
 80100e4:	4648      	mov	r0, r9
 80100e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80100e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80100ea:	f000 f993 	bl	8010414 <_Bfree>
 80100ee:	9b07      	ldr	r3, [sp, #28]
 80100f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80100f2:	9e00      	ldr	r6, [sp, #0]
 80100f4:	ea42 0103 	orr.w	r1, r2, r3
 80100f8:	9b06      	ldr	r3, [sp, #24]
 80100fa:	4319      	orrs	r1, r3
 80100fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100fe:	d10d      	bne.n	801011c <_dtoa_r+0xa44>
 8010100:	2b39      	cmp	r3, #57	@ 0x39
 8010102:	d027      	beq.n	8010154 <_dtoa_r+0xa7c>
 8010104:	9a04      	ldr	r2, [sp, #16]
 8010106:	2a00      	cmp	r2, #0
 8010108:	dd01      	ble.n	801010e <_dtoa_r+0xa36>
 801010a:	9b03      	ldr	r3, [sp, #12]
 801010c:	3331      	adds	r3, #49	@ 0x31
 801010e:	f88b 3000 	strb.w	r3, [fp]
 8010112:	e52e      	b.n	800fb72 <_dtoa_r+0x49a>
 8010114:	4628      	mov	r0, r5
 8010116:	e7b9      	b.n	801008c <_dtoa_r+0x9b4>
 8010118:	2201      	movs	r2, #1
 801011a:	e7e2      	b.n	80100e2 <_dtoa_r+0xa0a>
 801011c:	9904      	ldr	r1, [sp, #16]
 801011e:	2900      	cmp	r1, #0
 8010120:	db04      	blt.n	801012c <_dtoa_r+0xa54>
 8010122:	9807      	ldr	r0, [sp, #28]
 8010124:	4301      	orrs	r1, r0
 8010126:	9806      	ldr	r0, [sp, #24]
 8010128:	4301      	orrs	r1, r0
 801012a:	d120      	bne.n	801016e <_dtoa_r+0xa96>
 801012c:	2a00      	cmp	r2, #0
 801012e:	ddee      	ble.n	801010e <_dtoa_r+0xa36>
 8010130:	9902      	ldr	r1, [sp, #8]
 8010132:	9300      	str	r3, [sp, #0]
 8010134:	2201      	movs	r2, #1
 8010136:	4648      	mov	r0, r9
 8010138:	f000 fb7c 	bl	8010834 <__lshift>
 801013c:	4621      	mov	r1, r4
 801013e:	9002      	str	r0, [sp, #8]
 8010140:	f000 fbe4 	bl	801090c <__mcmp>
 8010144:	2800      	cmp	r0, #0
 8010146:	9b00      	ldr	r3, [sp, #0]
 8010148:	dc02      	bgt.n	8010150 <_dtoa_r+0xa78>
 801014a:	d1e0      	bne.n	801010e <_dtoa_r+0xa36>
 801014c:	07da      	lsls	r2, r3, #31
 801014e:	d5de      	bpl.n	801010e <_dtoa_r+0xa36>
 8010150:	2b39      	cmp	r3, #57	@ 0x39
 8010152:	d1da      	bne.n	801010a <_dtoa_r+0xa32>
 8010154:	2339      	movs	r3, #57	@ 0x39
 8010156:	f88b 3000 	strb.w	r3, [fp]
 801015a:	4633      	mov	r3, r6
 801015c:	461e      	mov	r6, r3
 801015e:	3b01      	subs	r3, #1
 8010160:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010164:	2a39      	cmp	r2, #57	@ 0x39
 8010166:	d04e      	beq.n	8010206 <_dtoa_r+0xb2e>
 8010168:	3201      	adds	r2, #1
 801016a:	701a      	strb	r2, [r3, #0]
 801016c:	e501      	b.n	800fb72 <_dtoa_r+0x49a>
 801016e:	2a00      	cmp	r2, #0
 8010170:	dd03      	ble.n	801017a <_dtoa_r+0xaa2>
 8010172:	2b39      	cmp	r3, #57	@ 0x39
 8010174:	d0ee      	beq.n	8010154 <_dtoa_r+0xa7c>
 8010176:	3301      	adds	r3, #1
 8010178:	e7c9      	b.n	801010e <_dtoa_r+0xa36>
 801017a:	9a00      	ldr	r2, [sp, #0]
 801017c:	9908      	ldr	r1, [sp, #32]
 801017e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010182:	428a      	cmp	r2, r1
 8010184:	d028      	beq.n	80101d8 <_dtoa_r+0xb00>
 8010186:	9902      	ldr	r1, [sp, #8]
 8010188:	2300      	movs	r3, #0
 801018a:	220a      	movs	r2, #10
 801018c:	4648      	mov	r0, r9
 801018e:	f000 f963 	bl	8010458 <__multadd>
 8010192:	42af      	cmp	r7, r5
 8010194:	9002      	str	r0, [sp, #8]
 8010196:	f04f 0300 	mov.w	r3, #0
 801019a:	f04f 020a 	mov.w	r2, #10
 801019e:	4639      	mov	r1, r7
 80101a0:	4648      	mov	r0, r9
 80101a2:	d107      	bne.n	80101b4 <_dtoa_r+0xadc>
 80101a4:	f000 f958 	bl	8010458 <__multadd>
 80101a8:	4607      	mov	r7, r0
 80101aa:	4605      	mov	r5, r0
 80101ac:	9b00      	ldr	r3, [sp, #0]
 80101ae:	3301      	adds	r3, #1
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	e777      	b.n	80100a4 <_dtoa_r+0x9cc>
 80101b4:	f000 f950 	bl	8010458 <__multadd>
 80101b8:	4629      	mov	r1, r5
 80101ba:	4607      	mov	r7, r0
 80101bc:	2300      	movs	r3, #0
 80101be:	220a      	movs	r2, #10
 80101c0:	4648      	mov	r0, r9
 80101c2:	f000 f949 	bl	8010458 <__multadd>
 80101c6:	4605      	mov	r5, r0
 80101c8:	e7f0      	b.n	80101ac <_dtoa_r+0xad4>
 80101ca:	f1bb 0f00 	cmp.w	fp, #0
 80101ce:	bfcc      	ite	gt
 80101d0:	465e      	movgt	r6, fp
 80101d2:	2601      	movle	r6, #1
 80101d4:	4456      	add	r6, sl
 80101d6:	2700      	movs	r7, #0
 80101d8:	9902      	ldr	r1, [sp, #8]
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	2201      	movs	r2, #1
 80101de:	4648      	mov	r0, r9
 80101e0:	f000 fb28 	bl	8010834 <__lshift>
 80101e4:	4621      	mov	r1, r4
 80101e6:	9002      	str	r0, [sp, #8]
 80101e8:	f000 fb90 	bl	801090c <__mcmp>
 80101ec:	2800      	cmp	r0, #0
 80101ee:	dcb4      	bgt.n	801015a <_dtoa_r+0xa82>
 80101f0:	d102      	bne.n	80101f8 <_dtoa_r+0xb20>
 80101f2:	9b00      	ldr	r3, [sp, #0]
 80101f4:	07db      	lsls	r3, r3, #31
 80101f6:	d4b0      	bmi.n	801015a <_dtoa_r+0xa82>
 80101f8:	4633      	mov	r3, r6
 80101fa:	461e      	mov	r6, r3
 80101fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010200:	2a30      	cmp	r2, #48	@ 0x30
 8010202:	d0fa      	beq.n	80101fa <_dtoa_r+0xb22>
 8010204:	e4b5      	b.n	800fb72 <_dtoa_r+0x49a>
 8010206:	459a      	cmp	sl, r3
 8010208:	d1a8      	bne.n	801015c <_dtoa_r+0xa84>
 801020a:	2331      	movs	r3, #49	@ 0x31
 801020c:	f108 0801 	add.w	r8, r8, #1
 8010210:	f88a 3000 	strb.w	r3, [sl]
 8010214:	e4ad      	b.n	800fb72 <_dtoa_r+0x49a>
 8010216:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010218:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010274 <_dtoa_r+0xb9c>
 801021c:	b11b      	cbz	r3, 8010226 <_dtoa_r+0xb4e>
 801021e:	f10a 0308 	add.w	r3, sl, #8
 8010222:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010224:	6013      	str	r3, [r2, #0]
 8010226:	4650      	mov	r0, sl
 8010228:	b017      	add	sp, #92	@ 0x5c
 801022a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022e:	9b07      	ldr	r3, [sp, #28]
 8010230:	2b01      	cmp	r3, #1
 8010232:	f77f ae2e 	ble.w	800fe92 <_dtoa_r+0x7ba>
 8010236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010238:	9308      	str	r3, [sp, #32]
 801023a:	2001      	movs	r0, #1
 801023c:	e64d      	b.n	800feda <_dtoa_r+0x802>
 801023e:	f1bb 0f00 	cmp.w	fp, #0
 8010242:	f77f aed9 	ble.w	800fff8 <_dtoa_r+0x920>
 8010246:	4656      	mov	r6, sl
 8010248:	9802      	ldr	r0, [sp, #8]
 801024a:	4621      	mov	r1, r4
 801024c:	f7ff f9ba 	bl	800f5c4 <quorem>
 8010250:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010254:	f806 3b01 	strb.w	r3, [r6], #1
 8010258:	eba6 020a 	sub.w	r2, r6, sl
 801025c:	4593      	cmp	fp, r2
 801025e:	ddb4      	ble.n	80101ca <_dtoa_r+0xaf2>
 8010260:	9902      	ldr	r1, [sp, #8]
 8010262:	2300      	movs	r3, #0
 8010264:	220a      	movs	r2, #10
 8010266:	4648      	mov	r0, r9
 8010268:	f000 f8f6 	bl	8010458 <__multadd>
 801026c:	9002      	str	r0, [sp, #8]
 801026e:	e7eb      	b.n	8010248 <_dtoa_r+0xb70>
 8010270:	0803e202 	.word	0x0803e202
 8010274:	0803e186 	.word	0x0803e186

08010278 <_free_r>:
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	4605      	mov	r5, r0
 801027c:	2900      	cmp	r1, #0
 801027e:	d041      	beq.n	8010304 <_free_r+0x8c>
 8010280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010284:	1f0c      	subs	r4, r1, #4
 8010286:	2b00      	cmp	r3, #0
 8010288:	bfb8      	it	lt
 801028a:	18e4      	addlt	r4, r4, r3
 801028c:	f7fd fad8 	bl	800d840 <__malloc_lock>
 8010290:	4a1d      	ldr	r2, [pc, #116]	@ (8010308 <_free_r+0x90>)
 8010292:	6813      	ldr	r3, [r2, #0]
 8010294:	b933      	cbnz	r3, 80102a4 <_free_r+0x2c>
 8010296:	6063      	str	r3, [r4, #4]
 8010298:	6014      	str	r4, [r2, #0]
 801029a:	4628      	mov	r0, r5
 801029c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102a0:	f7fd bad4 	b.w	800d84c <__malloc_unlock>
 80102a4:	42a3      	cmp	r3, r4
 80102a6:	d908      	bls.n	80102ba <_free_r+0x42>
 80102a8:	6820      	ldr	r0, [r4, #0]
 80102aa:	1821      	adds	r1, r4, r0
 80102ac:	428b      	cmp	r3, r1
 80102ae:	bf01      	itttt	eq
 80102b0:	6819      	ldreq	r1, [r3, #0]
 80102b2:	685b      	ldreq	r3, [r3, #4]
 80102b4:	1809      	addeq	r1, r1, r0
 80102b6:	6021      	streq	r1, [r4, #0]
 80102b8:	e7ed      	b.n	8010296 <_free_r+0x1e>
 80102ba:	461a      	mov	r2, r3
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	b10b      	cbz	r3, 80102c4 <_free_r+0x4c>
 80102c0:	42a3      	cmp	r3, r4
 80102c2:	d9fa      	bls.n	80102ba <_free_r+0x42>
 80102c4:	6811      	ldr	r1, [r2, #0]
 80102c6:	1850      	adds	r0, r2, r1
 80102c8:	42a0      	cmp	r0, r4
 80102ca:	d10b      	bne.n	80102e4 <_free_r+0x6c>
 80102cc:	6820      	ldr	r0, [r4, #0]
 80102ce:	4401      	add	r1, r0
 80102d0:	1850      	adds	r0, r2, r1
 80102d2:	4283      	cmp	r3, r0
 80102d4:	6011      	str	r1, [r2, #0]
 80102d6:	d1e0      	bne.n	801029a <_free_r+0x22>
 80102d8:	6818      	ldr	r0, [r3, #0]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	6053      	str	r3, [r2, #4]
 80102de:	4408      	add	r0, r1
 80102e0:	6010      	str	r0, [r2, #0]
 80102e2:	e7da      	b.n	801029a <_free_r+0x22>
 80102e4:	d902      	bls.n	80102ec <_free_r+0x74>
 80102e6:	230c      	movs	r3, #12
 80102e8:	602b      	str	r3, [r5, #0]
 80102ea:	e7d6      	b.n	801029a <_free_r+0x22>
 80102ec:	6820      	ldr	r0, [r4, #0]
 80102ee:	1821      	adds	r1, r4, r0
 80102f0:	428b      	cmp	r3, r1
 80102f2:	bf04      	itt	eq
 80102f4:	6819      	ldreq	r1, [r3, #0]
 80102f6:	685b      	ldreq	r3, [r3, #4]
 80102f8:	6063      	str	r3, [r4, #4]
 80102fa:	bf04      	itt	eq
 80102fc:	1809      	addeq	r1, r1, r0
 80102fe:	6021      	streq	r1, [r4, #0]
 8010300:	6054      	str	r4, [r2, #4]
 8010302:	e7ca      	b.n	801029a <_free_r+0x22>
 8010304:	bd38      	pop	{r3, r4, r5, pc}
 8010306:	bf00      	nop
 8010308:	20002c40 	.word	0x20002c40

0801030c <_findenv_r>:
 801030c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010310:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8010380 <_findenv_r+0x74>
 8010314:	4606      	mov	r6, r0
 8010316:	4689      	mov	r9, r1
 8010318:	4617      	mov	r7, r2
 801031a:	f001 fdd7 	bl	8011ecc <__env_lock>
 801031e:	f8da 4000 	ldr.w	r4, [sl]
 8010322:	b134      	cbz	r4, 8010332 <_findenv_r+0x26>
 8010324:	464b      	mov	r3, r9
 8010326:	4698      	mov	r8, r3
 8010328:	f813 2b01 	ldrb.w	r2, [r3], #1
 801032c:	b13a      	cbz	r2, 801033e <_findenv_r+0x32>
 801032e:	2a3d      	cmp	r2, #61	@ 0x3d
 8010330:	d1f9      	bne.n	8010326 <_findenv_r+0x1a>
 8010332:	4630      	mov	r0, r6
 8010334:	f001 fdd0 	bl	8011ed8 <__env_unlock>
 8010338:	2000      	movs	r0, #0
 801033a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033e:	eba8 0809 	sub.w	r8, r8, r9
 8010342:	46a3      	mov	fp, r4
 8010344:	f854 0b04 	ldr.w	r0, [r4], #4
 8010348:	2800      	cmp	r0, #0
 801034a:	d0f2      	beq.n	8010332 <_findenv_r+0x26>
 801034c:	4642      	mov	r2, r8
 801034e:	4649      	mov	r1, r9
 8010350:	f7fe faed 	bl	800e92e <strncmp>
 8010354:	2800      	cmp	r0, #0
 8010356:	d1f4      	bne.n	8010342 <_findenv_r+0x36>
 8010358:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801035c:	eb03 0508 	add.w	r5, r3, r8
 8010360:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010364:	2b3d      	cmp	r3, #61	@ 0x3d
 8010366:	d1ec      	bne.n	8010342 <_findenv_r+0x36>
 8010368:	f8da 3000 	ldr.w	r3, [sl]
 801036c:	ebab 0303 	sub.w	r3, fp, r3
 8010370:	109b      	asrs	r3, r3, #2
 8010372:	4630      	mov	r0, r6
 8010374:	603b      	str	r3, [r7, #0]
 8010376:	f001 fdaf 	bl	8011ed8 <__env_unlock>
 801037a:	1c68      	adds	r0, r5, #1
 801037c:	e7dd      	b.n	801033a <_findenv_r+0x2e>
 801037e:	bf00      	nop
 8010380:	20000010 	.word	0x20000010

08010384 <_getenv_r>:
 8010384:	b507      	push	{r0, r1, r2, lr}
 8010386:	aa01      	add	r2, sp, #4
 8010388:	f7ff ffc0 	bl	801030c <_findenv_r>
 801038c:	b003      	add	sp, #12
 801038e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010394 <_Balloc>:
 8010394:	b570      	push	{r4, r5, r6, lr}
 8010396:	69c6      	ldr	r6, [r0, #28]
 8010398:	4604      	mov	r4, r0
 801039a:	460d      	mov	r5, r1
 801039c:	b976      	cbnz	r6, 80103bc <_Balloc+0x28>
 801039e:	2010      	movs	r0, #16
 80103a0:	f7fd f99c 	bl	800d6dc <malloc>
 80103a4:	4602      	mov	r2, r0
 80103a6:	61e0      	str	r0, [r4, #28]
 80103a8:	b920      	cbnz	r0, 80103b4 <_Balloc+0x20>
 80103aa:	4b18      	ldr	r3, [pc, #96]	@ (801040c <_Balloc+0x78>)
 80103ac:	4818      	ldr	r0, [pc, #96]	@ (8010410 <_Balloc+0x7c>)
 80103ae:	216b      	movs	r1, #107	@ 0x6b
 80103b0:	f001 fd5a 	bl	8011e68 <__assert_func>
 80103b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103b8:	6006      	str	r6, [r0, #0]
 80103ba:	60c6      	str	r6, [r0, #12]
 80103bc:	69e6      	ldr	r6, [r4, #28]
 80103be:	68f3      	ldr	r3, [r6, #12]
 80103c0:	b183      	cbz	r3, 80103e4 <_Balloc+0x50>
 80103c2:	69e3      	ldr	r3, [r4, #28]
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103ca:	b9b8      	cbnz	r0, 80103fc <_Balloc+0x68>
 80103cc:	2101      	movs	r1, #1
 80103ce:	fa01 f605 	lsl.w	r6, r1, r5
 80103d2:	1d72      	adds	r2, r6, #5
 80103d4:	0092      	lsls	r2, r2, #2
 80103d6:	4620      	mov	r0, r4
 80103d8:	f001 fd64 	bl	8011ea4 <_calloc_r>
 80103dc:	b160      	cbz	r0, 80103f8 <_Balloc+0x64>
 80103de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103e2:	e00e      	b.n	8010402 <_Balloc+0x6e>
 80103e4:	2221      	movs	r2, #33	@ 0x21
 80103e6:	2104      	movs	r1, #4
 80103e8:	4620      	mov	r0, r4
 80103ea:	f001 fd5b 	bl	8011ea4 <_calloc_r>
 80103ee:	69e3      	ldr	r3, [r4, #28]
 80103f0:	60f0      	str	r0, [r6, #12]
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d1e4      	bne.n	80103c2 <_Balloc+0x2e>
 80103f8:	2000      	movs	r0, #0
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	6802      	ldr	r2, [r0, #0]
 80103fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010402:	2300      	movs	r3, #0
 8010404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010408:	e7f7      	b.n	80103fa <_Balloc+0x66>
 801040a:	bf00      	nop
 801040c:	0803e193 	.word	0x0803e193
 8010410:	0803e213 	.word	0x0803e213

08010414 <_Bfree>:
 8010414:	b570      	push	{r4, r5, r6, lr}
 8010416:	69c6      	ldr	r6, [r0, #28]
 8010418:	4605      	mov	r5, r0
 801041a:	460c      	mov	r4, r1
 801041c:	b976      	cbnz	r6, 801043c <_Bfree+0x28>
 801041e:	2010      	movs	r0, #16
 8010420:	f7fd f95c 	bl	800d6dc <malloc>
 8010424:	4602      	mov	r2, r0
 8010426:	61e8      	str	r0, [r5, #28]
 8010428:	b920      	cbnz	r0, 8010434 <_Bfree+0x20>
 801042a:	4b09      	ldr	r3, [pc, #36]	@ (8010450 <_Bfree+0x3c>)
 801042c:	4809      	ldr	r0, [pc, #36]	@ (8010454 <_Bfree+0x40>)
 801042e:	218f      	movs	r1, #143	@ 0x8f
 8010430:	f001 fd1a 	bl	8011e68 <__assert_func>
 8010434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010438:	6006      	str	r6, [r0, #0]
 801043a:	60c6      	str	r6, [r0, #12]
 801043c:	b13c      	cbz	r4, 801044e <_Bfree+0x3a>
 801043e:	69eb      	ldr	r3, [r5, #28]
 8010440:	6862      	ldr	r2, [r4, #4]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010448:	6021      	str	r1, [r4, #0]
 801044a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801044e:	bd70      	pop	{r4, r5, r6, pc}
 8010450:	0803e193 	.word	0x0803e193
 8010454:	0803e213 	.word	0x0803e213

08010458 <__multadd>:
 8010458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801045c:	690d      	ldr	r5, [r1, #16]
 801045e:	4607      	mov	r7, r0
 8010460:	460c      	mov	r4, r1
 8010462:	461e      	mov	r6, r3
 8010464:	f101 0c14 	add.w	ip, r1, #20
 8010468:	2000      	movs	r0, #0
 801046a:	f8dc 3000 	ldr.w	r3, [ip]
 801046e:	b299      	uxth	r1, r3
 8010470:	fb02 6101 	mla	r1, r2, r1, r6
 8010474:	0c1e      	lsrs	r6, r3, #16
 8010476:	0c0b      	lsrs	r3, r1, #16
 8010478:	fb02 3306 	mla	r3, r2, r6, r3
 801047c:	b289      	uxth	r1, r1
 801047e:	3001      	adds	r0, #1
 8010480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010484:	4285      	cmp	r5, r0
 8010486:	f84c 1b04 	str.w	r1, [ip], #4
 801048a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801048e:	dcec      	bgt.n	801046a <__multadd+0x12>
 8010490:	b30e      	cbz	r6, 80104d6 <__multadd+0x7e>
 8010492:	68a3      	ldr	r3, [r4, #8]
 8010494:	42ab      	cmp	r3, r5
 8010496:	dc19      	bgt.n	80104cc <__multadd+0x74>
 8010498:	6861      	ldr	r1, [r4, #4]
 801049a:	4638      	mov	r0, r7
 801049c:	3101      	adds	r1, #1
 801049e:	f7ff ff79 	bl	8010394 <_Balloc>
 80104a2:	4680      	mov	r8, r0
 80104a4:	b928      	cbnz	r0, 80104b2 <__multadd+0x5a>
 80104a6:	4602      	mov	r2, r0
 80104a8:	4b0c      	ldr	r3, [pc, #48]	@ (80104dc <__multadd+0x84>)
 80104aa:	480d      	ldr	r0, [pc, #52]	@ (80104e0 <__multadd+0x88>)
 80104ac:	21ba      	movs	r1, #186	@ 0xba
 80104ae:	f001 fcdb 	bl	8011e68 <__assert_func>
 80104b2:	6922      	ldr	r2, [r4, #16]
 80104b4:	3202      	adds	r2, #2
 80104b6:	f104 010c 	add.w	r1, r4, #12
 80104ba:	0092      	lsls	r2, r2, #2
 80104bc:	300c      	adds	r0, #12
 80104be:	f7ff f864 	bl	800f58a <memcpy>
 80104c2:	4621      	mov	r1, r4
 80104c4:	4638      	mov	r0, r7
 80104c6:	f7ff ffa5 	bl	8010414 <_Bfree>
 80104ca:	4644      	mov	r4, r8
 80104cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104d0:	3501      	adds	r5, #1
 80104d2:	615e      	str	r6, [r3, #20]
 80104d4:	6125      	str	r5, [r4, #16]
 80104d6:	4620      	mov	r0, r4
 80104d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104dc:	0803e202 	.word	0x0803e202
 80104e0:	0803e213 	.word	0x0803e213

080104e4 <__s2b>:
 80104e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104e8:	460c      	mov	r4, r1
 80104ea:	4615      	mov	r5, r2
 80104ec:	461f      	mov	r7, r3
 80104ee:	2209      	movs	r2, #9
 80104f0:	3308      	adds	r3, #8
 80104f2:	4606      	mov	r6, r0
 80104f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80104f8:	2100      	movs	r1, #0
 80104fa:	2201      	movs	r2, #1
 80104fc:	429a      	cmp	r2, r3
 80104fe:	db09      	blt.n	8010514 <__s2b+0x30>
 8010500:	4630      	mov	r0, r6
 8010502:	f7ff ff47 	bl	8010394 <_Balloc>
 8010506:	b940      	cbnz	r0, 801051a <__s2b+0x36>
 8010508:	4602      	mov	r2, r0
 801050a:	4b19      	ldr	r3, [pc, #100]	@ (8010570 <__s2b+0x8c>)
 801050c:	4819      	ldr	r0, [pc, #100]	@ (8010574 <__s2b+0x90>)
 801050e:	21d3      	movs	r1, #211	@ 0xd3
 8010510:	f001 fcaa 	bl	8011e68 <__assert_func>
 8010514:	0052      	lsls	r2, r2, #1
 8010516:	3101      	adds	r1, #1
 8010518:	e7f0      	b.n	80104fc <__s2b+0x18>
 801051a:	9b08      	ldr	r3, [sp, #32]
 801051c:	6143      	str	r3, [r0, #20]
 801051e:	2d09      	cmp	r5, #9
 8010520:	f04f 0301 	mov.w	r3, #1
 8010524:	6103      	str	r3, [r0, #16]
 8010526:	dd16      	ble.n	8010556 <__s2b+0x72>
 8010528:	f104 0909 	add.w	r9, r4, #9
 801052c:	46c8      	mov	r8, r9
 801052e:	442c      	add	r4, r5
 8010530:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010534:	4601      	mov	r1, r0
 8010536:	3b30      	subs	r3, #48	@ 0x30
 8010538:	220a      	movs	r2, #10
 801053a:	4630      	mov	r0, r6
 801053c:	f7ff ff8c 	bl	8010458 <__multadd>
 8010540:	45a0      	cmp	r8, r4
 8010542:	d1f5      	bne.n	8010530 <__s2b+0x4c>
 8010544:	f1a5 0408 	sub.w	r4, r5, #8
 8010548:	444c      	add	r4, r9
 801054a:	1b2d      	subs	r5, r5, r4
 801054c:	1963      	adds	r3, r4, r5
 801054e:	42bb      	cmp	r3, r7
 8010550:	db04      	blt.n	801055c <__s2b+0x78>
 8010552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010556:	340a      	adds	r4, #10
 8010558:	2509      	movs	r5, #9
 801055a:	e7f6      	b.n	801054a <__s2b+0x66>
 801055c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010560:	4601      	mov	r1, r0
 8010562:	3b30      	subs	r3, #48	@ 0x30
 8010564:	220a      	movs	r2, #10
 8010566:	4630      	mov	r0, r6
 8010568:	f7ff ff76 	bl	8010458 <__multadd>
 801056c:	e7ee      	b.n	801054c <__s2b+0x68>
 801056e:	bf00      	nop
 8010570:	0803e202 	.word	0x0803e202
 8010574:	0803e213 	.word	0x0803e213

08010578 <__hi0bits>:
 8010578:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801057c:	4603      	mov	r3, r0
 801057e:	bf36      	itet	cc
 8010580:	0403      	lslcc	r3, r0, #16
 8010582:	2000      	movcs	r0, #0
 8010584:	2010      	movcc	r0, #16
 8010586:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801058a:	bf3c      	itt	cc
 801058c:	021b      	lslcc	r3, r3, #8
 801058e:	3008      	addcc	r0, #8
 8010590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010594:	bf3c      	itt	cc
 8010596:	011b      	lslcc	r3, r3, #4
 8010598:	3004      	addcc	r0, #4
 801059a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801059e:	bf3c      	itt	cc
 80105a0:	009b      	lslcc	r3, r3, #2
 80105a2:	3002      	addcc	r0, #2
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	db05      	blt.n	80105b4 <__hi0bits+0x3c>
 80105a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80105ac:	f100 0001 	add.w	r0, r0, #1
 80105b0:	bf08      	it	eq
 80105b2:	2020      	moveq	r0, #32
 80105b4:	4770      	bx	lr

080105b6 <__lo0bits>:
 80105b6:	6803      	ldr	r3, [r0, #0]
 80105b8:	4602      	mov	r2, r0
 80105ba:	f013 0007 	ands.w	r0, r3, #7
 80105be:	d00b      	beq.n	80105d8 <__lo0bits+0x22>
 80105c0:	07d9      	lsls	r1, r3, #31
 80105c2:	d421      	bmi.n	8010608 <__lo0bits+0x52>
 80105c4:	0798      	lsls	r0, r3, #30
 80105c6:	bf49      	itett	mi
 80105c8:	085b      	lsrmi	r3, r3, #1
 80105ca:	089b      	lsrpl	r3, r3, #2
 80105cc:	2001      	movmi	r0, #1
 80105ce:	6013      	strmi	r3, [r2, #0]
 80105d0:	bf5c      	itt	pl
 80105d2:	6013      	strpl	r3, [r2, #0]
 80105d4:	2002      	movpl	r0, #2
 80105d6:	4770      	bx	lr
 80105d8:	b299      	uxth	r1, r3
 80105da:	b909      	cbnz	r1, 80105e0 <__lo0bits+0x2a>
 80105dc:	0c1b      	lsrs	r3, r3, #16
 80105de:	2010      	movs	r0, #16
 80105e0:	b2d9      	uxtb	r1, r3
 80105e2:	b909      	cbnz	r1, 80105e8 <__lo0bits+0x32>
 80105e4:	3008      	adds	r0, #8
 80105e6:	0a1b      	lsrs	r3, r3, #8
 80105e8:	0719      	lsls	r1, r3, #28
 80105ea:	bf04      	itt	eq
 80105ec:	091b      	lsreq	r3, r3, #4
 80105ee:	3004      	addeq	r0, #4
 80105f0:	0799      	lsls	r1, r3, #30
 80105f2:	bf04      	itt	eq
 80105f4:	089b      	lsreq	r3, r3, #2
 80105f6:	3002      	addeq	r0, #2
 80105f8:	07d9      	lsls	r1, r3, #31
 80105fa:	d403      	bmi.n	8010604 <__lo0bits+0x4e>
 80105fc:	085b      	lsrs	r3, r3, #1
 80105fe:	f100 0001 	add.w	r0, r0, #1
 8010602:	d003      	beq.n	801060c <__lo0bits+0x56>
 8010604:	6013      	str	r3, [r2, #0]
 8010606:	4770      	bx	lr
 8010608:	2000      	movs	r0, #0
 801060a:	4770      	bx	lr
 801060c:	2020      	movs	r0, #32
 801060e:	4770      	bx	lr

08010610 <__i2b>:
 8010610:	b510      	push	{r4, lr}
 8010612:	460c      	mov	r4, r1
 8010614:	2101      	movs	r1, #1
 8010616:	f7ff febd 	bl	8010394 <_Balloc>
 801061a:	4602      	mov	r2, r0
 801061c:	b928      	cbnz	r0, 801062a <__i2b+0x1a>
 801061e:	4b05      	ldr	r3, [pc, #20]	@ (8010634 <__i2b+0x24>)
 8010620:	4805      	ldr	r0, [pc, #20]	@ (8010638 <__i2b+0x28>)
 8010622:	f240 1145 	movw	r1, #325	@ 0x145
 8010626:	f001 fc1f 	bl	8011e68 <__assert_func>
 801062a:	2301      	movs	r3, #1
 801062c:	6144      	str	r4, [r0, #20]
 801062e:	6103      	str	r3, [r0, #16]
 8010630:	bd10      	pop	{r4, pc}
 8010632:	bf00      	nop
 8010634:	0803e202 	.word	0x0803e202
 8010638:	0803e213 	.word	0x0803e213

0801063c <__multiply>:
 801063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010640:	4617      	mov	r7, r2
 8010642:	690a      	ldr	r2, [r1, #16]
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	429a      	cmp	r2, r3
 8010648:	bfa8      	it	ge
 801064a:	463b      	movge	r3, r7
 801064c:	4689      	mov	r9, r1
 801064e:	bfa4      	itt	ge
 8010650:	460f      	movge	r7, r1
 8010652:	4699      	movge	r9, r3
 8010654:	693d      	ldr	r5, [r7, #16]
 8010656:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	6879      	ldr	r1, [r7, #4]
 801065e:	eb05 060a 	add.w	r6, r5, sl
 8010662:	42b3      	cmp	r3, r6
 8010664:	b085      	sub	sp, #20
 8010666:	bfb8      	it	lt
 8010668:	3101      	addlt	r1, #1
 801066a:	f7ff fe93 	bl	8010394 <_Balloc>
 801066e:	b930      	cbnz	r0, 801067e <__multiply+0x42>
 8010670:	4602      	mov	r2, r0
 8010672:	4b41      	ldr	r3, [pc, #260]	@ (8010778 <__multiply+0x13c>)
 8010674:	4841      	ldr	r0, [pc, #260]	@ (801077c <__multiply+0x140>)
 8010676:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801067a:	f001 fbf5 	bl	8011e68 <__assert_func>
 801067e:	f100 0414 	add.w	r4, r0, #20
 8010682:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010686:	4623      	mov	r3, r4
 8010688:	2200      	movs	r2, #0
 801068a:	4573      	cmp	r3, lr
 801068c:	d320      	bcc.n	80106d0 <__multiply+0x94>
 801068e:	f107 0814 	add.w	r8, r7, #20
 8010692:	f109 0114 	add.w	r1, r9, #20
 8010696:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801069a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801069e:	9302      	str	r3, [sp, #8]
 80106a0:	1beb      	subs	r3, r5, r7
 80106a2:	3b15      	subs	r3, #21
 80106a4:	f023 0303 	bic.w	r3, r3, #3
 80106a8:	3304      	adds	r3, #4
 80106aa:	3715      	adds	r7, #21
 80106ac:	42bd      	cmp	r5, r7
 80106ae:	bf38      	it	cc
 80106b0:	2304      	movcc	r3, #4
 80106b2:	9301      	str	r3, [sp, #4]
 80106b4:	9b02      	ldr	r3, [sp, #8]
 80106b6:	9103      	str	r1, [sp, #12]
 80106b8:	428b      	cmp	r3, r1
 80106ba:	d80c      	bhi.n	80106d6 <__multiply+0x9a>
 80106bc:	2e00      	cmp	r6, #0
 80106be:	dd03      	ble.n	80106c8 <__multiply+0x8c>
 80106c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d055      	beq.n	8010774 <__multiply+0x138>
 80106c8:	6106      	str	r6, [r0, #16]
 80106ca:	b005      	add	sp, #20
 80106cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106d0:	f843 2b04 	str.w	r2, [r3], #4
 80106d4:	e7d9      	b.n	801068a <__multiply+0x4e>
 80106d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80106da:	f1ba 0f00 	cmp.w	sl, #0
 80106de:	d01f      	beq.n	8010720 <__multiply+0xe4>
 80106e0:	46c4      	mov	ip, r8
 80106e2:	46a1      	mov	r9, r4
 80106e4:	2700      	movs	r7, #0
 80106e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80106ea:	f8d9 3000 	ldr.w	r3, [r9]
 80106ee:	fa1f fb82 	uxth.w	fp, r2
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80106f8:	443b      	add	r3, r7
 80106fa:	f8d9 7000 	ldr.w	r7, [r9]
 80106fe:	0c12      	lsrs	r2, r2, #16
 8010700:	0c3f      	lsrs	r7, r7, #16
 8010702:	fb0a 7202 	mla	r2, sl, r2, r7
 8010706:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801070a:	b29b      	uxth	r3, r3
 801070c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010710:	4565      	cmp	r5, ip
 8010712:	f849 3b04 	str.w	r3, [r9], #4
 8010716:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801071a:	d8e4      	bhi.n	80106e6 <__multiply+0xaa>
 801071c:	9b01      	ldr	r3, [sp, #4]
 801071e:	50e7      	str	r7, [r4, r3]
 8010720:	9b03      	ldr	r3, [sp, #12]
 8010722:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010726:	3104      	adds	r1, #4
 8010728:	f1b9 0f00 	cmp.w	r9, #0
 801072c:	d020      	beq.n	8010770 <__multiply+0x134>
 801072e:	6823      	ldr	r3, [r4, #0]
 8010730:	4647      	mov	r7, r8
 8010732:	46a4      	mov	ip, r4
 8010734:	f04f 0a00 	mov.w	sl, #0
 8010738:	f8b7 b000 	ldrh.w	fp, [r7]
 801073c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010740:	fb09 220b 	mla	r2, r9, fp, r2
 8010744:	4452      	add	r2, sl
 8010746:	b29b      	uxth	r3, r3
 8010748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801074c:	f84c 3b04 	str.w	r3, [ip], #4
 8010750:	f857 3b04 	ldr.w	r3, [r7], #4
 8010754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010758:	f8bc 3000 	ldrh.w	r3, [ip]
 801075c:	fb09 330a 	mla	r3, r9, sl, r3
 8010760:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010764:	42bd      	cmp	r5, r7
 8010766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801076a:	d8e5      	bhi.n	8010738 <__multiply+0xfc>
 801076c:	9a01      	ldr	r2, [sp, #4]
 801076e:	50a3      	str	r3, [r4, r2]
 8010770:	3404      	adds	r4, #4
 8010772:	e79f      	b.n	80106b4 <__multiply+0x78>
 8010774:	3e01      	subs	r6, #1
 8010776:	e7a1      	b.n	80106bc <__multiply+0x80>
 8010778:	0803e202 	.word	0x0803e202
 801077c:	0803e213 	.word	0x0803e213

08010780 <__pow5mult>:
 8010780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010784:	4615      	mov	r5, r2
 8010786:	f012 0203 	ands.w	r2, r2, #3
 801078a:	4607      	mov	r7, r0
 801078c:	460e      	mov	r6, r1
 801078e:	d007      	beq.n	80107a0 <__pow5mult+0x20>
 8010790:	4c25      	ldr	r4, [pc, #148]	@ (8010828 <__pow5mult+0xa8>)
 8010792:	3a01      	subs	r2, #1
 8010794:	2300      	movs	r3, #0
 8010796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801079a:	f7ff fe5d 	bl	8010458 <__multadd>
 801079e:	4606      	mov	r6, r0
 80107a0:	10ad      	asrs	r5, r5, #2
 80107a2:	d03d      	beq.n	8010820 <__pow5mult+0xa0>
 80107a4:	69fc      	ldr	r4, [r7, #28]
 80107a6:	b97c      	cbnz	r4, 80107c8 <__pow5mult+0x48>
 80107a8:	2010      	movs	r0, #16
 80107aa:	f7fc ff97 	bl	800d6dc <malloc>
 80107ae:	4602      	mov	r2, r0
 80107b0:	61f8      	str	r0, [r7, #28]
 80107b2:	b928      	cbnz	r0, 80107c0 <__pow5mult+0x40>
 80107b4:	4b1d      	ldr	r3, [pc, #116]	@ (801082c <__pow5mult+0xac>)
 80107b6:	481e      	ldr	r0, [pc, #120]	@ (8010830 <__pow5mult+0xb0>)
 80107b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80107bc:	f001 fb54 	bl	8011e68 <__assert_func>
 80107c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107c4:	6004      	str	r4, [r0, #0]
 80107c6:	60c4      	str	r4, [r0, #12]
 80107c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80107cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107d0:	b94c      	cbnz	r4, 80107e6 <__pow5mult+0x66>
 80107d2:	f240 2171 	movw	r1, #625	@ 0x271
 80107d6:	4638      	mov	r0, r7
 80107d8:	f7ff ff1a 	bl	8010610 <__i2b>
 80107dc:	2300      	movs	r3, #0
 80107de:	f8c8 0008 	str.w	r0, [r8, #8]
 80107e2:	4604      	mov	r4, r0
 80107e4:	6003      	str	r3, [r0, #0]
 80107e6:	f04f 0900 	mov.w	r9, #0
 80107ea:	07eb      	lsls	r3, r5, #31
 80107ec:	d50a      	bpl.n	8010804 <__pow5mult+0x84>
 80107ee:	4631      	mov	r1, r6
 80107f0:	4622      	mov	r2, r4
 80107f2:	4638      	mov	r0, r7
 80107f4:	f7ff ff22 	bl	801063c <__multiply>
 80107f8:	4631      	mov	r1, r6
 80107fa:	4680      	mov	r8, r0
 80107fc:	4638      	mov	r0, r7
 80107fe:	f7ff fe09 	bl	8010414 <_Bfree>
 8010802:	4646      	mov	r6, r8
 8010804:	106d      	asrs	r5, r5, #1
 8010806:	d00b      	beq.n	8010820 <__pow5mult+0xa0>
 8010808:	6820      	ldr	r0, [r4, #0]
 801080a:	b938      	cbnz	r0, 801081c <__pow5mult+0x9c>
 801080c:	4622      	mov	r2, r4
 801080e:	4621      	mov	r1, r4
 8010810:	4638      	mov	r0, r7
 8010812:	f7ff ff13 	bl	801063c <__multiply>
 8010816:	6020      	str	r0, [r4, #0]
 8010818:	f8c0 9000 	str.w	r9, [r0]
 801081c:	4604      	mov	r4, r0
 801081e:	e7e4      	b.n	80107ea <__pow5mult+0x6a>
 8010820:	4630      	mov	r0, r6
 8010822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010826:	bf00      	nop
 8010828:	0803e3a0 	.word	0x0803e3a0
 801082c:	0803e193 	.word	0x0803e193
 8010830:	0803e213 	.word	0x0803e213

08010834 <__lshift>:
 8010834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010838:	460c      	mov	r4, r1
 801083a:	6849      	ldr	r1, [r1, #4]
 801083c:	6923      	ldr	r3, [r4, #16]
 801083e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010842:	68a3      	ldr	r3, [r4, #8]
 8010844:	4607      	mov	r7, r0
 8010846:	4691      	mov	r9, r2
 8010848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801084c:	f108 0601 	add.w	r6, r8, #1
 8010850:	42b3      	cmp	r3, r6
 8010852:	db0b      	blt.n	801086c <__lshift+0x38>
 8010854:	4638      	mov	r0, r7
 8010856:	f7ff fd9d 	bl	8010394 <_Balloc>
 801085a:	4605      	mov	r5, r0
 801085c:	b948      	cbnz	r0, 8010872 <__lshift+0x3e>
 801085e:	4602      	mov	r2, r0
 8010860:	4b28      	ldr	r3, [pc, #160]	@ (8010904 <__lshift+0xd0>)
 8010862:	4829      	ldr	r0, [pc, #164]	@ (8010908 <__lshift+0xd4>)
 8010864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010868:	f001 fafe 	bl	8011e68 <__assert_func>
 801086c:	3101      	adds	r1, #1
 801086e:	005b      	lsls	r3, r3, #1
 8010870:	e7ee      	b.n	8010850 <__lshift+0x1c>
 8010872:	2300      	movs	r3, #0
 8010874:	f100 0114 	add.w	r1, r0, #20
 8010878:	f100 0210 	add.w	r2, r0, #16
 801087c:	4618      	mov	r0, r3
 801087e:	4553      	cmp	r3, sl
 8010880:	db33      	blt.n	80108ea <__lshift+0xb6>
 8010882:	6920      	ldr	r0, [r4, #16]
 8010884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010888:	f104 0314 	add.w	r3, r4, #20
 801088c:	f019 091f 	ands.w	r9, r9, #31
 8010890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010898:	d02b      	beq.n	80108f2 <__lshift+0xbe>
 801089a:	f1c9 0e20 	rsb	lr, r9, #32
 801089e:	468a      	mov	sl, r1
 80108a0:	2200      	movs	r2, #0
 80108a2:	6818      	ldr	r0, [r3, #0]
 80108a4:	fa00 f009 	lsl.w	r0, r0, r9
 80108a8:	4310      	orrs	r0, r2
 80108aa:	f84a 0b04 	str.w	r0, [sl], #4
 80108ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80108b2:	459c      	cmp	ip, r3
 80108b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80108b8:	d8f3      	bhi.n	80108a2 <__lshift+0x6e>
 80108ba:	ebac 0304 	sub.w	r3, ip, r4
 80108be:	3b15      	subs	r3, #21
 80108c0:	f023 0303 	bic.w	r3, r3, #3
 80108c4:	3304      	adds	r3, #4
 80108c6:	f104 0015 	add.w	r0, r4, #21
 80108ca:	4560      	cmp	r0, ip
 80108cc:	bf88      	it	hi
 80108ce:	2304      	movhi	r3, #4
 80108d0:	50ca      	str	r2, [r1, r3]
 80108d2:	b10a      	cbz	r2, 80108d8 <__lshift+0xa4>
 80108d4:	f108 0602 	add.w	r6, r8, #2
 80108d8:	3e01      	subs	r6, #1
 80108da:	4638      	mov	r0, r7
 80108dc:	612e      	str	r6, [r5, #16]
 80108de:	4621      	mov	r1, r4
 80108e0:	f7ff fd98 	bl	8010414 <_Bfree>
 80108e4:	4628      	mov	r0, r5
 80108e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80108ee:	3301      	adds	r3, #1
 80108f0:	e7c5      	b.n	801087e <__lshift+0x4a>
 80108f2:	3904      	subs	r1, #4
 80108f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80108f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80108fc:	459c      	cmp	ip, r3
 80108fe:	d8f9      	bhi.n	80108f4 <__lshift+0xc0>
 8010900:	e7ea      	b.n	80108d8 <__lshift+0xa4>
 8010902:	bf00      	nop
 8010904:	0803e202 	.word	0x0803e202
 8010908:	0803e213 	.word	0x0803e213

0801090c <__mcmp>:
 801090c:	690a      	ldr	r2, [r1, #16]
 801090e:	4603      	mov	r3, r0
 8010910:	6900      	ldr	r0, [r0, #16]
 8010912:	1a80      	subs	r0, r0, r2
 8010914:	b530      	push	{r4, r5, lr}
 8010916:	d10e      	bne.n	8010936 <__mcmp+0x2a>
 8010918:	3314      	adds	r3, #20
 801091a:	3114      	adds	r1, #20
 801091c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801092c:	4295      	cmp	r5, r2
 801092e:	d003      	beq.n	8010938 <__mcmp+0x2c>
 8010930:	d205      	bcs.n	801093e <__mcmp+0x32>
 8010932:	f04f 30ff 	mov.w	r0, #4294967295
 8010936:	bd30      	pop	{r4, r5, pc}
 8010938:	42a3      	cmp	r3, r4
 801093a:	d3f3      	bcc.n	8010924 <__mcmp+0x18>
 801093c:	e7fb      	b.n	8010936 <__mcmp+0x2a>
 801093e:	2001      	movs	r0, #1
 8010940:	e7f9      	b.n	8010936 <__mcmp+0x2a>
	...

08010944 <__mdiff>:
 8010944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010948:	4689      	mov	r9, r1
 801094a:	4606      	mov	r6, r0
 801094c:	4611      	mov	r1, r2
 801094e:	4648      	mov	r0, r9
 8010950:	4614      	mov	r4, r2
 8010952:	f7ff ffdb 	bl	801090c <__mcmp>
 8010956:	1e05      	subs	r5, r0, #0
 8010958:	d112      	bne.n	8010980 <__mdiff+0x3c>
 801095a:	4629      	mov	r1, r5
 801095c:	4630      	mov	r0, r6
 801095e:	f7ff fd19 	bl	8010394 <_Balloc>
 8010962:	4602      	mov	r2, r0
 8010964:	b928      	cbnz	r0, 8010972 <__mdiff+0x2e>
 8010966:	4b3f      	ldr	r3, [pc, #252]	@ (8010a64 <__mdiff+0x120>)
 8010968:	f240 2137 	movw	r1, #567	@ 0x237
 801096c:	483e      	ldr	r0, [pc, #248]	@ (8010a68 <__mdiff+0x124>)
 801096e:	f001 fa7b 	bl	8011e68 <__assert_func>
 8010972:	2301      	movs	r3, #1
 8010974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010978:	4610      	mov	r0, r2
 801097a:	b003      	add	sp, #12
 801097c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010980:	bfbc      	itt	lt
 8010982:	464b      	movlt	r3, r9
 8010984:	46a1      	movlt	r9, r4
 8010986:	4630      	mov	r0, r6
 8010988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801098c:	bfba      	itte	lt
 801098e:	461c      	movlt	r4, r3
 8010990:	2501      	movlt	r5, #1
 8010992:	2500      	movge	r5, #0
 8010994:	f7ff fcfe 	bl	8010394 <_Balloc>
 8010998:	4602      	mov	r2, r0
 801099a:	b918      	cbnz	r0, 80109a4 <__mdiff+0x60>
 801099c:	4b31      	ldr	r3, [pc, #196]	@ (8010a64 <__mdiff+0x120>)
 801099e:	f240 2145 	movw	r1, #581	@ 0x245
 80109a2:	e7e3      	b.n	801096c <__mdiff+0x28>
 80109a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80109a8:	6926      	ldr	r6, [r4, #16]
 80109aa:	60c5      	str	r5, [r0, #12]
 80109ac:	f109 0310 	add.w	r3, r9, #16
 80109b0:	f109 0514 	add.w	r5, r9, #20
 80109b4:	f104 0e14 	add.w	lr, r4, #20
 80109b8:	f100 0b14 	add.w	fp, r0, #20
 80109bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80109c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80109c4:	9301      	str	r3, [sp, #4]
 80109c6:	46d9      	mov	r9, fp
 80109c8:	f04f 0c00 	mov.w	ip, #0
 80109cc:	9b01      	ldr	r3, [sp, #4]
 80109ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80109d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80109d6:	9301      	str	r3, [sp, #4]
 80109d8:	fa1f f38a 	uxth.w	r3, sl
 80109dc:	4619      	mov	r1, r3
 80109de:	b283      	uxth	r3, r0
 80109e0:	1acb      	subs	r3, r1, r3
 80109e2:	0c00      	lsrs	r0, r0, #16
 80109e4:	4463      	add	r3, ip
 80109e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80109ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80109f4:	4576      	cmp	r6, lr
 80109f6:	f849 3b04 	str.w	r3, [r9], #4
 80109fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80109fe:	d8e5      	bhi.n	80109cc <__mdiff+0x88>
 8010a00:	1b33      	subs	r3, r6, r4
 8010a02:	3b15      	subs	r3, #21
 8010a04:	f023 0303 	bic.w	r3, r3, #3
 8010a08:	3415      	adds	r4, #21
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	42a6      	cmp	r6, r4
 8010a0e:	bf38      	it	cc
 8010a10:	2304      	movcc	r3, #4
 8010a12:	441d      	add	r5, r3
 8010a14:	445b      	add	r3, fp
 8010a16:	461e      	mov	r6, r3
 8010a18:	462c      	mov	r4, r5
 8010a1a:	4544      	cmp	r4, r8
 8010a1c:	d30e      	bcc.n	8010a3c <__mdiff+0xf8>
 8010a1e:	f108 0103 	add.w	r1, r8, #3
 8010a22:	1b49      	subs	r1, r1, r5
 8010a24:	f021 0103 	bic.w	r1, r1, #3
 8010a28:	3d03      	subs	r5, #3
 8010a2a:	45a8      	cmp	r8, r5
 8010a2c:	bf38      	it	cc
 8010a2e:	2100      	movcc	r1, #0
 8010a30:	440b      	add	r3, r1
 8010a32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a36:	b191      	cbz	r1, 8010a5e <__mdiff+0x11a>
 8010a38:	6117      	str	r7, [r2, #16]
 8010a3a:	e79d      	b.n	8010978 <__mdiff+0x34>
 8010a3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010a40:	46e6      	mov	lr, ip
 8010a42:	0c08      	lsrs	r0, r1, #16
 8010a44:	fa1c fc81 	uxtah	ip, ip, r1
 8010a48:	4471      	add	r1, lr
 8010a4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010a4e:	b289      	uxth	r1, r1
 8010a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010a54:	f846 1b04 	str.w	r1, [r6], #4
 8010a58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a5c:	e7dd      	b.n	8010a1a <__mdiff+0xd6>
 8010a5e:	3f01      	subs	r7, #1
 8010a60:	e7e7      	b.n	8010a32 <__mdiff+0xee>
 8010a62:	bf00      	nop
 8010a64:	0803e202 	.word	0x0803e202
 8010a68:	0803e213 	.word	0x0803e213

08010a6c <__ulp>:
 8010a6c:	b082      	sub	sp, #8
 8010a6e:	ed8d 0b00 	vstr	d0, [sp]
 8010a72:	9a01      	ldr	r2, [sp, #4]
 8010a74:	4b0f      	ldr	r3, [pc, #60]	@ (8010ab4 <__ulp+0x48>)
 8010a76:	4013      	ands	r3, r2
 8010a78:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	dc08      	bgt.n	8010a92 <__ulp+0x26>
 8010a80:	425b      	negs	r3, r3
 8010a82:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010a86:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010a8a:	da04      	bge.n	8010a96 <__ulp+0x2a>
 8010a8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010a90:	4113      	asrs	r3, r2
 8010a92:	2200      	movs	r2, #0
 8010a94:	e008      	b.n	8010aa8 <__ulp+0x3c>
 8010a96:	f1a2 0314 	sub.w	r3, r2, #20
 8010a9a:	2b1e      	cmp	r3, #30
 8010a9c:	bfda      	itte	le
 8010a9e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010aa2:	40da      	lsrle	r2, r3
 8010aa4:	2201      	movgt	r2, #1
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	4610      	mov	r0, r2
 8010aac:	ec41 0b10 	vmov	d0, r0, r1
 8010ab0:	b002      	add	sp, #8
 8010ab2:	4770      	bx	lr
 8010ab4:	7ff00000 	.word	0x7ff00000

08010ab8 <__b2d>:
 8010ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010abc:	6906      	ldr	r6, [r0, #16]
 8010abe:	f100 0814 	add.w	r8, r0, #20
 8010ac2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010ac6:	1f37      	subs	r7, r6, #4
 8010ac8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010acc:	4610      	mov	r0, r2
 8010ace:	f7ff fd53 	bl	8010578 <__hi0bits>
 8010ad2:	f1c0 0320 	rsb	r3, r0, #32
 8010ad6:	280a      	cmp	r0, #10
 8010ad8:	600b      	str	r3, [r1, #0]
 8010ada:	491b      	ldr	r1, [pc, #108]	@ (8010b48 <__b2d+0x90>)
 8010adc:	dc15      	bgt.n	8010b0a <__b2d+0x52>
 8010ade:	f1c0 0c0b 	rsb	ip, r0, #11
 8010ae2:	fa22 f30c 	lsr.w	r3, r2, ip
 8010ae6:	45b8      	cmp	r8, r7
 8010ae8:	ea43 0501 	orr.w	r5, r3, r1
 8010aec:	bf34      	ite	cc
 8010aee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010af2:	2300      	movcs	r3, #0
 8010af4:	3015      	adds	r0, #21
 8010af6:	fa02 f000 	lsl.w	r0, r2, r0
 8010afa:	fa23 f30c 	lsr.w	r3, r3, ip
 8010afe:	4303      	orrs	r3, r0
 8010b00:	461c      	mov	r4, r3
 8010b02:	ec45 4b10 	vmov	d0, r4, r5
 8010b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b0a:	45b8      	cmp	r8, r7
 8010b0c:	bf3a      	itte	cc
 8010b0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010b12:	f1a6 0708 	subcc.w	r7, r6, #8
 8010b16:	2300      	movcs	r3, #0
 8010b18:	380b      	subs	r0, #11
 8010b1a:	d012      	beq.n	8010b42 <__b2d+0x8a>
 8010b1c:	f1c0 0120 	rsb	r1, r0, #32
 8010b20:	fa23 f401 	lsr.w	r4, r3, r1
 8010b24:	4082      	lsls	r2, r0
 8010b26:	4322      	orrs	r2, r4
 8010b28:	4547      	cmp	r7, r8
 8010b2a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010b2e:	bf8c      	ite	hi
 8010b30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010b34:	2200      	movls	r2, #0
 8010b36:	4083      	lsls	r3, r0
 8010b38:	40ca      	lsrs	r2, r1
 8010b3a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010b3e:	4313      	orrs	r3, r2
 8010b40:	e7de      	b.n	8010b00 <__b2d+0x48>
 8010b42:	ea42 0501 	orr.w	r5, r2, r1
 8010b46:	e7db      	b.n	8010b00 <__b2d+0x48>
 8010b48:	3ff00000 	.word	0x3ff00000

08010b4c <__d2b>:
 8010b4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b50:	460f      	mov	r7, r1
 8010b52:	2101      	movs	r1, #1
 8010b54:	ec59 8b10 	vmov	r8, r9, d0
 8010b58:	4616      	mov	r6, r2
 8010b5a:	f7ff fc1b 	bl	8010394 <_Balloc>
 8010b5e:	4604      	mov	r4, r0
 8010b60:	b930      	cbnz	r0, 8010b70 <__d2b+0x24>
 8010b62:	4602      	mov	r2, r0
 8010b64:	4b23      	ldr	r3, [pc, #140]	@ (8010bf4 <__d2b+0xa8>)
 8010b66:	4824      	ldr	r0, [pc, #144]	@ (8010bf8 <__d2b+0xac>)
 8010b68:	f240 310f 	movw	r1, #783	@ 0x30f
 8010b6c:	f001 f97c 	bl	8011e68 <__assert_func>
 8010b70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b78:	b10d      	cbz	r5, 8010b7e <__d2b+0x32>
 8010b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010b7e:	9301      	str	r3, [sp, #4]
 8010b80:	f1b8 0300 	subs.w	r3, r8, #0
 8010b84:	d023      	beq.n	8010bce <__d2b+0x82>
 8010b86:	4668      	mov	r0, sp
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	f7ff fd14 	bl	80105b6 <__lo0bits>
 8010b8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010b92:	b1d0      	cbz	r0, 8010bca <__d2b+0x7e>
 8010b94:	f1c0 0320 	rsb	r3, r0, #32
 8010b98:	fa02 f303 	lsl.w	r3, r2, r3
 8010b9c:	430b      	orrs	r3, r1
 8010b9e:	40c2      	lsrs	r2, r0
 8010ba0:	6163      	str	r3, [r4, #20]
 8010ba2:	9201      	str	r2, [sp, #4]
 8010ba4:	9b01      	ldr	r3, [sp, #4]
 8010ba6:	61a3      	str	r3, [r4, #24]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	bf0c      	ite	eq
 8010bac:	2201      	moveq	r2, #1
 8010bae:	2202      	movne	r2, #2
 8010bb0:	6122      	str	r2, [r4, #16]
 8010bb2:	b1a5      	cbz	r5, 8010bde <__d2b+0x92>
 8010bb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010bb8:	4405      	add	r5, r0
 8010bba:	603d      	str	r5, [r7, #0]
 8010bbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010bc0:	6030      	str	r0, [r6, #0]
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	b003      	add	sp, #12
 8010bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bca:	6161      	str	r1, [r4, #20]
 8010bcc:	e7ea      	b.n	8010ba4 <__d2b+0x58>
 8010bce:	a801      	add	r0, sp, #4
 8010bd0:	f7ff fcf1 	bl	80105b6 <__lo0bits>
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	6163      	str	r3, [r4, #20]
 8010bd8:	3020      	adds	r0, #32
 8010bda:	2201      	movs	r2, #1
 8010bdc:	e7e8      	b.n	8010bb0 <__d2b+0x64>
 8010bde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010be2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010be6:	6038      	str	r0, [r7, #0]
 8010be8:	6918      	ldr	r0, [r3, #16]
 8010bea:	f7ff fcc5 	bl	8010578 <__hi0bits>
 8010bee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010bf2:	e7e5      	b.n	8010bc0 <__d2b+0x74>
 8010bf4:	0803e202 	.word	0x0803e202
 8010bf8:	0803e213 	.word	0x0803e213

08010bfc <__ratio>:
 8010bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c00:	b085      	sub	sp, #20
 8010c02:	e9cd 1000 	strd	r1, r0, [sp]
 8010c06:	a902      	add	r1, sp, #8
 8010c08:	f7ff ff56 	bl	8010ab8 <__b2d>
 8010c0c:	9800      	ldr	r0, [sp, #0]
 8010c0e:	a903      	add	r1, sp, #12
 8010c10:	ec55 4b10 	vmov	r4, r5, d0
 8010c14:	f7ff ff50 	bl	8010ab8 <__b2d>
 8010c18:	9b01      	ldr	r3, [sp, #4]
 8010c1a:	6919      	ldr	r1, [r3, #16]
 8010c1c:	9b00      	ldr	r3, [sp, #0]
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	1ac9      	subs	r1, r1, r3
 8010c22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010c26:	1a9b      	subs	r3, r3, r2
 8010c28:	ec5b ab10 	vmov	sl, fp, d0
 8010c2c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	bfce      	itee	gt
 8010c34:	462a      	movgt	r2, r5
 8010c36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c3a:	465a      	movle	r2, fp
 8010c3c:	462f      	mov	r7, r5
 8010c3e:	46d9      	mov	r9, fp
 8010c40:	bfcc      	ite	gt
 8010c42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010c46:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010c4a:	464b      	mov	r3, r9
 8010c4c:	4652      	mov	r2, sl
 8010c4e:	4620      	mov	r0, r4
 8010c50:	4639      	mov	r1, r7
 8010c52:	f7ef fe0b 	bl	800086c <__aeabi_ddiv>
 8010c56:	ec41 0b10 	vmov	d0, r0, r1
 8010c5a:	b005      	add	sp, #20
 8010c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c60 <__copybits>:
 8010c60:	3901      	subs	r1, #1
 8010c62:	b570      	push	{r4, r5, r6, lr}
 8010c64:	1149      	asrs	r1, r1, #5
 8010c66:	6914      	ldr	r4, [r2, #16]
 8010c68:	3101      	adds	r1, #1
 8010c6a:	f102 0314 	add.w	r3, r2, #20
 8010c6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c76:	1f05      	subs	r5, r0, #4
 8010c78:	42a3      	cmp	r3, r4
 8010c7a:	d30c      	bcc.n	8010c96 <__copybits+0x36>
 8010c7c:	1aa3      	subs	r3, r4, r2
 8010c7e:	3b11      	subs	r3, #17
 8010c80:	f023 0303 	bic.w	r3, r3, #3
 8010c84:	3211      	adds	r2, #17
 8010c86:	42a2      	cmp	r2, r4
 8010c88:	bf88      	it	hi
 8010c8a:	2300      	movhi	r3, #0
 8010c8c:	4418      	add	r0, r3
 8010c8e:	2300      	movs	r3, #0
 8010c90:	4288      	cmp	r0, r1
 8010c92:	d305      	bcc.n	8010ca0 <__copybits+0x40>
 8010c94:	bd70      	pop	{r4, r5, r6, pc}
 8010c96:	f853 6b04 	ldr.w	r6, [r3], #4
 8010c9a:	f845 6f04 	str.w	r6, [r5, #4]!
 8010c9e:	e7eb      	b.n	8010c78 <__copybits+0x18>
 8010ca0:	f840 3b04 	str.w	r3, [r0], #4
 8010ca4:	e7f4      	b.n	8010c90 <__copybits+0x30>

08010ca6 <__any_on>:
 8010ca6:	f100 0214 	add.w	r2, r0, #20
 8010caa:	6900      	ldr	r0, [r0, #16]
 8010cac:	114b      	asrs	r3, r1, #5
 8010cae:	4298      	cmp	r0, r3
 8010cb0:	b510      	push	{r4, lr}
 8010cb2:	db11      	blt.n	8010cd8 <__any_on+0x32>
 8010cb4:	dd0a      	ble.n	8010ccc <__any_on+0x26>
 8010cb6:	f011 011f 	ands.w	r1, r1, #31
 8010cba:	d007      	beq.n	8010ccc <__any_on+0x26>
 8010cbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010cc0:	fa24 f001 	lsr.w	r0, r4, r1
 8010cc4:	fa00 f101 	lsl.w	r1, r0, r1
 8010cc8:	428c      	cmp	r4, r1
 8010cca:	d10b      	bne.n	8010ce4 <__any_on+0x3e>
 8010ccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d803      	bhi.n	8010cdc <__any_on+0x36>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	bd10      	pop	{r4, pc}
 8010cd8:	4603      	mov	r3, r0
 8010cda:	e7f7      	b.n	8010ccc <__any_on+0x26>
 8010cdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ce0:	2900      	cmp	r1, #0
 8010ce2:	d0f5      	beq.n	8010cd0 <__any_on+0x2a>
 8010ce4:	2001      	movs	r0, #1
 8010ce6:	e7f6      	b.n	8010cd6 <__any_on+0x30>

08010ce8 <sulp>:
 8010ce8:	b570      	push	{r4, r5, r6, lr}
 8010cea:	4604      	mov	r4, r0
 8010cec:	460d      	mov	r5, r1
 8010cee:	ec45 4b10 	vmov	d0, r4, r5
 8010cf2:	4616      	mov	r6, r2
 8010cf4:	f7ff feba 	bl	8010a6c <__ulp>
 8010cf8:	ec51 0b10 	vmov	r0, r1, d0
 8010cfc:	b17e      	cbz	r6, 8010d1e <sulp+0x36>
 8010cfe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010d02:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	dd09      	ble.n	8010d1e <sulp+0x36>
 8010d0a:	051b      	lsls	r3, r3, #20
 8010d0c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010d10:	2400      	movs	r4, #0
 8010d12:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010d16:	4622      	mov	r2, r4
 8010d18:	462b      	mov	r3, r5
 8010d1a:	f7ef fc7d 	bl	8000618 <__aeabi_dmul>
 8010d1e:	ec41 0b10 	vmov	d0, r0, r1
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	0000      	movs	r0, r0
	...

08010d28 <_strtod_l>:
 8010d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2c:	b09f      	sub	sp, #124	@ 0x7c
 8010d2e:	460c      	mov	r4, r1
 8010d30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010d32:	2200      	movs	r2, #0
 8010d34:	921a      	str	r2, [sp, #104]	@ 0x68
 8010d36:	9005      	str	r0, [sp, #20]
 8010d38:	f04f 0a00 	mov.w	sl, #0
 8010d3c:	f04f 0b00 	mov.w	fp, #0
 8010d40:	460a      	mov	r2, r1
 8010d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d44:	7811      	ldrb	r1, [r2, #0]
 8010d46:	292b      	cmp	r1, #43	@ 0x2b
 8010d48:	d04a      	beq.n	8010de0 <_strtod_l+0xb8>
 8010d4a:	d838      	bhi.n	8010dbe <_strtod_l+0x96>
 8010d4c:	290d      	cmp	r1, #13
 8010d4e:	d832      	bhi.n	8010db6 <_strtod_l+0x8e>
 8010d50:	2908      	cmp	r1, #8
 8010d52:	d832      	bhi.n	8010dba <_strtod_l+0x92>
 8010d54:	2900      	cmp	r1, #0
 8010d56:	d03b      	beq.n	8010dd0 <_strtod_l+0xa8>
 8010d58:	2200      	movs	r2, #0
 8010d5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010d5e:	782a      	ldrb	r2, [r5, #0]
 8010d60:	2a30      	cmp	r2, #48	@ 0x30
 8010d62:	f040 80b2 	bne.w	8010eca <_strtod_l+0x1a2>
 8010d66:	786a      	ldrb	r2, [r5, #1]
 8010d68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010d6c:	2a58      	cmp	r2, #88	@ 0x58
 8010d6e:	d16e      	bne.n	8010e4e <_strtod_l+0x126>
 8010d70:	9302      	str	r3, [sp, #8]
 8010d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d74:	9301      	str	r3, [sp, #4]
 8010d76:	ab1a      	add	r3, sp, #104	@ 0x68
 8010d78:	9300      	str	r3, [sp, #0]
 8010d7a:	4a8f      	ldr	r2, [pc, #572]	@ (8010fb8 <_strtod_l+0x290>)
 8010d7c:	9805      	ldr	r0, [sp, #20]
 8010d7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010d80:	a919      	add	r1, sp, #100	@ 0x64
 8010d82:	f001 f917 	bl	8011fb4 <__gethex>
 8010d86:	f010 060f 	ands.w	r6, r0, #15
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	d005      	beq.n	8010d9a <_strtod_l+0x72>
 8010d8e:	2e06      	cmp	r6, #6
 8010d90:	d128      	bne.n	8010de4 <_strtod_l+0xbc>
 8010d92:	3501      	adds	r5, #1
 8010d94:	2300      	movs	r3, #0
 8010d96:	9519      	str	r5, [sp, #100]	@ 0x64
 8010d98:	930e      	str	r3, [sp, #56]	@ 0x38
 8010d9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f040 858e 	bne.w	80118be <_strtod_l+0xb96>
 8010da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010da4:	b1cb      	cbz	r3, 8010dda <_strtod_l+0xb2>
 8010da6:	4652      	mov	r2, sl
 8010da8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010dac:	ec43 2b10 	vmov	d0, r2, r3
 8010db0:	b01f      	add	sp, #124	@ 0x7c
 8010db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db6:	2920      	cmp	r1, #32
 8010db8:	d1ce      	bne.n	8010d58 <_strtod_l+0x30>
 8010dba:	3201      	adds	r2, #1
 8010dbc:	e7c1      	b.n	8010d42 <_strtod_l+0x1a>
 8010dbe:	292d      	cmp	r1, #45	@ 0x2d
 8010dc0:	d1ca      	bne.n	8010d58 <_strtod_l+0x30>
 8010dc2:	2101      	movs	r1, #1
 8010dc4:	910e      	str	r1, [sp, #56]	@ 0x38
 8010dc6:	1c51      	adds	r1, r2, #1
 8010dc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8010dca:	7852      	ldrb	r2, [r2, #1]
 8010dcc:	2a00      	cmp	r2, #0
 8010dce:	d1c5      	bne.n	8010d5c <_strtod_l+0x34>
 8010dd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010dd2:	9419      	str	r4, [sp, #100]	@ 0x64
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f040 8570 	bne.w	80118ba <_strtod_l+0xb92>
 8010dda:	4652      	mov	r2, sl
 8010ddc:	465b      	mov	r3, fp
 8010dde:	e7e5      	b.n	8010dac <_strtod_l+0x84>
 8010de0:	2100      	movs	r1, #0
 8010de2:	e7ef      	b.n	8010dc4 <_strtod_l+0x9c>
 8010de4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010de6:	b13a      	cbz	r2, 8010df8 <_strtod_l+0xd0>
 8010de8:	2135      	movs	r1, #53	@ 0x35
 8010dea:	a81c      	add	r0, sp, #112	@ 0x70
 8010dec:	f7ff ff38 	bl	8010c60 <__copybits>
 8010df0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010df2:	9805      	ldr	r0, [sp, #20]
 8010df4:	f7ff fb0e 	bl	8010414 <_Bfree>
 8010df8:	3e01      	subs	r6, #1
 8010dfa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010dfc:	2e04      	cmp	r6, #4
 8010dfe:	d806      	bhi.n	8010e0e <_strtod_l+0xe6>
 8010e00:	e8df f006 	tbb	[pc, r6]
 8010e04:	201d0314 	.word	0x201d0314
 8010e08:	14          	.byte	0x14
 8010e09:	00          	.byte	0x00
 8010e0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010e0e:	05e1      	lsls	r1, r4, #23
 8010e10:	bf48      	it	mi
 8010e12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010e16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010e1a:	0d1b      	lsrs	r3, r3, #20
 8010e1c:	051b      	lsls	r3, r3, #20
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d1bb      	bne.n	8010d9a <_strtod_l+0x72>
 8010e22:	f7fe fb7b 	bl	800f51c <__errno>
 8010e26:	2322      	movs	r3, #34	@ 0x22
 8010e28:	6003      	str	r3, [r0, #0]
 8010e2a:	e7b6      	b.n	8010d9a <_strtod_l+0x72>
 8010e2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010e30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010e34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010e38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010e3c:	e7e7      	b.n	8010e0e <_strtod_l+0xe6>
 8010e3e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010fc0 <_strtod_l+0x298>
 8010e42:	e7e4      	b.n	8010e0e <_strtod_l+0xe6>
 8010e44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010e48:	f04f 3aff 	mov.w	sl, #4294967295
 8010e4c:	e7df      	b.n	8010e0e <_strtod_l+0xe6>
 8010e4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e50:	1c5a      	adds	r2, r3, #1
 8010e52:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e54:	785b      	ldrb	r3, [r3, #1]
 8010e56:	2b30      	cmp	r3, #48	@ 0x30
 8010e58:	d0f9      	beq.n	8010e4e <_strtod_l+0x126>
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d09d      	beq.n	8010d9a <_strtod_l+0x72>
 8010e5e:	2301      	movs	r3, #1
 8010e60:	2700      	movs	r7, #0
 8010e62:	9308      	str	r3, [sp, #32]
 8010e64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e66:	930c      	str	r3, [sp, #48]	@ 0x30
 8010e68:	970b      	str	r7, [sp, #44]	@ 0x2c
 8010e6a:	46b9      	mov	r9, r7
 8010e6c:	220a      	movs	r2, #10
 8010e6e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010e70:	7805      	ldrb	r5, [r0, #0]
 8010e72:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010e76:	b2d9      	uxtb	r1, r3
 8010e78:	2909      	cmp	r1, #9
 8010e7a:	d928      	bls.n	8010ece <_strtod_l+0x1a6>
 8010e7c:	494f      	ldr	r1, [pc, #316]	@ (8010fbc <_strtod_l+0x294>)
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f7fd fd55 	bl	800e92e <strncmp>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	d032      	beq.n	8010eee <_strtod_l+0x1c6>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	462a      	mov	r2, r5
 8010e8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010e8e:	464d      	mov	r5, r9
 8010e90:	4603      	mov	r3, r0
 8010e92:	2a65      	cmp	r2, #101	@ 0x65
 8010e94:	d001      	beq.n	8010e9a <_strtod_l+0x172>
 8010e96:	2a45      	cmp	r2, #69	@ 0x45
 8010e98:	d114      	bne.n	8010ec4 <_strtod_l+0x19c>
 8010e9a:	b91d      	cbnz	r5, 8010ea4 <_strtod_l+0x17c>
 8010e9c:	9a08      	ldr	r2, [sp, #32]
 8010e9e:	4302      	orrs	r2, r0
 8010ea0:	d096      	beq.n	8010dd0 <_strtod_l+0xa8>
 8010ea2:	2500      	movs	r5, #0
 8010ea4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010ea6:	1c62      	adds	r2, r4, #1
 8010ea8:	9219      	str	r2, [sp, #100]	@ 0x64
 8010eaa:	7862      	ldrb	r2, [r4, #1]
 8010eac:	2a2b      	cmp	r2, #43	@ 0x2b
 8010eae:	d07a      	beq.n	8010fa6 <_strtod_l+0x27e>
 8010eb0:	2a2d      	cmp	r2, #45	@ 0x2d
 8010eb2:	d07e      	beq.n	8010fb2 <_strtod_l+0x28a>
 8010eb4:	f04f 0c00 	mov.w	ip, #0
 8010eb8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010ebc:	2909      	cmp	r1, #9
 8010ebe:	f240 8085 	bls.w	8010fcc <_strtod_l+0x2a4>
 8010ec2:	9419      	str	r4, [sp, #100]	@ 0x64
 8010ec4:	f04f 0800 	mov.w	r8, #0
 8010ec8:	e0a5      	b.n	8011016 <_strtod_l+0x2ee>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	e7c8      	b.n	8010e60 <_strtod_l+0x138>
 8010ece:	f1b9 0f08 	cmp.w	r9, #8
 8010ed2:	bfd8      	it	le
 8010ed4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010ed6:	f100 0001 	add.w	r0, r0, #1
 8010eda:	bfda      	itte	le
 8010edc:	fb02 3301 	mlale	r3, r2, r1, r3
 8010ee0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010ee2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010ee6:	f109 0901 	add.w	r9, r9, #1
 8010eea:	9019      	str	r0, [sp, #100]	@ 0x64
 8010eec:	e7bf      	b.n	8010e6e <_strtod_l+0x146>
 8010eee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ef0:	1c5a      	adds	r2, r3, #1
 8010ef2:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ef4:	785a      	ldrb	r2, [r3, #1]
 8010ef6:	f1b9 0f00 	cmp.w	r9, #0
 8010efa:	d03b      	beq.n	8010f74 <_strtod_l+0x24c>
 8010efc:	900a      	str	r0, [sp, #40]	@ 0x28
 8010efe:	464d      	mov	r5, r9
 8010f00:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010f04:	2b09      	cmp	r3, #9
 8010f06:	d912      	bls.n	8010f2e <_strtod_l+0x206>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	e7c2      	b.n	8010e92 <_strtod_l+0x16a>
 8010f0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f0e:	1c5a      	adds	r2, r3, #1
 8010f10:	9219      	str	r2, [sp, #100]	@ 0x64
 8010f12:	785a      	ldrb	r2, [r3, #1]
 8010f14:	3001      	adds	r0, #1
 8010f16:	2a30      	cmp	r2, #48	@ 0x30
 8010f18:	d0f8      	beq.n	8010f0c <_strtod_l+0x1e4>
 8010f1a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010f1e:	2b08      	cmp	r3, #8
 8010f20:	f200 84d2 	bhi.w	80118c8 <_strtod_l+0xba0>
 8010f24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f26:	900a      	str	r0, [sp, #40]	@ 0x28
 8010f28:	2000      	movs	r0, #0
 8010f2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010f2c:	4605      	mov	r5, r0
 8010f2e:	3a30      	subs	r2, #48	@ 0x30
 8010f30:	f100 0301 	add.w	r3, r0, #1
 8010f34:	d018      	beq.n	8010f68 <_strtod_l+0x240>
 8010f36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f38:	4419      	add	r1, r3
 8010f3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8010f3c:	462e      	mov	r6, r5
 8010f3e:	f04f 0e0a 	mov.w	lr, #10
 8010f42:	1c71      	adds	r1, r6, #1
 8010f44:	eba1 0c05 	sub.w	ip, r1, r5
 8010f48:	4563      	cmp	r3, ip
 8010f4a:	dc15      	bgt.n	8010f78 <_strtod_l+0x250>
 8010f4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010f50:	182b      	adds	r3, r5, r0
 8010f52:	2b08      	cmp	r3, #8
 8010f54:	f105 0501 	add.w	r5, r5, #1
 8010f58:	4405      	add	r5, r0
 8010f5a:	dc1a      	bgt.n	8010f92 <_strtod_l+0x26a>
 8010f5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010f5e:	230a      	movs	r3, #10
 8010f60:	fb03 2301 	mla	r3, r3, r1, r2
 8010f64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f66:	2300      	movs	r3, #0
 8010f68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f6a:	1c51      	adds	r1, r2, #1
 8010f6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010f6e:	7852      	ldrb	r2, [r2, #1]
 8010f70:	4618      	mov	r0, r3
 8010f72:	e7c5      	b.n	8010f00 <_strtod_l+0x1d8>
 8010f74:	4648      	mov	r0, r9
 8010f76:	e7ce      	b.n	8010f16 <_strtod_l+0x1ee>
 8010f78:	2e08      	cmp	r6, #8
 8010f7a:	dc05      	bgt.n	8010f88 <_strtod_l+0x260>
 8010f7c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010f7e:	fb0e f606 	mul.w	r6, lr, r6
 8010f82:	960b      	str	r6, [sp, #44]	@ 0x2c
 8010f84:	460e      	mov	r6, r1
 8010f86:	e7dc      	b.n	8010f42 <_strtod_l+0x21a>
 8010f88:	2910      	cmp	r1, #16
 8010f8a:	bfd8      	it	le
 8010f8c:	fb0e f707 	mulle.w	r7, lr, r7
 8010f90:	e7f8      	b.n	8010f84 <_strtod_l+0x25c>
 8010f92:	2b0f      	cmp	r3, #15
 8010f94:	bfdc      	itt	le
 8010f96:	230a      	movle	r3, #10
 8010f98:	fb03 2707 	mlale	r7, r3, r7, r2
 8010f9c:	e7e3      	b.n	8010f66 <_strtod_l+0x23e>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e77a      	b.n	8010e9c <_strtod_l+0x174>
 8010fa6:	f04f 0c00 	mov.w	ip, #0
 8010faa:	1ca2      	adds	r2, r4, #2
 8010fac:	9219      	str	r2, [sp, #100]	@ 0x64
 8010fae:	78a2      	ldrb	r2, [r4, #2]
 8010fb0:	e782      	b.n	8010eb8 <_strtod_l+0x190>
 8010fb2:	f04f 0c01 	mov.w	ip, #1
 8010fb6:	e7f8      	b.n	8010faa <_strtod_l+0x282>
 8010fb8:	0803e4b4 	.word	0x0803e4b4
 8010fbc:	0803e26c 	.word	0x0803e26c
 8010fc0:	7ff00000 	.word	0x7ff00000
 8010fc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010fc6:	1c51      	adds	r1, r2, #1
 8010fc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8010fca:	7852      	ldrb	r2, [r2, #1]
 8010fcc:	2a30      	cmp	r2, #48	@ 0x30
 8010fce:	d0f9      	beq.n	8010fc4 <_strtod_l+0x29c>
 8010fd0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010fd4:	2908      	cmp	r1, #8
 8010fd6:	f63f af75 	bhi.w	8010ec4 <_strtod_l+0x19c>
 8010fda:	3a30      	subs	r2, #48	@ 0x30
 8010fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8010fde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010fe0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010fe2:	f04f 080a 	mov.w	r8, #10
 8010fe6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010fe8:	1c56      	adds	r6, r2, #1
 8010fea:	9619      	str	r6, [sp, #100]	@ 0x64
 8010fec:	7852      	ldrb	r2, [r2, #1]
 8010fee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010ff2:	f1be 0f09 	cmp.w	lr, #9
 8010ff6:	d939      	bls.n	801106c <_strtod_l+0x344>
 8010ff8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010ffa:	1a76      	subs	r6, r6, r1
 8010ffc:	2e08      	cmp	r6, #8
 8010ffe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011002:	dc03      	bgt.n	801100c <_strtod_l+0x2e4>
 8011004:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011006:	4588      	cmp	r8, r1
 8011008:	bfa8      	it	ge
 801100a:	4688      	movge	r8, r1
 801100c:	f1bc 0f00 	cmp.w	ip, #0
 8011010:	d001      	beq.n	8011016 <_strtod_l+0x2ee>
 8011012:	f1c8 0800 	rsb	r8, r8, #0
 8011016:	2d00      	cmp	r5, #0
 8011018:	d14e      	bne.n	80110b8 <_strtod_l+0x390>
 801101a:	9908      	ldr	r1, [sp, #32]
 801101c:	4308      	orrs	r0, r1
 801101e:	f47f aebc 	bne.w	8010d9a <_strtod_l+0x72>
 8011022:	2b00      	cmp	r3, #0
 8011024:	f47f aed4 	bne.w	8010dd0 <_strtod_l+0xa8>
 8011028:	2a69      	cmp	r2, #105	@ 0x69
 801102a:	d028      	beq.n	801107e <_strtod_l+0x356>
 801102c:	dc25      	bgt.n	801107a <_strtod_l+0x352>
 801102e:	2a49      	cmp	r2, #73	@ 0x49
 8011030:	d025      	beq.n	801107e <_strtod_l+0x356>
 8011032:	2a4e      	cmp	r2, #78	@ 0x4e
 8011034:	f47f aecc 	bne.w	8010dd0 <_strtod_l+0xa8>
 8011038:	499a      	ldr	r1, [pc, #616]	@ (80112a4 <_strtod_l+0x57c>)
 801103a:	a819      	add	r0, sp, #100	@ 0x64
 801103c:	f001 f9dc 	bl	80123f8 <__match>
 8011040:	2800      	cmp	r0, #0
 8011042:	f43f aec5 	beq.w	8010dd0 <_strtod_l+0xa8>
 8011046:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	2b28      	cmp	r3, #40	@ 0x28
 801104c:	d12e      	bne.n	80110ac <_strtod_l+0x384>
 801104e:	4996      	ldr	r1, [pc, #600]	@ (80112a8 <_strtod_l+0x580>)
 8011050:	aa1c      	add	r2, sp, #112	@ 0x70
 8011052:	a819      	add	r0, sp, #100	@ 0x64
 8011054:	f001 f9e4 	bl	8012420 <__hexnan>
 8011058:	2805      	cmp	r0, #5
 801105a:	d127      	bne.n	80110ac <_strtod_l+0x384>
 801105c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801105e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011062:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011066:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801106a:	e696      	b.n	8010d9a <_strtod_l+0x72>
 801106c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801106e:	fb08 2101 	mla	r1, r8, r1, r2
 8011072:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011076:	9209      	str	r2, [sp, #36]	@ 0x24
 8011078:	e7b5      	b.n	8010fe6 <_strtod_l+0x2be>
 801107a:	2a6e      	cmp	r2, #110	@ 0x6e
 801107c:	e7da      	b.n	8011034 <_strtod_l+0x30c>
 801107e:	498b      	ldr	r1, [pc, #556]	@ (80112ac <_strtod_l+0x584>)
 8011080:	a819      	add	r0, sp, #100	@ 0x64
 8011082:	f001 f9b9 	bl	80123f8 <__match>
 8011086:	2800      	cmp	r0, #0
 8011088:	f43f aea2 	beq.w	8010dd0 <_strtod_l+0xa8>
 801108c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801108e:	4988      	ldr	r1, [pc, #544]	@ (80112b0 <_strtod_l+0x588>)
 8011090:	3b01      	subs	r3, #1
 8011092:	a819      	add	r0, sp, #100	@ 0x64
 8011094:	9319      	str	r3, [sp, #100]	@ 0x64
 8011096:	f001 f9af 	bl	80123f8 <__match>
 801109a:	b910      	cbnz	r0, 80110a2 <_strtod_l+0x37a>
 801109c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801109e:	3301      	adds	r3, #1
 80110a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80110a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80112c0 <_strtod_l+0x598>
 80110a6:	f04f 0a00 	mov.w	sl, #0
 80110aa:	e676      	b.n	8010d9a <_strtod_l+0x72>
 80110ac:	4881      	ldr	r0, [pc, #516]	@ (80112b4 <_strtod_l+0x58c>)
 80110ae:	f000 fed3 	bl	8011e58 <nan>
 80110b2:	ec5b ab10 	vmov	sl, fp, d0
 80110b6:	e670      	b.n	8010d9a <_strtod_l+0x72>
 80110b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80110bc:	eba8 0303 	sub.w	r3, r8, r3
 80110c0:	f1b9 0f00 	cmp.w	r9, #0
 80110c4:	bf08      	it	eq
 80110c6:	46a9      	moveq	r9, r5
 80110c8:	2d10      	cmp	r5, #16
 80110ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80110cc:	462c      	mov	r4, r5
 80110ce:	bfa8      	it	ge
 80110d0:	2410      	movge	r4, #16
 80110d2:	f7ef fa27 	bl	8000524 <__aeabi_ui2d>
 80110d6:	2d09      	cmp	r5, #9
 80110d8:	4682      	mov	sl, r0
 80110da:	468b      	mov	fp, r1
 80110dc:	dc13      	bgt.n	8011106 <_strtod_l+0x3de>
 80110de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	f43f ae5a 	beq.w	8010d9a <_strtod_l+0x72>
 80110e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110e8:	dd78      	ble.n	80111dc <_strtod_l+0x4b4>
 80110ea:	2b16      	cmp	r3, #22
 80110ec:	dc5f      	bgt.n	80111ae <_strtod_l+0x486>
 80110ee:	4972      	ldr	r1, [pc, #456]	@ (80112b8 <_strtod_l+0x590>)
 80110f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80110f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110f8:	4652      	mov	r2, sl
 80110fa:	465b      	mov	r3, fp
 80110fc:	f7ef fa8c 	bl	8000618 <__aeabi_dmul>
 8011100:	4682      	mov	sl, r0
 8011102:	468b      	mov	fp, r1
 8011104:	e649      	b.n	8010d9a <_strtod_l+0x72>
 8011106:	4b6c      	ldr	r3, [pc, #432]	@ (80112b8 <_strtod_l+0x590>)
 8011108:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801110c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011110:	f7ef fa82 	bl	8000618 <__aeabi_dmul>
 8011114:	4682      	mov	sl, r0
 8011116:	4638      	mov	r0, r7
 8011118:	468b      	mov	fp, r1
 801111a:	f7ef fa03 	bl	8000524 <__aeabi_ui2d>
 801111e:	4602      	mov	r2, r0
 8011120:	460b      	mov	r3, r1
 8011122:	4650      	mov	r0, sl
 8011124:	4659      	mov	r1, fp
 8011126:	f7ef f8c1 	bl	80002ac <__adddf3>
 801112a:	2d0f      	cmp	r5, #15
 801112c:	4682      	mov	sl, r0
 801112e:	468b      	mov	fp, r1
 8011130:	ddd5      	ble.n	80110de <_strtod_l+0x3b6>
 8011132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011134:	1b2c      	subs	r4, r5, r4
 8011136:	441c      	add	r4, r3
 8011138:	2c00      	cmp	r4, #0
 801113a:	f340 8093 	ble.w	8011264 <_strtod_l+0x53c>
 801113e:	f014 030f 	ands.w	r3, r4, #15
 8011142:	d00a      	beq.n	801115a <_strtod_l+0x432>
 8011144:	495c      	ldr	r1, [pc, #368]	@ (80112b8 <_strtod_l+0x590>)
 8011146:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801114a:	4652      	mov	r2, sl
 801114c:	465b      	mov	r3, fp
 801114e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011152:	f7ef fa61 	bl	8000618 <__aeabi_dmul>
 8011156:	4682      	mov	sl, r0
 8011158:	468b      	mov	fp, r1
 801115a:	f034 040f 	bics.w	r4, r4, #15
 801115e:	d073      	beq.n	8011248 <_strtod_l+0x520>
 8011160:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011164:	dd49      	ble.n	80111fa <_strtod_l+0x4d2>
 8011166:	2400      	movs	r4, #0
 8011168:	46a0      	mov	r8, r4
 801116a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801116c:	46a1      	mov	r9, r4
 801116e:	9a05      	ldr	r2, [sp, #20]
 8011170:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80112c0 <_strtod_l+0x598>
 8011174:	2322      	movs	r3, #34	@ 0x22
 8011176:	6013      	str	r3, [r2, #0]
 8011178:	f04f 0a00 	mov.w	sl, #0
 801117c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801117e:	2b00      	cmp	r3, #0
 8011180:	f43f ae0b 	beq.w	8010d9a <_strtod_l+0x72>
 8011184:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011186:	9805      	ldr	r0, [sp, #20]
 8011188:	f7ff f944 	bl	8010414 <_Bfree>
 801118c:	9805      	ldr	r0, [sp, #20]
 801118e:	4649      	mov	r1, r9
 8011190:	f7ff f940 	bl	8010414 <_Bfree>
 8011194:	9805      	ldr	r0, [sp, #20]
 8011196:	4641      	mov	r1, r8
 8011198:	f7ff f93c 	bl	8010414 <_Bfree>
 801119c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801119e:	9805      	ldr	r0, [sp, #20]
 80111a0:	f7ff f938 	bl	8010414 <_Bfree>
 80111a4:	9805      	ldr	r0, [sp, #20]
 80111a6:	4621      	mov	r1, r4
 80111a8:	f7ff f934 	bl	8010414 <_Bfree>
 80111ac:	e5f5      	b.n	8010d9a <_strtod_l+0x72>
 80111ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80111b4:	4293      	cmp	r3, r2
 80111b6:	dbbc      	blt.n	8011132 <_strtod_l+0x40a>
 80111b8:	4c3f      	ldr	r4, [pc, #252]	@ (80112b8 <_strtod_l+0x590>)
 80111ba:	f1c5 050f 	rsb	r5, r5, #15
 80111be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80111c2:	4652      	mov	r2, sl
 80111c4:	465b      	mov	r3, fp
 80111c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ca:	f7ef fa25 	bl	8000618 <__aeabi_dmul>
 80111ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111d0:	1b5d      	subs	r5, r3, r5
 80111d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80111d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80111da:	e78f      	b.n	80110fc <_strtod_l+0x3d4>
 80111dc:	3316      	adds	r3, #22
 80111de:	dba8      	blt.n	8011132 <_strtod_l+0x40a>
 80111e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111e2:	eba3 0808 	sub.w	r8, r3, r8
 80111e6:	4b34      	ldr	r3, [pc, #208]	@ (80112b8 <_strtod_l+0x590>)
 80111e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80111ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 80111f0:	4650      	mov	r0, sl
 80111f2:	4659      	mov	r1, fp
 80111f4:	f7ef fb3a 	bl	800086c <__aeabi_ddiv>
 80111f8:	e782      	b.n	8011100 <_strtod_l+0x3d8>
 80111fa:	2300      	movs	r3, #0
 80111fc:	4f2f      	ldr	r7, [pc, #188]	@ (80112bc <_strtod_l+0x594>)
 80111fe:	1124      	asrs	r4, r4, #4
 8011200:	4650      	mov	r0, sl
 8011202:	4659      	mov	r1, fp
 8011204:	461e      	mov	r6, r3
 8011206:	2c01      	cmp	r4, #1
 8011208:	dc21      	bgt.n	801124e <_strtod_l+0x526>
 801120a:	b10b      	cbz	r3, 8011210 <_strtod_l+0x4e8>
 801120c:	4682      	mov	sl, r0
 801120e:	468b      	mov	fp, r1
 8011210:	492a      	ldr	r1, [pc, #168]	@ (80112bc <_strtod_l+0x594>)
 8011212:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011216:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801121a:	4652      	mov	r2, sl
 801121c:	465b      	mov	r3, fp
 801121e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011222:	f7ef f9f9 	bl	8000618 <__aeabi_dmul>
 8011226:	4b26      	ldr	r3, [pc, #152]	@ (80112c0 <_strtod_l+0x598>)
 8011228:	460a      	mov	r2, r1
 801122a:	400b      	ands	r3, r1
 801122c:	4925      	ldr	r1, [pc, #148]	@ (80112c4 <_strtod_l+0x59c>)
 801122e:	428b      	cmp	r3, r1
 8011230:	4682      	mov	sl, r0
 8011232:	d898      	bhi.n	8011166 <_strtod_l+0x43e>
 8011234:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011238:	428b      	cmp	r3, r1
 801123a:	bf86      	itte	hi
 801123c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80112c8 <_strtod_l+0x5a0>
 8011240:	f04f 3aff 	movhi.w	sl, #4294967295
 8011244:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011248:	2300      	movs	r3, #0
 801124a:	9308      	str	r3, [sp, #32]
 801124c:	e076      	b.n	801133c <_strtod_l+0x614>
 801124e:	07e2      	lsls	r2, r4, #31
 8011250:	d504      	bpl.n	801125c <_strtod_l+0x534>
 8011252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011256:	f7ef f9df 	bl	8000618 <__aeabi_dmul>
 801125a:	2301      	movs	r3, #1
 801125c:	3601      	adds	r6, #1
 801125e:	1064      	asrs	r4, r4, #1
 8011260:	3708      	adds	r7, #8
 8011262:	e7d0      	b.n	8011206 <_strtod_l+0x4de>
 8011264:	d0f0      	beq.n	8011248 <_strtod_l+0x520>
 8011266:	4264      	negs	r4, r4
 8011268:	f014 020f 	ands.w	r2, r4, #15
 801126c:	d00a      	beq.n	8011284 <_strtod_l+0x55c>
 801126e:	4b12      	ldr	r3, [pc, #72]	@ (80112b8 <_strtod_l+0x590>)
 8011270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011274:	4650      	mov	r0, sl
 8011276:	4659      	mov	r1, fp
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	f7ef faf6 	bl	800086c <__aeabi_ddiv>
 8011280:	4682      	mov	sl, r0
 8011282:	468b      	mov	fp, r1
 8011284:	1124      	asrs	r4, r4, #4
 8011286:	d0df      	beq.n	8011248 <_strtod_l+0x520>
 8011288:	2c1f      	cmp	r4, #31
 801128a:	dd1f      	ble.n	80112cc <_strtod_l+0x5a4>
 801128c:	2400      	movs	r4, #0
 801128e:	46a0      	mov	r8, r4
 8011290:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011292:	46a1      	mov	r9, r4
 8011294:	9a05      	ldr	r2, [sp, #20]
 8011296:	2322      	movs	r3, #34	@ 0x22
 8011298:	f04f 0a00 	mov.w	sl, #0
 801129c:	f04f 0b00 	mov.w	fp, #0
 80112a0:	6013      	str	r3, [r2, #0]
 80112a2:	e76b      	b.n	801117c <_strtod_l+0x454>
 80112a4:	0803e10e 	.word	0x0803e10e
 80112a8:	0803e4a0 	.word	0x0803e4a0
 80112ac:	0803e106 	.word	0x0803e106
 80112b0:	0803e189 	.word	0x0803e189
 80112b4:	0803e2c2 	.word	0x0803e2c2
 80112b8:	0803e3d8 	.word	0x0803e3d8
 80112bc:	0803e3b0 	.word	0x0803e3b0
 80112c0:	7ff00000 	.word	0x7ff00000
 80112c4:	7ca00000 	.word	0x7ca00000
 80112c8:	7fefffff 	.word	0x7fefffff
 80112cc:	f014 0310 	ands.w	r3, r4, #16
 80112d0:	bf18      	it	ne
 80112d2:	236a      	movne	r3, #106	@ 0x6a
 80112d4:	4ea9      	ldr	r6, [pc, #676]	@ (801157c <_strtod_l+0x854>)
 80112d6:	9308      	str	r3, [sp, #32]
 80112d8:	4650      	mov	r0, sl
 80112da:	4659      	mov	r1, fp
 80112dc:	2300      	movs	r3, #0
 80112de:	07e7      	lsls	r7, r4, #31
 80112e0:	d504      	bpl.n	80112ec <_strtod_l+0x5c4>
 80112e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80112e6:	f7ef f997 	bl	8000618 <__aeabi_dmul>
 80112ea:	2301      	movs	r3, #1
 80112ec:	1064      	asrs	r4, r4, #1
 80112ee:	f106 0608 	add.w	r6, r6, #8
 80112f2:	d1f4      	bne.n	80112de <_strtod_l+0x5b6>
 80112f4:	b10b      	cbz	r3, 80112fa <_strtod_l+0x5d2>
 80112f6:	4682      	mov	sl, r0
 80112f8:	468b      	mov	fp, r1
 80112fa:	9b08      	ldr	r3, [sp, #32]
 80112fc:	b1b3      	cbz	r3, 801132c <_strtod_l+0x604>
 80112fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011302:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011306:	2b00      	cmp	r3, #0
 8011308:	4659      	mov	r1, fp
 801130a:	dd0f      	ble.n	801132c <_strtod_l+0x604>
 801130c:	2b1f      	cmp	r3, #31
 801130e:	dd56      	ble.n	80113be <_strtod_l+0x696>
 8011310:	2b34      	cmp	r3, #52	@ 0x34
 8011312:	bfde      	ittt	le
 8011314:	f04f 33ff 	movle.w	r3, #4294967295
 8011318:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801131c:	4093      	lslle	r3, r2
 801131e:	f04f 0a00 	mov.w	sl, #0
 8011322:	bfcc      	ite	gt
 8011324:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011328:	ea03 0b01 	andle.w	fp, r3, r1
 801132c:	2200      	movs	r2, #0
 801132e:	2300      	movs	r3, #0
 8011330:	4650      	mov	r0, sl
 8011332:	4659      	mov	r1, fp
 8011334:	f7ef fbd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8011338:	2800      	cmp	r0, #0
 801133a:	d1a7      	bne.n	801128c <_strtod_l+0x564>
 801133c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801133e:	9300      	str	r3, [sp, #0]
 8011340:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011342:	9805      	ldr	r0, [sp, #20]
 8011344:	462b      	mov	r3, r5
 8011346:	464a      	mov	r2, r9
 8011348:	f7ff f8cc 	bl	80104e4 <__s2b>
 801134c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801134e:	2800      	cmp	r0, #0
 8011350:	f43f af09 	beq.w	8011166 <_strtod_l+0x43e>
 8011354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011358:	2a00      	cmp	r2, #0
 801135a:	eba3 0308 	sub.w	r3, r3, r8
 801135e:	bfa8      	it	ge
 8011360:	2300      	movge	r3, #0
 8011362:	9312      	str	r3, [sp, #72]	@ 0x48
 8011364:	2400      	movs	r4, #0
 8011366:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801136a:	9316      	str	r3, [sp, #88]	@ 0x58
 801136c:	46a0      	mov	r8, r4
 801136e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011370:	9805      	ldr	r0, [sp, #20]
 8011372:	6859      	ldr	r1, [r3, #4]
 8011374:	f7ff f80e 	bl	8010394 <_Balloc>
 8011378:	4681      	mov	r9, r0
 801137a:	2800      	cmp	r0, #0
 801137c:	f43f aef7 	beq.w	801116e <_strtod_l+0x446>
 8011380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011382:	691a      	ldr	r2, [r3, #16]
 8011384:	3202      	adds	r2, #2
 8011386:	f103 010c 	add.w	r1, r3, #12
 801138a:	0092      	lsls	r2, r2, #2
 801138c:	300c      	adds	r0, #12
 801138e:	f7fe f8fc 	bl	800f58a <memcpy>
 8011392:	ec4b ab10 	vmov	d0, sl, fp
 8011396:	9805      	ldr	r0, [sp, #20]
 8011398:	aa1c      	add	r2, sp, #112	@ 0x70
 801139a:	a91b      	add	r1, sp, #108	@ 0x6c
 801139c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80113a0:	f7ff fbd4 	bl	8010b4c <__d2b>
 80113a4:	901a      	str	r0, [sp, #104]	@ 0x68
 80113a6:	2800      	cmp	r0, #0
 80113a8:	f43f aee1 	beq.w	801116e <_strtod_l+0x446>
 80113ac:	9805      	ldr	r0, [sp, #20]
 80113ae:	2101      	movs	r1, #1
 80113b0:	f7ff f92e 	bl	8010610 <__i2b>
 80113b4:	4680      	mov	r8, r0
 80113b6:	b948      	cbnz	r0, 80113cc <_strtod_l+0x6a4>
 80113b8:	f04f 0800 	mov.w	r8, #0
 80113bc:	e6d7      	b.n	801116e <_strtod_l+0x446>
 80113be:	f04f 32ff 	mov.w	r2, #4294967295
 80113c2:	fa02 f303 	lsl.w	r3, r2, r3
 80113c6:	ea03 0a0a 	and.w	sl, r3, sl
 80113ca:	e7af      	b.n	801132c <_strtod_l+0x604>
 80113cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80113ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80113d0:	2d00      	cmp	r5, #0
 80113d2:	bfab      	itete	ge
 80113d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80113d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80113d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80113da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80113dc:	bfac      	ite	ge
 80113de:	18ef      	addge	r7, r5, r3
 80113e0:	1b5e      	sublt	r6, r3, r5
 80113e2:	9b08      	ldr	r3, [sp, #32]
 80113e4:	1aed      	subs	r5, r5, r3
 80113e6:	4415      	add	r5, r2
 80113e8:	4b65      	ldr	r3, [pc, #404]	@ (8011580 <_strtod_l+0x858>)
 80113ea:	3d01      	subs	r5, #1
 80113ec:	429d      	cmp	r5, r3
 80113ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80113f2:	da50      	bge.n	8011496 <_strtod_l+0x76e>
 80113f4:	1b5b      	subs	r3, r3, r5
 80113f6:	2b1f      	cmp	r3, #31
 80113f8:	eba2 0203 	sub.w	r2, r2, r3
 80113fc:	f04f 0101 	mov.w	r1, #1
 8011400:	dc3d      	bgt.n	801147e <_strtod_l+0x756>
 8011402:	fa01 f303 	lsl.w	r3, r1, r3
 8011406:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011408:	2300      	movs	r3, #0
 801140a:	9310      	str	r3, [sp, #64]	@ 0x40
 801140c:	18bd      	adds	r5, r7, r2
 801140e:	9b08      	ldr	r3, [sp, #32]
 8011410:	42af      	cmp	r7, r5
 8011412:	4416      	add	r6, r2
 8011414:	441e      	add	r6, r3
 8011416:	463b      	mov	r3, r7
 8011418:	bfa8      	it	ge
 801141a:	462b      	movge	r3, r5
 801141c:	42b3      	cmp	r3, r6
 801141e:	bfa8      	it	ge
 8011420:	4633      	movge	r3, r6
 8011422:	2b00      	cmp	r3, #0
 8011424:	bfc2      	ittt	gt
 8011426:	1aed      	subgt	r5, r5, r3
 8011428:	1af6      	subgt	r6, r6, r3
 801142a:	1aff      	subgt	r7, r7, r3
 801142c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801142e:	2b00      	cmp	r3, #0
 8011430:	dd16      	ble.n	8011460 <_strtod_l+0x738>
 8011432:	4641      	mov	r1, r8
 8011434:	9805      	ldr	r0, [sp, #20]
 8011436:	461a      	mov	r2, r3
 8011438:	f7ff f9a2 	bl	8010780 <__pow5mult>
 801143c:	4680      	mov	r8, r0
 801143e:	2800      	cmp	r0, #0
 8011440:	d0ba      	beq.n	80113b8 <_strtod_l+0x690>
 8011442:	4601      	mov	r1, r0
 8011444:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011446:	9805      	ldr	r0, [sp, #20]
 8011448:	f7ff f8f8 	bl	801063c <__multiply>
 801144c:	900a      	str	r0, [sp, #40]	@ 0x28
 801144e:	2800      	cmp	r0, #0
 8011450:	f43f ae8d 	beq.w	801116e <_strtod_l+0x446>
 8011454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011456:	9805      	ldr	r0, [sp, #20]
 8011458:	f7fe ffdc 	bl	8010414 <_Bfree>
 801145c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801145e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011460:	2d00      	cmp	r5, #0
 8011462:	dc1d      	bgt.n	80114a0 <_strtod_l+0x778>
 8011464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011466:	2b00      	cmp	r3, #0
 8011468:	dd23      	ble.n	80114b2 <_strtod_l+0x78a>
 801146a:	4649      	mov	r1, r9
 801146c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801146e:	9805      	ldr	r0, [sp, #20]
 8011470:	f7ff f986 	bl	8010780 <__pow5mult>
 8011474:	4681      	mov	r9, r0
 8011476:	b9e0      	cbnz	r0, 80114b2 <_strtod_l+0x78a>
 8011478:	f04f 0900 	mov.w	r9, #0
 801147c:	e677      	b.n	801116e <_strtod_l+0x446>
 801147e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011482:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011486:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801148a:	35e2      	adds	r5, #226	@ 0xe2
 801148c:	fa01 f305 	lsl.w	r3, r1, r5
 8011490:	9310      	str	r3, [sp, #64]	@ 0x40
 8011492:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011494:	e7ba      	b.n	801140c <_strtod_l+0x6e4>
 8011496:	2300      	movs	r3, #0
 8011498:	9310      	str	r3, [sp, #64]	@ 0x40
 801149a:	2301      	movs	r3, #1
 801149c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801149e:	e7b5      	b.n	801140c <_strtod_l+0x6e4>
 80114a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80114a2:	9805      	ldr	r0, [sp, #20]
 80114a4:	462a      	mov	r2, r5
 80114a6:	f7ff f9c5 	bl	8010834 <__lshift>
 80114aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d1d9      	bne.n	8011464 <_strtod_l+0x73c>
 80114b0:	e65d      	b.n	801116e <_strtod_l+0x446>
 80114b2:	2e00      	cmp	r6, #0
 80114b4:	dd07      	ble.n	80114c6 <_strtod_l+0x79e>
 80114b6:	4649      	mov	r1, r9
 80114b8:	9805      	ldr	r0, [sp, #20]
 80114ba:	4632      	mov	r2, r6
 80114bc:	f7ff f9ba 	bl	8010834 <__lshift>
 80114c0:	4681      	mov	r9, r0
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d0d8      	beq.n	8011478 <_strtod_l+0x750>
 80114c6:	2f00      	cmp	r7, #0
 80114c8:	dd08      	ble.n	80114dc <_strtod_l+0x7b4>
 80114ca:	4641      	mov	r1, r8
 80114cc:	9805      	ldr	r0, [sp, #20]
 80114ce:	463a      	mov	r2, r7
 80114d0:	f7ff f9b0 	bl	8010834 <__lshift>
 80114d4:	4680      	mov	r8, r0
 80114d6:	2800      	cmp	r0, #0
 80114d8:	f43f ae49 	beq.w	801116e <_strtod_l+0x446>
 80114dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80114de:	9805      	ldr	r0, [sp, #20]
 80114e0:	464a      	mov	r2, r9
 80114e2:	f7ff fa2f 	bl	8010944 <__mdiff>
 80114e6:	4604      	mov	r4, r0
 80114e8:	2800      	cmp	r0, #0
 80114ea:	f43f ae40 	beq.w	801116e <_strtod_l+0x446>
 80114ee:	68c3      	ldr	r3, [r0, #12]
 80114f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80114f2:	2300      	movs	r3, #0
 80114f4:	60c3      	str	r3, [r0, #12]
 80114f6:	4641      	mov	r1, r8
 80114f8:	f7ff fa08 	bl	801090c <__mcmp>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	da45      	bge.n	801158c <_strtod_l+0x864>
 8011500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011502:	ea53 030a 	orrs.w	r3, r3, sl
 8011506:	d16b      	bne.n	80115e0 <_strtod_l+0x8b8>
 8011508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801150c:	2b00      	cmp	r3, #0
 801150e:	d167      	bne.n	80115e0 <_strtod_l+0x8b8>
 8011510:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011514:	0d1b      	lsrs	r3, r3, #20
 8011516:	051b      	lsls	r3, r3, #20
 8011518:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801151c:	d960      	bls.n	80115e0 <_strtod_l+0x8b8>
 801151e:	6963      	ldr	r3, [r4, #20]
 8011520:	b913      	cbnz	r3, 8011528 <_strtod_l+0x800>
 8011522:	6923      	ldr	r3, [r4, #16]
 8011524:	2b01      	cmp	r3, #1
 8011526:	dd5b      	ble.n	80115e0 <_strtod_l+0x8b8>
 8011528:	4621      	mov	r1, r4
 801152a:	2201      	movs	r2, #1
 801152c:	9805      	ldr	r0, [sp, #20]
 801152e:	f7ff f981 	bl	8010834 <__lshift>
 8011532:	4641      	mov	r1, r8
 8011534:	4604      	mov	r4, r0
 8011536:	f7ff f9e9 	bl	801090c <__mcmp>
 801153a:	2800      	cmp	r0, #0
 801153c:	dd50      	ble.n	80115e0 <_strtod_l+0x8b8>
 801153e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011542:	9a08      	ldr	r2, [sp, #32]
 8011544:	0d1b      	lsrs	r3, r3, #20
 8011546:	051b      	lsls	r3, r3, #20
 8011548:	2a00      	cmp	r2, #0
 801154a:	d06a      	beq.n	8011622 <_strtod_l+0x8fa>
 801154c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011550:	d867      	bhi.n	8011622 <_strtod_l+0x8fa>
 8011552:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011556:	f67f ae9d 	bls.w	8011294 <_strtod_l+0x56c>
 801155a:	4b0a      	ldr	r3, [pc, #40]	@ (8011584 <_strtod_l+0x85c>)
 801155c:	4650      	mov	r0, sl
 801155e:	4659      	mov	r1, fp
 8011560:	2200      	movs	r2, #0
 8011562:	f7ef f859 	bl	8000618 <__aeabi_dmul>
 8011566:	4b08      	ldr	r3, [pc, #32]	@ (8011588 <_strtod_l+0x860>)
 8011568:	400b      	ands	r3, r1
 801156a:	4682      	mov	sl, r0
 801156c:	468b      	mov	fp, r1
 801156e:	2b00      	cmp	r3, #0
 8011570:	f47f ae08 	bne.w	8011184 <_strtod_l+0x45c>
 8011574:	9a05      	ldr	r2, [sp, #20]
 8011576:	2322      	movs	r3, #34	@ 0x22
 8011578:	6013      	str	r3, [r2, #0]
 801157a:	e603      	b.n	8011184 <_strtod_l+0x45c>
 801157c:	0803e4c8 	.word	0x0803e4c8
 8011580:	fffffc02 	.word	0xfffffc02
 8011584:	39500000 	.word	0x39500000
 8011588:	7ff00000 	.word	0x7ff00000
 801158c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011590:	d165      	bne.n	801165e <_strtod_l+0x936>
 8011592:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011594:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011598:	b35a      	cbz	r2, 80115f2 <_strtod_l+0x8ca>
 801159a:	4a9f      	ldr	r2, [pc, #636]	@ (8011818 <_strtod_l+0xaf0>)
 801159c:	4293      	cmp	r3, r2
 801159e:	d12b      	bne.n	80115f8 <_strtod_l+0x8d0>
 80115a0:	9b08      	ldr	r3, [sp, #32]
 80115a2:	4651      	mov	r1, sl
 80115a4:	b303      	cbz	r3, 80115e8 <_strtod_l+0x8c0>
 80115a6:	4b9d      	ldr	r3, [pc, #628]	@ (801181c <_strtod_l+0xaf4>)
 80115a8:	465a      	mov	r2, fp
 80115aa:	4013      	ands	r3, r2
 80115ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80115b0:	f04f 32ff 	mov.w	r2, #4294967295
 80115b4:	d81b      	bhi.n	80115ee <_strtod_l+0x8c6>
 80115b6:	0d1b      	lsrs	r3, r3, #20
 80115b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80115bc:	fa02 f303 	lsl.w	r3, r2, r3
 80115c0:	4299      	cmp	r1, r3
 80115c2:	d119      	bne.n	80115f8 <_strtod_l+0x8d0>
 80115c4:	4b96      	ldr	r3, [pc, #600]	@ (8011820 <_strtod_l+0xaf8>)
 80115c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d102      	bne.n	80115d2 <_strtod_l+0x8aa>
 80115cc:	3101      	adds	r1, #1
 80115ce:	f43f adce 	beq.w	801116e <_strtod_l+0x446>
 80115d2:	4b92      	ldr	r3, [pc, #584]	@ (801181c <_strtod_l+0xaf4>)
 80115d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115d6:	401a      	ands	r2, r3
 80115d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80115dc:	f04f 0a00 	mov.w	sl, #0
 80115e0:	9b08      	ldr	r3, [sp, #32]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d1b9      	bne.n	801155a <_strtod_l+0x832>
 80115e6:	e5cd      	b.n	8011184 <_strtod_l+0x45c>
 80115e8:	f04f 33ff 	mov.w	r3, #4294967295
 80115ec:	e7e8      	b.n	80115c0 <_strtod_l+0x898>
 80115ee:	4613      	mov	r3, r2
 80115f0:	e7e6      	b.n	80115c0 <_strtod_l+0x898>
 80115f2:	ea53 030a 	orrs.w	r3, r3, sl
 80115f6:	d0a2      	beq.n	801153e <_strtod_l+0x816>
 80115f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80115fa:	b1db      	cbz	r3, 8011634 <_strtod_l+0x90c>
 80115fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115fe:	4213      	tst	r3, r2
 8011600:	d0ee      	beq.n	80115e0 <_strtod_l+0x8b8>
 8011602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011604:	9a08      	ldr	r2, [sp, #32]
 8011606:	4650      	mov	r0, sl
 8011608:	4659      	mov	r1, fp
 801160a:	b1bb      	cbz	r3, 801163c <_strtod_l+0x914>
 801160c:	f7ff fb6c 	bl	8010ce8 <sulp>
 8011610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011614:	ec53 2b10 	vmov	r2, r3, d0
 8011618:	f7ee fe48 	bl	80002ac <__adddf3>
 801161c:	4682      	mov	sl, r0
 801161e:	468b      	mov	fp, r1
 8011620:	e7de      	b.n	80115e0 <_strtod_l+0x8b8>
 8011622:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011626:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801162a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801162e:	f04f 3aff 	mov.w	sl, #4294967295
 8011632:	e7d5      	b.n	80115e0 <_strtod_l+0x8b8>
 8011634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011636:	ea13 0f0a 	tst.w	r3, sl
 801163a:	e7e1      	b.n	8011600 <_strtod_l+0x8d8>
 801163c:	f7ff fb54 	bl	8010ce8 <sulp>
 8011640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011644:	ec53 2b10 	vmov	r2, r3, d0
 8011648:	f7ee fe2e 	bl	80002a8 <__aeabi_dsub>
 801164c:	2200      	movs	r2, #0
 801164e:	2300      	movs	r3, #0
 8011650:	4682      	mov	sl, r0
 8011652:	468b      	mov	fp, r1
 8011654:	f7ef fa48 	bl	8000ae8 <__aeabi_dcmpeq>
 8011658:	2800      	cmp	r0, #0
 801165a:	d0c1      	beq.n	80115e0 <_strtod_l+0x8b8>
 801165c:	e61a      	b.n	8011294 <_strtod_l+0x56c>
 801165e:	4641      	mov	r1, r8
 8011660:	4620      	mov	r0, r4
 8011662:	f7ff facb 	bl	8010bfc <__ratio>
 8011666:	ec57 6b10 	vmov	r6, r7, d0
 801166a:	2200      	movs	r2, #0
 801166c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011670:	4630      	mov	r0, r6
 8011672:	4639      	mov	r1, r7
 8011674:	f7ef fa4c 	bl	8000b10 <__aeabi_dcmple>
 8011678:	2800      	cmp	r0, #0
 801167a:	d06f      	beq.n	801175c <_strtod_l+0xa34>
 801167c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801167e:	2b00      	cmp	r3, #0
 8011680:	d17a      	bne.n	8011778 <_strtod_l+0xa50>
 8011682:	f1ba 0f00 	cmp.w	sl, #0
 8011686:	d158      	bne.n	801173a <_strtod_l+0xa12>
 8011688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801168a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801168e:	2b00      	cmp	r3, #0
 8011690:	d15a      	bne.n	8011748 <_strtod_l+0xa20>
 8011692:	4b64      	ldr	r3, [pc, #400]	@ (8011824 <_strtod_l+0xafc>)
 8011694:	2200      	movs	r2, #0
 8011696:	4630      	mov	r0, r6
 8011698:	4639      	mov	r1, r7
 801169a:	f7ef fa2f 	bl	8000afc <__aeabi_dcmplt>
 801169e:	2800      	cmp	r0, #0
 80116a0:	d159      	bne.n	8011756 <_strtod_l+0xa2e>
 80116a2:	4630      	mov	r0, r6
 80116a4:	4639      	mov	r1, r7
 80116a6:	4b60      	ldr	r3, [pc, #384]	@ (8011828 <_strtod_l+0xb00>)
 80116a8:	2200      	movs	r2, #0
 80116aa:	f7ee ffb5 	bl	8000618 <__aeabi_dmul>
 80116ae:	4606      	mov	r6, r0
 80116b0:	460f      	mov	r7, r1
 80116b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80116b6:	9606      	str	r6, [sp, #24]
 80116b8:	9307      	str	r3, [sp, #28]
 80116ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116be:	4d57      	ldr	r5, [pc, #348]	@ (801181c <_strtod_l+0xaf4>)
 80116c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80116c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116c6:	401d      	ands	r5, r3
 80116c8:	4b58      	ldr	r3, [pc, #352]	@ (801182c <_strtod_l+0xb04>)
 80116ca:	429d      	cmp	r5, r3
 80116cc:	f040 80b2 	bne.w	8011834 <_strtod_l+0xb0c>
 80116d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80116d6:	ec4b ab10 	vmov	d0, sl, fp
 80116da:	f7ff f9c7 	bl	8010a6c <__ulp>
 80116de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116e2:	ec51 0b10 	vmov	r0, r1, d0
 80116e6:	f7ee ff97 	bl	8000618 <__aeabi_dmul>
 80116ea:	4652      	mov	r2, sl
 80116ec:	465b      	mov	r3, fp
 80116ee:	f7ee fddd 	bl	80002ac <__adddf3>
 80116f2:	460b      	mov	r3, r1
 80116f4:	4949      	ldr	r1, [pc, #292]	@ (801181c <_strtod_l+0xaf4>)
 80116f6:	4a4e      	ldr	r2, [pc, #312]	@ (8011830 <_strtod_l+0xb08>)
 80116f8:	4019      	ands	r1, r3
 80116fa:	4291      	cmp	r1, r2
 80116fc:	4682      	mov	sl, r0
 80116fe:	d942      	bls.n	8011786 <_strtod_l+0xa5e>
 8011700:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011702:	4b47      	ldr	r3, [pc, #284]	@ (8011820 <_strtod_l+0xaf8>)
 8011704:	429a      	cmp	r2, r3
 8011706:	d103      	bne.n	8011710 <_strtod_l+0x9e8>
 8011708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801170a:	3301      	adds	r3, #1
 801170c:	f43f ad2f 	beq.w	801116e <_strtod_l+0x446>
 8011710:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011820 <_strtod_l+0xaf8>
 8011714:	f04f 3aff 	mov.w	sl, #4294967295
 8011718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801171a:	9805      	ldr	r0, [sp, #20]
 801171c:	f7fe fe7a 	bl	8010414 <_Bfree>
 8011720:	9805      	ldr	r0, [sp, #20]
 8011722:	4649      	mov	r1, r9
 8011724:	f7fe fe76 	bl	8010414 <_Bfree>
 8011728:	9805      	ldr	r0, [sp, #20]
 801172a:	4641      	mov	r1, r8
 801172c:	f7fe fe72 	bl	8010414 <_Bfree>
 8011730:	9805      	ldr	r0, [sp, #20]
 8011732:	4621      	mov	r1, r4
 8011734:	f7fe fe6e 	bl	8010414 <_Bfree>
 8011738:	e619      	b.n	801136e <_strtod_l+0x646>
 801173a:	f1ba 0f01 	cmp.w	sl, #1
 801173e:	d103      	bne.n	8011748 <_strtod_l+0xa20>
 8011740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011742:	2b00      	cmp	r3, #0
 8011744:	f43f ada6 	beq.w	8011294 <_strtod_l+0x56c>
 8011748:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80117f8 <_strtod_l+0xad0>
 801174c:	4f35      	ldr	r7, [pc, #212]	@ (8011824 <_strtod_l+0xafc>)
 801174e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011752:	2600      	movs	r6, #0
 8011754:	e7b1      	b.n	80116ba <_strtod_l+0x992>
 8011756:	4f34      	ldr	r7, [pc, #208]	@ (8011828 <_strtod_l+0xb00>)
 8011758:	2600      	movs	r6, #0
 801175a:	e7aa      	b.n	80116b2 <_strtod_l+0x98a>
 801175c:	4b32      	ldr	r3, [pc, #200]	@ (8011828 <_strtod_l+0xb00>)
 801175e:	4630      	mov	r0, r6
 8011760:	4639      	mov	r1, r7
 8011762:	2200      	movs	r2, #0
 8011764:	f7ee ff58 	bl	8000618 <__aeabi_dmul>
 8011768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801176a:	4606      	mov	r6, r0
 801176c:	460f      	mov	r7, r1
 801176e:	2b00      	cmp	r3, #0
 8011770:	d09f      	beq.n	80116b2 <_strtod_l+0x98a>
 8011772:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011776:	e7a0      	b.n	80116ba <_strtod_l+0x992>
 8011778:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011800 <_strtod_l+0xad8>
 801177c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011780:	ec57 6b17 	vmov	r6, r7, d7
 8011784:	e799      	b.n	80116ba <_strtod_l+0x992>
 8011786:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801178a:	9b08      	ldr	r3, [sp, #32]
 801178c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011790:	2b00      	cmp	r3, #0
 8011792:	d1c1      	bne.n	8011718 <_strtod_l+0x9f0>
 8011794:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011798:	0d1b      	lsrs	r3, r3, #20
 801179a:	051b      	lsls	r3, r3, #20
 801179c:	429d      	cmp	r5, r3
 801179e:	d1bb      	bne.n	8011718 <_strtod_l+0x9f0>
 80117a0:	4630      	mov	r0, r6
 80117a2:	4639      	mov	r1, r7
 80117a4:	f7ef fa98 	bl	8000cd8 <__aeabi_d2lz>
 80117a8:	f7ee ff08 	bl	80005bc <__aeabi_l2d>
 80117ac:	4602      	mov	r2, r0
 80117ae:	460b      	mov	r3, r1
 80117b0:	4630      	mov	r0, r6
 80117b2:	4639      	mov	r1, r7
 80117b4:	f7ee fd78 	bl	80002a8 <__aeabi_dsub>
 80117b8:	460b      	mov	r3, r1
 80117ba:	4602      	mov	r2, r0
 80117bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80117c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80117c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117c6:	ea46 060a 	orr.w	r6, r6, sl
 80117ca:	431e      	orrs	r6, r3
 80117cc:	d06f      	beq.n	80118ae <_strtod_l+0xb86>
 80117ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8011808 <_strtod_l+0xae0>)
 80117d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d4:	f7ef f992 	bl	8000afc <__aeabi_dcmplt>
 80117d8:	2800      	cmp	r0, #0
 80117da:	f47f acd3 	bne.w	8011184 <_strtod_l+0x45c>
 80117de:	a30c      	add	r3, pc, #48	@ (adr r3, 8011810 <_strtod_l+0xae8>)
 80117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117e8:	f7ef f9a6 	bl	8000b38 <__aeabi_dcmpgt>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d093      	beq.n	8011718 <_strtod_l+0x9f0>
 80117f0:	e4c8      	b.n	8011184 <_strtod_l+0x45c>
 80117f2:	bf00      	nop
 80117f4:	f3af 8000 	nop.w
 80117f8:	00000000 	.word	0x00000000
 80117fc:	bff00000 	.word	0xbff00000
 8011800:	00000000 	.word	0x00000000
 8011804:	3ff00000 	.word	0x3ff00000
 8011808:	94a03595 	.word	0x94a03595
 801180c:	3fdfffff 	.word	0x3fdfffff
 8011810:	35afe535 	.word	0x35afe535
 8011814:	3fe00000 	.word	0x3fe00000
 8011818:	000fffff 	.word	0x000fffff
 801181c:	7ff00000 	.word	0x7ff00000
 8011820:	7fefffff 	.word	0x7fefffff
 8011824:	3ff00000 	.word	0x3ff00000
 8011828:	3fe00000 	.word	0x3fe00000
 801182c:	7fe00000 	.word	0x7fe00000
 8011830:	7c9fffff 	.word	0x7c9fffff
 8011834:	9b08      	ldr	r3, [sp, #32]
 8011836:	b323      	cbz	r3, 8011882 <_strtod_l+0xb5a>
 8011838:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801183c:	d821      	bhi.n	8011882 <_strtod_l+0xb5a>
 801183e:	a328      	add	r3, pc, #160	@ (adr r3, 80118e0 <_strtod_l+0xbb8>)
 8011840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011844:	4630      	mov	r0, r6
 8011846:	4639      	mov	r1, r7
 8011848:	f7ef f962 	bl	8000b10 <__aeabi_dcmple>
 801184c:	b1a0      	cbz	r0, 8011878 <_strtod_l+0xb50>
 801184e:	4639      	mov	r1, r7
 8011850:	4630      	mov	r0, r6
 8011852:	f7ef f9b9 	bl	8000bc8 <__aeabi_d2uiz>
 8011856:	2801      	cmp	r0, #1
 8011858:	bf38      	it	cc
 801185a:	2001      	movcc	r0, #1
 801185c:	f7ee fe62 	bl	8000524 <__aeabi_ui2d>
 8011860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011862:	4606      	mov	r6, r0
 8011864:	460f      	mov	r7, r1
 8011866:	b9fb      	cbnz	r3, 80118a8 <_strtod_l+0xb80>
 8011868:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801186c:	9014      	str	r0, [sp, #80]	@ 0x50
 801186e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011870:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011874:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011878:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801187a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801187e:	1b5b      	subs	r3, r3, r5
 8011880:	9311      	str	r3, [sp, #68]	@ 0x44
 8011882:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011886:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801188a:	f7ff f8ef 	bl	8010a6c <__ulp>
 801188e:	4650      	mov	r0, sl
 8011890:	ec53 2b10 	vmov	r2, r3, d0
 8011894:	4659      	mov	r1, fp
 8011896:	f7ee febf 	bl	8000618 <__aeabi_dmul>
 801189a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801189e:	f7ee fd05 	bl	80002ac <__adddf3>
 80118a2:	4682      	mov	sl, r0
 80118a4:	468b      	mov	fp, r1
 80118a6:	e770      	b.n	801178a <_strtod_l+0xa62>
 80118a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80118ac:	e7e0      	b.n	8011870 <_strtod_l+0xb48>
 80118ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80118e8 <_strtod_l+0xbc0>)
 80118b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b4:	f7ef f922 	bl	8000afc <__aeabi_dcmplt>
 80118b8:	e798      	b.n	80117ec <_strtod_l+0xac4>
 80118ba:	2300      	movs	r3, #0
 80118bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80118be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80118c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80118c2:	6013      	str	r3, [r2, #0]
 80118c4:	f7ff ba6d 	b.w	8010da2 <_strtod_l+0x7a>
 80118c8:	2a65      	cmp	r2, #101	@ 0x65
 80118ca:	f43f ab68 	beq.w	8010f9e <_strtod_l+0x276>
 80118ce:	2a45      	cmp	r2, #69	@ 0x45
 80118d0:	f43f ab65 	beq.w	8010f9e <_strtod_l+0x276>
 80118d4:	2301      	movs	r3, #1
 80118d6:	f7ff bba0 	b.w	801101a <_strtod_l+0x2f2>
 80118da:	bf00      	nop
 80118dc:	f3af 8000 	nop.w
 80118e0:	ffc00000 	.word	0xffc00000
 80118e4:	41dfffff 	.word	0x41dfffff
 80118e8:	94a03595 	.word	0x94a03595
 80118ec:	3fcfffff 	.word	0x3fcfffff

080118f0 <_strtod_r>:
 80118f0:	4b01      	ldr	r3, [pc, #4]	@ (80118f8 <_strtod_r+0x8>)
 80118f2:	f7ff ba19 	b.w	8010d28 <_strtod_l>
 80118f6:	bf00      	nop
 80118f8:	20000108 	.word	0x20000108

080118fc <_strtoul_l.isra.0>:
 80118fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011900:	4e34      	ldr	r6, [pc, #208]	@ (80119d4 <_strtoul_l.isra.0+0xd8>)
 8011902:	4686      	mov	lr, r0
 8011904:	460d      	mov	r5, r1
 8011906:	4628      	mov	r0, r5
 8011908:	f815 4b01 	ldrb.w	r4, [r5], #1
 801190c:	5d37      	ldrb	r7, [r6, r4]
 801190e:	f017 0708 	ands.w	r7, r7, #8
 8011912:	d1f8      	bne.n	8011906 <_strtoul_l.isra.0+0xa>
 8011914:	2c2d      	cmp	r4, #45	@ 0x2d
 8011916:	d110      	bne.n	801193a <_strtoul_l.isra.0+0x3e>
 8011918:	782c      	ldrb	r4, [r5, #0]
 801191a:	2701      	movs	r7, #1
 801191c:	1c85      	adds	r5, r0, #2
 801191e:	f033 0010 	bics.w	r0, r3, #16
 8011922:	d115      	bne.n	8011950 <_strtoul_l.isra.0+0x54>
 8011924:	2c30      	cmp	r4, #48	@ 0x30
 8011926:	d10d      	bne.n	8011944 <_strtoul_l.isra.0+0x48>
 8011928:	7828      	ldrb	r0, [r5, #0]
 801192a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801192e:	2858      	cmp	r0, #88	@ 0x58
 8011930:	d108      	bne.n	8011944 <_strtoul_l.isra.0+0x48>
 8011932:	786c      	ldrb	r4, [r5, #1]
 8011934:	3502      	adds	r5, #2
 8011936:	2310      	movs	r3, #16
 8011938:	e00a      	b.n	8011950 <_strtoul_l.isra.0+0x54>
 801193a:	2c2b      	cmp	r4, #43	@ 0x2b
 801193c:	bf04      	itt	eq
 801193e:	782c      	ldrbeq	r4, [r5, #0]
 8011940:	1c85      	addeq	r5, r0, #2
 8011942:	e7ec      	b.n	801191e <_strtoul_l.isra.0+0x22>
 8011944:	2b00      	cmp	r3, #0
 8011946:	d1f6      	bne.n	8011936 <_strtoul_l.isra.0+0x3a>
 8011948:	2c30      	cmp	r4, #48	@ 0x30
 801194a:	bf14      	ite	ne
 801194c:	230a      	movne	r3, #10
 801194e:	2308      	moveq	r3, #8
 8011950:	f04f 38ff 	mov.w	r8, #4294967295
 8011954:	2600      	movs	r6, #0
 8011956:	fbb8 f8f3 	udiv	r8, r8, r3
 801195a:	fb03 f908 	mul.w	r9, r3, r8
 801195e:	ea6f 0909 	mvn.w	r9, r9
 8011962:	4630      	mov	r0, r6
 8011964:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011968:	f1bc 0f09 	cmp.w	ip, #9
 801196c:	d810      	bhi.n	8011990 <_strtoul_l.isra.0+0x94>
 801196e:	4664      	mov	r4, ip
 8011970:	42a3      	cmp	r3, r4
 8011972:	dd1e      	ble.n	80119b2 <_strtoul_l.isra.0+0xb6>
 8011974:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011978:	d007      	beq.n	801198a <_strtoul_l.isra.0+0x8e>
 801197a:	4580      	cmp	r8, r0
 801197c:	d316      	bcc.n	80119ac <_strtoul_l.isra.0+0xb0>
 801197e:	d101      	bne.n	8011984 <_strtoul_l.isra.0+0x88>
 8011980:	45a1      	cmp	r9, r4
 8011982:	db13      	blt.n	80119ac <_strtoul_l.isra.0+0xb0>
 8011984:	fb00 4003 	mla	r0, r0, r3, r4
 8011988:	2601      	movs	r6, #1
 801198a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801198e:	e7e9      	b.n	8011964 <_strtoul_l.isra.0+0x68>
 8011990:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011994:	f1bc 0f19 	cmp.w	ip, #25
 8011998:	d801      	bhi.n	801199e <_strtoul_l.isra.0+0xa2>
 801199a:	3c37      	subs	r4, #55	@ 0x37
 801199c:	e7e8      	b.n	8011970 <_strtoul_l.isra.0+0x74>
 801199e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80119a2:	f1bc 0f19 	cmp.w	ip, #25
 80119a6:	d804      	bhi.n	80119b2 <_strtoul_l.isra.0+0xb6>
 80119a8:	3c57      	subs	r4, #87	@ 0x57
 80119aa:	e7e1      	b.n	8011970 <_strtoul_l.isra.0+0x74>
 80119ac:	f04f 36ff 	mov.w	r6, #4294967295
 80119b0:	e7eb      	b.n	801198a <_strtoul_l.isra.0+0x8e>
 80119b2:	1c73      	adds	r3, r6, #1
 80119b4:	d106      	bne.n	80119c4 <_strtoul_l.isra.0+0xc8>
 80119b6:	2322      	movs	r3, #34	@ 0x22
 80119b8:	f8ce 3000 	str.w	r3, [lr]
 80119bc:	4630      	mov	r0, r6
 80119be:	b932      	cbnz	r2, 80119ce <_strtoul_l.isra.0+0xd2>
 80119c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119c4:	b107      	cbz	r7, 80119c8 <_strtoul_l.isra.0+0xcc>
 80119c6:	4240      	negs	r0, r0
 80119c8:	2a00      	cmp	r2, #0
 80119ca:	d0f9      	beq.n	80119c0 <_strtoul_l.isra.0+0xc4>
 80119cc:	b106      	cbz	r6, 80119d0 <_strtoul_l.isra.0+0xd4>
 80119ce:	1e69      	subs	r1, r5, #1
 80119d0:	6011      	str	r1, [r2, #0]
 80119d2:	e7f5      	b.n	80119c0 <_strtoul_l.isra.0+0xc4>
 80119d4:	0803e001 	.word	0x0803e001

080119d8 <_strtoul_r>:
 80119d8:	f7ff bf90 	b.w	80118fc <_strtoul_l.isra.0>

080119dc <strtoul>:
 80119dc:	4613      	mov	r3, r2
 80119de:	460a      	mov	r2, r1
 80119e0:	4601      	mov	r1, r0
 80119e2:	4802      	ldr	r0, [pc, #8]	@ (80119ec <strtoul+0x10>)
 80119e4:	6800      	ldr	r0, [r0, #0]
 80119e6:	f7ff bf89 	b.w	80118fc <_strtoul_l.isra.0>
 80119ea:	bf00      	nop
 80119ec:	20000060 	.word	0x20000060

080119f0 <__ssputs_r>:
 80119f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119f4:	688e      	ldr	r6, [r1, #8]
 80119f6:	461f      	mov	r7, r3
 80119f8:	42be      	cmp	r6, r7
 80119fa:	680b      	ldr	r3, [r1, #0]
 80119fc:	4682      	mov	sl, r0
 80119fe:	460c      	mov	r4, r1
 8011a00:	4690      	mov	r8, r2
 8011a02:	d82d      	bhi.n	8011a60 <__ssputs_r+0x70>
 8011a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a0c:	d026      	beq.n	8011a5c <__ssputs_r+0x6c>
 8011a0e:	6965      	ldr	r5, [r4, #20]
 8011a10:	6909      	ldr	r1, [r1, #16]
 8011a12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a16:	eba3 0901 	sub.w	r9, r3, r1
 8011a1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a1e:	1c7b      	adds	r3, r7, #1
 8011a20:	444b      	add	r3, r9
 8011a22:	106d      	asrs	r5, r5, #1
 8011a24:	429d      	cmp	r5, r3
 8011a26:	bf38      	it	cc
 8011a28:	461d      	movcc	r5, r3
 8011a2a:	0553      	lsls	r3, r2, #21
 8011a2c:	d527      	bpl.n	8011a7e <__ssputs_r+0x8e>
 8011a2e:	4629      	mov	r1, r5
 8011a30:	f7fb fe86 	bl	800d740 <_malloc_r>
 8011a34:	4606      	mov	r6, r0
 8011a36:	b360      	cbz	r0, 8011a92 <__ssputs_r+0xa2>
 8011a38:	6921      	ldr	r1, [r4, #16]
 8011a3a:	464a      	mov	r2, r9
 8011a3c:	f7fd fda5 	bl	800f58a <memcpy>
 8011a40:	89a3      	ldrh	r3, [r4, #12]
 8011a42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a4a:	81a3      	strh	r3, [r4, #12]
 8011a4c:	6126      	str	r6, [r4, #16]
 8011a4e:	6165      	str	r5, [r4, #20]
 8011a50:	444e      	add	r6, r9
 8011a52:	eba5 0509 	sub.w	r5, r5, r9
 8011a56:	6026      	str	r6, [r4, #0]
 8011a58:	60a5      	str	r5, [r4, #8]
 8011a5a:	463e      	mov	r6, r7
 8011a5c:	42be      	cmp	r6, r7
 8011a5e:	d900      	bls.n	8011a62 <__ssputs_r+0x72>
 8011a60:	463e      	mov	r6, r7
 8011a62:	6820      	ldr	r0, [r4, #0]
 8011a64:	4632      	mov	r2, r6
 8011a66:	4641      	mov	r1, r8
 8011a68:	f7fc ff3f 	bl	800e8ea <memmove>
 8011a6c:	68a3      	ldr	r3, [r4, #8]
 8011a6e:	1b9b      	subs	r3, r3, r6
 8011a70:	60a3      	str	r3, [r4, #8]
 8011a72:	6823      	ldr	r3, [r4, #0]
 8011a74:	4433      	add	r3, r6
 8011a76:	6023      	str	r3, [r4, #0]
 8011a78:	2000      	movs	r0, #0
 8011a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7e:	462a      	mov	r2, r5
 8011a80:	f000 fd7b 	bl	801257a <_realloc_r>
 8011a84:	4606      	mov	r6, r0
 8011a86:	2800      	cmp	r0, #0
 8011a88:	d1e0      	bne.n	8011a4c <__ssputs_r+0x5c>
 8011a8a:	6921      	ldr	r1, [r4, #16]
 8011a8c:	4650      	mov	r0, sl
 8011a8e:	f7fe fbf3 	bl	8010278 <_free_r>
 8011a92:	230c      	movs	r3, #12
 8011a94:	f8ca 3000 	str.w	r3, [sl]
 8011a98:	89a3      	ldrh	r3, [r4, #12]
 8011a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a9e:	81a3      	strh	r3, [r4, #12]
 8011aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa4:	e7e9      	b.n	8011a7a <__ssputs_r+0x8a>
	...

08011aa8 <_svfiprintf_r>:
 8011aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aac:	4698      	mov	r8, r3
 8011aae:	898b      	ldrh	r3, [r1, #12]
 8011ab0:	061b      	lsls	r3, r3, #24
 8011ab2:	b09d      	sub	sp, #116	@ 0x74
 8011ab4:	4607      	mov	r7, r0
 8011ab6:	460d      	mov	r5, r1
 8011ab8:	4614      	mov	r4, r2
 8011aba:	d510      	bpl.n	8011ade <_svfiprintf_r+0x36>
 8011abc:	690b      	ldr	r3, [r1, #16]
 8011abe:	b973      	cbnz	r3, 8011ade <_svfiprintf_r+0x36>
 8011ac0:	2140      	movs	r1, #64	@ 0x40
 8011ac2:	f7fb fe3d 	bl	800d740 <_malloc_r>
 8011ac6:	6028      	str	r0, [r5, #0]
 8011ac8:	6128      	str	r0, [r5, #16]
 8011aca:	b930      	cbnz	r0, 8011ada <_svfiprintf_r+0x32>
 8011acc:	230c      	movs	r3, #12
 8011ace:	603b      	str	r3, [r7, #0]
 8011ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad4:	b01d      	add	sp, #116	@ 0x74
 8011ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ada:	2340      	movs	r3, #64	@ 0x40
 8011adc:	616b      	str	r3, [r5, #20]
 8011ade:	2300      	movs	r3, #0
 8011ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ae2:	2320      	movs	r3, #32
 8011ae4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011aec:	2330      	movs	r3, #48	@ 0x30
 8011aee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011c8c <_svfiprintf_r+0x1e4>
 8011af2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011af6:	f04f 0901 	mov.w	r9, #1
 8011afa:	4623      	mov	r3, r4
 8011afc:	469a      	mov	sl, r3
 8011afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b02:	b10a      	cbz	r2, 8011b08 <_svfiprintf_r+0x60>
 8011b04:	2a25      	cmp	r2, #37	@ 0x25
 8011b06:	d1f9      	bne.n	8011afc <_svfiprintf_r+0x54>
 8011b08:	ebba 0b04 	subs.w	fp, sl, r4
 8011b0c:	d00b      	beq.n	8011b26 <_svfiprintf_r+0x7e>
 8011b0e:	465b      	mov	r3, fp
 8011b10:	4622      	mov	r2, r4
 8011b12:	4629      	mov	r1, r5
 8011b14:	4638      	mov	r0, r7
 8011b16:	f7ff ff6b 	bl	80119f0 <__ssputs_r>
 8011b1a:	3001      	adds	r0, #1
 8011b1c:	f000 80a7 	beq.w	8011c6e <_svfiprintf_r+0x1c6>
 8011b20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b22:	445a      	add	r2, fp
 8011b24:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b26:	f89a 3000 	ldrb.w	r3, [sl]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	f000 809f 	beq.w	8011c6e <_svfiprintf_r+0x1c6>
 8011b30:	2300      	movs	r3, #0
 8011b32:	f04f 32ff 	mov.w	r2, #4294967295
 8011b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b3a:	f10a 0a01 	add.w	sl, sl, #1
 8011b3e:	9304      	str	r3, [sp, #16]
 8011b40:	9307      	str	r3, [sp, #28]
 8011b42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b46:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b48:	4654      	mov	r4, sl
 8011b4a:	2205      	movs	r2, #5
 8011b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b50:	484e      	ldr	r0, [pc, #312]	@ (8011c8c <_svfiprintf_r+0x1e4>)
 8011b52:	f7ee fb4d 	bl	80001f0 <memchr>
 8011b56:	9a04      	ldr	r2, [sp, #16]
 8011b58:	b9d8      	cbnz	r0, 8011b92 <_svfiprintf_r+0xea>
 8011b5a:	06d0      	lsls	r0, r2, #27
 8011b5c:	bf44      	itt	mi
 8011b5e:	2320      	movmi	r3, #32
 8011b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b64:	0711      	lsls	r1, r2, #28
 8011b66:	bf44      	itt	mi
 8011b68:	232b      	movmi	r3, #43	@ 0x2b
 8011b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8011b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b74:	d015      	beq.n	8011ba2 <_svfiprintf_r+0xfa>
 8011b76:	9a07      	ldr	r2, [sp, #28]
 8011b78:	4654      	mov	r4, sl
 8011b7a:	2000      	movs	r0, #0
 8011b7c:	f04f 0c0a 	mov.w	ip, #10
 8011b80:	4621      	mov	r1, r4
 8011b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b86:	3b30      	subs	r3, #48	@ 0x30
 8011b88:	2b09      	cmp	r3, #9
 8011b8a:	d94b      	bls.n	8011c24 <_svfiprintf_r+0x17c>
 8011b8c:	b1b0      	cbz	r0, 8011bbc <_svfiprintf_r+0x114>
 8011b8e:	9207      	str	r2, [sp, #28]
 8011b90:	e014      	b.n	8011bbc <_svfiprintf_r+0x114>
 8011b92:	eba0 0308 	sub.w	r3, r0, r8
 8011b96:	fa09 f303 	lsl.w	r3, r9, r3
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	9304      	str	r3, [sp, #16]
 8011b9e:	46a2      	mov	sl, r4
 8011ba0:	e7d2      	b.n	8011b48 <_svfiprintf_r+0xa0>
 8011ba2:	9b03      	ldr	r3, [sp, #12]
 8011ba4:	1d19      	adds	r1, r3, #4
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	9103      	str	r1, [sp, #12]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	bfbb      	ittet	lt
 8011bae:	425b      	neglt	r3, r3
 8011bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8011bb4:	9307      	strge	r3, [sp, #28]
 8011bb6:	9307      	strlt	r3, [sp, #28]
 8011bb8:	bfb8      	it	lt
 8011bba:	9204      	strlt	r2, [sp, #16]
 8011bbc:	7823      	ldrb	r3, [r4, #0]
 8011bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bc0:	d10a      	bne.n	8011bd8 <_svfiprintf_r+0x130>
 8011bc2:	7863      	ldrb	r3, [r4, #1]
 8011bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bc6:	d132      	bne.n	8011c2e <_svfiprintf_r+0x186>
 8011bc8:	9b03      	ldr	r3, [sp, #12]
 8011bca:	1d1a      	adds	r2, r3, #4
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	9203      	str	r2, [sp, #12]
 8011bd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bd4:	3402      	adds	r4, #2
 8011bd6:	9305      	str	r3, [sp, #20]
 8011bd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011c9c <_svfiprintf_r+0x1f4>
 8011bdc:	7821      	ldrb	r1, [r4, #0]
 8011bde:	2203      	movs	r2, #3
 8011be0:	4650      	mov	r0, sl
 8011be2:	f7ee fb05 	bl	80001f0 <memchr>
 8011be6:	b138      	cbz	r0, 8011bf8 <_svfiprintf_r+0x150>
 8011be8:	9b04      	ldr	r3, [sp, #16]
 8011bea:	eba0 000a 	sub.w	r0, r0, sl
 8011bee:	2240      	movs	r2, #64	@ 0x40
 8011bf0:	4082      	lsls	r2, r0
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	3401      	adds	r4, #1
 8011bf6:	9304      	str	r3, [sp, #16]
 8011bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bfc:	4824      	ldr	r0, [pc, #144]	@ (8011c90 <_svfiprintf_r+0x1e8>)
 8011bfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c02:	2206      	movs	r2, #6
 8011c04:	f7ee faf4 	bl	80001f0 <memchr>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d036      	beq.n	8011c7a <_svfiprintf_r+0x1d2>
 8011c0c:	4b21      	ldr	r3, [pc, #132]	@ (8011c94 <_svfiprintf_r+0x1ec>)
 8011c0e:	bb1b      	cbnz	r3, 8011c58 <_svfiprintf_r+0x1b0>
 8011c10:	9b03      	ldr	r3, [sp, #12]
 8011c12:	3307      	adds	r3, #7
 8011c14:	f023 0307 	bic.w	r3, r3, #7
 8011c18:	3308      	adds	r3, #8
 8011c1a:	9303      	str	r3, [sp, #12]
 8011c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c1e:	4433      	add	r3, r6
 8011c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c22:	e76a      	b.n	8011afa <_svfiprintf_r+0x52>
 8011c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c28:	460c      	mov	r4, r1
 8011c2a:	2001      	movs	r0, #1
 8011c2c:	e7a8      	b.n	8011b80 <_svfiprintf_r+0xd8>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	3401      	adds	r4, #1
 8011c32:	9305      	str	r3, [sp, #20]
 8011c34:	4619      	mov	r1, r3
 8011c36:	f04f 0c0a 	mov.w	ip, #10
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c40:	3a30      	subs	r2, #48	@ 0x30
 8011c42:	2a09      	cmp	r2, #9
 8011c44:	d903      	bls.n	8011c4e <_svfiprintf_r+0x1a6>
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d0c6      	beq.n	8011bd8 <_svfiprintf_r+0x130>
 8011c4a:	9105      	str	r1, [sp, #20]
 8011c4c:	e7c4      	b.n	8011bd8 <_svfiprintf_r+0x130>
 8011c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c52:	4604      	mov	r4, r0
 8011c54:	2301      	movs	r3, #1
 8011c56:	e7f0      	b.n	8011c3a <_svfiprintf_r+0x192>
 8011c58:	ab03      	add	r3, sp, #12
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	462a      	mov	r2, r5
 8011c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8011c98 <_svfiprintf_r+0x1f0>)
 8011c60:	a904      	add	r1, sp, #16
 8011c62:	4638      	mov	r0, r7
 8011c64:	f7fb ff1e 	bl	800daa4 <_printf_float>
 8011c68:	1c42      	adds	r2, r0, #1
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	d1d6      	bne.n	8011c1c <_svfiprintf_r+0x174>
 8011c6e:	89ab      	ldrh	r3, [r5, #12]
 8011c70:	065b      	lsls	r3, r3, #25
 8011c72:	f53f af2d 	bmi.w	8011ad0 <_svfiprintf_r+0x28>
 8011c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c78:	e72c      	b.n	8011ad4 <_svfiprintf_r+0x2c>
 8011c7a:	ab03      	add	r3, sp, #12
 8011c7c:	9300      	str	r3, [sp, #0]
 8011c7e:	462a      	mov	r2, r5
 8011c80:	4b05      	ldr	r3, [pc, #20]	@ (8011c98 <_svfiprintf_r+0x1f0>)
 8011c82:	a904      	add	r1, sp, #16
 8011c84:	4638      	mov	r0, r7
 8011c86:	f7fc f9a5 	bl	800dfd4 <_printf_i>
 8011c8a:	e7ed      	b.n	8011c68 <_svfiprintf_r+0x1c0>
 8011c8c:	0803e26e 	.word	0x0803e26e
 8011c90:	0803e278 	.word	0x0803e278
 8011c94:	0800daa5 	.word	0x0800daa5
 8011c98:	080119f1 	.word	0x080119f1
 8011c9c:	0803e274 	.word	0x0803e274

08011ca0 <__sflush_r>:
 8011ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca8:	0716      	lsls	r6, r2, #28
 8011caa:	4605      	mov	r5, r0
 8011cac:	460c      	mov	r4, r1
 8011cae:	d454      	bmi.n	8011d5a <__sflush_r+0xba>
 8011cb0:	684b      	ldr	r3, [r1, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	dc02      	bgt.n	8011cbc <__sflush_r+0x1c>
 8011cb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	dd48      	ble.n	8011d4e <__sflush_r+0xae>
 8011cbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cbe:	2e00      	cmp	r6, #0
 8011cc0:	d045      	beq.n	8011d4e <__sflush_r+0xae>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011cc8:	682f      	ldr	r7, [r5, #0]
 8011cca:	6a21      	ldr	r1, [r4, #32]
 8011ccc:	602b      	str	r3, [r5, #0]
 8011cce:	d030      	beq.n	8011d32 <__sflush_r+0x92>
 8011cd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011cd2:	89a3      	ldrh	r3, [r4, #12]
 8011cd4:	0759      	lsls	r1, r3, #29
 8011cd6:	d505      	bpl.n	8011ce4 <__sflush_r+0x44>
 8011cd8:	6863      	ldr	r3, [r4, #4]
 8011cda:	1ad2      	subs	r2, r2, r3
 8011cdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011cde:	b10b      	cbz	r3, 8011ce4 <__sflush_r+0x44>
 8011ce0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ce2:	1ad2      	subs	r2, r2, r3
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ce8:	6a21      	ldr	r1, [r4, #32]
 8011cea:	4628      	mov	r0, r5
 8011cec:	47b0      	blx	r6
 8011cee:	1c43      	adds	r3, r0, #1
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	d106      	bne.n	8011d02 <__sflush_r+0x62>
 8011cf4:	6829      	ldr	r1, [r5, #0]
 8011cf6:	291d      	cmp	r1, #29
 8011cf8:	d82b      	bhi.n	8011d52 <__sflush_r+0xb2>
 8011cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8011da4 <__sflush_r+0x104>)
 8011cfc:	40ca      	lsrs	r2, r1
 8011cfe:	07d6      	lsls	r6, r2, #31
 8011d00:	d527      	bpl.n	8011d52 <__sflush_r+0xb2>
 8011d02:	2200      	movs	r2, #0
 8011d04:	6062      	str	r2, [r4, #4]
 8011d06:	04d9      	lsls	r1, r3, #19
 8011d08:	6922      	ldr	r2, [r4, #16]
 8011d0a:	6022      	str	r2, [r4, #0]
 8011d0c:	d504      	bpl.n	8011d18 <__sflush_r+0x78>
 8011d0e:	1c42      	adds	r2, r0, #1
 8011d10:	d101      	bne.n	8011d16 <__sflush_r+0x76>
 8011d12:	682b      	ldr	r3, [r5, #0]
 8011d14:	b903      	cbnz	r3, 8011d18 <__sflush_r+0x78>
 8011d16:	6560      	str	r0, [r4, #84]	@ 0x54
 8011d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d1a:	602f      	str	r7, [r5, #0]
 8011d1c:	b1b9      	cbz	r1, 8011d4e <__sflush_r+0xae>
 8011d1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d22:	4299      	cmp	r1, r3
 8011d24:	d002      	beq.n	8011d2c <__sflush_r+0x8c>
 8011d26:	4628      	mov	r0, r5
 8011d28:	f7fe faa6 	bl	8010278 <_free_r>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d30:	e00d      	b.n	8011d4e <__sflush_r+0xae>
 8011d32:	2301      	movs	r3, #1
 8011d34:	4628      	mov	r0, r5
 8011d36:	47b0      	blx	r6
 8011d38:	4602      	mov	r2, r0
 8011d3a:	1c50      	adds	r0, r2, #1
 8011d3c:	d1c9      	bne.n	8011cd2 <__sflush_r+0x32>
 8011d3e:	682b      	ldr	r3, [r5, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d0c6      	beq.n	8011cd2 <__sflush_r+0x32>
 8011d44:	2b1d      	cmp	r3, #29
 8011d46:	d001      	beq.n	8011d4c <__sflush_r+0xac>
 8011d48:	2b16      	cmp	r3, #22
 8011d4a:	d11e      	bne.n	8011d8a <__sflush_r+0xea>
 8011d4c:	602f      	str	r7, [r5, #0]
 8011d4e:	2000      	movs	r0, #0
 8011d50:	e022      	b.n	8011d98 <__sflush_r+0xf8>
 8011d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d56:	b21b      	sxth	r3, r3
 8011d58:	e01b      	b.n	8011d92 <__sflush_r+0xf2>
 8011d5a:	690f      	ldr	r7, [r1, #16]
 8011d5c:	2f00      	cmp	r7, #0
 8011d5e:	d0f6      	beq.n	8011d4e <__sflush_r+0xae>
 8011d60:	0793      	lsls	r3, r2, #30
 8011d62:	680e      	ldr	r6, [r1, #0]
 8011d64:	bf08      	it	eq
 8011d66:	694b      	ldreq	r3, [r1, #20]
 8011d68:	600f      	str	r7, [r1, #0]
 8011d6a:	bf18      	it	ne
 8011d6c:	2300      	movne	r3, #0
 8011d6e:	eba6 0807 	sub.w	r8, r6, r7
 8011d72:	608b      	str	r3, [r1, #8]
 8011d74:	f1b8 0f00 	cmp.w	r8, #0
 8011d78:	dde9      	ble.n	8011d4e <__sflush_r+0xae>
 8011d7a:	6a21      	ldr	r1, [r4, #32]
 8011d7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d7e:	4643      	mov	r3, r8
 8011d80:	463a      	mov	r2, r7
 8011d82:	4628      	mov	r0, r5
 8011d84:	47b0      	blx	r6
 8011d86:	2800      	cmp	r0, #0
 8011d88:	dc08      	bgt.n	8011d9c <__sflush_r+0xfc>
 8011d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d92:	81a3      	strh	r3, [r4, #12]
 8011d94:	f04f 30ff 	mov.w	r0, #4294967295
 8011d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d9c:	4407      	add	r7, r0
 8011d9e:	eba8 0800 	sub.w	r8, r8, r0
 8011da2:	e7e7      	b.n	8011d74 <__sflush_r+0xd4>
 8011da4:	20400001 	.word	0x20400001

08011da8 <_fflush_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	690b      	ldr	r3, [r1, #16]
 8011dac:	4605      	mov	r5, r0
 8011dae:	460c      	mov	r4, r1
 8011db0:	b913      	cbnz	r3, 8011db8 <_fflush_r+0x10>
 8011db2:	2500      	movs	r5, #0
 8011db4:	4628      	mov	r0, r5
 8011db6:	bd38      	pop	{r3, r4, r5, pc}
 8011db8:	b118      	cbz	r0, 8011dc2 <_fflush_r+0x1a>
 8011dba:	6a03      	ldr	r3, [r0, #32]
 8011dbc:	b90b      	cbnz	r3, 8011dc2 <_fflush_r+0x1a>
 8011dbe:	f7fc fcc1 	bl	800e744 <__sinit>
 8011dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d0f3      	beq.n	8011db2 <_fflush_r+0xa>
 8011dca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011dcc:	07d0      	lsls	r0, r2, #31
 8011dce:	d404      	bmi.n	8011dda <_fflush_r+0x32>
 8011dd0:	0599      	lsls	r1, r3, #22
 8011dd2:	d402      	bmi.n	8011dda <_fflush_r+0x32>
 8011dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dd6:	f7fd fbcd 	bl	800f574 <__retarget_lock_acquire_recursive>
 8011dda:	4628      	mov	r0, r5
 8011ddc:	4621      	mov	r1, r4
 8011dde:	f7ff ff5f 	bl	8011ca0 <__sflush_r>
 8011de2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011de4:	07da      	lsls	r2, r3, #31
 8011de6:	4605      	mov	r5, r0
 8011de8:	d4e4      	bmi.n	8011db4 <_fflush_r+0xc>
 8011dea:	89a3      	ldrh	r3, [r4, #12]
 8011dec:	059b      	lsls	r3, r3, #22
 8011dee:	d4e1      	bmi.n	8011db4 <_fflush_r+0xc>
 8011df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011df2:	f7fd fbc1 	bl	800f578 <__retarget_lock_release_recursive>
 8011df6:	e7dd      	b.n	8011db4 <_fflush_r+0xc>

08011df8 <siscanf>:
 8011df8:	b40e      	push	{r1, r2, r3}
 8011dfa:	b570      	push	{r4, r5, r6, lr}
 8011dfc:	b09d      	sub	sp, #116	@ 0x74
 8011dfe:	ac21      	add	r4, sp, #132	@ 0x84
 8011e00:	2500      	movs	r5, #0
 8011e02:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011e06:	f854 6b04 	ldr.w	r6, [r4], #4
 8011e0a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011e0e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011e10:	9002      	str	r0, [sp, #8]
 8011e12:	9006      	str	r0, [sp, #24]
 8011e14:	f7ee fa3c 	bl	8000290 <strlen>
 8011e18:	4b0b      	ldr	r3, [pc, #44]	@ (8011e48 <siscanf+0x50>)
 8011e1a:	9003      	str	r0, [sp, #12]
 8011e1c:	9007      	str	r0, [sp, #28]
 8011e1e:	480b      	ldr	r0, [pc, #44]	@ (8011e4c <siscanf+0x54>)
 8011e20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011e26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e2a:	4632      	mov	r2, r6
 8011e2c:	4623      	mov	r3, r4
 8011e2e:	a902      	add	r1, sp, #8
 8011e30:	6800      	ldr	r0, [r0, #0]
 8011e32:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011e34:	9514      	str	r5, [sp, #80]	@ 0x50
 8011e36:	9401      	str	r4, [sp, #4]
 8011e38:	f000 fc34 	bl	80126a4 <__ssvfiscanf_r>
 8011e3c:	b01d      	add	sp, #116	@ 0x74
 8011e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e42:	b003      	add	sp, #12
 8011e44:	4770      	bx	lr
 8011e46:	bf00      	nop
 8011e48:	0800e883 	.word	0x0800e883
 8011e4c:	20000060 	.word	0x20000060

08011e50 <__gettzinfo>:
 8011e50:	4800      	ldr	r0, [pc, #0]	@ (8011e54 <__gettzinfo+0x4>)
 8011e52:	4770      	bx	lr
 8011e54:	200000b0 	.word	0x200000b0

08011e58 <nan>:
 8011e58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011e60 <nan+0x8>
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	00000000 	.word	0x00000000
 8011e64:	7ff80000 	.word	0x7ff80000

08011e68 <__assert_func>:
 8011e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e6a:	4614      	mov	r4, r2
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4b09      	ldr	r3, [pc, #36]	@ (8011e94 <__assert_func+0x2c>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	4605      	mov	r5, r0
 8011e74:	68d8      	ldr	r0, [r3, #12]
 8011e76:	b14c      	cbz	r4, 8011e8c <__assert_func+0x24>
 8011e78:	4b07      	ldr	r3, [pc, #28]	@ (8011e98 <__assert_func+0x30>)
 8011e7a:	9100      	str	r1, [sp, #0]
 8011e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e80:	4906      	ldr	r1, [pc, #24]	@ (8011e9c <__assert_func+0x34>)
 8011e82:	462b      	mov	r3, r5
 8011e84:	f000 fed2 	bl	8012c2c <fiprintf>
 8011e88:	f000 ff55 	bl	8012d36 <abort>
 8011e8c:	4b04      	ldr	r3, [pc, #16]	@ (8011ea0 <__assert_func+0x38>)
 8011e8e:	461c      	mov	r4, r3
 8011e90:	e7f3      	b.n	8011e7a <__assert_func+0x12>
 8011e92:	bf00      	nop
 8011e94:	20000060 	.word	0x20000060
 8011e98:	0803e287 	.word	0x0803e287
 8011e9c:	0803e294 	.word	0x0803e294
 8011ea0:	0803e2c2 	.word	0x0803e2c2

08011ea4 <_calloc_r>:
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	fba1 5402 	umull	r5, r4, r1, r2
 8011eaa:	b934      	cbnz	r4, 8011eba <_calloc_r+0x16>
 8011eac:	4629      	mov	r1, r5
 8011eae:	f7fb fc47 	bl	800d740 <_malloc_r>
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	b928      	cbnz	r0, 8011ec2 <_calloc_r+0x1e>
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	bd70      	pop	{r4, r5, r6, pc}
 8011eba:	220c      	movs	r2, #12
 8011ebc:	6002      	str	r2, [r0, #0]
 8011ebe:	2600      	movs	r6, #0
 8011ec0:	e7f9      	b.n	8011eb6 <_calloc_r+0x12>
 8011ec2:	462a      	mov	r2, r5
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	f7fc fd2a 	bl	800e91e <memset>
 8011eca:	e7f4      	b.n	8011eb6 <_calloc_r+0x12>

08011ecc <__env_lock>:
 8011ecc:	4801      	ldr	r0, [pc, #4]	@ (8011ed4 <__env_lock+0x8>)
 8011ece:	f7fd bb51 	b.w	800f574 <__retarget_lock_acquire_recursive>
 8011ed2:	bf00      	nop
 8011ed4:	20002da9 	.word	0x20002da9

08011ed8 <__env_unlock>:
 8011ed8:	4801      	ldr	r0, [pc, #4]	@ (8011ee0 <__env_unlock+0x8>)
 8011eda:	f7fd bb4d 	b.w	800f578 <__retarget_lock_release_recursive>
 8011ede:	bf00      	nop
 8011ee0:	20002da9 	.word	0x20002da9

08011ee4 <rshift>:
 8011ee4:	6903      	ldr	r3, [r0, #16]
 8011ee6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011eea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011eee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011ef2:	f100 0414 	add.w	r4, r0, #20
 8011ef6:	dd45      	ble.n	8011f84 <rshift+0xa0>
 8011ef8:	f011 011f 	ands.w	r1, r1, #31
 8011efc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011f00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011f04:	d10c      	bne.n	8011f20 <rshift+0x3c>
 8011f06:	f100 0710 	add.w	r7, r0, #16
 8011f0a:	4629      	mov	r1, r5
 8011f0c:	42b1      	cmp	r1, r6
 8011f0e:	d334      	bcc.n	8011f7a <rshift+0x96>
 8011f10:	1a9b      	subs	r3, r3, r2
 8011f12:	009b      	lsls	r3, r3, #2
 8011f14:	1eea      	subs	r2, r5, #3
 8011f16:	4296      	cmp	r6, r2
 8011f18:	bf38      	it	cc
 8011f1a:	2300      	movcc	r3, #0
 8011f1c:	4423      	add	r3, r4
 8011f1e:	e015      	b.n	8011f4c <rshift+0x68>
 8011f20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011f24:	f1c1 0820 	rsb	r8, r1, #32
 8011f28:	40cf      	lsrs	r7, r1
 8011f2a:	f105 0e04 	add.w	lr, r5, #4
 8011f2e:	46a1      	mov	r9, r4
 8011f30:	4576      	cmp	r6, lr
 8011f32:	46f4      	mov	ip, lr
 8011f34:	d815      	bhi.n	8011f62 <rshift+0x7e>
 8011f36:	1a9a      	subs	r2, r3, r2
 8011f38:	0092      	lsls	r2, r2, #2
 8011f3a:	3a04      	subs	r2, #4
 8011f3c:	3501      	adds	r5, #1
 8011f3e:	42ae      	cmp	r6, r5
 8011f40:	bf38      	it	cc
 8011f42:	2200      	movcc	r2, #0
 8011f44:	18a3      	adds	r3, r4, r2
 8011f46:	50a7      	str	r7, [r4, r2]
 8011f48:	b107      	cbz	r7, 8011f4c <rshift+0x68>
 8011f4a:	3304      	adds	r3, #4
 8011f4c:	1b1a      	subs	r2, r3, r4
 8011f4e:	42a3      	cmp	r3, r4
 8011f50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011f54:	bf08      	it	eq
 8011f56:	2300      	moveq	r3, #0
 8011f58:	6102      	str	r2, [r0, #16]
 8011f5a:	bf08      	it	eq
 8011f5c:	6143      	streq	r3, [r0, #20]
 8011f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f62:	f8dc c000 	ldr.w	ip, [ip]
 8011f66:	fa0c fc08 	lsl.w	ip, ip, r8
 8011f6a:	ea4c 0707 	orr.w	r7, ip, r7
 8011f6e:	f849 7b04 	str.w	r7, [r9], #4
 8011f72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011f76:	40cf      	lsrs	r7, r1
 8011f78:	e7da      	b.n	8011f30 <rshift+0x4c>
 8011f7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8011f7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011f82:	e7c3      	b.n	8011f0c <rshift+0x28>
 8011f84:	4623      	mov	r3, r4
 8011f86:	e7e1      	b.n	8011f4c <rshift+0x68>

08011f88 <__hexdig_fun>:
 8011f88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011f8c:	2b09      	cmp	r3, #9
 8011f8e:	d802      	bhi.n	8011f96 <__hexdig_fun+0xe>
 8011f90:	3820      	subs	r0, #32
 8011f92:	b2c0      	uxtb	r0, r0
 8011f94:	4770      	bx	lr
 8011f96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011f9a:	2b05      	cmp	r3, #5
 8011f9c:	d801      	bhi.n	8011fa2 <__hexdig_fun+0x1a>
 8011f9e:	3847      	subs	r0, #71	@ 0x47
 8011fa0:	e7f7      	b.n	8011f92 <__hexdig_fun+0xa>
 8011fa2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011fa6:	2b05      	cmp	r3, #5
 8011fa8:	d801      	bhi.n	8011fae <__hexdig_fun+0x26>
 8011faa:	3827      	subs	r0, #39	@ 0x27
 8011fac:	e7f1      	b.n	8011f92 <__hexdig_fun+0xa>
 8011fae:	2000      	movs	r0, #0
 8011fb0:	4770      	bx	lr
	...

08011fb4 <__gethex>:
 8011fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb8:	b085      	sub	sp, #20
 8011fba:	468a      	mov	sl, r1
 8011fbc:	9302      	str	r3, [sp, #8]
 8011fbe:	680b      	ldr	r3, [r1, #0]
 8011fc0:	9001      	str	r0, [sp, #4]
 8011fc2:	4690      	mov	r8, r2
 8011fc4:	1c9c      	adds	r4, r3, #2
 8011fc6:	46a1      	mov	r9, r4
 8011fc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011fcc:	2830      	cmp	r0, #48	@ 0x30
 8011fce:	d0fa      	beq.n	8011fc6 <__gethex+0x12>
 8011fd0:	eba9 0303 	sub.w	r3, r9, r3
 8011fd4:	f1a3 0b02 	sub.w	fp, r3, #2
 8011fd8:	f7ff ffd6 	bl	8011f88 <__hexdig_fun>
 8011fdc:	4605      	mov	r5, r0
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	d168      	bne.n	80120b4 <__gethex+0x100>
 8011fe2:	49a0      	ldr	r1, [pc, #640]	@ (8012264 <__gethex+0x2b0>)
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	4648      	mov	r0, r9
 8011fe8:	f7fc fca1 	bl	800e92e <strncmp>
 8011fec:	4607      	mov	r7, r0
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	d167      	bne.n	80120c2 <__gethex+0x10e>
 8011ff2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011ff6:	4626      	mov	r6, r4
 8011ff8:	f7ff ffc6 	bl	8011f88 <__hexdig_fun>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	d062      	beq.n	80120c6 <__gethex+0x112>
 8012000:	4623      	mov	r3, r4
 8012002:	7818      	ldrb	r0, [r3, #0]
 8012004:	2830      	cmp	r0, #48	@ 0x30
 8012006:	4699      	mov	r9, r3
 8012008:	f103 0301 	add.w	r3, r3, #1
 801200c:	d0f9      	beq.n	8012002 <__gethex+0x4e>
 801200e:	f7ff ffbb 	bl	8011f88 <__hexdig_fun>
 8012012:	fab0 f580 	clz	r5, r0
 8012016:	096d      	lsrs	r5, r5, #5
 8012018:	f04f 0b01 	mov.w	fp, #1
 801201c:	464a      	mov	r2, r9
 801201e:	4616      	mov	r6, r2
 8012020:	3201      	adds	r2, #1
 8012022:	7830      	ldrb	r0, [r6, #0]
 8012024:	f7ff ffb0 	bl	8011f88 <__hexdig_fun>
 8012028:	2800      	cmp	r0, #0
 801202a:	d1f8      	bne.n	801201e <__gethex+0x6a>
 801202c:	498d      	ldr	r1, [pc, #564]	@ (8012264 <__gethex+0x2b0>)
 801202e:	2201      	movs	r2, #1
 8012030:	4630      	mov	r0, r6
 8012032:	f7fc fc7c 	bl	800e92e <strncmp>
 8012036:	2800      	cmp	r0, #0
 8012038:	d13f      	bne.n	80120ba <__gethex+0x106>
 801203a:	b944      	cbnz	r4, 801204e <__gethex+0x9a>
 801203c:	1c74      	adds	r4, r6, #1
 801203e:	4622      	mov	r2, r4
 8012040:	4616      	mov	r6, r2
 8012042:	3201      	adds	r2, #1
 8012044:	7830      	ldrb	r0, [r6, #0]
 8012046:	f7ff ff9f 	bl	8011f88 <__hexdig_fun>
 801204a:	2800      	cmp	r0, #0
 801204c:	d1f8      	bne.n	8012040 <__gethex+0x8c>
 801204e:	1ba4      	subs	r4, r4, r6
 8012050:	00a7      	lsls	r7, r4, #2
 8012052:	7833      	ldrb	r3, [r6, #0]
 8012054:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012058:	2b50      	cmp	r3, #80	@ 0x50
 801205a:	d13e      	bne.n	80120da <__gethex+0x126>
 801205c:	7873      	ldrb	r3, [r6, #1]
 801205e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012060:	d033      	beq.n	80120ca <__gethex+0x116>
 8012062:	2b2d      	cmp	r3, #45	@ 0x2d
 8012064:	d034      	beq.n	80120d0 <__gethex+0x11c>
 8012066:	1c71      	adds	r1, r6, #1
 8012068:	2400      	movs	r4, #0
 801206a:	7808      	ldrb	r0, [r1, #0]
 801206c:	f7ff ff8c 	bl	8011f88 <__hexdig_fun>
 8012070:	1e43      	subs	r3, r0, #1
 8012072:	b2db      	uxtb	r3, r3
 8012074:	2b18      	cmp	r3, #24
 8012076:	d830      	bhi.n	80120da <__gethex+0x126>
 8012078:	f1a0 0210 	sub.w	r2, r0, #16
 801207c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012080:	f7ff ff82 	bl	8011f88 <__hexdig_fun>
 8012084:	f100 3cff 	add.w	ip, r0, #4294967295
 8012088:	fa5f fc8c 	uxtb.w	ip, ip
 801208c:	f1bc 0f18 	cmp.w	ip, #24
 8012090:	f04f 030a 	mov.w	r3, #10
 8012094:	d91e      	bls.n	80120d4 <__gethex+0x120>
 8012096:	b104      	cbz	r4, 801209a <__gethex+0xe6>
 8012098:	4252      	negs	r2, r2
 801209a:	4417      	add	r7, r2
 801209c:	f8ca 1000 	str.w	r1, [sl]
 80120a0:	b1ed      	cbz	r5, 80120de <__gethex+0x12a>
 80120a2:	f1bb 0f00 	cmp.w	fp, #0
 80120a6:	bf0c      	ite	eq
 80120a8:	2506      	moveq	r5, #6
 80120aa:	2500      	movne	r5, #0
 80120ac:	4628      	mov	r0, r5
 80120ae:	b005      	add	sp, #20
 80120b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b4:	2500      	movs	r5, #0
 80120b6:	462c      	mov	r4, r5
 80120b8:	e7b0      	b.n	801201c <__gethex+0x68>
 80120ba:	2c00      	cmp	r4, #0
 80120bc:	d1c7      	bne.n	801204e <__gethex+0x9a>
 80120be:	4627      	mov	r7, r4
 80120c0:	e7c7      	b.n	8012052 <__gethex+0x9e>
 80120c2:	464e      	mov	r6, r9
 80120c4:	462f      	mov	r7, r5
 80120c6:	2501      	movs	r5, #1
 80120c8:	e7c3      	b.n	8012052 <__gethex+0x9e>
 80120ca:	2400      	movs	r4, #0
 80120cc:	1cb1      	adds	r1, r6, #2
 80120ce:	e7cc      	b.n	801206a <__gethex+0xb6>
 80120d0:	2401      	movs	r4, #1
 80120d2:	e7fb      	b.n	80120cc <__gethex+0x118>
 80120d4:	fb03 0002 	mla	r0, r3, r2, r0
 80120d8:	e7ce      	b.n	8012078 <__gethex+0xc4>
 80120da:	4631      	mov	r1, r6
 80120dc:	e7de      	b.n	801209c <__gethex+0xe8>
 80120de:	eba6 0309 	sub.w	r3, r6, r9
 80120e2:	3b01      	subs	r3, #1
 80120e4:	4629      	mov	r1, r5
 80120e6:	2b07      	cmp	r3, #7
 80120e8:	dc0a      	bgt.n	8012100 <__gethex+0x14c>
 80120ea:	9801      	ldr	r0, [sp, #4]
 80120ec:	f7fe f952 	bl	8010394 <_Balloc>
 80120f0:	4604      	mov	r4, r0
 80120f2:	b940      	cbnz	r0, 8012106 <__gethex+0x152>
 80120f4:	4b5c      	ldr	r3, [pc, #368]	@ (8012268 <__gethex+0x2b4>)
 80120f6:	4602      	mov	r2, r0
 80120f8:	21e4      	movs	r1, #228	@ 0xe4
 80120fa:	485c      	ldr	r0, [pc, #368]	@ (801226c <__gethex+0x2b8>)
 80120fc:	f7ff feb4 	bl	8011e68 <__assert_func>
 8012100:	3101      	adds	r1, #1
 8012102:	105b      	asrs	r3, r3, #1
 8012104:	e7ef      	b.n	80120e6 <__gethex+0x132>
 8012106:	f100 0a14 	add.w	sl, r0, #20
 801210a:	2300      	movs	r3, #0
 801210c:	4655      	mov	r5, sl
 801210e:	469b      	mov	fp, r3
 8012110:	45b1      	cmp	r9, r6
 8012112:	d337      	bcc.n	8012184 <__gethex+0x1d0>
 8012114:	f845 bb04 	str.w	fp, [r5], #4
 8012118:	eba5 050a 	sub.w	r5, r5, sl
 801211c:	10ad      	asrs	r5, r5, #2
 801211e:	6125      	str	r5, [r4, #16]
 8012120:	4658      	mov	r0, fp
 8012122:	f7fe fa29 	bl	8010578 <__hi0bits>
 8012126:	016d      	lsls	r5, r5, #5
 8012128:	f8d8 6000 	ldr.w	r6, [r8]
 801212c:	1a2d      	subs	r5, r5, r0
 801212e:	42b5      	cmp	r5, r6
 8012130:	dd54      	ble.n	80121dc <__gethex+0x228>
 8012132:	1bad      	subs	r5, r5, r6
 8012134:	4629      	mov	r1, r5
 8012136:	4620      	mov	r0, r4
 8012138:	f7fe fdb5 	bl	8010ca6 <__any_on>
 801213c:	4681      	mov	r9, r0
 801213e:	b178      	cbz	r0, 8012160 <__gethex+0x1ac>
 8012140:	1e6b      	subs	r3, r5, #1
 8012142:	1159      	asrs	r1, r3, #5
 8012144:	f003 021f 	and.w	r2, r3, #31
 8012148:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801214c:	f04f 0901 	mov.w	r9, #1
 8012150:	fa09 f202 	lsl.w	r2, r9, r2
 8012154:	420a      	tst	r2, r1
 8012156:	d003      	beq.n	8012160 <__gethex+0x1ac>
 8012158:	454b      	cmp	r3, r9
 801215a:	dc36      	bgt.n	80121ca <__gethex+0x216>
 801215c:	f04f 0902 	mov.w	r9, #2
 8012160:	4629      	mov	r1, r5
 8012162:	4620      	mov	r0, r4
 8012164:	f7ff febe 	bl	8011ee4 <rshift>
 8012168:	442f      	add	r7, r5
 801216a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801216e:	42bb      	cmp	r3, r7
 8012170:	da42      	bge.n	80121f8 <__gethex+0x244>
 8012172:	9801      	ldr	r0, [sp, #4]
 8012174:	4621      	mov	r1, r4
 8012176:	f7fe f94d 	bl	8010414 <_Bfree>
 801217a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801217c:	2300      	movs	r3, #0
 801217e:	6013      	str	r3, [r2, #0]
 8012180:	25a3      	movs	r5, #163	@ 0xa3
 8012182:	e793      	b.n	80120ac <__gethex+0xf8>
 8012184:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012188:	2a2e      	cmp	r2, #46	@ 0x2e
 801218a:	d012      	beq.n	80121b2 <__gethex+0x1fe>
 801218c:	2b20      	cmp	r3, #32
 801218e:	d104      	bne.n	801219a <__gethex+0x1e6>
 8012190:	f845 bb04 	str.w	fp, [r5], #4
 8012194:	f04f 0b00 	mov.w	fp, #0
 8012198:	465b      	mov	r3, fp
 801219a:	7830      	ldrb	r0, [r6, #0]
 801219c:	9303      	str	r3, [sp, #12]
 801219e:	f7ff fef3 	bl	8011f88 <__hexdig_fun>
 80121a2:	9b03      	ldr	r3, [sp, #12]
 80121a4:	f000 000f 	and.w	r0, r0, #15
 80121a8:	4098      	lsls	r0, r3
 80121aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80121ae:	3304      	adds	r3, #4
 80121b0:	e7ae      	b.n	8012110 <__gethex+0x15c>
 80121b2:	45b1      	cmp	r9, r6
 80121b4:	d8ea      	bhi.n	801218c <__gethex+0x1d8>
 80121b6:	492b      	ldr	r1, [pc, #172]	@ (8012264 <__gethex+0x2b0>)
 80121b8:	9303      	str	r3, [sp, #12]
 80121ba:	2201      	movs	r2, #1
 80121bc:	4630      	mov	r0, r6
 80121be:	f7fc fbb6 	bl	800e92e <strncmp>
 80121c2:	9b03      	ldr	r3, [sp, #12]
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d1e1      	bne.n	801218c <__gethex+0x1d8>
 80121c8:	e7a2      	b.n	8012110 <__gethex+0x15c>
 80121ca:	1ea9      	subs	r1, r5, #2
 80121cc:	4620      	mov	r0, r4
 80121ce:	f7fe fd6a 	bl	8010ca6 <__any_on>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d0c2      	beq.n	801215c <__gethex+0x1a8>
 80121d6:	f04f 0903 	mov.w	r9, #3
 80121da:	e7c1      	b.n	8012160 <__gethex+0x1ac>
 80121dc:	da09      	bge.n	80121f2 <__gethex+0x23e>
 80121de:	1b75      	subs	r5, r6, r5
 80121e0:	4621      	mov	r1, r4
 80121e2:	9801      	ldr	r0, [sp, #4]
 80121e4:	462a      	mov	r2, r5
 80121e6:	f7fe fb25 	bl	8010834 <__lshift>
 80121ea:	1b7f      	subs	r7, r7, r5
 80121ec:	4604      	mov	r4, r0
 80121ee:	f100 0a14 	add.w	sl, r0, #20
 80121f2:	f04f 0900 	mov.w	r9, #0
 80121f6:	e7b8      	b.n	801216a <__gethex+0x1b6>
 80121f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80121fc:	42bd      	cmp	r5, r7
 80121fe:	dd6f      	ble.n	80122e0 <__gethex+0x32c>
 8012200:	1bed      	subs	r5, r5, r7
 8012202:	42ae      	cmp	r6, r5
 8012204:	dc34      	bgt.n	8012270 <__gethex+0x2bc>
 8012206:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801220a:	2b02      	cmp	r3, #2
 801220c:	d022      	beq.n	8012254 <__gethex+0x2a0>
 801220e:	2b03      	cmp	r3, #3
 8012210:	d024      	beq.n	801225c <__gethex+0x2a8>
 8012212:	2b01      	cmp	r3, #1
 8012214:	d115      	bne.n	8012242 <__gethex+0x28e>
 8012216:	42ae      	cmp	r6, r5
 8012218:	d113      	bne.n	8012242 <__gethex+0x28e>
 801221a:	2e01      	cmp	r6, #1
 801221c:	d10b      	bne.n	8012236 <__gethex+0x282>
 801221e:	9a02      	ldr	r2, [sp, #8]
 8012220:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012224:	6013      	str	r3, [r2, #0]
 8012226:	2301      	movs	r3, #1
 8012228:	6123      	str	r3, [r4, #16]
 801222a:	f8ca 3000 	str.w	r3, [sl]
 801222e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012230:	2562      	movs	r5, #98	@ 0x62
 8012232:	601c      	str	r4, [r3, #0]
 8012234:	e73a      	b.n	80120ac <__gethex+0xf8>
 8012236:	1e71      	subs	r1, r6, #1
 8012238:	4620      	mov	r0, r4
 801223a:	f7fe fd34 	bl	8010ca6 <__any_on>
 801223e:	2800      	cmp	r0, #0
 8012240:	d1ed      	bne.n	801221e <__gethex+0x26a>
 8012242:	9801      	ldr	r0, [sp, #4]
 8012244:	4621      	mov	r1, r4
 8012246:	f7fe f8e5 	bl	8010414 <_Bfree>
 801224a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801224c:	2300      	movs	r3, #0
 801224e:	6013      	str	r3, [r2, #0]
 8012250:	2550      	movs	r5, #80	@ 0x50
 8012252:	e72b      	b.n	80120ac <__gethex+0xf8>
 8012254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012256:	2b00      	cmp	r3, #0
 8012258:	d1f3      	bne.n	8012242 <__gethex+0x28e>
 801225a:	e7e0      	b.n	801221e <__gethex+0x26a>
 801225c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801225e:	2b00      	cmp	r3, #0
 8012260:	d1dd      	bne.n	801221e <__gethex+0x26a>
 8012262:	e7ee      	b.n	8012242 <__gethex+0x28e>
 8012264:	0803e26c 	.word	0x0803e26c
 8012268:	0803e202 	.word	0x0803e202
 801226c:	0803e2c3 	.word	0x0803e2c3
 8012270:	1e6f      	subs	r7, r5, #1
 8012272:	f1b9 0f00 	cmp.w	r9, #0
 8012276:	d130      	bne.n	80122da <__gethex+0x326>
 8012278:	b127      	cbz	r7, 8012284 <__gethex+0x2d0>
 801227a:	4639      	mov	r1, r7
 801227c:	4620      	mov	r0, r4
 801227e:	f7fe fd12 	bl	8010ca6 <__any_on>
 8012282:	4681      	mov	r9, r0
 8012284:	117a      	asrs	r2, r7, #5
 8012286:	2301      	movs	r3, #1
 8012288:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801228c:	f007 071f 	and.w	r7, r7, #31
 8012290:	40bb      	lsls	r3, r7
 8012292:	4213      	tst	r3, r2
 8012294:	4629      	mov	r1, r5
 8012296:	4620      	mov	r0, r4
 8012298:	bf18      	it	ne
 801229a:	f049 0902 	orrne.w	r9, r9, #2
 801229e:	f7ff fe21 	bl	8011ee4 <rshift>
 80122a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80122a6:	1b76      	subs	r6, r6, r5
 80122a8:	2502      	movs	r5, #2
 80122aa:	f1b9 0f00 	cmp.w	r9, #0
 80122ae:	d047      	beq.n	8012340 <__gethex+0x38c>
 80122b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80122b4:	2b02      	cmp	r3, #2
 80122b6:	d015      	beq.n	80122e4 <__gethex+0x330>
 80122b8:	2b03      	cmp	r3, #3
 80122ba:	d017      	beq.n	80122ec <__gethex+0x338>
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d109      	bne.n	80122d4 <__gethex+0x320>
 80122c0:	f019 0f02 	tst.w	r9, #2
 80122c4:	d006      	beq.n	80122d4 <__gethex+0x320>
 80122c6:	f8da 3000 	ldr.w	r3, [sl]
 80122ca:	ea49 0903 	orr.w	r9, r9, r3
 80122ce:	f019 0f01 	tst.w	r9, #1
 80122d2:	d10e      	bne.n	80122f2 <__gethex+0x33e>
 80122d4:	f045 0510 	orr.w	r5, r5, #16
 80122d8:	e032      	b.n	8012340 <__gethex+0x38c>
 80122da:	f04f 0901 	mov.w	r9, #1
 80122de:	e7d1      	b.n	8012284 <__gethex+0x2d0>
 80122e0:	2501      	movs	r5, #1
 80122e2:	e7e2      	b.n	80122aa <__gethex+0x2f6>
 80122e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122e6:	f1c3 0301 	rsb	r3, r3, #1
 80122ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80122ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d0f0      	beq.n	80122d4 <__gethex+0x320>
 80122f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80122f6:	f104 0314 	add.w	r3, r4, #20
 80122fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80122fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012302:	f04f 0c00 	mov.w	ip, #0
 8012306:	4618      	mov	r0, r3
 8012308:	f853 2b04 	ldr.w	r2, [r3], #4
 801230c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012310:	d01b      	beq.n	801234a <__gethex+0x396>
 8012312:	3201      	adds	r2, #1
 8012314:	6002      	str	r2, [r0, #0]
 8012316:	2d02      	cmp	r5, #2
 8012318:	f104 0314 	add.w	r3, r4, #20
 801231c:	d13c      	bne.n	8012398 <__gethex+0x3e4>
 801231e:	f8d8 2000 	ldr.w	r2, [r8]
 8012322:	3a01      	subs	r2, #1
 8012324:	42b2      	cmp	r2, r6
 8012326:	d109      	bne.n	801233c <__gethex+0x388>
 8012328:	1171      	asrs	r1, r6, #5
 801232a:	2201      	movs	r2, #1
 801232c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012330:	f006 061f 	and.w	r6, r6, #31
 8012334:	fa02 f606 	lsl.w	r6, r2, r6
 8012338:	421e      	tst	r6, r3
 801233a:	d13a      	bne.n	80123b2 <__gethex+0x3fe>
 801233c:	f045 0520 	orr.w	r5, r5, #32
 8012340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012342:	601c      	str	r4, [r3, #0]
 8012344:	9b02      	ldr	r3, [sp, #8]
 8012346:	601f      	str	r7, [r3, #0]
 8012348:	e6b0      	b.n	80120ac <__gethex+0xf8>
 801234a:	4299      	cmp	r1, r3
 801234c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012350:	d8d9      	bhi.n	8012306 <__gethex+0x352>
 8012352:	68a3      	ldr	r3, [r4, #8]
 8012354:	459b      	cmp	fp, r3
 8012356:	db17      	blt.n	8012388 <__gethex+0x3d4>
 8012358:	6861      	ldr	r1, [r4, #4]
 801235a:	9801      	ldr	r0, [sp, #4]
 801235c:	3101      	adds	r1, #1
 801235e:	f7fe f819 	bl	8010394 <_Balloc>
 8012362:	4681      	mov	r9, r0
 8012364:	b918      	cbnz	r0, 801236e <__gethex+0x3ba>
 8012366:	4b1a      	ldr	r3, [pc, #104]	@ (80123d0 <__gethex+0x41c>)
 8012368:	4602      	mov	r2, r0
 801236a:	2184      	movs	r1, #132	@ 0x84
 801236c:	e6c5      	b.n	80120fa <__gethex+0x146>
 801236e:	6922      	ldr	r2, [r4, #16]
 8012370:	3202      	adds	r2, #2
 8012372:	f104 010c 	add.w	r1, r4, #12
 8012376:	0092      	lsls	r2, r2, #2
 8012378:	300c      	adds	r0, #12
 801237a:	f7fd f906 	bl	800f58a <memcpy>
 801237e:	4621      	mov	r1, r4
 8012380:	9801      	ldr	r0, [sp, #4]
 8012382:	f7fe f847 	bl	8010414 <_Bfree>
 8012386:	464c      	mov	r4, r9
 8012388:	6923      	ldr	r3, [r4, #16]
 801238a:	1c5a      	adds	r2, r3, #1
 801238c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012390:	6122      	str	r2, [r4, #16]
 8012392:	2201      	movs	r2, #1
 8012394:	615a      	str	r2, [r3, #20]
 8012396:	e7be      	b.n	8012316 <__gethex+0x362>
 8012398:	6922      	ldr	r2, [r4, #16]
 801239a:	455a      	cmp	r2, fp
 801239c:	dd0b      	ble.n	80123b6 <__gethex+0x402>
 801239e:	2101      	movs	r1, #1
 80123a0:	4620      	mov	r0, r4
 80123a2:	f7ff fd9f 	bl	8011ee4 <rshift>
 80123a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80123aa:	3701      	adds	r7, #1
 80123ac:	42bb      	cmp	r3, r7
 80123ae:	f6ff aee0 	blt.w	8012172 <__gethex+0x1be>
 80123b2:	2501      	movs	r5, #1
 80123b4:	e7c2      	b.n	801233c <__gethex+0x388>
 80123b6:	f016 061f 	ands.w	r6, r6, #31
 80123ba:	d0fa      	beq.n	80123b2 <__gethex+0x3fe>
 80123bc:	4453      	add	r3, sl
 80123be:	f1c6 0620 	rsb	r6, r6, #32
 80123c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80123c6:	f7fe f8d7 	bl	8010578 <__hi0bits>
 80123ca:	42b0      	cmp	r0, r6
 80123cc:	dbe7      	blt.n	801239e <__gethex+0x3ea>
 80123ce:	e7f0      	b.n	80123b2 <__gethex+0x3fe>
 80123d0:	0803e202 	.word	0x0803e202

080123d4 <L_shift>:
 80123d4:	f1c2 0208 	rsb	r2, r2, #8
 80123d8:	0092      	lsls	r2, r2, #2
 80123da:	b570      	push	{r4, r5, r6, lr}
 80123dc:	f1c2 0620 	rsb	r6, r2, #32
 80123e0:	6843      	ldr	r3, [r0, #4]
 80123e2:	6804      	ldr	r4, [r0, #0]
 80123e4:	fa03 f506 	lsl.w	r5, r3, r6
 80123e8:	432c      	orrs	r4, r5
 80123ea:	40d3      	lsrs	r3, r2
 80123ec:	6004      	str	r4, [r0, #0]
 80123ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80123f2:	4288      	cmp	r0, r1
 80123f4:	d3f4      	bcc.n	80123e0 <L_shift+0xc>
 80123f6:	bd70      	pop	{r4, r5, r6, pc}

080123f8 <__match>:
 80123f8:	b530      	push	{r4, r5, lr}
 80123fa:	6803      	ldr	r3, [r0, #0]
 80123fc:	3301      	adds	r3, #1
 80123fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012402:	b914      	cbnz	r4, 801240a <__match+0x12>
 8012404:	6003      	str	r3, [r0, #0]
 8012406:	2001      	movs	r0, #1
 8012408:	bd30      	pop	{r4, r5, pc}
 801240a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801240e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012412:	2d19      	cmp	r5, #25
 8012414:	bf98      	it	ls
 8012416:	3220      	addls	r2, #32
 8012418:	42a2      	cmp	r2, r4
 801241a:	d0f0      	beq.n	80123fe <__match+0x6>
 801241c:	2000      	movs	r0, #0
 801241e:	e7f3      	b.n	8012408 <__match+0x10>

08012420 <__hexnan>:
 8012420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012424:	680b      	ldr	r3, [r1, #0]
 8012426:	6801      	ldr	r1, [r0, #0]
 8012428:	115e      	asrs	r6, r3, #5
 801242a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801242e:	f013 031f 	ands.w	r3, r3, #31
 8012432:	b087      	sub	sp, #28
 8012434:	bf18      	it	ne
 8012436:	3604      	addne	r6, #4
 8012438:	2500      	movs	r5, #0
 801243a:	1f37      	subs	r7, r6, #4
 801243c:	4682      	mov	sl, r0
 801243e:	4690      	mov	r8, r2
 8012440:	9301      	str	r3, [sp, #4]
 8012442:	f846 5c04 	str.w	r5, [r6, #-4]
 8012446:	46b9      	mov	r9, r7
 8012448:	463c      	mov	r4, r7
 801244a:	9502      	str	r5, [sp, #8]
 801244c:	46ab      	mov	fp, r5
 801244e:	784a      	ldrb	r2, [r1, #1]
 8012450:	1c4b      	adds	r3, r1, #1
 8012452:	9303      	str	r3, [sp, #12]
 8012454:	b342      	cbz	r2, 80124a8 <__hexnan+0x88>
 8012456:	4610      	mov	r0, r2
 8012458:	9105      	str	r1, [sp, #20]
 801245a:	9204      	str	r2, [sp, #16]
 801245c:	f7ff fd94 	bl	8011f88 <__hexdig_fun>
 8012460:	2800      	cmp	r0, #0
 8012462:	d151      	bne.n	8012508 <__hexnan+0xe8>
 8012464:	9a04      	ldr	r2, [sp, #16]
 8012466:	9905      	ldr	r1, [sp, #20]
 8012468:	2a20      	cmp	r2, #32
 801246a:	d818      	bhi.n	801249e <__hexnan+0x7e>
 801246c:	9b02      	ldr	r3, [sp, #8]
 801246e:	459b      	cmp	fp, r3
 8012470:	dd13      	ble.n	801249a <__hexnan+0x7a>
 8012472:	454c      	cmp	r4, r9
 8012474:	d206      	bcs.n	8012484 <__hexnan+0x64>
 8012476:	2d07      	cmp	r5, #7
 8012478:	dc04      	bgt.n	8012484 <__hexnan+0x64>
 801247a:	462a      	mov	r2, r5
 801247c:	4649      	mov	r1, r9
 801247e:	4620      	mov	r0, r4
 8012480:	f7ff ffa8 	bl	80123d4 <L_shift>
 8012484:	4544      	cmp	r4, r8
 8012486:	d952      	bls.n	801252e <__hexnan+0x10e>
 8012488:	2300      	movs	r3, #0
 801248a:	f1a4 0904 	sub.w	r9, r4, #4
 801248e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012492:	f8cd b008 	str.w	fp, [sp, #8]
 8012496:	464c      	mov	r4, r9
 8012498:	461d      	mov	r5, r3
 801249a:	9903      	ldr	r1, [sp, #12]
 801249c:	e7d7      	b.n	801244e <__hexnan+0x2e>
 801249e:	2a29      	cmp	r2, #41	@ 0x29
 80124a0:	d157      	bne.n	8012552 <__hexnan+0x132>
 80124a2:	3102      	adds	r1, #2
 80124a4:	f8ca 1000 	str.w	r1, [sl]
 80124a8:	f1bb 0f00 	cmp.w	fp, #0
 80124ac:	d051      	beq.n	8012552 <__hexnan+0x132>
 80124ae:	454c      	cmp	r4, r9
 80124b0:	d206      	bcs.n	80124c0 <__hexnan+0xa0>
 80124b2:	2d07      	cmp	r5, #7
 80124b4:	dc04      	bgt.n	80124c0 <__hexnan+0xa0>
 80124b6:	462a      	mov	r2, r5
 80124b8:	4649      	mov	r1, r9
 80124ba:	4620      	mov	r0, r4
 80124bc:	f7ff ff8a 	bl	80123d4 <L_shift>
 80124c0:	4544      	cmp	r4, r8
 80124c2:	d936      	bls.n	8012532 <__hexnan+0x112>
 80124c4:	f1a8 0204 	sub.w	r2, r8, #4
 80124c8:	4623      	mov	r3, r4
 80124ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80124ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80124d2:	429f      	cmp	r7, r3
 80124d4:	d2f9      	bcs.n	80124ca <__hexnan+0xaa>
 80124d6:	1b3b      	subs	r3, r7, r4
 80124d8:	f023 0303 	bic.w	r3, r3, #3
 80124dc:	3304      	adds	r3, #4
 80124de:	3401      	adds	r4, #1
 80124e0:	3e03      	subs	r6, #3
 80124e2:	42b4      	cmp	r4, r6
 80124e4:	bf88      	it	hi
 80124e6:	2304      	movhi	r3, #4
 80124e8:	4443      	add	r3, r8
 80124ea:	2200      	movs	r2, #0
 80124ec:	f843 2b04 	str.w	r2, [r3], #4
 80124f0:	429f      	cmp	r7, r3
 80124f2:	d2fb      	bcs.n	80124ec <__hexnan+0xcc>
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	b91b      	cbnz	r3, 8012500 <__hexnan+0xe0>
 80124f8:	4547      	cmp	r7, r8
 80124fa:	d128      	bne.n	801254e <__hexnan+0x12e>
 80124fc:	2301      	movs	r3, #1
 80124fe:	603b      	str	r3, [r7, #0]
 8012500:	2005      	movs	r0, #5
 8012502:	b007      	add	sp, #28
 8012504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012508:	3501      	adds	r5, #1
 801250a:	2d08      	cmp	r5, #8
 801250c:	f10b 0b01 	add.w	fp, fp, #1
 8012510:	dd06      	ble.n	8012520 <__hexnan+0x100>
 8012512:	4544      	cmp	r4, r8
 8012514:	d9c1      	bls.n	801249a <__hexnan+0x7a>
 8012516:	2300      	movs	r3, #0
 8012518:	f844 3c04 	str.w	r3, [r4, #-4]
 801251c:	2501      	movs	r5, #1
 801251e:	3c04      	subs	r4, #4
 8012520:	6822      	ldr	r2, [r4, #0]
 8012522:	f000 000f 	and.w	r0, r0, #15
 8012526:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801252a:	6020      	str	r0, [r4, #0]
 801252c:	e7b5      	b.n	801249a <__hexnan+0x7a>
 801252e:	2508      	movs	r5, #8
 8012530:	e7b3      	b.n	801249a <__hexnan+0x7a>
 8012532:	9b01      	ldr	r3, [sp, #4]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d0dd      	beq.n	80124f4 <__hexnan+0xd4>
 8012538:	f1c3 0320 	rsb	r3, r3, #32
 801253c:	f04f 32ff 	mov.w	r2, #4294967295
 8012540:	40da      	lsrs	r2, r3
 8012542:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012546:	4013      	ands	r3, r2
 8012548:	f846 3c04 	str.w	r3, [r6, #-4]
 801254c:	e7d2      	b.n	80124f4 <__hexnan+0xd4>
 801254e:	3f04      	subs	r7, #4
 8012550:	e7d0      	b.n	80124f4 <__hexnan+0xd4>
 8012552:	2004      	movs	r0, #4
 8012554:	e7d5      	b.n	8012502 <__hexnan+0xe2>

08012556 <__ascii_mbtowc>:
 8012556:	b082      	sub	sp, #8
 8012558:	b901      	cbnz	r1, 801255c <__ascii_mbtowc+0x6>
 801255a:	a901      	add	r1, sp, #4
 801255c:	b142      	cbz	r2, 8012570 <__ascii_mbtowc+0x1a>
 801255e:	b14b      	cbz	r3, 8012574 <__ascii_mbtowc+0x1e>
 8012560:	7813      	ldrb	r3, [r2, #0]
 8012562:	600b      	str	r3, [r1, #0]
 8012564:	7812      	ldrb	r2, [r2, #0]
 8012566:	1e10      	subs	r0, r2, #0
 8012568:	bf18      	it	ne
 801256a:	2001      	movne	r0, #1
 801256c:	b002      	add	sp, #8
 801256e:	4770      	bx	lr
 8012570:	4610      	mov	r0, r2
 8012572:	e7fb      	b.n	801256c <__ascii_mbtowc+0x16>
 8012574:	f06f 0001 	mvn.w	r0, #1
 8012578:	e7f8      	b.n	801256c <__ascii_mbtowc+0x16>

0801257a <_realloc_r>:
 801257a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801257e:	4607      	mov	r7, r0
 8012580:	4614      	mov	r4, r2
 8012582:	460d      	mov	r5, r1
 8012584:	b921      	cbnz	r1, 8012590 <_realloc_r+0x16>
 8012586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801258a:	4611      	mov	r1, r2
 801258c:	f7fb b8d8 	b.w	800d740 <_malloc_r>
 8012590:	b92a      	cbnz	r2, 801259e <_realloc_r+0x24>
 8012592:	f7fd fe71 	bl	8010278 <_free_r>
 8012596:	4625      	mov	r5, r4
 8012598:	4628      	mov	r0, r5
 801259a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259e:	f000 fbd1 	bl	8012d44 <_malloc_usable_size_r>
 80125a2:	4284      	cmp	r4, r0
 80125a4:	4606      	mov	r6, r0
 80125a6:	d802      	bhi.n	80125ae <_realloc_r+0x34>
 80125a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80125ac:	d8f4      	bhi.n	8012598 <_realloc_r+0x1e>
 80125ae:	4621      	mov	r1, r4
 80125b0:	4638      	mov	r0, r7
 80125b2:	f7fb f8c5 	bl	800d740 <_malloc_r>
 80125b6:	4680      	mov	r8, r0
 80125b8:	b908      	cbnz	r0, 80125be <_realloc_r+0x44>
 80125ba:	4645      	mov	r5, r8
 80125bc:	e7ec      	b.n	8012598 <_realloc_r+0x1e>
 80125be:	42b4      	cmp	r4, r6
 80125c0:	4622      	mov	r2, r4
 80125c2:	4629      	mov	r1, r5
 80125c4:	bf28      	it	cs
 80125c6:	4632      	movcs	r2, r6
 80125c8:	f7fc ffdf 	bl	800f58a <memcpy>
 80125cc:	4629      	mov	r1, r5
 80125ce:	4638      	mov	r0, r7
 80125d0:	f7fd fe52 	bl	8010278 <_free_r>
 80125d4:	e7f1      	b.n	80125ba <_realloc_r+0x40>

080125d6 <__ascii_wctomb>:
 80125d6:	4603      	mov	r3, r0
 80125d8:	4608      	mov	r0, r1
 80125da:	b141      	cbz	r1, 80125ee <__ascii_wctomb+0x18>
 80125dc:	2aff      	cmp	r2, #255	@ 0xff
 80125de:	d904      	bls.n	80125ea <__ascii_wctomb+0x14>
 80125e0:	228a      	movs	r2, #138	@ 0x8a
 80125e2:	601a      	str	r2, [r3, #0]
 80125e4:	f04f 30ff 	mov.w	r0, #4294967295
 80125e8:	4770      	bx	lr
 80125ea:	700a      	strb	r2, [r1, #0]
 80125ec:	2001      	movs	r0, #1
 80125ee:	4770      	bx	lr

080125f0 <_sungetc_r>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	1c4b      	adds	r3, r1, #1
 80125f4:	4614      	mov	r4, r2
 80125f6:	d103      	bne.n	8012600 <_sungetc_r+0x10>
 80125f8:	f04f 35ff 	mov.w	r5, #4294967295
 80125fc:	4628      	mov	r0, r5
 80125fe:	bd38      	pop	{r3, r4, r5, pc}
 8012600:	8993      	ldrh	r3, [r2, #12]
 8012602:	f023 0320 	bic.w	r3, r3, #32
 8012606:	8193      	strh	r3, [r2, #12]
 8012608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801260a:	6852      	ldr	r2, [r2, #4]
 801260c:	b2cd      	uxtb	r5, r1
 801260e:	b18b      	cbz	r3, 8012634 <_sungetc_r+0x44>
 8012610:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012612:	4293      	cmp	r3, r2
 8012614:	dd08      	ble.n	8012628 <_sungetc_r+0x38>
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	1e5a      	subs	r2, r3, #1
 801261a:	6022      	str	r2, [r4, #0]
 801261c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012620:	6863      	ldr	r3, [r4, #4]
 8012622:	3301      	adds	r3, #1
 8012624:	6063      	str	r3, [r4, #4]
 8012626:	e7e9      	b.n	80125fc <_sungetc_r+0xc>
 8012628:	4621      	mov	r1, r4
 801262a:	f000 fb4a 	bl	8012cc2 <__submore>
 801262e:	2800      	cmp	r0, #0
 8012630:	d0f1      	beq.n	8012616 <_sungetc_r+0x26>
 8012632:	e7e1      	b.n	80125f8 <_sungetc_r+0x8>
 8012634:	6921      	ldr	r1, [r4, #16]
 8012636:	6823      	ldr	r3, [r4, #0]
 8012638:	b151      	cbz	r1, 8012650 <_sungetc_r+0x60>
 801263a:	4299      	cmp	r1, r3
 801263c:	d208      	bcs.n	8012650 <_sungetc_r+0x60>
 801263e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012642:	42a9      	cmp	r1, r5
 8012644:	d104      	bne.n	8012650 <_sungetc_r+0x60>
 8012646:	3b01      	subs	r3, #1
 8012648:	3201      	adds	r2, #1
 801264a:	6023      	str	r3, [r4, #0]
 801264c:	6062      	str	r2, [r4, #4]
 801264e:	e7d5      	b.n	80125fc <_sungetc_r+0xc>
 8012650:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8012654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012658:	6363      	str	r3, [r4, #52]	@ 0x34
 801265a:	2303      	movs	r3, #3
 801265c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801265e:	4623      	mov	r3, r4
 8012660:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012664:	6023      	str	r3, [r4, #0]
 8012666:	2301      	movs	r3, #1
 8012668:	e7dc      	b.n	8012624 <_sungetc_r+0x34>

0801266a <__ssrefill_r>:
 801266a:	b510      	push	{r4, lr}
 801266c:	460c      	mov	r4, r1
 801266e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012670:	b169      	cbz	r1, 801268e <__ssrefill_r+0x24>
 8012672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012676:	4299      	cmp	r1, r3
 8012678:	d001      	beq.n	801267e <__ssrefill_r+0x14>
 801267a:	f7fd fdfd 	bl	8010278 <_free_r>
 801267e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012680:	6063      	str	r3, [r4, #4]
 8012682:	2000      	movs	r0, #0
 8012684:	6360      	str	r0, [r4, #52]	@ 0x34
 8012686:	b113      	cbz	r3, 801268e <__ssrefill_r+0x24>
 8012688:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801268a:	6023      	str	r3, [r4, #0]
 801268c:	bd10      	pop	{r4, pc}
 801268e:	6923      	ldr	r3, [r4, #16]
 8012690:	6023      	str	r3, [r4, #0]
 8012692:	2300      	movs	r3, #0
 8012694:	6063      	str	r3, [r4, #4]
 8012696:	89a3      	ldrh	r3, [r4, #12]
 8012698:	f043 0320 	orr.w	r3, r3, #32
 801269c:	81a3      	strh	r3, [r4, #12]
 801269e:	f04f 30ff 	mov.w	r0, #4294967295
 80126a2:	e7f3      	b.n	801268c <__ssrefill_r+0x22>

080126a4 <__ssvfiscanf_r>:
 80126a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a8:	460c      	mov	r4, r1
 80126aa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80126ae:	2100      	movs	r1, #0
 80126b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80126b4:	49a6      	ldr	r1, [pc, #664]	@ (8012950 <__ssvfiscanf_r+0x2ac>)
 80126b6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80126b8:	f10d 0804 	add.w	r8, sp, #4
 80126bc:	49a5      	ldr	r1, [pc, #660]	@ (8012954 <__ssvfiscanf_r+0x2b0>)
 80126be:	4fa6      	ldr	r7, [pc, #664]	@ (8012958 <__ssvfiscanf_r+0x2b4>)
 80126c0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80126c4:	4606      	mov	r6, r0
 80126c6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	f892 9000 	ldrb.w	r9, [r2]
 80126ce:	f1b9 0f00 	cmp.w	r9, #0
 80126d2:	f000 8158 	beq.w	8012986 <__ssvfiscanf_r+0x2e2>
 80126d6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80126da:	f013 0308 	ands.w	r3, r3, #8
 80126de:	f102 0501 	add.w	r5, r2, #1
 80126e2:	d019      	beq.n	8012718 <__ssvfiscanf_r+0x74>
 80126e4:	6863      	ldr	r3, [r4, #4]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	dd0f      	ble.n	801270a <__ssvfiscanf_r+0x66>
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	781a      	ldrb	r2, [r3, #0]
 80126ee:	5cba      	ldrb	r2, [r7, r2]
 80126f0:	0712      	lsls	r2, r2, #28
 80126f2:	d401      	bmi.n	80126f8 <__ssvfiscanf_r+0x54>
 80126f4:	462a      	mov	r2, r5
 80126f6:	e7e8      	b.n	80126ca <__ssvfiscanf_r+0x26>
 80126f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80126fa:	3201      	adds	r2, #1
 80126fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80126fe:	6862      	ldr	r2, [r4, #4]
 8012700:	3301      	adds	r3, #1
 8012702:	3a01      	subs	r2, #1
 8012704:	6062      	str	r2, [r4, #4]
 8012706:	6023      	str	r3, [r4, #0]
 8012708:	e7ec      	b.n	80126e4 <__ssvfiscanf_r+0x40>
 801270a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801270c:	4621      	mov	r1, r4
 801270e:	4630      	mov	r0, r6
 8012710:	4798      	blx	r3
 8012712:	2800      	cmp	r0, #0
 8012714:	d0e9      	beq.n	80126ea <__ssvfiscanf_r+0x46>
 8012716:	e7ed      	b.n	80126f4 <__ssvfiscanf_r+0x50>
 8012718:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801271c:	f040 8085 	bne.w	801282a <__ssvfiscanf_r+0x186>
 8012720:	9341      	str	r3, [sp, #260]	@ 0x104
 8012722:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012724:	7853      	ldrb	r3, [r2, #1]
 8012726:	2b2a      	cmp	r3, #42	@ 0x2a
 8012728:	bf02      	ittt	eq
 801272a:	2310      	moveq	r3, #16
 801272c:	1c95      	addeq	r5, r2, #2
 801272e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012730:	220a      	movs	r2, #10
 8012732:	46aa      	mov	sl, r5
 8012734:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012738:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801273c:	2b09      	cmp	r3, #9
 801273e:	d91e      	bls.n	801277e <__ssvfiscanf_r+0xda>
 8012740:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801295c <__ssvfiscanf_r+0x2b8>
 8012744:	2203      	movs	r2, #3
 8012746:	4658      	mov	r0, fp
 8012748:	f7ed fd52 	bl	80001f0 <memchr>
 801274c:	b138      	cbz	r0, 801275e <__ssvfiscanf_r+0xba>
 801274e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012750:	eba0 000b 	sub.w	r0, r0, fp
 8012754:	2301      	movs	r3, #1
 8012756:	4083      	lsls	r3, r0
 8012758:	4313      	orrs	r3, r2
 801275a:	9341      	str	r3, [sp, #260]	@ 0x104
 801275c:	4655      	mov	r5, sl
 801275e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012762:	2b78      	cmp	r3, #120	@ 0x78
 8012764:	d806      	bhi.n	8012774 <__ssvfiscanf_r+0xd0>
 8012766:	2b57      	cmp	r3, #87	@ 0x57
 8012768:	d810      	bhi.n	801278c <__ssvfiscanf_r+0xe8>
 801276a:	2b25      	cmp	r3, #37	@ 0x25
 801276c:	d05d      	beq.n	801282a <__ssvfiscanf_r+0x186>
 801276e:	d857      	bhi.n	8012820 <__ssvfiscanf_r+0x17c>
 8012770:	2b00      	cmp	r3, #0
 8012772:	d075      	beq.n	8012860 <__ssvfiscanf_r+0x1bc>
 8012774:	2303      	movs	r3, #3
 8012776:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012778:	230a      	movs	r3, #10
 801277a:	9342      	str	r3, [sp, #264]	@ 0x108
 801277c:	e088      	b.n	8012890 <__ssvfiscanf_r+0x1ec>
 801277e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012780:	fb02 1103 	mla	r1, r2, r3, r1
 8012784:	3930      	subs	r1, #48	@ 0x30
 8012786:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012788:	4655      	mov	r5, sl
 801278a:	e7d2      	b.n	8012732 <__ssvfiscanf_r+0x8e>
 801278c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012790:	2a20      	cmp	r2, #32
 8012792:	d8ef      	bhi.n	8012774 <__ssvfiscanf_r+0xd0>
 8012794:	a101      	add	r1, pc, #4	@ (adr r1, 801279c <__ssvfiscanf_r+0xf8>)
 8012796:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801279a:	bf00      	nop
 801279c:	0801286f 	.word	0x0801286f
 80127a0:	08012775 	.word	0x08012775
 80127a4:	08012775 	.word	0x08012775
 80127a8:	080128c9 	.word	0x080128c9
 80127ac:	08012775 	.word	0x08012775
 80127b0:	08012775 	.word	0x08012775
 80127b4:	08012775 	.word	0x08012775
 80127b8:	08012775 	.word	0x08012775
 80127bc:	08012775 	.word	0x08012775
 80127c0:	08012775 	.word	0x08012775
 80127c4:	08012775 	.word	0x08012775
 80127c8:	080128df 	.word	0x080128df
 80127cc:	080128c5 	.word	0x080128c5
 80127d0:	08012827 	.word	0x08012827
 80127d4:	08012827 	.word	0x08012827
 80127d8:	08012827 	.word	0x08012827
 80127dc:	08012775 	.word	0x08012775
 80127e0:	08012881 	.word	0x08012881
 80127e4:	08012775 	.word	0x08012775
 80127e8:	08012775 	.word	0x08012775
 80127ec:	08012775 	.word	0x08012775
 80127f0:	08012775 	.word	0x08012775
 80127f4:	080128ef 	.word	0x080128ef
 80127f8:	08012889 	.word	0x08012889
 80127fc:	08012867 	.word	0x08012867
 8012800:	08012775 	.word	0x08012775
 8012804:	08012775 	.word	0x08012775
 8012808:	080128eb 	.word	0x080128eb
 801280c:	08012775 	.word	0x08012775
 8012810:	080128c5 	.word	0x080128c5
 8012814:	08012775 	.word	0x08012775
 8012818:	08012775 	.word	0x08012775
 801281c:	0801286f 	.word	0x0801286f
 8012820:	3b45      	subs	r3, #69	@ 0x45
 8012822:	2b02      	cmp	r3, #2
 8012824:	d8a6      	bhi.n	8012774 <__ssvfiscanf_r+0xd0>
 8012826:	2305      	movs	r3, #5
 8012828:	e031      	b.n	801288e <__ssvfiscanf_r+0x1ea>
 801282a:	6863      	ldr	r3, [r4, #4]
 801282c:	2b00      	cmp	r3, #0
 801282e:	dd0d      	ble.n	801284c <__ssvfiscanf_r+0x1a8>
 8012830:	6823      	ldr	r3, [r4, #0]
 8012832:	781a      	ldrb	r2, [r3, #0]
 8012834:	454a      	cmp	r2, r9
 8012836:	f040 80a6 	bne.w	8012986 <__ssvfiscanf_r+0x2e2>
 801283a:	3301      	adds	r3, #1
 801283c:	6862      	ldr	r2, [r4, #4]
 801283e:	6023      	str	r3, [r4, #0]
 8012840:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012842:	3a01      	subs	r2, #1
 8012844:	3301      	adds	r3, #1
 8012846:	6062      	str	r2, [r4, #4]
 8012848:	9345      	str	r3, [sp, #276]	@ 0x114
 801284a:	e753      	b.n	80126f4 <__ssvfiscanf_r+0x50>
 801284c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801284e:	4621      	mov	r1, r4
 8012850:	4630      	mov	r0, r6
 8012852:	4798      	blx	r3
 8012854:	2800      	cmp	r0, #0
 8012856:	d0eb      	beq.n	8012830 <__ssvfiscanf_r+0x18c>
 8012858:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801285a:	2800      	cmp	r0, #0
 801285c:	f040 808b 	bne.w	8012976 <__ssvfiscanf_r+0x2d2>
 8012860:	f04f 30ff 	mov.w	r0, #4294967295
 8012864:	e08b      	b.n	801297e <__ssvfiscanf_r+0x2da>
 8012866:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012868:	f042 0220 	orr.w	r2, r2, #32
 801286c:	9241      	str	r2, [sp, #260]	@ 0x104
 801286e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012874:	9241      	str	r2, [sp, #260]	@ 0x104
 8012876:	2210      	movs	r2, #16
 8012878:	2b6e      	cmp	r3, #110	@ 0x6e
 801287a:	9242      	str	r2, [sp, #264]	@ 0x108
 801287c:	d902      	bls.n	8012884 <__ssvfiscanf_r+0x1e0>
 801287e:	e005      	b.n	801288c <__ssvfiscanf_r+0x1e8>
 8012880:	2300      	movs	r3, #0
 8012882:	9342      	str	r3, [sp, #264]	@ 0x108
 8012884:	2303      	movs	r3, #3
 8012886:	e002      	b.n	801288e <__ssvfiscanf_r+0x1ea>
 8012888:	2308      	movs	r3, #8
 801288a:	9342      	str	r3, [sp, #264]	@ 0x108
 801288c:	2304      	movs	r3, #4
 801288e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012890:	6863      	ldr	r3, [r4, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	dd39      	ble.n	801290a <__ssvfiscanf_r+0x266>
 8012896:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012898:	0659      	lsls	r1, r3, #25
 801289a:	d404      	bmi.n	80128a6 <__ssvfiscanf_r+0x202>
 801289c:	6823      	ldr	r3, [r4, #0]
 801289e:	781a      	ldrb	r2, [r3, #0]
 80128a0:	5cba      	ldrb	r2, [r7, r2]
 80128a2:	0712      	lsls	r2, r2, #28
 80128a4:	d438      	bmi.n	8012918 <__ssvfiscanf_r+0x274>
 80128a6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80128a8:	2b02      	cmp	r3, #2
 80128aa:	dc47      	bgt.n	801293c <__ssvfiscanf_r+0x298>
 80128ac:	466b      	mov	r3, sp
 80128ae:	4622      	mov	r2, r4
 80128b0:	a941      	add	r1, sp, #260	@ 0x104
 80128b2:	4630      	mov	r0, r6
 80128b4:	f000 f86c 	bl	8012990 <_scanf_chars>
 80128b8:	2801      	cmp	r0, #1
 80128ba:	d064      	beq.n	8012986 <__ssvfiscanf_r+0x2e2>
 80128bc:	2802      	cmp	r0, #2
 80128be:	f47f af19 	bne.w	80126f4 <__ssvfiscanf_r+0x50>
 80128c2:	e7c9      	b.n	8012858 <__ssvfiscanf_r+0x1b4>
 80128c4:	220a      	movs	r2, #10
 80128c6:	e7d7      	b.n	8012878 <__ssvfiscanf_r+0x1d4>
 80128c8:	4629      	mov	r1, r5
 80128ca:	4640      	mov	r0, r8
 80128cc:	f000 f9c0 	bl	8012c50 <__sccl>
 80128d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80128d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128d6:	9341      	str	r3, [sp, #260]	@ 0x104
 80128d8:	4605      	mov	r5, r0
 80128da:	2301      	movs	r3, #1
 80128dc:	e7d7      	b.n	801288e <__ssvfiscanf_r+0x1ea>
 80128de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80128e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80128e6:	2300      	movs	r3, #0
 80128e8:	e7d1      	b.n	801288e <__ssvfiscanf_r+0x1ea>
 80128ea:	2302      	movs	r3, #2
 80128ec:	e7cf      	b.n	801288e <__ssvfiscanf_r+0x1ea>
 80128ee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80128f0:	06c3      	lsls	r3, r0, #27
 80128f2:	f53f aeff 	bmi.w	80126f4 <__ssvfiscanf_r+0x50>
 80128f6:	9b00      	ldr	r3, [sp, #0]
 80128f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80128fa:	1d19      	adds	r1, r3, #4
 80128fc:	9100      	str	r1, [sp, #0]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	07c0      	lsls	r0, r0, #31
 8012902:	bf4c      	ite	mi
 8012904:	801a      	strhmi	r2, [r3, #0]
 8012906:	601a      	strpl	r2, [r3, #0]
 8012908:	e6f4      	b.n	80126f4 <__ssvfiscanf_r+0x50>
 801290a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801290c:	4621      	mov	r1, r4
 801290e:	4630      	mov	r0, r6
 8012910:	4798      	blx	r3
 8012912:	2800      	cmp	r0, #0
 8012914:	d0bf      	beq.n	8012896 <__ssvfiscanf_r+0x1f2>
 8012916:	e79f      	b.n	8012858 <__ssvfiscanf_r+0x1b4>
 8012918:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801291a:	3201      	adds	r2, #1
 801291c:	9245      	str	r2, [sp, #276]	@ 0x114
 801291e:	6862      	ldr	r2, [r4, #4]
 8012920:	3a01      	subs	r2, #1
 8012922:	2a00      	cmp	r2, #0
 8012924:	6062      	str	r2, [r4, #4]
 8012926:	dd02      	ble.n	801292e <__ssvfiscanf_r+0x28a>
 8012928:	3301      	adds	r3, #1
 801292a:	6023      	str	r3, [r4, #0]
 801292c:	e7b6      	b.n	801289c <__ssvfiscanf_r+0x1f8>
 801292e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012930:	4621      	mov	r1, r4
 8012932:	4630      	mov	r0, r6
 8012934:	4798      	blx	r3
 8012936:	2800      	cmp	r0, #0
 8012938:	d0b0      	beq.n	801289c <__ssvfiscanf_r+0x1f8>
 801293a:	e78d      	b.n	8012858 <__ssvfiscanf_r+0x1b4>
 801293c:	2b04      	cmp	r3, #4
 801293e:	dc0f      	bgt.n	8012960 <__ssvfiscanf_r+0x2bc>
 8012940:	466b      	mov	r3, sp
 8012942:	4622      	mov	r2, r4
 8012944:	a941      	add	r1, sp, #260	@ 0x104
 8012946:	4630      	mov	r0, r6
 8012948:	f000 f87c 	bl	8012a44 <_scanf_i>
 801294c:	e7b4      	b.n	80128b8 <__ssvfiscanf_r+0x214>
 801294e:	bf00      	nop
 8012950:	080125f1 	.word	0x080125f1
 8012954:	0801266b 	.word	0x0801266b
 8012958:	0803e001 	.word	0x0803e001
 801295c:	0803e274 	.word	0x0803e274
 8012960:	4b0a      	ldr	r3, [pc, #40]	@ (801298c <__ssvfiscanf_r+0x2e8>)
 8012962:	2b00      	cmp	r3, #0
 8012964:	f43f aec6 	beq.w	80126f4 <__ssvfiscanf_r+0x50>
 8012968:	466b      	mov	r3, sp
 801296a:	4622      	mov	r2, r4
 801296c:	a941      	add	r1, sp, #260	@ 0x104
 801296e:	4630      	mov	r0, r6
 8012970:	f7fb fc4e 	bl	800e210 <_scanf_float>
 8012974:	e7a0      	b.n	80128b8 <__ssvfiscanf_r+0x214>
 8012976:	89a3      	ldrh	r3, [r4, #12]
 8012978:	065b      	lsls	r3, r3, #25
 801297a:	f53f af71 	bmi.w	8012860 <__ssvfiscanf_r+0x1bc>
 801297e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8012982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012986:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012988:	e7f9      	b.n	801297e <__ssvfiscanf_r+0x2da>
 801298a:	bf00      	nop
 801298c:	0800e211 	.word	0x0800e211

08012990 <_scanf_chars>:
 8012990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012994:	4615      	mov	r5, r2
 8012996:	688a      	ldr	r2, [r1, #8]
 8012998:	4680      	mov	r8, r0
 801299a:	460c      	mov	r4, r1
 801299c:	b932      	cbnz	r2, 80129ac <_scanf_chars+0x1c>
 801299e:	698a      	ldr	r2, [r1, #24]
 80129a0:	2a00      	cmp	r2, #0
 80129a2:	bf14      	ite	ne
 80129a4:	f04f 32ff 	movne.w	r2, #4294967295
 80129a8:	2201      	moveq	r2, #1
 80129aa:	608a      	str	r2, [r1, #8]
 80129ac:	6822      	ldr	r2, [r4, #0]
 80129ae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012a40 <_scanf_chars+0xb0>
 80129b2:	06d1      	lsls	r1, r2, #27
 80129b4:	bf5f      	itttt	pl
 80129b6:	681a      	ldrpl	r2, [r3, #0]
 80129b8:	1d11      	addpl	r1, r2, #4
 80129ba:	6019      	strpl	r1, [r3, #0]
 80129bc:	6816      	ldrpl	r6, [r2, #0]
 80129be:	2700      	movs	r7, #0
 80129c0:	69a0      	ldr	r0, [r4, #24]
 80129c2:	b188      	cbz	r0, 80129e8 <_scanf_chars+0x58>
 80129c4:	2801      	cmp	r0, #1
 80129c6:	d107      	bne.n	80129d8 <_scanf_chars+0x48>
 80129c8:	682b      	ldr	r3, [r5, #0]
 80129ca:	781a      	ldrb	r2, [r3, #0]
 80129cc:	6963      	ldr	r3, [r4, #20]
 80129ce:	5c9b      	ldrb	r3, [r3, r2]
 80129d0:	b953      	cbnz	r3, 80129e8 <_scanf_chars+0x58>
 80129d2:	2f00      	cmp	r7, #0
 80129d4:	d031      	beq.n	8012a3a <_scanf_chars+0xaa>
 80129d6:	e022      	b.n	8012a1e <_scanf_chars+0x8e>
 80129d8:	2802      	cmp	r0, #2
 80129da:	d120      	bne.n	8012a1e <_scanf_chars+0x8e>
 80129dc:	682b      	ldr	r3, [r5, #0]
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80129e4:	071b      	lsls	r3, r3, #28
 80129e6:	d41a      	bmi.n	8012a1e <_scanf_chars+0x8e>
 80129e8:	6823      	ldr	r3, [r4, #0]
 80129ea:	06da      	lsls	r2, r3, #27
 80129ec:	bf5e      	ittt	pl
 80129ee:	682b      	ldrpl	r3, [r5, #0]
 80129f0:	781b      	ldrbpl	r3, [r3, #0]
 80129f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80129f6:	682a      	ldr	r2, [r5, #0]
 80129f8:	686b      	ldr	r3, [r5, #4]
 80129fa:	3201      	adds	r2, #1
 80129fc:	602a      	str	r2, [r5, #0]
 80129fe:	68a2      	ldr	r2, [r4, #8]
 8012a00:	3b01      	subs	r3, #1
 8012a02:	3a01      	subs	r2, #1
 8012a04:	606b      	str	r3, [r5, #4]
 8012a06:	3701      	adds	r7, #1
 8012a08:	60a2      	str	r2, [r4, #8]
 8012a0a:	b142      	cbz	r2, 8012a1e <_scanf_chars+0x8e>
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	dcd7      	bgt.n	80129c0 <_scanf_chars+0x30>
 8012a10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012a14:	4629      	mov	r1, r5
 8012a16:	4640      	mov	r0, r8
 8012a18:	4798      	blx	r3
 8012a1a:	2800      	cmp	r0, #0
 8012a1c:	d0d0      	beq.n	80129c0 <_scanf_chars+0x30>
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	f013 0310 	ands.w	r3, r3, #16
 8012a24:	d105      	bne.n	8012a32 <_scanf_chars+0xa2>
 8012a26:	68e2      	ldr	r2, [r4, #12]
 8012a28:	3201      	adds	r2, #1
 8012a2a:	60e2      	str	r2, [r4, #12]
 8012a2c:	69a2      	ldr	r2, [r4, #24]
 8012a2e:	b102      	cbz	r2, 8012a32 <_scanf_chars+0xa2>
 8012a30:	7033      	strb	r3, [r6, #0]
 8012a32:	6923      	ldr	r3, [r4, #16]
 8012a34:	443b      	add	r3, r7
 8012a36:	6123      	str	r3, [r4, #16]
 8012a38:	2000      	movs	r0, #0
 8012a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a3e:	bf00      	nop
 8012a40:	0803e001 	.word	0x0803e001

08012a44 <_scanf_i>:
 8012a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a48:	4698      	mov	r8, r3
 8012a4a:	4b74      	ldr	r3, [pc, #464]	@ (8012c1c <_scanf_i+0x1d8>)
 8012a4c:	460c      	mov	r4, r1
 8012a4e:	4682      	mov	sl, r0
 8012a50:	4616      	mov	r6, r2
 8012a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a56:	b087      	sub	sp, #28
 8012a58:	ab03      	add	r3, sp, #12
 8012a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012a5e:	4b70      	ldr	r3, [pc, #448]	@ (8012c20 <_scanf_i+0x1dc>)
 8012a60:	69a1      	ldr	r1, [r4, #24]
 8012a62:	4a70      	ldr	r2, [pc, #448]	@ (8012c24 <_scanf_i+0x1e0>)
 8012a64:	2903      	cmp	r1, #3
 8012a66:	bf08      	it	eq
 8012a68:	461a      	moveq	r2, r3
 8012a6a:	68a3      	ldr	r3, [r4, #8]
 8012a6c:	9201      	str	r2, [sp, #4]
 8012a6e:	1e5a      	subs	r2, r3, #1
 8012a70:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012a74:	bf88      	it	hi
 8012a76:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012a7a:	4627      	mov	r7, r4
 8012a7c:	bf82      	ittt	hi
 8012a7e:	eb03 0905 	addhi.w	r9, r3, r5
 8012a82:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012a86:	60a3      	strhi	r3, [r4, #8]
 8012a88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012a8c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012a90:	bf98      	it	ls
 8012a92:	f04f 0900 	movls.w	r9, #0
 8012a96:	6023      	str	r3, [r4, #0]
 8012a98:	463d      	mov	r5, r7
 8012a9a:	f04f 0b00 	mov.w	fp, #0
 8012a9e:	6831      	ldr	r1, [r6, #0]
 8012aa0:	ab03      	add	r3, sp, #12
 8012aa2:	7809      	ldrb	r1, [r1, #0]
 8012aa4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012aa8:	2202      	movs	r2, #2
 8012aaa:	f7ed fba1 	bl	80001f0 <memchr>
 8012aae:	b328      	cbz	r0, 8012afc <_scanf_i+0xb8>
 8012ab0:	f1bb 0f01 	cmp.w	fp, #1
 8012ab4:	d159      	bne.n	8012b6a <_scanf_i+0x126>
 8012ab6:	6862      	ldr	r2, [r4, #4]
 8012ab8:	b92a      	cbnz	r2, 8012ac6 <_scanf_i+0x82>
 8012aba:	6822      	ldr	r2, [r4, #0]
 8012abc:	2108      	movs	r1, #8
 8012abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012ac2:	6061      	str	r1, [r4, #4]
 8012ac4:	6022      	str	r2, [r4, #0]
 8012ac6:	6822      	ldr	r2, [r4, #0]
 8012ac8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012acc:	6022      	str	r2, [r4, #0]
 8012ace:	68a2      	ldr	r2, [r4, #8]
 8012ad0:	1e51      	subs	r1, r2, #1
 8012ad2:	60a1      	str	r1, [r4, #8]
 8012ad4:	b192      	cbz	r2, 8012afc <_scanf_i+0xb8>
 8012ad6:	6832      	ldr	r2, [r6, #0]
 8012ad8:	1c51      	adds	r1, r2, #1
 8012ada:	6031      	str	r1, [r6, #0]
 8012adc:	7812      	ldrb	r2, [r2, #0]
 8012ade:	f805 2b01 	strb.w	r2, [r5], #1
 8012ae2:	6872      	ldr	r2, [r6, #4]
 8012ae4:	3a01      	subs	r2, #1
 8012ae6:	2a00      	cmp	r2, #0
 8012ae8:	6072      	str	r2, [r6, #4]
 8012aea:	dc07      	bgt.n	8012afc <_scanf_i+0xb8>
 8012aec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012af0:	4631      	mov	r1, r6
 8012af2:	4650      	mov	r0, sl
 8012af4:	4790      	blx	r2
 8012af6:	2800      	cmp	r0, #0
 8012af8:	f040 8085 	bne.w	8012c06 <_scanf_i+0x1c2>
 8012afc:	f10b 0b01 	add.w	fp, fp, #1
 8012b00:	f1bb 0f03 	cmp.w	fp, #3
 8012b04:	d1cb      	bne.n	8012a9e <_scanf_i+0x5a>
 8012b06:	6863      	ldr	r3, [r4, #4]
 8012b08:	b90b      	cbnz	r3, 8012b0e <_scanf_i+0xca>
 8012b0a:	230a      	movs	r3, #10
 8012b0c:	6063      	str	r3, [r4, #4]
 8012b0e:	6863      	ldr	r3, [r4, #4]
 8012b10:	4945      	ldr	r1, [pc, #276]	@ (8012c28 <_scanf_i+0x1e4>)
 8012b12:	6960      	ldr	r0, [r4, #20]
 8012b14:	1ac9      	subs	r1, r1, r3
 8012b16:	f000 f89b 	bl	8012c50 <__sccl>
 8012b1a:	f04f 0b00 	mov.w	fp, #0
 8012b1e:	68a3      	ldr	r3, [r4, #8]
 8012b20:	6822      	ldr	r2, [r4, #0]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d03d      	beq.n	8012ba2 <_scanf_i+0x15e>
 8012b26:	6831      	ldr	r1, [r6, #0]
 8012b28:	6960      	ldr	r0, [r4, #20]
 8012b2a:	f891 c000 	ldrb.w	ip, [r1]
 8012b2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012b32:	2800      	cmp	r0, #0
 8012b34:	d035      	beq.n	8012ba2 <_scanf_i+0x15e>
 8012b36:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012b3a:	d124      	bne.n	8012b86 <_scanf_i+0x142>
 8012b3c:	0510      	lsls	r0, r2, #20
 8012b3e:	d522      	bpl.n	8012b86 <_scanf_i+0x142>
 8012b40:	f10b 0b01 	add.w	fp, fp, #1
 8012b44:	f1b9 0f00 	cmp.w	r9, #0
 8012b48:	d003      	beq.n	8012b52 <_scanf_i+0x10e>
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012b50:	60a3      	str	r3, [r4, #8]
 8012b52:	6873      	ldr	r3, [r6, #4]
 8012b54:	3b01      	subs	r3, #1
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	6073      	str	r3, [r6, #4]
 8012b5a:	dd1b      	ble.n	8012b94 <_scanf_i+0x150>
 8012b5c:	6833      	ldr	r3, [r6, #0]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	6033      	str	r3, [r6, #0]
 8012b62:	68a3      	ldr	r3, [r4, #8]
 8012b64:	3b01      	subs	r3, #1
 8012b66:	60a3      	str	r3, [r4, #8]
 8012b68:	e7d9      	b.n	8012b1e <_scanf_i+0xda>
 8012b6a:	f1bb 0f02 	cmp.w	fp, #2
 8012b6e:	d1ae      	bne.n	8012ace <_scanf_i+0x8a>
 8012b70:	6822      	ldr	r2, [r4, #0]
 8012b72:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012b76:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012b7a:	d1c4      	bne.n	8012b06 <_scanf_i+0xc2>
 8012b7c:	2110      	movs	r1, #16
 8012b7e:	6061      	str	r1, [r4, #4]
 8012b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012b84:	e7a2      	b.n	8012acc <_scanf_i+0x88>
 8012b86:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012b8a:	6022      	str	r2, [r4, #0]
 8012b8c:	780b      	ldrb	r3, [r1, #0]
 8012b8e:	f805 3b01 	strb.w	r3, [r5], #1
 8012b92:	e7de      	b.n	8012b52 <_scanf_i+0x10e>
 8012b94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012b98:	4631      	mov	r1, r6
 8012b9a:	4650      	mov	r0, sl
 8012b9c:	4798      	blx	r3
 8012b9e:	2800      	cmp	r0, #0
 8012ba0:	d0df      	beq.n	8012b62 <_scanf_i+0x11e>
 8012ba2:	6823      	ldr	r3, [r4, #0]
 8012ba4:	05d9      	lsls	r1, r3, #23
 8012ba6:	d50d      	bpl.n	8012bc4 <_scanf_i+0x180>
 8012ba8:	42bd      	cmp	r5, r7
 8012baa:	d909      	bls.n	8012bc0 <_scanf_i+0x17c>
 8012bac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012bb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012bb4:	4632      	mov	r2, r6
 8012bb6:	4650      	mov	r0, sl
 8012bb8:	4798      	blx	r3
 8012bba:	f105 39ff 	add.w	r9, r5, #4294967295
 8012bbe:	464d      	mov	r5, r9
 8012bc0:	42bd      	cmp	r5, r7
 8012bc2:	d028      	beq.n	8012c16 <_scanf_i+0x1d2>
 8012bc4:	6822      	ldr	r2, [r4, #0]
 8012bc6:	f012 0210 	ands.w	r2, r2, #16
 8012bca:	d113      	bne.n	8012bf4 <_scanf_i+0x1b0>
 8012bcc:	702a      	strb	r2, [r5, #0]
 8012bce:	6863      	ldr	r3, [r4, #4]
 8012bd0:	9e01      	ldr	r6, [sp, #4]
 8012bd2:	4639      	mov	r1, r7
 8012bd4:	4650      	mov	r0, sl
 8012bd6:	47b0      	blx	r6
 8012bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8012bdc:	6821      	ldr	r1, [r4, #0]
 8012bde:	1d1a      	adds	r2, r3, #4
 8012be0:	f8c8 2000 	str.w	r2, [r8]
 8012be4:	f011 0f20 	tst.w	r1, #32
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	d00f      	beq.n	8012c0c <_scanf_i+0x1c8>
 8012bec:	6018      	str	r0, [r3, #0]
 8012bee:	68e3      	ldr	r3, [r4, #12]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	60e3      	str	r3, [r4, #12]
 8012bf4:	6923      	ldr	r3, [r4, #16]
 8012bf6:	1bed      	subs	r5, r5, r7
 8012bf8:	445d      	add	r5, fp
 8012bfa:	442b      	add	r3, r5
 8012bfc:	6123      	str	r3, [r4, #16]
 8012bfe:	2000      	movs	r0, #0
 8012c00:	b007      	add	sp, #28
 8012c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c06:	f04f 0b00 	mov.w	fp, #0
 8012c0a:	e7ca      	b.n	8012ba2 <_scanf_i+0x15e>
 8012c0c:	07ca      	lsls	r2, r1, #31
 8012c0e:	bf4c      	ite	mi
 8012c10:	8018      	strhmi	r0, [r3, #0]
 8012c12:	6018      	strpl	r0, [r3, #0]
 8012c14:	e7eb      	b.n	8012bee <_scanf_i+0x1aa>
 8012c16:	2001      	movs	r0, #1
 8012c18:	e7f2      	b.n	8012c00 <_scanf_i+0x1bc>
 8012c1a:	bf00      	nop
 8012c1c:	080133e4 	.word	0x080133e4
 8012c20:	0800d94d 	.word	0x0800d94d
 8012c24:	080119d9 	.word	0x080119d9
 8012c28:	0803e333 	.word	0x0803e333

08012c2c <fiprintf>:
 8012c2c:	b40e      	push	{r1, r2, r3}
 8012c2e:	b503      	push	{r0, r1, lr}
 8012c30:	4601      	mov	r1, r0
 8012c32:	ab03      	add	r3, sp, #12
 8012c34:	4805      	ldr	r0, [pc, #20]	@ (8012c4c <fiprintf+0x20>)
 8012c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c3a:	6800      	ldr	r0, [r0, #0]
 8012c3c:	9301      	str	r3, [sp, #4]
 8012c3e:	f000 f8b3 	bl	8012da8 <_vfiprintf_r>
 8012c42:	b002      	add	sp, #8
 8012c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c48:	b003      	add	sp, #12
 8012c4a:	4770      	bx	lr
 8012c4c:	20000060 	.word	0x20000060

08012c50 <__sccl>:
 8012c50:	b570      	push	{r4, r5, r6, lr}
 8012c52:	780b      	ldrb	r3, [r1, #0]
 8012c54:	4604      	mov	r4, r0
 8012c56:	2b5e      	cmp	r3, #94	@ 0x5e
 8012c58:	bf0b      	itete	eq
 8012c5a:	784b      	ldrbeq	r3, [r1, #1]
 8012c5c:	1c4a      	addne	r2, r1, #1
 8012c5e:	1c8a      	addeq	r2, r1, #2
 8012c60:	2100      	movne	r1, #0
 8012c62:	bf08      	it	eq
 8012c64:	2101      	moveq	r1, #1
 8012c66:	3801      	subs	r0, #1
 8012c68:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012c6c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012c70:	42a8      	cmp	r0, r5
 8012c72:	d1fb      	bne.n	8012c6c <__sccl+0x1c>
 8012c74:	b90b      	cbnz	r3, 8012c7a <__sccl+0x2a>
 8012c76:	1e50      	subs	r0, r2, #1
 8012c78:	bd70      	pop	{r4, r5, r6, pc}
 8012c7a:	f081 0101 	eor.w	r1, r1, #1
 8012c7e:	54e1      	strb	r1, [r4, r3]
 8012c80:	4610      	mov	r0, r2
 8012c82:	4602      	mov	r2, r0
 8012c84:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012c88:	2d2d      	cmp	r5, #45	@ 0x2d
 8012c8a:	d005      	beq.n	8012c98 <__sccl+0x48>
 8012c8c:	2d5d      	cmp	r5, #93	@ 0x5d
 8012c8e:	d016      	beq.n	8012cbe <__sccl+0x6e>
 8012c90:	2d00      	cmp	r5, #0
 8012c92:	d0f1      	beq.n	8012c78 <__sccl+0x28>
 8012c94:	462b      	mov	r3, r5
 8012c96:	e7f2      	b.n	8012c7e <__sccl+0x2e>
 8012c98:	7846      	ldrb	r6, [r0, #1]
 8012c9a:	2e5d      	cmp	r6, #93	@ 0x5d
 8012c9c:	d0fa      	beq.n	8012c94 <__sccl+0x44>
 8012c9e:	42b3      	cmp	r3, r6
 8012ca0:	dcf8      	bgt.n	8012c94 <__sccl+0x44>
 8012ca2:	3002      	adds	r0, #2
 8012ca4:	461a      	mov	r2, r3
 8012ca6:	3201      	adds	r2, #1
 8012ca8:	4296      	cmp	r6, r2
 8012caa:	54a1      	strb	r1, [r4, r2]
 8012cac:	dcfb      	bgt.n	8012ca6 <__sccl+0x56>
 8012cae:	1af2      	subs	r2, r6, r3
 8012cb0:	3a01      	subs	r2, #1
 8012cb2:	1c5d      	adds	r5, r3, #1
 8012cb4:	42b3      	cmp	r3, r6
 8012cb6:	bfa8      	it	ge
 8012cb8:	2200      	movge	r2, #0
 8012cba:	18ab      	adds	r3, r5, r2
 8012cbc:	e7e1      	b.n	8012c82 <__sccl+0x32>
 8012cbe:	4610      	mov	r0, r2
 8012cc0:	e7da      	b.n	8012c78 <__sccl+0x28>

08012cc2 <__submore>:
 8012cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012cca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012cce:	4299      	cmp	r1, r3
 8012cd0:	d11d      	bne.n	8012d0e <__submore+0x4c>
 8012cd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012cd6:	f7fa fd33 	bl	800d740 <_malloc_r>
 8012cda:	b918      	cbnz	r0, 8012ce4 <__submore+0x22>
 8012cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012ce8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012cea:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012cee:	6360      	str	r0, [r4, #52]	@ 0x34
 8012cf0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012cf4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012cf8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012cfc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012d00:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012d04:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012d08:	6020      	str	r0, [r4, #0]
 8012d0a:	2000      	movs	r0, #0
 8012d0c:	e7e8      	b.n	8012ce0 <__submore+0x1e>
 8012d0e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012d10:	0077      	lsls	r7, r6, #1
 8012d12:	463a      	mov	r2, r7
 8012d14:	f7ff fc31 	bl	801257a <_realloc_r>
 8012d18:	4605      	mov	r5, r0
 8012d1a:	2800      	cmp	r0, #0
 8012d1c:	d0de      	beq.n	8012cdc <__submore+0x1a>
 8012d1e:	eb00 0806 	add.w	r8, r0, r6
 8012d22:	4601      	mov	r1, r0
 8012d24:	4632      	mov	r2, r6
 8012d26:	4640      	mov	r0, r8
 8012d28:	f7fc fc2f 	bl	800f58a <memcpy>
 8012d2c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012d30:	f8c4 8000 	str.w	r8, [r4]
 8012d34:	e7e9      	b.n	8012d0a <__submore+0x48>

08012d36 <abort>:
 8012d36:	b508      	push	{r3, lr}
 8012d38:	2006      	movs	r0, #6
 8012d3a:	f000 fa09 	bl	8013150 <raise>
 8012d3e:	2001      	movs	r0, #1
 8012d40:	f7ef fd30 	bl	80027a4 <_exit>

08012d44 <_malloc_usable_size_r>:
 8012d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d48:	1f18      	subs	r0, r3, #4
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	bfbc      	itt	lt
 8012d4e:	580b      	ldrlt	r3, [r1, r0]
 8012d50:	18c0      	addlt	r0, r0, r3
 8012d52:	4770      	bx	lr

08012d54 <__sfputc_r>:
 8012d54:	6893      	ldr	r3, [r2, #8]
 8012d56:	3b01      	subs	r3, #1
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	b410      	push	{r4}
 8012d5c:	6093      	str	r3, [r2, #8]
 8012d5e:	da08      	bge.n	8012d72 <__sfputc_r+0x1e>
 8012d60:	6994      	ldr	r4, [r2, #24]
 8012d62:	42a3      	cmp	r3, r4
 8012d64:	db01      	blt.n	8012d6a <__sfputc_r+0x16>
 8012d66:	290a      	cmp	r1, #10
 8012d68:	d103      	bne.n	8012d72 <__sfputc_r+0x1e>
 8012d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d6e:	f000 b933 	b.w	8012fd8 <__swbuf_r>
 8012d72:	6813      	ldr	r3, [r2, #0]
 8012d74:	1c58      	adds	r0, r3, #1
 8012d76:	6010      	str	r0, [r2, #0]
 8012d78:	7019      	strb	r1, [r3, #0]
 8012d7a:	4608      	mov	r0, r1
 8012d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d80:	4770      	bx	lr

08012d82 <__sfputs_r>:
 8012d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d84:	4606      	mov	r6, r0
 8012d86:	460f      	mov	r7, r1
 8012d88:	4614      	mov	r4, r2
 8012d8a:	18d5      	adds	r5, r2, r3
 8012d8c:	42ac      	cmp	r4, r5
 8012d8e:	d101      	bne.n	8012d94 <__sfputs_r+0x12>
 8012d90:	2000      	movs	r0, #0
 8012d92:	e007      	b.n	8012da4 <__sfputs_r+0x22>
 8012d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d98:	463a      	mov	r2, r7
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	f7ff ffda 	bl	8012d54 <__sfputc_r>
 8012da0:	1c43      	adds	r3, r0, #1
 8012da2:	d1f3      	bne.n	8012d8c <__sfputs_r+0xa>
 8012da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012da8 <_vfiprintf_r>:
 8012da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dac:	460d      	mov	r5, r1
 8012dae:	b09d      	sub	sp, #116	@ 0x74
 8012db0:	4614      	mov	r4, r2
 8012db2:	4698      	mov	r8, r3
 8012db4:	4606      	mov	r6, r0
 8012db6:	b118      	cbz	r0, 8012dc0 <_vfiprintf_r+0x18>
 8012db8:	6a03      	ldr	r3, [r0, #32]
 8012dba:	b90b      	cbnz	r3, 8012dc0 <_vfiprintf_r+0x18>
 8012dbc:	f7fb fcc2 	bl	800e744 <__sinit>
 8012dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012dc2:	07d9      	lsls	r1, r3, #31
 8012dc4:	d405      	bmi.n	8012dd2 <_vfiprintf_r+0x2a>
 8012dc6:	89ab      	ldrh	r3, [r5, #12]
 8012dc8:	059a      	lsls	r2, r3, #22
 8012dca:	d402      	bmi.n	8012dd2 <_vfiprintf_r+0x2a>
 8012dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012dce:	f7fc fbd1 	bl	800f574 <__retarget_lock_acquire_recursive>
 8012dd2:	89ab      	ldrh	r3, [r5, #12]
 8012dd4:	071b      	lsls	r3, r3, #28
 8012dd6:	d501      	bpl.n	8012ddc <_vfiprintf_r+0x34>
 8012dd8:	692b      	ldr	r3, [r5, #16]
 8012dda:	b99b      	cbnz	r3, 8012e04 <_vfiprintf_r+0x5c>
 8012ddc:	4629      	mov	r1, r5
 8012dde:	4630      	mov	r0, r6
 8012de0:	f000 f938 	bl	8013054 <__swsetup_r>
 8012de4:	b170      	cbz	r0, 8012e04 <_vfiprintf_r+0x5c>
 8012de6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012de8:	07dc      	lsls	r4, r3, #31
 8012dea:	d504      	bpl.n	8012df6 <_vfiprintf_r+0x4e>
 8012dec:	f04f 30ff 	mov.w	r0, #4294967295
 8012df0:	b01d      	add	sp, #116	@ 0x74
 8012df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df6:	89ab      	ldrh	r3, [r5, #12]
 8012df8:	0598      	lsls	r0, r3, #22
 8012dfa:	d4f7      	bmi.n	8012dec <_vfiprintf_r+0x44>
 8012dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012dfe:	f7fc fbbb 	bl	800f578 <__retarget_lock_release_recursive>
 8012e02:	e7f3      	b.n	8012dec <_vfiprintf_r+0x44>
 8012e04:	2300      	movs	r3, #0
 8012e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e08:	2320      	movs	r3, #32
 8012e0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e12:	2330      	movs	r3, #48	@ 0x30
 8012e14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012fc4 <_vfiprintf_r+0x21c>
 8012e18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e1c:	f04f 0901 	mov.w	r9, #1
 8012e20:	4623      	mov	r3, r4
 8012e22:	469a      	mov	sl, r3
 8012e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e28:	b10a      	cbz	r2, 8012e2e <_vfiprintf_r+0x86>
 8012e2a:	2a25      	cmp	r2, #37	@ 0x25
 8012e2c:	d1f9      	bne.n	8012e22 <_vfiprintf_r+0x7a>
 8012e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8012e32:	d00b      	beq.n	8012e4c <_vfiprintf_r+0xa4>
 8012e34:	465b      	mov	r3, fp
 8012e36:	4622      	mov	r2, r4
 8012e38:	4629      	mov	r1, r5
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f7ff ffa1 	bl	8012d82 <__sfputs_r>
 8012e40:	3001      	adds	r0, #1
 8012e42:	f000 80a7 	beq.w	8012f94 <_vfiprintf_r+0x1ec>
 8012e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e48:	445a      	add	r2, fp
 8012e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	f000 809f 	beq.w	8012f94 <_vfiprintf_r+0x1ec>
 8012e56:	2300      	movs	r3, #0
 8012e58:	f04f 32ff 	mov.w	r2, #4294967295
 8012e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e60:	f10a 0a01 	add.w	sl, sl, #1
 8012e64:	9304      	str	r3, [sp, #16]
 8012e66:	9307      	str	r3, [sp, #28]
 8012e68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012e6e:	4654      	mov	r4, sl
 8012e70:	2205      	movs	r2, #5
 8012e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e76:	4853      	ldr	r0, [pc, #332]	@ (8012fc4 <_vfiprintf_r+0x21c>)
 8012e78:	f7ed f9ba 	bl	80001f0 <memchr>
 8012e7c:	9a04      	ldr	r2, [sp, #16]
 8012e7e:	b9d8      	cbnz	r0, 8012eb8 <_vfiprintf_r+0x110>
 8012e80:	06d1      	lsls	r1, r2, #27
 8012e82:	bf44      	itt	mi
 8012e84:	2320      	movmi	r3, #32
 8012e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e8a:	0713      	lsls	r3, r2, #28
 8012e8c:	bf44      	itt	mi
 8012e8e:	232b      	movmi	r3, #43	@ 0x2b
 8012e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e94:	f89a 3000 	ldrb.w	r3, [sl]
 8012e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e9a:	d015      	beq.n	8012ec8 <_vfiprintf_r+0x120>
 8012e9c:	9a07      	ldr	r2, [sp, #28]
 8012e9e:	4654      	mov	r4, sl
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	f04f 0c0a 	mov.w	ip, #10
 8012ea6:	4621      	mov	r1, r4
 8012ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012eac:	3b30      	subs	r3, #48	@ 0x30
 8012eae:	2b09      	cmp	r3, #9
 8012eb0:	d94b      	bls.n	8012f4a <_vfiprintf_r+0x1a2>
 8012eb2:	b1b0      	cbz	r0, 8012ee2 <_vfiprintf_r+0x13a>
 8012eb4:	9207      	str	r2, [sp, #28]
 8012eb6:	e014      	b.n	8012ee2 <_vfiprintf_r+0x13a>
 8012eb8:	eba0 0308 	sub.w	r3, r0, r8
 8012ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8012ec0:	4313      	orrs	r3, r2
 8012ec2:	9304      	str	r3, [sp, #16]
 8012ec4:	46a2      	mov	sl, r4
 8012ec6:	e7d2      	b.n	8012e6e <_vfiprintf_r+0xc6>
 8012ec8:	9b03      	ldr	r3, [sp, #12]
 8012eca:	1d19      	adds	r1, r3, #4
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	9103      	str	r1, [sp, #12]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	bfbb      	ittet	lt
 8012ed4:	425b      	neglt	r3, r3
 8012ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8012eda:	9307      	strge	r3, [sp, #28]
 8012edc:	9307      	strlt	r3, [sp, #28]
 8012ede:	bfb8      	it	lt
 8012ee0:	9204      	strlt	r2, [sp, #16]
 8012ee2:	7823      	ldrb	r3, [r4, #0]
 8012ee4:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ee6:	d10a      	bne.n	8012efe <_vfiprintf_r+0x156>
 8012ee8:	7863      	ldrb	r3, [r4, #1]
 8012eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8012eec:	d132      	bne.n	8012f54 <_vfiprintf_r+0x1ac>
 8012eee:	9b03      	ldr	r3, [sp, #12]
 8012ef0:	1d1a      	adds	r2, r3, #4
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	9203      	str	r2, [sp, #12]
 8012ef6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012efa:	3402      	adds	r4, #2
 8012efc:	9305      	str	r3, [sp, #20]
 8012efe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012fd4 <_vfiprintf_r+0x22c>
 8012f02:	7821      	ldrb	r1, [r4, #0]
 8012f04:	2203      	movs	r2, #3
 8012f06:	4650      	mov	r0, sl
 8012f08:	f7ed f972 	bl	80001f0 <memchr>
 8012f0c:	b138      	cbz	r0, 8012f1e <_vfiprintf_r+0x176>
 8012f0e:	9b04      	ldr	r3, [sp, #16]
 8012f10:	eba0 000a 	sub.w	r0, r0, sl
 8012f14:	2240      	movs	r2, #64	@ 0x40
 8012f16:	4082      	lsls	r2, r0
 8012f18:	4313      	orrs	r3, r2
 8012f1a:	3401      	adds	r4, #1
 8012f1c:	9304      	str	r3, [sp, #16]
 8012f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f22:	4829      	ldr	r0, [pc, #164]	@ (8012fc8 <_vfiprintf_r+0x220>)
 8012f24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f28:	2206      	movs	r2, #6
 8012f2a:	f7ed f961 	bl	80001f0 <memchr>
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	d03f      	beq.n	8012fb2 <_vfiprintf_r+0x20a>
 8012f32:	4b26      	ldr	r3, [pc, #152]	@ (8012fcc <_vfiprintf_r+0x224>)
 8012f34:	bb1b      	cbnz	r3, 8012f7e <_vfiprintf_r+0x1d6>
 8012f36:	9b03      	ldr	r3, [sp, #12]
 8012f38:	3307      	adds	r3, #7
 8012f3a:	f023 0307 	bic.w	r3, r3, #7
 8012f3e:	3308      	adds	r3, #8
 8012f40:	9303      	str	r3, [sp, #12]
 8012f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f44:	443b      	add	r3, r7
 8012f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f48:	e76a      	b.n	8012e20 <_vfiprintf_r+0x78>
 8012f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f4e:	460c      	mov	r4, r1
 8012f50:	2001      	movs	r0, #1
 8012f52:	e7a8      	b.n	8012ea6 <_vfiprintf_r+0xfe>
 8012f54:	2300      	movs	r3, #0
 8012f56:	3401      	adds	r4, #1
 8012f58:	9305      	str	r3, [sp, #20]
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	f04f 0c0a 	mov.w	ip, #10
 8012f60:	4620      	mov	r0, r4
 8012f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f66:	3a30      	subs	r2, #48	@ 0x30
 8012f68:	2a09      	cmp	r2, #9
 8012f6a:	d903      	bls.n	8012f74 <_vfiprintf_r+0x1cc>
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d0c6      	beq.n	8012efe <_vfiprintf_r+0x156>
 8012f70:	9105      	str	r1, [sp, #20]
 8012f72:	e7c4      	b.n	8012efe <_vfiprintf_r+0x156>
 8012f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f78:	4604      	mov	r4, r0
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	e7f0      	b.n	8012f60 <_vfiprintf_r+0x1b8>
 8012f7e:	ab03      	add	r3, sp, #12
 8012f80:	9300      	str	r3, [sp, #0]
 8012f82:	462a      	mov	r2, r5
 8012f84:	4b12      	ldr	r3, [pc, #72]	@ (8012fd0 <_vfiprintf_r+0x228>)
 8012f86:	a904      	add	r1, sp, #16
 8012f88:	4630      	mov	r0, r6
 8012f8a:	f7fa fd8b 	bl	800daa4 <_printf_float>
 8012f8e:	4607      	mov	r7, r0
 8012f90:	1c78      	adds	r0, r7, #1
 8012f92:	d1d6      	bne.n	8012f42 <_vfiprintf_r+0x19a>
 8012f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012f96:	07d9      	lsls	r1, r3, #31
 8012f98:	d405      	bmi.n	8012fa6 <_vfiprintf_r+0x1fe>
 8012f9a:	89ab      	ldrh	r3, [r5, #12]
 8012f9c:	059a      	lsls	r2, r3, #22
 8012f9e:	d402      	bmi.n	8012fa6 <_vfiprintf_r+0x1fe>
 8012fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012fa2:	f7fc fae9 	bl	800f578 <__retarget_lock_release_recursive>
 8012fa6:	89ab      	ldrh	r3, [r5, #12]
 8012fa8:	065b      	lsls	r3, r3, #25
 8012faa:	f53f af1f 	bmi.w	8012dec <_vfiprintf_r+0x44>
 8012fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012fb0:	e71e      	b.n	8012df0 <_vfiprintf_r+0x48>
 8012fb2:	ab03      	add	r3, sp, #12
 8012fb4:	9300      	str	r3, [sp, #0]
 8012fb6:	462a      	mov	r2, r5
 8012fb8:	4b05      	ldr	r3, [pc, #20]	@ (8012fd0 <_vfiprintf_r+0x228>)
 8012fba:	a904      	add	r1, sp, #16
 8012fbc:	4630      	mov	r0, r6
 8012fbe:	f7fb f809 	bl	800dfd4 <_printf_i>
 8012fc2:	e7e4      	b.n	8012f8e <_vfiprintf_r+0x1e6>
 8012fc4:	0803e26e 	.word	0x0803e26e
 8012fc8:	0803e278 	.word	0x0803e278
 8012fcc:	0800daa5 	.word	0x0800daa5
 8012fd0:	08012d83 	.word	0x08012d83
 8012fd4:	0803e274 	.word	0x0803e274

08012fd8 <__swbuf_r>:
 8012fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fda:	460e      	mov	r6, r1
 8012fdc:	4614      	mov	r4, r2
 8012fde:	4605      	mov	r5, r0
 8012fe0:	b118      	cbz	r0, 8012fea <__swbuf_r+0x12>
 8012fe2:	6a03      	ldr	r3, [r0, #32]
 8012fe4:	b90b      	cbnz	r3, 8012fea <__swbuf_r+0x12>
 8012fe6:	f7fb fbad 	bl	800e744 <__sinit>
 8012fea:	69a3      	ldr	r3, [r4, #24]
 8012fec:	60a3      	str	r3, [r4, #8]
 8012fee:	89a3      	ldrh	r3, [r4, #12]
 8012ff0:	071a      	lsls	r2, r3, #28
 8012ff2:	d501      	bpl.n	8012ff8 <__swbuf_r+0x20>
 8012ff4:	6923      	ldr	r3, [r4, #16]
 8012ff6:	b943      	cbnz	r3, 801300a <__swbuf_r+0x32>
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	f000 f82a 	bl	8013054 <__swsetup_r>
 8013000:	b118      	cbz	r0, 801300a <__swbuf_r+0x32>
 8013002:	f04f 37ff 	mov.w	r7, #4294967295
 8013006:	4638      	mov	r0, r7
 8013008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	6922      	ldr	r2, [r4, #16]
 801300e:	1a98      	subs	r0, r3, r2
 8013010:	6963      	ldr	r3, [r4, #20]
 8013012:	b2f6      	uxtb	r6, r6
 8013014:	4283      	cmp	r3, r0
 8013016:	4637      	mov	r7, r6
 8013018:	dc05      	bgt.n	8013026 <__swbuf_r+0x4e>
 801301a:	4621      	mov	r1, r4
 801301c:	4628      	mov	r0, r5
 801301e:	f7fe fec3 	bl	8011da8 <_fflush_r>
 8013022:	2800      	cmp	r0, #0
 8013024:	d1ed      	bne.n	8013002 <__swbuf_r+0x2a>
 8013026:	68a3      	ldr	r3, [r4, #8]
 8013028:	3b01      	subs	r3, #1
 801302a:	60a3      	str	r3, [r4, #8]
 801302c:	6823      	ldr	r3, [r4, #0]
 801302e:	1c5a      	adds	r2, r3, #1
 8013030:	6022      	str	r2, [r4, #0]
 8013032:	701e      	strb	r6, [r3, #0]
 8013034:	6962      	ldr	r2, [r4, #20]
 8013036:	1c43      	adds	r3, r0, #1
 8013038:	429a      	cmp	r2, r3
 801303a:	d004      	beq.n	8013046 <__swbuf_r+0x6e>
 801303c:	89a3      	ldrh	r3, [r4, #12]
 801303e:	07db      	lsls	r3, r3, #31
 8013040:	d5e1      	bpl.n	8013006 <__swbuf_r+0x2e>
 8013042:	2e0a      	cmp	r6, #10
 8013044:	d1df      	bne.n	8013006 <__swbuf_r+0x2e>
 8013046:	4621      	mov	r1, r4
 8013048:	4628      	mov	r0, r5
 801304a:	f7fe fead 	bl	8011da8 <_fflush_r>
 801304e:	2800      	cmp	r0, #0
 8013050:	d0d9      	beq.n	8013006 <__swbuf_r+0x2e>
 8013052:	e7d6      	b.n	8013002 <__swbuf_r+0x2a>

08013054 <__swsetup_r>:
 8013054:	b538      	push	{r3, r4, r5, lr}
 8013056:	4b29      	ldr	r3, [pc, #164]	@ (80130fc <__swsetup_r+0xa8>)
 8013058:	4605      	mov	r5, r0
 801305a:	6818      	ldr	r0, [r3, #0]
 801305c:	460c      	mov	r4, r1
 801305e:	b118      	cbz	r0, 8013068 <__swsetup_r+0x14>
 8013060:	6a03      	ldr	r3, [r0, #32]
 8013062:	b90b      	cbnz	r3, 8013068 <__swsetup_r+0x14>
 8013064:	f7fb fb6e 	bl	800e744 <__sinit>
 8013068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801306c:	0719      	lsls	r1, r3, #28
 801306e:	d422      	bmi.n	80130b6 <__swsetup_r+0x62>
 8013070:	06da      	lsls	r2, r3, #27
 8013072:	d407      	bmi.n	8013084 <__swsetup_r+0x30>
 8013074:	2209      	movs	r2, #9
 8013076:	602a      	str	r2, [r5, #0]
 8013078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801307c:	81a3      	strh	r3, [r4, #12]
 801307e:	f04f 30ff 	mov.w	r0, #4294967295
 8013082:	e033      	b.n	80130ec <__swsetup_r+0x98>
 8013084:	0758      	lsls	r0, r3, #29
 8013086:	d512      	bpl.n	80130ae <__swsetup_r+0x5a>
 8013088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801308a:	b141      	cbz	r1, 801309e <__swsetup_r+0x4a>
 801308c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013090:	4299      	cmp	r1, r3
 8013092:	d002      	beq.n	801309a <__swsetup_r+0x46>
 8013094:	4628      	mov	r0, r5
 8013096:	f7fd f8ef 	bl	8010278 <_free_r>
 801309a:	2300      	movs	r3, #0
 801309c:	6363      	str	r3, [r4, #52]	@ 0x34
 801309e:	89a3      	ldrh	r3, [r4, #12]
 80130a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80130a4:	81a3      	strh	r3, [r4, #12]
 80130a6:	2300      	movs	r3, #0
 80130a8:	6063      	str	r3, [r4, #4]
 80130aa:	6923      	ldr	r3, [r4, #16]
 80130ac:	6023      	str	r3, [r4, #0]
 80130ae:	89a3      	ldrh	r3, [r4, #12]
 80130b0:	f043 0308 	orr.w	r3, r3, #8
 80130b4:	81a3      	strh	r3, [r4, #12]
 80130b6:	6923      	ldr	r3, [r4, #16]
 80130b8:	b94b      	cbnz	r3, 80130ce <__swsetup_r+0x7a>
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80130c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130c4:	d003      	beq.n	80130ce <__swsetup_r+0x7a>
 80130c6:	4621      	mov	r1, r4
 80130c8:	4628      	mov	r0, r5
 80130ca:	f000 f883 	bl	80131d4 <__smakebuf_r>
 80130ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130d2:	f013 0201 	ands.w	r2, r3, #1
 80130d6:	d00a      	beq.n	80130ee <__swsetup_r+0x9a>
 80130d8:	2200      	movs	r2, #0
 80130da:	60a2      	str	r2, [r4, #8]
 80130dc:	6962      	ldr	r2, [r4, #20]
 80130de:	4252      	negs	r2, r2
 80130e0:	61a2      	str	r2, [r4, #24]
 80130e2:	6922      	ldr	r2, [r4, #16]
 80130e4:	b942      	cbnz	r2, 80130f8 <__swsetup_r+0xa4>
 80130e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80130ea:	d1c5      	bne.n	8013078 <__swsetup_r+0x24>
 80130ec:	bd38      	pop	{r3, r4, r5, pc}
 80130ee:	0799      	lsls	r1, r3, #30
 80130f0:	bf58      	it	pl
 80130f2:	6962      	ldrpl	r2, [r4, #20]
 80130f4:	60a2      	str	r2, [r4, #8]
 80130f6:	e7f4      	b.n	80130e2 <__swsetup_r+0x8e>
 80130f8:	2000      	movs	r0, #0
 80130fa:	e7f7      	b.n	80130ec <__swsetup_r+0x98>
 80130fc:	20000060 	.word	0x20000060

08013100 <_raise_r>:
 8013100:	291f      	cmp	r1, #31
 8013102:	b538      	push	{r3, r4, r5, lr}
 8013104:	4605      	mov	r5, r0
 8013106:	460c      	mov	r4, r1
 8013108:	d904      	bls.n	8013114 <_raise_r+0x14>
 801310a:	2316      	movs	r3, #22
 801310c:	6003      	str	r3, [r0, #0]
 801310e:	f04f 30ff 	mov.w	r0, #4294967295
 8013112:	bd38      	pop	{r3, r4, r5, pc}
 8013114:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013116:	b112      	cbz	r2, 801311e <_raise_r+0x1e>
 8013118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801311c:	b94b      	cbnz	r3, 8013132 <_raise_r+0x32>
 801311e:	4628      	mov	r0, r5
 8013120:	f000 f830 	bl	8013184 <_getpid_r>
 8013124:	4622      	mov	r2, r4
 8013126:	4601      	mov	r1, r0
 8013128:	4628      	mov	r0, r5
 801312a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801312e:	f000 b817 	b.w	8013160 <_kill_r>
 8013132:	2b01      	cmp	r3, #1
 8013134:	d00a      	beq.n	801314c <_raise_r+0x4c>
 8013136:	1c59      	adds	r1, r3, #1
 8013138:	d103      	bne.n	8013142 <_raise_r+0x42>
 801313a:	2316      	movs	r3, #22
 801313c:	6003      	str	r3, [r0, #0]
 801313e:	2001      	movs	r0, #1
 8013140:	e7e7      	b.n	8013112 <_raise_r+0x12>
 8013142:	2100      	movs	r1, #0
 8013144:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013148:	4620      	mov	r0, r4
 801314a:	4798      	blx	r3
 801314c:	2000      	movs	r0, #0
 801314e:	e7e0      	b.n	8013112 <_raise_r+0x12>

08013150 <raise>:
 8013150:	4b02      	ldr	r3, [pc, #8]	@ (801315c <raise+0xc>)
 8013152:	4601      	mov	r1, r0
 8013154:	6818      	ldr	r0, [r3, #0]
 8013156:	f7ff bfd3 	b.w	8013100 <_raise_r>
 801315a:	bf00      	nop
 801315c:	20000060 	.word	0x20000060

08013160 <_kill_r>:
 8013160:	b538      	push	{r3, r4, r5, lr}
 8013162:	4d07      	ldr	r5, [pc, #28]	@ (8013180 <_kill_r+0x20>)
 8013164:	2300      	movs	r3, #0
 8013166:	4604      	mov	r4, r0
 8013168:	4608      	mov	r0, r1
 801316a:	4611      	mov	r1, r2
 801316c:	602b      	str	r3, [r5, #0]
 801316e:	f7ef fb09 	bl	8002784 <_kill>
 8013172:	1c43      	adds	r3, r0, #1
 8013174:	d102      	bne.n	801317c <_kill_r+0x1c>
 8013176:	682b      	ldr	r3, [r5, #0]
 8013178:	b103      	cbz	r3, 801317c <_kill_r+0x1c>
 801317a:	6023      	str	r3, [r4, #0]
 801317c:	bd38      	pop	{r3, r4, r5, pc}
 801317e:	bf00      	nop
 8013180:	20002da4 	.word	0x20002da4

08013184 <_getpid_r>:
 8013184:	f7ef baf6 	b.w	8002774 <_getpid>

08013188 <__swhatbuf_r>:
 8013188:	b570      	push	{r4, r5, r6, lr}
 801318a:	460c      	mov	r4, r1
 801318c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013190:	2900      	cmp	r1, #0
 8013192:	b096      	sub	sp, #88	@ 0x58
 8013194:	4615      	mov	r5, r2
 8013196:	461e      	mov	r6, r3
 8013198:	da0d      	bge.n	80131b6 <__swhatbuf_r+0x2e>
 801319a:	89a3      	ldrh	r3, [r4, #12]
 801319c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80131a0:	f04f 0100 	mov.w	r1, #0
 80131a4:	bf14      	ite	ne
 80131a6:	2340      	movne	r3, #64	@ 0x40
 80131a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80131ac:	2000      	movs	r0, #0
 80131ae:	6031      	str	r1, [r6, #0]
 80131b0:	602b      	str	r3, [r5, #0]
 80131b2:	b016      	add	sp, #88	@ 0x58
 80131b4:	bd70      	pop	{r4, r5, r6, pc}
 80131b6:	466a      	mov	r2, sp
 80131b8:	f000 f848 	bl	801324c <_fstat_r>
 80131bc:	2800      	cmp	r0, #0
 80131be:	dbec      	blt.n	801319a <__swhatbuf_r+0x12>
 80131c0:	9901      	ldr	r1, [sp, #4]
 80131c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80131c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80131ca:	4259      	negs	r1, r3
 80131cc:	4159      	adcs	r1, r3
 80131ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80131d2:	e7eb      	b.n	80131ac <__swhatbuf_r+0x24>

080131d4 <__smakebuf_r>:
 80131d4:	898b      	ldrh	r3, [r1, #12]
 80131d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131d8:	079d      	lsls	r5, r3, #30
 80131da:	4606      	mov	r6, r0
 80131dc:	460c      	mov	r4, r1
 80131de:	d507      	bpl.n	80131f0 <__smakebuf_r+0x1c>
 80131e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80131e4:	6023      	str	r3, [r4, #0]
 80131e6:	6123      	str	r3, [r4, #16]
 80131e8:	2301      	movs	r3, #1
 80131ea:	6163      	str	r3, [r4, #20]
 80131ec:	b003      	add	sp, #12
 80131ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131f0:	ab01      	add	r3, sp, #4
 80131f2:	466a      	mov	r2, sp
 80131f4:	f7ff ffc8 	bl	8013188 <__swhatbuf_r>
 80131f8:	9f00      	ldr	r7, [sp, #0]
 80131fa:	4605      	mov	r5, r0
 80131fc:	4639      	mov	r1, r7
 80131fe:	4630      	mov	r0, r6
 8013200:	f7fa fa9e 	bl	800d740 <_malloc_r>
 8013204:	b948      	cbnz	r0, 801321a <__smakebuf_r+0x46>
 8013206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801320a:	059a      	lsls	r2, r3, #22
 801320c:	d4ee      	bmi.n	80131ec <__smakebuf_r+0x18>
 801320e:	f023 0303 	bic.w	r3, r3, #3
 8013212:	f043 0302 	orr.w	r3, r3, #2
 8013216:	81a3      	strh	r3, [r4, #12]
 8013218:	e7e2      	b.n	80131e0 <__smakebuf_r+0xc>
 801321a:	89a3      	ldrh	r3, [r4, #12]
 801321c:	6020      	str	r0, [r4, #0]
 801321e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013222:	81a3      	strh	r3, [r4, #12]
 8013224:	9b01      	ldr	r3, [sp, #4]
 8013226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801322a:	b15b      	cbz	r3, 8013244 <__smakebuf_r+0x70>
 801322c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013230:	4630      	mov	r0, r6
 8013232:	f000 f81d 	bl	8013270 <_isatty_r>
 8013236:	b128      	cbz	r0, 8013244 <__smakebuf_r+0x70>
 8013238:	89a3      	ldrh	r3, [r4, #12]
 801323a:	f023 0303 	bic.w	r3, r3, #3
 801323e:	f043 0301 	orr.w	r3, r3, #1
 8013242:	81a3      	strh	r3, [r4, #12]
 8013244:	89a3      	ldrh	r3, [r4, #12]
 8013246:	431d      	orrs	r5, r3
 8013248:	81a5      	strh	r5, [r4, #12]
 801324a:	e7cf      	b.n	80131ec <__smakebuf_r+0x18>

0801324c <_fstat_r>:
 801324c:	b538      	push	{r3, r4, r5, lr}
 801324e:	4d07      	ldr	r5, [pc, #28]	@ (801326c <_fstat_r+0x20>)
 8013250:	2300      	movs	r3, #0
 8013252:	4604      	mov	r4, r0
 8013254:	4608      	mov	r0, r1
 8013256:	4611      	mov	r1, r2
 8013258:	602b      	str	r3, [r5, #0]
 801325a:	f7ef fad7 	bl	800280c <_fstat>
 801325e:	1c43      	adds	r3, r0, #1
 8013260:	d102      	bne.n	8013268 <_fstat_r+0x1c>
 8013262:	682b      	ldr	r3, [r5, #0]
 8013264:	b103      	cbz	r3, 8013268 <_fstat_r+0x1c>
 8013266:	6023      	str	r3, [r4, #0]
 8013268:	bd38      	pop	{r3, r4, r5, pc}
 801326a:	bf00      	nop
 801326c:	20002da4 	.word	0x20002da4

08013270 <_isatty_r>:
 8013270:	b538      	push	{r3, r4, r5, lr}
 8013272:	4d06      	ldr	r5, [pc, #24]	@ (801328c <_isatty_r+0x1c>)
 8013274:	2300      	movs	r3, #0
 8013276:	4604      	mov	r4, r0
 8013278:	4608      	mov	r0, r1
 801327a:	602b      	str	r3, [r5, #0]
 801327c:	f7ef fad6 	bl	800282c <_isatty>
 8013280:	1c43      	adds	r3, r0, #1
 8013282:	d102      	bne.n	801328a <_isatty_r+0x1a>
 8013284:	682b      	ldr	r3, [r5, #0]
 8013286:	b103      	cbz	r3, 801328a <_isatty_r+0x1a>
 8013288:	6023      	str	r3, [r4, #0]
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	20002da4 	.word	0x20002da4

08013290 <_init>:
 8013290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013292:	bf00      	nop
 8013294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013296:	bc08      	pop	{r3}
 8013298:	469e      	mov	lr, r3
 801329a:	4770      	bx	lr

0801329c <_fini>:
 801329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801329e:	bf00      	nop
 80132a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132a2:	bc08      	pop	{r3}
 80132a4:	469e      	mov	lr, r3
 80132a6:	4770      	bx	lr
