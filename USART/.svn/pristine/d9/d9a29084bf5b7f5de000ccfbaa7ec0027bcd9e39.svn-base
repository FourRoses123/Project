
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b160  08011ed8  08011ed8  00012ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d038  0803d038  0003f21c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0803d038  0803d038  0003e038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d040  0803d040  0003f21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803d040  0803d040  0003e040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803d044  0803d044  0003e044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0803d048  0003f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f34  20000220  0803d264  0003f220  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  20001154  0803d264  00040154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003f21c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d08e  00000000  00000000  0003f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004568  00000000  00000000  0005c2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  00060848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ec  00000000  00000000  00062080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002997a  00000000  00000000  0006336c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000262ef  00000000  00000000  0008cce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddcc7  00000000  00000000  000b2fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190c9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079bc  00000000  00000000  00190ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0019869c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011ebc 	.word	0x08011ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08011ebc 	.word	0x08011ebc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	4a25      	ldr	r2, [pc, #148]	@ (80010e0 <MX_DMA_Init+0xa0>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6493      	str	r3, [r2, #72]	@ 0x48
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <MX_DMA_Init+0xa0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6493      	str	r3, [r2, #72]	@ 0x48
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_DMA_Init+0xa0>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200c      	movs	r0, #12
 800107c:	f002 feeb 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001080:	200c      	movs	r0, #12
 8001082:	f002 ff04 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200d      	movs	r0, #13
 800108c:	f002 fee3 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001090:	200d      	movs	r0, #13
 8001092:	f002 fefc 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200e      	movs	r0, #14
 800109c:	f002 fedb 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f002 fef4 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200f      	movs	r0, #15
 80010ac:	f002 fed3 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010b0:	200f      	movs	r0, #15
 80010b2:	f002 feec 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2044      	movs	r0, #68	@ 0x44
 80010bc:	f002 fecb 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80010c0:	2044      	movs	r0, #68	@ 0x44
 80010c2:	f002 fee4 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2045      	movs	r0, #69	@ 0x45
 80010cc:	f002 fec3 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80010d0:	2045      	movs	r0, #69	@ 0x45
 80010d2:	f002 fedc 	bl	8003e8e <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <MX_GPIO_Init+0xf8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a37      	ldr	r2, [pc, #220]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a31      	ldr	r2, [pc, #196]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <MX_GPIO_Init+0xf8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a2b      	ldr	r2, [pc, #172]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <MX_GPIO_Init+0xf8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2103      	movs	r1, #3
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f003 fadb 	bl	8004704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ASIC_RST_GPIO_Port, ASIC_RST_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2110      	movs	r1, #16
 8001152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001156:	f003 fad5 	bl	8004704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f241 0101 	movw	r1, #4097	@ 0x1001
 8001160:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 8001162:	f003 facf 	bl	8004704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin ASIC_RST_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|ASIC_RST_Pin;
 8001166:	2313      	movs	r3, #19
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f003 f92e 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8001184:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4810      	ldr	r0, [pc, #64]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 800119e:	f003 f91f 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AFULL_Pin EMPTY_Pin */
  GPIO_InitStruct.Pin = AFULL_Pin|EMPTY_Pin;
 80011a2:	2306      	movs	r3, #6
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	480a      	ldr	r0, [pc, #40]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 80011b6:	f003 f913 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S3_Pin|S4_Pin;
 80011ba:	f640 4318 	movw	r3, #3096	@ 0xc18
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_GPIO_Init+0xfc>)
 80011d0:	f003 f906 	bl	80043e0 <HAL_GPIO_Init>

}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000400 	.word	0x48000400

080011e4 <main>:
uint8_t res = 0;
uint8_t open = 0;
SD_Config current_config;

int main(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af02      	add	r7, sp, #8
  HAL_Init();
 80011ea:	f002 fcc0 	bl	8003b6e <HAL_Init>
  SystemClock_Config();
 80011ee:	f000 f8df 	bl	80013b0 <SystemClock_Config>
  MX_GPIO_Init();
 80011f2:	f7ff ff77 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f6:	f7ff ff23 	bl	8001040 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011fa:	f001 fba3 	bl	8002944 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80011fe:	f000 ff3f 	bl	8002080 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001202:	f007 fa63 	bl	80086cc <MX_FATFS_Init>
  MX_SPI1_Init();
 8001206:	f000 fefd 	bl	8002004 <MX_SPI1_Init>
  MX_TIM6_Init();
 800120a:	f001 fb23 	bl	8002854 <MX_TIM6_Init>
  MX_TIM2_Init();
 800120e:	f001 fad3 	bl	80027b8 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001212:	484a      	ldr	r0, [pc, #296]	@ (800133c <main+0x158>)
 8001214:	f005 fa1e 	bl	8006654 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001218:	4849      	ldr	r0, [pc, #292]	@ (8001340 <main+0x15c>)
 800121a:	f005 fa1b 	bl	8006654 <HAL_TIM_Base_Start_IT>
  if(SD_Init() == SD_OK)
 800121e:	f000 f9b5 	bl	800158c <SD_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d134      	bne.n	8001292 <main+0xae>
  {
	res=f_mount(&fs,"0:",1);
 8001228:	2201      	movs	r2, #1
 800122a:	4946      	ldr	r1, [pc, #280]	@ (8001344 <main+0x160>)
 800122c:	4846      	ldr	r0, [pc, #280]	@ (8001348 <main+0x164>)
 800122e:	f00a fff3 	bl	800c218 <f_mount>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b45      	ldr	r3, [pc, #276]	@ (800134c <main+0x168>)
 8001238:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 800123a:	4b44      	ldr	r3, [pc, #272]	@ (800134c <main+0x168>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <main+0x62>
		Error_Handler();
 8001242:	f000 f904 	bl	800144e <Error_Handler>
	if(file_exists(CONFIG_FILE) != FR_OK)
 8001246:	4b42      	ldr	r3, [pc, #264]	@ (8001350 <main+0x16c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fc59 	bl	8001b02 <file_exists>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <main+0x76>
		create_default_config();
 8001256:	f000 fe45 	bl	8001ee4 <create_default_config>
	int log_num = get_next_log_number();
 800125a:	f000 fc6b 	bl	8001b34 <get_next_log_number>
 800125e:	60f8      	str	r0, [r7, #12]
	snprintf(current_log_file, sizeof(current_log_file), "%s%05d.txt", LOG_PREFIX, log_num);
 8001260:	4b3c      	ldr	r3, [pc, #240]	@ (8001354 <main+0x170>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	4613      	mov	r3, r2
 800126a:	4a3b      	ldr	r2, [pc, #236]	@ (8001358 <main+0x174>)
 800126c:	2114      	movs	r1, #20
 800126e:	483b      	ldr	r0, [pc, #236]	@ (800135c <main+0x178>)
 8001270:	f00d fac8 	bl	800e804 <sniprintf>
	f_open(&fil, current_log_file, FA_CREATE_NEW | FA_WRITE);
 8001274:	2206      	movs	r2, #6
 8001276:	4939      	ldr	r1, [pc, #228]	@ (800135c <main+0x178>)
 8001278:	4839      	ldr	r0, [pc, #228]	@ (8001360 <main+0x17c>)
 800127a:	f00b f813 	bl	800c2a4 <f_open>
	current_config = load_and_apply_config();
 800127e:	4c39      	ldr	r4, [pc, #228]	@ (8001364 <main+0x180>)
 8001280:	463b      	mov	r3, r7
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fe5a 	bl	8001f3c <load_and_apply_config>
 8001288:	4623      	mov	r3, r4
 800128a:	463a      	mov	r2, r7
 800128c:	6810      	ldr	r0, [r2, #0]
 800128e:	6851      	ldr	r1, [r2, #4]
 8001290:	c303      	stmia	r3!, {r0, r1}
  }
  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 8001292:	2240      	movs	r2, #64	@ 0x40
 8001294:	4934      	ldr	r1, [pc, #208]	@ (8001368 <main+0x184>)
 8001296:	4835      	ldr	r0, [pc, #212]	@ (800136c <main+0x188>)
 8001298:	f005 ff0a 	bl	80070b0 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <main+0x188>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b32      	ldr	r3, [pc, #200]	@ (800136c <main+0x188>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0210 	orr.w	r2, r2, #16
 80012aa:	601a      	str	r2, [r3, #0]
  ON_G();
 80012ac:	2201      	movs	r2, #1
 80012ae:	2102      	movs	r1, #2
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b4:	f003 fa26 	bl	8004704 <HAL_GPIO_WritePin>

  while (1)
  {
	  maintain_processing_buffer();
 80012b8:	f002 fb66 	bl	8003988 <maintain_processing_buffer>
	  if(data_ready)
 80012bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <main+0x18c>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d021      	beq.n	800130a <main+0x126>
	  {
		  while(!txstate)
 80012c6:	e019      	b.n	80012fc <main+0x118>
		  {
			  CMD_Status state1 = CMD_Judge();
 80012c8:	f001 fd1a 	bl	8002d00 <CMD_Judge>
 80012cc:	4603      	mov	r3, r0
 80012ce:	72fb      	strb	r3, [r7, #11]
			  if(state1 == CMD_OK)
 80012d0:	7afb      	ldrb	r3, [r7, #11]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10b      	bne.n	80012ee <main+0x10a>
			  {
				  CMD_Status state2 = CMD_Execute();
 80012d6:	f001 fe07 	bl	8002ee8 <CMD_Execute>
 80012da:	4603      	mov	r3, r0
 80012dc:	72bb      	strb	r3, [r7, #10]
				  if(state2 != CMD_OK)
 80012de:	7abb      	ldrb	r3, [r7, #10]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00b      	beq.n	80012fc <main+0x118>
					  CMD_HANDLE_ERROR(state2);
 80012e4:	7abb      	ldrb	r3, [r7, #10]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fba4 	bl	8003a34 <CMD_HANDLE_ERROR>
 80012ec:	e006      	b.n	80012fc <main+0x118>
			  }
			  else if(state1 == CMD_END)
 80012ee:	7afb      	ldrb	r3, [r7, #11]
 80012f0:	2b06      	cmp	r3, #6
 80012f2:	d009      	beq.n	8001308 <main+0x124>
				  break;
			  else
				  CMD_HANDLE_ERROR(state1);
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fb9c 	bl	8003a34 <CMD_HANDLE_ERROR>
		  while(!txstate)
 80012fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <main+0x190>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0e0      	beq.n	80012c8 <main+0xe4>
 8001306:	e000      	b.n	800130a <main+0x126>
				  break;
 8001308:	bf00      	nop
		  }
	  }
	  if(sampling_ready == 1)
 800130a:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <main+0x194>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d1d1      	bne.n	80012b8 <main+0xd4>
	  {
		  if(ReadResult() == HAL_OK)
 8001314:	f001 fc50 	bl	8002bb8 <ReadResult>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1cc      	bne.n	80012b8 <main+0xd4>
		  {
			  Send_Data();
 800131e:	f002 fa69 	bl	80037f4 <Send_Data>
			  f_write(&fil, datatx, transmitlength, &bw);
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <main+0x198>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <main+0x19c>)
 800132a:	4916      	ldr	r1, [pc, #88]	@ (8001384 <main+0x1a0>)
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <main+0x17c>)
 800132e:	f00b fc0b 	bl	800cb48 <f_write>
			  f_sync(&fil);
 8001332:	480b      	ldr	r0, [pc, #44]	@ (8001360 <main+0x17c>)
 8001334:	f00b fdbc 	bl	800ceb0 <f_sync>
	  maintain_processing_buffer();
 8001338:	e7be      	b.n	80012b8 <main+0xd4>
 800133a:	bf00      	nop
 800133c:	200009a4 	.word	0x200009a4
 8001340:	200009f0 	.word	0x200009f0
 8001344:	08011ed8 	.word	0x08011ed8
 8001348:	20000300 	.word	0x20000300
 800134c:	20000794 	.word	0x20000794
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004
 8001358:	08011edc 	.word	0x08011edc
 800135c:	200007a4 	.word	0x200007a4
 8001360:	20000538 	.word	0x20000538
 8001364:	20000798 	.word	0x20000798
 8001368:	2000023c 	.word	0x2000023c
 800136c:	20000a3c 	.word	0x20000a3c
 8001370:	200002fe 	.word	0x200002fe
 8001374:	20000f9a 	.word	0x20000f9a
 8001378:	2000002e 	.word	0x2000002e
 800137c:	20000034 	.word	0x20000034
 8001380:	20000790 	.word	0x20000790
 8001384:	20000fa0 	.word	0x20000fa0

08001388 <_write>:
  }
}


int _write(int file, char *ptr, int len)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	b29a      	uxth	r2, r3
 8001398:	2364      	movs	r3, #100	@ 0x64
 800139a:	68b9      	ldr	r1, [r7, #8]
 800139c:	4803      	ldr	r0, [pc, #12]	@ (80013ac <_write+0x24>)
 800139e:	f005 fd81 	bl	8006ea4 <HAL_UART_Transmit>
    return len;
 80013a2:	687b      	ldr	r3, [r7, #4]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000a3c 	.word	0x20000a3c

080013b0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b096      	sub	sp, #88	@ 0x58
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2244      	movs	r2, #68	@ 0x44
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00d fad5 	bl	800e96e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013d6:	f003 f9d5 	bl	8004784 <HAL_PWREx_ControlVoltageScaling>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013e0:	f000 f835 	bl	800144e <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	2303      	movs	r3, #3
 80013f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80013fa:	2314      	movs	r3, #20
 80013fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013fe:	2307      	movs	r3, #7
 8001400:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001406:	2302      	movs	r3, #2
 8001408:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fa0e 	bl	8004830 <HAL_RCC_OscConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800141a:	f000 f818 	bl	800144e <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141e:	230f      	movs	r3, #15
 8001420:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001422:	2303      	movs	r3, #3
 8001424:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	2104      	movs	r1, #4
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fe0e 	bl	8005058 <HAL_RCC_ClockConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001442:	f000 f804 	bl	800144e <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3758      	adds	r7, #88	@ 0x58
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <Error_Handler>:

void Error_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001452:	b672      	cpsid	i
}
 8001454:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  SHINE_R();
 8001456:	f000 f806 	bl	8001466 <SHINE_R>
	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800145e:	f002 fbfb 	bl	8003c58 <HAL_Delay>
	  SHINE_R();
 8001462:	bf00      	nop
 8001464:	e7f7      	b.n	8001456 <Error_Handler+0x8>

08001466 <SHINE_R>:
const char *LOG_PREFIX = "log";
char current_log_file[20];
static int cached_max_log_num = -1;

void SHINE_R(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800146a:	2101      	movs	r1, #1
 800146c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001470:	f003 f960 	bl	8004734 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001478:	f002 fbee 	bl	8003c58 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800147c:	2101      	movs	r1, #1
 800147e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001482:	f003 f957 	bl	8004734 <HAL_GPIO_TogglePin>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <SPI_TransmitReceive>:
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}

uint8_t SPI_TransmitReceive(uint8_t data) //发送接收函数封装
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1 ,100);
 8001496:	f107 020f 	add.w	r2, r7, #15
 800149a:	1df9      	adds	r1, r7, #7
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <SPI_TransmitReceive+0x28>)
 80014a4:	f004 fbdb 	bl	8005c5e <HAL_SPI_TransmitReceive>
    return rx_data;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000081c 	.word	0x2000081c

080014b8 <SD_PowerOnSeq>:

void SD_PowerOnSeq(void) //80个时钟周期
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c4:	4809      	ldr	r0, [pc, #36]	@ (80014ec <SD_PowerOnSeq+0x34>)
 80014c6:	f003 f91d 	bl	8004704 <HAL_GPIO_WritePin>
    for(uint8_t i=0; i<10; i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	71fb      	strb	r3, [r7, #7]
 80014ce:	e005      	b.n	80014dc <SD_PowerOnSeq+0x24>
    {
        SPI_TransmitReceive(0xFF);
 80014d0:	20ff      	movs	r0, #255	@ 0xff
 80014d2:	f7ff ffdb 	bl	800148c <SPI_TransmitReceive>
    for(uint8_t i=0; i<10; i++)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	3301      	adds	r3, #1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b09      	cmp	r3, #9
 80014e0:	d9f6      	bls.n	80014d0 <SD_PowerOnSeq+0x18>
    }
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	48000400 	.word	0x48000400

080014f0 <SD_SendCmd>:

uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg, uint8_t crc)  //发送cmd命令，arg参数及crc校准
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
	uint8_t retry = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
	uint8_t response;
	do{
		retry=SPI_TransmitReceive(0xFF);
 8001504:	20ff      	movs	r0, #255	@ 0xff
 8001506:	f7ff ffc1 	bl	800148c <SPI_TransmitReceive>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
	}while(retry!=0xFF);  //这段如果不加，发送CMD8返回值会错误
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2bff      	cmp	r3, #255	@ 0xff
 8001512:	d1f7      	bne.n	8001504 <SD_SendCmd+0x14>

    SPI_TransmitReceive(0x40 | cmd);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ffb5 	bl	800148c <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 24) & 0xFF);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	0e1b      	lsrs	r3, r3, #24
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ffaf 	bl	800148c <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 16) & 0xFF);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ffa9 	bl	800148c <SPI_TransmitReceive>
    SPI_TransmitReceive((arg >> 8)  & 0xFF);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ffa3 	bl	800148c <SPI_TransmitReceive>
    SPI_TransmitReceive(arg & 0xFF);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff9e 	bl	800148c <SPI_TransmitReceive>
    SPI_TransmitReceive(crc | 0x01);
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff97 	bl	800148c <SPI_TransmitReceive>
    retry = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]

	do {
	response = SPI_TransmitReceive(0xFF);
 8001562:	20ff      	movs	r0, #255	@ 0xff
 8001564:	f7ff ff92 	bl	800148c <SPI_TransmitReceive>
 8001568:	4603      	mov	r3, r0
 800156a:	73bb      	strb	r3, [r7, #14]
	retry++;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
	} while ((response & 0x80) && (retry < 0xFF));
 8001572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001576:	2b00      	cmp	r3, #0
 8001578:	da02      	bge.n	8001580 <SD_SendCmd+0x90>
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2bff      	cmp	r3, #255	@ 0xff
 800157e:	d1f0      	bne.n	8001562 <SD_SendCmd+0x72>
	return response;
 8001580:	7bbb      	ldrb	r3, [r7, #14]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <SD_Init>:

SD_Status SD_Init(void) //SD卡初始化
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
	uint8_t r1;
	uint8_t buff[6] = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	809a      	strh	r2, [r3, #4]
	uint16_t retry;
	uint8_t i;

	SD_PowerOnSeq();
 800159a:	f7ff ff8d 	bl	80014b8 <SD_PowerOnSeq>
	SD_CS_LOW();
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015a4:	487a      	ldr	r0, [pc, #488]	@ (8001790 <SD_Init+0x204>)
 80015a6:	f003 f8ad 	bl	8004704 <HAL_GPIO_WritePin>

	retry = 1000; // 设置超时值
 80015aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ae:	81fb      	strh	r3, [r7, #14]
	do {
	    r1 = SD_SendCmd(CMD0, 0, 0x95);
 80015b0:	2295      	movs	r2, #149	@ 0x95
 80015b2:	2100      	movs	r1, #0
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff ff9b 	bl	80014f0 <SD_SendCmd>
 80015ba:	4603      	mov	r3, r0
 80015bc:	733b      	strb	r3, [r7, #12]
	    retry--;
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	81fb      	strh	r3, [r7, #14]
	} while (r1 != 0x01 && retry > 0);
 80015c4:	7b3b      	ldrb	r3, [r7, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d002      	beq.n	80015d0 <SD_Init+0x44>
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ef      	bne.n	80015b0 <SD_Init+0x24>

	if (retry == 0)
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d107      	bne.n	80015e6 <SD_Init+0x5a>
	{
	    SD_CS_HIGH();
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015dc:	486c      	ldr	r0, [pc, #432]	@ (8001790 <SD_Init+0x204>)
 80015de:	f003 f891 	bl	8004704 <HAL_GPIO_WritePin>
	    return SD_ERROR; // 超时返回错误
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0d0      	b.n	8001788 <SD_Init+0x1fc>
	}

	SD_TYPE=0;
 80015e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001794 <SD_Init+0x208>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
	r1 = SD_SendCmd(CMD8, 0x1AA, 0x87);
 80015ec:	2287      	movs	r2, #135	@ 0x87
 80015ee:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80015f2:	2008      	movs	r0, #8
 80015f4:	f7ff ff7c 	bl	80014f0 <SD_SendCmd>
 80015f8:	4603      	mov	r3, r0
 80015fa:	733b      	strb	r3, [r7, #12]
	if(r1==0x01)
 80015fc:	7b3b      	ldrb	r3, [r7, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d161      	bne.n	80016c6 <SD_Init+0x13a>
	{
		for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0xFF);
 8001602:	2300      	movs	r3, #0
 8001604:	737b      	strb	r3, [r7, #13]
 8001606:	e00d      	b.n	8001624 <SD_Init+0x98>
 8001608:	7b7c      	ldrb	r4, [r7, #13]
 800160a:	20ff      	movs	r0, #255	@ 0xff
 800160c:	f7ff ff3e 	bl	800148c <SPI_TransmitReceive>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	f104 0310 	add.w	r3, r4, #16
 8001618:	443b      	add	r3, r7
 800161a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	3301      	adds	r3, #1
 8001622:	737b      	strb	r3, [r7, #13]
 8001624:	7b7b      	ldrb	r3, [r7, #13]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d9ee      	bls.n	8001608 <SD_Init+0x7c>
		if(buff[2]==0X01&&buff[3]==0XAA)
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	2b01      	cmp	r3, #1
 800162e:	f040 8098 	bne.w	8001762 <SD_Init+0x1d6>
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2baa      	cmp	r3, #170	@ 0xaa
 8001636:	f040 8094 	bne.w	8001762 <SD_Init+0x1d6>
		{
			retry=0XFFFE;
 800163a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800163e:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2037      	movs	r0, #55	@ 0x37
 8001646:	f7ff ff53 	bl	80014f0 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0x40000000,0);
 800164a:	2200      	movs	r2, #0
 800164c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001650:	2029      	movs	r0, #41	@ 0x29
 8001652:	f7ff ff4d 	bl	80014f0 <SD_SendCmd>
 8001656:	4603      	mov	r3, r0
 8001658:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 800165a:	7b3b      	ldrb	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <SD_Init+0xde>
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	81fa      	strh	r2, [r7, #14]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ea      	bne.n	8001640 <SD_Init+0xb4>
			r1=SD_SendCmd(CMD58,0,0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	203a      	movs	r0, #58	@ 0x3a
 8001670:	f7ff ff3e 	bl	80014f0 <SD_SendCmd>
 8001674:	4603      	mov	r3, r0
 8001676:	733b      	strb	r3, [r7, #12]
			if(retry&&r1==0)
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d071      	beq.n	8001762 <SD_Init+0x1d6>
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d16e      	bne.n	8001762 <SD_Init+0x1d6>
			{
				for(i=0;i<4;i++)buff[i]=SPI_TransmitReceive(0XFF);
 8001684:	2300      	movs	r3, #0
 8001686:	737b      	strb	r3, [r7, #13]
 8001688:	e00d      	b.n	80016a6 <SD_Init+0x11a>
 800168a:	7b7c      	ldrb	r4, [r7, #13]
 800168c:	20ff      	movs	r0, #255	@ 0xff
 800168e:	f7ff fefd 	bl	800148c <SPI_TransmitReceive>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	f104 0310 	add.w	r3, r4, #16
 800169a:	443b      	add	r3, r7
 800169c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	3301      	adds	r3, #1
 80016a4:	737b      	strb	r3, [r7, #13]
 80016a6:	7b7b      	ldrb	r3, [r7, #13]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d9ee      	bls.n	800168a <SD_Init+0xfe>
				if(buff[0]&0x40){
 80016ac:	793b      	ldrb	r3, [r7, #4]
 80016ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <SD_Init+0x132>
					SD_TYPE=V2HC;
 80016b6:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <SD_Init+0x208>)
 80016b8:	2206      	movs	r2, #6
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e051      	b.n	8001762 <SD_Init+0x1d6>
				}else {
					SD_TYPE=V2;
 80016be:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <SD_Init+0x208>)
 80016c0:	2204      	movs	r2, #4
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e04d      	b.n	8001762 <SD_Init+0x1d6>
			}
		}
	}
	else
	{
		SD_SendCmd(CMD55,0,0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2037      	movs	r0, #55	@ 0x37
 80016cc:	f7ff ff10 	bl	80014f0 <SD_SendCmd>
		r1=SD_SendCmd(ACMD41,0,0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2029      	movs	r0, #41	@ 0x29
 80016d6:	f7ff ff0b 	bl	80014f0 <SD_SendCmd>
 80016da:	4603      	mov	r3, r0
 80016dc:	733b      	strb	r3, [r7, #12]
		if(r1<=1)
 80016de:	7b3b      	ldrb	r3, [r7, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d81a      	bhi.n	800171a <SD_Init+0x18e>
		{
			SD_TYPE=V1;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <SD_Init+0x208>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 80016ea:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80016ee:	81fb      	strh	r3, [r7, #14]
			do
			{
				SD_SendCmd(CMD55,0,0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2037      	movs	r0, #55	@ 0x37
 80016f6:	f7ff fefb 	bl	80014f0 <SD_SendCmd>
				r1=SD_SendCmd(ACMD41,0,0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2029      	movs	r0, #41	@ 0x29
 8001700:	f7ff fef6 	bl	80014f0 <SD_SendCmd>
 8001704:	4603      	mov	r3, r0
 8001706:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 8001708:	7b3b      	ldrb	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01a      	beq.n	8001744 <SD_Init+0x1b8>
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	81fa      	strh	r2, [r7, #14]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1eb      	bne.n	80016f0 <SD_Init+0x164>
 8001718:	e014      	b.n	8001744 <SD_Init+0x1b8>
		}else
		{
			SD_TYPE=MMC;
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <SD_Init+0x208>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
			retry=0XFFFE;
 8001720:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8001724:	81fb      	strh	r3, [r7, #14]
			do
			{
				r1=SD_SendCmd(CMD1,0,0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fee0 	bl	80014f0 <SD_SendCmd>
 8001730:	4603      	mov	r3, r0
 8001732:	733b      	strb	r3, [r7, #12]
			}while(r1&&retry--);
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <SD_Init+0x1b8>
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	81fa      	strh	r2, [r7, #14]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <SD_Init+0x19a>
		}
		if(retry==0||SD_SendCmd(CMD16,512,0)!=0)SD_TYPE=ERR;
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d008      	beq.n	800175c <SD_Init+0x1d0>
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001750:	2010      	movs	r0, #16
 8001752:	f7ff fecd 	bl	80014f0 <SD_SendCmd>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <SD_Init+0x1d6>
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <SD_Init+0x208>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
	}
	SD_CS_HIGH();
 8001762:	2201      	movs	r2, #1
 8001764:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001768:	4809      	ldr	r0, [pc, #36]	@ (8001790 <SD_Init+0x204>)
 800176a:	f002 ffcb 	bl	8004704 <HAL_GPIO_WritePin>
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <SD_Init+0x20c>)
 8001770:	2208      	movs	r2, #8
 8001772:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi2);
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <SD_Init+0x20c>)
 8001776:	f004 f9cf 	bl	8005b18 <HAL_SPI_Init>

    if(SD_TYPE != ERR)
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <SD_Init+0x208>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SD_Init+0x1fa>
    	return SD_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <SD_Init+0x1fc>
    else
    	return SD_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	48000400 	.word	0x48000400
 8001794:	200007a0 	.word	0x200007a0
 8001798:	2000081c 	.word	0x2000081c

0800179c <SD_ReceiveData>:

uint8_t SD_ReceiveData(uint8_t *data, uint16_t len) //从SD卡读取指定长度的数据块，len为512时为单块大小
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
   uint8_t r1;
   SD_CS_LOW();
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ae:	4817      	ldr	r0, [pc, #92]	@ (800180c <SD_ReceiveData+0x70>)
 80017b0:	f002 ffa8 	bl	8004704 <HAL_GPIO_WritePin>
   do
   {
      r1 = SPI_TransmitReceive(0xFF);
 80017b4:	20ff      	movs	r0, #255	@ 0xff
 80017b6:	f7ff fe69 	bl	800148c <SPI_TransmitReceive>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(100);
 80017be:	2064      	movs	r0, #100	@ 0x64
 80017c0:	f002 fa4a 	bl	8003c58 <HAL_Delay>
   }while(r1 != 0xFE); // sd卡spi模式单块读取的起始令牌是0xFE
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80017c8:	d1f4      	bne.n	80017b4 <SD_ReceiveData+0x18>
  while(len--)
 80017ca:	e009      	b.n	80017e0 <SD_ReceiveData+0x44>
  {
   *data = SPI_TransmitReceive(0xFF);
 80017cc:	20ff      	movs	r0, #255	@ 0xff
 80017ce:	f7ff fe5d 	bl	800148c <SPI_TransmitReceive>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	701a      	strb	r2, [r3, #0]
   data++;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3301      	adds	r3, #1
 80017de:	607b      	str	r3, [r7, #4]
  while(len--)
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	807a      	strh	r2, [r7, #2]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <SD_ReceiveData+0x30>
  }
  SPI_TransmitReceive(0xFF);
 80017ea:	20ff      	movs	r0, #255	@ 0xff
 80017ec:	f7ff fe4e 	bl	800148c <SPI_TransmitReceive>
  SPI_TransmitReceive(0xFF);
 80017f0:	20ff      	movs	r0, #255	@ 0xff
 80017f2:	f7ff fe4b 	bl	800148c <SPI_TransmitReceive>
  SD_CS_HIGH();
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017fc:	4803      	ldr	r0, [pc, #12]	@ (800180c <SD_ReceiveData+0x70>)
 80017fe:	f002 ff81 	bl	8004704 <HAL_GPIO_WritePin>
  return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	48000400 	.word	0x48000400

08001810 <SD_SendBlock>:

uint8_t SD_SendBlock(uint8_t*buf,uint8_t cmd) //写入扇区内容，512字节
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint8_t r1;
	do{
		r1=SPI_TransmitReceive(0xFF);
 800181c:	20ff      	movs	r0, #255	@ 0xff
 800181e:	f7ff fe35 	bl	800148c <SPI_TransmitReceive>
 8001822:	4603      	mov	r3, r0
 8001824:	737b      	strb	r3, [r7, #13]
	}while(r1!=0xFF);
 8001826:	7b7b      	ldrb	r3, [r7, #13]
 8001828:	2bff      	cmp	r3, #255	@ 0xff
 800182a:	d1f7      	bne.n	800181c <SD_SendBlock+0xc>

	SPI_TransmitReceive(cmd);
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fe2c 	bl	800148c <SPI_TransmitReceive>
	if(cmd!=0xFD) //0xFD为多块写入停止令牌
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	2bfd      	cmp	r3, #253	@ 0xfd
 8001838:	d022      	beq.n	8001880 <SD_SendBlock+0x70>
	{
		for(i = 0;i < 512;i++)
 800183a:	2300      	movs	r3, #0
 800183c:	81fb      	strh	r3, [r7, #14]
 800183e:	e009      	b.n	8001854 <SD_SendBlock+0x44>
			SPI_TransmitReceive(buf[i]);
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe1f 	bl	800148c <SPI_TransmitReceive>
		for(i = 0;i < 512;i++)
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	3301      	adds	r3, #1
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800185a:	d3f1      	bcc.n	8001840 <SD_SendBlock+0x30>
		SPI_TransmitReceive(0xFF);
 800185c:	20ff      	movs	r0, #255	@ 0xff
 800185e:	f7ff fe15 	bl	800148c <SPI_TransmitReceive>
		SPI_TransmitReceive(0xFF);
 8001862:	20ff      	movs	r0, #255	@ 0xff
 8001864:	f7ff fe12 	bl	800148c <SPI_TransmitReceive>
		i=SPI_TransmitReceive(0xFF);
 8001868:	20ff      	movs	r0, #255	@ 0xff
 800186a:	f7ff fe0f 	bl	800148c <SPI_TransmitReceive>
 800186e:	4603      	mov	r3, r0
 8001870:	81fb      	strh	r3, [r7, #14]
		if((i&0x1F)!=0x05) //低5位为状态码，高3位为保留，应舍弃，0x05表示接收正确
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2b05      	cmp	r3, #5
 800187a:	d001      	beq.n	8001880 <SD_SendBlock+0x70>
			return 2;
 800187c:	2302      	movs	r3, #2
 800187e:	e000      	b.n	8001882 <SD_SendBlock+0x72>
	}
    return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <SD_ReadDisk>:

uint8_t SD_ReadDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //读SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	4613      	mov	r3, r2
 8001898:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018a0:	4824      	ldr	r0, [pc, #144]	@ (8001934 <SD_ReadDisk+0xa8>)
 80018a2:	f002 ff2f 	bl	8004704 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 80018a6:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <SD_ReadDisk+0xac>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d002      	beq.n	80018b4 <SD_ReadDisk+0x28>
		sector *= 512;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d111      	bne.n	80018de <SD_ReadDisk+0x52>
	{
		r1=SD_SendCmd(CMD17,sector,0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	2011      	movs	r0, #17
 80018c0:	f7ff fe16 	bl	80014f0 <SD_SendCmd>
 80018c4:	4603      	mov	r3, r0
 80018c6:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d127      	bne.n	800191e <SD_ReadDisk+0x92>
			r1=SD_ReceiveData(buf,512);
 80018ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff ff62 	bl	800179c <SD_ReceiveData>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]
 80018dc:	e01f      	b.n	800191e <SD_ReadDisk+0x92>
	}
	else
	{
		r1=SD_SendCmd(CMD18,sector,0);
 80018de:	2200      	movs	r2, #0
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	2012      	movs	r0, #18
 80018e4:	f7ff fe04 	bl	80014f0 <SD_SendCmd>
 80018e8:	4603      	mov	r3, r0
 80018ea:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_ReceiveData(buf,512);
 80018ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff ff53 	bl	800179c <SD_ReceiveData>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
			buf+=512;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001900:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0);
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	3b01      	subs	r3, #1
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <SD_ReadDisk+0x88>
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0eb      	beq.n	80018ec <SD_ReadDisk+0x60>
		SD_SendCmd(CMD12,0,0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	200c      	movs	r0, #12
 800191a:	f7ff fde9 	bl	80014f0 <SD_SendCmd>
	}
	SD_CS_HIGH();
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001924:	4803      	ldr	r0, [pc, #12]	@ (8001934 <SD_ReadDisk+0xa8>)
 8001926:	f002 feed 	bl	8004704 <HAL_GPIO_WritePin>
	return r1;
 800192a:	7dfb      	ldrb	r3, [r7, #23]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	48000400 	.word	0x48000400
 8001938:	200007a0 	.word	0x200007a0

0800193c <SD_WriteDisk>:

uint8_t SD_WriteDisk(uint8_t*buf,uint32_t sector,uint8_t cnt) //写SD卡，buf缓存区 sector起始扇区 cnt扇区数
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	71fb      	strb	r3, [r7, #7]
	SD_CS_LOW();
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001950:	482d      	ldr	r0, [pc, #180]	@ (8001a08 <SD_WriteDisk+0xcc>)
 8001952:	f002 fed7 	bl	8004704 <HAL_GPIO_WritePin>
	uint8_t r1;
	if(SD_TYPE!=V2HC)
 8001956:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <SD_WriteDisk+0xd0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d002      	beq.n	8001964 <SD_WriteDisk+0x28>
		sector *= 512;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d110      	bne.n	800198c <SD_WriteDisk+0x50>
	{
		r1=SD_SendCmd(CMD24,sector,0);
 800196a:	2200      	movs	r2, #0
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	2018      	movs	r0, #24
 8001970:	f7ff fdbe 	bl	80014f0 <SD_SendCmd>
 8001974:	4603      	mov	r3, r0
 8001976:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d138      	bne.n	80019f0 <SD_WriteDisk+0xb4>
		{
			r1=SD_SendBlock(buf,0xFE);
 800197e:	21fe      	movs	r1, #254	@ 0xfe
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff ff45 	bl	8001810 <SD_SendBlock>
 8001986:	4603      	mov	r3, r0
 8001988:	75fb      	strb	r3, [r7, #23]
 800198a:	e031      	b.n	80019f0 <SD_WriteDisk+0xb4>
		}
	}
	else
	{
		if(SD_TYPE!=MMC)
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <SD_WriteDisk+0xd0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d00a      	beq.n	80019aa <SD_WriteDisk+0x6e>
		{
			SD_SendCmd(CMD55,0,0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	2037      	movs	r0, #55	@ 0x37
 800199a:	f7ff fda9 	bl	80014f0 <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0);
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2200      	movs	r2, #0
 80019a2:	4619      	mov	r1, r3
 80019a4:	2017      	movs	r0, #23
 80019a6:	f7ff fda3 	bl	80014f0 <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	2019      	movs	r0, #25
 80019b0:	f7ff fd9e 	bl	80014f0 <SD_SendCmd>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <SD_WriteDisk+0xb4>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); //0xFC为多块写入起始令牌
 80019be:	21fc      	movs	r1, #252	@ 0xfc
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff ff25 	bl	8001810 <SD_SendBlock>
 80019c6:	4603      	mov	r3, r0
 80019c8:	75fb      	strb	r3, [r7, #23]
				buf+=512;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80019d0:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	71fb      	strb	r3, [r7, #7]
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <SD_WriteDisk+0xa8>
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ec      	beq.n	80019be <SD_WriteDisk+0x82>
			r1=SD_SendBlock(0,0xFD);
 80019e4:	21fd      	movs	r1, #253	@ 0xfd
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff ff12 	bl	8001810 <SD_SendBlock>
 80019ec:	4603      	mov	r3, r0
 80019ee:	75fb      	strb	r3, [r7, #23]
		}
	}
	SD_CS_HIGH();
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019f6:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <SD_WriteDisk+0xcc>)
 80019f8:	f002 fe84 	bl	8004704 <HAL_GPIO_WritePin>
	return r1;
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	200007a0 	.word	0x200007a0

08001a10 <SD_GETCSD>:

uint8_t SD_GETCSD(uint8_t *csd_data) //获取CSD数据
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	SD_CS_LOW();
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a1e:	4810      	ldr	r0, [pc, #64]	@ (8001a60 <SD_GETCSD+0x50>)
 8001a20:	f002 fe70 	bl	8004704 <HAL_GPIO_WritePin>
	uint8_t r1;
    if(SD_SendCmd(CMD9,0,0) == 0)
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2009      	movs	r0, #9
 8001a2a:	f7ff fd61 	bl	80014f0 <SD_SendCmd>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <SD_GETCSD+0x30>
    {
    	r1=SD_ReceiveData(csd_data, 16);
 8001a34:	2110      	movs	r1, #16
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff feb0 	bl	800179c <SD_ReceiveData>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]
    }
	SD_CS_HIGH();
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <SD_GETCSD+0x50>)
 8001a48:	f002 fe5c 	bl	8004704 <HAL_GPIO_WritePin>
	if(r1)
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SD_GETCSD+0x46>
		return 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <SD_GETCSD+0x48>
	else
		return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	48000400 	.word	0x48000400

08001a64 <SD_GetSectorCount>:

uint32_t SD_GetSectorCount(void) //获取SD卡总扇区数
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
    uint8_t csd[16];
    uint32_t Capacity;
    uint8_t n;
	uint16_t csize;
    if(SD_GETCSD(csd)!=0)
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ffcf 	bl	8001a10 <SD_GETCSD>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SD_GetSectorCount+0x18>
    	return 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e03e      	b.n	8001afa <SD_GetSectorCount+0x96>
    if((csd[0]&0xC0)==0x40)
 8001a7c:	783b      	ldrb	r3, [r7, #0]
 8001a7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001a82:	2b40      	cmp	r3, #64	@ 0x40
 8001a84:	d10c      	bne.n	8001aa0 <SD_GetSectorCount+0x3c>
    {
		csize = csd[9] + ((uint16_t)csd[8] << 8) + 1;
 8001a86:	7a7b      	ldrb	r3, [r7, #9]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	7a3b      	ldrb	r3, [r7, #8]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	823b      	strh	r3, [r7, #16]
		Capacity = (uint32_t)csize << 10;
 8001a98:	8a3b      	ldrh	r3, [r7, #16]
 8001a9a:	029b      	lsls	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e02b      	b.n	8001af8 <SD_GetSectorCount+0x94>
    }
    else
    {
		n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001aa0:	797b      	ldrb	r3, [r7, #5]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	7abb      	ldrb	r3, [r7, #10]
 8001aaa:	09db      	lsrs	r3, r3, #7
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	7a7b      	ldrb	r3, [r7, #9]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f003 0306 	and.w	r3, r3, #6
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	74fb      	strb	r3, [r7, #19]
		csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8001ac6:	7a3b      	ldrb	r3, [r7, #8]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	823b      	strh	r3, [r7, #16]
		Capacity= (uint32_t)csize << (n - 9);
 8001aec:	8a3a      	ldrh	r2, [r7, #16]
 8001aee:	7cfb      	ldrb	r3, [r7, #19]
 8001af0:	3b09      	subs	r3, #9
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
    }
    return Capacity;
 8001af8:	697b      	ldr	r3, [r7, #20]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <file_exists>:

FRESULT file_exists(const char *path) //检查配置文件是否存在
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b0ca      	sub	sp, #296	@ 0x128
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001b0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b10:	6018      	str	r0, [r3, #0]
    FILINFO fno;
    return f_stat(path, &fno);
 8001b12:	f107 0208 	add.w	r2, r7, #8
 8001b16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001b1a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b1e:	4611      	mov	r1, r2
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	f00b fc57 	bl	800d3d4 <f_stat>
 8001b26:	4603      	mov	r3, r0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <get_next_log_number>:

int get_next_log_number(void) //寻找sd卡中生成的文件最大的数字并返回最大数字+1
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0e4      	sub	sp, #400	@ 0x190
 8001b38:	af00      	add	r7, sp, #0
    if (cached_max_log_num == -1)
 8001b3a:	4b54      	ldr	r3, [pc, #336]	@ (8001c8c <get_next_log_number+0x158>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b42:	f040 8096 	bne.w	8001c72 <get_next_log_number+0x13e>
    {
        DIR dir;
        FILINFO fno;
        const char *prefix = LOG_PREFIX;
 8001b46:	4b52      	ldr	r3, [pc, #328]	@ (8001c90 <get_next_log_number+0x15c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        const size_t prefix_len = strlen(prefix);
 8001b4e:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8001b52:	f7fe fb9d 	bl	8000290 <strlen>
 8001b56:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
        int max_num = -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

        if (f_opendir(&dir, "/") == FR_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	494b      	ldr	r1, [pc, #300]	@ (8001c94 <get_next_log_number+0x160>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00b fafe 	bl	800d168 <f_opendir>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d179      	bne.n	8001c66 <get_next_log_number+0x132>
        {
            while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0)
 8001b72:	e063      	b.n	8001c3c <get_next_log_number+0x108>
            {
                char* name = fno.fname;
 8001b74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b78:	331a      	adds	r3, #26
 8001b7a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
                size_t len = strlen(name);
 8001b7e:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001b82:	f7fe fb85 	bl	8000290 <strlen>
 8001b86:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174

                if (len == prefix_len + 9 && strncmp(name, prefix, prefix_len) == 0)
 8001b8a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001b8e:	3309      	adds	r3, #9
 8001b90:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d151      	bne.n	8001c3c <get_next_log_number+0x108>
 8001b98:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001b9c:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8001ba0:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001ba4:	f00c feeb 	bl	800e97e <strncmp>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d146      	bne.n	8001c3c <get_next_log_number+0x108>
                {
                    int num = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    for (int i = 0; i < 5; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001bba:	e024      	b.n	8001c06 <get_next_log_number+0xd2>
                    {
                        char c = name[prefix_len + i];
 8001bbc:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8001bc0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
                        if (c < '0' || c > '9') break;
 8001bd2:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001bd6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001bd8:	d919      	bls.n	8001c0e <get_next_log_number+0xda>
 8001bda:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001bde:	2b39      	cmp	r3, #57	@ 0x39
 8001be0:	d815      	bhi.n	8001c0e <get_next_log_number+0xda>
                        num = num * 10 + (c - '0');
 8001be2:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8001bf4:	3b30      	subs	r3, #48	@ 0x30
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    for (int i = 0; i < 5; i++)
 8001bfc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c00:	3301      	adds	r3, #1
 8001c02:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c06:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	ddd6      	ble.n	8001bbc <get_next_log_number+0x88>
                    }

                    if (strcmp(name + prefix_len + 5, ".txt") == 0)
 8001c0e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001c12:	3305      	adds	r3, #5
 8001c14:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c18:	4413      	add	r3, r2
 8001c1a:	491f      	ldr	r1, [pc, #124]	@ (8001c98 <get_next_log_number+0x164>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fad7 	bl	80001d0 <strcmp>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <get_next_log_number+0x108>
                    {
                        if (num > max_num) max_num = num;
 8001c28:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001c2c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dd03      	ble.n	8001c3c <get_next_log_number+0x108>
 8001c34:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c38:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
            while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] != 0)
 8001c3c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001c40:	463b      	mov	r3, r7
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f00b fb73 	bl	800d330 <f_readdir>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d106      	bne.n	8001c5e <get_next_log_number+0x12a>
 8001c50:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001c54:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c58:	7e9b      	ldrb	r3, [r3, #26]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d18a      	bne.n	8001b74 <get_next_log_number+0x40>
                    }
                }
            }
            f_closedir(&dir);
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4618      	mov	r0, r3
 8001c62:	f00b fb3f 	bl	800d2e4 <f_closedir>
        }
        cached_max_log_num = (max_num < 0) ? 0 : max_num;
 8001c66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <get_next_log_number+0x158>)
 8001c70:	6013      	str	r3, [r2, #0]
    }
    	return ++cached_max_log_num;
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <get_next_log_number+0x158>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <get_next_log_number+0x158>)
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <get_next_log_number+0x158>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000004 	.word	0x20000004
 8001c94:	08011ef8 	.word	0x08011ef8
 8001c98:	08011efc 	.word	0x08011efc

08001c9c <read_config>:
#include "sdconfig.h"
#include "user_spi.h"
#include "user_usart.h"

FRESULT read_config(char *buffer, uint16_t buf_size) //读配置文件
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001ca8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001cac:	6018      	str	r0, [r3, #0]
 8001cae:	460a      	mov	r2, r1
 8001cb0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001cb4:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001cb8:	801a      	strh	r2, [r3, #0]
    FIL fil;
    FRESULT res = f_open(&fil, CONFIG_FILE, FA_READ);
 8001cba:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <read_config+0x94>)
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00a faed 	bl	800c2a4 <f_open>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if(res == FR_OK)
 8001cd0:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d124      	bne.n	8001d22 <read_config+0x86>
    {
        UINT br;
        f_read(&fil, buffer, buf_size - 1, &br);
 8001cd8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001cdc:	f2a3 236e 	subw	r3, r3, #622	@ 0x26e
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	461c      	mov	r4, r3
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001cee:	f5a2 711b 	sub.w	r1, r2, #620	@ 0x26c
 8001cf2:	f107 0010 	add.w	r0, r7, #16
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	6809      	ldr	r1, [r1, #0]
 8001cfa:	f00a fdad 	bl	800c858 <f_read>
        buffer[br] = '\0';
 8001cfe:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d02:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001d0c:	f5a2 721b 	sub.w	r2, r2, #620	@ 0x26c
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
        f_close(&fil);
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00b f9f9 	bl	800d114 <f_close>
    }
    return res;
 8001d22:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	20000000 	.word	0x20000000

08001d34 <parse_config>:

SD_Config parse_config(const char *config_text) //寻找配置文件中的相关参数，查看是否有修改，将参数保存并返回
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
	SD_Config config =
 8001d3e:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <parse_config+0x128>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	813b      	strh	r3, [r7, #8]
 8001d46:	4b46      	ldr	r3, [pc, #280]	@ (8001e60 <parse_config+0x12c>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	817b      	strh	r3, [r7, #10]
 8001d4c:	4b45      	ldr	r3, [pc, #276]	@ (8001e64 <parse_config+0x130>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	81bb      	strh	r3, [r7, #12]
 8001d52:	4b45      	ldr	r3, [pc, #276]	@ (8001e68 <parse_config+0x134>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	81fb      	strh	r3, [r7, #14]
		.peakth = PEAKTH,
		.almstth = ALMSTTH,
		.pkwnd = PKWND
	};

    const char *section = strstr(config_text, CONFIG_SECTION);
 8001d58:	4944      	ldr	r1, [pc, #272]	@ (8001e6c <parse_config+0x138>)
 8001d5a:	6838      	ldr	r0, [r7, #0]
 8001d5c:	f00c fe21 	bl	800e9a2 <strstr>
 8001d60:	6138      	str	r0, [r7, #16]
    if (!section) return config;
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <parse_config+0x44>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	cb03      	ldmia	r3!, {r0, r1}
 8001d72:	6010      	str	r0, [r2, #0]
 8001d74:	6051      	str	r1, [r2, #4]
 8001d76:	e06c      	b.n	8001e52 <parse_config+0x11e>

    const char *ptr = section + strlen(CONFIG_SECTION);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	617b      	str	r3, [r7, #20]

    while (*ptr != '\0' && *ptr != '[')
 8001d7e:	e059      	b.n	8001e34 <parse_config+0x100>
    {
        if (strncmp(ptr, RECODE_KEY, strlen(RECODE_KEY)) == 0)
 8001d80:	220c      	movs	r2, #12
 8001d82:	493b      	ldr	r1, [pc, #236]	@ (8001e70 <parse_config+0x13c>)
 8001d84:	6978      	ldr	r0, [r7, #20]
 8001d86:	f00c fdfa 	bl	800e97e <strncmp>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <parse_config+0x70>
        {
            ptr += strlen(RECODE_KEY) + 1;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	330d      	adds	r3, #13
 8001d94:	617b      	str	r3, [r7, #20]
            config.receiver_code = atoi(ptr);
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f00b fcc5 	bl	800d726 <atoi>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	813b      	strh	r3, [r7, #8]
 8001da2:	e038      	b.n	8001e16 <parse_config+0xe2>
        }
        else if (strncmp(ptr, PEAKTH_KEY, strlen(PEAKTH_KEY)) == 0)
 8001da4:	2206      	movs	r2, #6
 8001da6:	4933      	ldr	r1, [pc, #204]	@ (8001e74 <parse_config+0x140>)
 8001da8:	6978      	ldr	r0, [r7, #20]
 8001daa:	f00c fde8 	bl	800e97e <strncmp>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <parse_config+0x94>
        {
            ptr += strlen(PEAKTH_KEY) + 1;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3307      	adds	r3, #7
 8001db8:	617b      	str	r3, [r7, #20]
            config.peakth = atoi(ptr);
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f00b fcb3 	bl	800d726 <atoi>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	817b      	strh	r3, [r7, #10]
 8001dc6:	e026      	b.n	8001e16 <parse_config+0xe2>
        }
        else if (strncmp(ptr, ALMSTTH_KEY, strlen(ALMSTTH_KEY)) == 0)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	492b      	ldr	r1, [pc, #172]	@ (8001e78 <parse_config+0x144>)
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f00c fdd6 	bl	800e97e <strncmp>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <parse_config+0xb8>
        {
            ptr += strlen(ALMSTTH_KEY) + 1;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3308      	adds	r3, #8
 8001ddc:	617b      	str	r3, [r7, #20]
            config.almstth = atoi(ptr);
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f00b fca1 	bl	800d726 <atoi>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	81bb      	strh	r3, [r7, #12]
 8001dea:	e014      	b.n	8001e16 <parse_config+0xe2>
        }
        else if (strncmp(ptr, PKWND_KEY, strlen(PKWND_KEY)) == 0)
 8001dec:	2205      	movs	r2, #5
 8001dee:	4923      	ldr	r1, [pc, #140]	@ (8001e7c <parse_config+0x148>)
 8001df0:	6978      	ldr	r0, [r7, #20]
 8001df2:	f00c fdc4 	bl	800e97e <strncmp>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10c      	bne.n	8001e16 <parse_config+0xe2>
		{
			ptr += strlen(PKWND_KEY) + 1;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3306      	adds	r3, #6
 8001e00:	617b      	str	r3, [r7, #20]
			config.pkwnd = atoi(ptr);
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f00b fc8f 	bl	800d726 <atoi>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	81fb      	strh	r3, [r7, #14]
		}

        while (*ptr != '\n' && *ptr != '\0') ptr++;
 8001e0e:	e002      	b.n	8001e16 <parse_config+0xe2>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b0a      	cmp	r3, #10
 8001e1c:	d003      	beq.n	8001e26 <parse_config+0xf2>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f4      	bne.n	8001e10 <parse_config+0xdc>
        if (*ptr == '\n') ptr++;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b0a      	cmp	r3, #10
 8001e2c:	d102      	bne.n	8001e34 <parse_config+0x100>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
    while (*ptr != '\0' && *ptr != '[')
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <parse_config+0x110>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e42:	d19d      	bne.n	8001d80 <parse_config+0x4c>
    }

    return config;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	461a      	mov	r2, r3
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	cb03      	ldmia	r3!, {r0, r1}
 8001e4e:	6010      	str	r0, [r2, #0]
 8001e50:	6051      	str	r1, [r2, #4]
}
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000022 	.word	0x20000022
 8001e60:	20000010 	.word	0x20000010
 8001e64:	20000012 	.word	0x20000012
 8001e68:	20000014 	.word	0x20000014
 8001e6c:	08011f04 	.word	0x08011f04
 8001e70:	08011f10 	.word	0x08011f10
 8001e74:	08011f20 	.word	0x08011f20
 8001e78:	08011f28 	.word	0x08011f28
 8001e7c:	08011f30 	.word	0x08011f30

08001e80 <apply_config>:

void apply_config(SD_Config *config) // 应用新配置
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	receivercode = config->receiver_code;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <apply_config+0x54>)
 8001e8e:	801a      	strh	r2, [r3, #0]
	PEAKTH = config->peakth;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	885a      	ldrh	r2, [r3, #2]
 8001e94:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <apply_config+0x58>)
 8001e96:	801a      	strh	r2, [r3, #0]
	ALMSTTH = config->almstth;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	889a      	ldrh	r2, [r3, #4]
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <apply_config+0x5c>)
 8001e9e:	801a      	strh	r2, [r3, #0]
	PKWND = config->pkwnd;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	88da      	ldrh	r2, [r3, #6]
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <apply_config+0x60>)
 8001ea6:	801a      	strh	r2, [r3, #0]
	ASIC_CMD(0x01, PEAKTH);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <apply_config+0x58>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 fe4e 	bl	8002b50 <ASIC_CMD>
	ASIC_CMD(0x02, ALMSTTH);
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <apply_config+0x5c>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f000 fe48 	bl	8002b50 <ASIC_CMD>
	ASIC_CMD(0x04, PKWND);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <apply_config+0x60>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	2004      	movs	r0, #4
 8001ec8:	f000 fe42 	bl	8002b50 <ASIC_CMD>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000022 	.word	0x20000022
 8001ed8:	20000010 	.word	0x20000010
 8001edc:	20000012 	.word	0x20000012
 8001ee0:	20000014 	.word	0x20000014

08001ee4 <create_default_config>:

void create_default_config(void) //创建配置文件
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8001eea:	af00      	add	r7, sp, #0
    FIL fil;
    if(f_open(&fil, CONFIG_FILE, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <create_default_config+0x50>)
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	220a      	movs	r2, #10
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f00a f9d4 	bl	800c2a4 <f_open>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d113      	bne.n	8001f2a <create_default_config+0x46>
    {
        const char *default_config =
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <create_default_config+0x54>)
 8001f04:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
            "PEAKTH=200\n"
        	"ALMSTTH=32\n"
        	"PKWND=5000";

        UINT bw;
        f_write(&fil, default_config, strlen(default_config), &bw);
 8001f08:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 8001f0c:	f7fe f9c0 	bl	8000290 <strlen>
 8001f10:	4602      	mov	r2, r0
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	f107 0008 	add.w	r0, r7, #8
 8001f18:	f8d7 1264 	ldr.w	r1, [r7, #612]	@ 0x264
 8001f1c:	f00a fe14 	bl	800cb48 <f_write>
        f_close(&fil);
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00b f8f5 	bl	800d114 <f_close>
    }
}
 8001f2a:	bf00      	nop
 8001f2c:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	08011f38 	.word	0x08011f38

08001f3c <load_and_apply_config>:

SD_Config load_and_apply_config(void) //读取并应用配置
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b0c7      	sub	sp, #284	@ 0x11c
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f4a:	6018      	str	r0, [r3, #0]
    char config_buf[256];
    SD_Config config =
 8001f4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <load_and_apply_config+0xb8>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f5a:	801a      	strh	r2, [r3, #0]
 8001f5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <load_and_apply_config+0xbc>)
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f68:	805a      	strh	r2, [r3, #2]
 8001f6a:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <load_and_apply_config+0xc0>)
 8001f6c:	881a      	ldrh	r2, [r3, #0]
 8001f6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f76:	809a      	strh	r2, [r3, #4]
 8001f78:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <load_and_apply_config+0xc4>)
 8001f7a:	881a      	ldrh	r2, [r3, #0]
 8001f7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f84:	80da      	strh	r2, [r3, #6]
        .peakth = PEAKTH,
        .almstth = ALMSTTH,
        .pkwnd = PKWND
    };

    if(read_config(config_buf, sizeof(config_buf)) == FR_OK)
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe84 	bl	8001c9c <read_config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d117      	bne.n	8001fca <load_and_apply_config+0x8e>
    {
        config = parse_config(config_buf);
 8001f9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f9e:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	f107 0218 	add.w	r2, r7, #24
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fec2 	bl	8001d34 <parse_config>
 8001fb0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fb4:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8001fb8:	4623      	mov	r3, r4
 8001fba:	6810      	ldr	r0, [r2, #0]
 8001fbc:	6851      	ldr	r1, [r2, #4]
 8001fbe:	c303      	stmia	r3!, {r0, r1}
        apply_config(&config);
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5b 	bl	8001e80 <apply_config>
    }
    return config;
 8001fca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fdc:	cb03      	ldmia	r3!, {r0, r1}
 8001fde:	6010      	str	r0, [r2, #0]
 8001fe0:	6051      	str	r1, [r2, #4]
}
 8001fe2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	20000022 	.word	0x20000022
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	20000012 	.word	0x20000012
 8002000:	20000014 	.word	0x20000014

08002004 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_SPI1_Init+0x74>)
 800200a:	4a1c      	ldr	r2, [pc, #112]	@ (800207c <MX_SPI1_Init+0x78>)
 800200c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002010:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800201c:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <MX_SPI1_Init+0x74>)
 800201e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002022:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800202a:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <MX_SPI1_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002036:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <MX_SPI1_Init+0x74>)
 800203a:	2208      	movs	r2, #8
 800203c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002044:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002046:	2200      	movs	r2, #0
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <MX_SPI1_Init+0x74>)
 800204c:	2200      	movs	r2, #0
 800204e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002052:	2207      	movs	r2, #7
 8002054:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <MX_SPI1_Init+0x74>)
 800205e:	2208      	movs	r2, #8
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_SPI1_Init+0x74>)
 8002064:	f003 fd58 	bl	8005b18 <HAL_SPI_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800206e:	f7ff f9ee 	bl	800144e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200007b8 	.word	0x200007b8
 800207c:	40013000 	.word	0x40013000

08002080 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <MX_SPI2_Init+0x74>)
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <MX_SPI2_Init+0x78>)
 8002088:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800208a:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <MX_SPI2_Init+0x74>)
 800208c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002090:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <MX_SPI2_Init+0x74>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002098:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <MX_SPI2_Init+0x74>)
 800209a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800209e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a6:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020b6:	2238      	movs	r2, #56	@ 0x38
 80020b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020ce:	2207      	movs	r2, #7
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020da:	2208      	movs	r2, #8
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020de:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <MX_SPI2_Init+0x74>)
 80020e0:	f003 fd1a 	bl	8005b18 <HAL_SPI_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80020ea:	f7ff f9b0 	bl	800144e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000081c 	.word	0x2000081c
 80020f8:	40003800 	.word	0x40003800

080020fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	@ 0x30
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a9b      	ldr	r2, [pc, #620]	@ (8002388 <HAL_SPI_MspInit+0x28c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	f040 8095 	bne.w	800224a <HAL_SPI_MspInit+0x14e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002120:	4b9a      	ldr	r3, [pc, #616]	@ (800238c <HAL_SPI_MspInit+0x290>)
 8002122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002124:	4a99      	ldr	r2, [pc, #612]	@ (800238c <HAL_SPI_MspInit+0x290>)
 8002126:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800212a:	6613      	str	r3, [r2, #96]	@ 0x60
 800212c:	4b97      	ldr	r3, [pc, #604]	@ (800238c <HAL_SPI_MspInit+0x290>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	4b94      	ldr	r3, [pc, #592]	@ (800238c <HAL_SPI_MspInit+0x290>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213c:	4a93      	ldr	r2, [pc, #588]	@ (800238c <HAL_SPI_MspInit+0x290>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002144:	4b91      	ldr	r3, [pc, #580]	@ (800238c <HAL_SPI_MspInit+0x290>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002150:	23a0      	movs	r3, #160	@ 0xa0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002160:	2305      	movs	r3, #5
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216e:	f002 f937 	bl	80043e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002172:	2340      	movs	r3, #64	@ 0x40
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217a:	2301      	movs	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217e:	2303      	movs	r3, #3
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002182:	2305      	movs	r3, #5
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002190:	f002 f926 	bl	80043e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002194:	4b7e      	ldr	r3, [pc, #504]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 8002196:	4a7f      	ldr	r2, [pc, #508]	@ (8002394 <HAL_SPI_MspInit+0x298>)
 8002198:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800219a:	4b7d      	ldr	r3, [pc, #500]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 800219c:	2201      	movs	r2, #1
 800219e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ac:	4b78      	ldr	r3, [pc, #480]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021ae:	2280      	movs	r2, #128	@ 0x80
 80021b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b2:	4b77      	ldr	r3, [pc, #476]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b8:	4b75      	ldr	r3, [pc, #468]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80021be:	4b74      	ldr	r3, [pc, #464]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021c4:	4b72      	ldr	r3, [pc, #456]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80021ca:	4871      	ldr	r0, [pc, #452]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021cc:	f001 fe86 	bl	8003edc <HAL_DMA_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80021d6:	f7ff f93a 	bl	800144e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a6c      	ldr	r2, [pc, #432]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021de:	659a      	str	r2, [r3, #88]	@ 0x58
 80021e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002390 <HAL_SPI_MspInit+0x294>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80021e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 80021e8:	4a6c      	ldr	r2, [pc, #432]	@ (800239c <HAL_SPI_MspInit+0x2a0>)
 80021ea:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80021ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021f2:	4b69      	ldr	r3, [pc, #420]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 80021f4:	2210      	movs	r2, #16
 80021f6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f8:	4b67      	ldr	r3, [pc, #412]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021fe:	4b66      	ldr	r3, [pc, #408]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002204:	4b64      	ldr	r3, [pc, #400]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220a:	4b63      	ldr	r3, [pc, #396]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002210:	4b61      	ldr	r3, [pc, #388]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002216:	4b60      	ldr	r3, [pc, #384]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800221c:	485e      	ldr	r0, [pc, #376]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 800221e:	f001 fe5d 	bl	8003edc <HAL_DMA_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8002228:	f7ff f911 	bl	800144e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a5a      	ldr	r2, [pc, #360]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
 8002232:	4a59      	ldr	r2, [pc, #356]	@ (8002398 <HAL_SPI_MspInit+0x29c>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2023      	movs	r0, #35	@ 0x23
 800223e:	f001 fe0a 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002242:	2023      	movs	r0, #35	@ 0x23
 8002244:	f001 fe23 	bl	8003e8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002248:	e099      	b.n	800237e <HAL_SPI_MspInit+0x282>
  else if(spiHandle->Instance==SPI2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a54      	ldr	r2, [pc, #336]	@ (80023a0 <HAL_SPI_MspInit+0x2a4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	f040 8094 	bne.w	800237e <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002256:	4b4d      	ldr	r3, [pc, #308]	@ (800238c <HAL_SPI_MspInit+0x290>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225a:	4a4c      	ldr	r2, [pc, #304]	@ (800238c <HAL_SPI_MspInit+0x290>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002260:	6593      	str	r3, [r2, #88]	@ 0x58
 8002262:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <HAL_SPI_MspInit+0x290>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_SPI_MspInit+0x290>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	4a46      	ldr	r2, [pc, #280]	@ (800238c <HAL_SPI_MspInit+0x290>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227a:	4b44      	ldr	r3, [pc, #272]	@ (800238c <HAL_SPI_MspInit+0x290>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002286:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002298:	2305      	movs	r3, #5
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	4840      	ldr	r0, [pc, #256]	@ (80023a4 <HAL_SPI_MspInit+0x2a8>)
 80022a4:	f002 f89c 	bl	80043e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ba:	2305      	movs	r3, #5
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	4837      	ldr	r0, [pc, #220]	@ (80023a4 <HAL_SPI_MspInit+0x2a8>)
 80022c6:	f002 f88b 	bl	80043e0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80022ca:	4b37      	ldr	r3, [pc, #220]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022cc:	4a37      	ldr	r2, [pc, #220]	@ (80023ac <HAL_SPI_MspInit+0x2b0>)
 80022ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 80022d0:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022d6:	4b34      	ldr	r3, [pc, #208]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e2:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e8:	4b2f      	ldr	r3, [pc, #188]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ee:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80022f4:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022fa:	4b2b      	ldr	r3, [pc, #172]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002300:	4829      	ldr	r0, [pc, #164]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 8002302:	f001 fdeb 	bl	8003edc <HAL_DMA_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 800230c:	f7ff f89f 	bl	800144e <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a25      	ldr	r2, [pc, #148]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 8002314:	659a      	str	r2, [r3, #88]	@ 0x58
 8002316:	4a24      	ldr	r2, [pc, #144]	@ (80023a8 <HAL_SPI_MspInit+0x2ac>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800231c:	4b24      	ldr	r3, [pc, #144]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 800231e:	4a25      	ldr	r2, [pc, #148]	@ (80023b4 <HAL_SPI_MspInit+0x2b8>)
 8002320:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8002322:	4b23      	ldr	r3, [pc, #140]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 8002324:	2201      	movs	r2, #1
 8002326:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002328:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 800232a:	2210      	movs	r2, #16
 800232c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232e:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002334:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800233a:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002340:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002346:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 8002348:	2200      	movs	r2, #0
 800234a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800234c:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 800234e:	2200      	movs	r2, #0
 8002350:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002352:	4817      	ldr	r0, [pc, #92]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 8002354:	f001 fdc2 	bl	8003edc <HAL_DMA_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_SPI_MspInit+0x266>
      Error_Handler();
 800235e:	f7ff f876 	bl	800144e <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54
 8002368:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <HAL_SPI_MspInit+0x2b4>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2024      	movs	r0, #36	@ 0x24
 8002374:	f001 fd6f 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002378:	2024      	movs	r0, #36	@ 0x24
 800237a:	f001 fd88 	bl	8003e8e <HAL_NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3730      	adds	r7, #48	@ 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40013000 	.word	0x40013000
 800238c:	40021000 	.word	0x40021000
 8002390:	20000880 	.word	0x20000880
 8002394:	4002001c 	.word	0x4002001c
 8002398:	200008c8 	.word	0x200008c8
 800239c:	40020030 	.word	0x40020030
 80023a0:	40003800 	.word	0x40003800
 80023a4:	48000400 	.word	0x48000400
 80023a8:	20000910 	.word	0x20000910
 80023ac:	40020044 	.word	0x40020044
 80023b0:	20000958 	.word	0x20000958
 80023b4:	40020058 	.word	0x40020058

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_MspInit+0x44>)
 80023c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c2:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <HAL_MspInit+0x44>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80023ca:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_MspInit+0x44>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_MspInit+0x44>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	4a08      	ldr	r2, [pc, #32]	@ (80023fc <HAL_MspInit+0x44>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_MspInit+0x44>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <NMI_Handler+0x4>

08002408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <MemManage_Handler+0x4>

08002418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <UsageFault_Handler+0x4>

08002428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002456:	f001 fbdf 	bl	8003c18 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800245a:	f001 fd32 	bl	8003ec2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <DMA1_Channel2_IRQHandler+0x10>)
 800246a:	f001 fece 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000880 	.word	0x20000880

08002478 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <DMA1_Channel3_IRQHandler+0x10>)
 800247e:	f001 fec4 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200008c8 	.word	0x200008c8

0800248c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002490:	4802      	ldr	r0, [pc, #8]	@ (800249c <DMA1_Channel4_IRQHandler+0x10>)
 8002492:	f001 feba 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000910 	.word	0x20000910

080024a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <DMA1_Channel5_IRQHandler+0x10>)
 80024a6:	f001 feb0 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000958 	.word	0x20000958

080024b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b8:	480c      	ldr	r0, [pc, #48]	@ (80024ec <TIM2_IRQHandler+0x38>)
 80024ba:	f004 f91f 	bl	80066fc <HAL_TIM_IRQHandler>
  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE))
 80024be:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <TIM2_IRQHandler+0x38>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10c      	bne.n	80024e6 <TIM2_IRQHandler+0x32>
    {
        __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80024cc:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <TIM2_IRQHandler+0x38>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0201 	mvn.w	r2, #1
 80024d4:	611a      	str	r2, [r3, #16]
        high_counter += 0x100000000;
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <TIM2_IRQHandler+0x3c>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	1c5d      	adds	r5, r3, #1
 80024de:	4614      	mov	r4, r2
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <TIM2_IRQHandler+0x3c>)
 80024e2:	e9c3 4500 	strd	r4, r5, [r3]
    }
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200009a4 	.word	0x200009a4
 80024f0:	20000f80 	.word	0x20000f80

080024f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <SPI1_IRQHandler+0x10>)
 80024fa:	f003 fdcf 	bl	800609c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200007b8 	.word	0x200007b8

08002508 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800250c:	4802      	ldr	r0, [pc, #8]	@ (8002518 <SPI2_IRQHandler+0x10>)
 800250e:	f003 fdc5 	bl	800609c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000081c 	.word	0x2000081c

0800251c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8002520:	4830      	ldr	r0, [pc, #192]	@ (80025e4 <USART1_IRQHandler+0xc8>)
 8002522:	f004 fec3 	bl	80072ac <HAL_UART_IRQHandler>
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 8002526:	4b2f      	ldr	r3, [pc, #188]	@ (80025e4 <USART1_IRQHandler+0xc8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b10      	cmp	r3, #16
 8002532:	d155      	bne.n	80025e0 <USART1_IRQHandler+0xc4>
      {
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002534:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <USART1_IRQHandler+0xc8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2210      	movs	r2, #16
 800253a:	621a      	str	r2, [r3, #32]
    	  HAL_UART_AbortReceive(&huart1);
 800253c:	4829      	ldr	r0, [pc, #164]	@ (80025e4 <USART1_IRQHandler+0xc8>)
 800253e:	f004 fe03 	bl	8007148 <HAL_UART_AbortReceive>
    	  rx_length = sizeof(rx_buffer) - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8002542:	4b28      	ldr	r3, [pc, #160]	@ (80025e4 <USART1_IRQHandler+0xc8>)
 8002544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b25      	ldr	r3, [pc, #148]	@ (80025e8 <USART1_IRQHandler+0xcc>)
 8002554:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002556:	b672      	cpsid	i
}
 8002558:	bf00      	nop
    	  __disable_irq();
    	  if(rp != wp && wp + rx_length <= &processing_buffer[BUF_SIZE])
 800255a:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <USART1_IRQHandler+0xd0>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <USART1_IRQHandler+0xd4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d01a      	beq.n	800259c <USART1_IRQHandler+0x80>
 8002566:	4b22      	ldr	r3, [pc, #136]	@ (80025f0 <USART1_IRQHandler+0xd4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1f      	ldr	r2, [pc, #124]	@ (80025e8 <USART1_IRQHandler+0xcc>)
 800256c:	8812      	ldrh	r2, [r2, #0]
 800256e:	b292      	uxth	r2, r2
 8002570:	4413      	add	r3, r2
 8002572:	4a20      	ldr	r2, [pc, #128]	@ (80025f4 <USART1_IRQHandler+0xd8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d811      	bhi.n	800259c <USART1_IRQHandler+0x80>
    	  {
    		  memcpy(wp, rx_buffer, rx_length);
 8002578:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <USART1_IRQHandler+0xd4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <USART1_IRQHandler+0xcc>)
 800257e:	8812      	ldrh	r2, [r2, #0]
 8002580:	b292      	uxth	r2, r2
 8002582:	491d      	ldr	r1, [pc, #116]	@ (80025f8 <USART1_IRQHandler+0xdc>)
 8002584:	4618      	mov	r0, r3
 8002586:	f00c faaa 	bl	800eade <memcpy>
    		  wp += rx_length;
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <USART1_IRQHandler+0xcc>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <USART1_IRQHandler+0xd4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4413      	add	r3, r2
 8002596:	4a16      	ldr	r2, [pc, #88]	@ (80025f0 <USART1_IRQHandler+0xd4>)
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e012      	b.n	80025c2 <USART1_IRQHandler+0xa6>
    	  }
    	  else
    	  {
    		  memcpy(processing_buffer, rx_buffer, rx_length);
 800259c:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <USART1_IRQHandler+0xcc>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	4914      	ldr	r1, [pc, #80]	@ (80025f8 <USART1_IRQHandler+0xdc>)
 80025a6:	4815      	ldr	r0, [pc, #84]	@ (80025fc <USART1_IRQHandler+0xe0>)
 80025a8:	f00c fa99 	bl	800eade <memcpy>
    		  rp = processing_buffer;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <USART1_IRQHandler+0xd0>)
 80025ae:	4a13      	ldr	r2, [pc, #76]	@ (80025fc <USART1_IRQHandler+0xe0>)
 80025b0:	601a      	str	r2, [r3, #0]
    		  wp = rp + rx_length;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <USART1_IRQHandler+0xd0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <USART1_IRQHandler+0xcc>)
 80025b8:	8812      	ldrh	r2, [r2, #0]
 80025ba:	b292      	uxth	r2, r2
 80025bc:	4413      	add	r3, r2
 80025be:	4a0c      	ldr	r2, [pc, #48]	@ (80025f0 <USART1_IRQHandler+0xd4>)
 80025c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025c2:	b662      	cpsie	i
}
 80025c4:	bf00      	nop
    	  }
		  __enable_irq();
		  if(rx_length > 0)
 80025c6:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <USART1_IRQHandler+0xcc>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <USART1_IRQHandler+0xba>
			  data_ready = 1;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <USART1_IRQHandler+0xe4>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	801a      	strh	r2, [r3, #0]
    	  HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 80025d6:	2240      	movs	r2, #64	@ 0x40
 80025d8:	4907      	ldr	r1, [pc, #28]	@ (80025f8 <USART1_IRQHandler+0xdc>)
 80025da:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <USART1_IRQHandler+0xc8>)
 80025dc:	f004 fd68 	bl	80070b0 <HAL_UART_Receive_DMA>
      }
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000a3c 	.word	0x20000a3c
 80025e8:	200002fc 	.word	0x200002fc
 80025ec:	2000001c 	.word	0x2000001c
 80025f0:	20000018 	.word	0x20000018
 80025f4:	20000f68 	.word	0x20000f68
 80025f8:	2000023c 	.word	0x2000023c
 80025fc:	20000b68 	.word	0x20000b68
 8002600:	200002fe 	.word	0x200002fe

08002604 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002608:	4802      	ldr	r0, [pc, #8]	@ (8002614 <TIM6_DAC_IRQHandler+0x10>)
 800260a:	f004 f877 	bl	80066fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200009f0 	.word	0x200009f0

08002618 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <DMA2_Channel6_IRQHandler+0x10>)
 800261e:	f001 fdf4 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000b0c 	.word	0x20000b0c

0800262c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <DMA2_Channel7_IRQHandler+0x10>)
 8002632:	f001 fdea 	bl	800420a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000ac4 	.word	0x20000ac4

08002640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return 1;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_kill>:

int _kill(int pid, int sig)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800265a:	f00c fa13 	bl	800ea84 <__errno>
 800265e:	4603      	mov	r3, r0
 8002660:	2216      	movs	r2, #22
 8002662:	601a      	str	r2, [r3, #0]
  return -1;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <_exit>:

void _exit (int status)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ffe7 	bl	8002650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002682:	bf00      	nop
 8002684:	e7fd      	b.n	8002682 <_exit+0x12>

08002686 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e00a      	b.n	80026ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002698:	f3af 8000 	nop.w
 800269c:	4601      	mov	r1, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	60ba      	str	r2, [r7, #8]
 80026a4:	b2ca      	uxtb	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbf0      	blt.n	8002698 <_read+0x12>
  }

  return len;
 80026b6:	687b      	ldr	r3, [r7, #4]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e8:	605a      	str	r2, [r3, #4]
  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_isatty>:

int _isatty(int file)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <_sbrk+0x5c>)
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <_sbrk+0x60>)
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <_sbrk+0x64>)
 8002746:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <_sbrk+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002758:	f00c f994 	bl	800ea84 <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	e009      	b.n	800277c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	4a05      	ldr	r2, [pc, #20]	@ (800278c <_sbrk+0x64>)
 8002778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	2000c000 	.word	0x2000c000
 8002788:	00000400 	.word	0x00000400
 800278c:	200009a0 	.word	0x200009a0
 8002790:	20001158 	.word	0x20001158

08002794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <SystemInit+0x20>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <SystemInit+0x20>)
 80027a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <MX_TIM2_Init+0x98>)
 80027d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80027de:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <MX_TIM2_Init+0x98>)
 80027e0:	224f      	movs	r2, #79	@ 0x4f
 80027e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <MX_TIM2_Init+0x98>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027ea:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <MX_TIM2_Init+0x98>)
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f2:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <MX_TIM2_Init+0x98>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f8:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <MX_TIM2_Init+0x98>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027fe:	4814      	ldr	r0, [pc, #80]	@ (8002850 <MX_TIM2_Init+0x98>)
 8002800:	f003 fed0 	bl	80065a4 <HAL_TIM_Base_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800280a:	f7fe fe20 	bl	800144e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800280e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002812:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4619      	mov	r1, r3
 800281a:	480d      	ldr	r0, [pc, #52]	@ (8002850 <MX_TIM2_Init+0x98>)
 800281c:	f004 f875 	bl	800690a <HAL_TIM_ConfigClockSource>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002826:	f7fe fe12 	bl	800144e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4806      	ldr	r0, [pc, #24]	@ (8002850 <MX_TIM2_Init+0x98>)
 8002838:	f004 fa62 	bl	8006d00 <HAL_TIMEx_MasterConfigSynchronization>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002842:	f7fe fe04 	bl	800144e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200009a4 	.word	0x200009a4

08002854 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002864:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <MX_TIM6_Init+0x68>)
 8002866:	4a16      	ldr	r2, [pc, #88]	@ (80028c0 <MX_TIM6_Init+0x6c>)
 8002868:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800286a:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <MX_TIM6_Init+0x68>)
 800286c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002870:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002872:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <MX_TIM6_Init+0x68>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8002878:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <MX_TIM6_Init+0x68>)
 800287a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800287e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <MX_TIM6_Init+0x68>)
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002886:	480d      	ldr	r0, [pc, #52]	@ (80028bc <MX_TIM6_Init+0x68>)
 8002888:	f003 fe8c 	bl	80065a4 <HAL_TIM_Base_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002892:	f7fe fddc 	bl	800144e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4806      	ldr	r0, [pc, #24]	@ (80028bc <MX_TIM6_Init+0x68>)
 80028a4:	f004 fa2c 	bl	8006d00 <HAL_TIMEx_MasterConfigSynchronization>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80028ae:	f7fe fdce 	bl	800144e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200009f0 	.word	0x200009f0
 80028c0:	40001000 	.word	0x40001000

080028c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d4:	d114      	bne.n	8002900 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_TIM_Base_MspInit+0x78>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	4a18      	ldr	r2, [pc, #96]	@ (800293c <HAL_TIM_Base_MspInit+0x78>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <HAL_TIM_Base_MspInit+0x78>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	201c      	movs	r0, #28
 80028f4:	f001 faaf 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028f8:	201c      	movs	r0, #28
 80028fa:	f001 fac8 	bl	8003e8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80028fe:	e018      	b.n	8002932 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0e      	ldr	r2, [pc, #56]	@ (8002940 <HAL_TIM_Base_MspInit+0x7c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d113      	bne.n	8002932 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_TIM_Base_MspInit+0x78>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	4a0b      	ldr	r2, [pc, #44]	@ (800293c <HAL_TIM_Base_MspInit+0x78>)
 8002910:	f043 0310 	orr.w	r3, r3, #16
 8002914:	6593      	str	r3, [r2, #88]	@ 0x58
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <HAL_TIM_Base_MspInit+0x78>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	2036      	movs	r0, #54	@ 0x36
 8002928:	f001 fa95 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800292c:	2036      	movs	r0, #54	@ 0x36
 800292e:	f001 faae 	bl	8003e8e <HAL_NVIC_EnableIRQ>
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	40001000 	.word	0x40001000

08002944 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <MX_USART1_UART_Init+0x58>)
 800294a:	4a15      	ldr	r2, [pc, #84]	@ (80029a0 <MX_USART1_UART_Init+0x5c>)
 800294c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002950:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <MX_USART1_UART_Init+0x58>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <MX_USART1_UART_Init+0x58>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <MX_USART1_UART_Init+0x58>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002982:	2200      	movs	r2, #0
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	@ (800299c <MX_USART1_UART_Init+0x58>)
 8002988:	f004 fa3e 	bl	8006e08 <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002992:	f7fe fd5c 	bl	800144e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000a3c 	.word	0x20000a3c
 80029a0:	40013800 	.word	0x40013800

080029a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0a2      	sub	sp, #136	@ 0x88
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2260      	movs	r2, #96	@ 0x60
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f00b ffd2 	bl	800e96e <memset>
  if(uartHandle->Instance==USART1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4f      	ldr	r2, [pc, #316]	@ (8002b0c <HAL_UART_MspInit+0x168>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f040 8096 	bne.w	8002b02 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029da:	2300      	movs	r3, #0
 80029dc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 fd5c 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029ee:	f7fe fd2e 	bl	800144e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029f2:	4b47      	ldr	r3, [pc, #284]	@ (8002b10 <HAL_UART_MspInit+0x16c>)
 80029f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f6:	4a46      	ldr	r2, [pc, #280]	@ (8002b10 <HAL_UART_MspInit+0x16c>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80029fe:	4b44      	ldr	r3, [pc, #272]	@ (8002b10 <HAL_UART_MspInit+0x16c>)
 8002a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	4b41      	ldr	r3, [pc, #260]	@ (8002b10 <HAL_UART_MspInit+0x16c>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0e:	4a40      	ldr	r2, [pc, #256]	@ (8002b10 <HAL_UART_MspInit+0x16c>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a16:	4b3e      	ldr	r3, [pc, #248]	@ (8002b10 <HAL_UART_MspInit+0x16c>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a22:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a36:	2307      	movs	r3, #7
 8002a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a46:	f001 fccb 	bl	80043e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel7;
 8002a4a:	4b32      	ldr	r3, [pc, #200]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a4c:	4a32      	ldr	r2, [pc, #200]	@ (8002b18 <HAL_UART_MspInit+0x174>)
 8002a4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002a50:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a52:	2202      	movs	r2, #2
 8002a54:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a56:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a62:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a64:	2280      	movs	r2, #128	@ 0x80
 8002a66:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a68:	4b2a      	ldr	r3, [pc, #168]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a6e:	4b29      	ldr	r3, [pc, #164]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a74:	4b27      	ldr	r3, [pc, #156]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a76:	2220      	movs	r2, #32
 8002a78:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a7a:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a82:	4824      	ldr	r0, [pc, #144]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a84:	f001 fa2a 	bl	8003edc <HAL_DMA_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002a8e:	f7fe fcde 	bl	800144e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a96:	675a      	str	r2, [r3, #116]	@ 0x74
 8002a98:	4a1e      	ldr	r2, [pc, #120]	@ (8002b14 <HAL_UART_MspInit+0x170>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b20 <HAL_UART_MspInit+0x17c>)
 8002aa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002aac:	2210      	movs	r2, #16
 8002aae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab6:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002ab8:	2280      	movs	r2, #128	@ 0x80
 8002aba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002abc:	4b17      	ldr	r3, [pc, #92]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac2:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ac8:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ace:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ad4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ad6:	4811      	ldr	r0, [pc, #68]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002ad8:	f001 fa00 	bl	8003edc <HAL_DMA_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8002ae2:	f7fe fcb4 	bl	800144e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002aea:	671a      	str	r2, [r3, #112]	@ 0x70
 8002aec:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <HAL_UART_MspInit+0x178>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	2025      	movs	r0, #37	@ 0x25
 8002af8:	f001 f9ad 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002afc:	2025      	movs	r0, #37	@ 0x25
 8002afe:	f001 f9c6 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b02:	bf00      	nop
 8002b04:	3788      	adds	r7, #136	@ 0x88
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	20000ac4 	.word	0x20000ac4
 8002b18:	40020480 	.word	0x40020480
 8002b1c:	20000b0c 	.word	0x20000b0c
 8002b20:	4002046c 	.word	0x4002046c

08002b24 <ASIC_TransmitReceive>:
uint16_t peaklevel;
uint64_t peaktime;
uint8_t result[6];

uint8_t ASIC_TransmitReceive(uint8_t data) //发送接收函数封装
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, 100);
 8002b2e:	f107 020f 	add.w	r2, r7, #15
 8002b32:	1df9      	adds	r1, r7, #7
 8002b34:	2364      	movs	r3, #100	@ 0x64
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4804      	ldr	r0, [pc, #16]	@ (8002b4c <ASIC_TransmitReceive+0x28>)
 8002b3c:	f003 f88f 	bl	8005c5e <HAL_SPI_TransmitReceive>
    return rx_data;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200007b8 	.word	0x200007b8

08002b50 <ASIC_CMD>:

void ASIC_CMD(uint8_t address, uint16_t data) //ASIC发送参数到指定地址
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	460a      	mov	r2, r1
 8002b5a:	71fb      	strb	r3, [r7, #7]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	80bb      	strh	r3, [r7, #4]
	ASIC_CS_LOW();
 8002b60:	2200      	movs	r2, #0
 8002b62:	2101      	movs	r1, #1
 8002b64:	4813      	ldr	r0, [pc, #76]	@ (8002bb4 <ASIC_CMD+0x64>)
 8002b66:	f001 fdcd 	bl	8004704 <HAL_GPIO_WritePin>
	ASIC_TransmitReceive(address);
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ffd9 	bl	8002b24 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7ff ffd6 	bl	8002b24 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff ffd3 	bl	8002b24 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7ff ffd0 	bl	8002b24 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff ffcd 	bl	8002b24 <ASIC_TransmitReceive>
	ASIC_TransmitReceive((data >> 8) & 0xFF);
 8002b8a:	88bb      	ldrh	r3, [r7, #4]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ffc6 	bl	8002b24 <ASIC_TransmitReceive>
	ASIC_TransmitReceive(data & 0xFF);
 8002b98:	88bb      	ldrh	r3, [r7, #4]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ffc1 	bl	8002b24 <ASIC_TransmitReceive>
	ASIC_CS_HIGH();
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4803      	ldr	r0, [pc, #12]	@ (8002bb4 <ASIC_CMD+0x64>)
 8002ba8:	f001 fdac 	bl	8004704 <HAL_GPIO_WritePin>
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	48000400 	.word	0x48000400

08002bb8 <ReadResult>:

HAL_StatusTypeDef ReadResult(void) //读取相关结果
{
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(EMPTY_GPIO_Port, EMPTY_Pin) == GPIO_PIN_SET)
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	482d      	ldr	r0, [pc, #180]	@ (8002c78 <ReadResult+0xc0>)
 8002bc2:	f001 fd87 	bl	80046d4 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <ReadResult+0x18>
	{
		return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e04f      	b.n	8002c70 <ReadResult+0xb8>
	}
	else
	{
		ASIC_CS_LOW();
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4828      	ldr	r0, [pc, #160]	@ (8002c78 <ReadResult+0xc0>)
 8002bd6:	f001 fd95 	bl	8004704 <HAL_GPIO_WritePin>
		uint16_t i;
		uint8_t address = 0x80;
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	717b      	strb	r3, [r7, #5]
		ASIC_TransmitReceive(address);
 8002bde:	797b      	ldrb	r3, [r7, #5]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff9f 	bl	8002b24 <ASIC_TransmitReceive>
		for(i = 0;i < 6;i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	80fb      	strh	r3, [r7, #6]
 8002bea:	e00a      	b.n	8002c02 <ReadResult+0x4a>
			result[i] = ASIC_TransmitReceive(0x00);
 8002bec:	88fe      	ldrh	r6, [r7, #6]
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff ff98 	bl	8002b24 <ASIC_TransmitReceive>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <ReadResult+0xc4>)
 8002bfa:	559a      	strb	r2, [r3, r6]
		for(i = 0;i < 6;i++)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	80fb      	strh	r3, [r7, #6]
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d9f1      	bls.n	8002bec <ReadResult+0x34>
		codeid = (result[0] >> 3) + 1;
 8002c08:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <ReadResult+0xc4>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <ReadResult+0xc8>)
 8002c16:	701a      	strb	r2, [r3, #0]
		peaklevel = (result[1] >> 1) | ((result[0] & 0x07 ) << 7);
 8002c18:	4b18      	ldr	r3, [pc, #96]	@ (8002c7c <ReadResult+0xc4>)
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	b21a      	sxth	r2, r3
 8002c22:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <ReadResult+0xc4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	01db      	lsls	r3, r3, #7
 8002c2a:	b21b      	sxth	r3, r3
 8002c2c:	f403 7360 	and.w	r3, r3, #896	@ 0x380
 8002c30:	b21b      	sxth	r3, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	b21b      	sxth	r3, r3
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <ReadResult+0xcc>)
 8002c3a:	801a      	strh	r2, [r3, #0]
		peaktime = ((result[1] & 0x01) << 32) | (result[2] << 24) | (result[3] << 16) | (result[4] << 8) | result[5];
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c7c <ReadResult+0xc4>)
 8002c3e:	789b      	ldrb	r3, [r3, #2]
 8002c40:	061a      	lsls	r2, r3, #24
 8002c42:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <ReadResult+0xc4>)
 8002c44:	78db      	ldrb	r3, [r3, #3]
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <ReadResult+0xc4>)
 8002c4c:	791b      	ldrb	r3, [r3, #4]
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	4313      	orrs	r3, r2
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <ReadResult+0xc4>)
 8002c54:	7952      	ldrb	r2, [r2, #5]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	17da      	asrs	r2, r3, #31
 8002c5a:	461c      	mov	r4, r3
 8002c5c:	4615      	mov	r5, r2
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <ReadResult+0xd0>)
 8002c60:	e9c3 4500 	strd	r4, r5, [r3]
		ASIC_CS_HIGH();
 8002c64:	2201      	movs	r2, #1
 8002c66:	2101      	movs	r1, #1
 8002c68:	4803      	ldr	r0, [pc, #12]	@ (8002c78 <ReadResult+0xc0>)
 8002c6a:	f001 fd4b 	bl	8004704 <HAL_GPIO_WritePin>
		return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
	}
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c78:	48000400 	.word	0x48000400
 8002c7c:	20000b60 	.word	0x20000b60
 8002c80:	20000b54 	.word	0x20000b54
 8002c84:	20000b56 	.word	0x20000b56
 8002c88:	20000b58 	.word	0x20000b58

08002c8c <read_be16>:
void Send_time(void);
void Parameterset_query(void);
void Sendheart(void);

uint16_t read_be16(uint8_t *data) //连续读取两个字节
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    return (data[0] << 8) | data[1];
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b21b      	sxth	r3, r3
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b21b      	sxth	r3, r3
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	b29b      	uxth	r3, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <Checksum>:

uint16_t Checksum(uint8_t *data, uint16_t length) //逐字节校检和
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
	uint16_t sum;
    if(length <= 1)
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d804      	bhi.n	8002cd4 <Checksum+0x1c>
    {
    	sum = (uint16_t)data[0];
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002cd0:	89fb      	ldrh	r3, [r7, #14]
 8002cd2:	e010      	b.n	8002cf6 <Checksum+0x3e>
    }
    else
    {
    	sum = (uint16_t)data[length-1]+Checksum(data, length - 1);
 8002cd4:	887b      	ldrh	r3, [r7, #2]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461c      	mov	r4, r3
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ffe5 	bl	8002cb8 <Checksum>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4423      	add	r3, r4
 8002cf2:	81fb      	strh	r3, [r7, #14]
    	return sum;
 8002cf4:	89fb      	ldrh	r3, [r7, #14]
    }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}
	...

08002d00 <CMD_Judge>:

CMD_Status CMD_Judge(void) //按照地址从地到高轮询数组，找到最近的包头和包尾进行判断和处理，没有设计处理参数中如果出现包头包尾的方法，目前如果出现这种情况会直接报错误码舍弃
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
	uint32_t rxcode = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
	uint16_t time;
	uint16_t checksum;
	uint16_t SUM;
	rp1 = rp;
 8002d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6c      	ldr	r2, [pc, #432]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002d10:	6013      	str	r3, [r2, #0]
	rp2 = rp;
 8002d12:	4b6a      	ldr	r3, [pc, #424]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6b      	ldr	r2, [pc, #428]	@ (8002ec4 <CMD_Judge+0x1c4>)
 8002d18:	6013      	str	r3, [r2, #0]
	while (wp > rp)
 8002d1a:	e02b      	b.n	8002d74 <CMD_Judge+0x74>
	{
		uint16_t test = (*rp << 8) | *(rp + 1);
 8002d1c:	4b67      	ldr	r3, [pc, #412]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	4b64      	ldr	r3, [pc, #400]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	4313      	orrs	r3, r2
 8002d34:	b21b      	sxth	r3, r3
 8002d36:	80fb      	strh	r3, [r7, #6]
		if(test == HEAD)
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d103      	bne.n	8002d4a <CMD_Judge+0x4a>
			rp1 = rp;
 8002d42:	4b5e      	ldr	r3, [pc, #376]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a5e      	ldr	r2, [pc, #376]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002d48:	6013      	str	r3, [r2, #0]
		if(test == TAIL)
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	f647 62fe 	movw	r2, #32510	@ 0x7efe
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d104      	bne.n	8002d5e <CMD_Judge+0x5e>
			rp2 = rp + 1;
 8002d54:	4b59      	ldr	r3, [pc, #356]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ec4 <CMD_Judge+0x1c4>)
 8002d5c:	6013      	str	r3, [r2, #0]
		rp++;
 8002d5e:	4b57      	ldr	r3, [pc, #348]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a55      	ldr	r2, [pc, #340]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d66:	6013      	str	r3, [r2, #0]
		if(rp2 > rp1)
 8002d68:	4b56      	ldr	r3, [pc, #344]	@ (8002ec4 <CMD_Judge+0x1c4>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b54      	ldr	r3, [pc, #336]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d806      	bhi.n	8002d82 <CMD_Judge+0x82>
	while (wp > rp)
 8002d74:	4b54      	ldr	r3, [pc, #336]	@ (8002ec8 <CMD_Judge+0x1c8>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b50      	ldr	r3, [pc, #320]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d8cd      	bhi.n	8002d1c <CMD_Judge+0x1c>
 8002d80:	e000      	b.n	8002d84 <CMD_Judge+0x84>
			break;
 8002d82:	bf00      	nop
	}
	if(rp == wp)
 8002d84:	4b4d      	ldr	r3, [pc, #308]	@ (8002ebc <CMD_Judge+0x1bc>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec8 <CMD_Judge+0x1c8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d104      	bne.n	8002d9a <CMD_Judge+0x9a>
	{
		data_ready = 0;
 8002d90:	4b4e      	ldr	r3, [pc, #312]	@ (8002ecc <CMD_Judge+0x1cc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	801a      	strh	r2, [r3, #0]
		return CMD_END;
 8002d96:	2306      	movs	r3, #6
 8002d98:	e08c      	b.n	8002eb4 <CMD_Judge+0x1b4>
	}
	for(uint16_t i = 3;i <= 4;i++)
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	e012      	b.n	8002dc6 <CMD_Judge+0xc6>
		rxcode = (*(rp1 + i) << (32 - 8*i)) | rxcode;
 8002da0:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	893b      	ldrh	r3, [r7, #8]
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	893b      	ldrh	r3, [r7, #8]
 8002dae:	f1c3 0304 	rsb	r3, r3, #4
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 3;i <= 4;i++)
 8002dc0:	893b      	ldrh	r3, [r7, #8]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	813b      	strh	r3, [r7, #8]
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d9e9      	bls.n	8002da0 <CMD_Judge+0xa0>
	datalength = *(rp1 + 7);
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	79da      	ldrb	r2, [r3, #7]
 8002dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed0 <CMD_Judge+0x1d0>)
 8002dd4:	701a      	strb	r2, [r3, #0]
	for(time = 0;time < cmd_number;time++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	e01b      	b.n	8002e14 <CMD_Judge+0x114>
	{
		command = (*(rp1 + 5)<< 8) | *(rp1 + 6);
 8002ddc:	4b38      	ldr	r3, [pc, #224]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3305      	adds	r3, #5
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3306      	adds	r3, #6
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	4b36      	ldr	r3, [pc, #216]	@ (8002ed4 <CMD_Judge+0x1d4>)
 8002dfc:	801a      	strh	r2, [r3, #0]
		if(command == cmd[time])
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	4a35      	ldr	r2, [pc, #212]	@ (8002ed8 <CMD_Judge+0x1d8>)
 8002e02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002e06:	4b33      	ldr	r3, [pc, #204]	@ (8002ed4 <CMD_Judge+0x1d4>)
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d006      	beq.n	8002e1c <CMD_Judge+0x11c>
	for(time = 0;time < cmd_number;time++)
 8002e0e:	897b      	ldrh	r3, [r7, #10]
 8002e10:	3301      	adds	r3, #1
 8002e12:	817b      	strh	r3, [r7, #10]
 8002e14:	897b      	ldrh	r3, [r7, #10]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d9e0      	bls.n	8002ddc <CMD_Judge+0xdc>
 8002e1a:	e000      	b.n	8002e1e <CMD_Judge+0x11e>
			break;
 8002e1c:	bf00      	nop
	}
	checksum = (*(rp2 - 3) << 8) | *(rp2 - 2);
 8002e1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <CMD_Judge+0x1c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3b03      	subs	r3, #3
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	b21a      	sxth	r2, r3
 8002e2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <CMD_Judge+0x1c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3b02      	subs	r3, #2
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	80bb      	strh	r3, [r7, #4]
	rp3 = rp1 + 8;
 8002e3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	4a26      	ldr	r2, [pc, #152]	@ (8002edc <CMD_Judge+0x1dc>)
 8002e44:	6013      	str	r3, [r2, #0]
	SUM = Checksum(rp1 + 2, datalength + 6);
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	4a20      	ldr	r2, [pc, #128]	@ (8002ed0 <CMD_Judge+0x1d0>)
 8002e4e:	7812      	ldrb	r2, [r2, #0]
 8002e50:	3206      	adds	r2, #6
 8002e52:	b292      	uxth	r2, r2
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff2e 	bl	8002cb8 <Checksum>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	807b      	strh	r3, [r7, #2]
	if(rxcode != receivercode || *(rp1 + 2) != version)
 8002e60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <CMD_Judge+0x1e0>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d107      	bne.n	8002e7e <CMD_Judge+0x17e>
 8002e6e:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3302      	adds	r3, #2
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <CMD_Judge+0x1e4>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <CMD_Judge+0x182>
		return CODE_ERROE;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e018      	b.n	8002eb4 <CMD_Judge+0x1b4>
	else if(datalength != rp2 - rp1 - 11)
 8002e82:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <CMD_Judge+0x1d0>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4619      	mov	r1, r3
 8002e88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <CMD_Judge+0x1c4>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <CMD_Judge+0x1c0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	3b0b      	subs	r3, #11
 8002e94:	4299      	cmp	r1, r3
 8002e96:	d001      	beq.n	8002e9c <CMD_Judge+0x19c>
		return LENGTH_ERROE;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e00b      	b.n	8002eb4 <CMD_Judge+0x1b4>
	else if(time >= cmd_number)
 8002e9c:	897b      	ldrh	r3, [r7, #10]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d901      	bls.n	8002ea6 <CMD_Judge+0x1a6>
		return CMD_ERROR;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e006      	b.n	8002eb4 <CMD_Judge+0x1b4>
	else if(checksum != SUM)
 8002ea6:	88ba      	ldrh	r2, [r7, #4]
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <CMD_Judge+0x1b2>
		return CHECK_ERROR;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	e000      	b.n	8002eb4 <CMD_Judge+0x1b4>
	else
		return CMD_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	2000001c 	.word	0x2000001c
 8002ec0:	20000f6c 	.word	0x20000f6c
 8002ec4:	20000f70 	.word	0x20000f70
 8002ec8:	20000018 	.word	0x20000018
 8002ecc:	200002fe 	.word	0x200002fe
 8002ed0:	20000f78 	.word	0x20000f78
 8002ed4:	20000f68 	.word	0x20000f68
 8002ed8:	20000024 	.word	0x20000024
 8002edc:	20000f74 	.word	0x20000f74
 8002ee0:	20000022 	.word	0x20000022
 8002ee4:	20000020 	.word	0x20000020

08002ee8 <CMD_Execute>:

CMD_Status CMD_Execute(void) //判断命令内容和处理
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	if(command == cmd1)
 8002eec:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <CMD_Execute+0x88>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d121      	bne.n	8002f38 <CMD_Execute+0x50>
	{
		if(datalength == 0x01 && *rp3 == 0x01)
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f74 <CMD_Execute+0x8c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d10b      	bne.n	8002f14 <CMD_Execute+0x2c>
 8002efc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f78 <CMD_Execute+0x90>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <CMD_Execute+0x2c>
		{
			Sampling();
 8002f06:	f000 f83b 	bl	8002f80 <Sampling>
			sampling_ready = 0;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <CMD_Execute+0x94>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e02a      	b.n	8002f6a <CMD_Execute+0x82>
		}
		else if(datalength == 0x01 && *rp3 == 0)
 8002f14:	4b17      	ldr	r3, [pc, #92]	@ (8002f74 <CMD_Execute+0x8c>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d10b      	bne.n	8002f34 <CMD_Execute+0x4c>
 8002f1c:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <CMD_Execute+0x90>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <CMD_Execute+0x4c>
		{
			Sampling();
 8002f26:	f000 f82b 	bl	8002f80 <Sampling>
			sampling_ready = 1;
 8002f2a:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <CMD_Execute+0x94>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	801a      	strh	r2, [r3, #0]
			return CMD_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e01a      	b.n	8002f6a <CMD_Execute+0x82>
		}
		else
			return INVALID;
 8002f34:	2305      	movs	r3, #5
 8002f36:	e018      	b.n	8002f6a <CMD_Execute+0x82>
	}
	else if(command == cmd3)
 8002f38:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <CMD_Execute+0x88>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d103      	bne.n	8002f48 <CMD_Execute+0x60>
	{
		Parameterset_query();
 8002f40:	f000 f87e 	bl	8003040 <Parameterset_query>
		return CMD_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e010      	b.n	8002f6a <CMD_Execute+0x82>
	}
	else if(command == cmd4)
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <CMD_Execute+0x88>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d109      	bne.n	8002f64 <CMD_Execute+0x7c>
	{
		if(datalength != 0x00)
 8002f50:	4b08      	ldr	r3, [pc, #32]	@ (8002f74 <CMD_Execute+0x8c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <CMD_Execute+0x74>
			return INVALID;
 8002f58:	2305      	movs	r3, #5
 8002f5a:	e006      	b.n	8002f6a <CMD_Execute+0x82>
		else
		{
			Parameterset_query();
 8002f5c:	f000 f870 	bl	8003040 <Parameterset_query>
			return CMD_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e002      	b.n	8002f6a <CMD_Execute+0x82>
		}
	}
	else
	{
		Send_time();
 8002f64:	f000 fae8 	bl	8003538 <Send_time>
		return CMD_OK;
 8002f68:	2300      	movs	r3, #0
	}
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000f68 	.word	0x20000f68
 8002f74:	20000f78 	.word	0x20000f78
 8002f78:	20000f74 	.word	0x20000f74
 8002f7c:	2000002e 	.word	0x2000002e

08002f80 <Sampling>:

void Sampling(void) //发送采样相关的应答命令
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
	uint16_t length =  rp2 - rp1 + 1;
 8002f86:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <Sampling+0xa8>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b28      	ldr	r3, [pc, #160]	@ (800302c <Sampling+0xac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	807b      	strh	r3, [r7, #2]
	uint16_t SUM;
	for(uint16_t i = 0;i < length;i++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	80bb      	strh	r3, [r7, #4]
 8002f9a:	e033      	b.n	8003004 <Sampling+0x84>
	{
		if(i == 5)
 8002f9c:	88bb      	ldrh	r3, [r7, #4]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d104      	bne.n	8002fac <Sampling+0x2c>
			tx_buffer[i] = 0x01;
 8002fa2:	88bb      	ldrh	r3, [r7, #4]
 8002fa4:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <Sampling+0xb0>)
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	54d1      	strb	r1, [r2, r3]
 8002faa:	e028      	b.n	8002ffe <Sampling+0x7e>
		else if(i == length - 4)
 8002fac:	88ba      	ldrh	r2, [r7, #4]
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	3b04      	subs	r3, #4
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d110      	bne.n	8002fd8 <Sampling+0x58>
		{
			SUM = Checksum(&tx_buffer[2], i - 2);
 8002fb6:	88bb      	ldrh	r3, [r7, #4]
 8002fb8:	3b02      	subs	r3, #2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	481d      	ldr	r0, [pc, #116]	@ (8003034 <Sampling+0xb4>)
 8002fc0:	f7ff fe7a 	bl	8002cb8 <Checksum>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	80fb      	strh	r3, [r7, #6]
			tx_buffer[i] = (SUM >> 8) & 0xFF;
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	88bb      	ldrh	r3, [r7, #4]
 8002fd0:	b2d1      	uxtb	r1, r2
 8002fd2:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <Sampling+0xb0>)
 8002fd4:	54d1      	strb	r1, [r2, r3]
 8002fd6:	e012      	b.n	8002ffe <Sampling+0x7e>
		}
		else if(i == length - 3)
 8002fd8:	88ba      	ldrh	r2, [r7, #4]
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d105      	bne.n	8002fee <Sampling+0x6e>
			tx_buffer[i] = SUM & 0xFF;
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	88fa      	ldrh	r2, [r7, #6]
 8002fe6:	b2d1      	uxtb	r1, r2
 8002fe8:	4a11      	ldr	r2, [pc, #68]	@ (8003030 <Sampling+0xb0>)
 8002fea:	54d1      	strb	r1, [r2, r3]
 8002fec:	e007      	b.n	8002ffe <Sampling+0x7e>
		else
			tx_buffer[i] = *(rp1 + i);
 8002fee:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <Sampling+0xac>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	88bb      	ldrh	r3, [r7, #4]
 8002ff4:	441a      	add	r2, r3
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	7811      	ldrb	r1, [r2, #0]
 8002ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <Sampling+0xb0>)
 8002ffc:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i < length;i++)
 8002ffe:	88bb      	ldrh	r3, [r7, #4]
 8003000:	3301      	adds	r3, #1
 8003002:	80bb      	strh	r3, [r7, #4]
 8003004:	88ba      	ldrh	r2, [r7, #4]
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	429a      	cmp	r2, r3
 800300a:	d3c7      	bcc.n	8002f9c <Sampling+0x1c>
	}
	txstate = 1;
 800300c:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <Sampling+0xb8>)
 800300e:	2201      	movs	r2, #1
 8003010:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	461a      	mov	r2, r3
 8003016:	4906      	ldr	r1, [pc, #24]	@ (8003030 <Sampling+0xb0>)
 8003018:	4808      	ldr	r0, [pc, #32]	@ (800303c <Sampling+0xbc>)
 800301a:	f003 ffcd 	bl	8006fb8 <HAL_UART_Transmit_DMA>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000f70 	.word	0x20000f70
 800302c:	20000f6c 	.word	0x20000f6c
 8003030:	2000027c 	.word	0x2000027c
 8003034:	2000027e 	.word	0x2000027e
 8003038:	20000f9a 	.word	0x20000f9a
 800303c:	20000a3c 	.word	0x20000a3c

08003040 <Parameterset_query>:

void Parameterset_query(void) //参数设置查询函数
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8003046:	af02      	add	r7, sp, #8
	uint16_t SUM;
	if(command == cmd3)
 8003048:	4b6b      	ldr	r3, [pc, #428]	@ (80031f8 <Parameterset_query+0x1b8>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2b03      	cmp	r3, #3
 800304e:	f040 808b 	bne.w	8003168 <Parameterset_query+0x128>
	{
		uint16_t code = (*rp3 << 8) | *(rp3 + 1);
 8003052:	4b6a      	ldr	r3, [pc, #424]	@ (80031fc <Parameterset_query+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b21b      	sxth	r3, r3
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	b21a      	sxth	r2, r3
 800305e:	4b67      	ldr	r3, [pc, #412]	@ (80031fc <Parameterset_query+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3301      	adds	r3, #1
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b21b      	sxth	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b21b      	sxth	r3, r3
 800306c:	f8a7 32ac 	strh.w	r3, [r7, #684]	@ 0x2ac
		receivercode = code;
 8003070:	4a63      	ldr	r2, [pc, #396]	@ (8003200 <Parameterset_query+0x1c0>)
 8003072:	f8b7 32ac 	ldrh.w	r3, [r7, #684]	@ 0x2ac
 8003076:	8013      	strh	r3, [r2, #0]
		PEAKTH = read_be16(rp3 + 2);
 8003078:	4b60      	ldr	r3, [pc, #384]	@ (80031fc <Parameterset_query+0x1bc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3302      	adds	r3, #2
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fe04 	bl	8002c8c <read_be16>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	4b5e      	ldr	r3, [pc, #376]	@ (8003204 <Parameterset_query+0x1c4>)
 800308a:	801a      	strh	r2, [r3, #0]
		ALMSTTH = read_be16(rp3 + 4);
 800308c:	4b5b      	ldr	r3, [pc, #364]	@ (80031fc <Parameterset_query+0x1bc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3304      	adds	r3, #4
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fdfa 	bl	8002c8c <read_be16>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	4b5a      	ldr	r3, [pc, #360]	@ (8003208 <Parameterset_query+0x1c8>)
 800309e:	801a      	strh	r2, [r3, #0]
		PKWND = read_be16(rp3 + 6);
 80030a0:	4b56      	ldr	r3, [pc, #344]	@ (80031fc <Parameterset_query+0x1bc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3306      	adds	r3, #6
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fdf0 	bl	8002c8c <read_be16>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b56      	ldr	r3, [pc, #344]	@ (800320c <Parameterset_query+0x1cc>)
 80030b2:	801a      	strh	r2, [r3, #0]
		ASIC_CMD(0x01, PEAKTH);
 80030b4:	4b53      	ldr	r3, [pc, #332]	@ (8003204 <Parameterset_query+0x1c4>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	2001      	movs	r0, #1
 80030bc:	f7ff fd48 	bl	8002b50 <ASIC_CMD>
		ASIC_CMD(0x02, ALMSTTH);
 80030c0:	4b51      	ldr	r3, [pc, #324]	@ (8003208 <Parameterset_query+0x1c8>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	2002      	movs	r0, #2
 80030c8:	f7ff fd42 	bl	8002b50 <ASIC_CMD>
		ASIC_CMD(0x04, PKWND);
 80030cc:	4b4f      	ldr	r3, [pc, #316]	@ (800320c <Parameterset_query+0x1cc>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	4619      	mov	r1, r3
 80030d2:	2004      	movs	r0, #4
 80030d4:	f7ff fd3c 	bl	8002b50 <ASIC_CMD>
		char config_buf[64];
		FIL fil;
		UINT bytes_written;
		if(read_config(config_buf, sizeof(config_buf)) == FR_OK)
 80030d8:	463b      	mov	r3, r7
 80030da:	2140      	movs	r1, #64	@ 0x40
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe fddd 	bl	8001c9c <read_config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d113      	bne.n	8003110 <Parameterset_query+0xd0>
		{
			sprintf(config_buf, "[svpinger]\n"
 80030e8:	4b45      	ldr	r3, [pc, #276]	@ (8003200 <Parameterset_query+0x1c0>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	4b44      	ldr	r3, [pc, #272]	@ (8003204 <Parameterset_query+0x1c4>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	461c      	mov	r4, r3
 80030f6:	4b44      	ldr	r3, [pc, #272]	@ (8003208 <Parameterset_query+0x1c8>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b43      	ldr	r3, [pc, #268]	@ (800320c <Parameterset_query+0x1cc>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	4638      	mov	r0, r7
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	9200      	str	r2, [sp, #0]
 8003106:	4623      	mov	r3, r4
 8003108:	460a      	mov	r2, r1
 800310a:	4941      	ldr	r1, [pc, #260]	@ (8003210 <Parameterset_query+0x1d0>)
 800310c:	f00b fbb0 	bl	800e870 <siprintf>
		            "Receivercode=%d\n"
		            "PEAKTH=%d\n"
		        	"ALMSTTH=%d\n"
		        	"PKWND=%d", receivercode, PEAKTH, ALMSTTH, PKWND);
		}
		f_open(&fil, CONFIG_FILE, FA_CREATE_ALWAYS | FA_WRITE);
 8003110:	4b40      	ldr	r3, [pc, #256]	@ (8003214 <Parameterset_query+0x1d4>)
 8003112:	6819      	ldr	r1, [r3, #0]
 8003114:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003118:	220a      	movs	r2, #10
 800311a:	4618      	mov	r0, r3
 800311c:	f009 f8c2 	bl	800c2a4 <f_open>
		f_write(&fil, config_buf, strlen(config_buf), &bytes_written);
 8003120:	463b      	mov	r3, r7
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd f8b4 	bl	8000290 <strlen>
 8003128:	4602      	mov	r2, r0
 800312a:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 800312e:	4639      	mov	r1, r7
 8003130:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003134:	f009 fd08 	bl	800cb48 <f_write>
		f_close(&fil);
 8003138:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800313c:	4618      	mov	r0, r3
 800313e:	f009 ffe9 	bl	800d114 <f_close>
		tx_buffer[rp3 - rp1 + 8] = 0x7E;
 8003142:	4b2e      	ldr	r3, [pc, #184]	@ (80031fc <Parameterset_query+0x1bc>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b34      	ldr	r3, [pc, #208]	@ (8003218 <Parameterset_query+0x1d8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	3308      	adds	r3, #8
 800314e:	4a33      	ldr	r2, [pc, #204]	@ (800321c <Parameterset_query+0x1dc>)
 8003150:	217e      	movs	r1, #126	@ 0x7e
 8003152:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 9] = 0xFE;
 8003154:	4b29      	ldr	r3, [pc, #164]	@ (80031fc <Parameterset_query+0x1bc>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b2f      	ldr	r3, [pc, #188]	@ (8003218 <Parameterset_query+0x1d8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	3309      	adds	r3, #9
 8003160:	4a2e      	ldr	r2, [pc, #184]	@ (800321c <Parameterset_query+0x1dc>)
 8003162:	21fe      	movs	r1, #254	@ 0xfe
 8003164:	54d1      	strb	r1, [r2, r3]
 8003166:	e043      	b.n	80031f0 <Parameterset_query+0x1b0>
	}
	else
	{
		ReadResult();
 8003168:	f7ff fd26 	bl	8002bb8 <ReadResult>
		tx_buffer[rp3 - rp1 + 6] = (FREQ >> 8) & 0xFF;
 800316c:	4b2c      	ldr	r3, [pc, #176]	@ (8003220 <Parameterset_query+0x1e0>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	b299      	uxth	r1, r3
 8003174:	4b21      	ldr	r3, [pc, #132]	@ (80031fc <Parameterset_query+0x1bc>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b27      	ldr	r3, [pc, #156]	@ (8003218 <Parameterset_query+0x1d8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	3306      	adds	r3, #6
 8003180:	b2c9      	uxtb	r1, r1
 8003182:	4a26      	ldr	r2, [pc, #152]	@ (800321c <Parameterset_query+0x1dc>)
 8003184:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 7] = FREQ & 0xFF;
 8003186:	4b26      	ldr	r3, [pc, #152]	@ (8003220 <Parameterset_query+0x1e0>)
 8003188:	8819      	ldrh	r1, [r3, #0]
 800318a:	4b1c      	ldr	r3, [pc, #112]	@ (80031fc <Parameterset_query+0x1bc>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <Parameterset_query+0x1d8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	3307      	adds	r3, #7
 8003196:	b2c9      	uxtb	r1, r1
 8003198:	4a20      	ldr	r2, [pc, #128]	@ (800321c <Parameterset_query+0x1dc>)
 800319a:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 8] = (firmware >> 8) & 0xFF;
 800319c:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <Parameterset_query+0x1e4>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	b299      	uxth	r1, r3
 80031a4:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <Parameterset_query+0x1bc>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <Parameterset_query+0x1d8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	3308      	adds	r3, #8
 80031b0:	b2c9      	uxtb	r1, r1
 80031b2:	4a1a      	ldr	r2, [pc, #104]	@ (800321c <Parameterset_query+0x1dc>)
 80031b4:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 9] = firmware & 0xFF;
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <Parameterset_query+0x1e4>)
 80031b8:	8819      	ldrh	r1, [r3, #0]
 80031ba:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <Parameterset_query+0x1bc>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b16      	ldr	r3, [pc, #88]	@ (8003218 <Parameterset_query+0x1d8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	3309      	adds	r3, #9
 80031c6:	b2c9      	uxtb	r1, r1
 80031c8:	4a14      	ldr	r2, [pc, #80]	@ (800321c <Parameterset_query+0x1dc>)
 80031ca:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 12] = 0x7E;
 80031cc:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <Parameterset_query+0x1bc>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <Parameterset_query+0x1d8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	330c      	adds	r3, #12
 80031d8:	4a10      	ldr	r2, [pc, #64]	@ (800321c <Parameterset_query+0x1dc>)
 80031da:	217e      	movs	r1, #126	@ 0x7e
 80031dc:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 13] = 0xFE;
 80031de:	4b07      	ldr	r3, [pc, #28]	@ (80031fc <Parameterset_query+0x1bc>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <Parameterset_query+0x1d8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	330d      	adds	r3, #13
 80031ea:	4a0c      	ldr	r2, [pc, #48]	@ (800321c <Parameterset_query+0x1dc>)
 80031ec:	21fe      	movs	r1, #254	@ 0xfe
 80031ee:	54d1      	strb	r1, [r2, r3]
	}
	for(uint16_t i = 0;i < rp3 - rp1 + 6;i++)
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae
 80031f6:	e0b5      	b.n	8003364 <Parameterset_query+0x324>
 80031f8:	20000f68 	.word	0x20000f68
 80031fc:	20000f74 	.word	0x20000f74
 8003200:	20000022 	.word	0x20000022
 8003204:	20000010 	.word	0x20000010
 8003208:	20000012 	.word	0x20000012
 800320c:	20000014 	.word	0x20000014
 8003210:	08011f74 	.word	0x08011f74
 8003214:	20000000 	.word	0x20000000
 8003218:	20000f6c 	.word	0x20000f6c
 800321c:	2000027c 	.word	0x2000027c
 8003220:	20000032 	.word	0x20000032
 8003224:	2000002c 	.word	0x2000002c
	{
		if(i < rp3 - rp1)
 8003228:	f8b7 22ae 	ldrh.w	r2, [r7, #686]	@ 0x2ae
 800322c:	4b7f      	ldr	r3, [pc, #508]	@ (800342c <Parameterset_query+0x3ec>)
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	4b7f      	ldr	r3, [pc, #508]	@ (8003430 <Parameterset_query+0x3f0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1acb      	subs	r3, r1, r3
 8003236:	429a      	cmp	r2, r3
 8003238:	da09      	bge.n	800324e <Parameterset_query+0x20e>
			tx_buffer[i] = *(rp1 + i);
 800323a:	4b7d      	ldr	r3, [pc, #500]	@ (8003430 <Parameterset_query+0x3f0>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003242:	441a      	add	r2, r3
 8003244:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003248:	7811      	ldrb	r1, [r2, #0]
 800324a:	4a7a      	ldr	r2, [pc, #488]	@ (8003434 <Parameterset_query+0x3f4>)
 800324c:	54d1      	strb	r1, [r2, r3]
		if(command == cmd3)
 800324e:	4b7a      	ldr	r3, [pc, #488]	@ (8003438 <Parameterset_query+0x3f8>)
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d11b      	bne.n	800328e <Parameterset_query+0x24e>
		{
			if(i >= 3 && i <= 4)
 8003256:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 800325a:	2b02      	cmp	r3, #2
 800325c:	d90e      	bls.n	800327c <Parameterset_query+0x23c>
 800325e:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003262:	2b04      	cmp	r3, #4
 8003264:	d80a      	bhi.n	800327c <Parameterset_query+0x23c>
				tx_buffer[i] = *(rp3 + i - 3);
 8003266:	4b71      	ldr	r3, [pc, #452]	@ (800342c <Parameterset_query+0x3ec>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 800326e:	3b03      	subs	r3, #3
 8003270:	441a      	add	r2, r3
 8003272:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003276:	7811      	ldrb	r1, [r2, #0]
 8003278:	4a6e      	ldr	r2, [pc, #440]	@ (8003434 <Parameterset_query+0x3f4>)
 800327a:	54d1      	strb	r1, [r2, r3]
			if(i == 7)
 800327c:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003280:	2b07      	cmp	r3, #7
 8003282:	d104      	bne.n	800328e <Parameterset_query+0x24e>
				tx_buffer[i] = 0x06;
 8003284:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003288:	4a6a      	ldr	r2, [pc, #424]	@ (8003434 <Parameterset_query+0x3f4>)
 800328a:	2106      	movs	r1, #6
 800328c:	54d1      	strb	r1, [r2, r3]
		}
		if(command == cmd4 && i == 7)
 800328e:	4b6a      	ldr	r3, [pc, #424]	@ (8003438 <Parameterset_query+0x3f8>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d108      	bne.n	80032a8 <Parameterset_query+0x268>
 8003296:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 800329a:	2b07      	cmp	r3, #7
 800329c:	d104      	bne.n	80032a8 <Parameterset_query+0x268>
			tx_buffer[i] = 0x0A;
 800329e:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 80032a2:	4a64      	ldr	r2, [pc, #400]	@ (8003434 <Parameterset_query+0x3f4>)
 80032a4:	210a      	movs	r1, #10
 80032a6:	54d1      	strb	r1, [r2, r3]
		if(i == 5)
 80032a8:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 80032ac:	2b05      	cmp	r3, #5
 80032ae:	d104      	bne.n	80032ba <Parameterset_query+0x27a>
			tx_buffer[i] = 0x01;
 80032b0:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 80032b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003434 <Parameterset_query+0x3f4>)
 80032b6:	2101      	movs	r1, #1
 80032b8:	54d1      	strb	r1, [r2, r3]
		if(i == rp3 - rp1)
 80032ba:	f8b7 22ae 	ldrh.w	r2, [r7, #686]	@ 0x2ae
 80032be:	4b5b      	ldr	r3, [pc, #364]	@ (800342c <Parameterset_query+0x3ec>)
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003430 <Parameterset_query+0x3f0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	1acb      	subs	r3, r1, r3
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d110      	bne.n	80032ee <Parameterset_query+0x2ae>
		{
			tx_buffer[i] = (PEAKTH >> 8) & 0xFF;
 80032cc:	4b5b      	ldr	r3, [pc, #364]	@ (800343c <Parameterset_query+0x3fc>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 80032d8:	b2d1      	uxtb	r1, r2
 80032da:	4a56      	ldr	r2, [pc, #344]	@ (8003434 <Parameterset_query+0x3f4>)
 80032dc:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = PEAKTH & 0xFF;
 80032de:	4b57      	ldr	r3, [pc, #348]	@ (800343c <Parameterset_query+0x3fc>)
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 80032e6:	3301      	adds	r3, #1
 80032e8:	b2d1      	uxtb	r1, r2
 80032ea:	4a52      	ldr	r2, [pc, #328]	@ (8003434 <Parameterset_query+0x3f4>)
 80032ec:	54d1      	strb	r1, [r2, r3]
		}
		if(i == rp3 - rp1 + 2)
 80032ee:	f8b7 22ae 	ldrh.w	r2, [r7, #686]	@ 0x2ae
 80032f2:	4b4e      	ldr	r3, [pc, #312]	@ (800342c <Parameterset_query+0x3ec>)
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003430 <Parameterset_query+0x3f0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1acb      	subs	r3, r1, r3
 80032fc:	3302      	adds	r3, #2
 80032fe:	429a      	cmp	r2, r3
 8003300:	d110      	bne.n	8003324 <Parameterset_query+0x2e4>
		{
			tx_buffer[i] = (ALMSTTH >> 8) & 0xFF;
 8003302:	4b4f      	ldr	r3, [pc, #316]	@ (8003440 <Parameterset_query+0x400>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	b29a      	uxth	r2, r3
 800330a:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 800330e:	b2d1      	uxtb	r1, r2
 8003310:	4a48      	ldr	r2, [pc, #288]	@ (8003434 <Parameterset_query+0x3f4>)
 8003312:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = ALMSTTH & 0xFF;
 8003314:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <Parameterset_query+0x400>)
 8003316:	881a      	ldrh	r2, [r3, #0]
 8003318:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 800331c:	3301      	adds	r3, #1
 800331e:	b2d1      	uxtb	r1, r2
 8003320:	4a44      	ldr	r2, [pc, #272]	@ (8003434 <Parameterset_query+0x3f4>)
 8003322:	54d1      	strb	r1, [r2, r3]
		}
		if(i == rp3 - rp1 + 4)
 8003324:	f8b7 22ae 	ldrh.w	r2, [r7, #686]	@ 0x2ae
 8003328:	4b40      	ldr	r3, [pc, #256]	@ (800342c <Parameterset_query+0x3ec>)
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	4b40      	ldr	r3, [pc, #256]	@ (8003430 <Parameterset_query+0x3f0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	1acb      	subs	r3, r1, r3
 8003332:	3304      	adds	r3, #4
 8003334:	429a      	cmp	r2, r3
 8003336:	d110      	bne.n	800335a <Parameterset_query+0x31a>
		{
			tx_buffer[i] = (PKWND >> 8) & 0xFF;
 8003338:	4b42      	ldr	r3, [pc, #264]	@ (8003444 <Parameterset_query+0x404>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	b29a      	uxth	r2, r3
 8003340:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003344:	b2d1      	uxtb	r1, r2
 8003346:	4a3b      	ldr	r2, [pc, #236]	@ (8003434 <Parameterset_query+0x3f4>)
 8003348:	54d1      	strb	r1, [r2, r3]
			tx_buffer[i + 1] = PKWND & 0xFF;
 800334a:	4b3e      	ldr	r3, [pc, #248]	@ (8003444 <Parameterset_query+0x404>)
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003352:	3301      	adds	r3, #1
 8003354:	b2d1      	uxtb	r1, r2
 8003356:	4a37      	ldr	r2, [pc, #220]	@ (8003434 <Parameterset_query+0x3f4>)
 8003358:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i < rp3 - rp1 + 6;i++)
 800335a:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 800335e:	3301      	adds	r3, #1
 8003360:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae
 8003364:	4b31      	ldr	r3, [pc, #196]	@ (800342c <Parameterset_query+0x3ec>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <Parameterset_query+0x3f0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	1d5a      	adds	r2, r3, #5
 8003370:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8003374:	429a      	cmp	r2, r3
 8003376:	f6bf af57 	bge.w	8003228 <Parameterset_query+0x1e8>
		}
	}
	size_t txlen = 12 + tx_buffer[7];
 800337a:	4b2e      	ldr	r3, [pc, #184]	@ (8003434 <Parameterset_query+0x3f4>)
 800337c:	79db      	ldrb	r3, [r3, #7]
 800337e:	330c      	adds	r3, #12
 8003380:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
	size_t checklength = 6 + tx_buffer[7];
 8003384:	4b2b      	ldr	r3, [pc, #172]	@ (8003434 <Parameterset_query+0x3f4>)
 8003386:	79db      	ldrb	r3, [r3, #7]
 8003388:	3306      	adds	r3, #6
 800338a:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
	SUM = Checksum(&tx_buffer[2], checklength);
 800338e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8003392:	b29b      	uxth	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	482c      	ldr	r0, [pc, #176]	@ (8003448 <Parameterset_query+0x408>)
 8003398:	f7ff fc8e 	bl	8002cb8 <Checksum>
 800339c:	4603      	mov	r3, r0
 800339e:	f8a7 32a2 	strh.w	r3, [r7, #674]	@ 0x2a2
	if(command == 3)
 80033a2:	4b25      	ldr	r3, [pc, #148]	@ (8003438 <Parameterset_query+0x3f8>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d118      	bne.n	80033dc <Parameterset_query+0x39c>
	{
		tx_buffer[rp3 - rp1 + 6] = (SUM >> 8) & 0xFF;
 80033aa:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	@ 0x2a2
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	b299      	uxth	r1, r3
 80033b2:	4b1e      	ldr	r3, [pc, #120]	@ (800342c <Parameterset_query+0x3ec>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003430 <Parameterset_query+0x3f0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	3306      	adds	r3, #6
 80033be:	b2c9      	uxtb	r1, r1
 80033c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003434 <Parameterset_query+0x3f4>)
 80033c2:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 7] = SUM & 0xFF;
 80033c4:	4b19      	ldr	r3, [pc, #100]	@ (800342c <Parameterset_query+0x3ec>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b19      	ldr	r3, [pc, #100]	@ (8003430 <Parameterset_query+0x3f0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	3307      	adds	r3, #7
 80033d0:	f8b7 22a2 	ldrh.w	r2, [r7, #674]	@ 0x2a2
 80033d4:	b2d1      	uxtb	r1, r2
 80033d6:	4a17      	ldr	r2, [pc, #92]	@ (8003434 <Parameterset_query+0x3f4>)
 80033d8:	54d1      	strb	r1, [r2, r3]
 80033da:	e017      	b.n	800340c <Parameterset_query+0x3cc>
	}
	else
	{
		tx_buffer[rp3 - rp1 + 10] = (SUM >> 8) & 0xFF;
 80033dc:	f8b7 32a2 	ldrh.w	r3, [r7, #674]	@ 0x2a2
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	b299      	uxth	r1, r3
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <Parameterset_query+0x3ec>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <Parameterset_query+0x3f0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	330a      	adds	r3, #10
 80033f0:	b2c9      	uxtb	r1, r1
 80033f2:	4a10      	ldr	r2, [pc, #64]	@ (8003434 <Parameterset_query+0x3f4>)
 80033f4:	54d1      	strb	r1, [r2, r3]
		tx_buffer[rp3 - rp1 + 11] = SUM & 0xFF;
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <Parameterset_query+0x3ec>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <Parameterset_query+0x3f0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	330b      	adds	r3, #11
 8003402:	f8b7 22a2 	ldrh.w	r2, [r7, #674]	@ 0x2a2
 8003406:	b2d1      	uxtb	r1, r2
 8003408:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <Parameterset_query+0x3f4>)
 800340a:	54d1      	strb	r1, [r2, r3]
	}
	txstate = 1;
 800340c:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <Parameterset_query+0x40c>)
 800340e:	2201      	movs	r2, #1
 8003410:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, txlen);
 8003412:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	4906      	ldr	r1, [pc, #24]	@ (8003434 <Parameterset_query+0x3f4>)
 800341c:	480c      	ldr	r0, [pc, #48]	@ (8003450 <Parameterset_query+0x410>)
 800341e:	f003 fdcb 	bl	8006fb8 <HAL_UART_Transmit_DMA>
}
 8003422:	bf00      	nop
 8003424:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8003428:	46bd      	mov	sp, r7
 800342a:	bd90      	pop	{r4, r7, pc}
 800342c:	20000f74 	.word	0x20000f74
 8003430:	20000f6c 	.word	0x20000f6c
 8003434:	2000027c 	.word	0x2000027c
 8003438:	20000f68 	.word	0x20000f68
 800343c:	20000010 	.word	0x20000010
 8003440:	20000012 	.word	0x20000012
 8003444:	20000014 	.word	0x20000014
 8003448:	2000027e 	.word	0x2000027e
 800344c:	20000f9a 	.word	0x20000f9a
 8003450:	20000a3c 	.word	0x20000a3c

08003454 <get_current_systick>:

uint64_t get_current_systick(void) //获取当前系统计时 (µs)
{
 8003454:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
  uint32_t high1, low;
  do
  {
    high1 = (uint32_t)(high_counter >> 32);
 800345c:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <get_current_systick+0x64>)
 800345e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	464a      	mov	r2, r9
 800346c:	2300      	movs	r3, #0
 800346e:	4613      	mov	r3, r2
 8003470:	607b      	str	r3, [r7, #4]
    low = TIM2->CNT;
 8003472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	603b      	str	r3, [r7, #0]
  } while (high1 != (uint32_t)(high_counter >> 32));
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <get_current_systick+0x64>)
 800347c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	464a      	mov	r2, r9
 800348a:	2300      	movs	r3, #0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4293      	cmp	r3, r2
 8003490:	d1e4      	bne.n	800345c <get_current_systick+0x8>
  return high_counter + low; // 返回64位，低32位为定时器记录，高32位由high_counter记录
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2200      	movs	r2, #0
 8003496:	4618      	mov	r0, r3
 8003498:	4611      	mov	r1, r2
 800349a:	4b07      	ldr	r3, [pc, #28]	@ (80034b8 <get_current_systick+0x64>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	1884      	adds	r4, r0, r2
 80034a2:	eb41 0503 	adc.w	r5, r1, r3
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
}
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80034b6:	4770      	bx	lr
 80034b8:	20000f80 	.word	0x20000f80

080034bc <set_base_time>:

void set_base_time(uint64_t timestamp) // 设置时间基准
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	e9c7 0100 	strd	r0, r1, [r7]
  base_timestamp = timestamp;
 80034c6:	4908      	ldr	r1, [pc, #32]	@ (80034e8 <set_base_time+0x2c>)
 80034c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034cc:	e9c1 2300 	strd	r2, r3, [r1]
  base_systick = get_current_systick();
 80034d0:	f7ff ffc0 	bl	8003454 <get_current_systick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4904      	ldr	r1, [pc, #16]	@ (80034ec <set_base_time+0x30>)
 80034da:	e9c1 2300 	strd	r2, r3, [r1]
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000f88 	.word	0x20000f88
 80034ec:	20000f90 	.word	0x20000f90

080034f0 <get_current_timestamp>:

uint64_t get_current_timestamp(void) //获取当前时间戳 (µs)
{
 80034f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
  uint64_t current_systick = get_current_systick();
 80034f8:	f7ff ffac 	bl	8003454 <get_current_systick>
 80034fc:	e9c7 0100 	strd	r0, r1, [r7]
  return base_timestamp + (current_systick - base_systick);
 8003500:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <get_current_timestamp+0x40>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800350a:	1a84      	subs	r4, r0, r2
 800350c:	eb61 0503 	sbc.w	r5, r1, r3
 8003510:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <get_current_timestamp+0x44>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	eb14 0802 	adds.w	r8, r4, r2
 800351a:	eb45 0903 	adc.w	r9, r5, r3
 800351e:	4642      	mov	r2, r8
 8003520:	464b      	mov	r3, r9
}
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800352e:	bf00      	nop
 8003530:	20000f90 	.word	0x20000f90
 8003534:	20000f88 	.word	0x20000f88

08003538 <Send_time>:

void Send_time(void) // 校时
{
 8003538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353c:	b08b      	sub	sp, #44	@ 0x2c
 800353e:	af00      	add	r7, sp, #0
	uint64_t timestamp = 0;
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(uint16_t i = 0; i < 8;i++)
 800354c:	2300      	movs	r3, #0
 800354e:	83fb      	strh	r3, [r7, #30]
 8003550:	e01b      	b.n	800358a <Send_time+0x52>
	timestamp = (timestamp << 8) | *(rp3 + i);
 8003552:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	020b      	lsls	r3, r1, #8
 8003560:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003564:	0202      	lsls	r2, r0, #8
 8003566:	4955      	ldr	r1, [pc, #340]	@ (80036bc <Send_time+0x184>)
 8003568:	6808      	ldr	r0, [r1, #0]
 800356a:	8bf9      	ldrh	r1, [r7, #30]
 800356c:	4401      	add	r1, r0
 800356e:	7809      	ldrb	r1, [r1, #0]
 8003570:	b2c9      	uxtb	r1, r1
 8003572:	2000      	movs	r0, #0
 8003574:	4688      	mov	r8, r1
 8003576:	4681      	mov	r9, r0
 8003578:	ea42 0a08 	orr.w	sl, r2, r8
 800357c:	ea43 0b09 	orr.w	fp, r3, r9
 8003580:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	for(uint16_t i = 0; i < 8;i++)
 8003584:	8bfb      	ldrh	r3, [r7, #30]
 8003586:	3301      	adds	r3, #1
 8003588:	83fb      	strh	r3, [r7, #30]
 800358a:	8bfb      	ldrh	r3, [r7, #30]
 800358c:	2b07      	cmp	r3, #7
 800358e:	d9e0      	bls.n	8003552 <Send_time+0x1a>
	set_base_time(timestamp);
 8003590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003594:	f7ff ff92 	bl	80034bc <set_base_time>
	for(uint16_t j = 0;j < rp3 - rp1;j++)
 8003598:	2300      	movs	r3, #0
 800359a:	83bb      	strh	r3, [r7, #28]
 800359c:	e011      	b.n	80035c2 <Send_time+0x8a>
	{
		tx_buffer[j] = *(rp1 + j);
 800359e:	4b48      	ldr	r3, [pc, #288]	@ (80036c0 <Send_time+0x188>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	8bbb      	ldrh	r3, [r7, #28]
 80035a4:	441a      	add	r2, r3
 80035a6:	8bbb      	ldrh	r3, [r7, #28]
 80035a8:	7811      	ldrb	r1, [r2, #0]
 80035aa:	4a46      	ldr	r2, [pc, #280]	@ (80036c4 <Send_time+0x18c>)
 80035ac:	54d1      	strb	r1, [r2, r3]
		if(j == 5)
 80035ae:	8bbb      	ldrh	r3, [r7, #28]
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d103      	bne.n	80035bc <Send_time+0x84>
			tx_buffer[j] = 0x01;
 80035b4:	8bbb      	ldrh	r3, [r7, #28]
 80035b6:	4a43      	ldr	r2, [pc, #268]	@ (80036c4 <Send_time+0x18c>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	54d1      	strb	r1, [r2, r3]
	for(uint16_t j = 0;j < rp3 - rp1;j++)
 80035bc:	8bbb      	ldrh	r3, [r7, #28]
 80035be:	3301      	adds	r3, #1
 80035c0:	83bb      	strh	r3, [r7, #28]
 80035c2:	8bba      	ldrh	r2, [r7, #28]
 80035c4:	4b3d      	ldr	r3, [pc, #244]	@ (80036bc <Send_time+0x184>)
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	4b3d      	ldr	r3, [pc, #244]	@ (80036c0 <Send_time+0x188>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1acb      	subs	r3, r1, r3
 80035ce:	429a      	cmp	r2, r3
 80035d0:	dbe5      	blt.n	800359e <Send_time+0x66>
	}
	size_t checklength = 6 + tx_buffer[7];
 80035d2:	4b3c      	ldr	r3, [pc, #240]	@ (80036c4 <Send_time+0x18c>)
 80035d4:	79db      	ldrb	r3, [r3, #7]
 80035d6:	3306      	adds	r3, #6
 80035d8:	617b      	str	r3, [r7, #20]
	size_t txlen = 12 + tx_buffer[7];
 80035da:	4b3a      	ldr	r3, [pc, #232]	@ (80036c4 <Send_time+0x18c>)
 80035dc:	79db      	ldrb	r3, [r3, #7]
 80035de:	330c      	adds	r3, #12
 80035e0:	613b      	str	r3, [r7, #16]
	uint64_t current_timestamp = get_current_timestamp();
 80035e2:	f7ff ff85 	bl	80034f0 <get_current_timestamp>
 80035e6:	e9c7 0102 	strd	r0, r1, [r7, #8]
	for(uint16_t i = 0; i < 8;i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	837b      	strh	r3, [r7, #26]
 80035ee:	e01b      	b.n	8003628 <Send_time+0xf0>
		tx_buffer[i + 8] = (current_timestamp >> (56 - 8 * i)) & 0xFF;
 80035f0:	8b7b      	ldrh	r3, [r7, #26]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	00d9      	lsls	r1, r3, #3
 80035f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035fc:	f1c1 0620 	rsb	r6, r1, #32
 8003600:	f1a1 0020 	sub.w	r0, r1, #32
 8003604:	fa22 f401 	lsr.w	r4, r2, r1
 8003608:	fa03 f606 	lsl.w	r6, r3, r6
 800360c:	4334      	orrs	r4, r6
 800360e:	fa23 f000 	lsr.w	r0, r3, r0
 8003612:	4304      	orrs	r4, r0
 8003614:	fa23 f501 	lsr.w	r5, r3, r1
 8003618:	8b7b      	ldrh	r3, [r7, #26]
 800361a:	3308      	adds	r3, #8
 800361c:	b2e1      	uxtb	r1, r4
 800361e:	4a29      	ldr	r2, [pc, #164]	@ (80036c4 <Send_time+0x18c>)
 8003620:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < 8;i++)
 8003622:	8b7b      	ldrh	r3, [r7, #26]
 8003624:	3301      	adds	r3, #1
 8003626:	837b      	strh	r3, [r7, #26]
 8003628:	8b7b      	ldrh	r3, [r7, #26]
 800362a:	2b07      	cmp	r3, #7
 800362c:	d9e0      	bls.n	80035f0 <Send_time+0xb8>
	uint16_t SUM = Checksum(&tx_buffer[2], checklength);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	b29b      	uxth	r3, r3
 8003632:	4619      	mov	r1, r3
 8003634:	4824      	ldr	r0, [pc, #144]	@ (80036c8 <Send_time+0x190>)
 8003636:	f7ff fb3f 	bl	8002cb8 <Checksum>
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
	tx_buffer[rp3 - rp1 + 8] = (SUM >> 8) & 0xFF;
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	b299      	uxth	r1, r3
 8003644:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <Send_time+0x184>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b1d      	ldr	r3, [pc, #116]	@ (80036c0 <Send_time+0x188>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	3308      	adds	r3, #8
 8003650:	b2c9      	uxtb	r1, r1
 8003652:	4a1c      	ldr	r2, [pc, #112]	@ (80036c4 <Send_time+0x18c>)
 8003654:	54d1      	strb	r1, [r2, r3]
	tx_buffer[rp3 - rp1 + 9] = SUM & 0xFF;
 8003656:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <Send_time+0x184>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b19      	ldr	r3, [pc, #100]	@ (80036c0 <Send_time+0x188>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	3309      	adds	r3, #9
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	b2d1      	uxtb	r1, r2
 8003666:	4a17      	ldr	r2, [pc, #92]	@ (80036c4 <Send_time+0x18c>)
 8003668:	54d1      	strb	r1, [r2, r3]
	uint16_t tail = TAIL;
 800366a:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 800366e:	80bb      	strh	r3, [r7, #4]
	tx_buffer[rp3 - rp1 + 10] = (tail >> 8) & 0xFF;
 8003670:	88bb      	ldrh	r3, [r7, #4]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	b299      	uxth	r1, r3
 8003676:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <Send_time+0x184>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <Send_time+0x188>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	330a      	adds	r3, #10
 8003682:	b2c9      	uxtb	r1, r1
 8003684:	4a0f      	ldr	r2, [pc, #60]	@ (80036c4 <Send_time+0x18c>)
 8003686:	54d1      	strb	r1, [r2, r3]
	tx_buffer[rp3 - rp1 + 11] = tail & 0xFF;
 8003688:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <Send_time+0x184>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <Send_time+0x188>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	330b      	adds	r3, #11
 8003694:	88ba      	ldrh	r2, [r7, #4]
 8003696:	b2d1      	uxtb	r1, r2
 8003698:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <Send_time+0x18c>)
 800369a:	54d1      	strb	r1, [r2, r3]
	txstate = 1;
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <Send_time+0x194>)
 800369e:	2201      	movs	r2, #1
 80036a0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, txlen);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	4906      	ldr	r1, [pc, #24]	@ (80036c4 <Send_time+0x18c>)
 80036aa:	4809      	ldr	r0, [pc, #36]	@ (80036d0 <Send_time+0x198>)
 80036ac:	f003 fc84 	bl	8006fb8 <HAL_UART_Transmit_DMA>
}
 80036b0:	bf00      	nop
 80036b2:	372c      	adds	r7, #44	@ 0x2c
 80036b4:	46bd      	mov	sp, r7
 80036b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ba:	bf00      	nop
 80036bc:	20000f74 	.word	0x20000f74
 80036c0:	20000f6c 	.word	0x20000f6c
 80036c4:	2000027c 	.word	0x2000027c
 80036c8:	2000027e 	.word	0x2000027e
 80036cc:	20000f9a 	.word	0x20000f9a
 80036d0:	20000a3c 	.word	0x20000a3c

080036d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //5s触发增加一次heartcount记数，每30s发送一次心跳
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003710 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d106      	bne.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x20>
		  heartcount++;
 80036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80036f2:	801a      	strh	r2, [r3, #0]
	  if(heartcount >= 6)
 80036f4:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d904      	bls.n	8003708 <HAL_TIM_PeriodElapsedCallback+0x34>
	  {
		  Sendheart();
 80036fe:	f000 f80b 	bl	8003718 <Sendheart>
		  heartcount = 0;
 8003702:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003704:	2200      	movs	r2, #0
 8003706:	801a      	strh	r2, [r3, #0]
	  }
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40001000 	.word	0x40001000
 8003714:	20000f9e 	.word	0x20000f9e

08003718 <Sendheart>:

void Sendheart(void) //发送心跳
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
	  uint16_t length = 14;
 800371e:	230e      	movs	r3, #14
 8003720:	80fb      	strh	r3, [r7, #6]
	  static uint8_t hearttx[14];
	  uint16_t head = HEAD;
 8003722:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003726:	80bb      	strh	r3, [r7, #4]
	  uint16_t tail = TAIL;
 8003728:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 800372c:	807b      	strh	r3, [r7, #2]
	  hearttx[0] = (head >> 8) & 0xFF;
 800372e:	88bb      	ldrh	r3, [r7, #4]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	b29b      	uxth	r3, r3
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b28      	ldr	r3, [pc, #160]	@ (80037d8 <Sendheart+0xc0>)
 8003738:	701a      	strb	r2, [r3, #0]
	  hearttx[1] = head & 0xFF;
 800373a:	88bb      	ldrh	r3, [r7, #4]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b26      	ldr	r3, [pc, #152]	@ (80037d8 <Sendheart+0xc0>)
 8003740:	705a      	strb	r2, [r3, #1]
	  hearttx[2] = version;
 8003742:	4b26      	ldr	r3, [pc, #152]	@ (80037dc <Sendheart+0xc4>)
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	4b24      	ldr	r3, [pc, #144]	@ (80037d8 <Sendheart+0xc0>)
 8003748:	709a      	strb	r2, [r3, #2]
	  hearttx[3] = (receivercode >> 8) & 0xFF;
 800374a:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <Sendheart+0xc8>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	b29b      	uxth	r3, r3
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4b20      	ldr	r3, [pc, #128]	@ (80037d8 <Sendheart+0xc0>)
 8003758:	70da      	strb	r2, [r3, #3]
	  hearttx[4] = receivercode & 0xFF;
 800375a:	4b21      	ldr	r3, [pc, #132]	@ (80037e0 <Sendheart+0xc8>)
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4b1d      	ldr	r3, [pc, #116]	@ (80037d8 <Sendheart+0xc0>)
 8003764:	711a      	strb	r2, [r3, #4]
	  hearttx[5] = 0x01;
 8003766:	4b1c      	ldr	r3, [pc, #112]	@ (80037d8 <Sendheart+0xc0>)
 8003768:	2201      	movs	r2, #1
 800376a:	715a      	strb	r2, [r3, #5]
	  hearttx[6] = 0x00;
 800376c:	4b1a      	ldr	r3, [pc, #104]	@ (80037d8 <Sendheart+0xc0>)
 800376e:	2200      	movs	r2, #0
 8003770:	719a      	strb	r2, [r3, #6]
	  hearttx[7] = 0x02;
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <Sendheart+0xc0>)
 8003774:	2202      	movs	r2, #2
 8003776:	71da      	strb	r2, [r3, #7]
	  hearttx[8] = state;
 8003778:	4b1a      	ldr	r3, [pc, #104]	@ (80037e4 <Sendheart+0xcc>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <Sendheart+0xc0>)
 8003780:	721a      	strb	r2, [r3, #8]
	  hearttx[9] = (uint8_t)sampling_ready;
 8003782:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <Sendheart+0xd0>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b13      	ldr	r3, [pc, #76]	@ (80037d8 <Sendheart+0xc0>)
 800378c:	725a      	strb	r2, [r3, #9]
	  uint16_t SUM = Checksum(&hearttx[2], 8);
 800378e:	2108      	movs	r1, #8
 8003790:	4816      	ldr	r0, [pc, #88]	@ (80037ec <Sendheart+0xd4>)
 8003792:	f7ff fa91 	bl	8002cb8 <Checksum>
 8003796:	4603      	mov	r3, r0
 8003798:	803b      	strh	r3, [r7, #0]
	  hearttx[10] = (SUM >> 8) & 0xFF;
 800379a:	883b      	ldrh	r3, [r7, #0]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	b29b      	uxth	r3, r3
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <Sendheart+0xc0>)
 80037a4:	729a      	strb	r2, [r3, #10]
	  hearttx[11] = SUM & 0xFF;
 80037a6:	883b      	ldrh	r3, [r7, #0]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <Sendheart+0xc0>)
 80037ac:	72da      	strb	r2, [r3, #11]
	  hearttx[12] = (tail >> 8) & 0xFF;
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <Sendheart+0xc0>)
 80037b8:	731a      	strb	r2, [r3, #12]
	  hearttx[13] = tail & 0xFF;
 80037ba:	887b      	ldrh	r3, [r7, #2]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <Sendheart+0xc0>)
 80037c0:	735a      	strb	r2, [r3, #13]
	  HAL_UART_Transmit_DMA(&huart1, hearttx, length);
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4904      	ldr	r1, [pc, #16]	@ (80037d8 <Sendheart+0xc0>)
 80037c8:	4809      	ldr	r0, [pc, #36]	@ (80037f0 <Sendheart+0xd8>)
 80037ca:	f003 fbf5 	bl	8006fb8 <HAL_UART_Transmit_DMA>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000fb8 	.word	0x20000fb8
 80037dc:	20000020 	.word	0x20000020
 80037e0:	20000022 	.word	0x20000022
 80037e4:	20000f98 	.word	0x20000f98
 80037e8:	2000002e 	.word	0x2000002e
 80037ec:	20000fba 	.word	0x20000fba
 80037f0:	20000a3c 	.word	0x20000a3c

080037f4 <Send_Data>:

void Send_Data(void) // 数据上送
{
 80037f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f8:	b087      	sub	sp, #28
 80037fa:	af00      	add	r7, sp, #0
	  while(!samplingstate && !data_ready)
 80037fc:	e098      	b.n	8003930 <Send_Data+0x13c>
	  {
		  uint16_t head = HEAD;
 80037fe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003802:	82bb      	strh	r3, [r7, #20]
		  uint16_t tail = TAIL;
 8003804:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 8003808:	827b      	strh	r3, [r7, #18]
		  datatx[0] = (head >> 8) & 0xFF;
 800380a:	8abb      	ldrh	r3, [r7, #20]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	b29b      	uxth	r3, r3
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4b4f      	ldr	r3, [pc, #316]	@ (8003950 <Send_Data+0x15c>)
 8003814:	701a      	strb	r2, [r3, #0]
		  datatx[1] = head & 0xFF;
 8003816:	8abb      	ldrh	r3, [r7, #20]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b4d      	ldr	r3, [pc, #308]	@ (8003950 <Send_Data+0x15c>)
 800381c:	705a      	strb	r2, [r3, #1]
		  datatx[2] = version;
 800381e:	4b4d      	ldr	r3, [pc, #308]	@ (8003954 <Send_Data+0x160>)
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <Send_Data+0x15c>)
 8003824:	709a      	strb	r2, [r3, #2]
		  datatx[3] = (receivercode >> 8) & 0xFF;
 8003826:	4b4c      	ldr	r3, [pc, #304]	@ (8003958 <Send_Data+0x164>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	b29b      	uxth	r3, r3
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <Send_Data+0x15c>)
 8003834:	70da      	strb	r2, [r3, #3]
		  datatx[4] = receivercode & 0xFF;
 8003836:	4b48      	ldr	r3, [pc, #288]	@ (8003958 <Send_Data+0x164>)
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4b44      	ldr	r3, [pc, #272]	@ (8003950 <Send_Data+0x15c>)
 8003840:	711a      	strb	r2, [r3, #4]
		  datatx[5] = 0x01;
 8003842:	4b43      	ldr	r3, [pc, #268]	@ (8003950 <Send_Data+0x15c>)
 8003844:	2201      	movs	r2, #1
 8003846:	715a      	strb	r2, [r3, #5]
		  datatx[6] = 0x02;
 8003848:	4b41      	ldr	r3, [pc, #260]	@ (8003950 <Send_Data+0x15c>)
 800384a:	2202      	movs	r2, #2
 800384c:	719a      	strb	r2, [r3, #6]
		  datatx[7] = 0x0B;
 800384e:	4b40      	ldr	r3, [pc, #256]	@ (8003950 <Send_Data+0x15c>)
 8003850:	220b      	movs	r2, #11
 8003852:	71da      	strb	r2, [r3, #7]
		  datatx[8] = codeid;
 8003854:	4b41      	ldr	r3, [pc, #260]	@ (800395c <Send_Data+0x168>)
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	4b3d      	ldr	r3, [pc, #244]	@ (8003950 <Send_Data+0x15c>)
 800385a:	721a      	strb	r2, [r3, #8]
		  datatx[9] = (peaklevel >> 8) & 0xFF;
 800385c:	4b40      	ldr	r3, [pc, #256]	@ (8003960 <Send_Data+0x16c>)
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	0a1b      	lsrs	r3, r3, #8
 8003862:	b29b      	uxth	r3, r3
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b3a      	ldr	r3, [pc, #232]	@ (8003950 <Send_Data+0x15c>)
 8003868:	725a      	strb	r2, [r3, #9]
		  datatx[10] = peaklevel & 0xFF;
 800386a:	4b3d      	ldr	r3, [pc, #244]	@ (8003960 <Send_Data+0x16c>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <Send_Data+0x15c>)
 8003872:	729a      	strb	r2, [r3, #10]
		  uint64_t datatime = base_timestamp + peaktime - base_systick;
 8003874:	4b3b      	ldr	r3, [pc, #236]	@ (8003964 <Send_Data+0x170>)
 8003876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800387a:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <Send_Data+0x174>)
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	eb10 0802 	adds.w	r8, r0, r2
 8003884:	eb41 0903 	adc.w	r9, r1, r3
 8003888:	4b38      	ldr	r3, [pc, #224]	@ (800396c <Send_Data+0x178>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	ebb8 0a02 	subs.w	sl, r8, r2
 8003892:	eb69 0b03 	sbc.w	fp, r9, r3
 8003896:	e9c7 ab02 	strd	sl, fp, [r7, #8]
		  for(uint16_t i = 0;i < 8;i++)
 800389a:	2300      	movs	r3, #0
 800389c:	82fb      	strh	r3, [r7, #22]
 800389e:	e01b      	b.n	80038d8 <Send_Data+0xe4>
			  datatx[i + 11] = (datatime >> (56 - 8 * i)) & 0xFF;
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	00d9      	lsls	r1, r3, #3
 80038a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ac:	f1c1 0620 	rsb	r6, r1, #32
 80038b0:	f1a1 0020 	sub.w	r0, r1, #32
 80038b4:	fa22 f401 	lsr.w	r4, r2, r1
 80038b8:	fa03 f606 	lsl.w	r6, r3, r6
 80038bc:	4334      	orrs	r4, r6
 80038be:	fa23 f000 	lsr.w	r0, r3, r0
 80038c2:	4304      	orrs	r4, r0
 80038c4:	fa23 f501 	lsr.w	r5, r3, r1
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	330b      	adds	r3, #11
 80038cc:	b2e1      	uxtb	r1, r4
 80038ce:	4a20      	ldr	r2, [pc, #128]	@ (8003950 <Send_Data+0x15c>)
 80038d0:	54d1      	strb	r1, [r2, r3]
		  for(uint16_t i = 0;i < 8;i++)
 80038d2:	8afb      	ldrh	r3, [r7, #22]
 80038d4:	3301      	adds	r3, #1
 80038d6:	82fb      	strh	r3, [r7, #22]
 80038d8:	8afb      	ldrh	r3, [r7, #22]
 80038da:	2b07      	cmp	r3, #7
 80038dc:	d9e0      	bls.n	80038a0 <Send_Data+0xac>
		  uint16_t SUM = Checksum(&datatx[2], 17);
 80038de:	2111      	movs	r1, #17
 80038e0:	4823      	ldr	r0, [pc, #140]	@ (8003970 <Send_Data+0x17c>)
 80038e2:	f7ff f9e9 	bl	8002cb8 <Checksum>
 80038e6:	4603      	mov	r3, r0
 80038e8:	80fb      	strh	r3, [r7, #6]
		  datatx[19] = (SUM >> 8) & 0xFF;
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4b17      	ldr	r3, [pc, #92]	@ (8003950 <Send_Data+0x15c>)
 80038f4:	74da      	strb	r2, [r3, #19]
		  datatx[20] = SUM & 0xFF;
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <Send_Data+0x15c>)
 80038fc:	751a      	strb	r2, [r3, #20]
		  datatx[21] = (tail >> 8) & 0xFF;
 80038fe:	8a7b      	ldrh	r3, [r7, #18]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	b29b      	uxth	r3, r3
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <Send_Data+0x15c>)
 8003908:	755a      	strb	r2, [r3, #21]
		  datatx[22] = tail & 0xFF;
 800390a:	8a7b      	ldrh	r3, [r7, #18]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <Send_Data+0x15c>)
 8003910:	759a      	strb	r2, [r3, #22]
		  if(sampling_ready == 1)
 8003912:	4b18      	ldr	r3, [pc, #96]	@ (8003974 <Send_Data+0x180>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d109      	bne.n	8003930 <Send_Data+0x13c>
		  {
			  samplingstate = 1;
 800391c:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <Send_Data+0x184>)
 800391e:	2201      	movs	r2, #1
 8003920:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit_DMA(&huart1, datatx, transmitlength);
 8003922:	4b16      	ldr	r3, [pc, #88]	@ (800397c <Send_Data+0x188>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	4909      	ldr	r1, [pc, #36]	@ (8003950 <Send_Data+0x15c>)
 800392a:	4815      	ldr	r0, [pc, #84]	@ (8003980 <Send_Data+0x18c>)
 800392c:	f003 fb44 	bl	8006fb8 <HAL_UART_Transmit_DMA>
	  while(!samplingstate && !data_ready)
 8003930:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <Send_Data+0x184>)
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <Send_Data+0x152>
 800393a:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <Send_Data+0x190>)
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	f43f af5c 	beq.w	80037fe <Send_Data+0xa>
		  }
	  }
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003950:	20000fa0 	.word	0x20000fa0
 8003954:	20000020 	.word	0x20000020
 8003958:	20000022 	.word	0x20000022
 800395c:	20000b54 	.word	0x20000b54
 8003960:	20000b56 	.word	0x20000b56
 8003964:	20000f88 	.word	0x20000f88
 8003968:	20000b58 	.word	0x20000b58
 800396c:	20000f90 	.word	0x20000f90
 8003970:	20000fa2 	.word	0x20000fa2
 8003974:	2000002e 	.word	0x2000002e
 8003978:	20000f9c 	.word	0x20000f9c
 800397c:	20000034 	.word	0x20000034
 8003980:	20000a3c 	.word	0x20000a3c
 8003984:	200002fe 	.word	0x200002fe

08003988 <maintain_processing_buffer>:

void maintain_processing_buffer(void) //存储数据超过512字节且处理数据也超过512字节后前移512字节
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
	uint8_t *address = processing_buffer;
 800398e:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <maintain_processing_buffer+0x54>)
 8003990:	607b      	str	r3, [r7, #4]
    if (wp - address > BUF_SIZE/2)
 8003992:	4b13      	ldr	r3, [pc, #76]	@ (80039e0 <maintain_processing_buffer+0x58>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800399e:	dd19      	ble.n	80039d4 <maintain_processing_buffer+0x4c>
    {
        uint16_t move_len = rp - processing_buffer;
 80039a0:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <maintain_processing_buffer+0x5c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	@ (80039dc <maintain_processing_buffer+0x54>)
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	807b      	strh	r3, [r7, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 80039aa:	b672      	cpsid	i
}
 80039ac:	bf00      	nop
        __disable_irq();
        memmove(processing_buffer, rp, move_len);
 80039ae:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <maintain_processing_buffer+0x5c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	4619      	mov	r1, r3
 80039b6:	4809      	ldr	r0, [pc, #36]	@ (80039dc <maintain_processing_buffer+0x54>)
 80039b8:	f00a ffbf 	bl	800e93a <memmove>
        wp = wp - move_len;
 80039bc:	4b08      	ldr	r3, [pc, #32]	@ (80039e0 <maintain_processing_buffer+0x58>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	887b      	ldrh	r3, [r7, #2]
 80039c2:	425b      	negs	r3, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	4a06      	ldr	r2, [pc, #24]	@ (80039e0 <maintain_processing_buffer+0x58>)
 80039c8:	6013      	str	r3, [r2, #0]
        rp = processing_buffer;
 80039ca:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <maintain_processing_buffer+0x5c>)
 80039cc:	4a03      	ldr	r2, [pc, #12]	@ (80039dc <maintain_processing_buffer+0x54>)
 80039ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039d0:	b662      	cpsie	i
}
 80039d2:	bf00      	nop
        __enable_irq();
    }
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000b68 	.word	0x20000b68
 80039e0:	20000018 	.word	0x20000018
 80039e4:	2000001c 	.word	0x2000001c

080039e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003a28 <HAL_UART_TxCpltCallback+0x40>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10f      	bne.n	8003a1a <HAL_UART_TxCpltCallback+0x32>
	{
		if(txstate == 1)
 80039fa:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <HAL_UART_TxCpltCallback+0x44>)
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_UART_TxCpltCallback+0x22>
			txstate = 0;
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_UART_TxCpltCallback+0x44>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	801a      	strh	r2, [r3, #0]
		if(samplingstate == 1)
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_UART_TxCpltCallback+0x48>)
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d102      	bne.n	8003a1a <HAL_UART_TxCpltCallback+0x32>
			samplingstate = 0;
 8003a14:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_UART_TxCpltCallback+0x48>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	801a      	strh	r2, [r3, #0]
	}
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	20000f9a 	.word	0x20000f9a
 8003a30:	20000f9c 	.word	0x20000f9c

08003a34 <CMD_HANDLE_ERROR>:

void CMD_HANDLE_ERROR(CMD_Status cmdstate) //错误码发送
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
	uint16_t head = HEAD;
 8003a3e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003a42:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = TAIL;
 8003a44:	f647 63fe 	movw	r3, #32510	@ 0x7efe
 8003a48:	81bb      	strh	r3, [r7, #12]
	tx_buffer[0] = (head >> 8) & 0xFF;
 8003a4a:	89fb      	ldrh	r3, [r7, #14]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b2a      	ldr	r3, [pc, #168]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003a54:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = head & 0xFF;
 8003a56:	89fb      	ldrh	r3, [r7, #14]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b28      	ldr	r3, [pc, #160]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003a5c:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = version;
 8003a5e:	4b28      	ldr	r3, [pc, #160]	@ (8003b00 <CMD_HANDLE_ERROR+0xcc>)
 8003a60:	781a      	ldrb	r2, [r3, #0]
 8003a62:	4b26      	ldr	r3, [pc, #152]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003a64:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = (receivercode >> 8) & 0xFF;
 8003a66:	4b27      	ldr	r3, [pc, #156]	@ (8003b04 <CMD_HANDLE_ERROR+0xd0>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	0a1b      	lsrs	r3, r3, #8
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	4b22      	ldr	r3, [pc, #136]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003a74:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = receivercode & 0xFF;
 8003a76:	4b23      	ldr	r3, [pc, #140]	@ (8003b04 <CMD_HANDLE_ERROR+0xd0>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003a80:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = 0xFF;
 8003a82:	4b1e      	ldr	r3, [pc, #120]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003a84:	22ff      	movs	r2, #255	@ 0xff
 8003a86:	715a      	strb	r2, [r3, #5]
	tx_buffer[6] = command & 0xFF;
 8003a88:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <CMD_HANDLE_ERROR+0xd4>)
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003a90:	719a      	strb	r2, [r3, #6]
	tx_buffer[7] = 0x02;
 8003a92:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003a94:	2202      	movs	r2, #2
 8003a96:	71da      	strb	r2, [r3, #7]
	tx_buffer[8] = retransmit;
 8003a98:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <CMD_HANDLE_ERROR+0xd8>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003aa0:	721a      	strb	r2, [r3, #8]
	tx_buffer[9] = (uint8_t)cmdstate;
 8003aa2:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	7253      	strb	r3, [r2, #9]
	uint16_t SUM = Checksum(&tx_buffer[2], 8);
 8003aa8:	2108      	movs	r1, #8
 8003aaa:	4819      	ldr	r0, [pc, #100]	@ (8003b10 <CMD_HANDLE_ERROR+0xdc>)
 8003aac:	f7ff f904 	bl	8002cb8 <Checksum>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	817b      	strh	r3, [r7, #10]
	tx_buffer[10] = (SUM >> 8) & 0xFF;
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003abe:	729a      	strb	r2, [r3, #10]
	tx_buffer[11] = SUM & 0xFF;
 8003ac0:	897b      	ldrh	r3, [r7, #10]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003ac6:	72da      	strb	r2, [r3, #11]
	tx_buffer[12] = (tail >> 8) & 0xFF;
 8003ac8:	89bb      	ldrh	r3, [r7, #12]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003ad2:	731a      	strb	r2, [r3, #12]
	tx_buffer[13] = tail & 0xFF;
 8003ad4:	89bb      	ldrh	r3, [r7, #12]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003ada:	735a      	strb	r2, [r3, #13]
	uint16_t length = 14;
 8003adc:	230e      	movs	r3, #14
 8003ade:	813b      	strh	r3, [r7, #8]
	txstate = 1;
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <CMD_HANDLE_ERROR+0xe0>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, tx_buffer, length);
 8003ae6:	893b      	ldrh	r3, [r7, #8]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4904      	ldr	r1, [pc, #16]	@ (8003afc <CMD_HANDLE_ERROR+0xc8>)
 8003aec:	480a      	ldr	r0, [pc, #40]	@ (8003b18 <CMD_HANDLE_ERROR+0xe4>)
 8003aee:	f003 fa63 	bl	8006fb8 <HAL_UART_Transmit_DMA>
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	2000027c 	.word	0x2000027c
 8003b00:	20000020 	.word	0x20000020
 8003b04:	20000022 	.word	0x20000022
 8003b08:	20000f68 	.word	0x20000f68
 8003b0c:	20000030 	.word	0x20000030
 8003b10:	2000027e 	.word	0x2000027e
 8003b14:	20000f9a 	.word	0x20000f9a
 8003b18:	20000a3c 	.word	0x20000a3c

08003b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b20:	f7fe fe38 	bl	8002794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b24:	480c      	ldr	r0, [pc, #48]	@ (8003b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b26:	490d      	ldr	r1, [pc, #52]	@ (8003b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b28:	4a0d      	ldr	r2, [pc, #52]	@ (8003b60 <LoopForever+0xe>)
  movs r3, #0
 8003b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b2c:	e002      	b.n	8003b34 <LoopCopyDataInit>

08003b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b32:	3304      	adds	r3, #4

08003b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b38:	d3f9      	bcc.n	8003b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003b68 <LoopForever+0x16>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b40:	e001      	b.n	8003b46 <LoopFillZerobss>

08003b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b44:	3204      	adds	r2, #4

08003b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b48:	d3fb      	bcc.n	8003b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b4a:	f00a ffa1 	bl	800ea90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b4e:	f7fd fb49 	bl	80011e4 <main>

08003b52 <LoopForever>:

LoopForever:
    b LoopForever
 8003b52:	e7fe      	b.n	8003b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b54:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b5c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003b60:	0803d048 	.word	0x0803d048
  ldr r2, =_sbss
 8003b64:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003b68:	20001154 	.word	0x20001154

08003b6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b6c:	e7fe      	b.n	8003b6c <ADC1_IRQHandler>

08003b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b78:	2003      	movs	r0, #3
 8003b7a:	f000 f961 	bl	8003e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b7e:	200f      	movs	r0, #15
 8003b80:	f000 f80e 	bl	8003ba0 <HAL_InitTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	71fb      	strb	r3, [r7, #7]
 8003b8e:	e001      	b.n	8003b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b90:	f7fe fc12 	bl	80023b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b94:	79fb      	ldrb	r3, [r7, #7]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003bac:	4b17      	ldr	r3, [pc, #92]	@ (8003c0c <HAL_InitTick+0x6c>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d023      	beq.n	8003bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bb4:	4b16      	ldr	r3, [pc, #88]	@ (8003c10 <HAL_InitTick+0x70>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <HAL_InitTick+0x6c>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f96d 	bl	8003eaa <HAL_SYSTICK_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b0f      	cmp	r3, #15
 8003bda:	d809      	bhi.n	8003bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bdc:	2200      	movs	r2, #0
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	f000 f937 	bl	8003e56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003be8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c14 <HAL_InitTick+0x74>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e007      	b.n	8003c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e004      	b.n	8003c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
 8003bfa:	e001      	b.n	8003c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	2000003c 	.word	0x2000003c
 8003c10:	2000000c 	.word	0x2000000c
 8003c14:	20000038 	.word	0x20000038

08003c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_IncTick+0x20>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_IncTick+0x24>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	4a04      	ldr	r2, [pc, #16]	@ (8003c3c <HAL_IncTick+0x24>)
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	2000003c 	.word	0x2000003c
 8003c3c:	20000fc8 	.word	0x20000fc8

08003c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return uwTick;
 8003c44:	4b03      	ldr	r3, [pc, #12]	@ (8003c54 <HAL_GetTick+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000fc8 	.word	0x20000fc8

08003c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c60:	f7ff ffee 	bl	8003c40 <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d005      	beq.n	8003c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c72:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <HAL_Delay+0x44>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c7e:	bf00      	nop
 8003c80:	f7ff ffde 	bl	8003c40 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d8f7      	bhi.n	8003c80 <HAL_Delay+0x28>
  {
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2000003c 	.word	0x2000003c

08003ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60d3      	str	r3, [r2, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cec:	4b04      	ldr	r3, [pc, #16]	@ (8003d00 <__NVIC_GetPriorityGrouping+0x18>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 0307 	and.w	r3, r3, #7
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db0b      	blt.n	8003d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	4907      	ldr	r1, [pc, #28]	@ (8003d3c <__NVIC_EnableIRQ+0x38>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2001      	movs	r0, #1
 8003d26:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000e100 	.word	0xe000e100

08003d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	db0a      	blt.n	8003d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	490c      	ldr	r1, [pc, #48]	@ (8003d8c <__NVIC_SetPriority+0x4c>)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	440b      	add	r3, r1
 8003d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d68:	e00a      	b.n	8003d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4908      	ldr	r1, [pc, #32]	@ (8003d90 <__NVIC_SetPriority+0x50>)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	3b04      	subs	r3, #4
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	761a      	strb	r2, [r3, #24]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000e100 	.word	0xe000e100
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	bf28      	it	cs
 8003db2:	2304      	movcs	r3, #4
 8003db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d902      	bls.n	8003dc4 <NVIC_EncodePriority+0x30>
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3b03      	subs	r3, #3
 8003dc2:	e000      	b.n	8003dc6 <NVIC_EncodePriority+0x32>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	4313      	orrs	r3, r2
         );
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	@ 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e0c:	d301      	bcc.n	8003e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00f      	b.n	8003e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e12:	4a0a      	ldr	r2, [pc, #40]	@ (8003e3c <SysTick_Config+0x40>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1a:	210f      	movs	r1, #15
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	f7ff ff8e 	bl	8003d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e24:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <SysTick_Config+0x40>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2a:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <SysTick_Config+0x40>)
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	e000e010 	.word	0xe000e010

08003e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff29 	bl	8003ca0 <__NVIC_SetPriorityGrouping>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e68:	f7ff ff3e 	bl	8003ce8 <__NVIC_GetPriorityGrouping>
 8003e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	6978      	ldr	r0, [r7, #20]
 8003e74:	f7ff ff8e 	bl	8003d94 <NVIC_EncodePriority>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff5d 	bl	8003d40 <__NVIC_SetPriority>
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff31 	bl	8003d04 <__NVIC_EnableIRQ>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ffa2 	bl	8003dfc <SysTick_Config>
 8003eb8:	4603      	mov	r3, r0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003ec6:	f000 f802 	bl	8003ece <HAL_SYSTICK_Callback>
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e098      	b.n	8004020 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800402c <HAL_DMA_Init+0x150>)
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d80f      	bhi.n	8003f1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b4b      	ldr	r3, [pc, #300]	@ (8004030 <HAL_DMA_Init+0x154>)
 8003f02:	4413      	add	r3, r2
 8003f04:	4a4b      	ldr	r2, [pc, #300]	@ (8004034 <HAL_DMA_Init+0x158>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	009a      	lsls	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a48      	ldr	r2, [pc, #288]	@ (8004038 <HAL_DMA_Init+0x15c>)
 8003f16:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f18:	e00e      	b.n	8003f38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b46      	ldr	r3, [pc, #280]	@ (800403c <HAL_DMA_Init+0x160>)
 8003f22:	4413      	add	r3, r2
 8003f24:	4a43      	ldr	r2, [pc, #268]	@ (8004034 <HAL_DMA_Init+0x158>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	009a      	lsls	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a42      	ldr	r2, [pc, #264]	@ (8004040 <HAL_DMA_Init+0x164>)
 8003f36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f92:	d039      	beq.n	8004008 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	4a27      	ldr	r2, [pc, #156]	@ (8004038 <HAL_DMA_Init+0x15c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d11a      	bne.n	8003fd4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f9e:	4b29      	ldr	r3, [pc, #164]	@ (8004044 <HAL_DMA_Init+0x168>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f003 031c 	and.w	r3, r3, #28
 8003faa:	210f      	movs	r1, #15
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	4924      	ldr	r1, [pc, #144]	@ (8004044 <HAL_DMA_Init+0x168>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fb8:	4b22      	ldr	r3, [pc, #136]	@ (8004044 <HAL_DMA_Init+0x168>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	f003 031c 	and.w	r3, r3, #28
 8003fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fcc:	491d      	ldr	r1, [pc, #116]	@ (8004044 <HAL_DMA_Init+0x168>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]
 8003fd2:	e019      	b.n	8004008 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004048 <HAL_DMA_Init+0x16c>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fdc:	f003 031c 	and.w	r3, r3, #28
 8003fe0:	210f      	movs	r1, #15
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	4917      	ldr	r1, [pc, #92]	@ (8004048 <HAL_DMA_Init+0x16c>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fee:	4b16      	ldr	r3, [pc, #88]	@ (8004048 <HAL_DMA_Init+0x16c>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	f003 031c 	and.w	r3, r3, #28
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	4911      	ldr	r1, [pc, #68]	@ (8004048 <HAL_DMA_Init+0x16c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40020407 	.word	0x40020407
 8004030:	bffdfff8 	.word	0xbffdfff8
 8004034:	cccccccd 	.word	0xcccccccd
 8004038:	40020000 	.word	0x40020000
 800403c:	bffdfbf8 	.word	0xbffdfbf8
 8004040:	40020400 	.word	0x40020400
 8004044:	400200a8 	.word	0x400200a8
 8004048:	400204a8 	.word	0x400204a8

0800404c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_DMA_Start_IT+0x20>
 8004068:	2302      	movs	r3, #2
 800406a:	e04b      	b.n	8004104 <HAL_DMA_Start_IT+0xb8>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d13a      	bne.n	80040f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f96b 	bl	8004380 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 020e 	orr.w	r2, r2, #14
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e00f      	b.n	80040e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0204 	bic.w	r2, r2, #4
 80040d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 020a 	orr.w	r2, r2, #10
 80040e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e005      	b.n	8004102 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
 8004100:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004102:	7dfb      	ldrb	r3, [r7, #23]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d008      	beq.n	8004136 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2204      	movs	r2, #4
 8004128:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e022      	b.n	800417c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 020e 	bic.w	r2, r2, #14
 8004144:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	f003 021c 	and.w	r2, r3, #28
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d005      	beq.n	80041ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2204      	movs	r2, #4
 80041a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	e029      	b.n	8004200 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 020e 	bic.w	r2, r2, #14
 80041ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d0:	f003 021c 	and.w	r2, r3, #28
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f202 	lsl.w	r2, r1, r2
 80041de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
    }
  }
  return status;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f003 031c 	and.w	r3, r3, #28
 800422a:	2204      	movs	r2, #4
 800422c:	409a      	lsls	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d026      	beq.n	8004284 <HAL_DMA_IRQHandler+0x7a>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d021      	beq.n	8004284 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d107      	bne.n	800425e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0204 	bic.w	r2, r2, #4
 800425c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f003 021c 	and.w	r2, r3, #28
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	2104      	movs	r1, #4
 800426c:	fa01 f202 	lsl.w	r2, r1, r2
 8004270:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	2b00      	cmp	r3, #0
 8004278:	d071      	beq.n	800435e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004282:	e06c      	b.n	800435e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004288:	f003 031c 	and.w	r3, r3, #28
 800428c:	2202      	movs	r2, #2
 800428e:	409a      	lsls	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d02e      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xec>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d029      	beq.n	80042f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 020a 	bic.w	r2, r2, #10
 80042be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042cc:	f003 021c 	and.w	r2, r3, #28
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	2102      	movs	r1, #2
 80042d6:	fa01 f202 	lsl.w	r2, r1, r2
 80042da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d038      	beq.n	800435e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042f4:	e033      	b.n	800435e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f003 031c 	and.w	r3, r3, #28
 80042fe:	2208      	movs	r2, #8
 8004300:	409a      	lsls	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02a      	beq.n	8004360 <HAL_DMA_IRQHandler+0x156>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d025      	beq.n	8004360 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 020e 	bic.w	r2, r2, #14
 8004322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004328:	f003 021c 	and.w	r2, r3, #28
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f202 	lsl.w	r2, r1, r2
 8004336:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004352:	2b00      	cmp	r3, #0
 8004354:	d004      	beq.n	8004360 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800435e:	bf00      	nop
 8004360:	bf00      	nop
}
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f003 021c 	and.w	r2, r3, #28
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f202 	lsl.w	r2, r1, r2
 80043a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d108      	bne.n	80043c4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043c2:	e007      	b.n	80043d4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	60da      	str	r2, [r3, #12]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ee:	e154      	b.n	800469a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2101      	movs	r1, #1
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	4013      	ands	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8146 	beq.w	8004694 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d005      	beq.n	8004420 <HAL_GPIO_Init+0x40>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d130      	bne.n	8004482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004456:	2201      	movs	r2, #1
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4013      	ands	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f003 0201 	and.w	r2, r3, #1
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b03      	cmp	r3, #3
 800448c:	d017      	beq.n	80044be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	2203      	movs	r2, #3
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4013      	ands	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d123      	bne.n	8004512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	08da      	lsrs	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3208      	adds	r2, #8
 80044d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	220f      	movs	r2, #15
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	08da      	lsrs	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3208      	adds	r2, #8
 800450c:	6939      	ldr	r1, [r7, #16]
 800450e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	2203      	movs	r2, #3
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4013      	ands	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0203 	and.w	r2, r3, #3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80a0 	beq.w	8004694 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004554:	4b58      	ldr	r3, [pc, #352]	@ (80046b8 <HAL_GPIO_Init+0x2d8>)
 8004556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004558:	4a57      	ldr	r2, [pc, #348]	@ (80046b8 <HAL_GPIO_Init+0x2d8>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004560:	4b55      	ldr	r3, [pc, #340]	@ (80046b8 <HAL_GPIO_Init+0x2d8>)
 8004562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800456c:	4a53      	ldr	r2, [pc, #332]	@ (80046bc <HAL_GPIO_Init+0x2dc>)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	089b      	lsrs	r3, r3, #2
 8004572:	3302      	adds	r3, #2
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	220f      	movs	r2, #15
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004596:	d019      	beq.n	80045cc <HAL_GPIO_Init+0x1ec>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a49      	ldr	r2, [pc, #292]	@ (80046c0 <HAL_GPIO_Init+0x2e0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <HAL_GPIO_Init+0x1e8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a48      	ldr	r2, [pc, #288]	@ (80046c4 <HAL_GPIO_Init+0x2e4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00d      	beq.n	80045c4 <HAL_GPIO_Init+0x1e4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a47      	ldr	r2, [pc, #284]	@ (80046c8 <HAL_GPIO_Init+0x2e8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d007      	beq.n	80045c0 <HAL_GPIO_Init+0x1e0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a46      	ldr	r2, [pc, #280]	@ (80046cc <HAL_GPIO_Init+0x2ec>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_GPIO_Init+0x1dc>
 80045b8:	2304      	movs	r3, #4
 80045ba:	e008      	b.n	80045ce <HAL_GPIO_Init+0x1ee>
 80045bc:	2307      	movs	r3, #7
 80045be:	e006      	b.n	80045ce <HAL_GPIO_Init+0x1ee>
 80045c0:	2303      	movs	r3, #3
 80045c2:	e004      	b.n	80045ce <HAL_GPIO_Init+0x1ee>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e002      	b.n	80045ce <HAL_GPIO_Init+0x1ee>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <HAL_GPIO_Init+0x1ee>
 80045cc:	2300      	movs	r3, #0
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	f002 0203 	and.w	r2, r2, #3
 80045d4:	0092      	lsls	r2, r2, #2
 80045d6:	4093      	lsls	r3, r2
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045de:	4937      	ldr	r1, [pc, #220]	@ (80046bc <HAL_GPIO_Init+0x2dc>)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	3302      	adds	r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ec:	4b38      	ldr	r3, [pc, #224]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004610:	4a2f      	ldr	r2, [pc, #188]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004616:	4b2e      	ldr	r3, [pc, #184]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	43db      	mvns	r3, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800463a:	4a25      	ldr	r2, [pc, #148]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004640:	4b23      	ldr	r3, [pc, #140]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	43db      	mvns	r3, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004664:	4a1a      	ldr	r2, [pc, #104]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800466a:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	43db      	mvns	r3, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4013      	ands	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800468e:	4a10      	ldr	r2, [pc, #64]	@ (80046d0 <HAL_GPIO_Init+0x2f0>)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	3301      	adds	r3, #1
 8004698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f47f aea3 	bne.w	80043f0 <HAL_GPIO_Init+0x10>
  }
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40010000 	.word	0x40010000
 80046c0:	48000400 	.word	0x48000400
 80046c4:	48000800 	.word	0x48000800
 80046c8:	48000c00 	.word	0x48000c00
 80046cc:	48001000 	.word	0x48001000
 80046d0:	40010400 	.word	0x40010400

080046d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e001      	b.n	80046f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	807b      	strh	r3, [r7, #2]
 8004710:	4613      	mov	r3, r2
 8004712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004714:	787b      	ldrb	r3, [r7, #1]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004720:	e002      	b.n	8004728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004722:	887a      	ldrh	r2, [r7, #2]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004746:	887a      	ldrh	r2, [r7, #2]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	041a      	lsls	r2, r3, #16
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	43d9      	mvns	r1, r3
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	400b      	ands	r3, r1
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <HAL_PWREx_GetVoltageRange+0x18>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40007000 	.word	0x40007000

08004784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004792:	d130      	bne.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004794:	4b23      	ldr	r3, [pc, #140]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800479c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a0:	d038      	beq.n	8004814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a2:	4b20      	ldr	r3, [pc, #128]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2232      	movs	r2, #50	@ 0x32
 80047b8:	fb02 f303 	mul.w	r3, r2, r3
 80047bc:	4a1b      	ldr	r2, [pc, #108]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0c9b      	lsrs	r3, r3, #18
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047c8:	e002      	b.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d0:	4b14      	ldr	r3, [pc, #80]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047dc:	d102      	bne.n	80047e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f2      	bne.n	80047ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f0:	d110      	bne.n	8004814 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e00f      	b.n	8004816 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004802:	d007      	beq.n	8004814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004804:	4b07      	ldr	r3, [pc, #28]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800480c:	4a05      	ldr	r2, [pc, #20]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800480e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004812:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40007000 	.word	0x40007000
 8004828:	2000000c 	.word	0x2000000c
 800482c:	431bde83 	.word	0x431bde83

08004830 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f000 bc02 	b.w	8005048 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004844:	4b96      	ldr	r3, [pc, #600]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800484e:	4b94      	ldr	r3, [pc, #592]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80e4 	beq.w	8004a2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <HAL_RCC_OscConfig+0x4c>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b0c      	cmp	r3, #12
 8004870:	f040 808b 	bne.w	800498a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b01      	cmp	r3, #1
 8004878:	f040 8087 	bne.w	800498a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800487c:	4b88      	ldr	r3, [pc, #544]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_OscConfig+0x64>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e3d9      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1a      	ldr	r2, [r3, #32]
 8004898:	4b81      	ldr	r3, [pc, #516]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <HAL_RCC_OscConfig+0x7e>
 80048a4:	4b7e      	ldr	r3, [pc, #504]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048ac:	e005      	b.n	80048ba <HAL_RCC_OscConfig+0x8a>
 80048ae:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d223      	bcs.n	8004906 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fd8c 	bl	80053e0 <RCC_SetFlashLatencyFromMSIRange>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e3ba      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048d2:	4b73      	ldr	r3, [pc, #460]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a72      	ldr	r2, [pc, #456]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80048d8:	f043 0308 	orr.w	r3, r3, #8
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b70      	ldr	r3, [pc, #448]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	496d      	ldr	r1, [pc, #436]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048f0:	4b6b      	ldr	r3, [pc, #428]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	4968      	ldr	r1, [pc, #416]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]
 8004904:	e025      	b.n	8004952 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004906:	4b66      	ldr	r3, [pc, #408]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a65      	ldr	r2, [pc, #404]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 800490c:	f043 0308 	orr.w	r3, r3, #8
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b63      	ldr	r3, [pc, #396]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	4960      	ldr	r1, [pc, #384]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004924:	4b5e      	ldr	r3, [pc, #376]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	495b      	ldr	r1, [pc, #364]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd4c 	bl	80053e0 <RCC_SetFlashLatencyFromMSIRange>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e37a      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004952:	f000 fc81 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8004956:	4602      	mov	r2, r0
 8004958:	4b51      	ldr	r3, [pc, #324]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	4950      	ldr	r1, [pc, #320]	@ (8004aa4 <HAL_RCC_OscConfig+0x274>)
 8004964:	5ccb      	ldrb	r3, [r1, r3]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	fa22 f303 	lsr.w	r3, r2, r3
 800496e:	4a4e      	ldr	r2, [pc, #312]	@ (8004aa8 <HAL_RCC_OscConfig+0x278>)
 8004970:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004972:	4b4e      	ldr	r3, [pc, #312]	@ (8004aac <HAL_RCC_OscConfig+0x27c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff f912 	bl	8003ba0 <HAL_InitTick>
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d052      	beq.n	8004a2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	e35e      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d032      	beq.n	80049f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004992:	4b43      	ldr	r3, [pc, #268]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a42      	ldr	r2, [pc, #264]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800499e:	f7ff f94f 	bl	8003c40 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049a6:	f7ff f94b 	bl	8003c40 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e347      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049b8:	4b39      	ldr	r3, [pc, #228]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c4:	4b36      	ldr	r3, [pc, #216]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a35      	ldr	r2, [pc, #212]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049ca:	f043 0308 	orr.w	r3, r3, #8
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b33      	ldr	r3, [pc, #204]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	4930      	ldr	r1, [pc, #192]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049e2:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	492b      	ldr	r1, [pc, #172]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	604b      	str	r3, [r1, #4]
 80049f6:	e01a      	b.n	8004a2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049f8:	4b29      	ldr	r3, [pc, #164]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a28      	ldr	r2, [pc, #160]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a04:	f7ff f91c 	bl	8003c40 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a0c:	f7ff f918 	bl	8003c40 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e314      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a1e:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x1dc>
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d073      	beq.n	8004b22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_OscConfig+0x21c>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d10e      	bne.n	8004a64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d063      	beq.n	8004b20 <HAL_RCC_OscConfig+0x2f0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d15f      	bne.n	8004b20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e2f1      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a6c:	d106      	bne.n	8004a7c <HAL_RCC_OscConfig+0x24c>
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e025      	b.n	8004ac8 <HAL_RCC_OscConfig+0x298>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a84:	d114      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x280>
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a05      	ldr	r2, [pc, #20]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a02      	ldr	r2, [pc, #8]	@ (8004aa0 <HAL_RCC_OscConfig+0x270>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e013      	b.n	8004ac8 <HAL_RCC_OscConfig+0x298>
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	08012004 	.word	0x08012004
 8004aa8:	2000000c 	.word	0x2000000c
 8004aac:	20000038 	.word	0x20000038
 8004ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a9f      	ldr	r2, [pc, #636]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	4b9d      	ldr	r3, [pc, #628]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a9c      	ldr	r2, [pc, #624]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d013      	beq.n	8004af8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7ff f8b6 	bl	8003c40 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad8:	f7ff f8b2 	bl	8003c40 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	@ 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e2ae      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aea:	4b92      	ldr	r3, [pc, #584]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x2a8>
 8004af6:	e014      	b.n	8004b22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7ff f8a2 	bl	8003c40 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b00:	f7ff f89e 	bl	8003c40 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	@ 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e29a      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b12:	4b88      	ldr	r3, [pc, #544]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x2d0>
 8004b1e:	e000      	b.n	8004b22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d060      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_OscConfig+0x310>
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d119      	bne.n	8004b6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d116      	bne.n	8004b6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b40:	4b7c      	ldr	r3, [pc, #496]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_OscConfig+0x328>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e277      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b58:	4b76      	ldr	r3, [pc, #472]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	4973      	ldr	r1, [pc, #460]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b6c:	e040      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d023      	beq.n	8004bbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b76:	4b6f      	ldr	r3, [pc, #444]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b82:	f7ff f85d 	bl	8003c40 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8a:	f7ff f859 	bl	8003c40 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e255      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b9c:	4b65      	ldr	r3, [pc, #404]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b62      	ldr	r3, [pc, #392]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	495f      	ldr	r1, [pc, #380]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
 8004bbc:	e018      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7ff f839 	bl	8003c40 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7ff f835 	bl	8003c40 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e231      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004be4:	4b53      	ldr	r3, [pc, #332]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d03c      	beq.n	8004c76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01c      	beq.n	8004c3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c04:	4b4b      	ldr	r3, [pc, #300]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7ff f814 	bl	8003c40 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1c:	f7ff f810 	bl	8003c40 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e20c      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c2e:	4b41      	ldr	r3, [pc, #260]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ef      	beq.n	8004c1c <HAL_RCC_OscConfig+0x3ec>
 8004c3c:	e01b      	b.n	8004c76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c44:	4a3b      	ldr	r2, [pc, #236]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4e:	f7fe fff7 	bl	8003c40 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c56:	f7fe fff3 	bl	8003c40 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e1ef      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c68:	4b32      	ldr	r3, [pc, #200]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1ef      	bne.n	8004c56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80a6 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c84:	2300      	movs	r3, #0
 8004c86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c88:	4b2a      	ldr	r3, [pc, #168]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10d      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c94:	4b27      	ldr	r3, [pc, #156]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	4a26      	ldr	r2, [pc, #152]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ca0:	4b24      	ldr	r3, [pc, #144]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cac:	2301      	movs	r3, #1
 8004cae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb0:	4b21      	ldr	r3, [pc, #132]	@ (8004d38 <HAL_RCC_OscConfig+0x508>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d118      	bne.n	8004cee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004d38 <HAL_RCC_OscConfig+0x508>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d38 <HAL_RCC_OscConfig+0x508>)
 8004cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc8:	f7fe ffba 	bl	8003c40 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd0:	f7fe ffb6 	bl	8003c40 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1b2      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce2:	4b15      	ldr	r3, [pc, #84]	@ (8004d38 <HAL_RCC_OscConfig+0x508>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d108      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4d8>
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d06:	e029      	b.n	8004d5c <HAL_RCC_OscConfig+0x52c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b05      	cmp	r3, #5
 8004d0e:	d115      	bne.n	8004d3c <HAL_RCC_OscConfig+0x50c>
 8004d10:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	4a07      	ldr	r2, [pc, #28]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d20:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	4a03      	ldr	r2, [pc, #12]	@ (8004d34 <HAL_RCC_OscConfig+0x504>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d30:	e014      	b.n	8004d5c <HAL_RCC_OscConfig+0x52c>
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	4b9a      	ldr	r3, [pc, #616]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	4a99      	ldr	r2, [pc, #612]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d4c:	4b96      	ldr	r3, [pc, #600]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d52:	4a95      	ldr	r2, [pc, #596]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d016      	beq.n	8004d92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fe ff6c 	bl	8003c40 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6c:	f7fe ff68 	bl	8003c40 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e162      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d82:	4b89      	ldr	r3, [pc, #548]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ed      	beq.n	8004d6c <HAL_RCC_OscConfig+0x53c>
 8004d90:	e015      	b.n	8004dbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7fe ff55 	bl	8003c40 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d98:	e00a      	b.n	8004db0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9a:	f7fe ff51 	bl	8003c40 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e14b      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db0:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ed      	bne.n	8004d9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dbe:	7ffb      	ldrb	r3, [r7, #31]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc4:	4b78      	ldr	r3, [pc, #480]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc8:	4a77      	ldr	r2, [pc, #476]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d03c      	beq.n	8004e56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01c      	beq.n	8004e1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004de4:	4b70      	ldr	r3, [pc, #448]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004de6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dea:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fe ff24 	bl	8003c40 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dfc:	f7fe ff20 	bl	8003c40 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e11c      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e0e:	4b66      	ldr	r3, [pc, #408]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCC_OscConfig+0x5cc>
 8004e1c:	e01b      	b.n	8004e56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e1e:	4b62      	ldr	r3, [pc, #392]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e24:	4a60      	ldr	r2, [pc, #384]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fe ff07 	bl	8003c40 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e36:	f7fe ff03 	bl	8003c40 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e0ff      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e48:	4b57      	ldr	r3, [pc, #348]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ef      	bne.n	8004e36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80f3 	beq.w	8005046 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	f040 80c9 	bne.w	8004ffc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 0203 	and.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d12c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d123      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eaa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d113      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d06b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b0c      	cmp	r3, #12
 8004edc:	d062      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ede:	4b32      	ldr	r3, [pc, #200]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0ac      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eee:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004ef4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004efa:	f7fe fea1 	bl	8003c40 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f02:	f7fe fe9d 	bl	8003c40 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e099      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f14:	4b24      	ldr	r3, [pc, #144]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f20:	4b21      	ldr	r3, [pc, #132]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b21      	ldr	r3, [pc, #132]	@ (8004fac <HAL_RCC_OscConfig+0x77c>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f30:	3a01      	subs	r2, #1
 8004f32:	0112      	lsls	r2, r2, #4
 8004f34:	4311      	orrs	r1, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f3a:	0212      	lsls	r2, r2, #8
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f42:	0852      	lsrs	r2, r2, #1
 8004f44:	3a01      	subs	r2, #1
 8004f46:	0552      	lsls	r2, r2, #21
 8004f48:	4311      	orrs	r1, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f4e:	0852      	lsrs	r2, r2, #1
 8004f50:	3a01      	subs	r2, #1
 8004f52:	0652      	lsls	r2, r2, #25
 8004f54:	4311      	orrs	r1, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f5a:	06d2      	lsls	r2, r2, #27
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	4912      	ldr	r1, [pc, #72]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f64:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a0f      	ldr	r2, [pc, #60]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f70:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f7c:	f7fe fe60 	bl	8003c40 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fe fe5c 	bl	8003c40 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e058      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f96:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <HAL_RCC_OscConfig+0x778>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa2:	e050      	b.n	8005046 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e04f      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d144      	bne.n	8005046 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fbc:	4b24      	ldr	r3, [pc, #144]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a23      	ldr	r2, [pc, #140]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8004fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc8:	4b21      	ldr	r3, [pc, #132]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8004fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fd4:	f7fe fe34 	bl	8003c40 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fe fe30 	bl	8003c40 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e02c      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fee:	4b18      	ldr	r3, [pc, #96]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x7ac>
 8004ffa:	e024      	b.n	8005046 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d01f      	beq.n	8005042 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b13      	ldr	r3, [pc, #76]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a12      	ldr	r2, [pc, #72]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8005008:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fe fe17 	bl	8003c40 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005016:	f7fe fe13 	bl	8003c40 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e00f      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005028:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f0      	bne.n	8005016 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005034:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	4905      	ldr	r1, [pc, #20]	@ (8005050 <HAL_RCC_OscConfig+0x820>)
 800503a:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <HAL_RCC_OscConfig+0x824>)
 800503c:	4013      	ands	r3, r2
 800503e:	60cb      	str	r3, [r1, #12]
 8005040:	e001      	b.n	8005046 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	feeefffc 	.word	0xfeeefffc

08005058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0e7      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800506c:	4b75      	ldr	r3, [pc, #468]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d910      	bls.n	800509c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b72      	ldr	r3, [pc, #456]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 0207 	bic.w	r2, r3, #7
 8005082:	4970      	ldr	r1, [pc, #448]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b6e      	ldr	r3, [pc, #440]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0cf      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	4b66      	ldr	r3, [pc, #408]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d908      	bls.n	80050ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b63      	ldr	r3, [pc, #396]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4960      	ldr	r1, [pc, #384]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d04c      	beq.n	8005170 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	4b5a      	ldr	r3, [pc, #360]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d121      	bne.n	800512e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0a6      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f6:	4b54      	ldr	r3, [pc, #336]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e09a      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800510e:	4b4e      	ldr	r3, [pc, #312]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e08e      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800511e:	4b4a      	ldr	r3, [pc, #296]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e086      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800512e:	4b46      	ldr	r3, [pc, #280]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4943      	ldr	r1, [pc, #268]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005140:	f7fe fd7e 	bl	8003c40 <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fe fd7a 	bl	8003c40 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e06e      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b3a      	ldr	r3, [pc, #232]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	4b31      	ldr	r3, [pc, #196]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005188:	429a      	cmp	r2, r3
 800518a:	d208      	bcs.n	800519e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800518c:	4b2e      	ldr	r3, [pc, #184]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	492b      	ldr	r1, [pc, #172]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800519e:	4b29      	ldr	r3, [pc, #164]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d210      	bcs.n	80051ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ac:	4b25      	ldr	r3, [pc, #148]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 0207 	bic.w	r2, r3, #7
 80051b4:	4923      	ldr	r1, [pc, #140]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051bc:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <HAL_RCC_ClockConfig+0x1ec>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e036      	b.n	800523c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051da:	4b1b      	ldr	r3, [pc, #108]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	4918      	ldr	r1, [pc, #96]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f8:	4b13      	ldr	r3, [pc, #76]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4910      	ldr	r1, [pc, #64]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800520c:	f000 f824 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <HAL_RCC_ClockConfig+0x1f0>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	490b      	ldr	r1, [pc, #44]	@ (800524c <HAL_RCC_ClockConfig+0x1f4>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	4a09      	ldr	r2, [pc, #36]	@ (8005250 <HAL_RCC_ClockConfig+0x1f8>)
 800522a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCC_ClockConfig+0x1fc>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fcb5 	bl	8003ba0 <HAL_InitTick>
 8005236:	4603      	mov	r3, r0
 8005238:	72fb      	strb	r3, [r7, #11]

  return status;
 800523a:	7afb      	ldrb	r3, [r7, #11]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40022000 	.word	0x40022000
 8005248:	40021000 	.word	0x40021000
 800524c:	08012004 	.word	0x08012004
 8005250:	2000000c 	.word	0x2000000c
 8005254:	20000038 	.word	0x20000038

08005258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b089      	sub	sp, #36	@ 0x24
 800525c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005266:	4b3e      	ldr	r3, [pc, #248]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005270:	4b3b      	ldr	r3, [pc, #236]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x34>
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d121      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d11e      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800528c:	4b34      	ldr	r3, [pc, #208]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005298:	4b31      	ldr	r3, [pc, #196]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 800529a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	e005      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005364 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10d      	bne.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d102      	bne.n	80052d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052d0:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x110>)
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e004      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052dc:	4b23      	ldr	r3, [pc, #140]	@ (800536c <HAL_RCC_GetSysClockFreq+0x114>)
 80052de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d134      	bne.n	8005350 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d003      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0xa6>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d003      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0xac>
 80052fc:	e005      	b.n	800530a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x110>)
 8005300:	617b      	str	r3, [r7, #20]
      break;
 8005302:	e005      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005304:	4b19      	ldr	r3, [pc, #100]	@ (800536c <HAL_RCC_GetSysClockFreq+0x114>)
 8005306:	617b      	str	r3, [r7, #20]
      break;
 8005308:	e002      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	617b      	str	r3, [r7, #20]
      break;
 800530e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005310:	4b13      	ldr	r3, [pc, #76]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	3301      	adds	r3, #1
 800531c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800531e:	4b10      	ldr	r3, [pc, #64]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	fb03 f202 	mul.w	r2, r3, r2
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005336:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x108>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	0e5b      	lsrs	r3, r3, #25
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	3301      	adds	r3, #1
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005350:	69bb      	ldr	r3, [r7, #24]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3724      	adds	r7, #36	@ 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
 8005364:	0801201c 	.word	0x0801201c
 8005368:	00f42400 	.word	0x00f42400
 800536c:	007a1200 	.word	0x007a1200

08005370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005374:	4b03      	ldr	r3, [pc, #12]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x14>)
 8005376:	681b      	ldr	r3, [r3, #0]
}
 8005378:	4618      	mov	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	2000000c 	.word	0x2000000c

08005388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800538c:	f7ff fff0 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4904      	ldr	r1, [pc, #16]	@ (80053b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000
 80053b0:	08012014 	.word	0x08012014

080053b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053b8:	f7ff ffda 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	0adb      	lsrs	r3, r3, #11
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4904      	ldr	r1, [pc, #16]	@ (80053dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40021000 	.word	0x40021000
 80053dc:	08012014 	.word	0x08012014

080053e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053f8:	f7ff f9b6 	bl	8004768 <HAL_PWREx_GetVoltageRange>
 80053fc:	6178      	str	r0, [r7, #20]
 80053fe:	e014      	b.n	800542a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005400:	4b25      	ldr	r3, [pc, #148]	@ (8005498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	4a24      	ldr	r2, [pc, #144]	@ (8005498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800540a:	6593      	str	r3, [r2, #88]	@ 0x58
 800540c:	4b22      	ldr	r3, [pc, #136]	@ (8005498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800540e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005418:	f7ff f9a6 	bl	8004768 <HAL_PWREx_GetVoltageRange>
 800541c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800541e:	4b1e      	ldr	r3, [pc, #120]	@ (8005498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005422:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005428:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005430:	d10b      	bne.n	800544a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b80      	cmp	r3, #128	@ 0x80
 8005436:	d919      	bls.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2ba0      	cmp	r3, #160	@ 0xa0
 800543c:	d902      	bls.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800543e:	2302      	movs	r3, #2
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	e013      	b.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005444:	2301      	movs	r3, #1
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	e010      	b.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b80      	cmp	r3, #128	@ 0x80
 800544e:	d902      	bls.n	8005456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005450:	2303      	movs	r3, #3
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	e00a      	b.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b80      	cmp	r3, #128	@ 0x80
 800545a:	d102      	bne.n	8005462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800545c:	2302      	movs	r3, #2
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	e004      	b.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b70      	cmp	r3, #112	@ 0x70
 8005466:	d101      	bne.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005468:	2301      	movs	r3, #1
 800546a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800546c:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f023 0207 	bic.w	r2, r3, #7
 8005474:	4909      	ldr	r1, [pc, #36]	@ (800549c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800547c:	4b07      	ldr	r3, [pc, #28]	@ (800549c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	429a      	cmp	r2, r3
 8005488:	d001      	beq.n	800548e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000
 800549c:	40022000 	.word	0x40022000

080054a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054a8:	2300      	movs	r3, #0
 80054aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054ac:	2300      	movs	r3, #0
 80054ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d031      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054c4:	d01a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80054c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054ca:	d814      	bhi.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054d4:	d10f      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80054d6:	4b5d      	ldr	r3, [pc, #372]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4a5c      	ldr	r2, [pc, #368]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054e2:	e00c      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3304      	adds	r3, #4
 80054e8:	2100      	movs	r1, #0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fa22 	bl	8005934 <RCCEx_PLLSAI1_Config>
 80054f0:	4603      	mov	r3, r0
 80054f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054f4:	e003      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	74fb      	strb	r3, [r7, #19]
      break;
 80054fa:	e000      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80054fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005504:	4b51      	ldr	r3, [pc, #324]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005512:	494e      	ldr	r1, [pc, #312]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800551a:	e001      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 809e 	beq.w	800566a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005532:	4b46      	ldr	r3, [pc, #280]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005548:	4b40      	ldr	r3, [pc, #256]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	4a3f      	ldr	r2, [pc, #252]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005552:	6593      	str	r3, [r2, #88]	@ 0x58
 8005554:	4b3d      	ldr	r3, [pc, #244]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005560:	2301      	movs	r3, #1
 8005562:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005564:	4b3a      	ldr	r3, [pc, #232]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a39      	ldr	r2, [pc, #228]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800556a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800556e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005570:	f7fe fb66 	bl	8003c40 <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005576:	e009      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005578:	f7fe fb62 	bl	8003c40 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d902      	bls.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	74fb      	strb	r3, [r7, #19]
        break;
 800558a:	e005      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800558c:	4b30      	ldr	r3, [pc, #192]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ef      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d15a      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800559e:	4b2b      	ldr	r3, [pc, #172]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01e      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d019      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ba:	4b24      	ldr	r3, [pc, #144]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055c6:	4b21      	ldr	r3, [pc, #132]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055cc:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055d6:	4b1d      	ldr	r3, [pc, #116]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055dc:	4a1b      	ldr	r2, [pc, #108]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055e6:	4a19      	ldr	r2, [pc, #100]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d016      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fe fb22 	bl	8003c40 <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fe:	e00b      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005600:	f7fe fb1e 	bl	8003c40 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d902      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	74fb      	strb	r3, [r7, #19]
            break;
 8005616:	e006      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005618:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0ec      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562c:	4b07      	ldr	r3, [pc, #28]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800563a:	4904      	ldr	r1, [pc, #16]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005642:	e009      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	74bb      	strb	r3, [r7, #18]
 8005648:	e006      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005658:	7c7b      	ldrb	r3, [r7, #17]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d105      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565e:	4b8d      	ldr	r3, [pc, #564]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005662:	4a8c      	ldr	r2, [pc, #560]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005668:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005676:	4b87      	ldr	r3, [pc, #540]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567c:	f023 0203 	bic.w	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	4983      	ldr	r1, [pc, #524]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005698:	4b7e      	ldr	r3, [pc, #504]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569e:	f023 020c 	bic.w	r2, r3, #12
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	497b      	ldr	r1, [pc, #492]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ba:	4b76      	ldr	r3, [pc, #472]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	4972      	ldr	r1, [pc, #456]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056dc:	4b6d      	ldr	r3, [pc, #436]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	496a      	ldr	r1, [pc, #424]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056fe:	4b65      	ldr	r3, [pc, #404]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	4961      	ldr	r1, [pc, #388]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005720:	4b5c      	ldr	r3, [pc, #368]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	4959      	ldr	r1, [pc, #356]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005742:	4b54      	ldr	r3, [pc, #336]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005750:	4950      	ldr	r1, [pc, #320]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005764:	4b4b      	ldr	r3, [pc, #300]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005772:	4948      	ldr	r1, [pc, #288]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005786:	4b43      	ldr	r3, [pc, #268]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005794:	493f      	ldr	r1, [pc, #252]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d028      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b6:	4937      	ldr	r1, [pc, #220]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057c6:	d106      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c8:	4b32      	ldr	r3, [pc, #200]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a31      	ldr	r2, [pc, #196]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057d2:	60d3      	str	r3, [r2, #12]
 80057d4:	e011      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057de:	d10c      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	2101      	movs	r1, #1
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f8a4 	bl	8005934 <RCCEx_PLLSAI1_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
 80057f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d028      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005806:	4b23      	ldr	r3, [pc, #140]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005814:	491f      	ldr	r1, [pc, #124]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005824:	d106      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005826:	4b1b      	ldr	r3, [pc, #108]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	4a1a      	ldr	r2, [pc, #104]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800582c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005830:	60d3      	str	r3, [r2, #12]
 8005832:	e011      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005838:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800583c:	d10c      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3304      	adds	r3, #4
 8005842:	2101      	movs	r1, #1
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f875 	bl	8005934 <RCCEx_PLLSAI1_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d02b      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005864:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005872:	4908      	ldr	r1, [pc, #32]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800587e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005882:	d109      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005884:	4b03      	ldr	r3, [pc, #12]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4a02      	ldr	r2, [pc, #8]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800588a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800588e:	60d3      	str	r3, [r2, #12]
 8005890:	e014      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005892:	bf00      	nop
 8005894:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058a0:	d10c      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
 80058a6:	2101      	movs	r1, #1
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f843 	bl	8005934 <RCCEx_PLLSAI1_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01c      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058c8:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d6:	4916      	ldr	r1, [pc, #88]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058e6:	d10c      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	2102      	movs	r1, #2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f820 	bl	8005934 <RCCEx_PLLSAI1_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058f8:	7cfb      	ldrb	r3, [r7, #19]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80058fe:	7cfb      	ldrb	r3, [r7, #19]
 8005900:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800590e:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005914:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591c:	4904      	ldr	r1, [pc, #16]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005924:	7cbb      	ldrb	r3, [r7, #18]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000

08005934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005942:	4b74      	ldr	r3, [pc, #464]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d018      	beq.n	8005980 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800594e:	4b71      	ldr	r3, [pc, #452]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0203 	and.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d10d      	bne.n	800597a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
       ||
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005966:	4b6b      	ldr	r3, [pc, #428]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	091b      	lsrs	r3, r3, #4
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
       ||
 8005976:	429a      	cmp	r2, r3
 8005978:	d047      	beq.n	8005a0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
 800597e:	e044      	b.n	8005a0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d018      	beq.n	80059ba <RCCEx_PLLSAI1_Config+0x86>
 8005988:	2b03      	cmp	r3, #3
 800598a:	d825      	bhi.n	80059d8 <RCCEx_PLLSAI1_Config+0xa4>
 800598c:	2b01      	cmp	r3, #1
 800598e:	d002      	beq.n	8005996 <RCCEx_PLLSAI1_Config+0x62>
 8005990:	2b02      	cmp	r3, #2
 8005992:	d009      	beq.n	80059a8 <RCCEx_PLLSAI1_Config+0x74>
 8005994:	e020      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005996:	4b5f      	ldr	r3, [pc, #380]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d11d      	bne.n	80059de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a6:	e01a      	b.n	80059de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d116      	bne.n	80059e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b8:	e013      	b.n	80059e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059ba:	4b56      	ldr	r3, [pc, #344]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059c6:	4b53      	ldr	r3, [pc, #332]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059d6:	e006      	b.n	80059e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
      break;
 80059dc:	e004      	b.n	80059e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10d      	bne.n	8005a0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059ee:	4b49      	ldr	r3, [pc, #292]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6819      	ldr	r1, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	430b      	orrs	r3, r1
 8005a04:	4943      	ldr	r1, [pc, #268]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d17c      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a10:	4b40      	ldr	r3, [pc, #256]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a3f      	ldr	r2, [pc, #252]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1c:	f7fe f910 	bl	8003c40 <HAL_GetTick>
 8005a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a22:	e009      	b.n	8005a38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a24:	f7fe f90c 	bl	8003c40 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d902      	bls.n	8005a38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	73fb      	strb	r3, [r7, #15]
        break;
 8005a36:	e005      	b.n	8005a44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a38:	4b36      	ldr	r3, [pc, #216]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1ef      	bne.n	8005a24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d15f      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d110      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a50:	4b30      	ldr	r3, [pc, #192]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005a58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6892      	ldr	r2, [r2, #8]
 8005a60:	0211      	lsls	r1, r2, #8
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	68d2      	ldr	r2, [r2, #12]
 8005a66:	06d2      	lsls	r2, r2, #27
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	492a      	ldr	r1, [pc, #168]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	610b      	str	r3, [r1, #16]
 8005a70:	e027      	b.n	8005ac2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d112      	bne.n	8005a9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a78:	4b26      	ldr	r3, [pc, #152]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6892      	ldr	r2, [r2, #8]
 8005a88:	0211      	lsls	r1, r2, #8
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6912      	ldr	r2, [r2, #16]
 8005a8e:	0852      	lsrs	r2, r2, #1
 8005a90:	3a01      	subs	r2, #1
 8005a92:	0552      	lsls	r2, r2, #21
 8005a94:	430a      	orrs	r2, r1
 8005a96:	491f      	ldr	r1, [pc, #124]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	610b      	str	r3, [r1, #16]
 8005a9c:	e011      	b.n	8005ac2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005aa6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6892      	ldr	r2, [r2, #8]
 8005aae:	0211      	lsls	r1, r2, #8
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6952      	ldr	r2, [r2, #20]
 8005ab4:	0852      	lsrs	r2, r2, #1
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0652      	lsls	r2, r2, #25
 8005aba:	430a      	orrs	r2, r1
 8005abc:	4915      	ldr	r1, [pc, #84]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ac2:	4b14      	ldr	r3, [pc, #80]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005acc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ace:	f7fe f8b7 	bl	8003c40 <HAL_GetTick>
 8005ad2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ad4:	e009      	b.n	8005aea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad6:	f7fe f8b3 	bl	8003c40 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d902      	bls.n	8005aea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8005ae8:	e005      	b.n	8005af6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aea:	4b0a      	ldr	r3, [pc, #40]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ef      	beq.n	8005ad6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005afc:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	4903      	ldr	r1, [pc, #12]	@ (8005b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40021000 	.word	0x40021000

08005b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e095      	b.n	8005c56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d108      	bne.n	8005b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b3a:	d009      	beq.n	8005b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	61da      	str	r2, [r3, #28]
 8005b42:	e005      	b.n	8005b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fc fac6 	bl	80020fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b90:	d902      	bls.n	8005b98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	e002      	b.n	8005b9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ba6:	d007      	beq.n	8005bb8 <HAL_SPI_Init+0xa0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bb0:	d002      	beq.n	8005bb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfa:	ea42 0103 	orr.w	r1, r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	0c1b      	lsrs	r3, r3, #16
 8005c14:	f003 0204 	and.w	r2, r3, #4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c34:	ea42 0103 	orr.w	r1, r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b08a      	sub	sp, #40	@ 0x28
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c70:	f7fd ffe6 	bl	8003c40 <HAL_GetTick>
 8005c74:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c7c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005c84:	887b      	ldrh	r3, [r7, #2]
 8005c86:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d00c      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x4e>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c98:	d106      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x4a>
 8005ca2:	7ffb      	ldrb	r3, [r7, #31]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d001      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e1f3      	b.n	8006094 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x60>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x60>
 8005cb8:	887b      	ldrh	r3, [r7, #2]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e1e8      	b.n	8006094 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_SPI_TransmitReceive+0x72>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e1e1      	b.n	8006094 <HAL_SPI_TransmitReceive+0x436>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d003      	beq.n	8005cec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2205      	movs	r2, #5
 8005ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	887a      	ldrh	r2, [r7, #2]
 8005cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	887a      	ldrh	r2, [r7, #2]
 8005d04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	887a      	ldrh	r2, [r7, #2]
 8005d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	887a      	ldrh	r2, [r7, #2]
 8005d18:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d2e:	d802      	bhi.n	8005d36 <HAL_SPI_TransmitReceive+0xd8>
 8005d30:	8abb      	ldrh	r3, [r7, #20]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d908      	bls.n	8005d48 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	e007      	b.n	8005d58 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d007      	beq.n	8005d76 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d7e:	f240 8083 	bls.w	8005e88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x132>
 8005d8a:	8afb      	ldrh	r3, [r7, #22]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d16f      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	1c9a      	adds	r2, r3, #2
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005db4:	e05c      	b.n	8005e70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d11b      	bne.n	8005dfc <HAL_SPI_TransmitReceive+0x19e>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <HAL_SPI_TransmitReceive+0x19e>
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d113      	bne.n	8005dfc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de4:	1c9a      	adds	r2, r3, #2
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d11c      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x1e6>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d016      	beq.n	8005e44 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	b292      	uxth	r2, r2
 8005e22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e28:	1c9a      	adds	r2, r3, #2
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e40:	2301      	movs	r3, #1
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e44:	f7fd fefc 	bl	8003c40 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d80d      	bhi.n	8005e70 <HAL_SPI_TransmitReceive+0x212>
 8005e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d009      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e111      	b.n	8006094 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d19d      	bne.n	8005db6 <HAL_SPI_TransmitReceive+0x158>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d197      	bne.n	8005db6 <HAL_SPI_TransmitReceive+0x158>
 8005e86:	e0e5      	b.n	8006054 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_SPI_TransmitReceive+0x23a>
 8005e90:	8afb      	ldrh	r3, [r7, #22]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	f040 80d1 	bne.w	800603a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d912      	bls.n	8005ec8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	881a      	ldrh	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	1c9a      	adds	r2, r3, #2
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b02      	subs	r3, #2
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ec6:	e0b8      	b.n	800603a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	7812      	ldrb	r2, [r2, #0]
 8005ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eee:	e0a4      	b.n	800603a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d134      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x30a>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02f      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0x30a>
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d12c      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d912      	bls.n	8005f3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1c:	881a      	ldrh	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f28:	1c9a      	adds	r2, r3, #2
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b02      	subs	r3, #2
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f3c:	e012      	b.n	8005f64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	7812      	ldrb	r2, [r2, #0]
 8005f4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d148      	bne.n	8006008 <HAL_SPI_TransmitReceive+0x3aa>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d042      	beq.n	8006008 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d923      	bls.n	8005fd6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f98:	b292      	uxth	r2, r2
 8005f9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	1c9a      	adds	r2, r3, #2
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b02      	subs	r3, #2
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d81f      	bhi.n	8006004 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fd2:	605a      	str	r2, [r3, #4]
 8005fd4:	e016      	b.n	8006004 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f103 020c 	add.w	r2, r3, #12
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	7812      	ldrb	r2, [r2, #0]
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006004:	2301      	movs	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006008:	f7fd fe1a 	bl	8003c40 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006014:	429a      	cmp	r2, r3
 8006016:	d803      	bhi.n	8006020 <HAL_SPI_TransmitReceive+0x3c2>
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d102      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x3c8>
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e02c      	b.n	8006094 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	f47f af55 	bne.w	8005ef0 <HAL_SPI_TransmitReceive+0x292>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	f47f af4e 	bne.w	8005ef0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fa5d 	bl	8006518 <SPI_EndRxTxTransaction>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e00e      	b.n	8006094 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006092:	2300      	movs	r3, #0
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3728      	adds	r7, #40	@ 0x28
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	099b      	lsrs	r3, r3, #6
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10f      	bne.n	80060e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	099b      	lsrs	r3, r3, #6
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d004      	beq.n	80060e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	4798      	blx	r3
    return;
 80060de:	e0d7      	b.n	8006290 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <HAL_SPI_IRQHandler+0x66>
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	09db      	lsrs	r3, r3, #7
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
    return;
 8006100:	e0c6      	b.n	8006290 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10c      	bne.n	8006128 <HAL_SPI_IRQHandler+0x8c>
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	099b      	lsrs	r3, r3, #6
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80b4 	beq.w	8006290 <HAL_SPI_IRQHandler+0x1f4>
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80ad 	beq.w	8006290 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	099b      	lsrs	r3, r3, #6
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d023      	beq.n	800618a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d011      	beq.n	8006172 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006152:	f043 0204 	orr.w	r2, r3, #4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	e00b      	b.n	800618a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	693b      	ldr	r3, [r7, #16]
        return;
 8006188:	e082      	b.n	8006290 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d014      	beq.n	80061c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00c      	beq.n	80061e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d0:	f043 0208 	orr.w	r2, r3, #8
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061d8:	2300      	movs	r3, #0
 80061da:	60bb      	str	r3, [r7, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	60bb      	str	r3, [r7, #8]
 80061e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d04f      	beq.n	800628e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_SPI_IRQHandler+0x17e>
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d034      	beq.n	8006284 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0203 	bic.w	r2, r2, #3
 8006228:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622e:	2b00      	cmp	r3, #0
 8006230:	d011      	beq.n	8006256 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006236:	4a18      	ldr	r2, [pc, #96]	@ (8006298 <HAL_SPI_IRQHandler+0x1fc>)
 8006238:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623e:	4618      	mov	r0, r3
 8006240:	f7fd ffa2 	bl	8004188 <HAL_DMA_Abort_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625a:	2b00      	cmp	r3, #0
 800625c:	d016      	beq.n	800628c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006262:	4a0d      	ldr	r2, [pc, #52]	@ (8006298 <HAL_SPI_IRQHandler+0x1fc>)
 8006264:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626a:	4618      	mov	r0, r3
 800626c:	f7fd ff8c 	bl	8004188 <HAL_DMA_Abort_IT>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006282:	e003      	b.n	800628c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f809 	bl	800629c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800628a:	e000      	b.n	800628e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800628c:	bf00      	nop
    return;
 800628e:	bf00      	nop
  }
}
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	080062b1 	.word	0x080062b1

0800629c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff ffe5 	bl	800629c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062ec:	f7fd fca8 	bl	8003c40 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	4413      	add	r3, r2
 80062fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062fc:	f7fd fca0 	bl	8003c40 <HAL_GetTick>
 8006300:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006302:	4b39      	ldr	r3, [pc, #228]	@ (80063e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	015b      	lsls	r3, r3, #5
 8006308:	0d1b      	lsrs	r3, r3, #20
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	fb02 f303 	mul.w	r3, r2, r3
 8006310:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006312:	e054      	b.n	80063be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631a:	d050      	beq.n	80063be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800631c:	f7fd fc90 	bl	8003c40 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	429a      	cmp	r2, r3
 800632a:	d902      	bls.n	8006332 <SPI_WaitFlagStateUntilTimeout+0x56>
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d13d      	bne.n	80063ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800634a:	d111      	bne.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x94>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006354:	d004      	beq.n	8006360 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800635e:	d107      	bne.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800636e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006378:	d10f      	bne.n	800639a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006398:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e017      	b.n	80063de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4013      	ands	r3, r2
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d19b      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	2000000c 	.word	0x2000000c

080063ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	@ 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063fe:	f7fd fc1f 	bl	8003c40 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	4413      	add	r3, r2
 800640c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800640e:	f7fd fc17 	bl	8003c40 <HAL_GetTick>
 8006412:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800641c:	4b3d      	ldr	r3, [pc, #244]	@ (8006514 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	00da      	lsls	r2, r3, #3
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	0d1b      	lsrs	r3, r3, #20
 800642c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006434:	e060      	b.n	80064f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800643c:	d107      	bne.n	800644e <SPI_WaitFifoStateUntilTimeout+0x62>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800644c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d050      	beq.n	80064f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006456:	f7fd fbf3 	bl	8003c40 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006462:	429a      	cmp	r2, r3
 8006464:	d902      	bls.n	800646c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d13d      	bne.n	80064e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800647a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006484:	d111      	bne.n	80064aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800648e:	d004      	beq.n	800649a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006498:	d107      	bne.n	80064aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b2:	d10f      	bne.n	80064d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e010      	b.n	800650a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4013      	ands	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	d196      	bne.n	8006436 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3728      	adds	r7, #40	@ 0x28
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	2000000c 	.word	0x2000000c

08006518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff ff5b 	bl	80063ec <SPI_WaitFifoStateUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006540:	f043 0220 	orr.w	r2, r3, #32
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e027      	b.n	800659c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2200      	movs	r2, #0
 8006554:	2180      	movs	r1, #128	@ 0x80
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff fec0 	bl	80062dc <SPI_WaitFlagStateUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006566:	f043 0220 	orr.w	r2, r3, #32
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e014      	b.n	800659c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2200      	movs	r2, #0
 800657a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff ff34 	bl	80063ec <SPI_WaitFifoStateUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d007      	beq.n	800659a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658e:	f043 0220 	orr.w	r2, r3, #32
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e000      	b.n	800659c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e049      	b.n	800664a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fc f97a 	bl	80028c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f000 fa82 	bl	8006aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b01      	cmp	r3, #1
 8006666:	d001      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e03b      	b.n	80066e4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a19      	ldr	r2, [pc, #100]	@ (80066f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_TIM_Base_Start_IT+0x4e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006696:	d004      	beq.n	80066a2 <HAL_TIM_Base_Start_IT+0x4e>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a15      	ldr	r2, [pc, #84]	@ (80066f4 <HAL_TIM_Base_Start_IT+0xa0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d115      	bne.n	80066ce <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	4b13      	ldr	r3, [pc, #76]	@ (80066f8 <HAL_TIM_Base_Start_IT+0xa4>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b06      	cmp	r3, #6
 80066b2:	d015      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x8c>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ba:	d011      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066cc:	e008      	b.n	80066e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0201 	orr.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	e000      	b.n	80066e2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40014000 	.word	0x40014000
 80066f8:	00010007 	.word	0x00010007

080066fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d020      	beq.n	8006760 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01b      	beq.n	8006760 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0202 	mvn.w	r2, #2
 8006730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9b2 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 800674c:	e005      	b.n	800675a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9a4 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f9b5 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d020      	beq.n	80067ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01b      	beq.n	80067ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0204 	mvn.w	r2, #4
 800677c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f98c 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 8006798:	e005      	b.n	80067a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f97e 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f98f 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d020      	beq.n	80067f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01b      	beq.n	80067f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0208 	mvn.w	r2, #8
 80067c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2204      	movs	r2, #4
 80067ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f966 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 80067e4:	e005      	b.n	80067f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f958 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f969 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d020      	beq.n	8006844 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01b      	beq.n	8006844 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0210 	mvn.w	r2, #16
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2208      	movs	r2, #8
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f940 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f932 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f943 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00c      	beq.n	8006868 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0201 	mvn.w	r2, #1
 8006860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fc ff36 	bl	80036d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00c      	beq.n	8006896 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800688e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 faa5 	bl	8006de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00c      	beq.n	80068ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80068b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fa9d 	bl	8006df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00c      	beq.n	80068de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f8fd 	bl	8006ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f003 0320 	and.w	r3, r3, #32
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00c      	beq.n	8006902 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d007      	beq.n	8006902 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f06f 0220 	mvn.w	r2, #32
 80068fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa65 	bl	8006dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_TIM_ConfigClockSource+0x1c>
 8006922:	2302      	movs	r3, #2
 8006924:	e0b6      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x18a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006944:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006948:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006950:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006962:	d03e      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0xd8>
 8006964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006968:	f200 8087 	bhi.w	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006970:	f000 8086 	beq.w	8006a80 <HAL_TIM_ConfigClockSource+0x176>
 8006974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006978:	d87f      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 800697a:	2b70      	cmp	r3, #112	@ 0x70
 800697c:	d01a      	beq.n	80069b4 <HAL_TIM_ConfigClockSource+0xaa>
 800697e:	2b70      	cmp	r3, #112	@ 0x70
 8006980:	d87b      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 8006982:	2b60      	cmp	r3, #96	@ 0x60
 8006984:	d050      	beq.n	8006a28 <HAL_TIM_ConfigClockSource+0x11e>
 8006986:	2b60      	cmp	r3, #96	@ 0x60
 8006988:	d877      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 800698a:	2b50      	cmp	r3, #80	@ 0x50
 800698c:	d03c      	beq.n	8006a08 <HAL_TIM_ConfigClockSource+0xfe>
 800698e:	2b50      	cmp	r3, #80	@ 0x50
 8006990:	d873      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 8006992:	2b40      	cmp	r3, #64	@ 0x40
 8006994:	d058      	beq.n	8006a48 <HAL_TIM_ConfigClockSource+0x13e>
 8006996:	2b40      	cmp	r3, #64	@ 0x40
 8006998:	d86f      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 800699a:	2b30      	cmp	r3, #48	@ 0x30
 800699c:	d064      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0x15e>
 800699e:	2b30      	cmp	r3, #48	@ 0x30
 80069a0:	d86b      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d060      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0x15e>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d867      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d05c      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0x15e>
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d05a      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0x15e>
 80069b2:	e062      	b.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069c4:	f000 f97c 	bl	8006cc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]
      break;
 80069e0:	e04f      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069f2:	f000 f965 	bl	8006cc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a04:	609a      	str	r2, [r3, #8]
      break;
 8006a06:	e03c      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a14:	461a      	mov	r2, r3
 8006a16:	f000 f8d9 	bl	8006bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2150      	movs	r1, #80	@ 0x50
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f932 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006a26:	e02c      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a34:	461a      	mov	r2, r3
 8006a36:	f000 f8f8 	bl	8006c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2160      	movs	r1, #96	@ 0x60
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 f922 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006a46:	e01c      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a54:	461a      	mov	r2, r3
 8006a56:	f000 f8b9 	bl	8006bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2140      	movs	r1, #64	@ 0x40
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f912 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006a66:	e00c      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f000 f909 	bl	8006c8a <TIM_ITRx_SetConfig>
      break;
 8006a78:	e003      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7e:	e000      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a30      	ldr	r2, [pc, #192]	@ (8006bc0 <TIM_Base_SetConfig+0xd4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_Base_SetConfig+0x20>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0a:	d108      	bne.n	8006b1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a27      	ldr	r2, [pc, #156]	@ (8006bc0 <TIM_Base_SetConfig+0xd4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00b      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2c:	d007      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a24      	ldr	r2, [pc, #144]	@ (8006bc4 <TIM_Base_SetConfig+0xd8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d003      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a23      	ldr	r2, [pc, #140]	@ (8006bc8 <TIM_Base_SetConfig+0xdc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d108      	bne.n	8006b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a12      	ldr	r2, [pc, #72]	@ (8006bc0 <TIM_Base_SetConfig+0xd4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_Base_SetConfig+0xa0>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a11      	ldr	r2, [pc, #68]	@ (8006bc4 <TIM_Base_SetConfig+0xd8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_Base_SetConfig+0xa0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a10      	ldr	r2, [pc, #64]	@ (8006bc8 <TIM_Base_SetConfig+0xdc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d103      	bne.n	8006b94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d105      	bne.n	8006bb2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	611a      	str	r2, [r3, #16]
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400

08006bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0201 	bic.w	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 030a 	bic.w	r3, r3, #10
 8006c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f023 0210 	bic.w	r2, r3, #16
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f043 0307 	orr.w	r3, r3, #7
 8006cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	609a      	str	r2, [r3, #8]
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	021a      	lsls	r2, r3, #8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	609a      	str	r2, [r3, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e04f      	b.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a21      	ldr	r2, [pc, #132]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d108      	bne.n	8006d54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a14      	ldr	r2, [pc, #80]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d009      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d80:	d004      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a10      	ldr	r2, [pc, #64]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d10c      	bne.n	8006da6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40014000 	.word	0x40014000

08006dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e040      	b.n	8006e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fb fdba 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2224      	movs	r2, #36	@ 0x24
 8006e34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0201 	bic.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 ffc0 	bl	8007dd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fd63 	bl	8007920 <UART_SetConfig>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e01b      	b.n	8006e9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0201 	orr.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f83f 	bl	8007f18 <UART_CheckIdleState>
 8006e9a:	4603      	mov	r3, r0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	@ 0x28
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d177      	bne.n	8006fac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_UART_Transmit+0x24>
 8006ec2:	88fb      	ldrh	r3, [r7, #6]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e070      	b.n	8006fae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2221      	movs	r2, #33	@ 0x21
 8006ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eda:	f7fc feb1 	bl	8003c40 <HAL_GetTick>
 8006ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef8:	d108      	bne.n	8006f0c <HAL_UART_Transmit+0x68>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	e003      	b.n	8006f14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f14:	e02f      	b.n	8006f76 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2180      	movs	r1, #128	@ 0x80
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f001 f8a1 	bl	8008068 <UART_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e03b      	b.n	8006fae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10b      	bne.n	8006f54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	881a      	ldrh	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f48:	b292      	uxth	r2, r2
 8006f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	3302      	adds	r3, #2
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	e007      	b.n	8006f64 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	3301      	adds	r3, #1
 8006f62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1c9      	bne.n	8006f16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2140      	movs	r1, #64	@ 0x40
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f001 f86b 	bl	8008068 <UART_WaitOnFlagUntilTimeout>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e005      	b.n	8006fae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006fac:	2302      	movs	r3, #2
  }
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08a      	sub	sp, #40	@ 0x28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d165      	bne.n	800709a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_UART_Transmit_DMA+0x22>
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e05e      	b.n	800709c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	88fa      	ldrh	r2, [r7, #6]
 8006fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2221      	movs	r2, #33	@ 0x21
 8007000:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007006:	2b00      	cmp	r3, #0
 8007008:	d027      	beq.n	800705a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700e:	4a25      	ldr	r2, [pc, #148]	@ (80070a4 <HAL_UART_Transmit_DMA+0xec>)
 8007010:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007016:	4a24      	ldr	r2, [pc, #144]	@ (80070a8 <HAL_UART_Transmit_DMA+0xf0>)
 8007018:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701e:	4a23      	ldr	r2, [pc, #140]	@ (80070ac <HAL_UART_Transmit_DMA+0xf4>)
 8007020:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007026:	2200      	movs	r2, #0
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007032:	4619      	mov	r1, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3328      	adds	r3, #40	@ 0x28
 800703a:	461a      	mov	r2, r3
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	f7fd f805 	bl	800404c <HAL_DMA_Start_IT>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2210      	movs	r2, #16
 800704c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e020      	b.n	800709c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	613b      	str	r3, [r7, #16]
   return(result);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3308      	adds	r3, #8
 8007080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007082:	623a      	str	r2, [r7, #32]
 8007084:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	69f9      	ldr	r1, [r7, #28]
 8007088:	6a3a      	ldr	r2, [r7, #32]
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e5      	bne.n	8007062 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	e000      	b.n	800709c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800709a:	2302      	movs	r3, #2
  }
}
 800709c:	4618      	mov	r0, r3
 800709e:	3728      	adds	r7, #40	@ 0x28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	08008399 	.word	0x08008399
 80070a8:	08008433 	.word	0x08008433
 80070ac:	080085b9 	.word	0x080085b9

080070b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	@ 0x28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d137      	bne.n	8007138 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_UART_Receive_DMA+0x24>
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e030      	b.n	800713a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a18      	ldr	r2, [pc, #96]	@ (8007144 <HAL_UART_Receive_DMA+0x94>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d01f      	beq.n	8007128 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d018      	beq.n	8007128 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	613b      	str	r3, [r7, #16]
   return(result);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	623b      	str	r3, [r7, #32]
 8007116:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	6a3a      	ldr	r2, [r7, #32]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	61bb      	str	r3, [r7, #24]
   return(result);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e6      	bne.n	80070f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	461a      	mov	r2, r3
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 f808 	bl	8008144 <UART_Start_Receive_DMA>
 8007134:	4603      	mov	r3, r0
 8007136:	e000      	b.n	800713a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
  }
}
 800713a:	4618      	mov	r0, r3
 800713c:	3728      	adds	r7, #40	@ 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40008000 	.word	0x40008000

08007148 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b09a      	sub	sp, #104	@ 0x68
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800715e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007164:	667b      	str	r3, [r7, #100]	@ 0x64
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800716e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007170:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007174:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800717c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e6      	bne.n	8007150 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3308      	adds	r3, #8
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	f023 0301 	bic.w	r3, r3, #1
 8007198:	663b      	str	r3, [r7, #96]	@ 0x60
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e5      	bne.n	8007182 <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d118      	bne.n	80071f0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f023 0310 	bic.w	r3, r3, #16
 80071d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e6      	bne.n	80071be <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fa:	2b40      	cmp	r3, #64	@ 0x40
 80071fc:	d137      	bne.n	800726e <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	60bb      	str	r3, [r7, #8]
   return(result);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007214:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3308      	adds	r3, #8
 800721c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800721e:	61ba      	str	r2, [r7, #24]
 8007220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6979      	ldr	r1, [r7, #20]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	613b      	str	r3, [r7, #16]
   return(result);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e5      	bne.n	80071fe <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007236:	2b00      	cmp	r3, #0
 8007238:	d019      	beq.n	800726e <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800723e:	2200      	movs	r2, #0
 8007240:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007246:	4618      	mov	r0, r3
 8007248:	f7fc ff60 	bl	800410c <HAL_DMA_Abort>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00d      	beq.n	800726e <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007256:	4618      	mov	r0, r3
 8007258:	f7fd f886 	bl	8004368 <HAL_DMA_GetError>
 800725c:	4603      	mov	r3, r0
 800725e:	2b20      	cmp	r3, #32
 8007260:	d105      	bne.n	800726e <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2210      	movs	r2, #16
 8007266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e019      	b.n	80072a2 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	220f      	movs	r2, #15
 800727c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	8b1b      	ldrh	r3, [r3, #24]
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0208 	orr.w	r2, r2, #8
 800728e:	b292      	uxth	r2, r2
 8007290:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3768      	adds	r7, #104	@ 0x68
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b0ba      	sub	sp, #232	@ 0xe8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80072d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80072da:	4013      	ands	r3, r2
 80072dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80072e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d115      	bne.n	8007314 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00f      	beq.n	8007314 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 82ca 	beq.w	800789e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
      }
      return;
 8007312:	e2c4      	b.n	800789e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8117 	beq.w	800754c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800731e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800732a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800732e:	4b85      	ldr	r3, [pc, #532]	@ (8007544 <HAL_UART_IRQHandler+0x298>)
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 810a 	beq.w	800754c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d011      	beq.n	8007368 <HAL_UART_IRQHandler+0xbc>
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2201      	movs	r2, #1
 8007356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800735e:	f043 0201 	orr.w	r2, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d011      	beq.n	8007398 <HAL_UART_IRQHandler+0xec>
 8007374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2202      	movs	r2, #2
 8007386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800738e:	f043 0204 	orr.w	r2, r3, #4
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d011      	beq.n	80073c8 <HAL_UART_IRQHandler+0x11c>
 80073a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2204      	movs	r2, #4
 80073b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073be:	f043 0202 	orr.w	r2, r3, #2
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d017      	beq.n	8007404 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2208      	movs	r2, #8
 80073f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073fa:	f043 0208 	orr.w	r2, r3, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800740c:	2b00      	cmp	r3, #0
 800740e:	d012      	beq.n	8007436 <HAL_UART_IRQHandler+0x18a>
 8007410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007414:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00c      	beq.n	8007436 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800742c:	f043 0220 	orr.w	r2, r3, #32
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 8230 	beq.w	80078a2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00d      	beq.n	800746a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800744e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007470:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747e:	2b40      	cmp	r3, #64	@ 0x40
 8007480:	d005      	beq.n	800748e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007486:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800748a:	2b00      	cmp	r3, #0
 800748c:	d04f      	beq.n	800752e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 ff1e 	bl	80082d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749e:	2b40      	cmp	r3, #64	@ 0x40
 80074a0:	d141      	bne.n	8007526 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80074b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80074ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80074d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80074da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80074e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1d9      	bne.n	80074a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d013      	beq.n	800751e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074fa:	4a13      	ldr	r2, [pc, #76]	@ (8007548 <HAL_UART_IRQHandler+0x29c>)
 80074fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007502:	4618      	mov	r0, r3
 8007504:	f7fc fe40 	bl	8004188 <HAL_DMA_Abort_IT>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d017      	beq.n	800753e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751c:	e00f      	b.n	800753e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f9e8 	bl	80078f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007524:	e00b      	b.n	800753e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9e4 	bl	80078f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	e007      	b.n	800753e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f9e0 	bl	80078f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800753c:	e1b1      	b.n	80078a2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753e:	bf00      	nop
    return;
 8007540:	e1af      	b.n	80078a2 <HAL_UART_IRQHandler+0x5f6>
 8007542:	bf00      	nop
 8007544:	04000120 	.word	0x04000120
 8007548:	08008637 	.word	0x08008637

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007550:	2b01      	cmp	r3, #1
 8007552:	f040 816a 	bne.w	800782a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 8163 	beq.w	800782a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 815c 	beq.w	800782a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2210      	movs	r2, #16
 8007578:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007584:	2b40      	cmp	r3, #64	@ 0x40
 8007586:	f040 80d4 	bne.w	8007732 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007596:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80ad 	beq.w	80076fa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075aa:	429a      	cmp	r2, r3
 80075ac:	f080 80a5 	bcs.w	80076fa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f040 8086 	bne.w	80076d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007602:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800760e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1da      	bne.n	80075cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007626:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007628:	f023 0301 	bic.w	r3, r3, #1
 800762c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800763a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800763e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007642:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800764c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e1      	bne.n	8007616 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007676:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007678:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800767c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e3      	bne.n	8007652 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e4      	bne.n	8007698 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fc fd1a 	bl	800410c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f908 	bl	8007908 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80076f8:	e0d5      	b.n	80078a6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007700:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007704:	429a      	cmp	r2, r3
 8007706:	f040 80ce 	bne.w	80078a6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b20      	cmp	r3, #32
 8007718:	f040 80c5 	bne.w	80078a6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f8ec 	bl	8007908 <HAL_UARTEx_RxEventCallback>
      return;
 8007730:	e0b9      	b.n	80078a6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800773e:	b29b      	uxth	r3, r3
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 80ab 	beq.w	80078aa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80a6 	beq.w	80078aa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800776c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007772:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007780:	647b      	str	r3, [r7, #68]	@ 0x44
 8007782:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800778e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e4      	bne.n	800775e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	623b      	str	r3, [r7, #32]
   return(result);
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80077ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e3      	bne.n	8007794 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f023 0310 	bic.w	r3, r3, #16
 80077f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	69b9      	ldr	r1, [r7, #24]
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	617b      	str	r3, [r7, #20]
   return(result);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e4      	bne.n	80077e0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800781c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f870 	bl	8007908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007828:	e03f      	b.n	80078aa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00e      	beq.n	8007854 <HAL_UART_IRQHandler+0x5a8>
 8007836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800783a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800784a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 ff32 	bl	80086b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007852:	e02d      	b.n	80078b0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00e      	beq.n	800787e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01c      	beq.n	80078ae <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
    }
    return;
 800787c:	e017      	b.n	80078ae <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d012      	beq.n	80078b0 <HAL_UART_IRQHandler+0x604>
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00c      	beq.n	80078b0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fee3 	bl	8008662 <UART_EndTransmit_IT>
    return;
 800789c:	e008      	b.n	80078b0 <HAL_UART_IRQHandler+0x604>
      return;
 800789e:	bf00      	nop
 80078a0:	e006      	b.n	80078b0 <HAL_UART_IRQHandler+0x604>
    return;
 80078a2:	bf00      	nop
 80078a4:	e004      	b.n	80078b0 <HAL_UART_IRQHandler+0x604>
      return;
 80078a6:	bf00      	nop
 80078a8:	e002      	b.n	80078b0 <HAL_UART_IRQHandler+0x604>
      return;
 80078aa:	bf00      	nop
 80078ac:	e000      	b.n	80078b0 <HAL_UART_IRQHandler+0x604>
    return;
 80078ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80078b0:	37e8      	adds	r7, #232	@ 0xe8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop

080078b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007924:	b08a      	sub	sp, #40	@ 0x28
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	431a      	orrs	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	431a      	orrs	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	4313      	orrs	r3, r2
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b9e      	ldr	r3, [pc, #632]	@ (8007bc8 <UART_SetConfig+0x2a8>)
 8007950:	4013      	ands	r3, r2
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007958:	430b      	orrs	r3, r1
 800795a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a93      	ldr	r2, [pc, #588]	@ (8007bcc <UART_SetConfig+0x2ac>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007988:	4313      	orrs	r3, r2
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800799c:	430a      	orrs	r2, r1
 800799e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a8a      	ldr	r2, [pc, #552]	@ (8007bd0 <UART_SetConfig+0x2b0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d126      	bne.n	80079f8 <UART_SetConfig+0xd8>
 80079aa:	4b8a      	ldr	r3, [pc, #552]	@ (8007bd4 <UART_SetConfig+0x2b4>)
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d81b      	bhi.n	80079f0 <UART_SetConfig+0xd0>
 80079b8:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <UART_SetConfig+0xa0>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	080079e1 	.word	0x080079e1
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	080079e9 	.word	0x080079e9
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079d6:	e0ab      	b.n	8007b30 <UART_SetConfig+0x210>
 80079d8:	2302      	movs	r3, #2
 80079da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079de:	e0a7      	b.n	8007b30 <UART_SetConfig+0x210>
 80079e0:	2304      	movs	r3, #4
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e6:	e0a3      	b.n	8007b30 <UART_SetConfig+0x210>
 80079e8:	2308      	movs	r3, #8
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ee:	e09f      	b.n	8007b30 <UART_SetConfig+0x210>
 80079f0:	2310      	movs	r3, #16
 80079f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f6:	e09b      	b.n	8007b30 <UART_SetConfig+0x210>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a76      	ldr	r2, [pc, #472]	@ (8007bd8 <UART_SetConfig+0x2b8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d138      	bne.n	8007a74 <UART_SetConfig+0x154>
 8007a02:	4b74      	ldr	r3, [pc, #464]	@ (8007bd4 <UART_SetConfig+0x2b4>)
 8007a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a08:	f003 030c 	and.w	r3, r3, #12
 8007a0c:	2b0c      	cmp	r3, #12
 8007a0e:	d82d      	bhi.n	8007a6c <UART_SetConfig+0x14c>
 8007a10:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <UART_SetConfig+0xf8>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a4d 	.word	0x08007a4d
 8007a1c:	08007a6d 	.word	0x08007a6d
 8007a20:	08007a6d 	.word	0x08007a6d
 8007a24:	08007a6d 	.word	0x08007a6d
 8007a28:	08007a5d 	.word	0x08007a5d
 8007a2c:	08007a6d 	.word	0x08007a6d
 8007a30:	08007a6d 	.word	0x08007a6d
 8007a34:	08007a6d 	.word	0x08007a6d
 8007a38:	08007a55 	.word	0x08007a55
 8007a3c:	08007a6d 	.word	0x08007a6d
 8007a40:	08007a6d 	.word	0x08007a6d
 8007a44:	08007a6d 	.word	0x08007a6d
 8007a48:	08007a65 	.word	0x08007a65
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a52:	e06d      	b.n	8007b30 <UART_SetConfig+0x210>
 8007a54:	2302      	movs	r3, #2
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5a:	e069      	b.n	8007b30 <UART_SetConfig+0x210>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a62:	e065      	b.n	8007b30 <UART_SetConfig+0x210>
 8007a64:	2308      	movs	r3, #8
 8007a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6a:	e061      	b.n	8007b30 <UART_SetConfig+0x210>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a72:	e05d      	b.n	8007b30 <UART_SetConfig+0x210>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a58      	ldr	r2, [pc, #352]	@ (8007bdc <UART_SetConfig+0x2bc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d125      	bne.n	8007aca <UART_SetConfig+0x1aa>
 8007a7e:	4b55      	ldr	r3, [pc, #340]	@ (8007bd4 <UART_SetConfig+0x2b4>)
 8007a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a88:	2b30      	cmp	r3, #48	@ 0x30
 8007a8a:	d016      	beq.n	8007aba <UART_SetConfig+0x19a>
 8007a8c:	2b30      	cmp	r3, #48	@ 0x30
 8007a8e:	d818      	bhi.n	8007ac2 <UART_SetConfig+0x1a2>
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d00a      	beq.n	8007aaa <UART_SetConfig+0x18a>
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d814      	bhi.n	8007ac2 <UART_SetConfig+0x1a2>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <UART_SetConfig+0x182>
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d008      	beq.n	8007ab2 <UART_SetConfig+0x192>
 8007aa0:	e00f      	b.n	8007ac2 <UART_SetConfig+0x1a2>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa8:	e042      	b.n	8007b30 <UART_SetConfig+0x210>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab0:	e03e      	b.n	8007b30 <UART_SetConfig+0x210>
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab8:	e03a      	b.n	8007b30 <UART_SetConfig+0x210>
 8007aba:	2308      	movs	r3, #8
 8007abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac0:	e036      	b.n	8007b30 <UART_SetConfig+0x210>
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac8:	e032      	b.n	8007b30 <UART_SetConfig+0x210>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a3f      	ldr	r2, [pc, #252]	@ (8007bcc <UART_SetConfig+0x2ac>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d12a      	bne.n	8007b2a <UART_SetConfig+0x20a>
 8007ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd4 <UART_SetConfig+0x2b4>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ada:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ade:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ae2:	d01a      	beq.n	8007b1a <UART_SetConfig+0x1fa>
 8007ae4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ae8:	d81b      	bhi.n	8007b22 <UART_SetConfig+0x202>
 8007aea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aee:	d00c      	beq.n	8007b0a <UART_SetConfig+0x1ea>
 8007af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007af4:	d815      	bhi.n	8007b22 <UART_SetConfig+0x202>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <UART_SetConfig+0x1e2>
 8007afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007afe:	d008      	beq.n	8007b12 <UART_SetConfig+0x1f2>
 8007b00:	e00f      	b.n	8007b22 <UART_SetConfig+0x202>
 8007b02:	2300      	movs	r3, #0
 8007b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b08:	e012      	b.n	8007b30 <UART_SetConfig+0x210>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b10:	e00e      	b.n	8007b30 <UART_SetConfig+0x210>
 8007b12:	2304      	movs	r3, #4
 8007b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b18:	e00a      	b.n	8007b30 <UART_SetConfig+0x210>
 8007b1a:	2308      	movs	r3, #8
 8007b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b20:	e006      	b.n	8007b30 <UART_SetConfig+0x210>
 8007b22:	2310      	movs	r3, #16
 8007b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b28:	e002      	b.n	8007b30 <UART_SetConfig+0x210>
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a25      	ldr	r2, [pc, #148]	@ (8007bcc <UART_SetConfig+0x2ac>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f040 808a 	bne.w	8007c50 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d824      	bhi.n	8007b8e <UART_SetConfig+0x26e>
 8007b44:	a201      	add	r2, pc, #4	@ (adr r2, 8007b4c <UART_SetConfig+0x22c>)
 8007b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4a:	bf00      	nop
 8007b4c:	08007b71 	.word	0x08007b71
 8007b50:	08007b8f 	.word	0x08007b8f
 8007b54:	08007b79 	.word	0x08007b79
 8007b58:	08007b8f 	.word	0x08007b8f
 8007b5c:	08007b7f 	.word	0x08007b7f
 8007b60:	08007b8f 	.word	0x08007b8f
 8007b64:	08007b8f 	.word	0x08007b8f
 8007b68:	08007b8f 	.word	0x08007b8f
 8007b6c:	08007b87 	.word	0x08007b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b70:	f7fd fc0a 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8007b74:	61f8      	str	r0, [r7, #28]
        break;
 8007b76:	e010      	b.n	8007b9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b78:	4b19      	ldr	r3, [pc, #100]	@ (8007be0 <UART_SetConfig+0x2c0>)
 8007b7a:	61fb      	str	r3, [r7, #28]
        break;
 8007b7c:	e00d      	b.n	8007b9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7e:	f7fd fb6b 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007b82:	61f8      	str	r0, [r7, #28]
        break;
 8007b84:	e009      	b.n	8007b9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b8a:	61fb      	str	r3, [r7, #28]
        break;
 8007b8c:	e005      	b.n	8007b9a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8109 	beq.w	8007db4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	4413      	add	r3, r2
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d305      	bcc.n	8007bbe <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d912      	bls.n	8007be4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bc4:	e0f6      	b.n	8007db4 <UART_SetConfig+0x494>
 8007bc6:	bf00      	nop
 8007bc8:	efff69f3 	.word	0xefff69f3
 8007bcc:	40008000 	.word	0x40008000
 8007bd0:	40013800 	.word	0x40013800
 8007bd4:	40021000 	.word	0x40021000
 8007bd8:	40004400 	.word	0x40004400
 8007bdc:	40004800 	.word	0x40004800
 8007be0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2200      	movs	r2, #0
 8007be8:	461c      	mov	r4, r3
 8007bea:	4615      	mov	r5, r2
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	022b      	lsls	r3, r5, #8
 8007bf6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007bfa:	0222      	lsls	r2, r4, #8
 8007bfc:	68f9      	ldr	r1, [r7, #12]
 8007bfe:	6849      	ldr	r1, [r1, #4]
 8007c00:	0849      	lsrs	r1, r1, #1
 8007c02:	2000      	movs	r0, #0
 8007c04:	4688      	mov	r8, r1
 8007c06:	4681      	mov	r9, r0
 8007c08:	eb12 0a08 	adds.w	sl, r2, r8
 8007c0c:	eb43 0b09 	adc.w	fp, r3, r9
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	607a      	str	r2, [r7, #4]
 8007c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1e:	4650      	mov	r0, sl
 8007c20:	4659      	mov	r1, fp
 8007c22:	f7f9 f841 	bl	8000ca8 <__aeabi_uldivmod>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c34:	d308      	bcc.n	8007c48 <UART_SetConfig+0x328>
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c3c:	d204      	bcs.n	8007c48 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	60da      	str	r2, [r3, #12]
 8007c46:	e0b5      	b.n	8007db4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c4e:	e0b1      	b.n	8007db4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c58:	d15d      	bne.n	8007d16 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d827      	bhi.n	8007cb2 <UART_SetConfig+0x392>
 8007c62:	a201      	add	r2, pc, #4	@ (adr r2, 8007c68 <UART_SetConfig+0x348>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c8d 	.word	0x08007c8d
 8007c6c:	08007c95 	.word	0x08007c95
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	08007cb3 	.word	0x08007cb3
 8007c78:	08007ca3 	.word	0x08007ca3
 8007c7c:	08007cb3 	.word	0x08007cb3
 8007c80:	08007cb3 	.word	0x08007cb3
 8007c84:	08007cb3 	.word	0x08007cb3
 8007c88:	08007cab 	.word	0x08007cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c8c:	f7fd fb7c 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8007c90:	61f8      	str	r0, [r7, #28]
        break;
 8007c92:	e014      	b.n	8007cbe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c94:	f7fd fb8e 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 8007c98:	61f8      	str	r0, [r7, #28]
        break;
 8007c9a:	e010      	b.n	8007cbe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8007dd0 <UART_SetConfig+0x4b0>)
 8007c9e:	61fb      	str	r3, [r7, #28]
        break;
 8007ca0:	e00d      	b.n	8007cbe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ca2:	f7fd fad9 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007ca6:	61f8      	str	r0, [r7, #28]
        break;
 8007ca8:	e009      	b.n	8007cbe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cae:	61fb      	str	r3, [r7, #28]
        break;
 8007cb0:	e005      	b.n	8007cbe <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d077      	beq.n	8007db4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	005a      	lsls	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	441a      	add	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b0f      	cmp	r3, #15
 8007cde:	d916      	bls.n	8007d0e <UART_SetConfig+0x3ee>
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce6:	d212      	bcs.n	8007d0e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f023 030f 	bic.w	r3, r3, #15
 8007cf0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	085b      	lsrs	r3, r3, #1
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	8afb      	ldrh	r3, [r7, #22]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	8afa      	ldrh	r2, [r7, #22]
 8007d0a:	60da      	str	r2, [r3, #12]
 8007d0c:	e052      	b.n	8007db4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d14:	e04e      	b.n	8007db4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d1a:	2b08      	cmp	r3, #8
 8007d1c:	d827      	bhi.n	8007d6e <UART_SetConfig+0x44e>
 8007d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <UART_SetConfig+0x404>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d51 	.word	0x08007d51
 8007d2c:	08007d59 	.word	0x08007d59
 8007d30:	08007d6f 	.word	0x08007d6f
 8007d34:	08007d5f 	.word	0x08007d5f
 8007d38:	08007d6f 	.word	0x08007d6f
 8007d3c:	08007d6f 	.word	0x08007d6f
 8007d40:	08007d6f 	.word	0x08007d6f
 8007d44:	08007d67 	.word	0x08007d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d48:	f7fd fb1e 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8007d4c:	61f8      	str	r0, [r7, #28]
        break;
 8007d4e:	e014      	b.n	8007d7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d50:	f7fd fb30 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 8007d54:	61f8      	str	r0, [r7, #28]
        break;
 8007d56:	e010      	b.n	8007d7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d58:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd0 <UART_SetConfig+0x4b0>)
 8007d5a:	61fb      	str	r3, [r7, #28]
        break;
 8007d5c:	e00d      	b.n	8007d7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5e:	f7fd fa7b 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8007d62:	61f8      	str	r0, [r7, #28]
        break;
 8007d64:	e009      	b.n	8007d7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d6a:	61fb      	str	r3, [r7, #28]
        break;
 8007d6c:	e005      	b.n	8007d7a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d78:	bf00      	nop
    }

    if (pclk != 0U)
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d019      	beq.n	8007db4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085a      	lsrs	r2, r3, #1
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	441a      	add	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2b0f      	cmp	r3, #15
 8007d98:	d909      	bls.n	8007dae <UART_SetConfig+0x48e>
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007da0:	d205      	bcs.n	8007dae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60da      	str	r2, [r3, #12]
 8007dac:	e002      	b.n	8007db4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007dc0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3728      	adds	r7, #40	@ 0x28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dce:	bf00      	nop
 8007dd0:	00f42400 	.word	0x00f42400

08007dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01a      	beq.n	8007eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ed2:	d10a      	bne.n	8007eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	605a      	str	r2, [r3, #4]
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b098      	sub	sp, #96	@ 0x60
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f28:	f7fb fe8a 	bl	8003c40 <HAL_GetTick>
 8007f2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d12e      	bne.n	8007f9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f44:	2200      	movs	r2, #0
 8007f46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f88c 	bl	8008068 <UART_WaitOnFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d021      	beq.n	8007f9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	461a      	mov	r2, r3
 8007f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e6      	bne.n	8007f56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e062      	b.n	8008060 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d149      	bne.n	800803c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f856 	bl	8008068 <UART_WaitOnFlagUntilTimeout>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d03c      	beq.n	800803c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	623b      	str	r3, [r7, #32]
   return(result);
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fe2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e6      	bne.n	8007fc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	60fb      	str	r3, [r7, #12]
   return(result);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0301 	bic.w	r3, r3, #1
 800800a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3308      	adds	r3, #8
 8008012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008014:	61fa      	str	r2, [r7, #28]
 8008016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	69b9      	ldr	r1, [r7, #24]
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	617b      	str	r3, [r7, #20]
   return(result);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e011      	b.n	8008060 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2220      	movs	r2, #32
 8008046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3758      	adds	r7, #88	@ 0x58
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008078:	e04f      	b.n	800811a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008080:	d04b      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008082:	f7fb fddd 	bl	8003c40 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	429a      	cmp	r2, r3
 8008090:	d302      	bcc.n	8008098 <UART_WaitOnFlagUntilTimeout+0x30>
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e04e      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d037      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb2>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b80      	cmp	r3, #128	@ 0x80
 80080ae:	d034      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb2>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b40      	cmp	r3, #64	@ 0x40
 80080b4:	d031      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d110      	bne.n	80080e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2208      	movs	r2, #8
 80080ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f8ff 	bl	80082d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2208      	movs	r2, #8
 80080d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e029      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080f4:	d111      	bne.n	800811a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f8e5 	bl	80082d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2220      	movs	r2, #32
 800810a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e00f      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4013      	ands	r3, r2
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	429a      	cmp	r2, r3
 8008128:	bf0c      	ite	eq
 800812a:	2301      	moveq	r3, #1
 800812c:	2300      	movne	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	461a      	mov	r2, r3
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	429a      	cmp	r2, r3
 8008136:	d0a0      	beq.n	800807a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b096      	sub	sp, #88	@ 0x58
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	88fa      	ldrh	r2, [r7, #6]
 800815c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2222      	movs	r2, #34	@ 0x22
 800816c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008174:	2b00      	cmp	r3, #0
 8008176:	d028      	beq.n	80081ca <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800817c:	4a3e      	ldr	r2, [pc, #248]	@ (8008278 <UART_Start_Receive_DMA+0x134>)
 800817e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008184:	4a3d      	ldr	r2, [pc, #244]	@ (800827c <UART_Start_Receive_DMA+0x138>)
 8008186:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800818c:	4a3c      	ldr	r2, [pc, #240]	@ (8008280 <UART_Start_Receive_DMA+0x13c>)
 800818e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008194:	2200      	movs	r2, #0
 8008196:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3324      	adds	r3, #36	@ 0x24
 80081a2:	4619      	mov	r1, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a8:	461a      	mov	r2, r3
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	f7fb ff4e 	bl	800404c <HAL_DMA_Start_IT>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2210      	movs	r2, #16
 80081ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e051      	b.n	800826e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d018      	beq.n	8008204 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081f2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80081fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e6      	bne.n	80081d2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3308      	adds	r3, #8
 800820a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	653b      	str	r3, [r7, #80]	@ 0x50
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3308      	adds	r3, #8
 8008222:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008224:	637a      	str	r2, [r7, #52]	@ 0x34
 8008226:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800822a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e5      	bne.n	8008204 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3308      	adds	r3, #8
 800823e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	613b      	str	r3, [r7, #16]
   return(result);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800824e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008258:	623a      	str	r2, [r7, #32]
 800825a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	69f9      	ldr	r1, [r7, #28]
 800825e:	6a3a      	ldr	r2, [r7, #32]
 8008260:	e841 2300 	strex	r3, r2, [r1]
 8008264:	61bb      	str	r3, [r7, #24]
   return(result);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e5      	bne.n	8008238 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3758      	adds	r7, #88	@ 0x58
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	0800844f 	.word	0x0800844f
 800827c:	0800857b 	.word	0x0800857b
 8008280:	080085b9 	.word	0x080085b9

08008284 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b089      	sub	sp, #36	@ 0x24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	60bb      	str	r3, [r7, #8]
   return(result);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80082a0:	61fb      	str	r3, [r7, #28]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6979      	ldr	r1, [r7, #20]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	613b      	str	r3, [r7, #16]
   return(result);
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e6      	bne.n	800828c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80082c4:	bf00      	nop
 80082c6:	3724      	adds	r7, #36	@ 0x24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b095      	sub	sp, #84	@ 0x54
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80082f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e6      	bne.n	80082d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	61fb      	str	r3, [r7, #28]
   return(result);
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f023 0301 	bic.w	r3, r3, #1
 8008320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800832a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800832c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e5      	bne.n	800830a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008342:	2b01      	cmp	r3, #1
 8008344:	d118      	bne.n	8008378 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	60bb      	str	r3, [r7, #8]
   return(result);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f023 0310 	bic.w	r3, r3, #16
 800835a:	647b      	str	r3, [r7, #68]	@ 0x44
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6979      	ldr	r1, [r7, #20]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	613b      	str	r3, [r7, #16]
   return(result);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e6      	bne.n	8008346 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2220      	movs	r2, #32
 800837c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800838c:	bf00      	nop
 800838e:	3754      	adds	r7, #84	@ 0x54
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b090      	sub	sp, #64	@ 0x40
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d137      	bne.n	8008424 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80083b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3308      	adds	r3, #8
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	623b      	str	r3, [r7, #32]
   return(result);
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3308      	adds	r3, #8
 80083da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80083de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e5      	bne.n	80083bc <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008404:	637b      	str	r3, [r7, #52]	@ 0x34
 8008406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840e:	61fb      	str	r3, [r7, #28]
 8008410:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	69b9      	ldr	r1, [r7, #24]
 8008414:	69fa      	ldr	r2, [r7, #28]
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	617b      	str	r3, [r7, #20]
   return(result);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008422:	e002      	b.n	800842a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008424:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008426:	f7fb fadf 	bl	80039e8 <HAL_UART_TxCpltCallback>
}
 800842a:	bf00      	nop
 800842c:	3740      	adds	r7, #64	@ 0x40
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fa39 	bl	80078b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008446:	bf00      	nop
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b09c      	sub	sp, #112	@ 0x70
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d171      	bne.n	800854e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800846a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800846c:	2200      	movs	r2, #0
 800846e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008482:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008486:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008490:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008492:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008496:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800849e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e6      	bne.n	8008472 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b6:	f023 0301 	bic.w	r3, r3, #1
 80084ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80084bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80084c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80084c6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e5      	bne.n	80084a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3308      	adds	r3, #8
 80084de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	623b      	str	r3, [r7, #32]
   return(result);
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80084f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80084f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80084fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e5      	bne.n	80084d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800850c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800850e:	2220      	movs	r2, #32
 8008510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008518:	2b01      	cmp	r3, #1
 800851a:	d118      	bne.n	800854e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	60fb      	str	r3, [r7, #12]
   return(result);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f023 0310 	bic.w	r3, r3, #16
 8008530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800853a:	61fb      	str	r3, [r7, #28]
 800853c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	69b9      	ldr	r1, [r7, #24]
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	e841 2300 	strex	r3, r2, [r1]
 8008546:	617b      	str	r3, [r7, #20]
   return(result);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1e6      	bne.n	800851c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800854e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008550:	2200      	movs	r2, #0
 8008552:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008558:	2b01      	cmp	r3, #1
 800855a:	d107      	bne.n	800856c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800855c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800855e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008562:	4619      	mov	r1, r3
 8008564:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008566:	f7ff f9cf 	bl	8007908 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800856a:	e002      	b.n	8008572 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800856c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800856e:	f7ff f9ad 	bl	80078cc <HAL_UART_RxCpltCallback>
}
 8008572:	bf00      	nop
 8008574:	3770      	adds	r7, #112	@ 0x70
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008586:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008592:	2b01      	cmp	r3, #1
 8008594:	d109      	bne.n	80085aa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	b29b      	uxth	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff f9b0 	bl	8007908 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085a8:	e002      	b.n	80085b0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7ff f998 	bl	80078e0 <HAL_UART_RxHalfCpltCallback>
}
 80085b0:	bf00      	nop
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085de:	2b80      	cmp	r3, #128	@ 0x80
 80085e0:	d109      	bne.n	80085f6 <UART_DMAError+0x3e>
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b21      	cmp	r3, #33	@ 0x21
 80085e6:	d106      	bne.n	80085f6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80085f0:	6978      	ldr	r0, [r7, #20]
 80085f2:	f7ff fe47 	bl	8008284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008600:	2b40      	cmp	r3, #64	@ 0x40
 8008602:	d109      	bne.n	8008618 <UART_DMAError+0x60>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b22      	cmp	r3, #34	@ 0x22
 8008608:	d106      	bne.n	8008618 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2200      	movs	r2, #0
 800860e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008612:	6978      	ldr	r0, [r7, #20]
 8008614:	f7ff fe5c 	bl	80082d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800861e:	f043 0210 	orr.w	r2, r3, #16
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008628:	6978      	ldr	r0, [r7, #20]
 800862a:	f7ff f963 	bl	80078f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800862e:	bf00      	nop
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7ff f94d 	bl	80078f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b088      	sub	sp, #32
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	60bb      	str	r3, [r7, #8]
   return(result);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6979      	ldr	r1, [r7, #20]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	613b      	str	r3, [r7, #16]
   return(result);
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e6      	bne.n	800866a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fb f99d 	bl	80039e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ae:	bf00      	nop
 80086b0:	3720      	adds	r7, #32
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80086d0:	4904      	ldr	r1, [pc, #16]	@ (80086e4 <MX_FATFS_Init+0x18>)
 80086d2:	4805      	ldr	r0, [pc, #20]	@ (80086e8 <MX_FATFS_Init+0x1c>)
 80086d4:	f004 ff18 	bl	800d508 <FATFS_LinkDriver>
 80086d8:	4603      	mov	r3, r0
 80086da:	461a      	mov	r2, r3
 80086dc:	4b03      	ldr	r3, [pc, #12]	@ (80086ec <MX_FATFS_Init+0x20>)
 80086de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80086e0:	bf00      	nop
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000fd0 	.word	0x20000fd0
 80086e8:	20000040 	.word	0x20000040
 80086ec:	20000fcc 	.word	0x20000fcc

080086f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80086f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USER_initialize>:
};

DSTATUS USER_initialize (
	BYTE pdrv
)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
	res = SD_Init();
 800870a:	f7f8 ff3f 	bl	800158c <SD_Init>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]
	if(res)
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d008      	beq.n	800872a <USER_initialize+0x2a>
	{
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8008718:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <USER_initialize+0x40>)
 800871a:	2238      	movs	r2, #56	@ 0x38
 800871c:	61da      	str	r2, [r3, #28]
		SPI_TransmitReceive(0xFF);
 800871e:	20ff      	movs	r0, #255	@ 0xff
 8008720:	f7f8 feb4 	bl	800148c <SPI_TransmitReceive>
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008724:	4b06      	ldr	r3, [pc, #24]	@ (8008740 <USER_initialize+0x40>)
 8008726:	2200      	movs	r2, #0
 8008728:	61da      	str	r2, [r3, #28]
	}
	if(res)
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <USER_initialize+0x34>
		return  STA_NOINIT;
 8008730:	2301      	movs	r3, #1
 8008732:	e000      	b.n	8008736 <USER_initialize+0x36>
	else
		return RES_OK;
 8008734:	2300      	movs	r3, #0
  /* USER CODE END INIT */
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	2000081c 	.word	0x2000081c

08008744 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv
)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	71fb      	strb	r3, [r7, #7]
	switch (pdrv)
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <USER_status+0x16>
 8008754:	2b01      	cmp	r3, #1
 8008756:	d002      	beq.n	800875e <USER_status+0x1a>
 8008758:	e003      	b.n	8008762 <USER_status+0x1e>
	{
		case 0 :
			return RES_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	e002      	b.n	8008764 <USER_status+0x20>
		case 1 :
			return RES_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	e000      	b.n	8008764 <USER_status+0x20>
		default:
			return STA_NOINIT;
 8008762:	2301      	movs	r3, #1
	}
}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USER_read>:
	BYTE pdrv,
	BYTE *buff,
	DWORD sector,
	UINT count
)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
	uint8_t res;
  if(count == 0)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <USER_read+0x1a>
	  return RES_PARERR;
 8008786:	2304      	movs	r3, #4
 8008788:	e013      	b.n	80087b2 <USER_read+0x42>
  switch (pdrv)
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10f      	bne.n	80087b0 <USER_read+0x40>
  	{
	case 0:
	{
		res=SD_ReadDisk(buff,sector,count);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	461a      	mov	r2, r3
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	68b8      	ldr	r0, [r7, #8]
 800879a:	f7f9 f877 	bl	800188c <SD_ReadDisk>
 800879e:	4603      	mov	r3, r0
 80087a0:	75fb      	strb	r3, [r7, #23]
		if(res == 0)
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <USER_read+0x3c>
			return RES_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	e002      	b.n	80087b2 <USER_read+0x42>
		else
			return RES_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <USER_read+0x42>
	}
	default:
		return RES_ERROR;
 80087b0:	2301      	movs	r3, #1
  	}
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USER_write>:
	BYTE pdrv,
	const BYTE *buff,
	DWORD sector,
	UINT count
)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b086      	sub	sp, #24
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	4603      	mov	r3, r0
 80087c8:	73fb      	strb	r3, [r7, #15]
	uint8_t  res;
	if( !count )
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <USER_write+0x1a>
	{
		return RES_PARERR;
 80087d0:	2304      	movs	r3, #4
 80087d2:	e013      	b.n	80087fc <USER_write+0x42>
	}
	switch (pdrv)
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10f      	bne.n	80087fa <USER_write+0x40>
	{
		case 0:
			res=SD_WriteDisk((uint8_t *)buff,sector,count);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	6879      	ldr	r1, [r7, #4]
 80087e2:	68b8      	ldr	r0, [r7, #8]
 80087e4:	f7f9 f8aa 	bl	800193c <SD_WriteDisk>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]
				if(res == 0)
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <USER_write+0x3c>
					return RES_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e002      	b.n	80087fc <USER_write+0x42>
				else
					return RES_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <USER_write+0x42>
		default:return RES_ERROR;
 80087fa:	2301      	movs	r3, #1
	}
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,
	BYTE cmd,
	void *buff
)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	603a      	str	r2, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
 8008810:	460b      	mov	r3, r1
 8008812:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	 switch(cmd)
 8008814:	79bb      	ldrb	r3, [r7, #6]
 8008816:	2b03      	cmp	r3, #3
 8008818:	d837      	bhi.n	800888a <USER_ioctl+0x86>
 800881a:	a201      	add	r2, pc, #4	@ (adr r2, 8008820 <USER_ioctl+0x1c>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	08008831 	.word	0x08008831
 8008824:	0800887b 	.word	0x0800887b
 8008828:	08008861 	.word	0x08008861
 800882c:	0800886f 	.word	0x0800886f
		{
			case CTRL_SYNC:
				SD_CS_LOW();
 8008830:	2200      	movs	r2, #0
 8008832:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008836:	4819      	ldr	r0, [pc, #100]	@ (800889c <USER_ioctl+0x98>)
 8008838:	f7fb ff64 	bl	8004704 <HAL_GPIO_WritePin>
				do{
					HAL_Delay(20);
 800883c:	2014      	movs	r0, #20
 800883e:	f7fb fa0b 	bl	8003c58 <HAL_Delay>
				}while(SPI_TransmitReceive(0xFF)!=0xFF);
 8008842:	20ff      	movs	r0, #255	@ 0xff
 8008844:	f7f8 fe22 	bl	800148c <SPI_TransmitReceive>
 8008848:	4603      	mov	r3, r0
 800884a:	2bff      	cmp	r3, #255	@ 0xff
 800884c:	d1f6      	bne.n	800883c <USER_ioctl+0x38>
				res=RES_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
				SD_CS_HIGH();
 8008852:	2201      	movs	r2, #1
 8008854:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008858:	4810      	ldr	r0, [pc, #64]	@ (800889c <USER_ioctl+0x98>)
 800885a:	f7fb ff53 	bl	8004704 <HAL_GPIO_WritePin>
				break;
 800885e:	e017      	b.n	8008890 <USER_ioctl+0x8c>
			case GET_SECTOR_SIZE:
				*(WORD*)buff = 512;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008866:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
				break;
 800886c:	e010      	b.n	8008890 <USER_ioctl+0x8c>
			case GET_BLOCK_SIZE:
				*(WORD*)buff = 8;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
				break;
 8008878:	e00a      	b.n	8008890 <USER_ioctl+0x8c>
			case GET_SECTOR_COUNT:
				*(DWORD*)buff = SD_GetSectorCount();
 800887a:	f7f9 f8f3 	bl	8001a64 <SD_GetSectorCount>
 800887e:	4602      	mov	r2, r0
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
				break;
 8008888:	e002      	b.n	8008890 <USER_ioctl+0x8c>
			default:
				res = RES_PARERR;
 800888a:	2304      	movs	r3, #4
 800888c:	73fb      	strb	r3, [r7, #15]
				break;
 800888e:	bf00      	nop
		}
		return res;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	48000400 	.word	0x48000400

080088a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	4a08      	ldr	r2, [pc, #32]	@ (80088d0 <disk_status+0x30>)
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	79fa      	ldrb	r2, [r7, #7]
 80088b8:	4905      	ldr	r1, [pc, #20]	@ (80088d0 <disk_status+0x30>)
 80088ba:	440a      	add	r2, r1
 80088bc:	7a12      	ldrb	r2, [r2, #8]
 80088be:	4610      	mov	r0, r2
 80088c0:	4798      	blx	r3
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000ffc 	.word	0x20000ffc

080088d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	4a0d      	ldr	r2, [pc, #52]	@ (800891c <disk_initialize+0x48>)
 80088e6:	5cd3      	ldrb	r3, [r2, r3]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d111      	bne.n	8008910 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	4a0b      	ldr	r2, [pc, #44]	@ (800891c <disk_initialize+0x48>)
 80088f0:	2101      	movs	r1, #1
 80088f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	4a09      	ldr	r2, [pc, #36]	@ (800891c <disk_initialize+0x48>)
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	79fa      	ldrb	r2, [r7, #7]
 8008902:	4906      	ldr	r1, [pc, #24]	@ (800891c <disk_initialize+0x48>)
 8008904:	440a      	add	r2, r1
 8008906:	7a12      	ldrb	r2, [r2, #8]
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000ffc 	.word	0x20000ffc

08008920 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008920:	b590      	push	{r4, r7, lr}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	4a0a      	ldr	r2, [pc, #40]	@ (800895c <disk_read+0x3c>)
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	689c      	ldr	r4, [r3, #8]
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	4a07      	ldr	r2, [pc, #28]	@ (800895c <disk_read+0x3c>)
 8008940:	4413      	add	r3, r2
 8008942:	7a18      	ldrb	r0, [r3, #8]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	68b9      	ldr	r1, [r7, #8]
 800894a:	47a0      	blx	r4
 800894c:	4603      	mov	r3, r0
 800894e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
}
 8008952:	4618      	mov	r0, r3
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	bd90      	pop	{r4, r7, pc}
 800895a:	bf00      	nop
 800895c:	20000ffc 	.word	0x20000ffc

08008960 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008960:	b590      	push	{r4, r7, lr}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4a0a      	ldr	r2, [pc, #40]	@ (800899c <disk_write+0x3c>)
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	68dc      	ldr	r4, [r3, #12]
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	4a07      	ldr	r2, [pc, #28]	@ (800899c <disk_write+0x3c>)
 8008980:	4413      	add	r3, r2
 8008982:	7a18      	ldrb	r0, [r3, #8]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	47a0      	blx	r4
 800898c:	4603      	mov	r3, r0
 800898e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
}
 8008992:	4618      	mov	r0, r3
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	bd90      	pop	{r4, r7, pc}
 800899a:	bf00      	nop
 800899c:	20000ffc 	.word	0x20000ffc

080089a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	603a      	str	r2, [r7, #0]
 80089aa:	71fb      	strb	r3, [r7, #7]
 80089ac:	460b      	mov	r3, r1
 80089ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	4a09      	ldr	r2, [pc, #36]	@ (80089d8 <disk_ioctl+0x38>)
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	79fa      	ldrb	r2, [r7, #7]
 80089be:	4906      	ldr	r1, [pc, #24]	@ (80089d8 <disk_ioctl+0x38>)
 80089c0:	440a      	add	r2, r1
 80089c2:	7a10      	ldrb	r0, [r2, #8]
 80089c4:	79b9      	ldrb	r1, [r7, #6]
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	4798      	blx	r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000ffc 	.word	0x20000ffc

080089dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3301      	adds	r3, #1
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80089ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80089f0:	021b      	lsls	r3, r3, #8
 80089f2:	b21a      	sxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	b21b      	sxth	r3, r3
 80089fa:	4313      	orrs	r3, r2
 80089fc:	b21b      	sxth	r3, r3
 80089fe:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008a00:	89fb      	ldrh	r3, [r7, #14]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	3202      	adds	r2, #2
 8008a26:	7812      	ldrb	r2, [r2, #0]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	021b      	lsls	r3, r3, #8
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	3201      	adds	r2, #1
 8008a34:	7812      	ldrb	r2, [r2, #0]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	7812      	ldrb	r2, [r2, #0]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]
	return rv;
 8008a46:	68fb      	ldr	r3, [r7, #12]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8008a54:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008a58:	b09d      	sub	sp, #116	@ 0x74
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8008a5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a60:	3307      	adds	r3, #7
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2200      	movs	r2, #0
 8008a68:	469a      	mov	sl, r3
 8008a6a:	4693      	mov	fp, r2
 8008a6c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8008a70:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008a74:	f04f 0000 	mov.w	r0, #0
 8008a78:	f04f 0100 	mov.w	r1, #0
 8008a7c:	0219      	lsls	r1, r3, #8
 8008a7e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a82:	0210      	lsls	r0, r2, #8
 8008a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a86:	3306      	adds	r3, #6
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	461c      	mov	r4, r3
 8008a90:	4615      	mov	r5, r2
 8008a92:	ea40 0804 	orr.w	r8, r0, r4
 8008a96:	ea41 0905 	orr.w	r9, r1, r5
 8008a9a:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8008a9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f04f 0100 	mov.w	r1, #0
 8008aaa:	0219      	lsls	r1, r3, #8
 8008aac:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008ab0:	0210      	lsls	r0, r2, #8
 8008ab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ab4:	3305      	adds	r3, #5
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2200      	movs	r2, #0
 8008abc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008abe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008ac0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	4303      	orrs	r3, r0
 8008ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aca:	462b      	mov	r3, r5
 8008acc:	430b      	orrs	r3, r1
 8008ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ad0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008ad4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8008ad8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008adc:	f04f 0000 	mov.w	r0, #0
 8008ae0:	f04f 0100 	mov.w	r1, #0
 8008ae4:	0219      	lsls	r1, r3, #8
 8008ae6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008aea:	0210      	lsls	r0, r2, #8
 8008aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aee:	3304      	adds	r3, #4
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2200      	movs	r2, #0
 8008af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008af8:	657a      	str	r2, [r7, #84]	@ 0x54
 8008afa:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8008afe:	4623      	mov	r3, r4
 8008b00:	4303      	orrs	r3, r0
 8008b02:	623b      	str	r3, [r7, #32]
 8008b04:	462b      	mov	r3, r5
 8008b06:	430b      	orrs	r3, r1
 8008b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b0a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008b0e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8008b12:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008b16:	f04f 0000 	mov.w	r0, #0
 8008b1a:	f04f 0100 	mov.w	r1, #0
 8008b1e:	0219      	lsls	r1, r3, #8
 8008b20:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008b24:	0210      	lsls	r0, r2, #8
 8008b26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b28:	3303      	adds	r3, #3
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2200      	movs	r2, #0
 8008b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b32:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008b34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8008b38:	4623      	mov	r3, r4
 8008b3a:	4303      	orrs	r3, r0
 8008b3c:	61bb      	str	r3, [r7, #24]
 8008b3e:	462b      	mov	r3, r5
 8008b40:	430b      	orrs	r3, r1
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008b48:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8008b4c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008b50:	f04f 0000 	mov.w	r0, #0
 8008b54:	f04f 0100 	mov.w	r1, #0
 8008b58:	0219      	lsls	r1, r3, #8
 8008b5a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008b5e:	0210      	lsls	r0, r2, #8
 8008b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b62:	3302      	adds	r3, #2
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2200      	movs	r2, #0
 8008b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b6c:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b6e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8008b72:	4623      	mov	r3, r4
 8008b74:	4303      	orrs	r3, r0
 8008b76:	613b      	str	r3, [r7, #16]
 8008b78:	462b      	mov	r3, r5
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008b82:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8008b86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b8a:	f04f 0200 	mov.w	r2, #0
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	020b      	lsls	r3, r1, #8
 8008b94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b98:	0202      	lsls	r2, r0, #8
 8008b9a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	7809      	ldrb	r1, [r1, #0]
 8008ba0:	b2c9      	uxtb	r1, r1
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ba6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008ba8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8008bac:	4621      	mov	r1, r4
 8008bae:	4311      	orrs	r1, r2
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4319      	orrs	r1, r3
 8008bb6:	60f9      	str	r1, [r7, #12]
 8008bb8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008bbc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8008bc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	020b      	lsls	r3, r1, #8
 8008bce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bd2:	0202      	lsls	r2, r0, #8
 8008bd4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008bd6:	7809      	ldrb	r1, [r1, #0]
 8008bd8:	b2c9      	uxtb	r1, r1
 8008bda:	2000      	movs	r0, #0
 8008bdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8008bde:	6378      	str	r0, [r7, #52]	@ 0x34
 8008be0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008be4:	4621      	mov	r1, r4
 8008be6:	4311      	orrs	r1, r2
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	4629      	mov	r1, r5
 8008bec:	4319      	orrs	r1, r3
 8008bee:	6079      	str	r1, [r7, #4]
 8008bf0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008bf4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8008bf8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	3774      	adds	r7, #116	@ 0x74
 8008c02:	46bd      	mov	sp, r7
 8008c04:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c08:	4770      	bx	lr

08008c0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	460b      	mov	r3, r1
 8008c14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	887a      	ldrh	r2, [r7, #2]
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	887b      	ldrh	r3, [r7, #2]
 8008c24:	0a1b      	lsrs	r3, r3, #8
 8008c26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	887a      	ldrh	r2, [r7, #2]
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	701a      	strb	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	0a1b      	lsrs	r3, r3, #8
 8008c5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	607a      	str	r2, [r7, #4]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	0a1b      	lsrs	r3, r3, #8
 8008c7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	607a      	str	r2, [r7, #4]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	701a      	strb	r2, [r3, #0]
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	60fa      	str	r2, [r7, #12]
 8008caa:	783a      	ldrb	r2, [r7, #0]
 8008cac:	701a      	strb	r2, [r3, #0]
 8008cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cb2:	f04f 0200 	mov.w	r2, #0
 8008cb6:	f04f 0300 	mov.w	r3, #0
 8008cba:	0a02      	lsrs	r2, r0, #8
 8008cbc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008cc0:	0a0b      	lsrs	r3, r1, #8
 8008cc2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	60fa      	str	r2, [r7, #12]
 8008ccc:	783a      	ldrb	r2, [r7, #0]
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	0a02      	lsrs	r2, r0, #8
 8008cde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008ce2:	0a0b      	lsrs	r3, r1, #8
 8008ce4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	60fa      	str	r2, [r7, #12]
 8008cee:	783a      	ldrb	r2, [r7, #0]
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	0a02      	lsrs	r2, r0, #8
 8008d00:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d04:	0a0b      	lsrs	r3, r1, #8
 8008d06:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	60fa      	str	r2, [r7, #12]
 8008d10:	783a      	ldrb	r2, [r7, #0]
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d18:	f04f 0200 	mov.w	r2, #0
 8008d1c:	f04f 0300 	mov.w	r3, #0
 8008d20:	0a02      	lsrs	r2, r0, #8
 8008d22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d26:	0a0b      	lsrs	r3, r1, #8
 8008d28:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	60fa      	str	r2, [r7, #12]
 8008d32:	783a      	ldrb	r2, [r7, #0]
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	0a02      	lsrs	r2, r0, #8
 8008d44:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d48:	0a0b      	lsrs	r3, r1, #8
 8008d4a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	60fa      	str	r2, [r7, #12]
 8008d54:	783a      	ldrb	r2, [r7, #0]
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d5c:	f04f 0200 	mov.w	r2, #0
 8008d60:	f04f 0300 	mov.w	r3, #0
 8008d64:	0a02      	lsrs	r2, r0, #8
 8008d66:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d6a:	0a0b      	lsrs	r3, r1, #8
 8008d6c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	60fa      	str	r2, [r7, #12]
 8008d76:	783a      	ldrb	r2, [r7, #0]
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d7e:	f04f 0200 	mov.w	r2, #0
 8008d82:	f04f 0300 	mov.w	r3, #0
 8008d86:	0a02      	lsrs	r2, r0, #8
 8008d88:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d8c:	0a0b      	lsrs	r3, r1, #8
 8008d8e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	60fa      	str	r2, [r7, #12]
 8008d98:	783a      	ldrb	r2, [r7, #0]
 8008d9a:	701a      	strb	r2, [r3, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00d      	beq.n	8008dde <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	1c53      	adds	r3, r2, #1
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	1c59      	adds	r1, r3, #1
 8008dcc:	6179      	str	r1, [r7, #20]
 8008dce:	7812      	ldrb	r2, [r2, #0]
 8008dd0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	607b      	str	r3, [r7, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1f1      	bne.n	8008dc2 <mem_cpy+0x1a>
	}
}
 8008dde:	bf00      	nop
 8008de0:	371c      	adds	r7, #28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008dea:	b480      	push	{r7}
 8008dec:	b087      	sub	sp, #28
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	617a      	str	r2, [r7, #20]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	b2d2      	uxtb	r2, r2
 8008e04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	607b      	str	r3, [r7, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1f3      	bne.n	8008dfa <mem_set+0x10>
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008e20:	b480      	push	{r7}
 8008e22:	b089      	sub	sp, #36	@ 0x24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	1c5a      	adds	r2, r3, #1
 8008e3c:	61fa      	str	r2, [r7, #28]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	4619      	mov	r1, r3
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	61ba      	str	r2, [r7, #24]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	1acb      	subs	r3, r1, r3
 8008e4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	607b      	str	r3, [r7, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <mem_cmp+0x40>
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0eb      	beq.n	8008e38 <mem_cmp+0x18>

	return r;
 8008e60:	697b      	ldr	r3, [r7, #20]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3724      	adds	r7, #36	@ 0x24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008e78:	e002      	b.n	8008e80 <chk_chr+0x12>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <chk_chr+0x26>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d1f2      	bne.n	8008e7a <chk_chr+0xc>
	return *str;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	781b      	ldrb	r3, [r3, #0]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60bb      	str	r3, [r7, #8]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e029      	b.n	8008f0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008eb8:	4a27      	ldr	r2, [pc, #156]	@ (8008f58 <chk_lock+0xb4>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	4413      	add	r3, r2
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01d      	beq.n	8008f02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ec6:	4a24      	ldr	r2, [pc, #144]	@ (8008f58 <chk_lock+0xb4>)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	4413      	add	r3, r2
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d116      	bne.n	8008f06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8008f58 <chk_lock+0xb4>)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	4413      	add	r3, r2
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d10c      	bne.n	8008f06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008eec:	4a1a      	ldr	r2, [pc, #104]	@ (8008f58 <chk_lock+0xb4>)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d102      	bne.n	8008f06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008f00:	e007      	b.n	8008f12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008f02:	2301      	movs	r3, #1
 8008f04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d9d2      	bls.n	8008eb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d109      	bne.n	8008f2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <chk_lock+0x80>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d101      	bne.n	8008f28 <chk_lock+0x84>
 8008f24:	2300      	movs	r3, #0
 8008f26:	e010      	b.n	8008f4a <chk_lock+0xa6>
 8008f28:	2312      	movs	r3, #18
 8008f2a:	e00e      	b.n	8008f4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d108      	bne.n	8008f44 <chk_lock+0xa0>
 8008f32:	4a09      	ldr	r2, [pc, #36]	@ (8008f58 <chk_lock+0xb4>)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	4413      	add	r3, r2
 8008f3a:	330c      	adds	r3, #12
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f42:	d101      	bne.n	8008f48 <chk_lock+0xa4>
 8008f44:	2310      	movs	r3, #16
 8008f46:	e000      	b.n	8008f4a <chk_lock+0xa6>
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	20000fdc 	.word	0x20000fdc

08008f5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	e002      	b.n	8008f6e <enq_lock+0x12>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	607b      	str	r3, [r7, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d806      	bhi.n	8008f82 <enq_lock+0x26>
 8008f74:	4a09      	ldr	r2, [pc, #36]	@ (8008f9c <enq_lock+0x40>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	4413      	add	r3, r2
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f2      	bne.n	8008f68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	bf14      	ite	ne
 8008f88:	2301      	movne	r3, #1
 8008f8a:	2300      	moveq	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	20000fdc 	.word	0x20000fdc

08008fa0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	e01f      	b.n	8008ff0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008fb0:	4a41      	ldr	r2, [pc, #260]	@ (80090b8 <inc_lock+0x118>)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	4413      	add	r3, r2
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d113      	bne.n	8008fea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80090b8 <inc_lock+0x118>)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	4413      	add	r3, r2
 8008fca:	3304      	adds	r3, #4
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d109      	bne.n	8008fea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008fd6:	4a38      	ldr	r2, [pc, #224]	@ (80090b8 <inc_lock+0x118>)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	4413      	add	r3, r2
 8008fde:	3308      	adds	r3, #8
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d006      	beq.n	8008ff8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3301      	adds	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d9dc      	bls.n	8008fb0 <inc_lock+0x10>
 8008ff6:	e000      	b.n	8008ffa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ff8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d132      	bne.n	8009066 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e002      	b.n	800900c <inc_lock+0x6c>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3301      	adds	r3, #1
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d806      	bhi.n	8009020 <inc_lock+0x80>
 8009012:	4a29      	ldr	r2, [pc, #164]	@ (80090b8 <inc_lock+0x118>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	4413      	add	r3, r2
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1f2      	bne.n	8009006 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d101      	bne.n	800902a <inc_lock+0x8a>
 8009026:	2300      	movs	r3, #0
 8009028:	e040      	b.n	80090ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4922      	ldr	r1, [pc, #136]	@ (80090b8 <inc_lock+0x118>)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	440b      	add	r3, r1
 8009036:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	491e      	ldr	r1, [pc, #120]	@ (80090b8 <inc_lock+0x118>)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	011b      	lsls	r3, r3, #4
 8009042:	440b      	add	r3, r1
 8009044:	3304      	adds	r3, #4
 8009046:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800904c:	491a      	ldr	r1, [pc, #104]	@ (80090b8 <inc_lock+0x118>)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	440b      	add	r3, r1
 8009054:	3308      	adds	r3, #8
 8009056:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009058:	4a17      	ldr	r2, [pc, #92]	@ (80090b8 <inc_lock+0x118>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	4413      	add	r3, r2
 8009060:	330c      	adds	r3, #12
 8009062:	2200      	movs	r2, #0
 8009064:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d009      	beq.n	8009080 <inc_lock+0xe0>
 800906c:	4a12      	ldr	r2, [pc, #72]	@ (80090b8 <inc_lock+0x118>)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	011b      	lsls	r3, r3, #4
 8009072:	4413      	add	r3, r2
 8009074:	330c      	adds	r3, #12
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <inc_lock+0xe0>
 800907c:	2300      	movs	r3, #0
 800907e:	e015      	b.n	80090ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d108      	bne.n	8009098 <inc_lock+0xf8>
 8009086:	4a0c      	ldr	r2, [pc, #48]	@ (80090b8 <inc_lock+0x118>)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	4413      	add	r3, r2
 800908e:	330c      	adds	r3, #12
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	3301      	adds	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	e001      	b.n	800909c <inc_lock+0xfc>
 8009098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800909c:	4906      	ldr	r1, [pc, #24]	@ (80090b8 <inc_lock+0x118>)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	440b      	add	r3, r1
 80090a4:	330c      	adds	r3, #12
 80090a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	20000fdc 	.word	0x20000fdc

080090bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	607b      	str	r3, [r7, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d825      	bhi.n	800911c <dec_lock+0x60>
		n = Files[i].ctr;
 80090d0:	4a17      	ldr	r2, [pc, #92]	@ (8009130 <dec_lock+0x74>)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	4413      	add	r3, r2
 80090d8:	330c      	adds	r3, #12
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80090de:	89fb      	ldrh	r3, [r7, #14]
 80090e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090e4:	d101      	bne.n	80090ea <dec_lock+0x2e>
 80090e6:	2300      	movs	r3, #0
 80090e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80090ea:	89fb      	ldrh	r3, [r7, #14]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <dec_lock+0x3a>
 80090f0:	89fb      	ldrh	r3, [r7, #14]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80090f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009130 <dec_lock+0x74>)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	4413      	add	r3, r2
 80090fe:	330c      	adds	r3, #12
 8009100:	89fa      	ldrh	r2, [r7, #14]
 8009102:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009104:	89fb      	ldrh	r3, [r7, #14]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <dec_lock+0x5a>
 800910a:	4a09      	ldr	r2, [pc, #36]	@ (8009130 <dec_lock+0x74>)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	4413      	add	r3, r2
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	737b      	strb	r3, [r7, #13]
 800911a:	e001      	b.n	8009120 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800911c:	2302      	movs	r3, #2
 800911e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009120:	7b7b      	ldrb	r3, [r7, #13]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	20000fdc 	.word	0x20000fdc

08009134 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e010      	b.n	8009164 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009142:	4a0d      	ldr	r2, [pc, #52]	@ (8009178 <clear_lock+0x44>)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	4413      	add	r3, r2
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	429a      	cmp	r2, r3
 8009150:	d105      	bne.n	800915e <clear_lock+0x2a>
 8009152:	4a09      	ldr	r2, [pc, #36]	@ (8009178 <clear_lock+0x44>)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	4413      	add	r3, r2
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d9eb      	bls.n	8009142 <clear_lock+0xe>
	}
}
 800916a:	bf00      	nop
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	20000fdc 	.word	0x20000fdc

0800917c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	78db      	ldrb	r3, [r3, #3]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d034      	beq.n	80091fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009194:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7858      	ldrb	r0, [r3, #1]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80091a0:	2301      	movs	r3, #1
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	f7ff fbdc 	bl	8008960 <disk_write>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	73fb      	strb	r3, [r7, #15]
 80091b2:	e022      	b.n	80091fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	1ad2      	subs	r2, r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d217      	bcs.n	80091fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	789b      	ldrb	r3, [r3, #2]
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	e010      	b.n	80091f4 <sync_window+0x78>
					wsect += fs->fsize;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4413      	add	r3, r2
 80091da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	7858      	ldrb	r0, [r3, #1]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80091e6:	2301      	movs	r3, #1
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	f7ff fbb9 	bl	8008960 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	613b      	str	r3, [r7, #16]
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d8eb      	bhi.n	80091d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d01b      	beq.n	8009254 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff ffad 	bl	800917c <sync_window>
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d113      	bne.n	8009254 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	7858      	ldrb	r0, [r3, #1]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009236:	2301      	movs	r3, #1
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	f7ff fb71 	bl	8008920 <disk_read>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d004      	beq.n	800924e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009244:	f04f 33ff 	mov.w	r3, #4294967295
 8009248:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800924a:	2301      	movs	r3, #1
 800924c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009254:	7bfb      	ldrb	r3, [r7, #15]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff ff87 	bl	800917c <sync_window>
 800926e:	4603      	mov	r3, r0
 8009270:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d158      	bne.n	800932a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d148      	bne.n	8009312 <sync_fs+0xb2>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	791b      	ldrb	r3, [r3, #4]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d144      	bne.n	8009312 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3338      	adds	r3, #56	@ 0x38
 800928c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009290:	2100      	movs	r1, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff fda9 	bl	8008dea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3338      	adds	r3, #56	@ 0x38
 800929c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80092a0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fcb0 	bl	8008c0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3338      	adds	r3, #56	@ 0x38
 80092ae:	4921      	ldr	r1, [pc, #132]	@ (8009334 <sync_fs+0xd4>)
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff fcc5 	bl	8008c40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3338      	adds	r3, #56	@ 0x38
 80092ba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80092be:	491e      	ldr	r1, [pc, #120]	@ (8009338 <sync_fs+0xd8>)
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fcbd 	bl	8008c40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3338      	adds	r3, #56	@ 0x38
 80092ca:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f7ff fcb3 	bl	8008c40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3338      	adds	r3, #56	@ 0x38
 80092de:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	4619      	mov	r1, r3
 80092e8:	4610      	mov	r0, r2
 80092ea:	f7ff fca9 	bl	8008c40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7858      	ldrb	r0, [r3, #1]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009306:	2301      	movs	r3, #1
 8009308:	f7ff fb2a 	bl	8008960 <disk_write>
			fs->fsi_flag = 0;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	785b      	ldrb	r3, [r3, #1]
 8009316:	2200      	movs	r2, #0
 8009318:	2100      	movs	r1, #0
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff fb40 	bl	80089a0 <disk_ioctl>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <sync_fs+0xca>
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	41615252 	.word	0x41615252
 8009338:	61417272 	.word	0x61417272

0800933c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	3b02      	subs	r3, #2
 800934a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	3b02      	subs	r3, #2
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d301      	bcc.n	800935c <clust2sect+0x20>
 8009358:	2300      	movs	r3, #0
 800935a:	e008      	b.n	800936e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	895b      	ldrh	r3, [r3, #10]
 8009360:	461a      	mov	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	fb03 f202 	mul.w	r2, r3, r2
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936c:	4413      	add	r3, r2
}
 800936e:	4618      	mov	r0, r3
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
	...

0800937c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	6809      	ldr	r1, [r1, #0]
 800938a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	2901      	cmp	r1, #1
 8009390:	d904      	bls.n	800939c <get_fat+0x20>
 8009392:	69b9      	ldr	r1, [r7, #24]
 8009394:	69c9      	ldr	r1, [r1, #28]
 8009396:	6838      	ldr	r0, [r7, #0]
 8009398:	4288      	cmp	r0, r1
 800939a:	d302      	bcc.n	80093a2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800939c:	2301      	movs	r3, #1
 800939e:	61fb      	str	r3, [r7, #28]
 80093a0:	e100      	b.n	80095a4 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80093a2:	f04f 31ff 	mov.w	r1, #4294967295
 80093a6:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 80093a8:	69b9      	ldr	r1, [r7, #24]
 80093aa:	7809      	ldrb	r1, [r1, #0]
 80093ac:	3901      	subs	r1, #1
 80093ae:	2903      	cmp	r1, #3
 80093b0:	f200 80ec 	bhi.w	800958c <get_fat+0x210>
 80093b4:	a001      	add	r0, pc, #4	@ (adr r0, 80093bc <get_fat+0x40>)
 80093b6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093ba:	bf00      	nop
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	08009453 	.word	0x08009453
 80093c4:	08009489 	.word	0x08009489
 80093c8:	080094c1 	.word	0x080094c1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	0a5b      	lsrs	r3, r3, #9
 80093e2:	4413      	add	r3, r2
 80093e4:	4619      	mov	r1, r3
 80093e6:	69b8      	ldr	r0, [r7, #24]
 80093e8:	f7ff ff0c 	bl	8009204 <move_window>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f040 80cf 	bne.w	8009592 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	60fa      	str	r2, [r7, #12]
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	4413      	add	r3, r2
 8009402:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009406:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	0a5b      	lsrs	r3, r3, #9
 8009410:	4413      	add	r3, r2
 8009412:	4619      	mov	r1, r3
 8009414:	69b8      	ldr	r0, [r7, #24]
 8009416:	f7ff fef5 	bl	8009204 <move_window>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 80ba 	bne.w	8009596 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	4413      	add	r3, r2
 800942c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009430:	021b      	lsls	r3, r3, #8
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	4313      	orrs	r3, r2
 8009436:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <get_fat+0xcc>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	091b      	lsrs	r3, r3, #4
 8009446:	e002      	b.n	800944e <get_fat+0xd2>
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800944e:	61fb      	str	r3, [r7, #28]
			break;
 8009450:	e0a8      	b.n	80095a4 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	4413      	add	r3, r2
 800945c:	4619      	mov	r1, r3
 800945e:	69b8      	ldr	r0, [r7, #24]
 8009460:	f7ff fed0 	bl	8009204 <move_window>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	f040 8097 	bne.w	800959a <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800947a:	4413      	add	r3, r2
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff faad 	bl	80089dc <ld_word>
 8009482:	4603      	mov	r3, r0
 8009484:	61fb      	str	r3, [r7, #28]
			break;
 8009486:	e08d      	b.n	80095a4 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	09db      	lsrs	r3, r3, #7
 8009490:	4413      	add	r3, r2
 8009492:	4619      	mov	r1, r3
 8009494:	69b8      	ldr	r0, [r7, #24]
 8009496:	f7ff feb5 	bl	8009204 <move_window>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d17e      	bne.n	800959e <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80094ae:	4413      	add	r3, r2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff faac 	bl	8008a0e <ld_dword>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80094bc:	61fb      	str	r3, [r7, #28]
			break;
 80094be:	e071      	b.n	80095a4 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80094c6:	4301      	orrs	r1, r0
 80094c8:	d060      	beq.n	800958c <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	6889      	ldr	r1, [r1, #8]
 80094ce:	6838      	ldr	r0, [r7, #0]
 80094d0:	1a41      	subs	r1, r0, r1
 80094d2:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80094da:	1e42      	subs	r2, r0, #1
 80094dc:	f141 33ff 	adc.w	r3, r1, #4294967295
 80094e0:	f04f 0000 	mov.w	r0, #0
 80094e4:	f04f 0100 	mov.w	r1, #0
 80094e8:	0a50      	lsrs	r0, r2, #9
 80094ea:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80094ee:	0a59      	lsrs	r1, r3, #9
 80094f0:	4602      	mov	r2, r0
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	895b      	ldrh	r3, [r3, #10]
 80094f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fa:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	79db      	ldrb	r3, [r3, #7]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d10e      	bne.n	8009522 <get_fat+0x1a6>
					if (cofs <= clen) {
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	429a      	cmp	r2, r3
 800950a:	d80a      	bhi.n	8009522 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	429a      	cmp	r2, r3
 8009512:	d002      	beq.n	800951a <get_fat+0x19e>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	3301      	adds	r3, #1
 8009518:	e001      	b.n	800951e <get_fat+0x1a2>
 800951a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800951e:	61fb      	str	r3, [r7, #28]
						break;
 8009520:	e040      	b.n	80095a4 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	79db      	ldrb	r3, [r3, #7]
 8009526:	2b03      	cmp	r3, #3
 8009528:	d108      	bne.n	800953c <get_fat+0x1c0>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	429a      	cmp	r2, r3
 8009532:	d203      	bcs.n	800953c <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	3301      	adds	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
					break;
 800953a:	e033      	b.n	80095a4 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	79db      	ldrb	r3, [r3, #7]
 8009540:	2b02      	cmp	r3, #2
 8009542:	d023      	beq.n	800958c <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800954c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009550:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8009552:	e027      	b.n	80095a4 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	09db      	lsrs	r3, r3, #7
 800955c:	4413      	add	r3, r2
 800955e:	4619      	mov	r1, r3
 8009560:	69b8      	ldr	r0, [r7, #24]
 8009562:	f7ff fe4f 	bl	8009204 <move_window>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11a      	bne.n	80095a2 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800957a:	4413      	add	r3, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff fa46 	bl	8008a0e <ld_dword>
 8009582:	4603      	mov	r3, r0
 8009584:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009588:	61fb      	str	r3, [r7, #28]
					break;
 800958a:	e00b      	b.n	80095a4 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800958c:	2301      	movs	r3, #1
 800958e:	61fb      	str	r3, [r7, #28]
 8009590:	e008      	b.n	80095a4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009592:	bf00      	nop
 8009594:	e006      	b.n	80095a4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009596:	bf00      	nop
 8009598:	e004      	b.n	80095a4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800959a:	bf00      	nop
 800959c:	e002      	b.n	80095a4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800959e:	bf00      	nop
 80095a0:	e000      	b.n	80095a4 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095a2:	bf00      	nop
		}
	}

	return val;
 80095a4:	69fb      	ldr	r3, [r7, #28]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3720      	adds	r7, #32
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop

080095b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b089      	sub	sp, #36	@ 0x24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80095bc:	2302      	movs	r3, #2
 80095be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	f240 80dd 	bls.w	8009782 <put_fat+0x1d2>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	f080 80d7 	bcs.w	8009782 <put_fat+0x1d2>
		switch (fs->fs_type) {
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b04      	cmp	r3, #4
 80095da:	f300 80d2 	bgt.w	8009782 <put_fat+0x1d2>
 80095de:	2b03      	cmp	r3, #3
 80095e0:	f280 8093 	bge.w	800970a <put_fat+0x15a>
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d002      	beq.n	80095ee <put_fat+0x3e>
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d06e      	beq.n	80096ca <put_fat+0x11a>
 80095ec:	e0c9      	b.n	8009782 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	61bb      	str	r3, [r7, #24]
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	085b      	lsrs	r3, r3, #1
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	4413      	add	r3, r2
 80095fa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	0a5b      	lsrs	r3, r3, #9
 8009604:	4413      	add	r3, r2
 8009606:	4619      	mov	r1, r3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fdfb 	bl	8009204 <move_window>
 800960e:	4603      	mov	r3, r0
 8009610:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009612:	7ffb      	ldrb	r3, [r7, #31]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f040 80ad 	bne.w	8009774 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	1c59      	adds	r1, r3, #1
 8009624:	61b9      	str	r1, [r7, #24]
 8009626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962a:	4413      	add	r3, r2
 800962c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00d      	beq.n	8009654 <put_fat+0xa4>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	b25b      	sxtb	r3, r3
 800963e:	f003 030f 	and.w	r3, r3, #15
 8009642:	b25a      	sxtb	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	b25b      	sxtb	r3, r3
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	b25b      	sxtb	r3, r3
 800964c:	4313      	orrs	r3, r2
 800964e:	b25b      	sxtb	r3, r3
 8009650:	b2db      	uxtb	r3, r3
 8009652:	e001      	b.n	8009658 <put_fat+0xa8>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	0a5b      	lsrs	r3, r3, #9
 800966a:	4413      	add	r3, r2
 800966c:	4619      	mov	r1, r3
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7ff fdc8 	bl	8009204 <move_window>
 8009674:	4603      	mov	r3, r0
 8009676:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009678:	7ffb      	ldrb	r3, [r7, #31]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d17c      	bne.n	8009778 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968a:	4413      	add	r3, r2
 800968c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <put_fat+0xf0>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	091b      	lsrs	r3, r3, #4
 800969c:	b2db      	uxtb	r3, r3
 800969e:	e00e      	b.n	80096be <put_fat+0x10e>
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	b25b      	sxtb	r3, r3
 80096a6:	f023 030f 	bic.w	r3, r3, #15
 80096aa:	b25a      	sxtb	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	0a1b      	lsrs	r3, r3, #8
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	f003 030f 	and.w	r3, r3, #15
 80096b6:	b25b      	sxtb	r3, r3
 80096b8:	4313      	orrs	r3, r2
 80096ba:	b25b      	sxtb	r3, r3
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	70da      	strb	r2, [r3, #3]
			break;
 80096c8:	e05b      	b.n	8009782 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	0a1b      	lsrs	r3, r3, #8
 80096d2:	4413      	add	r3, r2
 80096d4:	4619      	mov	r1, r3
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff fd94 	bl	8009204 <move_window>
 80096dc:	4603      	mov	r3, r0
 80096de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096e0:	7ffb      	ldrb	r3, [r7, #31]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d14a      	bne.n	800977c <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80096f4:	4413      	add	r3, r2
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	b292      	uxth	r2, r2
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fa84 	bl	8008c0a <st_word>
			fs->wflag = 1;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	70da      	strb	r2, [r3, #3]
			break;
 8009708:	e03b      	b.n	8009782 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	09db      	lsrs	r3, r3, #7
 8009712:	4413      	add	r3, r2
 8009714:	4619      	mov	r1, r3
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f7ff fd74 	bl	8009204 <move_window>
 800971c:	4603      	mov	r3, r0
 800971e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009720:	7ffb      	ldrb	r3, [r7, #31]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d12c      	bne.n	8009780 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b04      	cmp	r3, #4
 800972c:	d012      	beq.n	8009754 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009742:	4413      	add	r3, r2
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff f962 	bl	8008a0e <ld_dword>
 800974a:	4603      	mov	r3, r0
 800974c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009750:	4323      	orrs	r3, r4
 8009752:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009762:	4413      	add	r3, r2
 8009764:	6879      	ldr	r1, [r7, #4]
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fa6a 	bl	8008c40 <st_dword>
			fs->wflag = 1;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	70da      	strb	r2, [r3, #3]
			break;
 8009772:	e006      	b.n	8009782 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009774:	bf00      	nop
 8009776:	e004      	b.n	8009782 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009778:	bf00      	nop
 800977a:	e002      	b.n	8009782 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800977c:	bf00      	nop
 800977e:	e000      	b.n	8009782 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009780:	bf00      	nop
		}
	}
	return res;
 8009782:	7ffb      	ldrb	r3, [r7, #31]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3724      	adds	r7, #36	@ 0x24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd90      	pop	{r4, r7, pc}

0800978c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	@ 0x28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	3b02      	subs	r3, #2
 800979c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	3b02      	subs	r3, #2
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d301      	bcc.n	80097ae <find_bitmap+0x22>
 80097aa:	2300      	movs	r3, #0
 80097ac:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	61fb      	str	r3, [r7, #28]
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	2300      	movs	r3, #0
 80097b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	0b1b      	lsrs	r3, r3, #12
 80097c2:	4413      	add	r3, r2
 80097c4:	4619      	mov	r1, r3
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fd1c 	bl	8009204 <move_window>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <find_bitmap+0x4c>
 80097d2:	f04f 33ff 	mov.w	r3, #4294967295
 80097d6:	e051      	b.n	800987c <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	08db      	lsrs	r3, r3, #3
 80097dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e0:	623b      	str	r3, [r7, #32]
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	2201      	movs	r2, #1
 80097ea:	fa02 f303 	lsl.w	r3, r2, r3
 80097ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	4413      	add	r3, r2
 80097f8:	3338      	adds	r3, #56	@ 0x38
 80097fa:	781a      	ldrb	r2, [r3, #0]
 80097fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009800:	4013      	ands	r3, r2
 8009802:	74fb      	strb	r3, [r7, #19]
 8009804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	3301      	adds	r3, #1
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	3b02      	subs	r3, #2
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	429a      	cmp	r2, r3
 800981e:	d307      	bcc.n	8009830 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8009820:	2300      	movs	r3, #0
 8009822:	61fb      	str	r3, [r7, #28]
 8009824:	2300      	movs	r3, #0
 8009826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800982a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800982e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8009830:	7cfb      	ldrb	r3, [r7, #19]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	3301      	adds	r3, #1
 800983a:	617b      	str	r3, [r7, #20]
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	429a      	cmp	r2, r3
 8009842:	d106      	bne.n	8009852 <find_bitmap+0xc6>
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	3302      	adds	r3, #2
 8009848:	e018      	b.n	800987c <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	61bb      	str	r3, [r7, #24]
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8009852:	69fa      	ldr	r2, [r7, #28]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	429a      	cmp	r2, r3
 8009858:	d101      	bne.n	800985e <find_bitmap+0xd2>
 800985a:	2300      	movs	r3, #0
 800985c:	e00e      	b.n	800987c <find_bitmap+0xf0>
			} while (bm);
 800985e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1c5      	bne.n	80097f2 <find_bitmap+0x66>
			bm = 1;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	3301      	adds	r3, #1
 8009870:	623b      	str	r3, [r7, #32]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009878:	d3bb      	bcc.n	80097f2 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800987a:	e79e      	b.n	80097ba <find_bitmap+0x2e>
	}
}
 800987c:	4618      	mov	r0, r3
 800987e:	3728      	adds	r7, #40	@ 0x28
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	3b02      	subs	r3, #2
 8009896:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	0b1b      	lsrs	r3, r3, #12
 80098a0:	4413      	add	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	08db      	lsrs	r3, r3, #3
 80098a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ac:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f003 0307 	and.w	r3, r3, #7
 80098b4:	2201      	movs	r2, #1
 80098b6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ba:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	617a      	str	r2, [r7, #20]
 80098c2:	4619      	mov	r1, r3
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f7ff fc9d 	bl	8009204 <move_window>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <change_bitmap+0x50>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e03d      	b.n	8009950 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	4413      	add	r3, r2
 80098da:	3338      	adds	r3, #56	@ 0x38
 80098dc:	781a      	ldrb	r2, [r3, #0]
 80098de:	7ffb      	ldrb	r3, [r7, #31]
 80098e0:	4013      	ands	r3, r2
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bf14      	ite	ne
 80098e8:	2301      	movne	r3, #1
 80098ea:	2300      	moveq	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d101      	bne.n	80098fa <change_bitmap+0x76>
 80098f6:	2302      	movs	r3, #2
 80098f8:	e02a      	b.n	8009950 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	4413      	add	r3, r2
 8009900:	3338      	adds	r3, #56	@ 0x38
 8009902:	781a      	ldrb	r2, [r3, #0]
 8009904:	7ffb      	ldrb	r3, [r7, #31]
 8009906:	4053      	eors	r3, r2
 8009908:	b2d9      	uxtb	r1, r3
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	4413      	add	r3, r2
 8009910:	3338      	adds	r3, #56	@ 0x38
 8009912:	460a      	mov	r2, r1
 8009914:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3b01      	subs	r3, #1
 8009920:	607b      	str	r3, [r7, #4]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <change_bitmap+0xa8>
 8009928:	2300      	movs	r3, #0
 800992a:	e011      	b.n	8009950 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800992c:	7ffb      	ldrb	r3, [r7, #31]
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	77fb      	strb	r3, [r7, #31]
 8009932:	7ffb      	ldrb	r3, [r7, #31]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1cd      	bne.n	80098d4 <change_bitmap+0x50>
			bm = 1;
 8009938:	2301      	movs	r3, #1
 800993a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	3301      	adds	r3, #1
 8009940:	61bb      	str	r3, [r7, #24]
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009948:	d3c4      	bcc.n	80098d4 <change_bitmap+0x50>
		i = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800994e:	e7b5      	b.n	80098bc <change_bitmap+0x38>
	}
}
 8009950:	4618      	mov	r0, r3
 8009952:	3720      	adds	r7, #32
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	79db      	ldrb	r3, [r3, #7]
 8009964:	2b03      	cmp	r3, #3
 8009966:	d121      	bne.n	80099ac <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	613b      	str	r3, [r7, #16]
 8009974:	e014      	b.n	80099a0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	3301      	adds	r3, #1
 800997e:	461a      	mov	r2, r3
 8009980:	6979      	ldr	r1, [r7, #20]
 8009982:	f7ff fe15 	bl	80095b0 <put_fat>
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <fill_first_frag+0x3c>
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	e00c      	b.n	80099ae <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	3301      	adds	r3, #1
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3b01      	subs	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1e7      	bne.n	8009976 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b086      	sub	sp, #24
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80099c2:	e020      	b.n	8009a06 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	1c59      	adds	r1, r3, #1
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d905      	bls.n	80099e6 <fill_last_frag+0x30>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	3302      	adds	r3, #2
 80099e4:	e000      	b.n	80099e8 <fill_last_frag+0x32>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	461a      	mov	r2, r3
 80099ea:	f7ff fde1 	bl	80095b0 <put_fat>
 80099ee:	4603      	mov	r3, r0
 80099f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <fill_last_frag+0x46>
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	e009      	b.n	8009a10 <fill_last_frag+0x5a>
		obj->n_frag--;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	1e5a      	subs	r2, r3, #1
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1da      	bne.n	80099c4 <fill_last_frag+0xe>
	}
	return FR_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08a      	sub	sp, #40	@ 0x28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d904      	bls.n	8009a46 <remove_chain+0x2e>
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d301      	bcc.n	8009a4a <remove_chain+0x32>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e096      	b.n	8009b78 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d014      	beq.n	8009a7a <remove_chain+0x62>
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d103      	bne.n	8009a60 <remove_chain+0x48>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	79db      	ldrb	r3, [r3, #7]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d00c      	beq.n	8009a7a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	69b8      	ldr	r0, [r7, #24]
 8009a68:	f7ff fda2 	bl	80095b0 <put_fat>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009a70:	7ffb      	ldrb	r3, [r7, #31]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <remove_chain+0x62>
 8009a76:	7ffb      	ldrb	r3, [r7, #31]
 8009a78:	e07e      	b.n	8009b78 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009a7a:	68b9      	ldr	r1, [r7, #8]
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7ff fc7d 	bl	800937c <get_fat>
 8009a82:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d055      	beq.n	8009b36 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d101      	bne.n	8009a94 <remove_chain+0x7c>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e071      	b.n	8009b78 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d101      	bne.n	8009aa0 <remove_chain+0x88>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e06b      	b.n	8009b78 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d00b      	beq.n	8009ac0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	68b9      	ldr	r1, [r7, #8]
 8009aac:	69b8      	ldr	r0, [r7, #24]
 8009aae:	f7ff fd7f 	bl	80095b0 <put_fat>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009ab6:	7ffb      	ldrb	r3, [r7, #31]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <remove_chain+0xa8>
 8009abc:	7ffb      	ldrb	r3, [r7, #31]
 8009abe:	e05b      	b.n	8009b78 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	699a      	ldr	r2, [r3, #24]
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	3b02      	subs	r3, #2
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d20b      	bcs.n	8009ae6 <remove_chain+0xce>
			fs->free_clst++;
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	791b      	ldrb	r3, [r3, #4]
 8009adc:	f043 0301 	orr.w	r3, r3, #1
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d102      	bne.n	8009af6 <remove_chain+0xde>
			ecl = nxt;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	623b      	str	r3, [r7, #32]
 8009af4:	e017      	b.n	8009b26 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d10f      	bne.n	8009b1e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009afe:	6a3a      	ldr	r2, [r7, #32]
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	2300      	movs	r3, #0
 8009b08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b0a:	69b8      	ldr	r0, [r7, #24]
 8009b0c:	f7ff feba 	bl	8009884 <change_bitmap>
 8009b10:	4603      	mov	r3, r0
 8009b12:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009b14:	7ffb      	ldrb	r3, [r7, #31]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <remove_chain+0x106>
 8009b1a:	7ffb      	ldrb	r3, [r7, #31]
 8009b1c:	e02c      	b.n	8009b78 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	623b      	str	r3, [r7, #32]
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d3a2      	bcc.n	8009a7a <remove_chain+0x62>
 8009b34:	e000      	b.n	8009b38 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009b36:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d11a      	bne.n	8009b76 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d103      	bne.n	8009b4e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	71da      	strb	r2, [r3, #7]
 8009b4c:	e013      	b.n	8009b76 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	79db      	ldrb	r3, [r3, #7]
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d10f      	bne.n	8009b76 <remove_chain+0x15e>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d30a      	bcc.n	8009b76 <remove_chain+0x15e>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	689a      	ldr	r2, [r3, #8]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	4413      	add	r3, r2
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d802      	bhi.n	8009b76 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2202      	movs	r2, #2
 8009b74:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3728      	adds	r7, #40	@ 0x28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10d      	bne.n	8009bb2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d004      	beq.n	8009bac <create_chain+0x2c>
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d31b      	bcc.n	8009be4 <create_chain+0x64>
 8009bac:	2301      	movs	r3, #1
 8009bae:	61bb      	str	r3, [r7, #24]
 8009bb0:	e018      	b.n	8009be4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fbe1 	bl	800937c <get_fat>
 8009bba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d801      	bhi.n	8009bc6 <create_chain+0x46>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e0d9      	b.n	8009d7a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bcc:	d101      	bne.n	8009bd2 <create_chain+0x52>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	e0d3      	b.n	8009d7a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d201      	bcs.n	8009be0 <create_chain+0x60>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	e0cc      	b.n	8009d7a <create_chain+0x1fa>
		scl = clst;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d164      	bne.n	8009cb6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009bec:	2201      	movs	r2, #1
 8009bee:	69b9      	ldr	r1, [r7, #24]
 8009bf0:	6938      	ldr	r0, [r7, #16]
 8009bf2:	f7ff fdcb 	bl	800978c <find_bitmap>
 8009bf6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <create_chain+0x86>
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c04:	d101      	bne.n	8009c0a <create_chain+0x8a>
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	e0b7      	b.n	8009d7a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	69f9      	ldr	r1, [r7, #28]
 8009c10:	6938      	ldr	r0, [r7, #16]
 8009c12:	f7ff fe37 	bl	8009884 <change_bitmap>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d101      	bne.n	8009c24 <create_chain+0xa4>
 8009c20:	2301      	movs	r3, #1
 8009c22:	e0aa      	b.n	8009d7a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d102      	bne.n	8009c30 <create_chain+0xb0>
 8009c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2e:	e0a4      	b.n	8009d7a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	71da      	strb	r2, [r3, #7]
 8009c3c:	e011      	b.n	8009c62 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	79db      	ldrb	r3, [r3, #7]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d10d      	bne.n	8009c62 <create_chain+0xe2>
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	69fa      	ldr	r2, [r7, #28]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d008      	beq.n	8009c62 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	1ad2      	subs	r2, r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2203      	movs	r2, #3
 8009c60:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	79db      	ldrb	r3, [r3, #7]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d064      	beq.n	8009d34 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d10b      	bne.n	8009c8c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <create_chain+0x104>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	3301      	adds	r3, #1
 8009c82:	e000      	b.n	8009c86 <create_chain+0x106>
 8009c84:	2302      	movs	r3, #2
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	61d3      	str	r3, [r2, #28]
 8009c8a:	e053      	b.n	8009d34 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <create_chain+0x11a>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff fe89 	bl	80099b6 <fill_last_frag>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d142      	bne.n	8009d34 <create_chain+0x1b4>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	61da      	str	r2, [r3, #28]
 8009cb4:	e03e      	b.n	8009d34 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	69fa      	ldr	r2, [r7, #28]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d307      	bcc.n	8009cda <create_chain+0x15a>
				ncl = 2;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d901      	bls.n	8009cda <create_chain+0x15a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e04f      	b.n	8009d7a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009cda:	69f9      	ldr	r1, [r7, #28]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff fb4d 	bl	800937c <get_fat>
 8009ce2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00e      	beq.n	8009d08 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d003      	beq.n	8009cf8 <create_chain+0x178>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf6:	d101      	bne.n	8009cfc <create_chain+0x17c>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	e03e      	b.n	8009d7a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009cfc:	69fa      	ldr	r2, [r7, #28]
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d1da      	bne.n	8009cba <create_chain+0x13a>
 8009d04:	2300      	movs	r3, #0
 8009d06:	e038      	b.n	8009d7a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009d08:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0e:	69f9      	ldr	r1, [r7, #28]
 8009d10:	6938      	ldr	r0, [r7, #16]
 8009d12:	f7ff fc4d 	bl	80095b0 <put_fat>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d109      	bne.n	8009d34 <create_chain+0x1b4>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d006      	beq.n	8009d34 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f7ff fc40 	bl	80095b0 <put_fat>
 8009d30:	4603      	mov	r3, r0
 8009d32:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d116      	bne.n	8009d68 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	69fa      	ldr	r2, [r7, #28]
 8009d3e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	699a      	ldr	r2, [r3, #24]
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	3b02      	subs	r3, #2
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d804      	bhi.n	8009d58 <create_chain+0x1d8>
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	1e5a      	subs	r2, r3, #1
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	791b      	ldrb	r3, [r3, #4]
 8009d5c:	f043 0301 	orr.w	r3, r3, #1
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	711a      	strb	r2, [r3, #4]
 8009d66:	e007      	b.n	8009d78 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d102      	bne.n	8009d74 <create_chain+0x1f4>
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	e000      	b.n	8009d76 <create_chain+0x1f6>
 8009d74:	2301      	movs	r3, #1
 8009d76:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009d78:	69fb      	ldr	r3, [r7, #28]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d82:	b5b0      	push	{r4, r5, r7, lr}
 8009d84:	b088      	sub	sp, #32
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d98:	3304      	adds	r3, #4
 8009d9a:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da0:	f04f 0000 	mov.w	r0, #0
 8009da4:	f04f 0100 	mov.w	r1, #0
 8009da8:	0a50      	lsrs	r0, r2, #9
 8009daa:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009dae:	0a59      	lsrs	r1, r3, #9
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	895b      	ldrh	r3, [r3, #10]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	2200      	movs	r2, #0
 8009db8:	461c      	mov	r4, r3
 8009dba:	4615      	mov	r5, r2
 8009dbc:	4622      	mov	r2, r4
 8009dbe:	462b      	mov	r3, r5
 8009dc0:	f7f6 ff72 	bl	8000ca8 <__aeabi_uldivmod>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4613      	mov	r3, r2
 8009dca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	1d1a      	adds	r2, r3, #4
 8009dd0:	61ba      	str	r2, [r7, #24]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <clmt_clust+0x5e>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	e010      	b.n	8009e02 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8009de0:	69fa      	ldr	r2, [r7, #28]
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d307      	bcc.n	8009df8 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8009de8:	69fa      	ldr	r2, [r7, #28]
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	61fb      	str	r3, [r7, #28]
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	3304      	adds	r3, #4
 8009df4:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009df6:	e7e9      	b.n	8009dcc <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8009df8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	4413      	add	r3, r2
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3720      	adds	r7, #32
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bdb0      	pop	{r4, r5, r7, pc}

08009e0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b086      	sub	sp, #24
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d102      	bne.n	8009e28 <dir_sdi+0x1e>
 8009e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e26:	e001      	b.n	8009e2c <dir_sdi+0x22>
 8009e28:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d904      	bls.n	8009e3c <dir_sdi+0x32>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	f003 031f 	and.w	r3, r3, #31
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <dir_sdi+0x36>
		return FR_INT_ERR;
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e066      	b.n	8009f0e <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d109      	bne.n	8009e66 <dir_sdi+0x5c>
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d905      	bls.n	8009e66 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10c      	bne.n	8009e86 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	095b      	lsrs	r3, r3, #5
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	8912      	ldrh	r2, [r2, #8]
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d301      	bcc.n	8009e7c <dir_sdi+0x72>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e048      	b.n	8009f0e <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e84:	e029      	b.n	8009eda <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	895b      	ldrh	r3, [r3, #10]
 8009e8a:	025b      	lsls	r3, r3, #9
 8009e8c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e8e:	e019      	b.n	8009ec4 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6979      	ldr	r1, [r7, #20]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7ff fa71 	bl	800937c <get_fat>
 8009e9a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea2:	d101      	bne.n	8009ea8 <dir_sdi+0x9e>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e032      	b.n	8009f0e <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d904      	bls.n	8009eb8 <dir_sdi+0xae>
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d301      	bcc.n	8009ebc <dir_sdi+0xb2>
 8009eb8:	2302      	movs	r3, #2
 8009eba:	e028      	b.n	8009f0e <dir_sdi+0x104>
			ofs -= csz;
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d2e1      	bcs.n	8009e90 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8009ecc:	6979      	ldr	r1, [r7, #20]
 8009ece:	6938      	ldr	r0, [r7, #16]
 8009ed0:	f7ff fa34 	bl	800933c <clust2sect>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <dir_sdi+0xe2>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e010      	b.n	8009f0e <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	0a5b      	lsrs	r3, r3, #9
 8009ef4:	441a      	add	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	441a      	add	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b086      	sub	sp, #24
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2a:	3320      	adds	r3, #32
 8009f2c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00b      	beq.n	8009f4e <dir_next+0x38>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b04      	cmp	r3, #4
 8009f3c:	d102      	bne.n	8009f44 <dir_next+0x2e>
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f42:	e001      	b.n	8009f48 <dir_next+0x32>
 8009f44:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d801      	bhi.n	8009f52 <dir_next+0x3c>
 8009f4e:	2304      	movs	r3, #4
 8009f50:	e0b2      	b.n	800a0b8 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f040 80a0 	bne.w	800a09e <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10b      	bne.n	8009f88 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	095b      	lsrs	r3, r3, #5
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	8912      	ldrh	r2, [r2, #8]
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	f0c0 8090 	bcc.w	800a09e <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f84:	2304      	movs	r3, #4
 8009f86:	e097      	b.n	800a0b8 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	0a5b      	lsrs	r3, r3, #9
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	8952      	ldrh	r2, [r2, #10]
 8009f90:	3a01      	subs	r2, #1
 8009f92:	4013      	ands	r3, r2
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f040 8082 	bne.w	800a09e <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	f7ff f9ea 	bl	800937c <get_fat>
 8009fa8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d801      	bhi.n	8009fb4 <dir_next+0x9e>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e081      	b.n	800a0b8 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fba:	d101      	bne.n	8009fc0 <dir_next+0xaa>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e07b      	b.n	800a0b8 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d35f      	bcc.n	800a08a <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d104      	bne.n	8009fda <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009fd6:	2304      	movs	r3, #4
 8009fd8:	e06e      	b.n	800a0b8 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	f7ff fdcc 	bl	8009b80 <create_chain>
 8009fe8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <dir_next+0xde>
 8009ff0:	2307      	movs	r3, #7
 8009ff2:	e061      	b.n	800a0b8 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <dir_next+0xe8>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e05c      	b.n	800a0b8 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a004:	d101      	bne.n	800a00a <dir_next+0xf4>
 800a006:	2301      	movs	r3, #1
 800a008:	e056      	b.n	800a0b8 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	79db      	ldrb	r3, [r3, #7]
 800a00e:	f043 0304 	orr.w	r3, r3, #4
 800a012:	b2da      	uxtb	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7ff f8af 	bl	800917c <sync_window>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <dir_next+0x112>
 800a024:	2301      	movs	r3, #1
 800a026:	e047      	b.n	800a0b8 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3338      	adds	r3, #56	@ 0x38
 800a02c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a030:	2100      	movs	r1, #0
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fed9 	bl	8008dea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a038:	2300      	movs	r3, #0
 800a03a:	613b      	str	r3, [r7, #16]
 800a03c:	6979      	ldr	r1, [r7, #20]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff f97c 	bl	800933c <clust2sect>
 800a044:	4602      	mov	r2, r0
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	635a      	str	r2, [r3, #52]	@ 0x34
 800a04a:	e012      	b.n	800a072 <dir_next+0x15c>
						fs->wflag = 1;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7ff f892 	bl	800917c <sync_window>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <dir_next+0x14c>
 800a05e:	2301      	movs	r3, #1
 800a060:	e02a      	b.n	800a0b8 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	3301      	adds	r3, #1
 800a066:	613b      	str	r3, [r7, #16]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	635a      	str	r2, [r3, #52]	@ 0x34
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	895b      	ldrh	r3, [r3, #10]
 800a076:	461a      	mov	r2, r3
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d3e6      	bcc.n	800a04c <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	1ad2      	subs	r2, r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800a090:	6979      	ldr	r1, [r7, #20]
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff f952 	bl	800933c <clust2sect>
 800a098:	4602      	mov	r2, r0
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b0:	441a      	add	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff fe99 	bl	8009e0a <dir_sdi>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d140      	bne.n	800a164 <dir_alloc+0xa4>
		n = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7ff f889 	bl	8009204 <move_window>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d132      	bne.n	800a162 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b04      	cmp	r3, #4
 800a102:	d108      	bne.n	800a116 <dir_alloc+0x56>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	b25b      	sxtb	r3, r3
 800a10c:	43db      	mvns	r3, r3
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	09db      	lsrs	r3, r3, #7
 800a112:	b2db      	uxtb	r3, r3
 800a114:	e00f      	b.n	800a136 <dir_alloc+0x76>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2be5      	cmp	r3, #229	@ 0xe5
 800a11e:	d004      	beq.n	800a12a <dir_alloc+0x6a>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <dir_alloc+0x6e>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <dir_alloc+0x70>
 800a12e:	2300      	movs	r3, #0
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	3301      	adds	r3, #1
 800a13e:	613b      	str	r3, [r7, #16]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d102      	bne.n	800a14e <dir_alloc+0x8e>
 800a148:	e00c      	b.n	800a164 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a14a:	2300      	movs	r3, #0
 800a14c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a14e:	2101      	movs	r1, #1
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fee0 	bl	8009f16 <dir_next>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0c2      	beq.n	800a0e6 <dir_alloc+0x26>
 800a160:	e000      	b.n	800a164 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a162:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b04      	cmp	r3, #4
 800a168:	d101      	bne.n	800a16e <dir_alloc+0xae>
 800a16a:	2307      	movs	r3, #7
 800a16c:	75fb      	strb	r3, [r7, #23]
	return res;
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	331a      	adds	r3, #26
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fc28 	bl	80089dc <ld_word>
 800a18c:	4603      	mov	r3, r0
 800a18e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b03      	cmp	r3, #3
 800a196:	d109      	bne.n	800a1ac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	3314      	adds	r3, #20
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fc1d 	bl	80089dc <ld_word>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	041b      	lsls	r3, r3, #16
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	60f8      	str	r0, [r7, #12]
 800a1be:	60b9      	str	r1, [r7, #8]
 800a1c0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	331a      	adds	r3, #26
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	b292      	uxth	r2, r2
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe fd1c 	bl	8008c0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d109      	bne.n	800a1ee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f103 0214 	add.w	r2, r3, #20
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	0c1b      	lsrs	r3, r3, #16
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	f7fe fd0e 	bl	8008c0a <st_word>
	}
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a1f8:	b590      	push	{r4, r7, lr}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	331a      	adds	r3, #26
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe fbe8 	bl	80089dc <ld_word>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <cmp_lfn+0x1e>
 800a212:	2300      	movs	r3, #0
 800a214:	e059      	b.n	800a2ca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a21e:	1e5a      	subs	r2, r3, #1
 800a220:	4613      	mov	r3, r2
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	4413      	add	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a22c:	2301      	movs	r3, #1
 800a22e:	81fb      	strh	r3, [r7, #14]
 800a230:	2300      	movs	r3, #0
 800a232:	613b      	str	r3, [r7, #16]
 800a234:	e033      	b.n	800a29e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a236:	4a27      	ldr	r2, [pc, #156]	@ (800a2d4 <cmp_lfn+0xdc>)
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	4413      	add	r3, r2
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	4413      	add	r3, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f7fe fbc9 	bl	80089dc <ld_word>
 800a24a:	4603      	mov	r3, r0
 800a24c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a24e:	89fb      	ldrh	r3, [r7, #14]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01a      	beq.n	800a28a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2bfe      	cmp	r3, #254	@ 0xfe
 800a258:	d812      	bhi.n	800a280 <cmp_lfn+0x88>
 800a25a:	89bb      	ldrh	r3, [r7, #12]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f003 f9c1 	bl	800d5e4 <ff_wtoupper>
 800a262:	4603      	mov	r3, r0
 800a264:	461c      	mov	r4, r3
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	617a      	str	r2, [r7, #20]
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f003 f9b5 	bl	800d5e4 <ff_wtoupper>
 800a27a:	4603      	mov	r3, r0
 800a27c:	429c      	cmp	r4, r3
 800a27e:	d001      	beq.n	800a284 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a280:	2300      	movs	r3, #0
 800a282:	e022      	b.n	800a2ca <cmp_lfn+0xd2>
			}
			wc = uc;
 800a284:	89bb      	ldrh	r3, [r7, #12]
 800a286:	81fb      	strh	r3, [r7, #14]
 800a288:	e006      	b.n	800a298 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a28a:	89bb      	ldrh	r3, [r7, #12]
 800a28c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a290:	4293      	cmp	r3, r2
 800a292:	d001      	beq.n	800a298 <cmp_lfn+0xa0>
 800a294:	2300      	movs	r3, #0
 800a296:	e018      	b.n	800a2ca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	3301      	adds	r3, #1
 800a29c:	613b      	str	r3, [r7, #16]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b0c      	cmp	r3, #12
 800a2a2:	d9c8      	bls.n	800a236 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <cmp_lfn+0xd0>
 800a2b0:	89fb      	ldrh	r3, [r7, #14]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d008      	beq.n	800a2c8 <cmp_lfn+0xd0>
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	4413      	add	r3, r2
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <cmp_lfn+0xd0>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e000      	b.n	800a2ca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a2c8:	2301      	movs	r3, #1
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd90      	pop	{r4, r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0801204c 	.word	0x0801204c

0800a2d8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	331a      	adds	r3, #26
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fe fb78 	bl	80089dc <ld_word>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <pick_lfn+0x1e>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e04d      	b.n	800a392 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2fe:	1e5a      	subs	r2, r3, #1
 800a300:	4613      	mov	r3, r2
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	4413      	add	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a30c:	2301      	movs	r3, #1
 800a30e:	81fb      	strh	r3, [r7, #14]
 800a310:	2300      	movs	r3, #0
 800a312:	613b      	str	r3, [r7, #16]
 800a314:	e028      	b.n	800a368 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a316:	4a21      	ldr	r2, [pc, #132]	@ (800a39c <pick_lfn+0xc4>)
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	4413      	add	r3, r2
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	4413      	add	r3, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe fb59 	bl	80089dc <ld_word>
 800a32a:	4603      	mov	r3, r0
 800a32c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a32e:	89fb      	ldrh	r3, [r7, #14]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00f      	beq.n	800a354 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2bfe      	cmp	r3, #254	@ 0xfe
 800a338:	d901      	bls.n	800a33e <pick_lfn+0x66>
 800a33a:	2300      	movs	r3, #0
 800a33c:	e029      	b.n	800a392 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a33e:	89bb      	ldrh	r3, [r7, #12]
 800a340:	81fb      	strh	r3, [r7, #14]
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	617a      	str	r2, [r7, #20]
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4413      	add	r3, r2
 800a34e:	89fa      	ldrh	r2, [r7, #14]
 800a350:	801a      	strh	r2, [r3, #0]
 800a352:	e006      	b.n	800a362 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a354:	89bb      	ldrh	r3, [r7, #12]
 800a356:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d001      	beq.n	800a362 <pick_lfn+0x8a>
 800a35e:	2300      	movs	r3, #0
 800a360:	e017      	b.n	800a392 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	3301      	adds	r3, #1
 800a366:	613b      	str	r3, [r7, #16]
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	2b0c      	cmp	r3, #12
 800a36c:	d9d3      	bls.n	800a316 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00a      	beq.n	800a390 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	2bfe      	cmp	r3, #254	@ 0xfe
 800a37e:	d901      	bls.n	800a384 <pick_lfn+0xac>
 800a380:	2300      	movs	r3, #0
 800a382:	e006      	b.n	800a392 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	4413      	add	r3, r2
 800a38c:	2200      	movs	r2, #0
 800a38e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a390:	2301      	movs	r3, #1
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	0801204c 	.word	0x0801204c

0800a3a0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	71fb      	strb	r3, [r7, #7]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	330d      	adds	r3, #13
 800a3ba:	79ba      	ldrb	r2, [r7, #6]
 800a3bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	330b      	adds	r3, #11
 800a3c2:	220f      	movs	r2, #15
 800a3c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	330c      	adds	r3, #12
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	331a      	adds	r3, #26
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe fc18 	bl	8008c0a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a3da:	79fb      	ldrb	r3, [r7, #7]
 800a3dc:	1e5a      	subs	r2, r3, #1
 800a3de:	4613      	mov	r3, r2
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	4413      	add	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	82fb      	strh	r3, [r7, #22]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a3f2:	8afb      	ldrh	r3, [r7, #22]
 800a3f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d007      	beq.n	800a40c <put_lfn+0x6c>
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	61fa      	str	r2, [r7, #28]
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	4413      	add	r3, r2
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a40c:	4a17      	ldr	r2, [pc, #92]	@ (800a46c <put_lfn+0xcc>)
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	4413      	add	r3, r2
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	461a      	mov	r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	4413      	add	r3, r2
 800a41a:	8afa      	ldrh	r2, [r7, #22]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe fbf3 	bl	8008c0a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a424:	8afb      	ldrh	r3, [r7, #22]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d102      	bne.n	800a430 <put_lfn+0x90>
 800a42a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a42e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	3301      	adds	r3, #1
 800a434:	61bb      	str	r3, [r7, #24]
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b0c      	cmp	r3, #12
 800a43a:	d9da      	bls.n	800a3f2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a43c:	8afb      	ldrh	r3, [r7, #22]
 800a43e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a442:	4293      	cmp	r3, r2
 800a444:	d006      	beq.n	800a454 <put_lfn+0xb4>
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	4413      	add	r3, r2
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d103      	bne.n	800a45c <put_lfn+0xbc>
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a45a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	79fa      	ldrb	r2, [r7, #7]
 800a460:	701a      	strb	r2, [r3, #0]
}
 800a462:	bf00      	nop
 800a464:	3720      	adds	r7, #32
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	0801204c 	.word	0x0801204c

0800a470 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b08c      	sub	sp, #48	@ 0x30
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a47e:	220b      	movs	r2, #11
 800a480:	68b9      	ldr	r1, [r7, #8]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f7fe fc90 	bl	8008da8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	d92b      	bls.n	800a4e6 <gen_numname+0x76>
		sr = seq;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a492:	e022      	b.n	800a4da <gen_numname+0x6a>
			wc = *lfn++;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	1c9a      	adds	r2, r3, #2
 800a498:	607a      	str	r2, [r7, #4]
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a49e:	2300      	movs	r3, #0
 800a4a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4a2:	e017      	b.n	800a4d4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	005a      	lsls	r2, r3, #1
 800a4a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	4413      	add	r3, r2
 800a4b0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a4b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a4b4:	085b      	lsrs	r3, r3, #1
 800a4b6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d005      	beq.n	800a4ce <gen_numname+0x5e>
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a4c8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a4cc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d6:	2b0f      	cmp	r3, #15
 800a4d8:	d9e4      	bls.n	800a4a4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1d8      	bne.n	800a494 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a4e6:	2307      	movs	r3, #7
 800a4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	3330      	adds	r3, #48	@ 0x30
 800a4f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a4fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4fe:	2b39      	cmp	r3, #57	@ 0x39
 800a500:	d904      	bls.n	800a50c <gen_numname+0x9c>
 800a502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a506:	3307      	adds	r3, #7
 800a508:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50e:	1e5a      	subs	r2, r3, #1
 800a510:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a512:	3330      	adds	r3, #48	@ 0x30
 800a514:	443b      	add	r3, r7
 800a516:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a51a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	091b      	lsrs	r3, r3, #4
 800a522:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1df      	bne.n	800a4ea <gen_numname+0x7a>
	ns[i] = '~';
 800a52a:	f107 0214 	add.w	r2, r7, #20
 800a52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a530:	4413      	add	r3, r2
 800a532:	227e      	movs	r2, #126	@ 0x7e
 800a534:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a536:	2300      	movs	r3, #0
 800a538:	627b      	str	r3, [r7, #36]	@ 0x24
 800a53a:	e016      	b.n	800a56a <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a540:	4413      	add	r3, r2
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	2b80      	cmp	r3, #128	@ 0x80
 800a546:	d90d      	bls.n	800a564 <gen_numname+0xf4>
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	4413      	add	r3, r2
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2bff      	cmp	r3, #255	@ 0xff
 800a552:	d007      	beq.n	800a564 <gen_numname+0xf4>
			if (j == i - 1) break;
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a556:	3b01      	subs	r3, #1
 800a558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d010      	beq.n	800a580 <gen_numname+0x110>
			j++;
 800a55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a560:	3301      	adds	r3, #1
 800a562:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	3301      	adds	r3, #1
 800a568:	627b      	str	r3, [r7, #36]	@ 0x24
 800a56a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56e:	429a      	cmp	r2, r3
 800a570:	d207      	bcs.n	800a582 <gen_numname+0x112>
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a576:	4413      	add	r3, r2
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	d1de      	bne.n	800a53c <gen_numname+0xcc>
 800a57e:	e000      	b.n	800a582 <gen_numname+0x112>
			if (j == i - 1) break;
 800a580:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a584:	2b07      	cmp	r3, #7
 800a586:	d807      	bhi.n	800a598 <gen_numname+0x128>
 800a588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a58e:	3330      	adds	r3, #48	@ 0x30
 800a590:	443b      	add	r3, r7
 800a592:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a596:	e000      	b.n	800a59a <gen_numname+0x12a>
 800a598:	2120      	movs	r1, #32
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	460a      	mov	r2, r1
 800a5a6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5aa:	2b07      	cmp	r3, #7
 800a5ac:	d9e9      	bls.n	800a582 <gen_numname+0x112>
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	3730      	adds	r7, #48	@ 0x30
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a5c4:	230b      	movs	r3, #11
 800a5c6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	0852      	lsrs	r2, r2, #1
 800a5ce:	01db      	lsls	r3, r3, #7
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	1c59      	adds	r1, r3, #1
 800a5d8:	6079      	str	r1, [r7, #4]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	4413      	add	r3, r2
 800a5de:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	60bb      	str	r3, [r7, #8]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1ed      	bne.n	800a5c8 <sum_sfn+0x10>
	return sum;
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b087      	sub	sp, #28
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3301      	adds	r3, #1
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	3301      	adds	r3, #1
 800a60a:	015b      	lsls	r3, r3, #5
 800a60c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a60e:	2300      	movs	r3, #0
 800a610:	827b      	strh	r3, [r7, #18]
 800a612:	2300      	movs	r3, #0
 800a614:	617b      	str	r3, [r7, #20]
 800a616:	e015      	b.n	800a644 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d103      	bne.n	800a626 <xdir_sum+0x2c>
			i++;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	3301      	adds	r3, #1
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	e00b      	b.n	800a63e <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a626:	8a7b      	ldrh	r3, [r7, #18]
 800a628:	b29a      	uxth	r2, r3
 800a62a:	0852      	lsrs	r2, r2, #1
 800a62c:	03db      	lsls	r3, r3, #15
 800a62e:	4313      	orrs	r3, r2
 800a630:	b29b      	uxth	r3, r3
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	440a      	add	r2, r1
 800a638:	7812      	ldrb	r2, [r2, #0]
 800a63a:	4413      	add	r3, r2
 800a63c:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	3301      	adds	r3, #1
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d3e5      	bcc.n	800a618 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a64c:	8a7b      	ldrh	r3, [r7, #18]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a666:	e01b      	b.n	800a6a0 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a668:	89bb      	ldrh	r3, [r7, #12]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f002 ffba 	bl	800d5e4 <ff_wtoupper>
 800a670:	4603      	mov	r3, r0
 800a672:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a674:	89fb      	ldrh	r3, [r7, #14]
 800a676:	b29a      	uxth	r2, r3
 800a678:	0852      	lsrs	r2, r2, #1
 800a67a:	03db      	lsls	r3, r3, #15
 800a67c:	4313      	orrs	r3, r2
 800a67e:	b29a      	uxth	r2, r3
 800a680:	89bb      	ldrh	r3, [r7, #12]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	b29b      	uxth	r3, r3
 800a686:	4413      	add	r3, r2
 800a688:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a68a:	89fb      	ldrh	r3, [r7, #14]
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	0852      	lsrs	r2, r2, #1
 800a690:	03db      	lsls	r3, r3, #15
 800a692:	4313      	orrs	r3, r2
 800a694:	b29a      	uxth	r2, r3
 800a696:	89bb      	ldrh	r3, [r7, #12]
 800a698:	0a1b      	lsrs	r3, r3, #8
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	4413      	add	r3, r2
 800a69e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	1c9a      	adds	r2, r3, #2
 800a6a4:	607a      	str	r2, [r7, #4]
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	81bb      	strh	r3, [r7, #12]
 800a6aa:	89bb      	ldrh	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1db      	bne.n	800a668 <xname_sum+0xe>
	}
	return sum;
 800a6b0:	89fb      	ldrh	r3, [r7, #14]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b086      	sub	sp, #24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a6c8:	2340      	movs	r3, #64	@ 0x40
 800a6ca:	613b      	str	r3, [r7, #16]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]
 800a6d0:	e03a      	b.n	800a748 <get_xdir_info+0x8e>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f003 031f 	and.w	r3, r3, #31
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d102      	bne.n	800a6e2 <get_xdir_info+0x28>
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	3302      	adds	r3, #2
 800a6e0:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe f977 	bl	80089dc <ld_word>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f002 ff18 	bl	800d528 <ff_convert>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
 800a6fc:	897b      	ldrh	r3, [r7, #10]
 800a6fe:	2bff      	cmp	r3, #255	@ 0xff
 800a700:	d90a      	bls.n	800a718 <get_xdir_info+0x5e>
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
 800a702:	897b      	ldrh	r3, [r7, #10]
 800a704:	0a1b      	lsrs	r3, r3, #8
 800a706:	b299      	uxth	r1, r3
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	617a      	str	r2, [r7, #20]
 800a70e:	b2c9      	uxtb	r1, r1
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	4413      	add	r3, r2
 800a714:	460a      	mov	r2, r1
 800a716:	769a      	strb	r2, [r3, #26]
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800a718:	897b      	ldrh	r3, [r7, #10]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <get_xdir_info+0x6a>
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2bfe      	cmp	r3, #254	@ 0xfe
 800a722:	d902      	bls.n	800a72a <get_xdir_info+0x70>
 800a724:	2300      	movs	r3, #0
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	e015      	b.n	800a756 <get_xdir_info+0x9c>
		fno->fname[di++] = (char)w;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	617a      	str	r2, [r7, #20]
 800a730:	897a      	ldrh	r2, [r7, #10]
 800a732:	b2d1      	uxtb	r1, r2
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	4413      	add	r3, r2
 800a738:	460a      	mov	r2, r1
 800a73a:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	3302      	adds	r3, #2
 800a740:	613b      	str	r3, [r7, #16]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3301      	adds	r3, #1
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3323      	adds	r3, #35	@ 0x23
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4293      	cmp	r3, r2
 800a754:	d3bd      	bcc.n	800a6d2 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d106      	bne.n	800a76a <get_xdir_info+0xb0>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	617a      	str	r2, [r7, #20]
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	4413      	add	r3, r2
 800a766:	223f      	movs	r2, #63	@ 0x3f
 800a768:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	4413      	add	r3, r2
 800a770:	331a      	adds	r3, #26
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2200      	movs	r2, #0
 800a77a:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	791a      	ldrb	r2, [r3, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	7b1b      	ldrb	r3, [r3, #12]
 800a788:	f003 0310 	and.w	r3, r3, #16
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d107      	bne.n	800a7a0 <get_xdir_info+0xe6>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3338      	adds	r3, #56	@ 0x38
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe f95d 	bl	8008a54 <ld_qword>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	e003      	b.n	800a7a8 <get_xdir_info+0xee>
 800a7a0:	f04f 0200 	mov.w	r2, #0
 800a7a4:	f04f 0300 	mov.w	r3, #0
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	330c      	adds	r3, #12
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe f912 	bl	80089dc <ld_word>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	330e      	adds	r3, #14
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe f909 	bl	80089dc <ld_word>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	811a      	strh	r2, [r3, #8]
}
 800a7d2:	bf00      	nop
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a7dc:	b590      	push	{r4, r7, lr}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	f7fe fd04 	bl	8009204 <move_window>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <load_xdir+0x2e>
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	e09f      	b.n	800a94a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2b85      	cmp	r3, #133	@ 0x85
 800a812:	d001      	beq.n	800a818 <load_xdir+0x3c>
 800a814:	2302      	movs	r3, #2
 800a816:	e098      	b.n	800a94a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a81c:	2220      	movs	r2, #32
 800a81e:	4619      	mov	r1, r3
 800a820:	6938      	ldr	r0, [r7, #16]
 800a822:	f7fe fac1 	bl	8008da8 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	3301      	adds	r3, #1
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	3301      	adds	r3, #1
 800a82e:	015b      	lsls	r3, r3, #5
 800a830:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b5f      	cmp	r3, #95	@ 0x5f
 800a836:	d903      	bls.n	800a840 <load_xdir+0x64>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a83e:	d901      	bls.n	800a844 <load_xdir+0x68>
 800a840:	2302      	movs	r3, #2
 800a842:	e082      	b.n	800a94a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800a844:	2100      	movs	r1, #0
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff fb65 	bl	8009f16 <dir_next>
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <load_xdir+0x7e>
 800a856:	7bfb      	ldrb	r3, [r7, #15]
 800a858:	e077      	b.n	800a94a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f7fe fccd 	bl	8009204 <move_window>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <load_xdir+0x9c>
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	e068      	b.n	800a94a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a880:	d001      	beq.n	800a886 <load_xdir+0xaa>
 800a882:	2302      	movs	r3, #2
 800a884:	e061      	b.n	800a94a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f103 0020 	add.w	r0, r3, #32
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a890:	2220      	movs	r2, #32
 800a892:	4619      	mov	r1, r3
 800a894:	f7fe fa88 	bl	8008da8 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	3323      	adds	r3, #35	@ 0x23
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	332c      	adds	r3, #44	@ 0x2c
 800a8a0:	4a2c      	ldr	r2, [pc, #176]	@ (800a954 <load_xdir+0x178>)
 800a8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a6:	08db      	lsrs	r3, r3, #3
 800a8a8:	015b      	lsls	r3, r3, #5
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d201      	bcs.n	800a8b4 <load_xdir+0xd8>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	e04a      	b.n	800a94a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800a8b4:	2340      	movs	r3, #64	@ 0x40
 800a8b6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fb2b 	bl	8009f16 <dir_next>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <load_xdir+0xf2>
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	e03d      	b.n	800a94a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f7fe fc93 	bl	8009204 <move_window>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <load_xdir+0x110>
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ea:	e02e      	b.n	800a94a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	2bc1      	cmp	r3, #193	@ 0xc1
 800a8f4:	d001      	beq.n	800a8fa <load_xdir+0x11e>
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	e027      	b.n	800a94a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a900:	d208      	bcs.n	800a914 <load_xdir+0x138>
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	18d0      	adds	r0, r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a90c:	2220      	movs	r2, #32
 800a90e:	4619      	mov	r1, r3
 800a910:	f7fe fa4a 	bl	8008da8 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	3320      	adds	r3, #32
 800a918:	617b      	str	r3, [r7, #20]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d3ca      	bcc.n	800a8b8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a928:	d80e      	bhi.n	800a948 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800a92a:	6938      	ldr	r0, [r7, #16]
 800a92c:	f7ff fe65 	bl	800a5fa <xdir_sum>
 800a930:	4603      	mov	r3, r0
 800a932:	461c      	mov	r4, r3
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	3302      	adds	r3, #2
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe f84f 	bl	80089dc <ld_word>
 800a93e:	4603      	mov	r3, r0
 800a940:	429c      	cmp	r4, r3
 800a942:	d001      	beq.n	800a948 <load_xdir+0x16c>
 800a944:	2302      	movs	r3, #2
 800a946:	e000      	b.n	800a94a <load_xdir+0x16e>
	}
	return FR_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	371c      	adds	r7, #28
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd90      	pop	{r4, r7, pc}
 800a952:	bf00      	nop
 800a954:	88888889 	.word	0x88888889

0800a958 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800a958:	b5b0      	push	{r4, r5, r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6808      	ldr	r0, [r1, #0]
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800a96a:	6839      	ldr	r1, [r7, #0]
 800a96c:	6a08      	ldr	r0, [r1, #32]
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800a976:	b2c8      	uxtb	r0, r1
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800a980:	2000      	movs	r0, #0
 800a982:	460c      	mov	r4, r1
 800a984:	4605      	mov	r5, r0
 800a986:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800a98a:	2300      	movs	r3, #0
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff fa32 	bl	8009e0a <dir_sdi>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d104      	bne.n	800a9ba <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7ff ff13 	bl	800a7dc <load_xdir>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bdb0      	pop	{r4, r5, r7, pc}

0800a9c4 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800a9c4:	b590      	push	{r4, r7, lr}
 800a9c6:	b087      	sub	sp, #28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	1c9c      	adds	r4, r3, #2
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7ff fe0e 	bl	800a5fa <xdir_sum>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f7fe f911 	bl	8008c0a <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7ff fa06 	bl	8009e0a <dir_sdi>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800aa02:	e026      	b.n	800aa52 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4610      	mov	r0, r2
 800aa10:	f7fe fbf8 	bl	8009204 <move_window>
 800aa14:	4603      	mov	r3, r0
 800aa16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d11d      	bne.n	800aa5a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa22:	2220      	movs	r2, #32
 800aa24:	68f9      	ldr	r1, [r7, #12]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe f9be 	bl	8008da8 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2201      	movs	r2, #1
 800aa32:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	613b      	str	r3, [r7, #16]
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00e      	beq.n	800aa5e <store_xdir+0x9a>
		dirb += SZDIRE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3320      	adds	r3, #32
 800aa44:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800aa46:	2100      	movs	r1, #0
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff fa64 	bl	8009f16 <dir_next>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d0d5      	beq.n	800aa04 <store_xdir+0x40>
 800aa58:	e002      	b.n	800aa60 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800aa5a:	bf00      	nop
 800aa5c:	e000      	b.n	800aa60 <store_xdir+0x9c>
		if (--nent == 0) break;
 800aa5e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800aa60:	7dfb      	ldrb	r3, [r7, #23]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <store_xdir+0xa8>
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <store_xdir+0xac>
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	e000      	b.n	800aa72 <store_xdir+0xae>
 800aa70:	2302      	movs	r3, #2
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd90      	pop	{r4, r7, pc}

0800aa7a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800aa7a:	b590      	push	{r4, r7, lr}
 800aa7c:	b085      	sub	sp, #20
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800aa84:	2240      	movs	r2, #64	@ 0x40
 800aa86:	2100      	movs	r1, #0
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7fe f9ae 	bl	8008dea <mem_set>
	dirb[XDIR_Type] = 0x85;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2285      	movs	r2, #133	@ 0x85
 800aa92:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3320      	adds	r3, #32
 800aa98:	22c0      	movs	r2, #192	@ 0xc0
 800aa9a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	72bb      	strb	r3, [r7, #10]
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	72fb      	strb	r3, [r7, #11]
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	813b      	strh	r3, [r7, #8]
 800aaa8:	2340      	movs	r3, #64	@ 0x40
 800aaaa:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	60fa      	str	r2, [r7, #12]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	4413      	add	r3, r2
 800aab6:	22c1      	movs	r2, #193	@ 0xc1
 800aab8:	701a      	strb	r2, [r3, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	1c5a      	adds	r2, r3, #1
 800aabe:	60fa      	str	r2, [r7, #12]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	4413      	add	r3, r2
 800aac4:	2200      	movs	r2, #0
 800aac6:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800aac8:	893b      	ldrh	r3, [r7, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <create_xdir+0x6c>
 800aace:	7abb      	ldrb	r3, [r7, #10]
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	4413      	add	r3, r2
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	813b      	strh	r3, [r7, #8]
 800aada:	893b      	ldrh	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <create_xdir+0x6c>
 800aae0:	7abb      	ldrb	r3, [r7, #10]
 800aae2:	3301      	adds	r3, #1
 800aae4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	893a      	ldrh	r2, [r7, #8]
 800aaee:	4611      	mov	r1, r2
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fe f88a 	bl	8008c0a <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3302      	adds	r3, #2
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f003 031f 	and.w	r3, r3, #31
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e0      	bne.n	800aac8 <create_xdir+0x4e>
		nb++;
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800ab0c:	7abb      	ldrb	r3, [r7, #10]
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4413      	add	r3, r2
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1c8      	bne.n	800aaac <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3323      	adds	r3, #35	@ 0x23
 800ab1e:	7aba      	ldrb	r2, [r7, #10]
 800ab20:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3301      	adds	r3, #1
 800ab26:	7afa      	ldrb	r2, [r7, #11]
 800ab28:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800ab30:	6838      	ldr	r0, [r7, #0]
 800ab32:	f7ff fd92 	bl	800a65a <xname_sum>
 800ab36:	4603      	mov	r3, r0
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7fe f865 	bl	8008c0a <st_word>
}
 800ab40:	bf00      	nop
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd90      	pop	{r4, r7, pc}

0800ab48 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ab52:	2304      	movs	r3, #4
 800ab54:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ab5c:	23ff      	movs	r3, #255	@ 0xff
 800ab5e:	757b      	strb	r3, [r7, #21]
 800ab60:	23ff      	movs	r3, #255	@ 0xff
 800ab62:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ab64:	e09f      	b.n	800aca6 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6938      	ldr	r0, [r7, #16]
 800ab6e:	f7fe fb49 	bl	8009204 <move_window>
 800ab72:	4603      	mov	r3, r0
 800ab74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 809a 	bne.w	800acb2 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ab86:	7dbb      	ldrb	r3, [r7, #22]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	75fb      	strb	r3, [r7, #23]
 800ab90:	e096      	b.n	800acc0 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	d118      	bne.n	800abcc <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ab9a:	7dbb      	ldrb	r3, [r7, #22]
 800ab9c:	2b85      	cmp	r3, #133	@ 0x85
 800ab9e:	d179      	bne.n	800ac94 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff fe17 	bl	800a7dc <load_xdir>
 800abae:	4603      	mov	r3, r0
 800abb0:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d17e      	bne.n	800acb6 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	3304      	adds	r3, #4
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	719a      	strb	r2, [r3, #6]
					}
					break;
 800abca:	e074      	b.n	800acb6 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abd0:	330b      	adds	r3, #11
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abd8:	73fb      	strb	r3, [r7, #15]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	7bfa      	ldrb	r2, [r7, #15]
 800abde:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800abe0:	7dbb      	ldrb	r3, [r7, #22]
 800abe2:	2be5      	cmp	r3, #229	@ 0xe5
 800abe4:	d00e      	beq.n	800ac04 <dir_read+0xbc>
 800abe6:	7dbb      	ldrb	r3, [r7, #22]
 800abe8:	2b2e      	cmp	r3, #46	@ 0x2e
 800abea:	d00b      	beq.n	800ac04 <dir_read+0xbc>
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	f023 0320 	bic.w	r3, r3, #32
 800abf2:	2b08      	cmp	r3, #8
 800abf4:	bf0c      	ite	eq
 800abf6:	2301      	moveq	r3, #1
 800abf8:	2300      	movne	r3, #0
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	461a      	mov	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d002      	beq.n	800ac0a <dir_read+0xc2>
				ord = 0xFF;
 800ac04:	23ff      	movs	r3, #255	@ 0xff
 800ac06:	757b      	strb	r3, [r7, #21]
 800ac08:	e044      	b.n	800ac94 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	2b0f      	cmp	r3, #15
 800ac0e:	d12f      	bne.n	800ac70 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ac10:	7dbb      	ldrb	r3, [r7, #22]
 800ac12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00d      	beq.n	800ac36 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac1e:	7b5b      	ldrb	r3, [r3, #13]
 800ac20:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ac22:	7dbb      	ldrb	r3, [r7, #22]
 800ac24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac28:	75bb      	strb	r3, [r7, #22]
 800ac2a:	7dbb      	ldrb	r3, [r7, #22]
 800ac2c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ac36:	7dba      	ldrb	r2, [r7, #22]
 800ac38:	7d7b      	ldrb	r3, [r7, #21]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d115      	bne.n	800ac6a <dir_read+0x122>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac42:	330d      	adds	r3, #13
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	7d3a      	ldrb	r2, [r7, #20]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d10e      	bne.n	800ac6a <dir_read+0x122>
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac54:	4619      	mov	r1, r3
 800ac56:	4610      	mov	r0, r2
 800ac58:	f7ff fb3e 	bl	800a2d8 <pick_lfn>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <dir_read+0x122>
 800ac62:	7d7b      	ldrb	r3, [r7, #21]
 800ac64:	3b01      	subs	r3, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	e000      	b.n	800ac6c <dir_read+0x124>
 800ac6a:	23ff      	movs	r3, #255	@ 0xff
 800ac6c:	757b      	strb	r3, [r7, #21]
 800ac6e:	e011      	b.n	800ac94 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ac70:	7d7b      	ldrb	r3, [r7, #21]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d109      	bne.n	800ac8a <dir_read+0x142>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7ff fc9c 	bl	800a5b8 <sum_sfn>
 800ac80:	4603      	mov	r3, r0
 800ac82:	461a      	mov	r2, r3
 800ac84:	7d3b      	ldrb	r3, [r7, #20]
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d017      	beq.n	800acba <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac90:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800ac92:	e012      	b.n	800acba <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ac94:	2100      	movs	r1, #0
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff f93d 	bl	8009f16 <dir_next>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10b      	bne.n	800acbe <dir_read+0x176>
	while (dp->sect) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f47f af5b 	bne.w	800ab66 <dir_read+0x1e>
 800acb0:	e006      	b.n	800acc0 <dir_read+0x178>
		if (res != FR_OK) break;
 800acb2:	bf00      	nop
 800acb4:	e004      	b.n	800acc0 <dir_read+0x178>
					break;
 800acb6:	bf00      	nop
 800acb8:	e002      	b.n	800acc0 <dir_read+0x178>
					break;
 800acba:	bf00      	nop
 800acbc:	e000      	b.n	800acc0 <dir_read+0x178>
		if (res != FR_OK) break;
 800acbe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <dir_read+0x184>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800accc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800acd6:	b590      	push	{r4, r7, lr}
 800acd8:	b089      	sub	sp, #36	@ 0x24
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ace4:	2100      	movs	r1, #0
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7ff f88f 	bl	8009e0a <dir_sdi>
 800acec:	4603      	mov	r3, r0
 800acee:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800acf0:	7ffb      	ldrb	r3, [r7, #31]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <dir_find+0x24>
 800acf6:	7ffb      	ldrb	r3, [r7, #31]
 800acf8:	e113      	b.n	800af22 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d165      	bne.n	800adce <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fca7 	bl	800a65a <xname_sum>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ad10:	e050      	b.n	800adb4 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	3324      	adds	r3, #36	@ 0x24
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fd fe5f 	bl	80089dc <ld_word>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	461a      	mov	r2, r3
 800ad22:	893b      	ldrh	r3, [r7, #8]
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d144      	bne.n	800adb2 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ad30:	76fb      	strb	r3, [r7, #27]
 800ad32:	2340      	movs	r3, #64	@ 0x40
 800ad34:	617b      	str	r3, [r7, #20]
 800ad36:	2300      	movs	r3, #0
 800ad38:	613b      	str	r3, [r7, #16]
 800ad3a:	e029      	b.n	800ad90 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f003 031f 	and.w	r3, r3, #31
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <dir_find+0x76>
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	3302      	adds	r3, #2
 800ad4a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	691a      	ldr	r2, [r3, #16]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	4413      	add	r3, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fd fe41 	bl	80089dc <ld_word>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f002 fc41 	bl	800d5e4 <ff_wtoupper>
 800ad62:	4603      	mov	r3, r0
 800ad64:	461c      	mov	r4, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	68da      	ldr	r2, [r3, #12]
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	005b      	lsls	r3, r3, #1
 800ad6e:	4413      	add	r3, r2
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f002 fc36 	bl	800d5e4 <ff_wtoupper>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	429c      	cmp	r4, r3
 800ad7c:	d10c      	bne.n	800ad98 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ad7e:	7efb      	ldrb	r3, [r7, #27]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	76fb      	strb	r3, [r7, #27]
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	3302      	adds	r3, #2
 800ad88:	617b      	str	r3, [r7, #20]
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	613b      	str	r3, [r7, #16]
 800ad90:	7efb      	ldrb	r3, [r7, #27]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1d2      	bne.n	800ad3c <dir_find+0x66>
 800ad96:	e000      	b.n	800ad9a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ad98:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ad9a:	7efb      	ldrb	r3, [r7, #27]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d109      	bne.n	800adb4 <dir_find+0xde>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	4413      	add	r3, r2
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00b      	beq.n	800adc8 <dir_find+0xf2>
 800adb0:	e000      	b.n	800adb4 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800adb2:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800adb4:	2100      	movs	r1, #0
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff fec6 	bl	800ab48 <dir_read>
 800adbc:	4603      	mov	r3, r0
 800adbe:	77fb      	strb	r3, [r7, #31]
 800adc0:	7ffb      	ldrb	r3, [r7, #31]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0a5      	beq.n	800ad12 <dir_find+0x3c>
 800adc6:	e000      	b.n	800adca <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800adc8:	bf00      	nop
		}
		return res;
 800adca:	7ffb      	ldrb	r3, [r7, #31]
 800adcc:	e0a9      	b.n	800af22 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800adce:	23ff      	movs	r3, #255	@ 0xff
 800add0:	773b      	strb	r3, [r7, #28]
 800add2:	7f3b      	ldrb	r3, [r7, #28]
 800add4:	777b      	strb	r3, [r7, #29]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f04f 32ff 	mov.w	r2, #4294967295
 800addc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade2:	4619      	mov	r1, r3
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f7fe fa0d 	bl	8009204 <move_window>
 800adea:	4603      	mov	r3, r0
 800adec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800adee:	7ffb      	ldrb	r3, [r7, #31]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f040 8090 	bne.w	800af16 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800adfe:	7fbb      	ldrb	r3, [r7, #30]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <dir_find+0x134>
 800ae04:	2304      	movs	r3, #4
 800ae06:	77fb      	strb	r3, [r7, #31]
 800ae08:	e08a      	b.n	800af20 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae0e:	330b      	adds	r3, #11
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae16:	72fb      	strb	r3, [r7, #11]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	7afa      	ldrb	r2, [r7, #11]
 800ae1c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ae1e:	7fbb      	ldrb	r3, [r7, #30]
 800ae20:	2be5      	cmp	r3, #229	@ 0xe5
 800ae22:	d007      	beq.n	800ae34 <dir_find+0x15e>
 800ae24:	7afb      	ldrb	r3, [r7, #11]
 800ae26:	f003 0308 	and.w	r3, r3, #8
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d009      	beq.n	800ae42 <dir_find+0x16c>
 800ae2e:	7afb      	ldrb	r3, [r7, #11]
 800ae30:	2b0f      	cmp	r3, #15
 800ae32:	d006      	beq.n	800ae42 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae34:	23ff      	movs	r3, #255	@ 0xff
 800ae36:	777b      	strb	r3, [r7, #29]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ae40:	e05e      	b.n	800af00 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ae42:	7afb      	ldrb	r3, [r7, #11]
 800ae44:	2b0f      	cmp	r3, #15
 800ae46:	d136      	bne.n	800aeb6 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ae4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d154      	bne.n	800af00 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae56:	7fbb      	ldrb	r3, [r7, #30]
 800ae58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00d      	beq.n	800ae7c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae64:	7b5b      	ldrb	r3, [r3, #13]
 800ae66:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ae68:	7fbb      	ldrb	r3, [r7, #30]
 800ae6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae6e:	77bb      	strb	r3, [r7, #30]
 800ae70:	7fbb      	ldrb	r3, [r7, #30]
 800ae72:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ae7c:	7fba      	ldrb	r2, [r7, #30]
 800ae7e:	7f7b      	ldrb	r3, [r7, #29]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d115      	bne.n	800aeb0 <dir_find+0x1da>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae88:	330d      	adds	r3, #13
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	7f3a      	ldrb	r2, [r7, #28]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d10e      	bne.n	800aeb0 <dir_find+0x1da>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	f7ff f9ab 	bl	800a1f8 <cmp_lfn>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <dir_find+0x1da>
 800aea8:	7f7b      	ldrb	r3, [r7, #29]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	e000      	b.n	800aeb2 <dir_find+0x1dc>
 800aeb0:	23ff      	movs	r3, #255	@ 0xff
 800aeb2:	777b      	strb	r3, [r7, #29]
 800aeb4:	e024      	b.n	800af00 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aeb6:	7f7b      	ldrb	r3, [r7, #29]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <dir_find+0x1fa>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff fb79 	bl	800a5b8 <sum_sfn>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	7f3b      	ldrb	r3, [r7, #28]
 800aecc:	4293      	cmp	r3, r2
 800aece:	d024      	beq.n	800af1a <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10a      	bne.n	800aef4 <dir_find+0x21e>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3340      	adds	r3, #64	@ 0x40
 800aee6:	220b      	movs	r2, #11
 800aee8:	4619      	mov	r1, r3
 800aeea:	f7fd ff99 	bl	8008e20 <mem_cmp>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d014      	beq.n	800af1e <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aef4:	23ff      	movs	r3, #255	@ 0xff
 800aef6:	777b      	strb	r3, [r7, #29]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f04f 32ff 	mov.w	r2, #4294967295
 800aefe:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800af00:	2100      	movs	r1, #0
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff f807 	bl	8009f16 <dir_next>
 800af08:	4603      	mov	r3, r0
 800af0a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800af0c:	7ffb      	ldrb	r3, [r7, #31]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f43f af65 	beq.w	800adde <dir_find+0x108>
 800af14:	e004      	b.n	800af20 <dir_find+0x24a>
		if (res != FR_OK) break;
 800af16:	bf00      	nop
 800af18:	e002      	b.n	800af20 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af1a:	bf00      	nop
 800af1c:	e000      	b.n	800af20 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af1e:	bf00      	nop

	return res;
 800af20:	7ffb      	ldrb	r3, [r7, #31]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3724      	adds	r7, #36	@ 0x24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd90      	pop	{r4, r7, pc}
	...

0800af2c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800af30:	b0a0      	sub	sp, #128	@ 0x80
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800af42:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <dir_register+0x22>
 800af4a:	2306      	movs	r3, #6
 800af4c:	e18e      	b.n	800b26c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800af4e:	2300      	movs	r3, #0
 800af50:	677b      	str	r3, [r7, #116]	@ 0x74
 800af52:	e002      	b.n	800af5a <dir_register+0x2e>
 800af54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af56:	3301      	adds	r3, #1
 800af58:	677b      	str	r3, [r7, #116]	@ 0x74
 800af5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	4413      	add	r3, r2
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1f4      	bne.n	800af54 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800af6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	2b04      	cmp	r3, #4
 800af70:	f040 809f 	bne.w	800b0b2 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800af74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af76:	330e      	adds	r3, #14
 800af78:	4aa2      	ldr	r2, [pc, #648]	@ (800b204 <dir_register+0x2d8>)
 800af7a:	fba2 2303 	umull	r2, r3, r2, r3
 800af7e:	08db      	lsrs	r3, r3, #3
 800af80:	3302      	adds	r3, #2
 800af82:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800af84:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff f89a 	bl	800a0c0 <dir_alloc>
 800af8c:	4603      	mov	r3, r0
 800af8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800af92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <dir_register+0x74>
 800af9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af9e:	e165      	b.n	800b26c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afa6:	3b01      	subs	r3, #1
 800afa8:	015b      	lsls	r3, r3, #5
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d072      	beq.n	800b09e <dir_register+0x172>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	79db      	ldrb	r3, [r3, #7]
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d06c      	beq.n	800b09e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800afca:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800afcc:	8949      	ldrh	r1, [r1, #10]
 800afce:	0249      	lsls	r1, r1, #9
 800afd0:	2000      	movs	r0, #0
 800afd2:	460c      	mov	r4, r1
 800afd4:	4605      	mov	r5, r0
 800afd6:	eb12 0804 	adds.w	r8, r2, r4
 800afda:	eb43 0905 	adc.w	r9, r3, r5
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fe fcb6 	bl	8009958 <fill_first_frag>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800aff2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <dir_register+0xd4>
 800affa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800affe:	e135      	b.n	800b26c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b006:	f04f 32ff 	mov.w	r2, #4294967295
 800b00a:	4619      	mov	r1, r3
 800b00c:	f7fe fcd3 	bl	80099b6 <fill_last_frag>
 800b010:	4603      	mov	r3, r0
 800b012:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b016:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <dir_register+0xf8>
 800b01e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b022:	e123      	b.n	800b26c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	f107 0308 	add.w	r3, r7, #8
 800b02a:	4611      	mov	r1, r2
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff fc93 	bl	800a958 <load_obj_dir>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b038:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <dir_register+0x11a>
 800b040:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b044:	e112      	b.n	800b26c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b054:	4608      	mov	r0, r1
 800b056:	f7fd fe1f 	bl	8008c98 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b05a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b068:	4608      	mov	r0, r1
 800b06a:	f7fd fe15 	bl	8008c98 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	79da      	ldrb	r2, [r3, #7]
 800b072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	3321      	adds	r3, #33	@ 0x21
 800b078:	f042 0201 	orr.w	r2, r2, #1
 800b07c:	b2d2      	uxtb	r2, r2
 800b07e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b080:	f107 0308 	add.w	r3, r7, #8
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff fc9d 	bl	800a9c4 <store_xdir>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b090:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <dir_register+0x172>
 800b098:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b09c:	e0e6      	b.n	800b26c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b09e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0a0:	691a      	ldr	r2, [r3, #16]
 800b0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f7ff fce6 	bl	800aa7a <create_xdir>
		return FR_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e0dc      	b.n	800b26c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b0b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b0bc:	220c      	movs	r2, #12
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fd fe72 	bl	8008da8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b0c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d033      	beq.n	800b138 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2240      	movs	r2, #64	@ 0x40
 800b0d4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800b0d8:	2301      	movs	r3, #1
 800b0da:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b0dc:	e016      	b.n	800b10c <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800b0e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800b0ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0ee:	f7ff f9bf 	bl	800a470 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff fdef 	bl	800acd6 <dir_find>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800b0fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800b106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b108:	3301      	adds	r3, #1
 800b10a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b10c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b10e:	2b63      	cmp	r3, #99	@ 0x63
 800b110:	d9e5      	bls.n	800b0de <dir_register+0x1b2>
 800b112:	e000      	b.n	800b116 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800b114:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b116:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b118:	2b64      	cmp	r3, #100	@ 0x64
 800b11a:	d101      	bne.n	800b120 <dir_register+0x1f4>
 800b11c:	2307      	movs	r3, #7
 800b11e:	e0a5      	b.n	800b26c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b120:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b124:	2b04      	cmp	r3, #4
 800b126:	d002      	beq.n	800b12e <dir_register+0x202>
 800b128:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b12c:	e09e      	b.n	800b26c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b12e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b138:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d007      	beq.n	800b154 <dir_register+0x228>
 800b144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b146:	330c      	adds	r3, #12
 800b148:	4a2f      	ldr	r2, [pc, #188]	@ (800b208 <dir_register+0x2dc>)
 800b14a:	fba2 2303 	umull	r2, r3, r2, r3
 800b14e:	089b      	lsrs	r3, r3, #2
 800b150:	3301      	adds	r3, #1
 800b152:	e000      	b.n	800b156 <dir_register+0x22a>
 800b154:	2301      	movs	r3, #1
 800b156:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b158:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7fe ffb0 	bl	800a0c0 <dir_alloc>
 800b160:	4603      	mov	r3, r0
 800b162:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b166:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d14f      	bne.n	800b20e <dir_register+0x2e2>
 800b16e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b170:	3b01      	subs	r3, #1
 800b172:	673b      	str	r3, [r7, #112]	@ 0x70
 800b174:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b176:	2b00      	cmp	r3, #0
 800b178:	d049      	beq.n	800b20e <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b17e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b180:	015b      	lsls	r3, r3, #5
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7fe fe3f 	bl	8009e0a <dir_sdi>
 800b18c:	4603      	mov	r3, r0
 800b18e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b192:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b196:	2b00      	cmp	r3, #0
 800b198:	d139      	bne.n	800b20e <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3340      	adds	r3, #64	@ 0x40
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fa0a 	bl	800a5b8 <sum_sfn>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b1b2:	f7fe f827 	bl	8009204 <move_window>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800b1bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d123      	bne.n	800b20c <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b1c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1c6:	68d8      	ldr	r0, [r3, #12]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b1cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800b1d4:	f7ff f8e4 	bl	800a3a0 <put_lfn>
				fs->wflag = 1;
 800b1d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1da:	2201      	movs	r2, #1
 800b1dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b1de:	2100      	movs	r1, #0
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7fe fe98 	bl	8009f16 <dir_next>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800b1ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10c      	bne.n	800b20e <dir_register+0x2e2>
 800b1f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800b1fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1d4      	bne.n	800b1aa <dir_register+0x27e>
 800b200:	e005      	b.n	800b20e <dir_register+0x2e2>
 800b202:	bf00      	nop
 800b204:	88888889 	.word	0x88888889
 800b208:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b20c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b20e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b212:	2b00      	cmp	r3, #0
 800b214:	d128      	bne.n	800b268 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21a:	4619      	mov	r1, r3
 800b21c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b21e:	f7fd fff1 	bl	8009204 <move_window>
 800b222:	4603      	mov	r3, r0
 800b224:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b228:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d11b      	bne.n	800b268 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b234:	2220      	movs	r2, #32
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fd fdd6 	bl	8008dea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3340      	adds	r3, #64	@ 0x40
 800b246:	220b      	movs	r2, #11
 800b248:	4619      	mov	r1, r3
 800b24a:	f7fd fdad 	bl	8008da8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b258:	330c      	adds	r3, #12
 800b25a:	f002 0218 	and.w	r2, r2, #24
 800b25e:	b2d2      	uxtb	r2, r2
 800b260:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b264:	2201      	movs	r2, #1
 800b266:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b268:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3780      	adds	r7, #128	@ 0x80
 800b270:	46bd      	mov	sp, r7
 800b272:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b276:	bf00      	nop

0800b278 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b278:	b5b0      	push	{r4, r5, r7, lr}
 800b27a:	b088      	sub	sp, #32
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2200      	movs	r2, #0
 800b28c:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b292:	2b00      	cmp	r3, #0
 800b294:	f000 80e7 	beq.w	800b466 <get_fileinfo+0x1ee>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	d106      	bne.n	800b2ae <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff fa07 	bl	800a6ba <get_xdir_info>
		return;
 800b2ac:	e0dc      	b.n	800b468 <get_fileinfo+0x1f0>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b6:	d040      	beq.n	800b33a <get_fileinfo+0xc2>
			i = j = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	61bb      	str	r3, [r7, #24]
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b2c0:	e029      	b.n	800b316 <get_fileinfo+0x9e>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b2c2:	89fb      	ldrh	r3, [r7, #14]
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 f92e 	bl	800d528 <ff_convert>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b2d0:	89fb      	ldrh	r3, [r7, #14]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d102      	bne.n	800b2dc <get_fileinfo+0x64>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	61fb      	str	r3, [r7, #28]
 800b2da:	e028      	b.n	800b32e <get_fileinfo+0xb6>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800b2dc:	89fb      	ldrh	r3, [r7, #14]
 800b2de:	2bff      	cmp	r3, #255	@ 0xff
 800b2e0:	d90a      	bls.n	800b2f8 <get_fileinfo+0x80>
					fno->fname[i++] = (char)(w >> 8);
 800b2e2:	89fb      	ldrh	r3, [r7, #14]
 800b2e4:	0a1b      	lsrs	r3, r3, #8
 800b2e6:	b299      	uxth	r1, r3
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	61fa      	str	r2, [r7, #28]
 800b2ee:	b2c9      	uxtb	r1, r1
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	460a      	mov	r2, r1
 800b2f6:	769a      	strb	r2, [r3, #26]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2bfe      	cmp	r3, #254	@ 0xfe
 800b2fc:	d902      	bls.n	800b304 <get_fileinfo+0x8c>
 800b2fe:	2300      	movs	r3, #0
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	e014      	b.n	800b32e <get_fileinfo+0xb6>
				fno->fname[i++] = (TCHAR)w;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	61fa      	str	r2, [r7, #28]
 800b30a:	89fa      	ldrh	r2, [r7, #14]
 800b30c:	b2d1      	uxtb	r1, r2
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4413      	add	r3, r2
 800b312:	460a      	mov	r2, r1
 800b314:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	68da      	ldr	r2, [r3, #12]
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	1c59      	adds	r1, r3, #1
 800b31e:	61b9      	str	r1, [r7, #24]
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	4413      	add	r3, r2
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	81fb      	strh	r3, [r7, #14]
 800b328:	89fb      	ldrh	r3, [r7, #14]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1c9      	bne.n	800b2c2 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	4413      	add	r3, r2
 800b334:	331a      	adds	r3, #26
 800b336:	2200      	movs	r2, #0
 800b338:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	61bb      	str	r3, [r7, #24]
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	4413      	add	r3, r2
 800b348:	331a      	adds	r3, #26
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b34e:	e04d      	b.n	800b3ec <get_fileinfo+0x174>
		c = (TCHAR)dp->dir[i++];
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	1c59      	adds	r1, r3, #1
 800b358:	61f9      	str	r1, [r7, #28]
 800b35a:	4413      	add	r3, r2
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b360:	7dfb      	ldrb	r3, [r7, #23]
 800b362:	2b20      	cmp	r3, #32
 800b364:	d041      	beq.n	800b3ea <get_fileinfo+0x172>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b366:	7dfb      	ldrb	r3, [r7, #23]
 800b368:	2b05      	cmp	r3, #5
 800b36a:	d101      	bne.n	800b370 <get_fileinfo+0xf8>
 800b36c:	23e5      	movs	r3, #229	@ 0xe5
 800b36e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	2b09      	cmp	r3, #9
 800b374:	d10f      	bne.n	800b396 <get_fileinfo+0x11e>
			if (!lfv) fno->fname[j] = '.';
 800b376:	89bb      	ldrh	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d105      	bne.n	800b388 <get_fileinfo+0x110>
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	4413      	add	r3, r2
 800b382:	331a      	adds	r3, #26
 800b384:	222e      	movs	r2, #46	@ 0x2e
 800b386:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	61ba      	str	r2, [r7, #24]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	4413      	add	r3, r2
 800b392:	222e      	movs	r2, #46	@ 0x2e
 800b394:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	4413      	add	r3, r2
 800b39c:	330d      	adds	r3, #13
 800b39e:	7dfa      	ldrb	r2, [r7, #23]
 800b3a0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b3a2:	89bb      	ldrh	r3, [r7, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d11c      	bne.n	800b3e2 <get_fileinfo+0x16a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
 800b3aa:	2b40      	cmp	r3, #64	@ 0x40
 800b3ac:	d913      	bls.n	800b3d6 <get_fileinfo+0x15e>
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	2b5a      	cmp	r3, #90	@ 0x5a
 800b3b2:	d810      	bhi.n	800b3d6 <get_fileinfo+0x15e>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b8:	330c      	adds	r3, #12
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	2b08      	cmp	r3, #8
 800b3c2:	d901      	bls.n	800b3c8 <get_fileinfo+0x150>
 800b3c4:	2310      	movs	r3, #16
 800b3c6:	e000      	b.n	800b3ca <get_fileinfo+0x152>
 800b3c8:	2308      	movs	r3, #8
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <get_fileinfo+0x15e>
				c += 0x20;			/* To lower */
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
 800b3d2:	3320      	adds	r3, #32
 800b3d4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	4413      	add	r3, r2
 800b3dc:	331a      	adds	r3, #26
 800b3de:	7dfa      	ldrb	r2, [r7, #23]
 800b3e0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	61bb      	str	r3, [r7, #24]
 800b3e8:	e000      	b.n	800b3ec <get_fileinfo+0x174>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b3ea:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	2b0a      	cmp	r3, #10
 800b3f0:	d9ae      	bls.n	800b350 <get_fileinfo+0xd8>
	}
	if (!lfv) {
 800b3f2:	89bb      	ldrh	r3, [r7, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10d      	bne.n	800b414 <get_fileinfo+0x19c>
		fno->fname[j] = 0;
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	331a      	adds	r3, #26
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b408:	330c      	adds	r3, #12
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <get_fileinfo+0x19c>
 800b410:	2300      	movs	r3, #0
 800b412:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	4413      	add	r3, r2
 800b41a:	330d      	adds	r3, #13
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b424:	7ada      	ldrb	r2, [r3, #11]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b42e:	331c      	adds	r3, #28
 800b430:	4618      	mov	r0, r3
 800b432:	f7fd faec 	bl	8008a0e <ld_dword>
 800b436:	4603      	mov	r3, r0
 800b438:	2200      	movs	r2, #0
 800b43a:	461c      	mov	r4, r3
 800b43c:	4615      	mov	r5, r2
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b448:	3316      	adds	r3, #22
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fd fadf 	bl	8008a0e <ld_dword>
 800b450:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	b29a      	uxth	r2, r3
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	815a      	strh	r2, [r3, #10]
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	0c1b      	lsrs	r3, r3, #16
 800b45e:	b29a      	uxth	r2, r3
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	811a      	strh	r2, [r3, #8]
 800b464:	e000      	b.n	800b468 <get_fileinfo+0x1f0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b466:	bf00      	nop
}
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b470 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08a      	sub	sp, #40	@ 0x28
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	613b      	str	r3, [r7, #16]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	2300      	movs	r3, #0
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	61ba      	str	r2, [r7, #24]
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	4413      	add	r3, r2
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b49e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4a0:	2b1f      	cmp	r3, #31
 800b4a2:	d96a      	bls.n	800b57a <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b4a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4a6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4a8:	d006      	beq.n	800b4b8 <create_name+0x48>
 800b4aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800b4ae:	d110      	bne.n	800b4d2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b4b0:	e002      	b.n	800b4b8 <create_name+0x48>
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	61bb      	str	r3, [r7, #24]
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	4413      	add	r3, r2
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4c2:	d0f6      	beq.n	800b4b2 <create_name+0x42>
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	2b5c      	cmp	r3, #92	@ 0x5c
 800b4ce:	d0f0      	beq.n	800b4b2 <create_name+0x42>
			break;
 800b4d0:	e054      	b.n	800b57c <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2bfe      	cmp	r3, #254	@ 0xfe
 800b4d6:	d901      	bls.n	800b4dc <create_name+0x6c>
 800b4d8:	2306      	movs	r3, #6
 800b4da:	e1bf      	b.n	800b85c <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b4dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800b4e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b80      	cmp	r3, #128	@ 0x80
 800b4e8:	d925      	bls.n	800b536 <create_name+0xc6>
 800b4ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2bff      	cmp	r3, #255	@ 0xff
 800b4f0:	d021      	beq.n	800b536 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	1c5a      	adds	r2, r3, #1
 800b4f6:	61ba      	str	r2, [r7, #24]
 800b4f8:	693a      	ldr	r2, [r7, #16]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800b502:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b504:	021b      	lsls	r3, r3, #8
 800b506:	b29a      	uxth	r2, r3
 800b508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	4413      	add	r3, r2
 800b510:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800b512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b516:	2b3f      	cmp	r3, #63	@ 0x3f
 800b518:	d903      	bls.n	800b522 <create_name+0xb2>
 800b51a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b51e:	2b7e      	cmp	r3, #126	@ 0x7e
 800b520:	d909      	bls.n	800b536 <create_name+0xc6>
 800b522:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b526:	2b00      	cmp	r3, #0
 800b528:	da03      	bge.n	800b532 <create_name+0xc2>
 800b52a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b52e:	2bff      	cmp	r3, #255	@ 0xff
 800b530:	d101      	bne.n	800b536 <create_name+0xc6>
 800b532:	2306      	movs	r3, #6
 800b534:	e192      	b.n	800b85c <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b536:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b538:	2101      	movs	r1, #1
 800b53a:	4618      	mov	r0, r3
 800b53c:	f001 fff4 	bl	800d528 <ff_convert>
 800b540:	4603      	mov	r3, r0
 800b542:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b544:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <create_name+0xde>
 800b54a:	2306      	movs	r3, #6
 800b54c:	e186      	b.n	800b85c <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b54e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b550:	2b7f      	cmp	r3, #127	@ 0x7f
 800b552:	d809      	bhi.n	800b568 <create_name+0xf8>
 800b554:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b556:	4619      	mov	r1, r3
 800b558:	489a      	ldr	r0, [pc, #616]	@ (800b7c4 <create_name+0x354>)
 800b55a:	f7fd fc88 	bl	8008e6e <chk_chr>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <create_name+0xf8>
 800b564:	2306      	movs	r3, #6
 800b566:	e179      	b.n	800b85c <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	617a      	str	r2, [r7, #20]
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b576:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b578:	e78a      	b.n	800b490 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b57a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	441a      	add	r2, r3
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b588:	2b1f      	cmp	r3, #31
 800b58a:	d801      	bhi.n	800b590 <create_name+0x120>
 800b58c:	2304      	movs	r3, #4
 800b58e:	e000      	b.n	800b592 <create_name+0x122>
 800b590:	2300      	movs	r3, #0
 800b592:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b596:	e011      	b.n	800b5bc <create_name+0x14c>
		w = lfn[di - 1];
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	005b      	lsls	r3, r3, #1
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b5aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	d002      	beq.n	800b5b6 <create_name+0x146>
 800b5b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5b4:	d106      	bne.n	800b5c4 <create_name+0x154>
		di--;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1ea      	bne.n	800b598 <create_name+0x128>
 800b5c2:	e000      	b.n	800b5c6 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800b5c4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <create_name+0x16c>
 800b5d8:	2306      	movs	r3, #6
 800b5da:	e13f      	b.n	800b85c <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3340      	adds	r3, #64	@ 0x40
 800b5e0:	220b      	movs	r2, #11
 800b5e2:	2120      	movs	r1, #32
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fd fc00 	bl	8008dea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	e002      	b.n	800b5f6 <create_name+0x186>
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	61bb      	str	r3, [r7, #24]
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	005b      	lsls	r3, r3, #1
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	2b20      	cmp	r3, #32
 800b602:	d0f5      	beq.n	800b5f0 <create_name+0x180>
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	4413      	add	r3, r2
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b610:	d0ee      	beq.n	800b5f0 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d009      	beq.n	800b62c <create_name+0x1bc>
 800b618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b61c:	f043 0303 	orr.w	r3, r3, #3
 800b620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b624:	e002      	b.n	800b62c <create_name+0x1bc>
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	3b01      	subs	r3, #1
 800b62a:	617b      	str	r3, [r7, #20]
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d009      	beq.n	800b646 <create_name+0x1d6>
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b638:	3b01      	subs	r3, #1
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	4413      	add	r3, r2
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	2b2e      	cmp	r3, #46	@ 0x2e
 800b644:	d1ef      	bne.n	800b626 <create_name+0x1b6>

	i = b = 0; ni = 8;
 800b646:	2300      	movs	r3, #0
 800b648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b64c:	2300      	movs	r3, #0
 800b64e:	623b      	str	r3, [r7, #32]
 800b650:	2308      	movs	r3, #8
 800b652:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	61ba      	str	r2, [r7, #24]
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 80aa 	beq.w	800b7c0 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b66c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b66e:	2b20      	cmp	r3, #32
 800b670:	d006      	beq.n	800b680 <create_name+0x210>
 800b672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b674:	2b2e      	cmp	r3, #46	@ 0x2e
 800b676:	d10a      	bne.n	800b68e <create_name+0x21e>
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d006      	beq.n	800b68e <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800b680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b684:	f043 0303 	orr.w	r3, r3, #3
 800b688:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b68c:	e097      	b.n	800b7be <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b68e:	6a3a      	ldr	r2, [r7, #32]
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	429a      	cmp	r2, r3
 800b694:	d203      	bcs.n	800b69e <create_name+0x22e>
 800b696:	69ba      	ldr	r2, [r7, #24]
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d123      	bne.n	800b6e6 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	2b0b      	cmp	r3, #11
 800b6a2:	d106      	bne.n	800b6b2 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800b6a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6a8:	f043 0303 	orr.w	r3, r3, #3
 800b6ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b6b0:	e08d      	b.n	800b7ce <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d005      	beq.n	800b6c6 <create_name+0x256>
 800b6ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6be:	f043 0303 	orr.w	r3, r3, #3
 800b6c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 800b6c6:	69ba      	ldr	r2, [r7, #24]
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d87e      	bhi.n	800b7cc <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	61bb      	str	r3, [r7, #24]
 800b6d2:	2308      	movs	r3, #8
 800b6d4:	623b      	str	r3, [r7, #32]
 800b6d6:	230b      	movs	r3, #11
 800b6d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b6da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b6e4:	e06b      	b.n	800b7be <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b6e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6ea:	d910      	bls.n	800b70e <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800b6ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f001 ff78 	bl	800d5e4 <ff_wtoupper>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f001 ff15 	bl	800d528 <ff_convert>
 800b6fe:	4603      	mov	r3, r0
 800b700:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b702:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b706:	f043 0302 	orr.w	r3, r3, #2
 800b70a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800b70e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b710:	2bff      	cmp	r3, #255	@ 0xff
 800b712:	d91a      	bls.n	800b74a <create_name+0x2da>
			if (i >= ni - 1) {
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	3b01      	subs	r3, #1
 800b718:	6a3a      	ldr	r2, [r7, #32]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d308      	bcc.n	800b730 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800b71e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b722:	f043 0303 	orr.w	r3, r3, #3
 800b726:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	623b      	str	r3, [r7, #32]
 800b72e:	e046      	b.n	800b7be <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800b730:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b732:	0a1b      	lsrs	r3, r3, #8
 800b734:	b299      	uxth	r1, r3
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	623a      	str	r2, [r7, #32]
 800b73c:	b2c9      	uxtb	r1, r1
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	4413      	add	r3, r2
 800b742:	460a      	mov	r2, r1
 800b744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b748:	e02f      	b.n	800b7aa <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b74a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d007      	beq.n	800b760 <create_name+0x2f0>
 800b750:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b752:	4619      	mov	r1, r3
 800b754:	481c      	ldr	r0, [pc, #112]	@ (800b7c8 <create_name+0x358>)
 800b756:	f7fd fb8a 	bl	8008e6e <chk_chr>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d008      	beq.n	800b772 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b760:	235f      	movs	r3, #95	@ 0x5f
 800b762:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b764:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b768:	f043 0303 	orr.w	r3, r3, #3
 800b76c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b770:	e01b      	b.n	800b7aa <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b774:	2b40      	cmp	r3, #64	@ 0x40
 800b776:	d909      	bls.n	800b78c <create_name+0x31c>
 800b778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b77a:	2b5a      	cmp	r3, #90	@ 0x5a
 800b77c:	d806      	bhi.n	800b78c <create_name+0x31c>
					b |= 2;
 800b77e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b782:	f043 0302 	orr.w	r3, r3, #2
 800b786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b78a:	e00e      	b.n	800b7aa <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b78c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b78e:	2b60      	cmp	r3, #96	@ 0x60
 800b790:	d90b      	bls.n	800b7aa <create_name+0x33a>
 800b792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b794:	2b7a      	cmp	r3, #122	@ 0x7a
 800b796:	d808      	bhi.n	800b7aa <create_name+0x33a>
						b |= 1; w -= 0x20;
 800b798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b79c:	f043 0301 	orr.w	r3, r3, #1
 800b7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b7a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7a6:	3b20      	subs	r3, #32
 800b7a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	623a      	str	r2, [r7, #32]
 800b7b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b7b2:	b2d1      	uxtb	r1, r2
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	460a      	mov	r2, r1
 800b7ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b7be:	e749      	b.n	800b654 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800b7c0:	bf00      	nop
 800b7c2:	e004      	b.n	800b7ce <create_name+0x35e>
 800b7c4:	08011fb0 	.word	0x08011fb0
 800b7c8:	08011fbc 	.word	0x08011fbc
			if (si > di) break;			/* No extension */
 800b7cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b7d4:	2be5      	cmp	r3, #229	@ 0xe5
 800b7d6:	d103      	bne.n	800b7e0 <create_name+0x370>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2205      	movs	r2, #5
 800b7dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	2b08      	cmp	r3, #8
 800b7e4:	d104      	bne.n	800b7f0 <create_name+0x380>
 800b7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7f4:	f003 030c 	and.w	r3, r3, #12
 800b7f8:	2b0c      	cmp	r3, #12
 800b7fa:	d005      	beq.n	800b808 <create_name+0x398>
 800b7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b800:	f003 0303 	and.w	r3, r3, #3
 800b804:	2b03      	cmp	r3, #3
 800b806:	d105      	bne.n	800b814 <create_name+0x3a4>
 800b808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b80c:	f043 0302 	orr.w	r3, r3, #2
 800b810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b818:	f003 0302 	and.w	r3, r3, #2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d117      	bne.n	800b850 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b824:	f003 0303 	and.w	r3, r3, #3
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d105      	bne.n	800b838 <create_name+0x3c8>
 800b82c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b830:	f043 0310 	orr.w	r3, r3, #16
 800b834:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b83c:	f003 030c 	and.w	r3, r3, #12
 800b840:	2b04      	cmp	r3, #4
 800b842:	d105      	bne.n	800b850 <create_name+0x3e0>
 800b844:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b848:	f043 0308 	orr.w	r3, r3, #8
 800b84c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b856:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800b85a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3728      	adds	r7, #40	@ 0x28
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b878:	e002      	b.n	800b880 <follow_path+0x1c>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	3301      	adds	r3, #1
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b2f      	cmp	r3, #47	@ 0x2f
 800b886:	d0f8      	beq.n	800b87a <follow_path+0x16>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b88e:	d0f4      	beq.n	800b87a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2200      	movs	r2, #0
 800b894:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	2200      	movs	r2, #0
 800b89a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b1f      	cmp	r3, #31
 800b8a2:	d80a      	bhi.n	800b8ba <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2280      	movs	r2, #128	@ 0x80
 800b8a8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7fe faab 	bl	8009e0a <dir_sdi>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	75fb      	strb	r3, [r7, #23]
 800b8b8:	e078      	b.n	800b9ac <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b8ba:	463b      	mov	r3, r7
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7ff fdd6 	bl	800b470 <create_name>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d169      	bne.n	800b9a2 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff fa01 	bl	800acd6 <dir_find>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b8de:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00a      	beq.n	800b8fc <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	2b04      	cmp	r3, #4
 800b8ea:	d15c      	bne.n	800b9a6 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b8ec:	7afb      	ldrb	r3, [r7, #11]
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d157      	bne.n	800b9a6 <follow_path+0x142>
 800b8f6:	2305      	movs	r3, #5
 800b8f8:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b8fa:	e054      	b.n	800b9a6 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b8fc:	7afb      	ldrb	r3, [r7, #11]
 800b8fe:	f003 0304 	and.w	r3, r3, #4
 800b902:	2b00      	cmp	r3, #0
 800b904:	d151      	bne.n	800b9aa <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	799b      	ldrb	r3, [r3, #6]
 800b90a:	f003 0310 	and.w	r3, r3, #16
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d102      	bne.n	800b918 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800b912:	2305      	movs	r3, #5
 800b914:	75fb      	strb	r3, [r7, #23]
 800b916:	e049      	b.n	800b9ac <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	2b04      	cmp	r3, #4
 800b91e:	d130      	bne.n	800b982 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	689a      	ldr	r2, [r3, #8]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b92e:	4613      	mov	r3, r2
 800b930:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	79d2      	ldrb	r2, [r2, #7]
 800b938:	431a      	orrs	r2, r3
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	3334      	adds	r3, #52	@ 0x34
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fd f85e 	bl	8008a0e <ld_dword>
 800b952:	4602      	mov	r2, r0
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	3321      	adds	r3, #33	@ 0x21
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	f003 0302 	and.w	r3, r3, #2
 800b964:	b2da      	uxtb	r2, r3
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	3338      	adds	r3, #56	@ 0x38
 800b970:	4618      	mov	r0, r3
 800b972:	f7fd f86f 	bl	8008a54 <ld_qword>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	6939      	ldr	r1, [r7, #16]
 800b97c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b980:	e79b      	b.n	800b8ba <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b990:	4413      	add	r3, r2
 800b992:	4619      	mov	r1, r3
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f7fe fbef 	bl	800a178 <ld_clust>
 800b99a:	4602      	mov	r2, r0
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b9a0:	e78b      	b.n	800b8ba <follow_path+0x56>
			if (res != FR_OK) break;
 800b9a2:	bf00      	nop
 800b9a4:	e002      	b.n	800b9ac <follow_path+0x148>
				break;
 800b9a6:	bf00      	nop
 800b9a8:	e000      	b.n	800b9ac <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b9aa:	bf00      	nop
			}
		}
	}

	return res;
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b087      	sub	sp, #28
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b9be:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d031      	beq.n	800ba30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	e002      	b.n	800b9da <get_ldnumber+0x24>
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	617b      	str	r3, [r7, #20]
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	2b1f      	cmp	r3, #31
 800b9e0:	d903      	bls.n	800b9ea <get_ldnumber+0x34>
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	2b3a      	cmp	r3, #58	@ 0x3a
 800b9e8:	d1f4      	bne.n	800b9d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b3a      	cmp	r3, #58	@ 0x3a
 800b9f0:	d11c      	bne.n	800ba2c <get_ldnumber+0x76>
			tp = *path;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	60fa      	str	r2, [r7, #12]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	3b30      	subs	r3, #48	@ 0x30
 800ba02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2b09      	cmp	r3, #9
 800ba08:	d80e      	bhi.n	800ba28 <get_ldnumber+0x72>
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d10a      	bne.n	800ba28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d107      	bne.n	800ba28 <get_ldnumber+0x72>
					vol = (int)i;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	617b      	str	r3, [r7, #20]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	e002      	b.n	800ba32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ba30:	693b      	ldr	r3, [r7, #16]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	371c      	adds	r7, #28
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
	...

0800ba40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	70da      	strb	r2, [r3, #3]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f04f 32ff 	mov.w	r2, #4294967295
 800ba56:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7fd fbd2 	bl	8009204 <move_window>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <check_fs+0x2a>
 800ba66:	2304      	movs	r3, #4
 800ba68:	e044      	b.n	800baf4 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	3338      	adds	r3, #56	@ 0x38
 800ba6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fc ffb2 	bl	80089dc <ld_word>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d001      	beq.n	800ba88 <check_fs+0x48>
 800ba84:	2303      	movs	r3, #3
 800ba86:	e035      	b.n	800baf4 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba8e:	2be9      	cmp	r3, #233	@ 0xe9
 800ba90:	d009      	beq.n	800baa6 <check_fs+0x66>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba98:	2beb      	cmp	r3, #235	@ 0xeb
 800ba9a:	d11e      	bne.n	800bada <check_fs+0x9a>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800baa2:	2b90      	cmp	r3, #144	@ 0x90
 800baa4:	d119      	bne.n	800bada <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3338      	adds	r3, #56	@ 0x38
 800baaa:	3336      	adds	r3, #54	@ 0x36
 800baac:	4618      	mov	r0, r3
 800baae:	f7fc ffae 	bl	8008a0e <ld_dword>
 800bab2:	4603      	mov	r3, r0
 800bab4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bab8:	4a10      	ldr	r2, [pc, #64]	@ (800bafc <check_fs+0xbc>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d101      	bne.n	800bac2 <check_fs+0x82>
 800babe:	2300      	movs	r3, #0
 800bac0:	e018      	b.n	800baf4 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	3338      	adds	r3, #56	@ 0x38
 800bac6:	3352      	adds	r3, #82	@ 0x52
 800bac8:	4618      	mov	r0, r3
 800baca:	f7fc ffa0 	bl	8008a0e <ld_dword>
 800bace:	4603      	mov	r3, r0
 800bad0:	4a0b      	ldr	r2, [pc, #44]	@ (800bb00 <check_fs+0xc0>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d101      	bne.n	800bada <check_fs+0x9a>
 800bad6:	2300      	movs	r3, #0
 800bad8:	e00c      	b.n	800baf4 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3338      	adds	r3, #56	@ 0x38
 800bade:	220b      	movs	r2, #11
 800bae0:	4908      	ldr	r1, [pc, #32]	@ (800bb04 <check_fs+0xc4>)
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fd f99c 	bl	8008e20 <mem_cmp>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <check_fs+0xb2>
 800baee:	2301      	movs	r3, #1
 800baf0:	e000      	b.n	800baf4 <check_fs+0xb4>
#endif
	return 2;
 800baf2:	2302      	movs	r3, #2
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	00544146 	.word	0x00544146
 800bb00:	33544146 	.word	0x33544146
 800bb04:	08011fc4 	.word	0x08011fc4

0800bb08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bb08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb0c:	b09c      	sub	sp, #112	@ 0x70
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	61f8      	str	r0, [r7, #28]
 800bb12:	61b9      	str	r1, [r7, #24]
 800bb14:	4613      	mov	r3, r2
 800bb16:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bb1e:	69f8      	ldr	r0, [r7, #28]
 800bb20:	f7ff ff49 	bl	800b9b6 <get_ldnumber>
 800bb24:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	da01      	bge.n	800bb30 <find_volume+0x28>
 800bb2c:	230b      	movs	r3, #11
 800bb2e:	e331      	b.n	800c194 <find_volume+0x68c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bb30:	4a99      	ldr	r2, [pc, #612]	@ (800bd98 <find_volume+0x290>)
 800bb32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb38:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bb3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d101      	bne.n	800bb44 <find_volume+0x3c>
 800bb40:	230c      	movs	r3, #12
 800bb42:	e327      	b.n	800c194 <find_volume+0x68c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb48:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bb4a:	7dfb      	ldrb	r3, [r7, #23]
 800bb4c:	f023 0301 	bic.w	r3, r3, #1
 800bb50:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bb52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d01a      	beq.n	800bb90 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800bb5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb5c:	785b      	ldrb	r3, [r3, #1]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fc fe9e 	bl	80088a0 <disk_status>
 800bb64:	4603      	mov	r3, r0
 800bb66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bb6a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10c      	bne.n	800bb90 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d007      	beq.n	800bb8c <find_volume+0x84>
 800bb7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800bb88:	230a      	movs	r3, #10
 800bb8a:	e303      	b.n	800c194 <find_volume+0x68c>
			}
			return FR_OK;				/* The file system object is valid */
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e301      	b.n	800c194 <find_volume+0x68c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bb90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb92:	2200      	movs	r2, #0
 800bb94:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bb96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb9c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bb9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bba0:	785b      	ldrb	r3, [r3, #1]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fc fe96 	bl	80088d4 <disk_initialize>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bbae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e2ea      	b.n	800c194 <find_volume+0x68c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d007      	beq.n	800bbd4 <find_volume+0xcc>
 800bbc4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bbc8:	f003 0304 	and.w	r3, r3, #4
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800bbd0:	230a      	movs	r3, #10
 800bbd2:	e2df      	b.n	800c194 <find_volume+0x68c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bbd8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bbda:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bbdc:	f7ff ff30 	bl	800ba40 <check_fs>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bbe6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d14d      	bne.n	800bc8a <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bbee:	2300      	movs	r3, #0
 800bbf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbf2:	e020      	b.n	800bc36 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bbf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbf6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bbfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbfc:	011b      	lsls	r3, r3, #4
 800bbfe:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bc02:	4413      	add	r3, r2
 800bc04:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bc06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc08:	3304      	adds	r3, #4
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d006      	beq.n	800bc1e <find_volume+0x116>
 800bc10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc12:	3308      	adds	r3, #8
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fc fefa 	bl	8008a0e <ld_dword>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	e000      	b.n	800bc20 <find_volume+0x118>
 800bc1e:	2200      	movs	r2, #0
 800bc20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	3360      	adds	r3, #96	@ 0x60
 800bc26:	f107 0110 	add.w	r1, r7, #16
 800bc2a:	440b      	add	r3, r1
 800bc2c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc32:	3301      	adds	r3, #1
 800bc34:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d9db      	bls.n	800bbf4 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800bc40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <find_volume+0x144>
 800bc46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bc4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	3360      	adds	r3, #96	@ 0x60
 800bc52:	f107 0210 	add.w	r2, r7, #16
 800bc56:	4413      	add	r3, r2
 800bc58:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bc5c:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bc5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d005      	beq.n	800bc70 <find_volume+0x168>
 800bc64:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc66:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bc68:	f7ff feea 	bl	800ba40 <check_fs>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	e000      	b.n	800bc72 <find_volume+0x16a>
 800bc70:	2303      	movs	r3, #3
 800bc72:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bc76:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d905      	bls.n	800bc8a <find_volume+0x182>
 800bc7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc80:	3301      	adds	r3, #1
 800bc82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d9e0      	bls.n	800bc4c <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bc8a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bc8e:	2b04      	cmp	r3, #4
 800bc90:	d101      	bne.n	800bc96 <find_volume+0x18e>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e27e      	b.n	800c194 <find_volume+0x68c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bc96:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d901      	bls.n	800bca2 <find_volume+0x19a>
 800bc9e:	230d      	movs	r3, #13
 800bca0:	e278      	b.n	800c194 <find_volume+0x68c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800bca2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	f040 80fa 	bne.w	800bea0 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800bcac:	230b      	movs	r3, #11
 800bcae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcb0:	e002      	b.n	800bcb8 <find_volume+0x1b0>
 800bcb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcba:	2b3f      	cmp	r3, #63	@ 0x3f
 800bcbc:	d806      	bhi.n	800bccc <find_volume+0x1c4>
 800bcbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bcc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcc2:	4413      	add	r3, r2
 800bcc4:	3338      	adds	r3, #56	@ 0x38
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d0f2      	beq.n	800bcb2 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800bccc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcce:	2b3f      	cmp	r3, #63	@ 0x3f
 800bcd0:	d801      	bhi.n	800bcd6 <find_volume+0x1ce>
 800bcd2:	230d      	movs	r3, #13
 800bcd4:	e25e      	b.n	800c194 <find_volume+0x68c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800bcd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcd8:	3338      	adds	r3, #56	@ 0x38
 800bcda:	3368      	adds	r3, #104	@ 0x68
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fc fe7d 	bl	80089dc <ld_word>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bce8:	d001      	beq.n	800bcee <find_volume+0x1e6>
 800bcea:	230d      	movs	r3, #13
 800bcec:	e252      	b.n	800c194 <find_volume+0x68c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800bcee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcf0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bcf4:	2b09      	cmp	r3, #9
 800bcf6:	d001      	beq.n	800bcfc <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800bcf8:	230d      	movs	r3, #13
 800bcfa:	e24b      	b.n	800c194 <find_volume+0x68c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800bcfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcfe:	3338      	adds	r3, #56	@ 0x38
 800bd00:	3348      	adds	r3, #72	@ 0x48
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fc fea6 	bl	8008a54 <ld_qword>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd0e:	2000      	movs	r0, #0
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	68b9      	ldr	r1, [r7, #8]
 800bd16:	1851      	adds	r1, r2, r1
 800bd18:	6039      	str	r1, [r7, #0]
 800bd1a:	68f9      	ldr	r1, [r7, #12]
 800bd1c:	eb43 0101 	adc.w	r1, r3, r1
 800bd20:	6079      	str	r1, [r7, #4]
 800bd22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd26:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800bd2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d301      	bcc.n	800bd36 <find_volume+0x22e>
 800bd32:	230d      	movs	r3, #13
 800bd34:	e22e      	b.n	800c194 <find_volume+0x68c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800bd36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd38:	3338      	adds	r3, #56	@ 0x38
 800bd3a:	3354      	adds	r3, #84	@ 0x54
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7fc fe66 	bl	8008a0e <ld_dword>
 800bd42:	4602      	mov	r2, r0
 800bd44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd46:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800bd48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd4a:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800bd4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd50:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800bd52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd54:	789b      	ldrb	r3, [r3, #2]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d001      	beq.n	800bd5e <find_volume+0x256>
 800bd5a:	230d      	movs	r3, #13
 800bd5c:	e21a      	b.n	800c194 <find_volume+0x68c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800bd5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd64:	461a      	mov	r2, r3
 800bd66:	2301      	movs	r3, #1
 800bd68:	4093      	lsls	r3, r2
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd6e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800bd70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd72:	895b      	ldrh	r3, [r3, #10]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <find_volume+0x274>
 800bd78:	230d      	movs	r3, #13
 800bd7a:	e20b      	b.n	800c194 <find_volume+0x68c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800bd7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd7e:	3338      	adds	r3, #56	@ 0x38
 800bd80:	335c      	adds	r3, #92	@ 0x5c
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fc fe43 	bl	8008a0e <ld_dword>
 800bd88:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800bd8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd8c:	4a03      	ldr	r2, [pc, #12]	@ (800bd9c <find_volume+0x294>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d906      	bls.n	800bda0 <find_volume+0x298>
 800bd92:	230d      	movs	r3, #13
 800bd94:	e1fe      	b.n	800c194 <find_volume+0x68c>
 800bd96:	bf00      	nop
 800bd98:	20000fd4 	.word	0x20000fd4
 800bd9c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800bda0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bda2:	1c9a      	adds	r2, r3, #2
 800bda4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bda6:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800bda8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdaa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bdac:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800bdae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdb0:	3338      	adds	r3, #56	@ 0x38
 800bdb2:	3358      	adds	r3, #88	@ 0x58
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fc fe2a 	bl	8008a0e <ld_dword>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdbe:	441a      	add	r2, r3
 800bdc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdc2:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800bdc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdc6:	3338      	adds	r3, #56	@ 0x38
 800bdc8:	3350      	adds	r3, #80	@ 0x50
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fc fe1f 	bl	8008a0e <ld_dword>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdd4:	441a      	add	r2, r3
 800bdd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdd8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800bdda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdde:	2200      	movs	r2, #0
 800bde0:	469a      	mov	sl, r3
 800bde2:	4693      	mov	fp, r2
 800bde4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bde6:	895b      	ldrh	r3, [r3, #10]
 800bde8:	461a      	mov	r2, r3
 800bdea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdec:	fb02 f303 	mul.w	r3, r2, r3
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4698      	mov	r8, r3
 800bdf4:	4691      	mov	r9, r2
 800bdf6:	eb1a 0408 	adds.w	r4, sl, r8
 800bdfa:	eb4b 0509 	adc.w	r5, fp, r9
 800bdfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800be02:	42a2      	cmp	r2, r4
 800be04:	41ab      	sbcs	r3, r5
 800be06:	d201      	bcs.n	800be0c <find_volume+0x304>
 800be08:	230d      	movs	r3, #13
 800be0a:	e1c3      	b.n	800c194 <find_volume+0x68c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800be0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be0e:	3338      	adds	r3, #56	@ 0x38
 800be10:	3360      	adds	r3, #96	@ 0x60
 800be12:	4618      	mov	r0, r3
 800be14:	f7fc fdfb 	bl	8008a0e <ld_dword>
 800be18:	4602      	mov	r2, r0
 800be1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be1c:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800be1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be22:	4619      	mov	r1, r3
 800be24:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800be26:	f7fd fa89 	bl	800933c <clust2sect>
 800be2a:	4603      	mov	r3, r0
 800be2c:	4619      	mov	r1, r3
 800be2e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800be30:	f7fd f9e8 	bl	8009204 <move_window>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <find_volume+0x336>
 800be3a:	2301      	movs	r3, #1
 800be3c:	e1aa      	b.n	800c194 <find_volume+0x68c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800be3e:	2300      	movs	r3, #0
 800be40:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be42:	e015      	b.n	800be70 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800be44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be48:	4413      	add	r3, r2
 800be4a:	3338      	adds	r3, #56	@ 0x38
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b81      	cmp	r3, #129	@ 0x81
 800be50:	d10b      	bne.n	800be6a <find_volume+0x362>
 800be52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be54:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800be58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be5a:	3314      	adds	r3, #20
 800be5c:	4413      	add	r3, r2
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fc fdd5 	bl	8008a0e <ld_dword>
 800be64:	4603      	mov	r3, r0
 800be66:	2b02      	cmp	r3, #2
 800be68:	d007      	beq.n	800be7a <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800be6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be6c:	3320      	adds	r3, #32
 800be6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be76:	d3e5      	bcc.n	800be44 <find_volume+0x33c>
 800be78:	e000      	b.n	800be7c <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800be7a:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800be7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be82:	d101      	bne.n	800be88 <find_volume+0x380>
 800be84:	230d      	movs	r3, #13
 800be86:	e185      	b.n	800c194 <find_volume+0x68c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800be88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be8a:	f04f 32ff 	mov.w	r2, #4294967295
 800be8e:	619a      	str	r2, [r3, #24]
 800be90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be92:	699a      	ldr	r2, [r3, #24]
 800be94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be96:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800be98:	2304      	movs	r3, #4
 800be9a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800be9e:	e167      	b.n	800c170 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea2:	3338      	adds	r3, #56	@ 0x38
 800bea4:	330b      	adds	r3, #11
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fc fd98 	bl	80089dc <ld_word>
 800beac:	4603      	mov	r3, r0
 800beae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800beb2:	d001      	beq.n	800beb8 <find_volume+0x3b0>
 800beb4:	230d      	movs	r3, #13
 800beb6:	e16d      	b.n	800c194 <find_volume+0x68c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800beb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beba:	3338      	adds	r3, #56	@ 0x38
 800bebc:	3316      	adds	r3, #22
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fc fd8c 	bl	80089dc <ld_word>
 800bec4:	4603      	mov	r3, r0
 800bec6:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <find_volume+0x3d4>
 800bece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bed0:	3338      	adds	r3, #56	@ 0x38
 800bed2:	3324      	adds	r3, #36	@ 0x24
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fc fd9a 	bl	8008a0e <ld_dword>
 800beda:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800bedc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bede:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bee0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bee4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800bee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800beec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beee:	789b      	ldrb	r3, [r3, #2]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d005      	beq.n	800bf00 <find_volume+0x3f8>
 800bef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef6:	789b      	ldrb	r3, [r3, #2]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d001      	beq.n	800bf00 <find_volume+0x3f8>
 800befc:	230d      	movs	r3, #13
 800befe:	e149      	b.n	800c194 <find_volume+0x68c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf02:	789b      	ldrb	r3, [r3, #2]
 800bf04:	461a      	mov	r2, r3
 800bf06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf08:	fb02 f303 	mul.w	r3, r2, r3
 800bf0c:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bf0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf14:	461a      	mov	r2, r3
 800bf16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bf1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf1c:	895b      	ldrh	r3, [r3, #10]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d008      	beq.n	800bf34 <find_volume+0x42c>
 800bf22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf24:	895b      	ldrh	r3, [r3, #10]
 800bf26:	461a      	mov	r2, r3
 800bf28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf2a:	895b      	ldrh	r3, [r3, #10]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	4013      	ands	r3, r2
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <find_volume+0x430>
 800bf34:	230d      	movs	r3, #13
 800bf36:	e12d      	b.n	800c194 <find_volume+0x68c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bf38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf3a:	3338      	adds	r3, #56	@ 0x38
 800bf3c:	3311      	adds	r3, #17
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fc fd4c 	bl	80089dc <ld_word>
 800bf44:	4603      	mov	r3, r0
 800bf46:	461a      	mov	r2, r3
 800bf48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4e:	891b      	ldrh	r3, [r3, #8]
 800bf50:	f003 030f 	and.w	r3, r3, #15
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <find_volume+0x456>
 800bf5a:	230d      	movs	r3, #13
 800bf5c:	e11a      	b.n	800c194 <find_volume+0x68c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bf5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf60:	3338      	adds	r3, #56	@ 0x38
 800bf62:	3313      	adds	r3, #19
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fc fd39 	bl	80089dc <ld_word>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bf6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <find_volume+0x47a>
 800bf74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf76:	3338      	adds	r3, #56	@ 0x38
 800bf78:	3320      	adds	r3, #32
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fc fd47 	bl	8008a0e <ld_dword>
 800bf80:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bf82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf84:	3338      	adds	r3, #56	@ 0x38
 800bf86:	330e      	adds	r3, #14
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fc fd27 	bl	80089dc <ld_word>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bf94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <find_volume+0x498>
 800bf9c:	230d      	movs	r3, #13
 800bf9e:	e0f9      	b.n	800c194 <find_volume+0x68c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bfa0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800bfa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfa6:	4413      	add	r3, r2
 800bfa8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfaa:	8912      	ldrh	r2, [r2, #8]
 800bfac:	0912      	lsrs	r2, r2, #4
 800bfae:	b292      	uxth	r2, r2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bfb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bfb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d201      	bcs.n	800bfc0 <find_volume+0x4b8>
 800bfbc:	230d      	movs	r3, #13
 800bfbe:	e0e9      	b.n	800c194 <find_volume+0x68c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bfc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bfc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfc8:	8952      	ldrh	r2, [r2, #10]
 800bfca:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bfd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <find_volume+0x4d2>
 800bfd6:	230d      	movs	r3, #13
 800bfd8:	e0dc      	b.n	800c194 <find_volume+0x68c>
		fmt = FS_FAT32;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d802      	bhi.n	800bff0 <find_volume+0x4e8>
 800bfea:	2302      	movs	r3, #2
 800bfec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bff2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d802      	bhi.n	800c000 <find_volume+0x4f8>
 800bffa:	2301      	movs	r3, #1
 800bffc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c002:	1c9a      	adds	r2, r3, #2
 800c004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c006:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c00a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c00c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c00e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c012:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c014:	441a      	add	r2, r3
 800c016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c018:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c01a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c01c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c01e:	441a      	add	r2, r3
 800c020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c022:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c024:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d11e      	bne.n	800c06a <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c02c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c02e:	3338      	adds	r3, #56	@ 0x38
 800c030:	332a      	adds	r3, #42	@ 0x2a
 800c032:	4618      	mov	r0, r3
 800c034:	f7fc fcd2 	bl	80089dc <ld_word>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <find_volume+0x53a>
 800c03e:	230d      	movs	r3, #13
 800c040:	e0a8      	b.n	800c194 <find_volume+0x68c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c044:	891b      	ldrh	r3, [r3, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <find_volume+0x546>
 800c04a:	230d      	movs	r3, #13
 800c04c:	e0a2      	b.n	800c194 <find_volume+0x68c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c050:	3338      	adds	r3, #56	@ 0x38
 800c052:	332c      	adds	r3, #44	@ 0x2c
 800c054:	4618      	mov	r0, r3
 800c056:	f7fc fcda 	bl	8008a0e <ld_dword>
 800c05a:	4602      	mov	r2, r0
 800c05c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c05e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c062:	69db      	ldr	r3, [r3, #28]
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c068:	e01f      	b.n	800c0aa <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c06c:	891b      	ldrh	r3, [r3, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <find_volume+0x56e>
 800c072:	230d      	movs	r3, #13
 800c074:	e08e      	b.n	800c194 <find_volume+0x68c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c07a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c07c:	441a      	add	r2, r3
 800c07e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c080:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c082:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c086:	2b02      	cmp	r3, #2
 800c088:	d103      	bne.n	800c092 <find_volume+0x58a>
 800c08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	e00a      	b.n	800c0a8 <find_volume+0x5a0>
 800c092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c094:	69da      	ldr	r2, [r3, #28]
 800c096:	4613      	mov	r3, r2
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	4413      	add	r3, r2
 800c09c:	085a      	lsrs	r2, r3, #1
 800c09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c0a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ac:	6a1a      	ldr	r2, [r3, #32]
 800c0ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0b0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c0b4:	0a5b      	lsrs	r3, r3, #9
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d201      	bcs.n	800c0be <find_volume+0x5b6>
 800c0ba:	230d      	movs	r3, #13
 800c0bc:	e06a      	b.n	800c194 <find_volume+0x68c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c0be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c4:	619a      	str	r2, [r3, #24]
 800c0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0c8:	699a      	ldr	r2, [r3, #24]
 800c0ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0cc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0d0:	2280      	movs	r2, #128	@ 0x80
 800c0d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c0d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d149      	bne.n	800c170 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c0dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0de:	3338      	adds	r3, #56	@ 0x38
 800c0e0:	3330      	adds	r3, #48	@ 0x30
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fc fc7a 	bl	80089dc <ld_word>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d140      	bne.n	800c170 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c0ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c0f6:	f7fd f885 	bl	8009204 <move_window>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d137      	bne.n	800c170 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800c100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c102:	2200      	movs	r2, #0
 800c104:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c108:	3338      	adds	r3, #56	@ 0x38
 800c10a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fc fc64 	bl	80089dc <ld_word>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d127      	bne.n	800c170 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c122:	3338      	adds	r3, #56	@ 0x38
 800c124:	4618      	mov	r0, r3
 800c126:	f7fc fc72 	bl	8008a0e <ld_dword>
 800c12a:	4603      	mov	r3, r0
 800c12c:	4a1c      	ldr	r2, [pc, #112]	@ (800c1a0 <find_volume+0x698>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d11e      	bne.n	800c170 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c134:	3338      	adds	r3, #56	@ 0x38
 800c136:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fc fc67 	bl	8008a0e <ld_dword>
 800c140:	4603      	mov	r3, r0
 800c142:	4a18      	ldr	r2, [pc, #96]	@ (800c1a4 <find_volume+0x69c>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d113      	bne.n	800c170 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c14a:	3338      	adds	r3, #56	@ 0x38
 800c14c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c150:	4618      	mov	r0, r3
 800c152:	f7fc fc5c 	bl	8008a0e <ld_dword>
 800c156:	4602      	mov	r2, r0
 800c158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c15a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c15c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c15e:	3338      	adds	r3, #56	@ 0x38
 800c160:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c164:	4618      	mov	r0, r3
 800c166:	f7fc fc52 	bl	8008a0e <ld_dword>
 800c16a:	4602      	mov	r2, r0
 800c16c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c16e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c172:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800c176:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c178:	4b0b      	ldr	r3, [pc, #44]	@ (800c1a8 <find_volume+0x6a0>)
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	3301      	adds	r3, #1
 800c17e:	b29a      	uxth	r2, r3
 800c180:	4b09      	ldr	r3, [pc, #36]	@ (800c1a8 <find_volume+0x6a0>)
 800c182:	801a      	strh	r2, [r3, #0]
 800c184:	4b08      	ldr	r3, [pc, #32]	@ (800c1a8 <find_volume+0x6a0>)
 800c186:	881a      	ldrh	r2, [r3, #0]
 800c188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c18a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c18c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c18e:	f7fc ffd1 	bl	8009134 <clear_lock>
#endif
	return FR_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3770      	adds	r7, #112	@ 0x70
 800c198:	46bd      	mov	sp, r7
 800c19a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c19e:	bf00      	nop
 800c1a0:	41615252 	.word	0x41615252
 800c1a4:	61417272 	.word	0x61417272
 800c1a8:	20000fd8 	.word	0x20000fd8

0800c1ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c1b6:	2309      	movs	r3, #9
 800c1b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d01c      	beq.n	800c1fa <validate+0x4e>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d018      	beq.n	800c1fa <validate+0x4e>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d013      	beq.n	800c1fa <validate+0x4e>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	889a      	ldrh	r2, [r3, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	88db      	ldrh	r3, [r3, #6]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d10c      	bne.n	800c1fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	785b      	ldrb	r3, [r3, #1]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fc fb5a 	bl	80088a0 <disk_status>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <validate+0x4e>
			res = FR_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d102      	bne.n	800c206 <validate+0x5a>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	e000      	b.n	800c208 <validate+0x5c>
 800c206:	2300      	movs	r3, #0
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	6013      	str	r3, [r2, #0]
	return res;
 800c20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	4613      	mov	r3, r2
 800c224:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c22a:	f107 0310 	add.w	r3, r7, #16
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff fbc1 	bl	800b9b6 <get_ldnumber>
 800c234:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	da01      	bge.n	800c240 <f_mount+0x28>
 800c23c:	230b      	movs	r3, #11
 800c23e:	e02b      	b.n	800c298 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c240:	4a17      	ldr	r2, [pc, #92]	@ (800c2a0 <f_mount+0x88>)
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c248:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d005      	beq.n	800c25c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c250:	69b8      	ldr	r0, [r7, #24]
 800c252:	f7fc ff6f 	bl	8009134 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	490d      	ldr	r1, [pc, #52]	@ (800c2a0 <f_mount+0x88>)
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <f_mount+0x66>
 800c278:	79fb      	ldrb	r3, [r7, #7]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d001      	beq.n	800c282 <f_mount+0x6a>
 800c27e:	2300      	movs	r3, #0
 800c280:	e00a      	b.n	800c298 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c282:	f107 010c 	add.w	r1, r7, #12
 800c286:	f107 0308 	add.w	r3, r7, #8
 800c28a:	2200      	movs	r2, #0
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fc3b 	bl	800bb08 <find_volume>
 800c292:	4603      	mov	r3, r0
 800c294:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c296:	7dfb      	ldrb	r3, [r7, #23]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3720      	adds	r7, #32
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	20000fd4 	.word	0x20000fd4

0800c2a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2a8:	b0a8      	sub	sp, #160	@ 0xa0
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	61f8      	str	r0, [r7, #28]
 800c2ae:	61b9      	str	r1, [r7, #24]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <f_open+0x1a>
 800c2ba:	2309      	movs	r3, #9
 800c2bc:	e2c7      	b.n	800c84e <f_open+0x5aa>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2c4:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800c2c6:	7dfa      	ldrb	r2, [r7, #23]
 800c2c8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c2cc:	f107 0318 	add.w	r3, r7, #24
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff fc19 	bl	800bb08 <find_volume>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800c2dc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 82ab 	bne.w	800c83c <f_open+0x598>
		dj.obj.fs = fs;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
 800c2ea:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800c2ee:	f001 fa03 	bl	800d6f8 <ff_memalloc>
 800c2f2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800c2f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <f_open+0x5e>
 800c2fe:	2311      	movs	r3, #17
 800c300:	e2a5      	b.n	800c84e <f_open+0x5aa>
 800c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c304:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c308:	60da      	str	r2, [r3, #12]
 800c30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c310:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800c314:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c31c:	4611      	mov	r1, r2
 800c31e:	4618      	mov	r0, r3
 800c320:	f7ff faa0 	bl	800b864 <follow_path>
 800c324:	4603      	mov	r3, r0
 800c326:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c32a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d118      	bne.n	800c364 <f_open+0xc0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c332:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800c336:	b25b      	sxtb	r3, r3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	da03      	bge.n	800c344 <f_open+0xa0>
				res = FR_INVALID_NAME;
 800c33c:	2306      	movs	r3, #6
 800c33e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c342:	e00f      	b.n	800c364 <f_open+0xc0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c344:	7dfb      	ldrb	r3, [r7, #23]
 800c346:	2b01      	cmp	r3, #1
 800c348:	bf8c      	ite	hi
 800c34a:	2301      	movhi	r3, #1
 800c34c:	2300      	movls	r3, #0
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	461a      	mov	r2, r3
 800c352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c356:	4611      	mov	r1, r2
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fc fda3 	bl	8008ea4 <chk_lock>
 800c35e:	4603      	mov	r3, r0
 800c360:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	f003 031c 	and.w	r3, r3, #28
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 8115 	beq.w	800c59a <f_open+0x2f6>
			if (res != FR_OK) {					/* No file, create new */
 800c370:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c374:	2b00      	cmp	r3, #0
 800c376:	d017      	beq.n	800c3a8 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c378:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	d10e      	bne.n	800c39e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c380:	f7fc fdec 	bl	8008f5c <enq_lock>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d006      	beq.n	800c398 <f_open+0xf4>
 800c38a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fdcc 	bl	800af2c <dir_register>
 800c394:	4603      	mov	r3, r0
 800c396:	e000      	b.n	800c39a <f_open+0xf6>
 800c398:	2312      	movs	r3, #18
 800c39a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c39e:	7dfb      	ldrb	r3, [r7, #23]
 800c3a0:	f043 0308 	orr.w	r3, r3, #8
 800c3a4:	75fb      	strb	r3, [r7, #23]
 800c3a6:	e011      	b.n	800c3cc <f_open+0x128>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c3a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c3ac:	f003 0311 	and.w	r3, r3, #17
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <f_open+0x118>
					res = FR_DENIED;
 800c3b4:	2307      	movs	r3, #7
 800c3b6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c3ba:	e007      	b.n	800c3cc <f_open+0x128>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c3bc:	7dfb      	ldrb	r3, [r7, #23]
 800c3be:	f003 0304 	and.w	r3, r3, #4
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <f_open+0x128>
 800c3c6:	2308      	movs	r3, #8
 800c3c8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c3cc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f040 80fe 	bne.w	800c5d2 <f_open+0x32e>
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	f003 0308 	and.w	r3, r3, #8
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 80f8 	beq.w	800c5d2 <f_open+0x32e>
				dw = GET_FATTIME();
 800c3e2:	f7fc f985 	bl	80086f0 <get_fattime>
 800c3e6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	2b04      	cmp	r3, #4
 800c3f0:	f040 8084 	bne.w	800c4fc <f_open+0x258>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c3f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	3334      	adds	r3, #52	@ 0x34
 800c400:	4618      	mov	r0, r3
 800c402:	f7fc fb04 	bl	8008a0e <ld_dword>
 800c406:	4602      	mov	r2, r0
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	3338      	adds	r3, #56	@ 0x38
 800c412:	4618      	mov	r0, r3
 800c414:	f7fc fb1e 	bl	8008a54 <ld_qword>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	69f9      	ldr	r1, [r7, #28]
 800c41e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	3321      	adds	r3, #33	@ 0x21
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	f003 0302 	and.w	r3, r3, #2
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	2200      	movs	r2, #0
 800c438:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	3308      	adds	r3, #8
 800c440:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c444:	4618      	mov	r0, r3
 800c446:	f7fc fbfb 	bl	8008c40 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	3314      	adds	r3, #20
 800c450:	2200      	movs	r2, #0
 800c452:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	330c      	adds	r3, #12
 800c45a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fc fbee 	bl	8008c40 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	3315      	adds	r3, #21
 800c46a:	2200      	movs	r2, #0
 800c46c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	3304      	adds	r3, #4
 800c474:	2220      	movs	r2, #32
 800c476:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	3334      	adds	r3, #52	@ 0x34
 800c47e:	2100      	movs	r1, #0
 800c480:	4618      	mov	r0, r3
 800c482:	f7fc fbdd 	bl	8008c40 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c48e:	f04f 0200 	mov.w	r2, #0
 800c492:	f04f 0300 	mov.w	r3, #0
 800c496:	4608      	mov	r0, r1
 800c498:	f7fc fbfe 	bl	8008c98 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c4a4:	f04f 0200 	mov.w	r2, #0
 800c4a8:	f04f 0300 	mov.w	r3, #0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	f7fc fbf3 	bl	8008c98 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	3321      	adds	r3, #33	@ 0x21
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800c4bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fe fa7f 	bl	800a9c4 <store_xdir>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c4cc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d17e      	bne.n	800c5d2 <f_open+0x32e>
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d07a      	beq.n	800c5d2 <f_open+0x32e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c4dc:	69f8      	ldr	r0, [r7, #28]
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	f7fd fa97 	bl	8009a18 <remove_chain>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	689a      	ldr	r2, [r3, #8]
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f6:	3a01      	subs	r2, #1
 800c4f8:	615a      	str	r2, [r3, #20]
 800c4fa:	e06a      	b.n	800c5d2 <f_open+0x32e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c4fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4fe:	330e      	adds	r3, #14
 800c500:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c504:	4618      	mov	r0, r3
 800c506:	f7fc fb9b 	bl	8008c40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c50a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c50c:	3316      	adds	r3, #22
 800c50e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c512:	4618      	mov	r0, r3
 800c514:	f7fc fb94 	bl	8008c40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c51a:	330b      	adds	r3, #11
 800c51c:	2220      	movs	r2, #32
 800c51e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c522:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c524:	4611      	mov	r1, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f7fd fe26 	bl	800a178 <ld_clust>
 800c52c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c532:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c534:	2200      	movs	r2, #0
 800c536:	4618      	mov	r0, r3
 800c538:	f7fd fe3d 	bl	800a1b6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c53c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c53e:	331c      	adds	r3, #28
 800c540:	2100      	movs	r1, #0
 800c542:	4618      	mov	r0, r3
 800c544:	f7fc fb7c 	bl	8008c40 <st_dword>
					fs->wflag = 1;
 800c548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54a:	2201      	movs	r2, #1
 800c54c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c54e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c552:	2b00      	cmp	r3, #0
 800c554:	d03d      	beq.n	800c5d2 <f_open+0x32e>
						dw = fs->winsect;
 800c556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c55a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						res = remove_chain(&dj.obj, cl, 0);
 800c55e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c562:	2200      	movs	r2, #0
 800c564:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fd fa55 	bl	8009a18 <remove_chain>
 800c56e:	4603      	mov	r3, r0
 800c570:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 800c574:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d12a      	bne.n	800c5d2 <f_open+0x32e>
							res = move_window(fs, dw);
 800c57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c582:	4618      	mov	r0, r3
 800c584:	f7fc fe3e 	bl	8009204 <move_window>
 800c588:	4603      	mov	r3, r0
 800c58a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c594:	3a01      	subs	r2, #1
 800c596:	615a      	str	r2, [r3, #20]
 800c598:	e01b      	b.n	800c5d2 <f_open+0x32e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c59a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d117      	bne.n	800c5d2 <f_open+0x32e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c5a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c5a6:	f003 0310 	and.w	r3, r3, #16
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d003      	beq.n	800c5b6 <f_open+0x312>
					res = FR_NO_FILE;
 800c5ae:	2304      	movs	r3, #4
 800c5b0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c5b4:	e00d      	b.n	800c5d2 <f_open+0x32e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d008      	beq.n	800c5d2 <f_open+0x32e>
 800c5c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <f_open+0x32e>
						res = FR_DENIED;
 800c5cc:	2307      	movs	r3, #7
 800c5ce:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c5d2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d126      	bne.n	800c628 <f_open+0x384>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
 800c5dc:	f003 0308 	and.w	r3, r3, #8
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <f_open+0x348>
				mode |= FA_MODIFIED;
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
 800c5e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5ea:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800c5f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c5fa:	7dfb      	ldrb	r3, [r7, #23]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	bf8c      	ite	hi
 800c600:	2301      	movhi	r3, #1
 800c602:	2300      	movls	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	461a      	mov	r2, r3
 800c608:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c60c:	4611      	mov	r1, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fc fcc6 	bl	8008fa0 <inc_lock>
 800c614:	4602      	mov	r2, r0
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <f_open+0x384>
 800c622:	2302      	movs	r3, #2
 800c624:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c628:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f040 8101 	bne.w	800c834 <f_open+0x590>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b04      	cmp	r3, #4
 800c638:	d12d      	bne.n	800c696 <f_open+0x3f2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c644:	4613      	mov	r3, r2
 800c646:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c64a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c64e:	431a      	orrs	r2, r3
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c654:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	3334      	adds	r3, #52	@ 0x34
 800c660:	4618      	mov	r0, r3
 800c662:	f7fc f9d4 	bl	8008a0e <ld_dword>
 800c666:	4602      	mov	r2, r0
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	3338      	adds	r3, #56	@ 0x38
 800c672:	4618      	mov	r0, r3
 800c674:	f7fc f9ee 	bl	8008a54 <ld_qword>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	69f9      	ldr	r1, [r7, #28]
 800c67e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	3321      	adds	r3, #33	@ 0x21
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	71da      	strb	r2, [r3, #7]
 800c694:	e016      	b.n	800c6c4 <f_open+0x420>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c698:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c69a:	4611      	mov	r1, r2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fd fd6b 	bl	800a178 <ld_clust>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c6a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6aa:	331c      	adds	r3, #28
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fc f9ae 	bl	8008a0e <ld_dword>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	60bb      	str	r3, [r7, #8]
 800c6b8:	60fa      	str	r2, [r7, #12]
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c6c0:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d2:	88da      	ldrh	r2, [r3, #6]
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	7dfa      	ldrb	r2, [r7, #23]
 800c6dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c6ee:	69f9      	ldr	r1, [r7, #28]
 800c6f0:	f04f 0200 	mov.w	r2, #0
 800c6f4:	f04f 0300 	mov.w	r3, #0
 800c6f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	3354      	adds	r3, #84	@ 0x54
 800c700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c704:	2100      	movs	r1, #0
 800c706:	4618      	mov	r0, r3
 800c708:	f7fc fb6f 	bl	8008dea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c70c:	7dfb      	ldrb	r3, [r7, #23]
 800c70e:	f003 0320 	and.w	r3, r3, #32
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 808e 	beq.w	800c834 <f_open+0x590>
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c71e:	4313      	orrs	r3, r2
 800c720:	f000 8088 	beq.w	800c834 <f_open+0x590>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c72a:	69f9      	ldr	r1, [r7, #28]
 800c72c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c732:	895b      	ldrh	r3, [r3, #10]
 800c734:	025b      	lsls	r3, r3, #9
 800c736:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c748:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800c74c:	e027      	b.n	800c79e <f_open+0x4fa>
					clst = get_fat(&fp->obj, clst);
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c754:	4618      	mov	r0, r3
 800c756:	f7fc fe11 	bl	800937c <get_fat>
 800c75a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800c75e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c762:	2b01      	cmp	r3, #1
 800c764:	d802      	bhi.n	800c76c <f_open+0x4c8>
 800c766:	2302      	movs	r3, #2
 800c768:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c76c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c774:	d102      	bne.n	800c77c <f_open+0x4d8>
 800c776:	2301      	movs	r3, #1
 800c778:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c77c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c780:	2200      	movs	r2, #0
 800c782:	469a      	mov	sl, r3
 800c784:	4693      	mov	fp, r2
 800c786:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c78a:	ebb2 010a 	subs.w	r1, r2, sl
 800c78e:	6039      	str	r1, [r7, #0]
 800c790:	eb63 030b 	sbc.w	r3, r3, fp
 800c794:	607b      	str	r3, [r7, #4]
 800c796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c79a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800c79e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10a      	bne.n	800c7bc <f_open+0x518>
 800c7a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	4698      	mov	r8, r3
 800c7ae:	4691      	mov	r9, r2
 800c7b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c7b4:	4590      	cmp	r8, r2
 800c7b6:	eb79 0303 	sbcs.w	r3, r9, r3
 800c7ba:	d3c8      	bcc.n	800c74e <f_open+0x4aa>
				}
				fp->clust = clst;
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c7c2:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c7c4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d133      	bne.n	800c834 <f_open+0x590>
 800c7cc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c7d0:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c7d4:	2500      	movs	r5, #0
 800c7d6:	ea54 0305 	orrs.w	r3, r4, r5
 800c7da:	d02b      	beq.n	800c834 <f_open+0x590>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fc fdaa 	bl	800933c <clust2sect>
 800c7e8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c7ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d103      	bne.n	800c7f8 <f_open+0x554>
						res = FR_INT_ERR;
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800c7f6:	e01d      	b.n	800c834 <f_open+0x590>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7f8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800c7fc:	f04f 0200 	mov.w	r2, #0
 800c800:	f04f 0300 	mov.w	r3, #0
 800c804:	0a42      	lsrs	r2, r0, #9
 800c806:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c80a:	0a4b      	lsrs	r3, r1, #9
 800c80c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c80e:	441a      	add	r2, r3
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c816:	7858      	ldrb	r0, [r3, #1]
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c822:	2301      	movs	r3, #1
 800c824:	f7fc f87c 	bl	8008920 <disk_read>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d002      	beq.n	800c834 <f_open+0x590>
 800c82e:	2301      	movs	r3, #1
 800c830:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800c834:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800c838:	f000 ff6a 	bl	800d710 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c83c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c840:	2b00      	cmp	r3, #0
 800c842:	d002      	beq.n	800c84a <f_open+0x5a6>
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	2200      	movs	r2, #0
 800c848:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c84a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800c84e:	4618      	mov	r0, r3
 800c850:	37a0      	adds	r7, #160	@ 0xa0
 800c852:	46bd      	mov	sp, r7
 800c854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c858 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	b095      	sub	sp, #84	@ 0x54
 800c85e:	af00      	add	r7, sp, #0
 800c860:	61f8      	str	r0, [r7, #28]
 800c862:	61b9      	str	r1, [r7, #24]
 800c864:	617a      	str	r2, [r7, #20]
 800c866:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	2200      	movs	r2, #0
 800c870:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff fc96 	bl	800c1ac <validate>
 800c880:	4603      	mov	r3, r0
 800c882:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c886:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d108      	bne.n	800c8a0 <f_read+0x48>
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c894:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c898:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <f_read+0x4e>
 800c8a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c8a4:	e14b      	b.n	800cb3e <f_read+0x2e6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c8ac:	f003 0301 	and.w	r3, r3, #1
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <f_read+0x60>
 800c8b4:	2307      	movs	r3, #7
 800c8b6:	e142      	b.n	800cb3e <f_read+0x2e6>
	remain = fp->obj.objsize - fp->fptr;
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c8c4:	1a86      	subs	r6, r0, r2
 800c8c6:	603e      	str	r6, [r7, #0]
 800c8c8:	eb61 0303 	sbc.w	r3, r1, r3
 800c8cc:	607b      	str	r3, [r7, #4]
 800c8ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	469a      	mov	sl, r3
 800c8dc:	4693      	mov	fp, r2
 800c8de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c8e2:	4552      	cmp	r2, sl
 800c8e4:	eb73 030b 	sbcs.w	r3, r3, fp
 800c8e8:	f080 8124 	bcs.w	800cb34 <f_read+0x2dc>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ee:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800c8f0:	e120      	b.n	800cb34 <f_read+0x2dc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c8f8:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800c8fc:	2500      	movs	r5, #0
 800c8fe:	ea54 0305 	orrs.w	r3, r4, r5
 800c902:	f040 80d9 	bne.w	800cab8 <f_read+0x260>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	f04f 0300 	mov.w	r3, #0
 800c914:	0a42      	lsrs	r2, r0, #9
 800c916:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800c91a:	0a4b      	lsrs	r3, r1, #9
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	895b      	ldrh	r3, [r3, #10]
 800c920:	3b01      	subs	r3, #1
 800c922:	4013      	ands	r3, r2
 800c924:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800c926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d132      	bne.n	800c992 <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c932:	4313      	orrs	r3, r2
 800c934:	d103      	bne.n	800c93e <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c93c:	e013      	b.n	800c966 <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c942:	2b00      	cmp	r3, #0
 800c944:	d007      	beq.n	800c956 <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c94c:	69f8      	ldr	r0, [r7, #28]
 800c94e:	f7fd fa18 	bl	8009d82 <clmt_clust>
 800c952:	64b8      	str	r0, [r7, #72]	@ 0x48
 800c954:	e007      	b.n	800c966 <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c95c:	4619      	mov	r1, r3
 800c95e:	4610      	mov	r0, r2
 800c960:	f7fc fd0c 	bl	800937c <get_fat>
 800c964:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d805      	bhi.n	800c978 <f_read+0x120>
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	2202      	movs	r2, #2
 800c970:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c974:	2302      	movs	r3, #2
 800c976:	e0e2      	b.n	800cb3e <f_read+0x2e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97e:	d105      	bne.n	800c98c <f_read+0x134>
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c988:	2301      	movs	r3, #1
 800c98a:	e0d8      	b.n	800cb3e <f_read+0x2e6>
				fp->clust = clst;				/* Update current cluster */
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c990:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c998:	4619      	mov	r1, r3
 800c99a:	4610      	mov	r0, r2
 800c99c:	f7fc fcce 	bl	800933c <clust2sect>
 800c9a0:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d105      	bne.n	800c9b4 <f_read+0x15c>
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	e0c4      	b.n	800cb3e <f_read+0x2e6>
			sect += csect;
 800c9b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b8:	4413      	add	r3, r2
 800c9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	0a5b      	lsrs	r3, r3, #9
 800c9c0:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c9c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d03b      	beq.n	800ca40 <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c9c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9cc:	4413      	add	r3, r2
 800c9ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9d0:	8952      	ldrh	r2, [r2, #10]
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d905      	bls.n	800c9e2 <f_read+0x18a>
					cc = fs->csize - csect;
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d8:	895b      	ldrh	r3, [r3, #10]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9de:	1ad3      	subs	r3, r2, r3
 800c9e0:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e4:	7858      	ldrb	r0, [r3, #1]
 800c9e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9ec:	f7fb ff98 	bl	8008920 <disk_read>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d005      	beq.n	800ca02 <f_read+0x1aa>
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e09d      	b.n	800cb3e <f_read+0x2e6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca08:	b25b      	sxtb	r3, r3
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	da14      	bge.n	800ca38 <f_read+0x1e0>
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca14:	1ad3      	subs	r3, r2, r3
 800ca16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d90d      	bls.n	800ca38 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	025b      	lsls	r3, r3, #9
 800ca26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca28:	18d0      	adds	r0, r2, r3
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	3354      	adds	r3, #84	@ 0x54
 800ca2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca32:	4619      	mov	r1, r3
 800ca34:	f7fc f9b8 	bl	8008da8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ca38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca3a:	025b      	lsls	r3, r3, #9
 800ca3c:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800ca3e:	e059      	b.n	800caf4 <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d033      	beq.n	800cab2 <f_read+0x25a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca50:	b25b      	sxtb	r3, r3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	da1b      	bge.n	800ca8e <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca58:	7858      	ldrb	r0, [r3, #1]
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca64:	2301      	movs	r3, #1
 800ca66:	f7fb ff7b 	bl	8008960 <disk_write>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d005      	beq.n	800ca7c <f_read+0x224>
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e060      	b.n	800cb3e <f_read+0x2e6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca90:	7858      	ldrb	r0, [r3, #1]
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ca98:	2301      	movs	r3, #1
 800ca9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca9c:	f7fb ff40 	bl	8008920 <disk_read>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d005      	beq.n	800cab2 <f_read+0x25a>
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800caae:	2301      	movs	r3, #1
 800cab0:	e045      	b.n	800cb3e <f_read+0x2e6>
			}
#endif
			fp->sect = sect;
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cab6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cabe:	4613      	mov	r3, r2
 800cac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cac8:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800caca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d901      	bls.n	800cad6 <f_read+0x27e>
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cae2:	4613      	mov	r3, r2
 800cae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae8:	440b      	add	r3, r1
 800caea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800caec:	4619      	mov	r1, r3
 800caee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800caf0:	f7fc f95a 	bl	8008da8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800caf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800caf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caf8:	4413      	add	r3, r2
 800cafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cb02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb04:	2000      	movs	r0, #0
 800cb06:	4688      	mov	r8, r1
 800cb08:	4681      	mov	r9, r0
 800cb0a:	eb12 0108 	adds.w	r1, r2, r8
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	eb43 0309 	adc.w	r3, r3, r9
 800cb14:	60fb      	str	r3, [r7, #12]
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cb1c:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb26:	441a      	add	r2, r3
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f47f aedb 	bne.w	800c8f2 <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3754      	adds	r7, #84	@ 0x54
 800cb42:	46bd      	mov	sp, r7
 800cb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb48 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	b08d      	sub	sp, #52	@ 0x34
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	607a      	str	r2, [r7, #4]
 800cb56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f107 0210 	add.w	r2, r7, #16
 800cb68:	4611      	mov	r1, r2
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fb1e 	bl	800c1ac <validate>
 800cb70:	4603      	mov	r3, r0
 800cb72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d108      	bne.n	800cb90 <f_write+0x48>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cb84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cb88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <f_write+0x4e>
 800cb90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb94:	e187      	b.n	800cea6 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb9c:	f003 0302 	and.w	r3, r3, #2
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d101      	bne.n	800cba8 <f_write+0x60>
 800cba4:	2307      	movs	r3, #7
 800cba6:	e17e      	b.n	800cea6 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b04      	cmp	r3, #4
 800cbae:	f000 816a 	beq.w	800ce86 <f_write+0x33e>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	18d1      	adds	r1, r2, r3
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	4299      	cmp	r1, r3
 800cbc6:	f080 815e 	bcs.w	800ce86 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	43db      	mvns	r3, r3
 800cbd4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cbd6:	e156      	b.n	800ce86 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cbde:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	ea54 0305 	orrs.w	r3, r4, r5
 800cbe8:	f040 80fb 	bne.w	800cde2 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	f04f 0300 	mov.w	r3, #0
 800cbfa:	0a42      	lsrs	r2, r0, #9
 800cbfc:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800cc00:	0a4b      	lsrs	r3, r1, #9
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	895b      	ldrh	r3, [r3, #10]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	4013      	ands	r3, r2
 800cc0a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d146      	bne.n	800cca0 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	d10c      	bne.n	800cc36 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d11a      	bne.n	800cc5e <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fc ffa7 	bl	8009b80 <create_chain>
 800cc32:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cc34:	e013      	b.n	800cc5e <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d007      	beq.n	800cc4e <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f7fd f89c 	bl	8009d82 <clmt_clust>
 800cc4a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cc4c:	e007      	b.n	800cc5e <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc54:	4619      	mov	r1, r3
 800cc56:	4610      	mov	r0, r2
 800cc58:	f7fc ff92 	bl	8009b80 <create_chain>
 800cc5c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f000 8115 	beq.w	800ce90 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d105      	bne.n	800cc78 <f_write+0x130>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2202      	movs	r2, #2
 800cc70:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc74:	2302      	movs	r3, #2
 800cc76:	e116      	b.n	800cea6 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7e:	d105      	bne.n	800cc8c <f_write+0x144>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2201      	movs	r2, #1
 800cc84:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e10c      	b.n	800cea6 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc90:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d102      	bne.n	800cca0 <f_write+0x158>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc9e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cca6:	b25b      	sxtb	r3, r3
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	da1b      	bge.n	800cce4 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	7858      	ldrb	r0, [r3, #1]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f7fb fe50 	bl	8008960 <disk_write>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d005      	beq.n	800ccd2 <f_write+0x18a>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e0e9      	b.n	800cea6 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccea:	4619      	mov	r1, r3
 800ccec:	4610      	mov	r0, r2
 800ccee:	f7fc fb25 	bl	800933c <clust2sect>
 800ccf2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d105      	bne.n	800cd06 <f_write+0x1be>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cd02:	2302      	movs	r3, #2
 800cd04:	e0cf      	b.n	800cea6 <f_write+0x35e>
			sect += csect;
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	0a5b      	lsrs	r3, r3, #9
 800cd12:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d03f      	beq.n	800cd9a <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cd1a:	69ba      	ldr	r2, [r7, #24]
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	4413      	add	r3, r2
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	8952      	ldrh	r2, [r2, #10]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d905      	bls.n	800cd34 <f_write+0x1ec>
					cc = fs->csize - csect;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	895b      	ldrh	r3, [r3, #10]
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	7858      	ldrb	r0, [r3, #1]
 800cd38:	6a3b      	ldr	r3, [r7, #32]
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	69f9      	ldr	r1, [r7, #28]
 800cd3e:	f7fb fe0f 	bl	8008960 <disk_write>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d005      	beq.n	800cd54 <f_write+0x20c>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cd50:	2301      	movs	r3, #1
 800cd52:	e0a8      	b.n	800cea6 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	6a3a      	ldr	r2, [r7, #32]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d917      	bls.n	800cd92 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	025b      	lsls	r3, r3, #9
 800cd72:	69fa      	ldr	r2, [r7, #28]
 800cd74:	4413      	add	r3, r2
 800cd76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	f7fc f814 	bl	8008da8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cd92:	6a3b      	ldr	r3, [r7, #32]
 800cd94:	025b      	lsls	r3, r3, #9
 800cd96:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cd98:	e04a      	b.n	800ce30 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d01b      	beq.n	800cddc <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cdb0:	4290      	cmp	r0, r2
 800cdb2:	eb71 0303 	sbcs.w	r3, r1, r3
 800cdb6:	d211      	bcs.n	800cddc <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	7858      	ldrb	r0, [r3, #1]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	697a      	ldr	r2, [r7, #20]
 800cdc6:	f7fb fdab 	bl	8008920 <disk_read>
 800cdca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d005      	beq.n	800cddc <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e064      	b.n	800cea6 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cde8:	4613      	mov	r3, r2
 800cdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdee:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cdf2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cdf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d901      	bls.n	800ce00 <f_write+0x2b8>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce12:	440b      	add	r3, r1
 800ce14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce16:	69f9      	ldr	r1, [r7, #28]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fb ffc5 	bl	8008da8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ce30:	69fa      	ldr	r2, [r7, #28]
 800ce32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce34:	4413      	add	r3, r2
 800ce36:	61fb      	str	r3, [r7, #28]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ce3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce40:	2000      	movs	r0, #0
 800ce42:	4688      	mov	r8, r1
 800ce44:	4681      	mov	r9, r0
 800ce46:	eb12 0a08 	adds.w	sl, r2, r8
 800ce4a:	eb43 0b09 	adc.w	fp, r3, r9
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce5a:	68f9      	ldr	r1, [r7, #12]
 800ce5c:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800ce60:	4282      	cmp	r2, r0
 800ce62:	eb73 0601 	sbcs.w	r6, r3, r1
 800ce66:	d201      	bcs.n	800ce6c <f_write+0x324>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	68f9      	ldr	r1, [r7, #12]
 800ce6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	441a      	add	r2, r3
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	601a      	str	r2, [r3, #0]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f47f aea5 	bne.w	800cbd8 <f_write+0x90>
 800ce8e:	e000      	b.n	800ce92 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce90:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3734      	adds	r7, #52	@ 0x34
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ceb0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b09c      	sub	sp, #112	@ 0x70
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800cebe:	4611      	mov	r1, r2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7ff f973 	bl	800c1ac <validate>
 800cec6:	4603      	mov	r3, r0
 800cec8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800cecc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f040 8119 	bne.w	800d108 <f_sync+0x258>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f000 8111 	beq.w	800d108 <f_sync+0x258>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ceec:	b25b      	sxtb	r3, r3
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	da17      	bge.n	800cf22 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cef4:	7858      	ldrb	r0, [r3, #1]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf00:	2301      	movs	r3, #1
 800cf02:	f7fb fd2d 	bl	8008960 <disk_write>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <f_sync+0x60>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e0fd      	b.n	800d10c <f_sync+0x25c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cf22:	f7fb fbe5 	bl	80086f0 <get_fattime>
 800cf26:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cf28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b04      	cmp	r3, #4
 800cf2e:	f040 80a0 	bne.w	800d072 <f_sync+0x1c2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fc fd0f 	bl	8009958 <fill_first_frag>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800cf40:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10a      	bne.n	800cf5e <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf52:	4619      	mov	r1, r3
 800cf54:	f7fc fd2f 	bl	80099b6 <fill_last_frag>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800cf5e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f040 80d0 	bne.w	800d108 <f_sync+0x258>
					INIT_NAMBUF(fs);
 800cf68:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800cf6c:	f000 fbc4 	bl	800d6f8 <ff_memalloc>
 800cf70:	6638      	str	r0, [r7, #96]	@ 0x60
 800cf72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d101      	bne.n	800cf7c <f_sync+0xcc>
 800cf78:	2311      	movs	r3, #17
 800cf7a:	e0c7      	b.n	800d10c <f_sync+0x25c>
 800cf7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cf80:	60da      	str	r2, [r3, #12]
 800cf82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cf86:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800cf8a:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	f107 0308 	add.w	r3, r7, #8
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fd fcdf 	bl	800a958 <load_obj_dir>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800cfa0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d160      	bne.n	800d06a <f_sync+0x1ba>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800cfa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	3304      	adds	r3, #4
 800cfae:	781a      	ldrb	r2, [r3, #0]
 800cfb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	f042 0220 	orr.w	r2, r2, #32
 800cfba:	b2d2      	uxtb	r2, r2
 800cfbc:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	79da      	ldrb	r2, [r3, #7]
 800cfc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	3321      	adds	r3, #33	@ 0x21
 800cfc8:	f042 0201 	orr.w	r2, r2, #1
 800cfcc:	b2d2      	uxtb	r2, r2
 800cfce:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800cfd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4610      	mov	r0, r2
 800cfe0:	f7fb fe2e 	bl	8008c40 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800cfe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cff2:	4608      	mov	r0, r1
 800cff4:	f7fb fe50 	bl	8008c98 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800cff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d006:	4608      	mov	r0, r1
 800d008:	f7fb fe46 	bl	8008c98 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d00c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	330c      	adds	r3, #12
 800d012:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d014:	4618      	mov	r0, r3
 800d016:	f7fb fe13 	bl	8008c40 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d01a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	3315      	adds	r3, #21
 800d020:	2200      	movs	r2, #0
 800d022:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	3310      	adds	r3, #16
 800d02a:	2100      	movs	r1, #0
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fb fe07 	bl	8008c40 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d032:	f107 0308 	add.w	r3, r7, #8
 800d036:	4618      	mov	r0, r3
 800d038:	f7fd fcc4 	bl	800a9c4 <store_xdir>
 800d03c:	4603      	mov	r3, r0
 800d03e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800d042:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10f      	bne.n	800d06a <f_sync+0x1ba>
							res = sync_fs(fs);
 800d04a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fc f907 	bl	8009260 <sync_fs>
 800d052:	4603      	mov	r3, r0
 800d054:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d05e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d062:	b2da      	uxtb	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800d06a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d06c:	f000 fb50 	bl	800d710 <ff_memfree>
 800d070:	e04a      	b.n	800d108 <f_sync+0x258>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d072:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f7fc f8c2 	bl	8009204 <move_window>
 800d080:	4603      	mov	r3, r0
 800d082:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800d086:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d13c      	bne.n	800d108 <f_sync+0x258>
					dir = fp->dir_ptr;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d092:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d096:	330b      	adds	r3, #11
 800d098:	781a      	ldrb	r2, [r3, #0]
 800d09a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d09c:	330b      	adds	r3, #11
 800d09e:	f042 0220 	orr.w	r2, r2, #32
 800d0a2:	b2d2      	uxtb	r2, r2
 800d0a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6818      	ldr	r0, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d0b2:	f7fd f880 	bl	800a1b6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d0b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0b8:	f103 001c 	add.w	r0, r3, #28
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	f7fb fdbb 	bl	8008c40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d0ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0cc:	3316      	adds	r3, #22
 800d0ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fb fdb5 	bl	8008c40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d0d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0d8:	3312      	adds	r3, #18
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fb fd94 	bl	8008c0a <st_word>
					fs->wflag = 1;
 800d0e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d0e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fc f8b8 	bl	8009260 <sync_fs>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d0fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d100:	b2da      	uxtb	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d108:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3770      	adds	r7, #112	@ 0x70
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff fec7 	bl	800ceb0 <f_sync>
 800d122:	4603      	mov	r3, r0
 800d124:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d126:	7bfb      	ldrb	r3, [r7, #15]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d118      	bne.n	800d15e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f107 0208 	add.w	r2, r7, #8
 800d132:	4611      	mov	r1, r2
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff f839 	bl	800c1ac <validate>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10c      	bne.n	800d15e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d148:	4618      	mov	r0, r3
 800d14a:	f7fb ffb7 	bl	80090bc <dec_lock>
 800d14e:	4603      	mov	r3, r0
 800d150:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d102      	bne.n	800d15e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <f_opendir+0x14>
 800d178:	2309      	movs	r3, #9
 800d17a:	e0af      	b.n	800d2dc <f_opendir+0x174>

	/* Get logical drive */
	obj = &dp->obj;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d180:	f107 0108 	add.w	r1, r7, #8
 800d184:	463b      	mov	r3, r7
 800d186:	2200      	movs	r2, #0
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fe fcbd 	bl	800bb08 <find_volume>
 800d18e:	4603      	mov	r3, r0
 800d190:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d192:	7dfb      	ldrb	r3, [r7, #23]
 800d194:	2b00      	cmp	r3, #0
 800d196:	f040 809a 	bne.w	800d2ce <f_opendir+0x166>
		obj->fs = fs;
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d1a0:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d1a4:	f000 faa8 	bl	800d6f8 <ff_memalloc>
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <f_opendir+0x4c>
 800d1b0:	2311      	movs	r3, #17
 800d1b2:	e093      	b.n	800d2dc <f_opendir+0x174>
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	60da      	str	r2, [r3, #12]
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d1c2:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7fe fb4b 	bl	800b864 <follow_path>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d172      	bne.n	800d2be <f_opendir+0x156>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d1de:	b25b      	sxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	db47      	blt.n	800d274 <f_opendir+0x10c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	799b      	ldrb	r3, [r3, #6]
 800d1e8:	f003 0310 	and.w	r3, r3, #16
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d03f      	beq.n	800d270 <f_opendir+0x108>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b04      	cmp	r3, #4
 800d1f6:	d130      	bne.n	800d25a <f_opendir+0xf2>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	689a      	ldr	r2, [r3, #8]
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d206:	4613      	mov	r3, r2
 800d208:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d20c:	693a      	ldr	r2, [r7, #16]
 800d20e:	79d2      	ldrb	r2, [r2, #7]
 800d210:	431a      	orrs	r2, r3
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	3334      	adds	r3, #52	@ 0x34
 800d224:	4618      	mov	r0, r3
 800d226:	f7fb fbf2 	bl	8008a0e <ld_dword>
 800d22a:	4602      	mov	r2, r0
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	3338      	adds	r3, #56	@ 0x38
 800d236:	4618      	mov	r0, r3
 800d238:	f7fb fc0c 	bl	8008a54 <ld_qword>
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	6939      	ldr	r1, [r7, #16]
 800d242:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	3321      	adds	r3, #33	@ 0x21
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	f003 0302 	and.w	r3, r3, #2
 800d252:	b2da      	uxtb	r2, r3
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	71da      	strb	r2, [r3, #7]
 800d258:	e00c      	b.n	800d274 <f_opendir+0x10c>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d260:	4619      	mov	r1, r3
 800d262:	4610      	mov	r0, r2
 800d264:	f7fc ff88 	bl	800a178 <ld_clust>
 800d268:	4602      	mov	r2, r0
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	609a      	str	r2, [r3, #8]
 800d26e:	e001      	b.n	800d274 <f_opendir+0x10c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d270:	2305      	movs	r3, #5
 800d272:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d274:	7dfb      	ldrb	r3, [r7, #23]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d121      	bne.n	800d2be <f_opendir+0x156>
				obj->id = fs->id;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	88da      	ldrh	r2, [r3, #6]
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d282:	2100      	movs	r1, #0
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7fc fdc0 	bl	8009e0a <dir_sdi>
 800d28a:	4603      	mov	r3, r0
 800d28c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d114      	bne.n	800d2be <f_opendir+0x156>
					if (obj->sclust) {
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00d      	beq.n	800d2b8 <f_opendir+0x150>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d29c:	2100      	movs	r1, #0
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7fb fe7e 	bl	8008fa0 <inc_lock>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d105      	bne.n	800d2be <f_opendir+0x156>
 800d2b2:	2312      	movs	r3, #18
 800d2b4:	75fb      	strb	r3, [r7, #23]
 800d2b6:	e002      	b.n	800d2be <f_opendir+0x156>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f000 fa26 	bl	800d710 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	d101      	bne.n	800d2ce <f_opendir+0x166>
 800d2ca:	2305      	movs	r3, #5
 800d2cc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d002      	beq.n	800d2da <f_opendir+0x172>
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f107 0208 	add.w	r2, r7, #8
 800d2f2:	4611      	mov	r1, r2
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fe ff59 	bl	800c1ac <validate>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d110      	bne.n	800d326 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d006      	beq.n	800d31a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d310:	4618      	mov	r0, r3
 800d312:	f7fb fed3 	bl	80090bc <dec_lock>
 800d316:	4603      	mov	r3, r0
 800d318:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d31a:	7bfb      	ldrb	r3, [r7, #15]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d102      	bne.n	800d326 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d326:	7bfb      	ldrb	r3, [r7, #15]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f107 020c 	add.w	r2, r7, #12
 800d340:	4611      	mov	r1, r2
 800d342:	4618      	mov	r0, r3
 800d344:	f7fe ff32 	bl	800c1ac <validate>
 800d348:	4603      	mov	r3, r0
 800d34a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d13b      	bne.n	800d3ca <f_readdir+0x9a>
		if (!fno) {
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d106      	bne.n	800d366 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d358:	2100      	movs	r1, #0
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7fc fd55 	bl	8009e0a <dir_sdi>
 800d360:	4603      	mov	r3, r0
 800d362:	75fb      	strb	r3, [r7, #23]
 800d364:	e031      	b.n	800d3ca <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 800d366:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d36a:	f000 f9c5 	bl	800d6f8 <ff_memalloc>
 800d36e:	6138      	str	r0, [r7, #16]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d101      	bne.n	800d37a <f_readdir+0x4a>
 800d376:	2311      	movs	r3, #17
 800d378:	e028      	b.n	800d3cc <f_readdir+0x9c>
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	60da      	str	r2, [r3, #12]
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	693a      	ldr	r2, [r7, #16]
 800d384:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d388:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800d38a:	2100      	movs	r1, #0
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7fd fbdb 	bl	800ab48 <dir_read>
 800d392:	4603      	mov	r3, r0
 800d394:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d396:	7dfb      	ldrb	r3, [r7, #23]
 800d398:	2b04      	cmp	r3, #4
 800d39a:	d101      	bne.n	800d3a0 <f_readdir+0x70>
 800d39c:	2300      	movs	r3, #0
 800d39e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800d3a0:	7dfb      	ldrb	r3, [r7, #23]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10e      	bne.n	800d3c4 <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7fd ff65 	bl	800b278 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7fc fdb0 	bl	8009f16 <dir_next>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	2b04      	cmp	r3, #4
 800d3be:	d101      	bne.n	800d3c4 <f_readdir+0x94>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800d3c4:	6938      	ldr	r0, [r7, #16]
 800d3c6:	f000 f9a3 	bl	800d710 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b098      	sub	sp, #96	@ 0x60
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d3de:	f107 0108 	add.w	r1, r7, #8
 800d3e2:	1d3b      	adds	r3, r7, #4
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe fb8e 	bl	800bb08 <find_volume>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d3f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d134      	bne.n	800d464 <f_stat+0x90>
		INIT_NAMBUF(dj.obj.fs);
 800d3fa:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d3fe:	f000 f97b 	bl	800d6f8 <ff_memalloc>
 800d402:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <f_stat+0x3a>
 800d40a:	2311      	movs	r3, #17
 800d40c:	e02c      	b.n	800d468 <f_stat+0x94>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d412:	60da      	str	r2, [r3, #12]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d418:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d41c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	f107 0308 	add.w	r3, r7, #8
 800d424:	4611      	mov	r1, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fa1c 	bl	800b864 <follow_path>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d432:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d436:	2b00      	cmp	r3, #0
 800d438:	d111      	bne.n	800d45e <f_stat+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d43a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d43e:	b25b      	sxtb	r3, r3
 800d440:	2b00      	cmp	r3, #0
 800d442:	da03      	bge.n	800d44c <f_stat+0x78>
				res = FR_INVALID_NAME;
 800d444:	2306      	movs	r3, #6
 800d446:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d44a:	e008      	b.n	800d45e <f_stat+0x8a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d005      	beq.n	800d45e <f_stat+0x8a>
 800d452:	f107 0308 	add.w	r3, r7, #8
 800d456:	6839      	ldr	r1, [r7, #0]
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fd ff0d 	bl	800b278 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800d45e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d460:	f000 f956 	bl	800d710 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800d464:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3760      	adds	r7, #96	@ 0x60
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	4613      	mov	r3, r2
 800d47c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d47e:	2301      	movs	r3, #1
 800d480:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d486:	4b1f      	ldr	r3, [pc, #124]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d488:	7a5b      	ldrb	r3, [r3, #9]
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d131      	bne.n	800d4f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d490:	4b1c      	ldr	r3, [pc, #112]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d492:	7a5b      	ldrb	r3, [r3, #9]
 800d494:	b2db      	uxtb	r3, r3
 800d496:	461a      	mov	r2, r3
 800d498:	4b1a      	ldr	r3, [pc, #104]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d49a:	2100      	movs	r1, #0
 800d49c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d49e:	4b19      	ldr	r3, [pc, #100]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4a0:	7a5b      	ldrb	r3, [r3, #9]
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	4a17      	ldr	r2, [pc, #92]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4ae:	4b15      	ldr	r3, [pc, #84]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4b0:	7a5b      	ldrb	r3, [r3, #9]
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	4b13      	ldr	r3, [pc, #76]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4b8:	4413      	add	r3, r2
 800d4ba:	79fa      	ldrb	r2, [r7, #7]
 800d4bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4be:	4b11      	ldr	r3, [pc, #68]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4c0:	7a5b      	ldrb	r3, [r3, #9]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	1c5a      	adds	r2, r3, #1
 800d4c6:	b2d1      	uxtb	r1, r2
 800d4c8:	4a0e      	ldr	r2, [pc, #56]	@ (800d504 <FATFS_LinkDriverEx+0x94>)
 800d4ca:	7251      	strb	r1, [r2, #9]
 800d4cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d4ce:	7dbb      	ldrb	r3, [r7, #22]
 800d4d0:	3330      	adds	r3, #48	@ 0x30
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	223a      	movs	r2, #58	@ 0x3a
 800d4de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	3302      	adds	r3, #2
 800d4e4:	222f      	movs	r2, #47	@ 0x2f
 800d4e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	3303      	adds	r3, #3
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	371c      	adds	r7, #28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	20000ffc 	.word	0x20000ffc

0800d508 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d512:	2200      	movs	r2, #0
 800d514:	6839      	ldr	r1, [r7, #0]
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff ffaa 	bl	800d470 <FATFS_LinkDriverEx>
 800d51c:	4603      	mov	r3, r0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d528:	b480      	push	{r7}
 800d52a:	b089      	sub	sp, #36	@ 0x24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	6039      	str	r1, [r7, #0]
 800d532:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800d534:	88fb      	ldrh	r3, [r7, #6]
 800d536:	2b7f      	cmp	r3, #127	@ 0x7f
 800d538:	d802      	bhi.n	800d540 <ff_convert+0x18>
		c = chr;
 800d53a:	88fb      	ldrh	r3, [r7, #6]
 800d53c:	837b      	strh	r3, [r7, #26]
 800d53e:	e045      	b.n	800d5cc <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d005      	beq.n	800d552 <ff_convert+0x2a>
			p = oem2uni;
 800d546:	4b25      	ldr	r3, [pc, #148]	@ (800d5dc <ff_convert+0xb4>)
 800d548:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800d54a:	f245 5320 	movw	r3, #21792	@ 0x5520
 800d54e:	60bb      	str	r3, [r7, #8]
 800d550:	e004      	b.n	800d55c <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800d552:	4b23      	ldr	r3, [pc, #140]	@ (800d5e0 <ff_convert+0xb8>)
 800d554:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800d556:	f245 5320 	movw	r3, #21792	@ 0x5520
 800d55a:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800d560:	2310      	movs	r3, #16
 800d562:	613b      	str	r3, [r7, #16]
 800d564:	e021      	b.n	800d5aa <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	0fda      	lsrs	r2, r3, #31
 800d56e:	4413      	add	r3, r2
 800d570:	105b      	asrs	r3, r3, #1
 800d572:	461a      	mov	r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	4413      	add	r3, r2
 800d578:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	69fa      	ldr	r2, [r7, #28]
 800d580:	4413      	add	r3, r2
 800d582:	881b      	ldrh	r3, [r3, #0]
 800d584:	88fa      	ldrh	r2, [r7, #6]
 800d586:	429a      	cmp	r2, r3
 800d588:	d013      	beq.n	800d5b2 <ff_convert+0x8a>
			if (chr > p[i * 2])
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	69fa      	ldr	r2, [r7, #28]
 800d590:	4413      	add	r3, r2
 800d592:	881b      	ldrh	r3, [r3, #0]
 800d594:	88fa      	ldrh	r2, [r7, #6]
 800d596:	429a      	cmp	r2, r3
 800d598:	d902      	bls.n	800d5a0 <ff_convert+0x78>
				li = i;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	60fb      	str	r3, [r7, #12]
 800d59e:	e001      	b.n	800d5a4 <ff_convert+0x7c>
			else
				hi = i;
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	613b      	str	r3, [r7, #16]
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1da      	bne.n	800d566 <ff_convert+0x3e>
 800d5b0:	e000      	b.n	800d5b4 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800d5b2:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d006      	beq.n	800d5c8 <ff_convert+0xa0>
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	3302      	adds	r3, #2
 800d5c0:	69fa      	ldr	r2, [r7, #28]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	881b      	ldrh	r3, [r3, #0]
 800d5c6:	e000      	b.n	800d5ca <ff_convert+0xa2>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800d5cc:	8b7b      	ldrh	r3, [r7, #26]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3724      	adds	r7, #36	@ 0x24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	080274e0 	.word	0x080274e0
 800d5e0:	0801205c 	.word	0x0801205c

0800d5e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d5ee:	88fb      	ldrh	r3, [r7, #6]
 800d5f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5f4:	d201      	bcs.n	800d5fa <ff_wtoupper+0x16>
 800d5f6:	4b3e      	ldr	r3, [pc, #248]	@ (800d6f0 <ff_wtoupper+0x10c>)
 800d5f8:	e000      	b.n	800d5fc <ff_wtoupper+0x18>
 800d5fa:	4b3e      	ldr	r3, [pc, #248]	@ (800d6f4 <ff_wtoupper+0x110>)
 800d5fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	1c9a      	adds	r2, r3, #2
 800d602:	617a      	str	r2, [r7, #20]
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d608:	8a7b      	ldrh	r3, [r7, #18]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d068      	beq.n	800d6e0 <ff_wtoupper+0xfc>
 800d60e:	88fa      	ldrh	r2, [r7, #6]
 800d610:	8a7b      	ldrh	r3, [r7, #18]
 800d612:	429a      	cmp	r2, r3
 800d614:	d364      	bcc.n	800d6e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	1c9a      	adds	r2, r3, #2
 800d61a:	617a      	str	r2, [r7, #20]
 800d61c:	881b      	ldrh	r3, [r3, #0]
 800d61e:	823b      	strh	r3, [r7, #16]
 800d620:	8a3b      	ldrh	r3, [r7, #16]
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	81fb      	strh	r3, [r7, #14]
 800d626:	8a3b      	ldrh	r3, [r7, #16]
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d62c:	88fa      	ldrh	r2, [r7, #6]
 800d62e:	8a79      	ldrh	r1, [r7, #18]
 800d630:	8a3b      	ldrh	r3, [r7, #16]
 800d632:	440b      	add	r3, r1
 800d634:	429a      	cmp	r2, r3
 800d636:	da49      	bge.n	800d6cc <ff_wtoupper+0xe8>
			switch (cmd) {
 800d638:	89fb      	ldrh	r3, [r7, #14]
 800d63a:	2b08      	cmp	r3, #8
 800d63c:	d84f      	bhi.n	800d6de <ff_wtoupper+0xfa>
 800d63e:	a201      	add	r2, pc, #4	@ (adr r2, 800d644 <ff_wtoupper+0x60>)
 800d640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d644:	0800d669 	.word	0x0800d669
 800d648:	0800d67b 	.word	0x0800d67b
 800d64c:	0800d691 	.word	0x0800d691
 800d650:	0800d699 	.word	0x0800d699
 800d654:	0800d6a1 	.word	0x0800d6a1
 800d658:	0800d6a9 	.word	0x0800d6a9
 800d65c:	0800d6b1 	.word	0x0800d6b1
 800d660:	0800d6b9 	.word	0x0800d6b9
 800d664:	0800d6c1 	.word	0x0800d6c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d668:	88fa      	ldrh	r2, [r7, #6]
 800d66a:	8a7b      	ldrh	r3, [r7, #18]
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	697a      	ldr	r2, [r7, #20]
 800d672:	4413      	add	r3, r2
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	80fb      	strh	r3, [r7, #6]
 800d678:	e027      	b.n	800d6ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d67a:	88fa      	ldrh	r2, [r7, #6]
 800d67c:	8a7b      	ldrh	r3, [r7, #18]
 800d67e:	1ad3      	subs	r3, r2, r3
 800d680:	b29b      	uxth	r3, r3
 800d682:	f003 0301 	and.w	r3, r3, #1
 800d686:	b29b      	uxth	r3, r3
 800d688:	88fa      	ldrh	r2, [r7, #6]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	80fb      	strh	r3, [r7, #6]
 800d68e:	e01c      	b.n	800d6ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d690:	88fb      	ldrh	r3, [r7, #6]
 800d692:	3b10      	subs	r3, #16
 800d694:	80fb      	strh	r3, [r7, #6]
 800d696:	e018      	b.n	800d6ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d698:	88fb      	ldrh	r3, [r7, #6]
 800d69a:	3b20      	subs	r3, #32
 800d69c:	80fb      	strh	r3, [r7, #6]
 800d69e:	e014      	b.n	800d6ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d6a0:	88fb      	ldrh	r3, [r7, #6]
 800d6a2:	3b30      	subs	r3, #48	@ 0x30
 800d6a4:	80fb      	strh	r3, [r7, #6]
 800d6a6:	e010      	b.n	800d6ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d6a8:	88fb      	ldrh	r3, [r7, #6]
 800d6aa:	3b1a      	subs	r3, #26
 800d6ac:	80fb      	strh	r3, [r7, #6]
 800d6ae:	e00c      	b.n	800d6ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d6b0:	88fb      	ldrh	r3, [r7, #6]
 800d6b2:	3308      	adds	r3, #8
 800d6b4:	80fb      	strh	r3, [r7, #6]
 800d6b6:	e008      	b.n	800d6ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d6b8:	88fb      	ldrh	r3, [r7, #6]
 800d6ba:	3b50      	subs	r3, #80	@ 0x50
 800d6bc:	80fb      	strh	r3, [r7, #6]
 800d6be:	e004      	b.n	800d6ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d6c0:	88fb      	ldrh	r3, [r7, #6]
 800d6c2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d6c6:	80fb      	strh	r3, [r7, #6]
 800d6c8:	bf00      	nop
			}
			break;
 800d6ca:	e008      	b.n	800d6de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d6cc:	89fb      	ldrh	r3, [r7, #14]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d195      	bne.n	800d5fe <ff_wtoupper+0x1a>
 800d6d2:	8a3b      	ldrh	r3, [r7, #16]
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	697a      	ldr	r2, [r7, #20]
 800d6d8:	4413      	add	r3, r2
 800d6da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d6dc:	e78f      	b.n	800d5fe <ff_wtoupper+0x1a>
			break;
 800d6de:	bf00      	nop
	}

	return chr;
 800d6e0:	88fb      	ldrh	r3, [r7, #6]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	371c      	adds	r7, #28
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	0803c964 	.word	0x0803c964
 800d6f4:	0803cb58 	.word	0x0803cb58

0800d6f8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 f815 	bl	800d730 <malloc>
 800d706:	4603      	mov	r3, r0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f811 	bl	800d740 <free>
}
 800d71e:	bf00      	nop
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <atoi>:
 800d726:	220a      	movs	r2, #10
 800d728:	2100      	movs	r1, #0
 800d72a:	f000 b93b 	b.w	800d9a4 <strtol>
	...

0800d730 <malloc>:
 800d730:	4b02      	ldr	r3, [pc, #8]	@ (800d73c <malloc+0xc>)
 800d732:	4601      	mov	r1, r0
 800d734:	6818      	ldr	r0, [r3, #0]
 800d736:	f000 b82d 	b.w	800d794 <_malloc_r>
 800d73a:	bf00      	nop
 800d73c:	20000060 	.word	0x20000060

0800d740 <free>:
 800d740:	4b02      	ldr	r3, [pc, #8]	@ (800d74c <free+0xc>)
 800d742:	4601      	mov	r1, r0
 800d744:	6818      	ldr	r0, [r3, #0]
 800d746:	f002 b837 	b.w	800f7b8 <_free_r>
 800d74a:	bf00      	nop
 800d74c:	20000060 	.word	0x20000060

0800d750 <sbrk_aligned>:
 800d750:	b570      	push	{r4, r5, r6, lr}
 800d752:	4e0f      	ldr	r6, [pc, #60]	@ (800d790 <sbrk_aligned+0x40>)
 800d754:	460c      	mov	r4, r1
 800d756:	6831      	ldr	r1, [r6, #0]
 800d758:	4605      	mov	r5, r0
 800d75a:	b911      	cbnz	r1, 800d762 <sbrk_aligned+0x12>
 800d75c:	f001 f970 	bl	800ea40 <_sbrk_r>
 800d760:	6030      	str	r0, [r6, #0]
 800d762:	4621      	mov	r1, r4
 800d764:	4628      	mov	r0, r5
 800d766:	f001 f96b 	bl	800ea40 <_sbrk_r>
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	d103      	bne.n	800d776 <sbrk_aligned+0x26>
 800d76e:	f04f 34ff 	mov.w	r4, #4294967295
 800d772:	4620      	mov	r0, r4
 800d774:	bd70      	pop	{r4, r5, r6, pc}
 800d776:	1cc4      	adds	r4, r0, #3
 800d778:	f024 0403 	bic.w	r4, r4, #3
 800d77c:	42a0      	cmp	r0, r4
 800d77e:	d0f8      	beq.n	800d772 <sbrk_aligned+0x22>
 800d780:	1a21      	subs	r1, r4, r0
 800d782:	4628      	mov	r0, r5
 800d784:	f001 f95c 	bl	800ea40 <_sbrk_r>
 800d788:	3001      	adds	r0, #1
 800d78a:	d1f2      	bne.n	800d772 <sbrk_aligned+0x22>
 800d78c:	e7ef      	b.n	800d76e <sbrk_aligned+0x1e>
 800d78e:	bf00      	nop
 800d790:	20001008 	.word	0x20001008

0800d794 <_malloc_r>:
 800d794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d798:	1ccd      	adds	r5, r1, #3
 800d79a:	f025 0503 	bic.w	r5, r5, #3
 800d79e:	3508      	adds	r5, #8
 800d7a0:	2d0c      	cmp	r5, #12
 800d7a2:	bf38      	it	cc
 800d7a4:	250c      	movcc	r5, #12
 800d7a6:	2d00      	cmp	r5, #0
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	db01      	blt.n	800d7b0 <_malloc_r+0x1c>
 800d7ac:	42a9      	cmp	r1, r5
 800d7ae:	d904      	bls.n	800d7ba <_malloc_r+0x26>
 800d7b0:	230c      	movs	r3, #12
 800d7b2:	6033      	str	r3, [r6, #0]
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d890 <_malloc_r+0xfc>
 800d7be:	f000 f869 	bl	800d894 <__malloc_lock>
 800d7c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d7c6:	461c      	mov	r4, r3
 800d7c8:	bb44      	cbnz	r4, 800d81c <_malloc_r+0x88>
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f7ff ffbf 	bl	800d750 <sbrk_aligned>
 800d7d2:	1c43      	adds	r3, r0, #1
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	d158      	bne.n	800d88a <_malloc_r+0xf6>
 800d7d8:	f8d8 4000 	ldr.w	r4, [r8]
 800d7dc:	4627      	mov	r7, r4
 800d7de:	2f00      	cmp	r7, #0
 800d7e0:	d143      	bne.n	800d86a <_malloc_r+0xd6>
 800d7e2:	2c00      	cmp	r4, #0
 800d7e4:	d04b      	beq.n	800d87e <_malloc_r+0xea>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	eb04 0903 	add.w	r9, r4, r3
 800d7f0:	f001 f926 	bl	800ea40 <_sbrk_r>
 800d7f4:	4581      	cmp	r9, r0
 800d7f6:	d142      	bne.n	800d87e <_malloc_r+0xea>
 800d7f8:	6821      	ldr	r1, [r4, #0]
 800d7fa:	1a6d      	subs	r5, r5, r1
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	4630      	mov	r0, r6
 800d800:	f7ff ffa6 	bl	800d750 <sbrk_aligned>
 800d804:	3001      	adds	r0, #1
 800d806:	d03a      	beq.n	800d87e <_malloc_r+0xea>
 800d808:	6823      	ldr	r3, [r4, #0]
 800d80a:	442b      	add	r3, r5
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	f8d8 3000 	ldr.w	r3, [r8]
 800d812:	685a      	ldr	r2, [r3, #4]
 800d814:	bb62      	cbnz	r2, 800d870 <_malloc_r+0xdc>
 800d816:	f8c8 7000 	str.w	r7, [r8]
 800d81a:	e00f      	b.n	800d83c <_malloc_r+0xa8>
 800d81c:	6822      	ldr	r2, [r4, #0]
 800d81e:	1b52      	subs	r2, r2, r5
 800d820:	d420      	bmi.n	800d864 <_malloc_r+0xd0>
 800d822:	2a0b      	cmp	r2, #11
 800d824:	d917      	bls.n	800d856 <_malloc_r+0xc2>
 800d826:	1961      	adds	r1, r4, r5
 800d828:	42a3      	cmp	r3, r4
 800d82a:	6025      	str	r5, [r4, #0]
 800d82c:	bf18      	it	ne
 800d82e:	6059      	strne	r1, [r3, #4]
 800d830:	6863      	ldr	r3, [r4, #4]
 800d832:	bf08      	it	eq
 800d834:	f8c8 1000 	streq.w	r1, [r8]
 800d838:	5162      	str	r2, [r4, r5]
 800d83a:	604b      	str	r3, [r1, #4]
 800d83c:	4630      	mov	r0, r6
 800d83e:	f000 f82f 	bl	800d8a0 <__malloc_unlock>
 800d842:	f104 000b 	add.w	r0, r4, #11
 800d846:	1d23      	adds	r3, r4, #4
 800d848:	f020 0007 	bic.w	r0, r0, #7
 800d84c:	1ac2      	subs	r2, r0, r3
 800d84e:	bf1c      	itt	ne
 800d850:	1a1b      	subne	r3, r3, r0
 800d852:	50a3      	strne	r3, [r4, r2]
 800d854:	e7af      	b.n	800d7b6 <_malloc_r+0x22>
 800d856:	6862      	ldr	r2, [r4, #4]
 800d858:	42a3      	cmp	r3, r4
 800d85a:	bf0c      	ite	eq
 800d85c:	f8c8 2000 	streq.w	r2, [r8]
 800d860:	605a      	strne	r2, [r3, #4]
 800d862:	e7eb      	b.n	800d83c <_malloc_r+0xa8>
 800d864:	4623      	mov	r3, r4
 800d866:	6864      	ldr	r4, [r4, #4]
 800d868:	e7ae      	b.n	800d7c8 <_malloc_r+0x34>
 800d86a:	463c      	mov	r4, r7
 800d86c:	687f      	ldr	r7, [r7, #4]
 800d86e:	e7b6      	b.n	800d7de <_malloc_r+0x4a>
 800d870:	461a      	mov	r2, r3
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	42a3      	cmp	r3, r4
 800d876:	d1fb      	bne.n	800d870 <_malloc_r+0xdc>
 800d878:	2300      	movs	r3, #0
 800d87a:	6053      	str	r3, [r2, #4]
 800d87c:	e7de      	b.n	800d83c <_malloc_r+0xa8>
 800d87e:	230c      	movs	r3, #12
 800d880:	6033      	str	r3, [r6, #0]
 800d882:	4630      	mov	r0, r6
 800d884:	f000 f80c 	bl	800d8a0 <__malloc_unlock>
 800d888:	e794      	b.n	800d7b4 <_malloc_r+0x20>
 800d88a:	6005      	str	r5, [r0, #0]
 800d88c:	e7d6      	b.n	800d83c <_malloc_r+0xa8>
 800d88e:	bf00      	nop
 800d890:	2000100c 	.word	0x2000100c

0800d894 <__malloc_lock>:
 800d894:	4801      	ldr	r0, [pc, #4]	@ (800d89c <__malloc_lock+0x8>)
 800d896:	f001 b920 	b.w	800eada <__retarget_lock_acquire_recursive>
 800d89a:	bf00      	nop
 800d89c:	20001150 	.word	0x20001150

0800d8a0 <__malloc_unlock>:
 800d8a0:	4801      	ldr	r0, [pc, #4]	@ (800d8a8 <__malloc_unlock+0x8>)
 800d8a2:	f001 b91b 	b.w	800eadc <__retarget_lock_release_recursive>
 800d8a6:	bf00      	nop
 800d8a8:	20001150 	.word	0x20001150

0800d8ac <_strtol_l.isra.0>:
 800d8ac:	2b24      	cmp	r3, #36	@ 0x24
 800d8ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b2:	4686      	mov	lr, r0
 800d8b4:	4690      	mov	r8, r2
 800d8b6:	d801      	bhi.n	800d8bc <_strtol_l.isra.0+0x10>
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d106      	bne.n	800d8ca <_strtol_l.isra.0+0x1e>
 800d8bc:	f001 f8e2 	bl	800ea84 <__errno>
 800d8c0:	2316      	movs	r3, #22
 800d8c2:	6003      	str	r3, [r0, #0]
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ca:	4834      	ldr	r0, [pc, #208]	@ (800d99c <_strtol_l.isra.0+0xf0>)
 800d8cc:	460d      	mov	r5, r1
 800d8ce:	462a      	mov	r2, r5
 800d8d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8d4:	5d06      	ldrb	r6, [r0, r4]
 800d8d6:	f016 0608 	ands.w	r6, r6, #8
 800d8da:	d1f8      	bne.n	800d8ce <_strtol_l.isra.0+0x22>
 800d8dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800d8de:	d110      	bne.n	800d902 <_strtol_l.isra.0+0x56>
 800d8e0:	782c      	ldrb	r4, [r5, #0]
 800d8e2:	2601      	movs	r6, #1
 800d8e4:	1c95      	adds	r5, r2, #2
 800d8e6:	f033 0210 	bics.w	r2, r3, #16
 800d8ea:	d115      	bne.n	800d918 <_strtol_l.isra.0+0x6c>
 800d8ec:	2c30      	cmp	r4, #48	@ 0x30
 800d8ee:	d10d      	bne.n	800d90c <_strtol_l.isra.0+0x60>
 800d8f0:	782a      	ldrb	r2, [r5, #0]
 800d8f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d8f6:	2a58      	cmp	r2, #88	@ 0x58
 800d8f8:	d108      	bne.n	800d90c <_strtol_l.isra.0+0x60>
 800d8fa:	786c      	ldrb	r4, [r5, #1]
 800d8fc:	3502      	adds	r5, #2
 800d8fe:	2310      	movs	r3, #16
 800d900:	e00a      	b.n	800d918 <_strtol_l.isra.0+0x6c>
 800d902:	2c2b      	cmp	r4, #43	@ 0x2b
 800d904:	bf04      	itt	eq
 800d906:	782c      	ldrbeq	r4, [r5, #0]
 800d908:	1c95      	addeq	r5, r2, #2
 800d90a:	e7ec      	b.n	800d8e6 <_strtol_l.isra.0+0x3a>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1f6      	bne.n	800d8fe <_strtol_l.isra.0+0x52>
 800d910:	2c30      	cmp	r4, #48	@ 0x30
 800d912:	bf14      	ite	ne
 800d914:	230a      	movne	r3, #10
 800d916:	2308      	moveq	r3, #8
 800d918:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d91c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d920:	2200      	movs	r2, #0
 800d922:	fbbc f9f3 	udiv	r9, ip, r3
 800d926:	4610      	mov	r0, r2
 800d928:	fb03 ca19 	mls	sl, r3, r9, ip
 800d92c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d930:	2f09      	cmp	r7, #9
 800d932:	d80f      	bhi.n	800d954 <_strtol_l.isra.0+0xa8>
 800d934:	463c      	mov	r4, r7
 800d936:	42a3      	cmp	r3, r4
 800d938:	dd1b      	ble.n	800d972 <_strtol_l.isra.0+0xc6>
 800d93a:	1c57      	adds	r7, r2, #1
 800d93c:	d007      	beq.n	800d94e <_strtol_l.isra.0+0xa2>
 800d93e:	4581      	cmp	r9, r0
 800d940:	d314      	bcc.n	800d96c <_strtol_l.isra.0+0xc0>
 800d942:	d101      	bne.n	800d948 <_strtol_l.isra.0+0x9c>
 800d944:	45a2      	cmp	sl, r4
 800d946:	db11      	blt.n	800d96c <_strtol_l.isra.0+0xc0>
 800d948:	fb00 4003 	mla	r0, r0, r3, r4
 800d94c:	2201      	movs	r2, #1
 800d94e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d952:	e7eb      	b.n	800d92c <_strtol_l.isra.0+0x80>
 800d954:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d958:	2f19      	cmp	r7, #25
 800d95a:	d801      	bhi.n	800d960 <_strtol_l.isra.0+0xb4>
 800d95c:	3c37      	subs	r4, #55	@ 0x37
 800d95e:	e7ea      	b.n	800d936 <_strtol_l.isra.0+0x8a>
 800d960:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d964:	2f19      	cmp	r7, #25
 800d966:	d804      	bhi.n	800d972 <_strtol_l.isra.0+0xc6>
 800d968:	3c57      	subs	r4, #87	@ 0x57
 800d96a:	e7e4      	b.n	800d936 <_strtol_l.isra.0+0x8a>
 800d96c:	f04f 32ff 	mov.w	r2, #4294967295
 800d970:	e7ed      	b.n	800d94e <_strtol_l.isra.0+0xa2>
 800d972:	1c53      	adds	r3, r2, #1
 800d974:	d108      	bne.n	800d988 <_strtol_l.isra.0+0xdc>
 800d976:	2322      	movs	r3, #34	@ 0x22
 800d978:	f8ce 3000 	str.w	r3, [lr]
 800d97c:	4660      	mov	r0, ip
 800d97e:	f1b8 0f00 	cmp.w	r8, #0
 800d982:	d0a0      	beq.n	800d8c6 <_strtol_l.isra.0+0x1a>
 800d984:	1e69      	subs	r1, r5, #1
 800d986:	e006      	b.n	800d996 <_strtol_l.isra.0+0xea>
 800d988:	b106      	cbz	r6, 800d98c <_strtol_l.isra.0+0xe0>
 800d98a:	4240      	negs	r0, r0
 800d98c:	f1b8 0f00 	cmp.w	r8, #0
 800d990:	d099      	beq.n	800d8c6 <_strtol_l.isra.0+0x1a>
 800d992:	2a00      	cmp	r2, #0
 800d994:	d1f6      	bne.n	800d984 <_strtol_l.isra.0+0xd8>
 800d996:	f8c8 1000 	str.w	r1, [r8]
 800d99a:	e794      	b.n	800d8c6 <_strtol_l.isra.0+0x1a>
 800d99c:	0803cc15 	.word	0x0803cc15

0800d9a0 <_strtol_r>:
 800d9a0:	f7ff bf84 	b.w	800d8ac <_strtol_l.isra.0>

0800d9a4 <strtol>:
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	460a      	mov	r2, r1
 800d9a8:	4601      	mov	r1, r0
 800d9aa:	4802      	ldr	r0, [pc, #8]	@ (800d9b4 <strtol+0x10>)
 800d9ac:	6800      	ldr	r0, [r0, #0]
 800d9ae:	f7ff bf7d 	b.w	800d8ac <_strtol_l.isra.0>
 800d9b2:	bf00      	nop
 800d9b4:	20000060 	.word	0x20000060

0800d9b8 <__cvt>:
 800d9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9bc:	ec57 6b10 	vmov	r6, r7, d0
 800d9c0:	2f00      	cmp	r7, #0
 800d9c2:	460c      	mov	r4, r1
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	463b      	mov	r3, r7
 800d9c8:	bfbb      	ittet	lt
 800d9ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d9ce:	461f      	movlt	r7, r3
 800d9d0:	2300      	movge	r3, #0
 800d9d2:	232d      	movlt	r3, #45	@ 0x2d
 800d9d4:	700b      	strb	r3, [r1, #0]
 800d9d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d9dc:	4691      	mov	r9, r2
 800d9de:	f023 0820 	bic.w	r8, r3, #32
 800d9e2:	bfbc      	itt	lt
 800d9e4:	4632      	movlt	r2, r6
 800d9e6:	4616      	movlt	r6, r2
 800d9e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d9ec:	d005      	beq.n	800d9fa <__cvt+0x42>
 800d9ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d9f2:	d100      	bne.n	800d9f6 <__cvt+0x3e>
 800d9f4:	3401      	adds	r4, #1
 800d9f6:	2102      	movs	r1, #2
 800d9f8:	e000      	b.n	800d9fc <__cvt+0x44>
 800d9fa:	2103      	movs	r1, #3
 800d9fc:	ab03      	add	r3, sp, #12
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	ab02      	add	r3, sp, #8
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	ec47 6b10 	vmov	d0, r6, r7
 800da08:	4653      	mov	r3, sl
 800da0a:	4622      	mov	r2, r4
 800da0c:	f001 f904 	bl	800ec18 <_dtoa_r>
 800da10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800da14:	4605      	mov	r5, r0
 800da16:	d119      	bne.n	800da4c <__cvt+0x94>
 800da18:	f019 0f01 	tst.w	r9, #1
 800da1c:	d00e      	beq.n	800da3c <__cvt+0x84>
 800da1e:	eb00 0904 	add.w	r9, r0, r4
 800da22:	2200      	movs	r2, #0
 800da24:	2300      	movs	r3, #0
 800da26:	4630      	mov	r0, r6
 800da28:	4639      	mov	r1, r7
 800da2a:	f7f3 f85d 	bl	8000ae8 <__aeabi_dcmpeq>
 800da2e:	b108      	cbz	r0, 800da34 <__cvt+0x7c>
 800da30:	f8cd 900c 	str.w	r9, [sp, #12]
 800da34:	2230      	movs	r2, #48	@ 0x30
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	454b      	cmp	r3, r9
 800da3a:	d31e      	bcc.n	800da7a <__cvt+0xc2>
 800da3c:	9b03      	ldr	r3, [sp, #12]
 800da3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da40:	1b5b      	subs	r3, r3, r5
 800da42:	4628      	mov	r0, r5
 800da44:	6013      	str	r3, [r2, #0]
 800da46:	b004      	add	sp, #16
 800da48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800da50:	eb00 0904 	add.w	r9, r0, r4
 800da54:	d1e5      	bne.n	800da22 <__cvt+0x6a>
 800da56:	7803      	ldrb	r3, [r0, #0]
 800da58:	2b30      	cmp	r3, #48	@ 0x30
 800da5a:	d10a      	bne.n	800da72 <__cvt+0xba>
 800da5c:	2200      	movs	r2, #0
 800da5e:	2300      	movs	r3, #0
 800da60:	4630      	mov	r0, r6
 800da62:	4639      	mov	r1, r7
 800da64:	f7f3 f840 	bl	8000ae8 <__aeabi_dcmpeq>
 800da68:	b918      	cbnz	r0, 800da72 <__cvt+0xba>
 800da6a:	f1c4 0401 	rsb	r4, r4, #1
 800da6e:	f8ca 4000 	str.w	r4, [sl]
 800da72:	f8da 3000 	ldr.w	r3, [sl]
 800da76:	4499      	add	r9, r3
 800da78:	e7d3      	b.n	800da22 <__cvt+0x6a>
 800da7a:	1c59      	adds	r1, r3, #1
 800da7c:	9103      	str	r1, [sp, #12]
 800da7e:	701a      	strb	r2, [r3, #0]
 800da80:	e7d9      	b.n	800da36 <__cvt+0x7e>

0800da82 <__exponent>:
 800da82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da84:	2900      	cmp	r1, #0
 800da86:	bfba      	itte	lt
 800da88:	4249      	neglt	r1, r1
 800da8a:	232d      	movlt	r3, #45	@ 0x2d
 800da8c:	232b      	movge	r3, #43	@ 0x2b
 800da8e:	2909      	cmp	r1, #9
 800da90:	7002      	strb	r2, [r0, #0]
 800da92:	7043      	strb	r3, [r0, #1]
 800da94:	dd29      	ble.n	800daea <__exponent+0x68>
 800da96:	f10d 0307 	add.w	r3, sp, #7
 800da9a:	461d      	mov	r5, r3
 800da9c:	270a      	movs	r7, #10
 800da9e:	461a      	mov	r2, r3
 800daa0:	fbb1 f6f7 	udiv	r6, r1, r7
 800daa4:	fb07 1416 	mls	r4, r7, r6, r1
 800daa8:	3430      	adds	r4, #48	@ 0x30
 800daaa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800daae:	460c      	mov	r4, r1
 800dab0:	2c63      	cmp	r4, #99	@ 0x63
 800dab2:	f103 33ff 	add.w	r3, r3, #4294967295
 800dab6:	4631      	mov	r1, r6
 800dab8:	dcf1      	bgt.n	800da9e <__exponent+0x1c>
 800daba:	3130      	adds	r1, #48	@ 0x30
 800dabc:	1e94      	subs	r4, r2, #2
 800dabe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dac2:	1c41      	adds	r1, r0, #1
 800dac4:	4623      	mov	r3, r4
 800dac6:	42ab      	cmp	r3, r5
 800dac8:	d30a      	bcc.n	800dae0 <__exponent+0x5e>
 800daca:	f10d 0309 	add.w	r3, sp, #9
 800dace:	1a9b      	subs	r3, r3, r2
 800dad0:	42ac      	cmp	r4, r5
 800dad2:	bf88      	it	hi
 800dad4:	2300      	movhi	r3, #0
 800dad6:	3302      	adds	r3, #2
 800dad8:	4403      	add	r3, r0
 800dada:	1a18      	subs	r0, r3, r0
 800dadc:	b003      	add	sp, #12
 800dade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dae0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dae4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dae8:	e7ed      	b.n	800dac6 <__exponent+0x44>
 800daea:	2330      	movs	r3, #48	@ 0x30
 800daec:	3130      	adds	r1, #48	@ 0x30
 800daee:	7083      	strb	r3, [r0, #2]
 800daf0:	70c1      	strb	r1, [r0, #3]
 800daf2:	1d03      	adds	r3, r0, #4
 800daf4:	e7f1      	b.n	800dada <__exponent+0x58>
	...

0800daf8 <_printf_float>:
 800daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafc:	b08d      	sub	sp, #52	@ 0x34
 800dafe:	460c      	mov	r4, r1
 800db00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800db04:	4616      	mov	r6, r2
 800db06:	461f      	mov	r7, r3
 800db08:	4605      	mov	r5, r0
 800db0a:	f000 ff61 	bl	800e9d0 <_localeconv_r>
 800db0e:	6803      	ldr	r3, [r0, #0]
 800db10:	9304      	str	r3, [sp, #16]
 800db12:	4618      	mov	r0, r3
 800db14:	f7f2 fbbc 	bl	8000290 <strlen>
 800db18:	2300      	movs	r3, #0
 800db1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800db1c:	f8d8 3000 	ldr.w	r3, [r8]
 800db20:	9005      	str	r0, [sp, #20]
 800db22:	3307      	adds	r3, #7
 800db24:	f023 0307 	bic.w	r3, r3, #7
 800db28:	f103 0208 	add.w	r2, r3, #8
 800db2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800db30:	f8d4 b000 	ldr.w	fp, [r4]
 800db34:	f8c8 2000 	str.w	r2, [r8]
 800db38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800db40:	9307      	str	r3, [sp, #28]
 800db42:	f8cd 8018 	str.w	r8, [sp, #24]
 800db46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800db4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db4e:	4b9c      	ldr	r3, [pc, #624]	@ (800ddc0 <_printf_float+0x2c8>)
 800db50:	f04f 32ff 	mov.w	r2, #4294967295
 800db54:	f7f2 fffa 	bl	8000b4c <__aeabi_dcmpun>
 800db58:	bb70      	cbnz	r0, 800dbb8 <_printf_float+0xc0>
 800db5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db5e:	4b98      	ldr	r3, [pc, #608]	@ (800ddc0 <_printf_float+0x2c8>)
 800db60:	f04f 32ff 	mov.w	r2, #4294967295
 800db64:	f7f2 ffd4 	bl	8000b10 <__aeabi_dcmple>
 800db68:	bb30      	cbnz	r0, 800dbb8 <_printf_float+0xc0>
 800db6a:	2200      	movs	r2, #0
 800db6c:	2300      	movs	r3, #0
 800db6e:	4640      	mov	r0, r8
 800db70:	4649      	mov	r1, r9
 800db72:	f7f2 ffc3 	bl	8000afc <__aeabi_dcmplt>
 800db76:	b110      	cbz	r0, 800db7e <_printf_float+0x86>
 800db78:	232d      	movs	r3, #45	@ 0x2d
 800db7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db7e:	4a91      	ldr	r2, [pc, #580]	@ (800ddc4 <_printf_float+0x2cc>)
 800db80:	4b91      	ldr	r3, [pc, #580]	@ (800ddc8 <_printf_float+0x2d0>)
 800db82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800db86:	bf8c      	ite	hi
 800db88:	4690      	movhi	r8, r2
 800db8a:	4698      	movls	r8, r3
 800db8c:	2303      	movs	r3, #3
 800db8e:	6123      	str	r3, [r4, #16]
 800db90:	f02b 0304 	bic.w	r3, fp, #4
 800db94:	6023      	str	r3, [r4, #0]
 800db96:	f04f 0900 	mov.w	r9, #0
 800db9a:	9700      	str	r7, [sp, #0]
 800db9c:	4633      	mov	r3, r6
 800db9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dba0:	4621      	mov	r1, r4
 800dba2:	4628      	mov	r0, r5
 800dba4:	f000 f9d2 	bl	800df4c <_printf_common>
 800dba8:	3001      	adds	r0, #1
 800dbaa:	f040 808d 	bne.w	800dcc8 <_printf_float+0x1d0>
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb2:	b00d      	add	sp, #52	@ 0x34
 800dbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb8:	4642      	mov	r2, r8
 800dbba:	464b      	mov	r3, r9
 800dbbc:	4640      	mov	r0, r8
 800dbbe:	4649      	mov	r1, r9
 800dbc0:	f7f2 ffc4 	bl	8000b4c <__aeabi_dcmpun>
 800dbc4:	b140      	cbz	r0, 800dbd8 <_printf_float+0xe0>
 800dbc6:	464b      	mov	r3, r9
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	bfbc      	itt	lt
 800dbcc:	232d      	movlt	r3, #45	@ 0x2d
 800dbce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dbd2:	4a7e      	ldr	r2, [pc, #504]	@ (800ddcc <_printf_float+0x2d4>)
 800dbd4:	4b7e      	ldr	r3, [pc, #504]	@ (800ddd0 <_printf_float+0x2d8>)
 800dbd6:	e7d4      	b.n	800db82 <_printf_float+0x8a>
 800dbd8:	6863      	ldr	r3, [r4, #4]
 800dbda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dbde:	9206      	str	r2, [sp, #24]
 800dbe0:	1c5a      	adds	r2, r3, #1
 800dbe2:	d13b      	bne.n	800dc5c <_printf_float+0x164>
 800dbe4:	2306      	movs	r3, #6
 800dbe6:	6063      	str	r3, [r4, #4]
 800dbe8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dbec:	2300      	movs	r3, #0
 800dbee:	6022      	str	r2, [r4, #0]
 800dbf0:	9303      	str	r3, [sp, #12]
 800dbf2:	ab0a      	add	r3, sp, #40	@ 0x28
 800dbf4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dbf8:	ab09      	add	r3, sp, #36	@ 0x24
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	6861      	ldr	r1, [r4, #4]
 800dbfe:	ec49 8b10 	vmov	d0, r8, r9
 800dc02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dc06:	4628      	mov	r0, r5
 800dc08:	f7ff fed6 	bl	800d9b8 <__cvt>
 800dc0c:	9b06      	ldr	r3, [sp, #24]
 800dc0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc10:	2b47      	cmp	r3, #71	@ 0x47
 800dc12:	4680      	mov	r8, r0
 800dc14:	d129      	bne.n	800dc6a <_printf_float+0x172>
 800dc16:	1cc8      	adds	r0, r1, #3
 800dc18:	db02      	blt.n	800dc20 <_printf_float+0x128>
 800dc1a:	6863      	ldr	r3, [r4, #4]
 800dc1c:	4299      	cmp	r1, r3
 800dc1e:	dd41      	ble.n	800dca4 <_printf_float+0x1ac>
 800dc20:	f1aa 0a02 	sub.w	sl, sl, #2
 800dc24:	fa5f fa8a 	uxtb.w	sl, sl
 800dc28:	3901      	subs	r1, #1
 800dc2a:	4652      	mov	r2, sl
 800dc2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dc30:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc32:	f7ff ff26 	bl	800da82 <__exponent>
 800dc36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc38:	1813      	adds	r3, r2, r0
 800dc3a:	2a01      	cmp	r2, #1
 800dc3c:	4681      	mov	r9, r0
 800dc3e:	6123      	str	r3, [r4, #16]
 800dc40:	dc02      	bgt.n	800dc48 <_printf_float+0x150>
 800dc42:	6822      	ldr	r2, [r4, #0]
 800dc44:	07d2      	lsls	r2, r2, #31
 800dc46:	d501      	bpl.n	800dc4c <_printf_float+0x154>
 800dc48:	3301      	adds	r3, #1
 800dc4a:	6123      	str	r3, [r4, #16]
 800dc4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d0a2      	beq.n	800db9a <_printf_float+0xa2>
 800dc54:	232d      	movs	r3, #45	@ 0x2d
 800dc56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc5a:	e79e      	b.n	800db9a <_printf_float+0xa2>
 800dc5c:	9a06      	ldr	r2, [sp, #24]
 800dc5e:	2a47      	cmp	r2, #71	@ 0x47
 800dc60:	d1c2      	bne.n	800dbe8 <_printf_float+0xf0>
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1c0      	bne.n	800dbe8 <_printf_float+0xf0>
 800dc66:	2301      	movs	r3, #1
 800dc68:	e7bd      	b.n	800dbe6 <_printf_float+0xee>
 800dc6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc6e:	d9db      	bls.n	800dc28 <_printf_float+0x130>
 800dc70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dc74:	d118      	bne.n	800dca8 <_printf_float+0x1b0>
 800dc76:	2900      	cmp	r1, #0
 800dc78:	6863      	ldr	r3, [r4, #4]
 800dc7a:	dd0b      	ble.n	800dc94 <_printf_float+0x19c>
 800dc7c:	6121      	str	r1, [r4, #16]
 800dc7e:	b913      	cbnz	r3, 800dc86 <_printf_float+0x18e>
 800dc80:	6822      	ldr	r2, [r4, #0]
 800dc82:	07d0      	lsls	r0, r2, #31
 800dc84:	d502      	bpl.n	800dc8c <_printf_float+0x194>
 800dc86:	3301      	adds	r3, #1
 800dc88:	440b      	add	r3, r1
 800dc8a:	6123      	str	r3, [r4, #16]
 800dc8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dc8e:	f04f 0900 	mov.w	r9, #0
 800dc92:	e7db      	b.n	800dc4c <_printf_float+0x154>
 800dc94:	b913      	cbnz	r3, 800dc9c <_printf_float+0x1a4>
 800dc96:	6822      	ldr	r2, [r4, #0]
 800dc98:	07d2      	lsls	r2, r2, #31
 800dc9a:	d501      	bpl.n	800dca0 <_printf_float+0x1a8>
 800dc9c:	3302      	adds	r3, #2
 800dc9e:	e7f4      	b.n	800dc8a <_printf_float+0x192>
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7f2      	b.n	800dc8a <_printf_float+0x192>
 800dca4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcaa:	4299      	cmp	r1, r3
 800dcac:	db05      	blt.n	800dcba <_printf_float+0x1c2>
 800dcae:	6823      	ldr	r3, [r4, #0]
 800dcb0:	6121      	str	r1, [r4, #16]
 800dcb2:	07d8      	lsls	r0, r3, #31
 800dcb4:	d5ea      	bpl.n	800dc8c <_printf_float+0x194>
 800dcb6:	1c4b      	adds	r3, r1, #1
 800dcb8:	e7e7      	b.n	800dc8a <_printf_float+0x192>
 800dcba:	2900      	cmp	r1, #0
 800dcbc:	bfd4      	ite	le
 800dcbe:	f1c1 0202 	rsble	r2, r1, #2
 800dcc2:	2201      	movgt	r2, #1
 800dcc4:	4413      	add	r3, r2
 800dcc6:	e7e0      	b.n	800dc8a <_printf_float+0x192>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	055a      	lsls	r2, r3, #21
 800dccc:	d407      	bmi.n	800dcde <_printf_float+0x1e6>
 800dcce:	6923      	ldr	r3, [r4, #16]
 800dcd0:	4642      	mov	r2, r8
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	47b8      	blx	r7
 800dcd8:	3001      	adds	r0, #1
 800dcda:	d12b      	bne.n	800dd34 <_printf_float+0x23c>
 800dcdc:	e767      	b.n	800dbae <_printf_float+0xb6>
 800dcde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dce2:	f240 80dd 	bls.w	800dea0 <_printf_float+0x3a8>
 800dce6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dcea:	2200      	movs	r2, #0
 800dcec:	2300      	movs	r3, #0
 800dcee:	f7f2 fefb 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d033      	beq.n	800dd5e <_printf_float+0x266>
 800dcf6:	4a37      	ldr	r2, [pc, #220]	@ (800ddd4 <_printf_float+0x2dc>)
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	47b8      	blx	r7
 800dd00:	3001      	adds	r0, #1
 800dd02:	f43f af54 	beq.w	800dbae <_printf_float+0xb6>
 800dd06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dd0a:	4543      	cmp	r3, r8
 800dd0c:	db02      	blt.n	800dd14 <_printf_float+0x21c>
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	07d8      	lsls	r0, r3, #31
 800dd12:	d50f      	bpl.n	800dd34 <_printf_float+0x23c>
 800dd14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd18:	4631      	mov	r1, r6
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	47b8      	blx	r7
 800dd1e:	3001      	adds	r0, #1
 800dd20:	f43f af45 	beq.w	800dbae <_printf_float+0xb6>
 800dd24:	f04f 0900 	mov.w	r9, #0
 800dd28:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd2c:	f104 0a1a 	add.w	sl, r4, #26
 800dd30:	45c8      	cmp	r8, r9
 800dd32:	dc09      	bgt.n	800dd48 <_printf_float+0x250>
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	079b      	lsls	r3, r3, #30
 800dd38:	f100 8103 	bmi.w	800df42 <_printf_float+0x44a>
 800dd3c:	68e0      	ldr	r0, [r4, #12]
 800dd3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd40:	4298      	cmp	r0, r3
 800dd42:	bfb8      	it	lt
 800dd44:	4618      	movlt	r0, r3
 800dd46:	e734      	b.n	800dbb2 <_printf_float+0xba>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	4652      	mov	r2, sl
 800dd4c:	4631      	mov	r1, r6
 800dd4e:	4628      	mov	r0, r5
 800dd50:	47b8      	blx	r7
 800dd52:	3001      	adds	r0, #1
 800dd54:	f43f af2b 	beq.w	800dbae <_printf_float+0xb6>
 800dd58:	f109 0901 	add.w	r9, r9, #1
 800dd5c:	e7e8      	b.n	800dd30 <_printf_float+0x238>
 800dd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	dc39      	bgt.n	800ddd8 <_printf_float+0x2e0>
 800dd64:	4a1b      	ldr	r2, [pc, #108]	@ (800ddd4 <_printf_float+0x2dc>)
 800dd66:	2301      	movs	r3, #1
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	47b8      	blx	r7
 800dd6e:	3001      	adds	r0, #1
 800dd70:	f43f af1d 	beq.w	800dbae <_printf_float+0xb6>
 800dd74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dd78:	ea59 0303 	orrs.w	r3, r9, r3
 800dd7c:	d102      	bne.n	800dd84 <_printf_float+0x28c>
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	07d9      	lsls	r1, r3, #31
 800dd82:	d5d7      	bpl.n	800dd34 <_printf_float+0x23c>
 800dd84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd88:	4631      	mov	r1, r6
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	47b8      	blx	r7
 800dd8e:	3001      	adds	r0, #1
 800dd90:	f43f af0d 	beq.w	800dbae <_printf_float+0xb6>
 800dd94:	f04f 0a00 	mov.w	sl, #0
 800dd98:	f104 0b1a 	add.w	fp, r4, #26
 800dd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd9e:	425b      	negs	r3, r3
 800dda0:	4553      	cmp	r3, sl
 800dda2:	dc01      	bgt.n	800dda8 <_printf_float+0x2b0>
 800dda4:	464b      	mov	r3, r9
 800dda6:	e793      	b.n	800dcd0 <_printf_float+0x1d8>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	465a      	mov	r2, fp
 800ddac:	4631      	mov	r1, r6
 800ddae:	4628      	mov	r0, r5
 800ddb0:	47b8      	blx	r7
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	f43f aefb 	beq.w	800dbae <_printf_float+0xb6>
 800ddb8:	f10a 0a01 	add.w	sl, sl, #1
 800ddbc:	e7ee      	b.n	800dd9c <_printf_float+0x2a4>
 800ddbe:	bf00      	nop
 800ddc0:	7fefffff 	.word	0x7fefffff
 800ddc4:	0803cd19 	.word	0x0803cd19
 800ddc8:	0803cd15 	.word	0x0803cd15
 800ddcc:	0803cd21 	.word	0x0803cd21
 800ddd0:	0803cd1d 	.word	0x0803cd1d
 800ddd4:	0803cd25 	.word	0x0803cd25
 800ddd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ddda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ddde:	4553      	cmp	r3, sl
 800dde0:	bfa8      	it	ge
 800dde2:	4653      	movge	r3, sl
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	4699      	mov	r9, r3
 800dde8:	dc36      	bgt.n	800de58 <_printf_float+0x360>
 800ddea:	f04f 0b00 	mov.w	fp, #0
 800ddee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddf2:	f104 021a 	add.w	r2, r4, #26
 800ddf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ddf8:	9306      	str	r3, [sp, #24]
 800ddfa:	eba3 0309 	sub.w	r3, r3, r9
 800ddfe:	455b      	cmp	r3, fp
 800de00:	dc31      	bgt.n	800de66 <_printf_float+0x36e>
 800de02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de04:	459a      	cmp	sl, r3
 800de06:	dc3a      	bgt.n	800de7e <_printf_float+0x386>
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	07da      	lsls	r2, r3, #31
 800de0c:	d437      	bmi.n	800de7e <_printf_float+0x386>
 800de0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de10:	ebaa 0903 	sub.w	r9, sl, r3
 800de14:	9b06      	ldr	r3, [sp, #24]
 800de16:	ebaa 0303 	sub.w	r3, sl, r3
 800de1a:	4599      	cmp	r9, r3
 800de1c:	bfa8      	it	ge
 800de1e:	4699      	movge	r9, r3
 800de20:	f1b9 0f00 	cmp.w	r9, #0
 800de24:	dc33      	bgt.n	800de8e <_printf_float+0x396>
 800de26:	f04f 0800 	mov.w	r8, #0
 800de2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de2e:	f104 0b1a 	add.w	fp, r4, #26
 800de32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de34:	ebaa 0303 	sub.w	r3, sl, r3
 800de38:	eba3 0309 	sub.w	r3, r3, r9
 800de3c:	4543      	cmp	r3, r8
 800de3e:	f77f af79 	ble.w	800dd34 <_printf_float+0x23c>
 800de42:	2301      	movs	r3, #1
 800de44:	465a      	mov	r2, fp
 800de46:	4631      	mov	r1, r6
 800de48:	4628      	mov	r0, r5
 800de4a:	47b8      	blx	r7
 800de4c:	3001      	adds	r0, #1
 800de4e:	f43f aeae 	beq.w	800dbae <_printf_float+0xb6>
 800de52:	f108 0801 	add.w	r8, r8, #1
 800de56:	e7ec      	b.n	800de32 <_printf_float+0x33a>
 800de58:	4642      	mov	r2, r8
 800de5a:	4631      	mov	r1, r6
 800de5c:	4628      	mov	r0, r5
 800de5e:	47b8      	blx	r7
 800de60:	3001      	adds	r0, #1
 800de62:	d1c2      	bne.n	800ddea <_printf_float+0x2f2>
 800de64:	e6a3      	b.n	800dbae <_printf_float+0xb6>
 800de66:	2301      	movs	r3, #1
 800de68:	4631      	mov	r1, r6
 800de6a:	4628      	mov	r0, r5
 800de6c:	9206      	str	r2, [sp, #24]
 800de6e:	47b8      	blx	r7
 800de70:	3001      	adds	r0, #1
 800de72:	f43f ae9c 	beq.w	800dbae <_printf_float+0xb6>
 800de76:	9a06      	ldr	r2, [sp, #24]
 800de78:	f10b 0b01 	add.w	fp, fp, #1
 800de7c:	e7bb      	b.n	800ddf6 <_printf_float+0x2fe>
 800de7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de82:	4631      	mov	r1, r6
 800de84:	4628      	mov	r0, r5
 800de86:	47b8      	blx	r7
 800de88:	3001      	adds	r0, #1
 800de8a:	d1c0      	bne.n	800de0e <_printf_float+0x316>
 800de8c:	e68f      	b.n	800dbae <_printf_float+0xb6>
 800de8e:	9a06      	ldr	r2, [sp, #24]
 800de90:	464b      	mov	r3, r9
 800de92:	4442      	add	r2, r8
 800de94:	4631      	mov	r1, r6
 800de96:	4628      	mov	r0, r5
 800de98:	47b8      	blx	r7
 800de9a:	3001      	adds	r0, #1
 800de9c:	d1c3      	bne.n	800de26 <_printf_float+0x32e>
 800de9e:	e686      	b.n	800dbae <_printf_float+0xb6>
 800dea0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dea4:	f1ba 0f01 	cmp.w	sl, #1
 800dea8:	dc01      	bgt.n	800deae <_printf_float+0x3b6>
 800deaa:	07db      	lsls	r3, r3, #31
 800deac:	d536      	bpl.n	800df1c <_printf_float+0x424>
 800deae:	2301      	movs	r3, #1
 800deb0:	4642      	mov	r2, r8
 800deb2:	4631      	mov	r1, r6
 800deb4:	4628      	mov	r0, r5
 800deb6:	47b8      	blx	r7
 800deb8:	3001      	adds	r0, #1
 800deba:	f43f ae78 	beq.w	800dbae <_printf_float+0xb6>
 800debe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dec2:	4631      	mov	r1, r6
 800dec4:	4628      	mov	r0, r5
 800dec6:	47b8      	blx	r7
 800dec8:	3001      	adds	r0, #1
 800deca:	f43f ae70 	beq.w	800dbae <_printf_float+0xb6>
 800dece:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ded2:	2200      	movs	r2, #0
 800ded4:	2300      	movs	r3, #0
 800ded6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800deda:	f7f2 fe05 	bl	8000ae8 <__aeabi_dcmpeq>
 800dede:	b9c0      	cbnz	r0, 800df12 <_printf_float+0x41a>
 800dee0:	4653      	mov	r3, sl
 800dee2:	f108 0201 	add.w	r2, r8, #1
 800dee6:	4631      	mov	r1, r6
 800dee8:	4628      	mov	r0, r5
 800deea:	47b8      	blx	r7
 800deec:	3001      	adds	r0, #1
 800deee:	d10c      	bne.n	800df0a <_printf_float+0x412>
 800def0:	e65d      	b.n	800dbae <_printf_float+0xb6>
 800def2:	2301      	movs	r3, #1
 800def4:	465a      	mov	r2, fp
 800def6:	4631      	mov	r1, r6
 800def8:	4628      	mov	r0, r5
 800defa:	47b8      	blx	r7
 800defc:	3001      	adds	r0, #1
 800defe:	f43f ae56 	beq.w	800dbae <_printf_float+0xb6>
 800df02:	f108 0801 	add.w	r8, r8, #1
 800df06:	45d0      	cmp	r8, sl
 800df08:	dbf3      	blt.n	800def2 <_printf_float+0x3fa>
 800df0a:	464b      	mov	r3, r9
 800df0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800df10:	e6df      	b.n	800dcd2 <_printf_float+0x1da>
 800df12:	f04f 0800 	mov.w	r8, #0
 800df16:	f104 0b1a 	add.w	fp, r4, #26
 800df1a:	e7f4      	b.n	800df06 <_printf_float+0x40e>
 800df1c:	2301      	movs	r3, #1
 800df1e:	4642      	mov	r2, r8
 800df20:	e7e1      	b.n	800dee6 <_printf_float+0x3ee>
 800df22:	2301      	movs	r3, #1
 800df24:	464a      	mov	r2, r9
 800df26:	4631      	mov	r1, r6
 800df28:	4628      	mov	r0, r5
 800df2a:	47b8      	blx	r7
 800df2c:	3001      	adds	r0, #1
 800df2e:	f43f ae3e 	beq.w	800dbae <_printf_float+0xb6>
 800df32:	f108 0801 	add.w	r8, r8, #1
 800df36:	68e3      	ldr	r3, [r4, #12]
 800df38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df3a:	1a5b      	subs	r3, r3, r1
 800df3c:	4543      	cmp	r3, r8
 800df3e:	dcf0      	bgt.n	800df22 <_printf_float+0x42a>
 800df40:	e6fc      	b.n	800dd3c <_printf_float+0x244>
 800df42:	f04f 0800 	mov.w	r8, #0
 800df46:	f104 0919 	add.w	r9, r4, #25
 800df4a:	e7f4      	b.n	800df36 <_printf_float+0x43e>

0800df4c <_printf_common>:
 800df4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df50:	4616      	mov	r6, r2
 800df52:	4698      	mov	r8, r3
 800df54:	688a      	ldr	r2, [r1, #8]
 800df56:	690b      	ldr	r3, [r1, #16]
 800df58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df5c:	4293      	cmp	r3, r2
 800df5e:	bfb8      	it	lt
 800df60:	4613      	movlt	r3, r2
 800df62:	6033      	str	r3, [r6, #0]
 800df64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df68:	4607      	mov	r7, r0
 800df6a:	460c      	mov	r4, r1
 800df6c:	b10a      	cbz	r2, 800df72 <_printf_common+0x26>
 800df6e:	3301      	adds	r3, #1
 800df70:	6033      	str	r3, [r6, #0]
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	0699      	lsls	r1, r3, #26
 800df76:	bf42      	ittt	mi
 800df78:	6833      	ldrmi	r3, [r6, #0]
 800df7a:	3302      	addmi	r3, #2
 800df7c:	6033      	strmi	r3, [r6, #0]
 800df7e:	6825      	ldr	r5, [r4, #0]
 800df80:	f015 0506 	ands.w	r5, r5, #6
 800df84:	d106      	bne.n	800df94 <_printf_common+0x48>
 800df86:	f104 0a19 	add.w	sl, r4, #25
 800df8a:	68e3      	ldr	r3, [r4, #12]
 800df8c:	6832      	ldr	r2, [r6, #0]
 800df8e:	1a9b      	subs	r3, r3, r2
 800df90:	42ab      	cmp	r3, r5
 800df92:	dc26      	bgt.n	800dfe2 <_printf_common+0x96>
 800df94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df98:	6822      	ldr	r2, [r4, #0]
 800df9a:	3b00      	subs	r3, #0
 800df9c:	bf18      	it	ne
 800df9e:	2301      	movne	r3, #1
 800dfa0:	0692      	lsls	r2, r2, #26
 800dfa2:	d42b      	bmi.n	800dffc <_printf_common+0xb0>
 800dfa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dfa8:	4641      	mov	r1, r8
 800dfaa:	4638      	mov	r0, r7
 800dfac:	47c8      	blx	r9
 800dfae:	3001      	adds	r0, #1
 800dfb0:	d01e      	beq.n	800dff0 <_printf_common+0xa4>
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	6922      	ldr	r2, [r4, #16]
 800dfb6:	f003 0306 	and.w	r3, r3, #6
 800dfba:	2b04      	cmp	r3, #4
 800dfbc:	bf02      	ittt	eq
 800dfbe:	68e5      	ldreq	r5, [r4, #12]
 800dfc0:	6833      	ldreq	r3, [r6, #0]
 800dfc2:	1aed      	subeq	r5, r5, r3
 800dfc4:	68a3      	ldr	r3, [r4, #8]
 800dfc6:	bf0c      	ite	eq
 800dfc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfcc:	2500      	movne	r5, #0
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	bfc4      	itt	gt
 800dfd2:	1a9b      	subgt	r3, r3, r2
 800dfd4:	18ed      	addgt	r5, r5, r3
 800dfd6:	2600      	movs	r6, #0
 800dfd8:	341a      	adds	r4, #26
 800dfda:	42b5      	cmp	r5, r6
 800dfdc:	d11a      	bne.n	800e014 <_printf_common+0xc8>
 800dfde:	2000      	movs	r0, #0
 800dfe0:	e008      	b.n	800dff4 <_printf_common+0xa8>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	4652      	mov	r2, sl
 800dfe6:	4641      	mov	r1, r8
 800dfe8:	4638      	mov	r0, r7
 800dfea:	47c8      	blx	r9
 800dfec:	3001      	adds	r0, #1
 800dfee:	d103      	bne.n	800dff8 <_printf_common+0xac>
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295
 800dff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff8:	3501      	adds	r5, #1
 800dffa:	e7c6      	b.n	800df8a <_printf_common+0x3e>
 800dffc:	18e1      	adds	r1, r4, r3
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	2030      	movs	r0, #48	@ 0x30
 800e002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e006:	4422      	add	r2, r4
 800e008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e00c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e010:	3302      	adds	r3, #2
 800e012:	e7c7      	b.n	800dfa4 <_printf_common+0x58>
 800e014:	2301      	movs	r3, #1
 800e016:	4622      	mov	r2, r4
 800e018:	4641      	mov	r1, r8
 800e01a:	4638      	mov	r0, r7
 800e01c:	47c8      	blx	r9
 800e01e:	3001      	adds	r0, #1
 800e020:	d0e6      	beq.n	800dff0 <_printf_common+0xa4>
 800e022:	3601      	adds	r6, #1
 800e024:	e7d9      	b.n	800dfda <_printf_common+0x8e>
	...

0800e028 <_printf_i>:
 800e028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e02c:	7e0f      	ldrb	r7, [r1, #24]
 800e02e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e030:	2f78      	cmp	r7, #120	@ 0x78
 800e032:	4691      	mov	r9, r2
 800e034:	4680      	mov	r8, r0
 800e036:	460c      	mov	r4, r1
 800e038:	469a      	mov	sl, r3
 800e03a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e03e:	d807      	bhi.n	800e050 <_printf_i+0x28>
 800e040:	2f62      	cmp	r7, #98	@ 0x62
 800e042:	d80a      	bhi.n	800e05a <_printf_i+0x32>
 800e044:	2f00      	cmp	r7, #0
 800e046:	f000 80d1 	beq.w	800e1ec <_printf_i+0x1c4>
 800e04a:	2f58      	cmp	r7, #88	@ 0x58
 800e04c:	f000 80b8 	beq.w	800e1c0 <_printf_i+0x198>
 800e050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e058:	e03a      	b.n	800e0d0 <_printf_i+0xa8>
 800e05a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e05e:	2b15      	cmp	r3, #21
 800e060:	d8f6      	bhi.n	800e050 <_printf_i+0x28>
 800e062:	a101      	add	r1, pc, #4	@ (adr r1, 800e068 <_printf_i+0x40>)
 800e064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e068:	0800e0c1 	.word	0x0800e0c1
 800e06c:	0800e0d5 	.word	0x0800e0d5
 800e070:	0800e051 	.word	0x0800e051
 800e074:	0800e051 	.word	0x0800e051
 800e078:	0800e051 	.word	0x0800e051
 800e07c:	0800e051 	.word	0x0800e051
 800e080:	0800e0d5 	.word	0x0800e0d5
 800e084:	0800e051 	.word	0x0800e051
 800e088:	0800e051 	.word	0x0800e051
 800e08c:	0800e051 	.word	0x0800e051
 800e090:	0800e051 	.word	0x0800e051
 800e094:	0800e1d3 	.word	0x0800e1d3
 800e098:	0800e0ff 	.word	0x0800e0ff
 800e09c:	0800e18d 	.word	0x0800e18d
 800e0a0:	0800e051 	.word	0x0800e051
 800e0a4:	0800e051 	.word	0x0800e051
 800e0a8:	0800e1f5 	.word	0x0800e1f5
 800e0ac:	0800e051 	.word	0x0800e051
 800e0b0:	0800e0ff 	.word	0x0800e0ff
 800e0b4:	0800e051 	.word	0x0800e051
 800e0b8:	0800e051 	.word	0x0800e051
 800e0bc:	0800e195 	.word	0x0800e195
 800e0c0:	6833      	ldr	r3, [r6, #0]
 800e0c2:	1d1a      	adds	r2, r3, #4
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6032      	str	r2, [r6, #0]
 800e0c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e09c      	b.n	800e20e <_printf_i+0x1e6>
 800e0d4:	6833      	ldr	r3, [r6, #0]
 800e0d6:	6820      	ldr	r0, [r4, #0]
 800e0d8:	1d19      	adds	r1, r3, #4
 800e0da:	6031      	str	r1, [r6, #0]
 800e0dc:	0606      	lsls	r6, r0, #24
 800e0de:	d501      	bpl.n	800e0e4 <_printf_i+0xbc>
 800e0e0:	681d      	ldr	r5, [r3, #0]
 800e0e2:	e003      	b.n	800e0ec <_printf_i+0xc4>
 800e0e4:	0645      	lsls	r5, r0, #25
 800e0e6:	d5fb      	bpl.n	800e0e0 <_printf_i+0xb8>
 800e0e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e0ec:	2d00      	cmp	r5, #0
 800e0ee:	da03      	bge.n	800e0f8 <_printf_i+0xd0>
 800e0f0:	232d      	movs	r3, #45	@ 0x2d
 800e0f2:	426d      	negs	r5, r5
 800e0f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0f8:	4858      	ldr	r0, [pc, #352]	@ (800e25c <_printf_i+0x234>)
 800e0fa:	230a      	movs	r3, #10
 800e0fc:	e011      	b.n	800e122 <_printf_i+0xfa>
 800e0fe:	6821      	ldr	r1, [r4, #0]
 800e100:	6833      	ldr	r3, [r6, #0]
 800e102:	0608      	lsls	r0, r1, #24
 800e104:	f853 5b04 	ldr.w	r5, [r3], #4
 800e108:	d402      	bmi.n	800e110 <_printf_i+0xe8>
 800e10a:	0649      	lsls	r1, r1, #25
 800e10c:	bf48      	it	mi
 800e10e:	b2ad      	uxthmi	r5, r5
 800e110:	2f6f      	cmp	r7, #111	@ 0x6f
 800e112:	4852      	ldr	r0, [pc, #328]	@ (800e25c <_printf_i+0x234>)
 800e114:	6033      	str	r3, [r6, #0]
 800e116:	bf14      	ite	ne
 800e118:	230a      	movne	r3, #10
 800e11a:	2308      	moveq	r3, #8
 800e11c:	2100      	movs	r1, #0
 800e11e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e122:	6866      	ldr	r6, [r4, #4]
 800e124:	60a6      	str	r6, [r4, #8]
 800e126:	2e00      	cmp	r6, #0
 800e128:	db05      	blt.n	800e136 <_printf_i+0x10e>
 800e12a:	6821      	ldr	r1, [r4, #0]
 800e12c:	432e      	orrs	r6, r5
 800e12e:	f021 0104 	bic.w	r1, r1, #4
 800e132:	6021      	str	r1, [r4, #0]
 800e134:	d04b      	beq.n	800e1ce <_printf_i+0x1a6>
 800e136:	4616      	mov	r6, r2
 800e138:	fbb5 f1f3 	udiv	r1, r5, r3
 800e13c:	fb03 5711 	mls	r7, r3, r1, r5
 800e140:	5dc7      	ldrb	r7, [r0, r7]
 800e142:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e146:	462f      	mov	r7, r5
 800e148:	42bb      	cmp	r3, r7
 800e14a:	460d      	mov	r5, r1
 800e14c:	d9f4      	bls.n	800e138 <_printf_i+0x110>
 800e14e:	2b08      	cmp	r3, #8
 800e150:	d10b      	bne.n	800e16a <_printf_i+0x142>
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	07df      	lsls	r7, r3, #31
 800e156:	d508      	bpl.n	800e16a <_printf_i+0x142>
 800e158:	6923      	ldr	r3, [r4, #16]
 800e15a:	6861      	ldr	r1, [r4, #4]
 800e15c:	4299      	cmp	r1, r3
 800e15e:	bfde      	ittt	le
 800e160:	2330      	movle	r3, #48	@ 0x30
 800e162:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e166:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e16a:	1b92      	subs	r2, r2, r6
 800e16c:	6122      	str	r2, [r4, #16]
 800e16e:	f8cd a000 	str.w	sl, [sp]
 800e172:	464b      	mov	r3, r9
 800e174:	aa03      	add	r2, sp, #12
 800e176:	4621      	mov	r1, r4
 800e178:	4640      	mov	r0, r8
 800e17a:	f7ff fee7 	bl	800df4c <_printf_common>
 800e17e:	3001      	adds	r0, #1
 800e180:	d14a      	bne.n	800e218 <_printf_i+0x1f0>
 800e182:	f04f 30ff 	mov.w	r0, #4294967295
 800e186:	b004      	add	sp, #16
 800e188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	f043 0320 	orr.w	r3, r3, #32
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	4832      	ldr	r0, [pc, #200]	@ (800e260 <_printf_i+0x238>)
 800e196:	2778      	movs	r7, #120	@ 0x78
 800e198:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	6831      	ldr	r1, [r6, #0]
 800e1a0:	061f      	lsls	r7, r3, #24
 800e1a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800e1a6:	d402      	bmi.n	800e1ae <_printf_i+0x186>
 800e1a8:	065f      	lsls	r7, r3, #25
 800e1aa:	bf48      	it	mi
 800e1ac:	b2ad      	uxthmi	r5, r5
 800e1ae:	6031      	str	r1, [r6, #0]
 800e1b0:	07d9      	lsls	r1, r3, #31
 800e1b2:	bf44      	itt	mi
 800e1b4:	f043 0320 	orrmi.w	r3, r3, #32
 800e1b8:	6023      	strmi	r3, [r4, #0]
 800e1ba:	b11d      	cbz	r5, 800e1c4 <_printf_i+0x19c>
 800e1bc:	2310      	movs	r3, #16
 800e1be:	e7ad      	b.n	800e11c <_printf_i+0xf4>
 800e1c0:	4826      	ldr	r0, [pc, #152]	@ (800e25c <_printf_i+0x234>)
 800e1c2:	e7e9      	b.n	800e198 <_printf_i+0x170>
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	f023 0320 	bic.w	r3, r3, #32
 800e1ca:	6023      	str	r3, [r4, #0]
 800e1cc:	e7f6      	b.n	800e1bc <_printf_i+0x194>
 800e1ce:	4616      	mov	r6, r2
 800e1d0:	e7bd      	b.n	800e14e <_printf_i+0x126>
 800e1d2:	6833      	ldr	r3, [r6, #0]
 800e1d4:	6825      	ldr	r5, [r4, #0]
 800e1d6:	6961      	ldr	r1, [r4, #20]
 800e1d8:	1d18      	adds	r0, r3, #4
 800e1da:	6030      	str	r0, [r6, #0]
 800e1dc:	062e      	lsls	r6, r5, #24
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	d501      	bpl.n	800e1e6 <_printf_i+0x1be>
 800e1e2:	6019      	str	r1, [r3, #0]
 800e1e4:	e002      	b.n	800e1ec <_printf_i+0x1c4>
 800e1e6:	0668      	lsls	r0, r5, #25
 800e1e8:	d5fb      	bpl.n	800e1e2 <_printf_i+0x1ba>
 800e1ea:	8019      	strh	r1, [r3, #0]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	6123      	str	r3, [r4, #16]
 800e1f0:	4616      	mov	r6, r2
 800e1f2:	e7bc      	b.n	800e16e <_printf_i+0x146>
 800e1f4:	6833      	ldr	r3, [r6, #0]
 800e1f6:	1d1a      	adds	r2, r3, #4
 800e1f8:	6032      	str	r2, [r6, #0]
 800e1fa:	681e      	ldr	r6, [r3, #0]
 800e1fc:	6862      	ldr	r2, [r4, #4]
 800e1fe:	2100      	movs	r1, #0
 800e200:	4630      	mov	r0, r6
 800e202:	f7f1 fff5 	bl	80001f0 <memchr>
 800e206:	b108      	cbz	r0, 800e20c <_printf_i+0x1e4>
 800e208:	1b80      	subs	r0, r0, r6
 800e20a:	6060      	str	r0, [r4, #4]
 800e20c:	6863      	ldr	r3, [r4, #4]
 800e20e:	6123      	str	r3, [r4, #16]
 800e210:	2300      	movs	r3, #0
 800e212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e216:	e7aa      	b.n	800e16e <_printf_i+0x146>
 800e218:	6923      	ldr	r3, [r4, #16]
 800e21a:	4632      	mov	r2, r6
 800e21c:	4649      	mov	r1, r9
 800e21e:	4640      	mov	r0, r8
 800e220:	47d0      	blx	sl
 800e222:	3001      	adds	r0, #1
 800e224:	d0ad      	beq.n	800e182 <_printf_i+0x15a>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	079b      	lsls	r3, r3, #30
 800e22a:	d413      	bmi.n	800e254 <_printf_i+0x22c>
 800e22c:	68e0      	ldr	r0, [r4, #12]
 800e22e:	9b03      	ldr	r3, [sp, #12]
 800e230:	4298      	cmp	r0, r3
 800e232:	bfb8      	it	lt
 800e234:	4618      	movlt	r0, r3
 800e236:	e7a6      	b.n	800e186 <_printf_i+0x15e>
 800e238:	2301      	movs	r3, #1
 800e23a:	4632      	mov	r2, r6
 800e23c:	4649      	mov	r1, r9
 800e23e:	4640      	mov	r0, r8
 800e240:	47d0      	blx	sl
 800e242:	3001      	adds	r0, #1
 800e244:	d09d      	beq.n	800e182 <_printf_i+0x15a>
 800e246:	3501      	adds	r5, #1
 800e248:	68e3      	ldr	r3, [r4, #12]
 800e24a:	9903      	ldr	r1, [sp, #12]
 800e24c:	1a5b      	subs	r3, r3, r1
 800e24e:	42ab      	cmp	r3, r5
 800e250:	dcf2      	bgt.n	800e238 <_printf_i+0x210>
 800e252:	e7eb      	b.n	800e22c <_printf_i+0x204>
 800e254:	2500      	movs	r5, #0
 800e256:	f104 0619 	add.w	r6, r4, #25
 800e25a:	e7f5      	b.n	800e248 <_printf_i+0x220>
 800e25c:	0803cd27 	.word	0x0803cd27
 800e260:	0803cd38 	.word	0x0803cd38

0800e264 <_scanf_float>:
 800e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	b087      	sub	sp, #28
 800e26a:	4691      	mov	r9, r2
 800e26c:	9303      	str	r3, [sp, #12]
 800e26e:	688b      	ldr	r3, [r1, #8]
 800e270:	1e5a      	subs	r2, r3, #1
 800e272:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e276:	bf81      	itttt	hi
 800e278:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e27c:	eb03 0b05 	addhi.w	fp, r3, r5
 800e280:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e284:	608b      	strhi	r3, [r1, #8]
 800e286:	680b      	ldr	r3, [r1, #0]
 800e288:	460a      	mov	r2, r1
 800e28a:	f04f 0500 	mov.w	r5, #0
 800e28e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e292:	f842 3b1c 	str.w	r3, [r2], #28
 800e296:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e29a:	4680      	mov	r8, r0
 800e29c:	460c      	mov	r4, r1
 800e29e:	bf98      	it	ls
 800e2a0:	f04f 0b00 	movls.w	fp, #0
 800e2a4:	9201      	str	r2, [sp, #4]
 800e2a6:	4616      	mov	r6, r2
 800e2a8:	46aa      	mov	sl, r5
 800e2aa:	462f      	mov	r7, r5
 800e2ac:	9502      	str	r5, [sp, #8]
 800e2ae:	68a2      	ldr	r2, [r4, #8]
 800e2b0:	b15a      	cbz	r2, 800e2ca <_scanf_float+0x66>
 800e2b2:	f8d9 3000 	ldr.w	r3, [r9]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	2b4e      	cmp	r3, #78	@ 0x4e
 800e2ba:	d863      	bhi.n	800e384 <_scanf_float+0x120>
 800e2bc:	2b40      	cmp	r3, #64	@ 0x40
 800e2be:	d83b      	bhi.n	800e338 <_scanf_float+0xd4>
 800e2c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e2c4:	b2c8      	uxtb	r0, r1
 800e2c6:	280e      	cmp	r0, #14
 800e2c8:	d939      	bls.n	800e33e <_scanf_float+0xda>
 800e2ca:	b11f      	cbz	r7, 800e2d4 <_scanf_float+0x70>
 800e2cc:	6823      	ldr	r3, [r4, #0]
 800e2ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2d2:	6023      	str	r3, [r4, #0]
 800e2d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2d8:	f1ba 0f01 	cmp.w	sl, #1
 800e2dc:	f200 8114 	bhi.w	800e508 <_scanf_float+0x2a4>
 800e2e0:	9b01      	ldr	r3, [sp, #4]
 800e2e2:	429e      	cmp	r6, r3
 800e2e4:	f200 8105 	bhi.w	800e4f2 <_scanf_float+0x28e>
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	b007      	add	sp, #28
 800e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e2f4:	2a0d      	cmp	r2, #13
 800e2f6:	d8e8      	bhi.n	800e2ca <_scanf_float+0x66>
 800e2f8:	a101      	add	r1, pc, #4	@ (adr r1, 800e300 <_scanf_float+0x9c>)
 800e2fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e2fe:	bf00      	nop
 800e300:	0800e449 	.word	0x0800e449
 800e304:	0800e2cb 	.word	0x0800e2cb
 800e308:	0800e2cb 	.word	0x0800e2cb
 800e30c:	0800e2cb 	.word	0x0800e2cb
 800e310:	0800e4a5 	.word	0x0800e4a5
 800e314:	0800e47f 	.word	0x0800e47f
 800e318:	0800e2cb 	.word	0x0800e2cb
 800e31c:	0800e2cb 	.word	0x0800e2cb
 800e320:	0800e457 	.word	0x0800e457
 800e324:	0800e2cb 	.word	0x0800e2cb
 800e328:	0800e2cb 	.word	0x0800e2cb
 800e32c:	0800e2cb 	.word	0x0800e2cb
 800e330:	0800e2cb 	.word	0x0800e2cb
 800e334:	0800e413 	.word	0x0800e413
 800e338:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e33c:	e7da      	b.n	800e2f4 <_scanf_float+0x90>
 800e33e:	290e      	cmp	r1, #14
 800e340:	d8c3      	bhi.n	800e2ca <_scanf_float+0x66>
 800e342:	a001      	add	r0, pc, #4	@ (adr r0, 800e348 <_scanf_float+0xe4>)
 800e344:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e348:	0800e403 	.word	0x0800e403
 800e34c:	0800e2cb 	.word	0x0800e2cb
 800e350:	0800e403 	.word	0x0800e403
 800e354:	0800e493 	.word	0x0800e493
 800e358:	0800e2cb 	.word	0x0800e2cb
 800e35c:	0800e3a5 	.word	0x0800e3a5
 800e360:	0800e3e9 	.word	0x0800e3e9
 800e364:	0800e3e9 	.word	0x0800e3e9
 800e368:	0800e3e9 	.word	0x0800e3e9
 800e36c:	0800e3e9 	.word	0x0800e3e9
 800e370:	0800e3e9 	.word	0x0800e3e9
 800e374:	0800e3e9 	.word	0x0800e3e9
 800e378:	0800e3e9 	.word	0x0800e3e9
 800e37c:	0800e3e9 	.word	0x0800e3e9
 800e380:	0800e3e9 	.word	0x0800e3e9
 800e384:	2b6e      	cmp	r3, #110	@ 0x6e
 800e386:	d809      	bhi.n	800e39c <_scanf_float+0x138>
 800e388:	2b60      	cmp	r3, #96	@ 0x60
 800e38a:	d8b1      	bhi.n	800e2f0 <_scanf_float+0x8c>
 800e38c:	2b54      	cmp	r3, #84	@ 0x54
 800e38e:	d07b      	beq.n	800e488 <_scanf_float+0x224>
 800e390:	2b59      	cmp	r3, #89	@ 0x59
 800e392:	d19a      	bne.n	800e2ca <_scanf_float+0x66>
 800e394:	2d07      	cmp	r5, #7
 800e396:	d198      	bne.n	800e2ca <_scanf_float+0x66>
 800e398:	2508      	movs	r5, #8
 800e39a:	e02f      	b.n	800e3fc <_scanf_float+0x198>
 800e39c:	2b74      	cmp	r3, #116	@ 0x74
 800e39e:	d073      	beq.n	800e488 <_scanf_float+0x224>
 800e3a0:	2b79      	cmp	r3, #121	@ 0x79
 800e3a2:	e7f6      	b.n	800e392 <_scanf_float+0x12e>
 800e3a4:	6821      	ldr	r1, [r4, #0]
 800e3a6:	05c8      	lsls	r0, r1, #23
 800e3a8:	d51e      	bpl.n	800e3e8 <_scanf_float+0x184>
 800e3aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e3ae:	6021      	str	r1, [r4, #0]
 800e3b0:	3701      	adds	r7, #1
 800e3b2:	f1bb 0f00 	cmp.w	fp, #0
 800e3b6:	d003      	beq.n	800e3c0 <_scanf_float+0x15c>
 800e3b8:	3201      	adds	r2, #1
 800e3ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e3be:	60a2      	str	r2, [r4, #8]
 800e3c0:	68a3      	ldr	r3, [r4, #8]
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	60a3      	str	r3, [r4, #8]
 800e3c6:	6923      	ldr	r3, [r4, #16]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	6123      	str	r3, [r4, #16]
 800e3cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f8c9 3004 	str.w	r3, [r9, #4]
 800e3d8:	f340 8082 	ble.w	800e4e0 <_scanf_float+0x27c>
 800e3dc:	f8d9 3000 	ldr.w	r3, [r9]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	f8c9 3000 	str.w	r3, [r9]
 800e3e6:	e762      	b.n	800e2ae <_scanf_float+0x4a>
 800e3e8:	eb1a 0105 	adds.w	r1, sl, r5
 800e3ec:	f47f af6d 	bne.w	800e2ca <_scanf_float+0x66>
 800e3f0:	6822      	ldr	r2, [r4, #0]
 800e3f2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e3f6:	6022      	str	r2, [r4, #0]
 800e3f8:	460d      	mov	r5, r1
 800e3fa:	468a      	mov	sl, r1
 800e3fc:	f806 3b01 	strb.w	r3, [r6], #1
 800e400:	e7de      	b.n	800e3c0 <_scanf_float+0x15c>
 800e402:	6822      	ldr	r2, [r4, #0]
 800e404:	0610      	lsls	r0, r2, #24
 800e406:	f57f af60 	bpl.w	800e2ca <_scanf_float+0x66>
 800e40a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e40e:	6022      	str	r2, [r4, #0]
 800e410:	e7f4      	b.n	800e3fc <_scanf_float+0x198>
 800e412:	f1ba 0f00 	cmp.w	sl, #0
 800e416:	d10c      	bne.n	800e432 <_scanf_float+0x1ce>
 800e418:	b977      	cbnz	r7, 800e438 <_scanf_float+0x1d4>
 800e41a:	6822      	ldr	r2, [r4, #0]
 800e41c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e420:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e424:	d108      	bne.n	800e438 <_scanf_float+0x1d4>
 800e426:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e42a:	6022      	str	r2, [r4, #0]
 800e42c:	f04f 0a01 	mov.w	sl, #1
 800e430:	e7e4      	b.n	800e3fc <_scanf_float+0x198>
 800e432:	f1ba 0f02 	cmp.w	sl, #2
 800e436:	d050      	beq.n	800e4da <_scanf_float+0x276>
 800e438:	2d01      	cmp	r5, #1
 800e43a:	d002      	beq.n	800e442 <_scanf_float+0x1de>
 800e43c:	2d04      	cmp	r5, #4
 800e43e:	f47f af44 	bne.w	800e2ca <_scanf_float+0x66>
 800e442:	3501      	adds	r5, #1
 800e444:	b2ed      	uxtb	r5, r5
 800e446:	e7d9      	b.n	800e3fc <_scanf_float+0x198>
 800e448:	f1ba 0f01 	cmp.w	sl, #1
 800e44c:	f47f af3d 	bne.w	800e2ca <_scanf_float+0x66>
 800e450:	f04f 0a02 	mov.w	sl, #2
 800e454:	e7d2      	b.n	800e3fc <_scanf_float+0x198>
 800e456:	b975      	cbnz	r5, 800e476 <_scanf_float+0x212>
 800e458:	2f00      	cmp	r7, #0
 800e45a:	f47f af37 	bne.w	800e2cc <_scanf_float+0x68>
 800e45e:	6822      	ldr	r2, [r4, #0]
 800e460:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e464:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e468:	f040 8103 	bne.w	800e672 <_scanf_float+0x40e>
 800e46c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e470:	6022      	str	r2, [r4, #0]
 800e472:	2501      	movs	r5, #1
 800e474:	e7c2      	b.n	800e3fc <_scanf_float+0x198>
 800e476:	2d03      	cmp	r5, #3
 800e478:	d0e3      	beq.n	800e442 <_scanf_float+0x1de>
 800e47a:	2d05      	cmp	r5, #5
 800e47c:	e7df      	b.n	800e43e <_scanf_float+0x1da>
 800e47e:	2d02      	cmp	r5, #2
 800e480:	f47f af23 	bne.w	800e2ca <_scanf_float+0x66>
 800e484:	2503      	movs	r5, #3
 800e486:	e7b9      	b.n	800e3fc <_scanf_float+0x198>
 800e488:	2d06      	cmp	r5, #6
 800e48a:	f47f af1e 	bne.w	800e2ca <_scanf_float+0x66>
 800e48e:	2507      	movs	r5, #7
 800e490:	e7b4      	b.n	800e3fc <_scanf_float+0x198>
 800e492:	6822      	ldr	r2, [r4, #0]
 800e494:	0591      	lsls	r1, r2, #22
 800e496:	f57f af18 	bpl.w	800e2ca <_scanf_float+0x66>
 800e49a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e49e:	6022      	str	r2, [r4, #0]
 800e4a0:	9702      	str	r7, [sp, #8]
 800e4a2:	e7ab      	b.n	800e3fc <_scanf_float+0x198>
 800e4a4:	6822      	ldr	r2, [r4, #0]
 800e4a6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e4aa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e4ae:	d005      	beq.n	800e4bc <_scanf_float+0x258>
 800e4b0:	0550      	lsls	r0, r2, #21
 800e4b2:	f57f af0a 	bpl.w	800e2ca <_scanf_float+0x66>
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	f000 80db 	beq.w	800e672 <_scanf_float+0x40e>
 800e4bc:	0591      	lsls	r1, r2, #22
 800e4be:	bf58      	it	pl
 800e4c0:	9902      	ldrpl	r1, [sp, #8]
 800e4c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e4c6:	bf58      	it	pl
 800e4c8:	1a79      	subpl	r1, r7, r1
 800e4ca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e4ce:	bf58      	it	pl
 800e4d0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e4d4:	6022      	str	r2, [r4, #0]
 800e4d6:	2700      	movs	r7, #0
 800e4d8:	e790      	b.n	800e3fc <_scanf_float+0x198>
 800e4da:	f04f 0a03 	mov.w	sl, #3
 800e4de:	e78d      	b.n	800e3fc <_scanf_float+0x198>
 800e4e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e4e4:	4649      	mov	r1, r9
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	4798      	blx	r3
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	f43f aedf 	beq.w	800e2ae <_scanf_float+0x4a>
 800e4f0:	e6eb      	b.n	800e2ca <_scanf_float+0x66>
 800e4f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4fa:	464a      	mov	r2, r9
 800e4fc:	4640      	mov	r0, r8
 800e4fe:	4798      	blx	r3
 800e500:	6923      	ldr	r3, [r4, #16]
 800e502:	3b01      	subs	r3, #1
 800e504:	6123      	str	r3, [r4, #16]
 800e506:	e6eb      	b.n	800e2e0 <_scanf_float+0x7c>
 800e508:	1e6b      	subs	r3, r5, #1
 800e50a:	2b06      	cmp	r3, #6
 800e50c:	d824      	bhi.n	800e558 <_scanf_float+0x2f4>
 800e50e:	2d02      	cmp	r5, #2
 800e510:	d836      	bhi.n	800e580 <_scanf_float+0x31c>
 800e512:	9b01      	ldr	r3, [sp, #4]
 800e514:	429e      	cmp	r6, r3
 800e516:	f67f aee7 	bls.w	800e2e8 <_scanf_float+0x84>
 800e51a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e51e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e522:	464a      	mov	r2, r9
 800e524:	4640      	mov	r0, r8
 800e526:	4798      	blx	r3
 800e528:	6923      	ldr	r3, [r4, #16]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	6123      	str	r3, [r4, #16]
 800e52e:	e7f0      	b.n	800e512 <_scanf_float+0x2ae>
 800e530:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e534:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e538:	464a      	mov	r2, r9
 800e53a:	4640      	mov	r0, r8
 800e53c:	4798      	blx	r3
 800e53e:	6923      	ldr	r3, [r4, #16]
 800e540:	3b01      	subs	r3, #1
 800e542:	6123      	str	r3, [r4, #16]
 800e544:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e548:	fa5f fa8a 	uxtb.w	sl, sl
 800e54c:	f1ba 0f02 	cmp.w	sl, #2
 800e550:	d1ee      	bne.n	800e530 <_scanf_float+0x2cc>
 800e552:	3d03      	subs	r5, #3
 800e554:	b2ed      	uxtb	r5, r5
 800e556:	1b76      	subs	r6, r6, r5
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	05da      	lsls	r2, r3, #23
 800e55c:	d530      	bpl.n	800e5c0 <_scanf_float+0x35c>
 800e55e:	055b      	lsls	r3, r3, #21
 800e560:	d511      	bpl.n	800e586 <_scanf_float+0x322>
 800e562:	9b01      	ldr	r3, [sp, #4]
 800e564:	429e      	cmp	r6, r3
 800e566:	f67f aebf 	bls.w	800e2e8 <_scanf_float+0x84>
 800e56a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e56e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e572:	464a      	mov	r2, r9
 800e574:	4640      	mov	r0, r8
 800e576:	4798      	blx	r3
 800e578:	6923      	ldr	r3, [r4, #16]
 800e57a:	3b01      	subs	r3, #1
 800e57c:	6123      	str	r3, [r4, #16]
 800e57e:	e7f0      	b.n	800e562 <_scanf_float+0x2fe>
 800e580:	46aa      	mov	sl, r5
 800e582:	46b3      	mov	fp, r6
 800e584:	e7de      	b.n	800e544 <_scanf_float+0x2e0>
 800e586:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e58a:	6923      	ldr	r3, [r4, #16]
 800e58c:	2965      	cmp	r1, #101	@ 0x65
 800e58e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e592:	f106 35ff 	add.w	r5, r6, #4294967295
 800e596:	6123      	str	r3, [r4, #16]
 800e598:	d00c      	beq.n	800e5b4 <_scanf_float+0x350>
 800e59a:	2945      	cmp	r1, #69	@ 0x45
 800e59c:	d00a      	beq.n	800e5b4 <_scanf_float+0x350>
 800e59e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e5a2:	464a      	mov	r2, r9
 800e5a4:	4640      	mov	r0, r8
 800e5a6:	4798      	blx	r3
 800e5a8:	6923      	ldr	r3, [r4, #16]
 800e5aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	1eb5      	subs	r5, r6, #2
 800e5b2:	6123      	str	r3, [r4, #16]
 800e5b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e5b8:	464a      	mov	r2, r9
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	4798      	blx	r3
 800e5be:	462e      	mov	r6, r5
 800e5c0:	6822      	ldr	r2, [r4, #0]
 800e5c2:	f012 0210 	ands.w	r2, r2, #16
 800e5c6:	d001      	beq.n	800e5cc <_scanf_float+0x368>
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	e68e      	b.n	800e2ea <_scanf_float+0x86>
 800e5cc:	7032      	strb	r2, [r6, #0]
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e5d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5d8:	d125      	bne.n	800e626 <_scanf_float+0x3c2>
 800e5da:	9b02      	ldr	r3, [sp, #8]
 800e5dc:	429f      	cmp	r7, r3
 800e5de:	d00a      	beq.n	800e5f6 <_scanf_float+0x392>
 800e5e0:	1bda      	subs	r2, r3, r7
 800e5e2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e5e6:	429e      	cmp	r6, r3
 800e5e8:	bf28      	it	cs
 800e5ea:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e5ee:	4922      	ldr	r1, [pc, #136]	@ (800e678 <_scanf_float+0x414>)
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	f000 f93d 	bl	800e870 <siprintf>
 800e5f6:	9901      	ldr	r1, [sp, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	4640      	mov	r0, r8
 800e5fc:	f002 fbd4 	bl	8010da8 <_strtod_r>
 800e600:	9b03      	ldr	r3, [sp, #12]
 800e602:	6821      	ldr	r1, [r4, #0]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f011 0f02 	tst.w	r1, #2
 800e60a:	ec57 6b10 	vmov	r6, r7, d0
 800e60e:	f103 0204 	add.w	r2, r3, #4
 800e612:	d015      	beq.n	800e640 <_scanf_float+0x3dc>
 800e614:	9903      	ldr	r1, [sp, #12]
 800e616:	600a      	str	r2, [r1, #0]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	e9c3 6700 	strd	r6, r7, [r3]
 800e61e:	68e3      	ldr	r3, [r4, #12]
 800e620:	3301      	adds	r3, #1
 800e622:	60e3      	str	r3, [r4, #12]
 800e624:	e7d0      	b.n	800e5c8 <_scanf_float+0x364>
 800e626:	9b04      	ldr	r3, [sp, #16]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d0e4      	beq.n	800e5f6 <_scanf_float+0x392>
 800e62c:	9905      	ldr	r1, [sp, #20]
 800e62e:	230a      	movs	r3, #10
 800e630:	3101      	adds	r1, #1
 800e632:	4640      	mov	r0, r8
 800e634:	f7ff f9b4 	bl	800d9a0 <_strtol_r>
 800e638:	9b04      	ldr	r3, [sp, #16]
 800e63a:	9e05      	ldr	r6, [sp, #20]
 800e63c:	1ac2      	subs	r2, r0, r3
 800e63e:	e7d0      	b.n	800e5e2 <_scanf_float+0x37e>
 800e640:	f011 0f04 	tst.w	r1, #4
 800e644:	9903      	ldr	r1, [sp, #12]
 800e646:	600a      	str	r2, [r1, #0]
 800e648:	d1e6      	bne.n	800e618 <_scanf_float+0x3b4>
 800e64a:	681d      	ldr	r5, [r3, #0]
 800e64c:	4632      	mov	r2, r6
 800e64e:	463b      	mov	r3, r7
 800e650:	4630      	mov	r0, r6
 800e652:	4639      	mov	r1, r7
 800e654:	f7f2 fa7a 	bl	8000b4c <__aeabi_dcmpun>
 800e658:	b128      	cbz	r0, 800e666 <_scanf_float+0x402>
 800e65a:	4808      	ldr	r0, [pc, #32]	@ (800e67c <_scanf_float+0x418>)
 800e65c:	f000 fa4e 	bl	800eafc <nanf>
 800e660:	ed85 0a00 	vstr	s0, [r5]
 800e664:	e7db      	b.n	800e61e <_scanf_float+0x3ba>
 800e666:	4630      	mov	r0, r6
 800e668:	4639      	mov	r1, r7
 800e66a:	f7f2 facd 	bl	8000c08 <__aeabi_d2f>
 800e66e:	6028      	str	r0, [r5, #0]
 800e670:	e7d5      	b.n	800e61e <_scanf_float+0x3ba>
 800e672:	2700      	movs	r7, #0
 800e674:	e62e      	b.n	800e2d4 <_scanf_float+0x70>
 800e676:	bf00      	nop
 800e678:	0803cd49 	.word	0x0803cd49
 800e67c:	0803ce8a 	.word	0x0803ce8a

0800e680 <std>:
 800e680:	2300      	movs	r3, #0
 800e682:	b510      	push	{r4, lr}
 800e684:	4604      	mov	r4, r0
 800e686:	e9c0 3300 	strd	r3, r3, [r0]
 800e68a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e68e:	6083      	str	r3, [r0, #8]
 800e690:	8181      	strh	r1, [r0, #12]
 800e692:	6643      	str	r3, [r0, #100]	@ 0x64
 800e694:	81c2      	strh	r2, [r0, #14]
 800e696:	6183      	str	r3, [r0, #24]
 800e698:	4619      	mov	r1, r3
 800e69a:	2208      	movs	r2, #8
 800e69c:	305c      	adds	r0, #92	@ 0x5c
 800e69e:	f000 f966 	bl	800e96e <memset>
 800e6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e6d8 <std+0x58>)
 800e6a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e6dc <std+0x5c>)
 800e6a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e0 <std+0x60>)
 800e6ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e4 <std+0x64>)
 800e6b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e8 <std+0x68>)
 800e6b4:	6224      	str	r4, [r4, #32]
 800e6b6:	429c      	cmp	r4, r3
 800e6b8:	d006      	beq.n	800e6c8 <std+0x48>
 800e6ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e6be:	4294      	cmp	r4, r2
 800e6c0:	d002      	beq.n	800e6c8 <std+0x48>
 800e6c2:	33d0      	adds	r3, #208	@ 0xd0
 800e6c4:	429c      	cmp	r4, r3
 800e6c6:	d105      	bne.n	800e6d4 <std+0x54>
 800e6c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6d0:	f000 ba02 	b.w	800ead8 <__retarget_lock_init_recursive>
 800e6d4:	bd10      	pop	{r4, pc}
 800e6d6:	bf00      	nop
 800e6d8:	0800e8b5 	.word	0x0800e8b5
 800e6dc:	0800e8d7 	.word	0x0800e8d7
 800e6e0:	0800e90f 	.word	0x0800e90f
 800e6e4:	0800e933 	.word	0x0800e933
 800e6e8:	20001010 	.word	0x20001010

0800e6ec <stdio_exit_handler>:
 800e6ec:	4a02      	ldr	r2, [pc, #8]	@ (800e6f8 <stdio_exit_handler+0xc>)
 800e6ee:	4903      	ldr	r1, [pc, #12]	@ (800e6fc <stdio_exit_handler+0x10>)
 800e6f0:	4803      	ldr	r0, [pc, #12]	@ (800e700 <stdio_exit_handler+0x14>)
 800e6f2:	f000 b869 	b.w	800e7c8 <_fwalk_sglue>
 800e6f6:	bf00      	nop
 800e6f8:	20000054 	.word	0x20000054
 800e6fc:	0801116d 	.word	0x0801116d
 800e700:	20000064 	.word	0x20000064

0800e704 <cleanup_stdio>:
 800e704:	6841      	ldr	r1, [r0, #4]
 800e706:	4b0c      	ldr	r3, [pc, #48]	@ (800e738 <cleanup_stdio+0x34>)
 800e708:	4299      	cmp	r1, r3
 800e70a:	b510      	push	{r4, lr}
 800e70c:	4604      	mov	r4, r0
 800e70e:	d001      	beq.n	800e714 <cleanup_stdio+0x10>
 800e710:	f002 fd2c 	bl	801116c <_fflush_r>
 800e714:	68a1      	ldr	r1, [r4, #8]
 800e716:	4b09      	ldr	r3, [pc, #36]	@ (800e73c <cleanup_stdio+0x38>)
 800e718:	4299      	cmp	r1, r3
 800e71a:	d002      	beq.n	800e722 <cleanup_stdio+0x1e>
 800e71c:	4620      	mov	r0, r4
 800e71e:	f002 fd25 	bl	801116c <_fflush_r>
 800e722:	68e1      	ldr	r1, [r4, #12]
 800e724:	4b06      	ldr	r3, [pc, #24]	@ (800e740 <cleanup_stdio+0x3c>)
 800e726:	4299      	cmp	r1, r3
 800e728:	d004      	beq.n	800e734 <cleanup_stdio+0x30>
 800e72a:	4620      	mov	r0, r4
 800e72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e730:	f002 bd1c 	b.w	801116c <_fflush_r>
 800e734:	bd10      	pop	{r4, pc}
 800e736:	bf00      	nop
 800e738:	20001010 	.word	0x20001010
 800e73c:	20001078 	.word	0x20001078
 800e740:	200010e0 	.word	0x200010e0

0800e744 <global_stdio_init.part.0>:
 800e744:	b510      	push	{r4, lr}
 800e746:	4b0b      	ldr	r3, [pc, #44]	@ (800e774 <global_stdio_init.part.0+0x30>)
 800e748:	4c0b      	ldr	r4, [pc, #44]	@ (800e778 <global_stdio_init.part.0+0x34>)
 800e74a:	4a0c      	ldr	r2, [pc, #48]	@ (800e77c <global_stdio_init.part.0+0x38>)
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	4620      	mov	r0, r4
 800e750:	2200      	movs	r2, #0
 800e752:	2104      	movs	r1, #4
 800e754:	f7ff ff94 	bl	800e680 <std>
 800e758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e75c:	2201      	movs	r2, #1
 800e75e:	2109      	movs	r1, #9
 800e760:	f7ff ff8e 	bl	800e680 <std>
 800e764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e768:	2202      	movs	r2, #2
 800e76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e76e:	2112      	movs	r1, #18
 800e770:	f7ff bf86 	b.w	800e680 <std>
 800e774:	20001148 	.word	0x20001148
 800e778:	20001010 	.word	0x20001010
 800e77c:	0800e6ed 	.word	0x0800e6ed

0800e780 <__sfp_lock_acquire>:
 800e780:	4801      	ldr	r0, [pc, #4]	@ (800e788 <__sfp_lock_acquire+0x8>)
 800e782:	f000 b9aa 	b.w	800eada <__retarget_lock_acquire_recursive>
 800e786:	bf00      	nop
 800e788:	20001151 	.word	0x20001151

0800e78c <__sfp_lock_release>:
 800e78c:	4801      	ldr	r0, [pc, #4]	@ (800e794 <__sfp_lock_release+0x8>)
 800e78e:	f000 b9a5 	b.w	800eadc <__retarget_lock_release_recursive>
 800e792:	bf00      	nop
 800e794:	20001151 	.word	0x20001151

0800e798 <__sinit>:
 800e798:	b510      	push	{r4, lr}
 800e79a:	4604      	mov	r4, r0
 800e79c:	f7ff fff0 	bl	800e780 <__sfp_lock_acquire>
 800e7a0:	6a23      	ldr	r3, [r4, #32]
 800e7a2:	b11b      	cbz	r3, 800e7ac <__sinit+0x14>
 800e7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7a8:	f7ff bff0 	b.w	800e78c <__sfp_lock_release>
 800e7ac:	4b04      	ldr	r3, [pc, #16]	@ (800e7c0 <__sinit+0x28>)
 800e7ae:	6223      	str	r3, [r4, #32]
 800e7b0:	4b04      	ldr	r3, [pc, #16]	@ (800e7c4 <__sinit+0x2c>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1f5      	bne.n	800e7a4 <__sinit+0xc>
 800e7b8:	f7ff ffc4 	bl	800e744 <global_stdio_init.part.0>
 800e7bc:	e7f2      	b.n	800e7a4 <__sinit+0xc>
 800e7be:	bf00      	nop
 800e7c0:	0800e705 	.word	0x0800e705
 800e7c4:	20001148 	.word	0x20001148

0800e7c8 <_fwalk_sglue>:
 800e7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7cc:	4607      	mov	r7, r0
 800e7ce:	4688      	mov	r8, r1
 800e7d0:	4614      	mov	r4, r2
 800e7d2:	2600      	movs	r6, #0
 800e7d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7d8:	f1b9 0901 	subs.w	r9, r9, #1
 800e7dc:	d505      	bpl.n	800e7ea <_fwalk_sglue+0x22>
 800e7de:	6824      	ldr	r4, [r4, #0]
 800e7e0:	2c00      	cmp	r4, #0
 800e7e2:	d1f7      	bne.n	800e7d4 <_fwalk_sglue+0xc>
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ea:	89ab      	ldrh	r3, [r5, #12]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d907      	bls.n	800e800 <_fwalk_sglue+0x38>
 800e7f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	d003      	beq.n	800e800 <_fwalk_sglue+0x38>
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	47c0      	blx	r8
 800e7fe:	4306      	orrs	r6, r0
 800e800:	3568      	adds	r5, #104	@ 0x68
 800e802:	e7e9      	b.n	800e7d8 <_fwalk_sglue+0x10>

0800e804 <sniprintf>:
 800e804:	b40c      	push	{r2, r3}
 800e806:	b530      	push	{r4, r5, lr}
 800e808:	4b18      	ldr	r3, [pc, #96]	@ (800e86c <sniprintf+0x68>)
 800e80a:	1e0c      	subs	r4, r1, #0
 800e80c:	681d      	ldr	r5, [r3, #0]
 800e80e:	b09d      	sub	sp, #116	@ 0x74
 800e810:	da08      	bge.n	800e824 <sniprintf+0x20>
 800e812:	238b      	movs	r3, #139	@ 0x8b
 800e814:	602b      	str	r3, [r5, #0]
 800e816:	f04f 30ff 	mov.w	r0, #4294967295
 800e81a:	b01d      	add	sp, #116	@ 0x74
 800e81c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e820:	b002      	add	sp, #8
 800e822:	4770      	bx	lr
 800e824:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e828:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e82c:	f04f 0300 	mov.w	r3, #0
 800e830:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e832:	bf14      	ite	ne
 800e834:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e838:	4623      	moveq	r3, r4
 800e83a:	9304      	str	r3, [sp, #16]
 800e83c:	9307      	str	r3, [sp, #28]
 800e83e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e842:	9002      	str	r0, [sp, #8]
 800e844:	9006      	str	r0, [sp, #24]
 800e846:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e84a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e84c:	ab21      	add	r3, sp, #132	@ 0x84
 800e84e:	a902      	add	r1, sp, #8
 800e850:	4628      	mov	r0, r5
 800e852:	9301      	str	r3, [sp, #4]
 800e854:	f002 fb0a 	bl	8010e6c <_svfiprintf_r>
 800e858:	1c43      	adds	r3, r0, #1
 800e85a:	bfbc      	itt	lt
 800e85c:	238b      	movlt	r3, #139	@ 0x8b
 800e85e:	602b      	strlt	r3, [r5, #0]
 800e860:	2c00      	cmp	r4, #0
 800e862:	d0da      	beq.n	800e81a <sniprintf+0x16>
 800e864:	9b02      	ldr	r3, [sp, #8]
 800e866:	2200      	movs	r2, #0
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	e7d6      	b.n	800e81a <sniprintf+0x16>
 800e86c:	20000060 	.word	0x20000060

0800e870 <siprintf>:
 800e870:	b40e      	push	{r1, r2, r3}
 800e872:	b510      	push	{r4, lr}
 800e874:	b09d      	sub	sp, #116	@ 0x74
 800e876:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e878:	9002      	str	r0, [sp, #8]
 800e87a:	9006      	str	r0, [sp, #24]
 800e87c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e880:	480a      	ldr	r0, [pc, #40]	@ (800e8ac <siprintf+0x3c>)
 800e882:	9107      	str	r1, [sp, #28]
 800e884:	9104      	str	r1, [sp, #16]
 800e886:	490a      	ldr	r1, [pc, #40]	@ (800e8b0 <siprintf+0x40>)
 800e888:	f853 2b04 	ldr.w	r2, [r3], #4
 800e88c:	9105      	str	r1, [sp, #20]
 800e88e:	2400      	movs	r4, #0
 800e890:	a902      	add	r1, sp, #8
 800e892:	6800      	ldr	r0, [r0, #0]
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e898:	f002 fae8 	bl	8010e6c <_svfiprintf_r>
 800e89c:	9b02      	ldr	r3, [sp, #8]
 800e89e:	701c      	strb	r4, [r3, #0]
 800e8a0:	b01d      	add	sp, #116	@ 0x74
 800e8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a6:	b003      	add	sp, #12
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	20000060 	.word	0x20000060
 800e8b0:	ffff0208 	.word	0xffff0208

0800e8b4 <__sread>:
 800e8b4:	b510      	push	{r4, lr}
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8bc:	f000 f8ae 	bl	800ea1c <_read_r>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	bfab      	itete	ge
 800e8c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e8c6:	89a3      	ldrhlt	r3, [r4, #12]
 800e8c8:	181b      	addge	r3, r3, r0
 800e8ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e8ce:	bfac      	ite	ge
 800e8d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e8d2:	81a3      	strhlt	r3, [r4, #12]
 800e8d4:	bd10      	pop	{r4, pc}

0800e8d6 <__swrite>:
 800e8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8da:	461f      	mov	r7, r3
 800e8dc:	898b      	ldrh	r3, [r1, #12]
 800e8de:	05db      	lsls	r3, r3, #23
 800e8e0:	4605      	mov	r5, r0
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	d505      	bpl.n	800e8f4 <__swrite+0x1e>
 800e8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8ec:	2302      	movs	r3, #2
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f000 f882 	bl	800e9f8 <_lseek_r>
 800e8f4:	89a3      	ldrh	r3, [r4, #12]
 800e8f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8fe:	81a3      	strh	r3, [r4, #12]
 800e900:	4632      	mov	r2, r6
 800e902:	463b      	mov	r3, r7
 800e904:	4628      	mov	r0, r5
 800e906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e90a:	f000 b8a9 	b.w	800ea60 <_write_r>

0800e90e <__sseek>:
 800e90e:	b510      	push	{r4, lr}
 800e910:	460c      	mov	r4, r1
 800e912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e916:	f000 f86f 	bl	800e9f8 <_lseek_r>
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	bf15      	itete	ne
 800e920:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e922:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e926:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e92a:	81a3      	strheq	r3, [r4, #12]
 800e92c:	bf18      	it	ne
 800e92e:	81a3      	strhne	r3, [r4, #12]
 800e930:	bd10      	pop	{r4, pc}

0800e932 <__sclose>:
 800e932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e936:	f000 b84f 	b.w	800e9d8 <_close_r>

0800e93a <memmove>:
 800e93a:	4288      	cmp	r0, r1
 800e93c:	b510      	push	{r4, lr}
 800e93e:	eb01 0402 	add.w	r4, r1, r2
 800e942:	d902      	bls.n	800e94a <memmove+0x10>
 800e944:	4284      	cmp	r4, r0
 800e946:	4623      	mov	r3, r4
 800e948:	d807      	bhi.n	800e95a <memmove+0x20>
 800e94a:	1e43      	subs	r3, r0, #1
 800e94c:	42a1      	cmp	r1, r4
 800e94e:	d008      	beq.n	800e962 <memmove+0x28>
 800e950:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e954:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e958:	e7f8      	b.n	800e94c <memmove+0x12>
 800e95a:	4402      	add	r2, r0
 800e95c:	4601      	mov	r1, r0
 800e95e:	428a      	cmp	r2, r1
 800e960:	d100      	bne.n	800e964 <memmove+0x2a>
 800e962:	bd10      	pop	{r4, pc}
 800e964:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e968:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e96c:	e7f7      	b.n	800e95e <memmove+0x24>

0800e96e <memset>:
 800e96e:	4402      	add	r2, r0
 800e970:	4603      	mov	r3, r0
 800e972:	4293      	cmp	r3, r2
 800e974:	d100      	bne.n	800e978 <memset+0xa>
 800e976:	4770      	bx	lr
 800e978:	f803 1b01 	strb.w	r1, [r3], #1
 800e97c:	e7f9      	b.n	800e972 <memset+0x4>

0800e97e <strncmp>:
 800e97e:	b510      	push	{r4, lr}
 800e980:	b16a      	cbz	r2, 800e99e <strncmp+0x20>
 800e982:	3901      	subs	r1, #1
 800e984:	1884      	adds	r4, r0, r2
 800e986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e98a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e98e:	429a      	cmp	r2, r3
 800e990:	d103      	bne.n	800e99a <strncmp+0x1c>
 800e992:	42a0      	cmp	r0, r4
 800e994:	d001      	beq.n	800e99a <strncmp+0x1c>
 800e996:	2a00      	cmp	r2, #0
 800e998:	d1f5      	bne.n	800e986 <strncmp+0x8>
 800e99a:	1ad0      	subs	r0, r2, r3
 800e99c:	bd10      	pop	{r4, pc}
 800e99e:	4610      	mov	r0, r2
 800e9a0:	e7fc      	b.n	800e99c <strncmp+0x1e>

0800e9a2 <strstr>:
 800e9a2:	780a      	ldrb	r2, [r1, #0]
 800e9a4:	b570      	push	{r4, r5, r6, lr}
 800e9a6:	b96a      	cbnz	r2, 800e9c4 <strstr+0x22>
 800e9a8:	bd70      	pop	{r4, r5, r6, pc}
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d109      	bne.n	800e9c2 <strstr+0x20>
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	4605      	mov	r5, r0
 800e9b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0f6      	beq.n	800e9a8 <strstr+0x6>
 800e9ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e9be:	429e      	cmp	r6, r3
 800e9c0:	d0f7      	beq.n	800e9b2 <strstr+0x10>
 800e9c2:	3001      	adds	r0, #1
 800e9c4:	7803      	ldrb	r3, [r0, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1ef      	bne.n	800e9aa <strstr+0x8>
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	e7ec      	b.n	800e9a8 <strstr+0x6>
	...

0800e9d0 <_localeconv_r>:
 800e9d0:	4800      	ldr	r0, [pc, #0]	@ (800e9d4 <_localeconv_r+0x4>)
 800e9d2:	4770      	bx	lr
 800e9d4:	200001a0 	.word	0x200001a0

0800e9d8 <_close_r>:
 800e9d8:	b538      	push	{r3, r4, r5, lr}
 800e9da:	4d06      	ldr	r5, [pc, #24]	@ (800e9f4 <_close_r+0x1c>)
 800e9dc:	2300      	movs	r3, #0
 800e9de:	4604      	mov	r4, r0
 800e9e0:	4608      	mov	r0, r1
 800e9e2:	602b      	str	r3, [r5, #0]
 800e9e4:	f7f3 fe6c 	bl	80026c0 <_close>
 800e9e8:	1c43      	adds	r3, r0, #1
 800e9ea:	d102      	bne.n	800e9f2 <_close_r+0x1a>
 800e9ec:	682b      	ldr	r3, [r5, #0]
 800e9ee:	b103      	cbz	r3, 800e9f2 <_close_r+0x1a>
 800e9f0:	6023      	str	r3, [r4, #0]
 800e9f2:	bd38      	pop	{r3, r4, r5, pc}
 800e9f4:	2000114c 	.word	0x2000114c

0800e9f8 <_lseek_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4d07      	ldr	r5, [pc, #28]	@ (800ea18 <_lseek_r+0x20>)
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	4608      	mov	r0, r1
 800ea00:	4611      	mov	r1, r2
 800ea02:	2200      	movs	r2, #0
 800ea04:	602a      	str	r2, [r5, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	f7f3 fe81 	bl	800270e <_lseek>
 800ea0c:	1c43      	adds	r3, r0, #1
 800ea0e:	d102      	bne.n	800ea16 <_lseek_r+0x1e>
 800ea10:	682b      	ldr	r3, [r5, #0]
 800ea12:	b103      	cbz	r3, 800ea16 <_lseek_r+0x1e>
 800ea14:	6023      	str	r3, [r4, #0]
 800ea16:	bd38      	pop	{r3, r4, r5, pc}
 800ea18:	2000114c 	.word	0x2000114c

0800ea1c <_read_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4d07      	ldr	r5, [pc, #28]	@ (800ea3c <_read_r+0x20>)
 800ea20:	4604      	mov	r4, r0
 800ea22:	4608      	mov	r0, r1
 800ea24:	4611      	mov	r1, r2
 800ea26:	2200      	movs	r2, #0
 800ea28:	602a      	str	r2, [r5, #0]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f7f3 fe2b 	bl	8002686 <_read>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d102      	bne.n	800ea3a <_read_r+0x1e>
 800ea34:	682b      	ldr	r3, [r5, #0]
 800ea36:	b103      	cbz	r3, 800ea3a <_read_r+0x1e>
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	2000114c 	.word	0x2000114c

0800ea40 <_sbrk_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4d06      	ldr	r5, [pc, #24]	@ (800ea5c <_sbrk_r+0x1c>)
 800ea44:	2300      	movs	r3, #0
 800ea46:	4604      	mov	r4, r0
 800ea48:	4608      	mov	r0, r1
 800ea4a:	602b      	str	r3, [r5, #0]
 800ea4c:	f7f3 fe6c 	bl	8002728 <_sbrk>
 800ea50:	1c43      	adds	r3, r0, #1
 800ea52:	d102      	bne.n	800ea5a <_sbrk_r+0x1a>
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	b103      	cbz	r3, 800ea5a <_sbrk_r+0x1a>
 800ea58:	6023      	str	r3, [r4, #0]
 800ea5a:	bd38      	pop	{r3, r4, r5, pc}
 800ea5c:	2000114c 	.word	0x2000114c

0800ea60 <_write_r>:
 800ea60:	b538      	push	{r3, r4, r5, lr}
 800ea62:	4d07      	ldr	r5, [pc, #28]	@ (800ea80 <_write_r+0x20>)
 800ea64:	4604      	mov	r4, r0
 800ea66:	4608      	mov	r0, r1
 800ea68:	4611      	mov	r1, r2
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	602a      	str	r2, [r5, #0]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	f7f2 fc8a 	bl	8001388 <_write>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	d102      	bne.n	800ea7e <_write_r+0x1e>
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	b103      	cbz	r3, 800ea7e <_write_r+0x1e>
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	2000114c 	.word	0x2000114c

0800ea84 <__errno>:
 800ea84:	4b01      	ldr	r3, [pc, #4]	@ (800ea8c <__errno+0x8>)
 800ea86:	6818      	ldr	r0, [r3, #0]
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	20000060 	.word	0x20000060

0800ea90 <__libc_init_array>:
 800ea90:	b570      	push	{r4, r5, r6, lr}
 800ea92:	4d0d      	ldr	r5, [pc, #52]	@ (800eac8 <__libc_init_array+0x38>)
 800ea94:	4c0d      	ldr	r4, [pc, #52]	@ (800eacc <__libc_init_array+0x3c>)
 800ea96:	1b64      	subs	r4, r4, r5
 800ea98:	10a4      	asrs	r4, r4, #2
 800ea9a:	2600      	movs	r6, #0
 800ea9c:	42a6      	cmp	r6, r4
 800ea9e:	d109      	bne.n	800eab4 <__libc_init_array+0x24>
 800eaa0:	4d0b      	ldr	r5, [pc, #44]	@ (800ead0 <__libc_init_array+0x40>)
 800eaa2:	4c0c      	ldr	r4, [pc, #48]	@ (800ead4 <__libc_init_array+0x44>)
 800eaa4:	f003 fa0a 	bl	8011ebc <_init>
 800eaa8:	1b64      	subs	r4, r4, r5
 800eaaa:	10a4      	asrs	r4, r4, #2
 800eaac:	2600      	movs	r6, #0
 800eaae:	42a6      	cmp	r6, r4
 800eab0:	d105      	bne.n	800eabe <__libc_init_array+0x2e>
 800eab2:	bd70      	pop	{r4, r5, r6, pc}
 800eab4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eab8:	4798      	blx	r3
 800eaba:	3601      	adds	r6, #1
 800eabc:	e7ee      	b.n	800ea9c <__libc_init_array+0xc>
 800eabe:	f855 3b04 	ldr.w	r3, [r5], #4
 800eac2:	4798      	blx	r3
 800eac4:	3601      	adds	r6, #1
 800eac6:	e7f2      	b.n	800eaae <__libc_init_array+0x1e>
 800eac8:	0803d040 	.word	0x0803d040
 800eacc:	0803d040 	.word	0x0803d040
 800ead0:	0803d040 	.word	0x0803d040
 800ead4:	0803d044 	.word	0x0803d044

0800ead8 <__retarget_lock_init_recursive>:
 800ead8:	4770      	bx	lr

0800eada <__retarget_lock_acquire_recursive>:
 800eada:	4770      	bx	lr

0800eadc <__retarget_lock_release_recursive>:
 800eadc:	4770      	bx	lr

0800eade <memcpy>:
 800eade:	440a      	add	r2, r1
 800eae0:	4291      	cmp	r1, r2
 800eae2:	f100 33ff 	add.w	r3, r0, #4294967295
 800eae6:	d100      	bne.n	800eaea <memcpy+0xc>
 800eae8:	4770      	bx	lr
 800eaea:	b510      	push	{r4, lr}
 800eaec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaf4:	4291      	cmp	r1, r2
 800eaf6:	d1f9      	bne.n	800eaec <memcpy+0xe>
 800eaf8:	bd10      	pop	{r4, pc}
	...

0800eafc <nanf>:
 800eafc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb04 <nanf+0x8>
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	7fc00000 	.word	0x7fc00000

0800eb08 <quorem>:
 800eb08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb0c:	6903      	ldr	r3, [r0, #16]
 800eb0e:	690c      	ldr	r4, [r1, #16]
 800eb10:	42a3      	cmp	r3, r4
 800eb12:	4607      	mov	r7, r0
 800eb14:	db7e      	blt.n	800ec14 <quorem+0x10c>
 800eb16:	3c01      	subs	r4, #1
 800eb18:	f101 0814 	add.w	r8, r1, #20
 800eb1c:	00a3      	lsls	r3, r4, #2
 800eb1e:	f100 0514 	add.w	r5, r0, #20
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb32:	3301      	adds	r3, #1
 800eb34:	429a      	cmp	r2, r3
 800eb36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb3a:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb3e:	d32e      	bcc.n	800eb9e <quorem+0x96>
 800eb40:	f04f 0a00 	mov.w	sl, #0
 800eb44:	46c4      	mov	ip, r8
 800eb46:	46ae      	mov	lr, r5
 800eb48:	46d3      	mov	fp, sl
 800eb4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb4e:	b298      	uxth	r0, r3
 800eb50:	fb06 a000 	mla	r0, r6, r0, sl
 800eb54:	0c02      	lsrs	r2, r0, #16
 800eb56:	0c1b      	lsrs	r3, r3, #16
 800eb58:	fb06 2303 	mla	r3, r6, r3, r2
 800eb5c:	f8de 2000 	ldr.w	r2, [lr]
 800eb60:	b280      	uxth	r0, r0
 800eb62:	b292      	uxth	r2, r2
 800eb64:	1a12      	subs	r2, r2, r0
 800eb66:	445a      	add	r2, fp
 800eb68:	f8de 0000 	ldr.w	r0, [lr]
 800eb6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eb76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eb7a:	b292      	uxth	r2, r2
 800eb7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eb80:	45e1      	cmp	r9, ip
 800eb82:	f84e 2b04 	str.w	r2, [lr], #4
 800eb86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eb8a:	d2de      	bcs.n	800eb4a <quorem+0x42>
 800eb8c:	9b00      	ldr	r3, [sp, #0]
 800eb8e:	58eb      	ldr	r3, [r5, r3]
 800eb90:	b92b      	cbnz	r3, 800eb9e <quorem+0x96>
 800eb92:	9b01      	ldr	r3, [sp, #4]
 800eb94:	3b04      	subs	r3, #4
 800eb96:	429d      	cmp	r5, r3
 800eb98:	461a      	mov	r2, r3
 800eb9a:	d32f      	bcc.n	800ebfc <quorem+0xf4>
 800eb9c:	613c      	str	r4, [r7, #16]
 800eb9e:	4638      	mov	r0, r7
 800eba0:	f001 f910 	bl	800fdc4 <__mcmp>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	db25      	blt.n	800ebf4 <quorem+0xec>
 800eba8:	4629      	mov	r1, r5
 800ebaa:	2000      	movs	r0, #0
 800ebac:	f858 2b04 	ldr.w	r2, [r8], #4
 800ebb0:	f8d1 c000 	ldr.w	ip, [r1]
 800ebb4:	fa1f fe82 	uxth.w	lr, r2
 800ebb8:	fa1f f38c 	uxth.w	r3, ip
 800ebbc:	eba3 030e 	sub.w	r3, r3, lr
 800ebc0:	4403      	add	r3, r0
 800ebc2:	0c12      	lsrs	r2, r2, #16
 800ebc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ebc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebd2:	45c1      	cmp	r9, r8
 800ebd4:	f841 3b04 	str.w	r3, [r1], #4
 800ebd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ebdc:	d2e6      	bcs.n	800ebac <quorem+0xa4>
 800ebde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebe6:	b922      	cbnz	r2, 800ebf2 <quorem+0xea>
 800ebe8:	3b04      	subs	r3, #4
 800ebea:	429d      	cmp	r5, r3
 800ebec:	461a      	mov	r2, r3
 800ebee:	d30b      	bcc.n	800ec08 <quorem+0x100>
 800ebf0:	613c      	str	r4, [r7, #16]
 800ebf2:	3601      	adds	r6, #1
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	b003      	add	sp, #12
 800ebf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebfc:	6812      	ldr	r2, [r2, #0]
 800ebfe:	3b04      	subs	r3, #4
 800ec00:	2a00      	cmp	r2, #0
 800ec02:	d1cb      	bne.n	800eb9c <quorem+0x94>
 800ec04:	3c01      	subs	r4, #1
 800ec06:	e7c6      	b.n	800eb96 <quorem+0x8e>
 800ec08:	6812      	ldr	r2, [r2, #0]
 800ec0a:	3b04      	subs	r3, #4
 800ec0c:	2a00      	cmp	r2, #0
 800ec0e:	d1ef      	bne.n	800ebf0 <quorem+0xe8>
 800ec10:	3c01      	subs	r4, #1
 800ec12:	e7ea      	b.n	800ebea <quorem+0xe2>
 800ec14:	2000      	movs	r0, #0
 800ec16:	e7ee      	b.n	800ebf6 <quorem+0xee>

0800ec18 <_dtoa_r>:
 800ec18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec1c:	69c7      	ldr	r7, [r0, #28]
 800ec1e:	b097      	sub	sp, #92	@ 0x5c
 800ec20:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ec24:	ec55 4b10 	vmov	r4, r5, d0
 800ec28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ec2a:	9107      	str	r1, [sp, #28]
 800ec2c:	4681      	mov	r9, r0
 800ec2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec30:	9311      	str	r3, [sp, #68]	@ 0x44
 800ec32:	b97f      	cbnz	r7, 800ec54 <_dtoa_r+0x3c>
 800ec34:	2010      	movs	r0, #16
 800ec36:	f7fe fd7b 	bl	800d730 <malloc>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ec40:	b920      	cbnz	r0, 800ec4c <_dtoa_r+0x34>
 800ec42:	4ba9      	ldr	r3, [pc, #676]	@ (800eee8 <_dtoa_r+0x2d0>)
 800ec44:	21ef      	movs	r1, #239	@ 0xef
 800ec46:	48a9      	ldr	r0, [pc, #676]	@ (800eeec <_dtoa_r+0x2d4>)
 800ec48:	f002 fac2 	bl	80111d0 <__assert_func>
 800ec4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ec50:	6007      	str	r7, [r0, #0]
 800ec52:	60c7      	str	r7, [r0, #12]
 800ec54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ec58:	6819      	ldr	r1, [r3, #0]
 800ec5a:	b159      	cbz	r1, 800ec74 <_dtoa_r+0x5c>
 800ec5c:	685a      	ldr	r2, [r3, #4]
 800ec5e:	604a      	str	r2, [r1, #4]
 800ec60:	2301      	movs	r3, #1
 800ec62:	4093      	lsls	r3, r2
 800ec64:	608b      	str	r3, [r1, #8]
 800ec66:	4648      	mov	r0, r9
 800ec68:	f000 fe30 	bl	800f8cc <_Bfree>
 800ec6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ec70:	2200      	movs	r2, #0
 800ec72:	601a      	str	r2, [r3, #0]
 800ec74:	1e2b      	subs	r3, r5, #0
 800ec76:	bfb9      	ittee	lt
 800ec78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ec7c:	9305      	strlt	r3, [sp, #20]
 800ec7e:	2300      	movge	r3, #0
 800ec80:	6033      	strge	r3, [r6, #0]
 800ec82:	9f05      	ldr	r7, [sp, #20]
 800ec84:	4b9a      	ldr	r3, [pc, #616]	@ (800eef0 <_dtoa_r+0x2d8>)
 800ec86:	bfbc      	itt	lt
 800ec88:	2201      	movlt	r2, #1
 800ec8a:	6032      	strlt	r2, [r6, #0]
 800ec8c:	43bb      	bics	r3, r7
 800ec8e:	d112      	bne.n	800ecb6 <_dtoa_r+0x9e>
 800ec90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ec92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ec96:	6013      	str	r3, [r2, #0]
 800ec98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec9c:	4323      	orrs	r3, r4
 800ec9e:	f000 855a 	beq.w	800f756 <_dtoa_r+0xb3e>
 800eca2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eca4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ef04 <_dtoa_r+0x2ec>
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f000 855c 	beq.w	800f766 <_dtoa_r+0xb4e>
 800ecae:	f10a 0303 	add.w	r3, sl, #3
 800ecb2:	f000 bd56 	b.w	800f762 <_dtoa_r+0xb4a>
 800ecb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	ec51 0b17 	vmov	r0, r1, d7
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ecc6:	f7f1 ff0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ecca:	4680      	mov	r8, r0
 800eccc:	b158      	cbz	r0, 800ece6 <_dtoa_r+0xce>
 800ecce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	6013      	str	r3, [r2, #0]
 800ecd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ecd6:	b113      	cbz	r3, 800ecde <_dtoa_r+0xc6>
 800ecd8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ecda:	4b86      	ldr	r3, [pc, #536]	@ (800eef4 <_dtoa_r+0x2dc>)
 800ecdc:	6013      	str	r3, [r2, #0]
 800ecde:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ef08 <_dtoa_r+0x2f0>
 800ece2:	f000 bd40 	b.w	800f766 <_dtoa_r+0xb4e>
 800ece6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ecea:	aa14      	add	r2, sp, #80	@ 0x50
 800ecec:	a915      	add	r1, sp, #84	@ 0x54
 800ecee:	4648      	mov	r0, r9
 800ecf0:	f001 f988 	bl	8010004 <__d2b>
 800ecf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ecf8:	9002      	str	r0, [sp, #8]
 800ecfa:	2e00      	cmp	r6, #0
 800ecfc:	d078      	beq.n	800edf0 <_dtoa_r+0x1d8>
 800ecfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed00:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ed04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ed0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ed10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ed14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ed18:	4619      	mov	r1, r3
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	4b76      	ldr	r3, [pc, #472]	@ (800eef8 <_dtoa_r+0x2e0>)
 800ed1e:	f7f1 fac3 	bl	80002a8 <__aeabi_dsub>
 800ed22:	a36b      	add	r3, pc, #428	@ (adr r3, 800eed0 <_dtoa_r+0x2b8>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	f7f1 fc76 	bl	8000618 <__aeabi_dmul>
 800ed2c:	a36a      	add	r3, pc, #424	@ (adr r3, 800eed8 <_dtoa_r+0x2c0>)
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f7f1 fabb 	bl	80002ac <__adddf3>
 800ed36:	4604      	mov	r4, r0
 800ed38:	4630      	mov	r0, r6
 800ed3a:	460d      	mov	r5, r1
 800ed3c:	f7f1 fc02 	bl	8000544 <__aeabi_i2d>
 800ed40:	a367      	add	r3, pc, #412	@ (adr r3, 800eee0 <_dtoa_r+0x2c8>)
 800ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed46:	f7f1 fc67 	bl	8000618 <__aeabi_dmul>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4629      	mov	r1, r5
 800ed52:	f7f1 faab 	bl	80002ac <__adddf3>
 800ed56:	4604      	mov	r4, r0
 800ed58:	460d      	mov	r5, r1
 800ed5a:	f7f1 ff0d 	bl	8000b78 <__aeabi_d2iz>
 800ed5e:	2200      	movs	r2, #0
 800ed60:	4607      	mov	r7, r0
 800ed62:	2300      	movs	r3, #0
 800ed64:	4620      	mov	r0, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	f7f1 fec8 	bl	8000afc <__aeabi_dcmplt>
 800ed6c:	b140      	cbz	r0, 800ed80 <_dtoa_r+0x168>
 800ed6e:	4638      	mov	r0, r7
 800ed70:	f7f1 fbe8 	bl	8000544 <__aeabi_i2d>
 800ed74:	4622      	mov	r2, r4
 800ed76:	462b      	mov	r3, r5
 800ed78:	f7f1 feb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed7c:	b900      	cbnz	r0, 800ed80 <_dtoa_r+0x168>
 800ed7e:	3f01      	subs	r7, #1
 800ed80:	2f16      	cmp	r7, #22
 800ed82:	d852      	bhi.n	800ee2a <_dtoa_r+0x212>
 800ed84:	4b5d      	ldr	r3, [pc, #372]	@ (800eefc <_dtoa_r+0x2e4>)
 800ed86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ed92:	f7f1 feb3 	bl	8000afc <__aeabi_dcmplt>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d049      	beq.n	800ee2e <_dtoa_r+0x216>
 800ed9a:	3f01      	subs	r7, #1
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800eda0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eda2:	1b9b      	subs	r3, r3, r6
 800eda4:	1e5a      	subs	r2, r3, #1
 800eda6:	bf45      	ittet	mi
 800eda8:	f1c3 0301 	rsbmi	r3, r3, #1
 800edac:	9300      	strmi	r3, [sp, #0]
 800edae:	2300      	movpl	r3, #0
 800edb0:	2300      	movmi	r3, #0
 800edb2:	9206      	str	r2, [sp, #24]
 800edb4:	bf54      	ite	pl
 800edb6:	9300      	strpl	r3, [sp, #0]
 800edb8:	9306      	strmi	r3, [sp, #24]
 800edba:	2f00      	cmp	r7, #0
 800edbc:	db39      	blt.n	800ee32 <_dtoa_r+0x21a>
 800edbe:	9b06      	ldr	r3, [sp, #24]
 800edc0:	970d      	str	r7, [sp, #52]	@ 0x34
 800edc2:	443b      	add	r3, r7
 800edc4:	9306      	str	r3, [sp, #24]
 800edc6:	2300      	movs	r3, #0
 800edc8:	9308      	str	r3, [sp, #32]
 800edca:	9b07      	ldr	r3, [sp, #28]
 800edcc:	2b09      	cmp	r3, #9
 800edce:	d863      	bhi.n	800ee98 <_dtoa_r+0x280>
 800edd0:	2b05      	cmp	r3, #5
 800edd2:	bfc4      	itt	gt
 800edd4:	3b04      	subgt	r3, #4
 800edd6:	9307      	strgt	r3, [sp, #28]
 800edd8:	9b07      	ldr	r3, [sp, #28]
 800edda:	f1a3 0302 	sub.w	r3, r3, #2
 800edde:	bfcc      	ite	gt
 800ede0:	2400      	movgt	r4, #0
 800ede2:	2401      	movle	r4, #1
 800ede4:	2b03      	cmp	r3, #3
 800ede6:	d863      	bhi.n	800eeb0 <_dtoa_r+0x298>
 800ede8:	e8df f003 	tbb	[pc, r3]
 800edec:	2b375452 	.word	0x2b375452
 800edf0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800edf4:	441e      	add	r6, r3
 800edf6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800edfa:	2b20      	cmp	r3, #32
 800edfc:	bfc1      	itttt	gt
 800edfe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ee02:	409f      	lslgt	r7, r3
 800ee04:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ee08:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ee0c:	bfd6      	itet	le
 800ee0e:	f1c3 0320 	rsble	r3, r3, #32
 800ee12:	ea47 0003 	orrgt.w	r0, r7, r3
 800ee16:	fa04 f003 	lslle.w	r0, r4, r3
 800ee1a:	f7f1 fb83 	bl	8000524 <__aeabi_ui2d>
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ee24:	3e01      	subs	r6, #1
 800ee26:	9212      	str	r2, [sp, #72]	@ 0x48
 800ee28:	e776      	b.n	800ed18 <_dtoa_r+0x100>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e7b7      	b.n	800ed9e <_dtoa_r+0x186>
 800ee2e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ee30:	e7b6      	b.n	800eda0 <_dtoa_r+0x188>
 800ee32:	9b00      	ldr	r3, [sp, #0]
 800ee34:	1bdb      	subs	r3, r3, r7
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	427b      	negs	r3, r7
 800ee3a:	9308      	str	r3, [sp, #32]
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee40:	e7c3      	b.n	800edca <_dtoa_r+0x1b2>
 800ee42:	2301      	movs	r3, #1
 800ee44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee48:	eb07 0b03 	add.w	fp, r7, r3
 800ee4c:	f10b 0301 	add.w	r3, fp, #1
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	9303      	str	r3, [sp, #12]
 800ee54:	bfb8      	it	lt
 800ee56:	2301      	movlt	r3, #1
 800ee58:	e006      	b.n	800ee68 <_dtoa_r+0x250>
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	dd28      	ble.n	800eeb6 <_dtoa_r+0x29e>
 800ee64:	469b      	mov	fp, r3
 800ee66:	9303      	str	r3, [sp, #12]
 800ee68:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	2204      	movs	r2, #4
 800ee70:	f102 0514 	add.w	r5, r2, #20
 800ee74:	429d      	cmp	r5, r3
 800ee76:	d926      	bls.n	800eec6 <_dtoa_r+0x2ae>
 800ee78:	6041      	str	r1, [r0, #4]
 800ee7a:	4648      	mov	r0, r9
 800ee7c:	f000 fce6 	bl	800f84c <_Balloc>
 800ee80:	4682      	mov	sl, r0
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d142      	bne.n	800ef0c <_dtoa_r+0x2f4>
 800ee86:	4b1e      	ldr	r3, [pc, #120]	@ (800ef00 <_dtoa_r+0x2e8>)
 800ee88:	4602      	mov	r2, r0
 800ee8a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ee8e:	e6da      	b.n	800ec46 <_dtoa_r+0x2e>
 800ee90:	2300      	movs	r3, #0
 800ee92:	e7e3      	b.n	800ee5c <_dtoa_r+0x244>
 800ee94:	2300      	movs	r3, #0
 800ee96:	e7d5      	b.n	800ee44 <_dtoa_r+0x22c>
 800ee98:	2401      	movs	r4, #1
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	9307      	str	r3, [sp, #28]
 800ee9e:	9409      	str	r4, [sp, #36]	@ 0x24
 800eea0:	f04f 3bff 	mov.w	fp, #4294967295
 800eea4:	2200      	movs	r2, #0
 800eea6:	f8cd b00c 	str.w	fp, [sp, #12]
 800eeaa:	2312      	movs	r3, #18
 800eeac:	920c      	str	r2, [sp, #48]	@ 0x30
 800eeae:	e7db      	b.n	800ee68 <_dtoa_r+0x250>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eeb4:	e7f4      	b.n	800eea0 <_dtoa_r+0x288>
 800eeb6:	f04f 0b01 	mov.w	fp, #1
 800eeba:	f8cd b00c 	str.w	fp, [sp, #12]
 800eebe:	465b      	mov	r3, fp
 800eec0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800eec4:	e7d0      	b.n	800ee68 <_dtoa_r+0x250>
 800eec6:	3101      	adds	r1, #1
 800eec8:	0052      	lsls	r2, r2, #1
 800eeca:	e7d1      	b.n	800ee70 <_dtoa_r+0x258>
 800eecc:	f3af 8000 	nop.w
 800eed0:	636f4361 	.word	0x636f4361
 800eed4:	3fd287a7 	.word	0x3fd287a7
 800eed8:	8b60c8b3 	.word	0x8b60c8b3
 800eedc:	3fc68a28 	.word	0x3fc68a28
 800eee0:	509f79fb 	.word	0x509f79fb
 800eee4:	3fd34413 	.word	0x3fd34413
 800eee8:	0803cd5b 	.word	0x0803cd5b
 800eeec:	0803cd72 	.word	0x0803cd72
 800eef0:	7ff00000 	.word	0x7ff00000
 800eef4:	0803cd26 	.word	0x0803cd26
 800eef8:	3ff80000 	.word	0x3ff80000
 800eefc:	0803cf20 	.word	0x0803cf20
 800ef00:	0803cdca 	.word	0x0803cdca
 800ef04:	0803cd57 	.word	0x0803cd57
 800ef08:	0803cd25 	.word	0x0803cd25
 800ef0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ef10:	6018      	str	r0, [r3, #0]
 800ef12:	9b03      	ldr	r3, [sp, #12]
 800ef14:	2b0e      	cmp	r3, #14
 800ef16:	f200 80a1 	bhi.w	800f05c <_dtoa_r+0x444>
 800ef1a:	2c00      	cmp	r4, #0
 800ef1c:	f000 809e 	beq.w	800f05c <_dtoa_r+0x444>
 800ef20:	2f00      	cmp	r7, #0
 800ef22:	dd33      	ble.n	800ef8c <_dtoa_r+0x374>
 800ef24:	4b9c      	ldr	r3, [pc, #624]	@ (800f198 <_dtoa_r+0x580>)
 800ef26:	f007 020f 	and.w	r2, r7, #15
 800ef2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef2e:	ed93 7b00 	vldr	d7, [r3]
 800ef32:	05f8      	lsls	r0, r7, #23
 800ef34:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ef38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ef3c:	d516      	bpl.n	800ef6c <_dtoa_r+0x354>
 800ef3e:	4b97      	ldr	r3, [pc, #604]	@ (800f19c <_dtoa_r+0x584>)
 800ef40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ef44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef48:	f7f1 fc90 	bl	800086c <__aeabi_ddiv>
 800ef4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef50:	f004 040f 	and.w	r4, r4, #15
 800ef54:	2603      	movs	r6, #3
 800ef56:	4d91      	ldr	r5, [pc, #580]	@ (800f19c <_dtoa_r+0x584>)
 800ef58:	b954      	cbnz	r4, 800ef70 <_dtoa_r+0x358>
 800ef5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ef5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef62:	f7f1 fc83 	bl	800086c <__aeabi_ddiv>
 800ef66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef6a:	e028      	b.n	800efbe <_dtoa_r+0x3a6>
 800ef6c:	2602      	movs	r6, #2
 800ef6e:	e7f2      	b.n	800ef56 <_dtoa_r+0x33e>
 800ef70:	07e1      	lsls	r1, r4, #31
 800ef72:	d508      	bpl.n	800ef86 <_dtoa_r+0x36e>
 800ef74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ef78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef7c:	f7f1 fb4c 	bl	8000618 <__aeabi_dmul>
 800ef80:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ef84:	3601      	adds	r6, #1
 800ef86:	1064      	asrs	r4, r4, #1
 800ef88:	3508      	adds	r5, #8
 800ef8a:	e7e5      	b.n	800ef58 <_dtoa_r+0x340>
 800ef8c:	f000 80af 	beq.w	800f0ee <_dtoa_r+0x4d6>
 800ef90:	427c      	negs	r4, r7
 800ef92:	4b81      	ldr	r3, [pc, #516]	@ (800f198 <_dtoa_r+0x580>)
 800ef94:	4d81      	ldr	r5, [pc, #516]	@ (800f19c <_dtoa_r+0x584>)
 800ef96:	f004 020f 	and.w	r2, r4, #15
 800ef9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800efa6:	f7f1 fb37 	bl	8000618 <__aeabi_dmul>
 800efaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efae:	1124      	asrs	r4, r4, #4
 800efb0:	2300      	movs	r3, #0
 800efb2:	2602      	movs	r6, #2
 800efb4:	2c00      	cmp	r4, #0
 800efb6:	f040 808f 	bne.w	800f0d8 <_dtoa_r+0x4c0>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1d3      	bne.n	800ef66 <_dtoa_r+0x34e>
 800efbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efc0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f000 8094 	beq.w	800f0f2 <_dtoa_r+0x4da>
 800efca:	4b75      	ldr	r3, [pc, #468]	@ (800f1a0 <_dtoa_r+0x588>)
 800efcc:	2200      	movs	r2, #0
 800efce:	4620      	mov	r0, r4
 800efd0:	4629      	mov	r1, r5
 800efd2:	f7f1 fd93 	bl	8000afc <__aeabi_dcmplt>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	f000 808b 	beq.w	800f0f2 <_dtoa_r+0x4da>
 800efdc:	9b03      	ldr	r3, [sp, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f000 8087 	beq.w	800f0f2 <_dtoa_r+0x4da>
 800efe4:	f1bb 0f00 	cmp.w	fp, #0
 800efe8:	dd34      	ble.n	800f054 <_dtoa_r+0x43c>
 800efea:	4620      	mov	r0, r4
 800efec:	4b6d      	ldr	r3, [pc, #436]	@ (800f1a4 <_dtoa_r+0x58c>)
 800efee:	2200      	movs	r2, #0
 800eff0:	4629      	mov	r1, r5
 800eff2:	f7f1 fb11 	bl	8000618 <__aeabi_dmul>
 800eff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800effa:	f107 38ff 	add.w	r8, r7, #4294967295
 800effe:	3601      	adds	r6, #1
 800f000:	465c      	mov	r4, fp
 800f002:	4630      	mov	r0, r6
 800f004:	f7f1 fa9e 	bl	8000544 <__aeabi_i2d>
 800f008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f00c:	f7f1 fb04 	bl	8000618 <__aeabi_dmul>
 800f010:	4b65      	ldr	r3, [pc, #404]	@ (800f1a8 <_dtoa_r+0x590>)
 800f012:	2200      	movs	r2, #0
 800f014:	f7f1 f94a 	bl	80002ac <__adddf3>
 800f018:	4605      	mov	r5, r0
 800f01a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f01e:	2c00      	cmp	r4, #0
 800f020:	d16a      	bne.n	800f0f8 <_dtoa_r+0x4e0>
 800f022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f026:	4b61      	ldr	r3, [pc, #388]	@ (800f1ac <_dtoa_r+0x594>)
 800f028:	2200      	movs	r2, #0
 800f02a:	f7f1 f93d 	bl	80002a8 <__aeabi_dsub>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f036:	462a      	mov	r2, r5
 800f038:	4633      	mov	r3, r6
 800f03a:	f7f1 fd7d 	bl	8000b38 <__aeabi_dcmpgt>
 800f03e:	2800      	cmp	r0, #0
 800f040:	f040 8298 	bne.w	800f574 <_dtoa_r+0x95c>
 800f044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f048:	462a      	mov	r2, r5
 800f04a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f04e:	f7f1 fd55 	bl	8000afc <__aeabi_dcmplt>
 800f052:	bb38      	cbnz	r0, 800f0a4 <_dtoa_r+0x48c>
 800f054:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f058:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f05c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f05e:	2b00      	cmp	r3, #0
 800f060:	f2c0 8157 	blt.w	800f312 <_dtoa_r+0x6fa>
 800f064:	2f0e      	cmp	r7, #14
 800f066:	f300 8154 	bgt.w	800f312 <_dtoa_r+0x6fa>
 800f06a:	4b4b      	ldr	r3, [pc, #300]	@ (800f198 <_dtoa_r+0x580>)
 800f06c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f070:	ed93 7b00 	vldr	d7, [r3]
 800f074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f076:	2b00      	cmp	r3, #0
 800f078:	ed8d 7b00 	vstr	d7, [sp]
 800f07c:	f280 80e5 	bge.w	800f24a <_dtoa_r+0x632>
 800f080:	9b03      	ldr	r3, [sp, #12]
 800f082:	2b00      	cmp	r3, #0
 800f084:	f300 80e1 	bgt.w	800f24a <_dtoa_r+0x632>
 800f088:	d10c      	bne.n	800f0a4 <_dtoa_r+0x48c>
 800f08a:	4b48      	ldr	r3, [pc, #288]	@ (800f1ac <_dtoa_r+0x594>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	ec51 0b17 	vmov	r0, r1, d7
 800f092:	f7f1 fac1 	bl	8000618 <__aeabi_dmul>
 800f096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f09a:	f7f1 fd43 	bl	8000b24 <__aeabi_dcmpge>
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	f000 8266 	beq.w	800f570 <_dtoa_r+0x958>
 800f0a4:	2400      	movs	r4, #0
 800f0a6:	4625      	mov	r5, r4
 800f0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0aa:	4656      	mov	r6, sl
 800f0ac:	ea6f 0803 	mvn.w	r8, r3
 800f0b0:	2700      	movs	r7, #0
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	4648      	mov	r0, r9
 800f0b6:	f000 fc09 	bl	800f8cc <_Bfree>
 800f0ba:	2d00      	cmp	r5, #0
 800f0bc:	f000 80bd 	beq.w	800f23a <_dtoa_r+0x622>
 800f0c0:	b12f      	cbz	r7, 800f0ce <_dtoa_r+0x4b6>
 800f0c2:	42af      	cmp	r7, r5
 800f0c4:	d003      	beq.n	800f0ce <_dtoa_r+0x4b6>
 800f0c6:	4639      	mov	r1, r7
 800f0c8:	4648      	mov	r0, r9
 800f0ca:	f000 fbff 	bl	800f8cc <_Bfree>
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	4648      	mov	r0, r9
 800f0d2:	f000 fbfb 	bl	800f8cc <_Bfree>
 800f0d6:	e0b0      	b.n	800f23a <_dtoa_r+0x622>
 800f0d8:	07e2      	lsls	r2, r4, #31
 800f0da:	d505      	bpl.n	800f0e8 <_dtoa_r+0x4d0>
 800f0dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0e0:	f7f1 fa9a 	bl	8000618 <__aeabi_dmul>
 800f0e4:	3601      	adds	r6, #1
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	1064      	asrs	r4, r4, #1
 800f0ea:	3508      	adds	r5, #8
 800f0ec:	e762      	b.n	800efb4 <_dtoa_r+0x39c>
 800f0ee:	2602      	movs	r6, #2
 800f0f0:	e765      	b.n	800efbe <_dtoa_r+0x3a6>
 800f0f2:	9c03      	ldr	r4, [sp, #12]
 800f0f4:	46b8      	mov	r8, r7
 800f0f6:	e784      	b.n	800f002 <_dtoa_r+0x3ea>
 800f0f8:	4b27      	ldr	r3, [pc, #156]	@ (800f198 <_dtoa_r+0x580>)
 800f0fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f100:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f104:	4454      	add	r4, sl
 800f106:	2900      	cmp	r1, #0
 800f108:	d054      	beq.n	800f1b4 <_dtoa_r+0x59c>
 800f10a:	4929      	ldr	r1, [pc, #164]	@ (800f1b0 <_dtoa_r+0x598>)
 800f10c:	2000      	movs	r0, #0
 800f10e:	f7f1 fbad 	bl	800086c <__aeabi_ddiv>
 800f112:	4633      	mov	r3, r6
 800f114:	462a      	mov	r2, r5
 800f116:	f7f1 f8c7 	bl	80002a8 <__aeabi_dsub>
 800f11a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f11e:	4656      	mov	r6, sl
 800f120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f124:	f7f1 fd28 	bl	8000b78 <__aeabi_d2iz>
 800f128:	4605      	mov	r5, r0
 800f12a:	f7f1 fa0b 	bl	8000544 <__aeabi_i2d>
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f136:	f7f1 f8b7 	bl	80002a8 <__aeabi_dsub>
 800f13a:	3530      	adds	r5, #48	@ 0x30
 800f13c:	4602      	mov	r2, r0
 800f13e:	460b      	mov	r3, r1
 800f140:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f144:	f806 5b01 	strb.w	r5, [r6], #1
 800f148:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f14c:	f7f1 fcd6 	bl	8000afc <__aeabi_dcmplt>
 800f150:	2800      	cmp	r0, #0
 800f152:	d172      	bne.n	800f23a <_dtoa_r+0x622>
 800f154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f158:	4911      	ldr	r1, [pc, #68]	@ (800f1a0 <_dtoa_r+0x588>)
 800f15a:	2000      	movs	r0, #0
 800f15c:	f7f1 f8a4 	bl	80002a8 <__aeabi_dsub>
 800f160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f164:	f7f1 fcca 	bl	8000afc <__aeabi_dcmplt>
 800f168:	2800      	cmp	r0, #0
 800f16a:	f040 80b4 	bne.w	800f2d6 <_dtoa_r+0x6be>
 800f16e:	42a6      	cmp	r6, r4
 800f170:	f43f af70 	beq.w	800f054 <_dtoa_r+0x43c>
 800f174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f178:	4b0a      	ldr	r3, [pc, #40]	@ (800f1a4 <_dtoa_r+0x58c>)
 800f17a:	2200      	movs	r2, #0
 800f17c:	f7f1 fa4c 	bl	8000618 <__aeabi_dmul>
 800f180:	4b08      	ldr	r3, [pc, #32]	@ (800f1a4 <_dtoa_r+0x58c>)
 800f182:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f186:	2200      	movs	r2, #0
 800f188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f18c:	f7f1 fa44 	bl	8000618 <__aeabi_dmul>
 800f190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f194:	e7c4      	b.n	800f120 <_dtoa_r+0x508>
 800f196:	bf00      	nop
 800f198:	0803cf20 	.word	0x0803cf20
 800f19c:	0803cef8 	.word	0x0803cef8
 800f1a0:	3ff00000 	.word	0x3ff00000
 800f1a4:	40240000 	.word	0x40240000
 800f1a8:	401c0000 	.word	0x401c0000
 800f1ac:	40140000 	.word	0x40140000
 800f1b0:	3fe00000 	.word	0x3fe00000
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f7f1 fa2e 	bl	8000618 <__aeabi_dmul>
 800f1bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f1c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f1c2:	4656      	mov	r6, sl
 800f1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1c8:	f7f1 fcd6 	bl	8000b78 <__aeabi_d2iz>
 800f1cc:	4605      	mov	r5, r0
 800f1ce:	f7f1 f9b9 	bl	8000544 <__aeabi_i2d>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1da:	f7f1 f865 	bl	80002a8 <__aeabi_dsub>
 800f1de:	3530      	adds	r5, #48	@ 0x30
 800f1e0:	f806 5b01 	strb.w	r5, [r6], #1
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	42a6      	cmp	r6, r4
 800f1ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f1ee:	f04f 0200 	mov.w	r2, #0
 800f1f2:	d124      	bne.n	800f23e <_dtoa_r+0x626>
 800f1f4:	4baf      	ldr	r3, [pc, #700]	@ (800f4b4 <_dtoa_r+0x89c>)
 800f1f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f1fa:	f7f1 f857 	bl	80002ac <__adddf3>
 800f1fe:	4602      	mov	r2, r0
 800f200:	460b      	mov	r3, r1
 800f202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f206:	f7f1 fc97 	bl	8000b38 <__aeabi_dcmpgt>
 800f20a:	2800      	cmp	r0, #0
 800f20c:	d163      	bne.n	800f2d6 <_dtoa_r+0x6be>
 800f20e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f212:	49a8      	ldr	r1, [pc, #672]	@ (800f4b4 <_dtoa_r+0x89c>)
 800f214:	2000      	movs	r0, #0
 800f216:	f7f1 f847 	bl	80002a8 <__aeabi_dsub>
 800f21a:	4602      	mov	r2, r0
 800f21c:	460b      	mov	r3, r1
 800f21e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f222:	f7f1 fc6b 	bl	8000afc <__aeabi_dcmplt>
 800f226:	2800      	cmp	r0, #0
 800f228:	f43f af14 	beq.w	800f054 <_dtoa_r+0x43c>
 800f22c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f22e:	1e73      	subs	r3, r6, #1
 800f230:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f232:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f236:	2b30      	cmp	r3, #48	@ 0x30
 800f238:	d0f8      	beq.n	800f22c <_dtoa_r+0x614>
 800f23a:	4647      	mov	r7, r8
 800f23c:	e03b      	b.n	800f2b6 <_dtoa_r+0x69e>
 800f23e:	4b9e      	ldr	r3, [pc, #632]	@ (800f4b8 <_dtoa_r+0x8a0>)
 800f240:	f7f1 f9ea 	bl	8000618 <__aeabi_dmul>
 800f244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f248:	e7bc      	b.n	800f1c4 <_dtoa_r+0x5ac>
 800f24a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f24e:	4656      	mov	r6, sl
 800f250:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f254:	4620      	mov	r0, r4
 800f256:	4629      	mov	r1, r5
 800f258:	f7f1 fb08 	bl	800086c <__aeabi_ddiv>
 800f25c:	f7f1 fc8c 	bl	8000b78 <__aeabi_d2iz>
 800f260:	4680      	mov	r8, r0
 800f262:	f7f1 f96f 	bl	8000544 <__aeabi_i2d>
 800f266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f26a:	f7f1 f9d5 	bl	8000618 <__aeabi_dmul>
 800f26e:	4602      	mov	r2, r0
 800f270:	460b      	mov	r3, r1
 800f272:	4620      	mov	r0, r4
 800f274:	4629      	mov	r1, r5
 800f276:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f27a:	f7f1 f815 	bl	80002a8 <__aeabi_dsub>
 800f27e:	f806 4b01 	strb.w	r4, [r6], #1
 800f282:	9d03      	ldr	r5, [sp, #12]
 800f284:	eba6 040a 	sub.w	r4, r6, sl
 800f288:	42a5      	cmp	r5, r4
 800f28a:	4602      	mov	r2, r0
 800f28c:	460b      	mov	r3, r1
 800f28e:	d133      	bne.n	800f2f8 <_dtoa_r+0x6e0>
 800f290:	f7f1 f80c 	bl	80002ac <__adddf3>
 800f294:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f298:	4604      	mov	r4, r0
 800f29a:	460d      	mov	r5, r1
 800f29c:	f7f1 fc4c 	bl	8000b38 <__aeabi_dcmpgt>
 800f2a0:	b9c0      	cbnz	r0, 800f2d4 <_dtoa_r+0x6bc>
 800f2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	f7f1 fc1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f2ae:	b110      	cbz	r0, 800f2b6 <_dtoa_r+0x69e>
 800f2b0:	f018 0f01 	tst.w	r8, #1
 800f2b4:	d10e      	bne.n	800f2d4 <_dtoa_r+0x6bc>
 800f2b6:	9902      	ldr	r1, [sp, #8]
 800f2b8:	4648      	mov	r0, r9
 800f2ba:	f000 fb07 	bl	800f8cc <_Bfree>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	7033      	strb	r3, [r6, #0]
 800f2c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f2c4:	3701      	adds	r7, #1
 800f2c6:	601f      	str	r7, [r3, #0]
 800f2c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f000 824b 	beq.w	800f766 <_dtoa_r+0xb4e>
 800f2d0:	601e      	str	r6, [r3, #0]
 800f2d2:	e248      	b.n	800f766 <_dtoa_r+0xb4e>
 800f2d4:	46b8      	mov	r8, r7
 800f2d6:	4633      	mov	r3, r6
 800f2d8:	461e      	mov	r6, r3
 800f2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2de:	2a39      	cmp	r2, #57	@ 0x39
 800f2e0:	d106      	bne.n	800f2f0 <_dtoa_r+0x6d8>
 800f2e2:	459a      	cmp	sl, r3
 800f2e4:	d1f8      	bne.n	800f2d8 <_dtoa_r+0x6c0>
 800f2e6:	2230      	movs	r2, #48	@ 0x30
 800f2e8:	f108 0801 	add.w	r8, r8, #1
 800f2ec:	f88a 2000 	strb.w	r2, [sl]
 800f2f0:	781a      	ldrb	r2, [r3, #0]
 800f2f2:	3201      	adds	r2, #1
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	e7a0      	b.n	800f23a <_dtoa_r+0x622>
 800f2f8:	4b6f      	ldr	r3, [pc, #444]	@ (800f4b8 <_dtoa_r+0x8a0>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f7f1 f98c 	bl	8000618 <__aeabi_dmul>
 800f300:	2200      	movs	r2, #0
 800f302:	2300      	movs	r3, #0
 800f304:	4604      	mov	r4, r0
 800f306:	460d      	mov	r5, r1
 800f308:	f7f1 fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d09f      	beq.n	800f250 <_dtoa_r+0x638>
 800f310:	e7d1      	b.n	800f2b6 <_dtoa_r+0x69e>
 800f312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f314:	2a00      	cmp	r2, #0
 800f316:	f000 80ea 	beq.w	800f4ee <_dtoa_r+0x8d6>
 800f31a:	9a07      	ldr	r2, [sp, #28]
 800f31c:	2a01      	cmp	r2, #1
 800f31e:	f300 80cd 	bgt.w	800f4bc <_dtoa_r+0x8a4>
 800f322:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f324:	2a00      	cmp	r2, #0
 800f326:	f000 80c1 	beq.w	800f4ac <_dtoa_r+0x894>
 800f32a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f32e:	9c08      	ldr	r4, [sp, #32]
 800f330:	9e00      	ldr	r6, [sp, #0]
 800f332:	9a00      	ldr	r2, [sp, #0]
 800f334:	441a      	add	r2, r3
 800f336:	9200      	str	r2, [sp, #0]
 800f338:	9a06      	ldr	r2, [sp, #24]
 800f33a:	2101      	movs	r1, #1
 800f33c:	441a      	add	r2, r3
 800f33e:	4648      	mov	r0, r9
 800f340:	9206      	str	r2, [sp, #24]
 800f342:	f000 fbc1 	bl	800fac8 <__i2b>
 800f346:	4605      	mov	r5, r0
 800f348:	b166      	cbz	r6, 800f364 <_dtoa_r+0x74c>
 800f34a:	9b06      	ldr	r3, [sp, #24]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	dd09      	ble.n	800f364 <_dtoa_r+0x74c>
 800f350:	42b3      	cmp	r3, r6
 800f352:	9a00      	ldr	r2, [sp, #0]
 800f354:	bfa8      	it	ge
 800f356:	4633      	movge	r3, r6
 800f358:	1ad2      	subs	r2, r2, r3
 800f35a:	9200      	str	r2, [sp, #0]
 800f35c:	9a06      	ldr	r2, [sp, #24]
 800f35e:	1af6      	subs	r6, r6, r3
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	9306      	str	r3, [sp, #24]
 800f364:	9b08      	ldr	r3, [sp, #32]
 800f366:	b30b      	cbz	r3, 800f3ac <_dtoa_r+0x794>
 800f368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	f000 80c6 	beq.w	800f4fc <_dtoa_r+0x8e4>
 800f370:	2c00      	cmp	r4, #0
 800f372:	f000 80c0 	beq.w	800f4f6 <_dtoa_r+0x8de>
 800f376:	4629      	mov	r1, r5
 800f378:	4622      	mov	r2, r4
 800f37a:	4648      	mov	r0, r9
 800f37c:	f000 fc5c 	bl	800fc38 <__pow5mult>
 800f380:	9a02      	ldr	r2, [sp, #8]
 800f382:	4601      	mov	r1, r0
 800f384:	4605      	mov	r5, r0
 800f386:	4648      	mov	r0, r9
 800f388:	f000 fbb4 	bl	800faf4 <__multiply>
 800f38c:	9902      	ldr	r1, [sp, #8]
 800f38e:	4680      	mov	r8, r0
 800f390:	4648      	mov	r0, r9
 800f392:	f000 fa9b 	bl	800f8cc <_Bfree>
 800f396:	9b08      	ldr	r3, [sp, #32]
 800f398:	1b1b      	subs	r3, r3, r4
 800f39a:	9308      	str	r3, [sp, #32]
 800f39c:	f000 80b1 	beq.w	800f502 <_dtoa_r+0x8ea>
 800f3a0:	9a08      	ldr	r2, [sp, #32]
 800f3a2:	4641      	mov	r1, r8
 800f3a4:	4648      	mov	r0, r9
 800f3a6:	f000 fc47 	bl	800fc38 <__pow5mult>
 800f3aa:	9002      	str	r0, [sp, #8]
 800f3ac:	2101      	movs	r1, #1
 800f3ae:	4648      	mov	r0, r9
 800f3b0:	f000 fb8a 	bl	800fac8 <__i2b>
 800f3b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f000 81d8 	beq.w	800f76e <_dtoa_r+0xb56>
 800f3be:	461a      	mov	r2, r3
 800f3c0:	4601      	mov	r1, r0
 800f3c2:	4648      	mov	r0, r9
 800f3c4:	f000 fc38 	bl	800fc38 <__pow5mult>
 800f3c8:	9b07      	ldr	r3, [sp, #28]
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	f300 809f 	bgt.w	800f510 <_dtoa_r+0x8f8>
 800f3d2:	9b04      	ldr	r3, [sp, #16]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f040 8097 	bne.w	800f508 <_dtoa_r+0x8f0>
 800f3da:	9b05      	ldr	r3, [sp, #20]
 800f3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f040 8093 	bne.w	800f50c <_dtoa_r+0x8f4>
 800f3e6:	9b05      	ldr	r3, [sp, #20]
 800f3e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f3ec:	0d1b      	lsrs	r3, r3, #20
 800f3ee:	051b      	lsls	r3, r3, #20
 800f3f0:	b133      	cbz	r3, 800f400 <_dtoa_r+0x7e8>
 800f3f2:	9b00      	ldr	r3, [sp, #0]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	9b06      	ldr	r3, [sp, #24]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	9306      	str	r3, [sp, #24]
 800f3fe:	2301      	movs	r3, #1
 800f400:	9308      	str	r3, [sp, #32]
 800f402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f404:	2b00      	cmp	r3, #0
 800f406:	f000 81b8 	beq.w	800f77a <_dtoa_r+0xb62>
 800f40a:	6923      	ldr	r3, [r4, #16]
 800f40c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f410:	6918      	ldr	r0, [r3, #16]
 800f412:	f000 fb0d 	bl	800fa30 <__hi0bits>
 800f416:	f1c0 0020 	rsb	r0, r0, #32
 800f41a:	9b06      	ldr	r3, [sp, #24]
 800f41c:	4418      	add	r0, r3
 800f41e:	f010 001f 	ands.w	r0, r0, #31
 800f422:	f000 8082 	beq.w	800f52a <_dtoa_r+0x912>
 800f426:	f1c0 0320 	rsb	r3, r0, #32
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	dd73      	ble.n	800f516 <_dtoa_r+0x8fe>
 800f42e:	9b00      	ldr	r3, [sp, #0]
 800f430:	f1c0 001c 	rsb	r0, r0, #28
 800f434:	4403      	add	r3, r0
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	9b06      	ldr	r3, [sp, #24]
 800f43a:	4403      	add	r3, r0
 800f43c:	4406      	add	r6, r0
 800f43e:	9306      	str	r3, [sp, #24]
 800f440:	9b00      	ldr	r3, [sp, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	dd05      	ble.n	800f452 <_dtoa_r+0x83a>
 800f446:	9902      	ldr	r1, [sp, #8]
 800f448:	461a      	mov	r2, r3
 800f44a:	4648      	mov	r0, r9
 800f44c:	f000 fc4e 	bl	800fcec <__lshift>
 800f450:	9002      	str	r0, [sp, #8]
 800f452:	9b06      	ldr	r3, [sp, #24]
 800f454:	2b00      	cmp	r3, #0
 800f456:	dd05      	ble.n	800f464 <_dtoa_r+0x84c>
 800f458:	4621      	mov	r1, r4
 800f45a:	461a      	mov	r2, r3
 800f45c:	4648      	mov	r0, r9
 800f45e:	f000 fc45 	bl	800fcec <__lshift>
 800f462:	4604      	mov	r4, r0
 800f464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f466:	2b00      	cmp	r3, #0
 800f468:	d061      	beq.n	800f52e <_dtoa_r+0x916>
 800f46a:	9802      	ldr	r0, [sp, #8]
 800f46c:	4621      	mov	r1, r4
 800f46e:	f000 fca9 	bl	800fdc4 <__mcmp>
 800f472:	2800      	cmp	r0, #0
 800f474:	da5b      	bge.n	800f52e <_dtoa_r+0x916>
 800f476:	2300      	movs	r3, #0
 800f478:	9902      	ldr	r1, [sp, #8]
 800f47a:	220a      	movs	r2, #10
 800f47c:	4648      	mov	r0, r9
 800f47e:	f000 fa47 	bl	800f910 <__multadd>
 800f482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f484:	9002      	str	r0, [sp, #8]
 800f486:	f107 38ff 	add.w	r8, r7, #4294967295
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f000 8177 	beq.w	800f77e <_dtoa_r+0xb66>
 800f490:	4629      	mov	r1, r5
 800f492:	2300      	movs	r3, #0
 800f494:	220a      	movs	r2, #10
 800f496:	4648      	mov	r0, r9
 800f498:	f000 fa3a 	bl	800f910 <__multadd>
 800f49c:	f1bb 0f00 	cmp.w	fp, #0
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	dc6f      	bgt.n	800f584 <_dtoa_r+0x96c>
 800f4a4:	9b07      	ldr	r3, [sp, #28]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	dc49      	bgt.n	800f53e <_dtoa_r+0x926>
 800f4aa:	e06b      	b.n	800f584 <_dtoa_r+0x96c>
 800f4ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f4ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f4b2:	e73c      	b.n	800f32e <_dtoa_r+0x716>
 800f4b4:	3fe00000 	.word	0x3fe00000
 800f4b8:	40240000 	.word	0x40240000
 800f4bc:	9b03      	ldr	r3, [sp, #12]
 800f4be:	1e5c      	subs	r4, r3, #1
 800f4c0:	9b08      	ldr	r3, [sp, #32]
 800f4c2:	42a3      	cmp	r3, r4
 800f4c4:	db09      	blt.n	800f4da <_dtoa_r+0x8c2>
 800f4c6:	1b1c      	subs	r4, r3, r4
 800f4c8:	9b03      	ldr	r3, [sp, #12]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f6bf af30 	bge.w	800f330 <_dtoa_r+0x718>
 800f4d0:	9b00      	ldr	r3, [sp, #0]
 800f4d2:	9a03      	ldr	r2, [sp, #12]
 800f4d4:	1a9e      	subs	r6, r3, r2
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e72b      	b.n	800f332 <_dtoa_r+0x71a>
 800f4da:	9b08      	ldr	r3, [sp, #32]
 800f4dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4de:	9408      	str	r4, [sp, #32]
 800f4e0:	1ae3      	subs	r3, r4, r3
 800f4e2:	441a      	add	r2, r3
 800f4e4:	9e00      	ldr	r6, [sp, #0]
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	920d      	str	r2, [sp, #52]	@ 0x34
 800f4ea:	2400      	movs	r4, #0
 800f4ec:	e721      	b.n	800f332 <_dtoa_r+0x71a>
 800f4ee:	9c08      	ldr	r4, [sp, #32]
 800f4f0:	9e00      	ldr	r6, [sp, #0]
 800f4f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f4f4:	e728      	b.n	800f348 <_dtoa_r+0x730>
 800f4f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f4fa:	e751      	b.n	800f3a0 <_dtoa_r+0x788>
 800f4fc:	9a08      	ldr	r2, [sp, #32]
 800f4fe:	9902      	ldr	r1, [sp, #8]
 800f500:	e750      	b.n	800f3a4 <_dtoa_r+0x78c>
 800f502:	f8cd 8008 	str.w	r8, [sp, #8]
 800f506:	e751      	b.n	800f3ac <_dtoa_r+0x794>
 800f508:	2300      	movs	r3, #0
 800f50a:	e779      	b.n	800f400 <_dtoa_r+0x7e8>
 800f50c:	9b04      	ldr	r3, [sp, #16]
 800f50e:	e777      	b.n	800f400 <_dtoa_r+0x7e8>
 800f510:	2300      	movs	r3, #0
 800f512:	9308      	str	r3, [sp, #32]
 800f514:	e779      	b.n	800f40a <_dtoa_r+0x7f2>
 800f516:	d093      	beq.n	800f440 <_dtoa_r+0x828>
 800f518:	9a00      	ldr	r2, [sp, #0]
 800f51a:	331c      	adds	r3, #28
 800f51c:	441a      	add	r2, r3
 800f51e:	9200      	str	r2, [sp, #0]
 800f520:	9a06      	ldr	r2, [sp, #24]
 800f522:	441a      	add	r2, r3
 800f524:	441e      	add	r6, r3
 800f526:	9206      	str	r2, [sp, #24]
 800f528:	e78a      	b.n	800f440 <_dtoa_r+0x828>
 800f52a:	4603      	mov	r3, r0
 800f52c:	e7f4      	b.n	800f518 <_dtoa_r+0x900>
 800f52e:	9b03      	ldr	r3, [sp, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	46b8      	mov	r8, r7
 800f534:	dc20      	bgt.n	800f578 <_dtoa_r+0x960>
 800f536:	469b      	mov	fp, r3
 800f538:	9b07      	ldr	r3, [sp, #28]
 800f53a:	2b02      	cmp	r3, #2
 800f53c:	dd1e      	ble.n	800f57c <_dtoa_r+0x964>
 800f53e:	f1bb 0f00 	cmp.w	fp, #0
 800f542:	f47f adb1 	bne.w	800f0a8 <_dtoa_r+0x490>
 800f546:	4621      	mov	r1, r4
 800f548:	465b      	mov	r3, fp
 800f54a:	2205      	movs	r2, #5
 800f54c:	4648      	mov	r0, r9
 800f54e:	f000 f9df 	bl	800f910 <__multadd>
 800f552:	4601      	mov	r1, r0
 800f554:	4604      	mov	r4, r0
 800f556:	9802      	ldr	r0, [sp, #8]
 800f558:	f000 fc34 	bl	800fdc4 <__mcmp>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	f77f ada3 	ble.w	800f0a8 <_dtoa_r+0x490>
 800f562:	4656      	mov	r6, sl
 800f564:	2331      	movs	r3, #49	@ 0x31
 800f566:	f806 3b01 	strb.w	r3, [r6], #1
 800f56a:	f108 0801 	add.w	r8, r8, #1
 800f56e:	e59f      	b.n	800f0b0 <_dtoa_r+0x498>
 800f570:	9c03      	ldr	r4, [sp, #12]
 800f572:	46b8      	mov	r8, r7
 800f574:	4625      	mov	r5, r4
 800f576:	e7f4      	b.n	800f562 <_dtoa_r+0x94a>
 800f578:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f000 8101 	beq.w	800f786 <_dtoa_r+0xb6e>
 800f584:	2e00      	cmp	r6, #0
 800f586:	dd05      	ble.n	800f594 <_dtoa_r+0x97c>
 800f588:	4629      	mov	r1, r5
 800f58a:	4632      	mov	r2, r6
 800f58c:	4648      	mov	r0, r9
 800f58e:	f000 fbad 	bl	800fcec <__lshift>
 800f592:	4605      	mov	r5, r0
 800f594:	9b08      	ldr	r3, [sp, #32]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d05c      	beq.n	800f654 <_dtoa_r+0xa3c>
 800f59a:	6869      	ldr	r1, [r5, #4]
 800f59c:	4648      	mov	r0, r9
 800f59e:	f000 f955 	bl	800f84c <_Balloc>
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	b928      	cbnz	r0, 800f5b2 <_dtoa_r+0x99a>
 800f5a6:	4b82      	ldr	r3, [pc, #520]	@ (800f7b0 <_dtoa_r+0xb98>)
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f5ae:	f7ff bb4a 	b.w	800ec46 <_dtoa_r+0x2e>
 800f5b2:	692a      	ldr	r2, [r5, #16]
 800f5b4:	3202      	adds	r2, #2
 800f5b6:	0092      	lsls	r2, r2, #2
 800f5b8:	f105 010c 	add.w	r1, r5, #12
 800f5bc:	300c      	adds	r0, #12
 800f5be:	f7ff fa8e 	bl	800eade <memcpy>
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	4631      	mov	r1, r6
 800f5c6:	4648      	mov	r0, r9
 800f5c8:	f000 fb90 	bl	800fcec <__lshift>
 800f5cc:	f10a 0301 	add.w	r3, sl, #1
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	eb0a 030b 	add.w	r3, sl, fp
 800f5d6:	9308      	str	r3, [sp, #32]
 800f5d8:	9b04      	ldr	r3, [sp, #16]
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	462f      	mov	r7, r5
 800f5e0:	9306      	str	r3, [sp, #24]
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	9b00      	ldr	r3, [sp, #0]
 800f5e6:	9802      	ldr	r0, [sp, #8]
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800f5ee:	f7ff fa8b 	bl	800eb08 <quorem>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	3330      	adds	r3, #48	@ 0x30
 800f5f6:	9003      	str	r0, [sp, #12]
 800f5f8:	4639      	mov	r1, r7
 800f5fa:	9802      	ldr	r0, [sp, #8]
 800f5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5fe:	f000 fbe1 	bl	800fdc4 <__mcmp>
 800f602:	462a      	mov	r2, r5
 800f604:	9004      	str	r0, [sp, #16]
 800f606:	4621      	mov	r1, r4
 800f608:	4648      	mov	r0, r9
 800f60a:	f000 fbf7 	bl	800fdfc <__mdiff>
 800f60e:	68c2      	ldr	r2, [r0, #12]
 800f610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f612:	4606      	mov	r6, r0
 800f614:	bb02      	cbnz	r2, 800f658 <_dtoa_r+0xa40>
 800f616:	4601      	mov	r1, r0
 800f618:	9802      	ldr	r0, [sp, #8]
 800f61a:	f000 fbd3 	bl	800fdc4 <__mcmp>
 800f61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f620:	4602      	mov	r2, r0
 800f622:	4631      	mov	r1, r6
 800f624:	4648      	mov	r0, r9
 800f626:	920c      	str	r2, [sp, #48]	@ 0x30
 800f628:	9309      	str	r3, [sp, #36]	@ 0x24
 800f62a:	f000 f94f 	bl	800f8cc <_Bfree>
 800f62e:	9b07      	ldr	r3, [sp, #28]
 800f630:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f632:	9e00      	ldr	r6, [sp, #0]
 800f634:	ea42 0103 	orr.w	r1, r2, r3
 800f638:	9b06      	ldr	r3, [sp, #24]
 800f63a:	4319      	orrs	r1, r3
 800f63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f63e:	d10d      	bne.n	800f65c <_dtoa_r+0xa44>
 800f640:	2b39      	cmp	r3, #57	@ 0x39
 800f642:	d027      	beq.n	800f694 <_dtoa_r+0xa7c>
 800f644:	9a04      	ldr	r2, [sp, #16]
 800f646:	2a00      	cmp	r2, #0
 800f648:	dd01      	ble.n	800f64e <_dtoa_r+0xa36>
 800f64a:	9b03      	ldr	r3, [sp, #12]
 800f64c:	3331      	adds	r3, #49	@ 0x31
 800f64e:	f88b 3000 	strb.w	r3, [fp]
 800f652:	e52e      	b.n	800f0b2 <_dtoa_r+0x49a>
 800f654:	4628      	mov	r0, r5
 800f656:	e7b9      	b.n	800f5cc <_dtoa_r+0x9b4>
 800f658:	2201      	movs	r2, #1
 800f65a:	e7e2      	b.n	800f622 <_dtoa_r+0xa0a>
 800f65c:	9904      	ldr	r1, [sp, #16]
 800f65e:	2900      	cmp	r1, #0
 800f660:	db04      	blt.n	800f66c <_dtoa_r+0xa54>
 800f662:	9807      	ldr	r0, [sp, #28]
 800f664:	4301      	orrs	r1, r0
 800f666:	9806      	ldr	r0, [sp, #24]
 800f668:	4301      	orrs	r1, r0
 800f66a:	d120      	bne.n	800f6ae <_dtoa_r+0xa96>
 800f66c:	2a00      	cmp	r2, #0
 800f66e:	ddee      	ble.n	800f64e <_dtoa_r+0xa36>
 800f670:	9902      	ldr	r1, [sp, #8]
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	2201      	movs	r2, #1
 800f676:	4648      	mov	r0, r9
 800f678:	f000 fb38 	bl	800fcec <__lshift>
 800f67c:	4621      	mov	r1, r4
 800f67e:	9002      	str	r0, [sp, #8]
 800f680:	f000 fba0 	bl	800fdc4 <__mcmp>
 800f684:	2800      	cmp	r0, #0
 800f686:	9b00      	ldr	r3, [sp, #0]
 800f688:	dc02      	bgt.n	800f690 <_dtoa_r+0xa78>
 800f68a:	d1e0      	bne.n	800f64e <_dtoa_r+0xa36>
 800f68c:	07da      	lsls	r2, r3, #31
 800f68e:	d5de      	bpl.n	800f64e <_dtoa_r+0xa36>
 800f690:	2b39      	cmp	r3, #57	@ 0x39
 800f692:	d1da      	bne.n	800f64a <_dtoa_r+0xa32>
 800f694:	2339      	movs	r3, #57	@ 0x39
 800f696:	f88b 3000 	strb.w	r3, [fp]
 800f69a:	4633      	mov	r3, r6
 800f69c:	461e      	mov	r6, r3
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f6a4:	2a39      	cmp	r2, #57	@ 0x39
 800f6a6:	d04e      	beq.n	800f746 <_dtoa_r+0xb2e>
 800f6a8:	3201      	adds	r2, #1
 800f6aa:	701a      	strb	r2, [r3, #0]
 800f6ac:	e501      	b.n	800f0b2 <_dtoa_r+0x49a>
 800f6ae:	2a00      	cmp	r2, #0
 800f6b0:	dd03      	ble.n	800f6ba <_dtoa_r+0xaa2>
 800f6b2:	2b39      	cmp	r3, #57	@ 0x39
 800f6b4:	d0ee      	beq.n	800f694 <_dtoa_r+0xa7c>
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	e7c9      	b.n	800f64e <_dtoa_r+0xa36>
 800f6ba:	9a00      	ldr	r2, [sp, #0]
 800f6bc:	9908      	ldr	r1, [sp, #32]
 800f6be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f6c2:	428a      	cmp	r2, r1
 800f6c4:	d028      	beq.n	800f718 <_dtoa_r+0xb00>
 800f6c6:	9902      	ldr	r1, [sp, #8]
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	220a      	movs	r2, #10
 800f6cc:	4648      	mov	r0, r9
 800f6ce:	f000 f91f 	bl	800f910 <__multadd>
 800f6d2:	42af      	cmp	r7, r5
 800f6d4:	9002      	str	r0, [sp, #8]
 800f6d6:	f04f 0300 	mov.w	r3, #0
 800f6da:	f04f 020a 	mov.w	r2, #10
 800f6de:	4639      	mov	r1, r7
 800f6e0:	4648      	mov	r0, r9
 800f6e2:	d107      	bne.n	800f6f4 <_dtoa_r+0xadc>
 800f6e4:	f000 f914 	bl	800f910 <__multadd>
 800f6e8:	4607      	mov	r7, r0
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	9b00      	ldr	r3, [sp, #0]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	e777      	b.n	800f5e4 <_dtoa_r+0x9cc>
 800f6f4:	f000 f90c 	bl	800f910 <__multadd>
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	4607      	mov	r7, r0
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	220a      	movs	r2, #10
 800f700:	4648      	mov	r0, r9
 800f702:	f000 f905 	bl	800f910 <__multadd>
 800f706:	4605      	mov	r5, r0
 800f708:	e7f0      	b.n	800f6ec <_dtoa_r+0xad4>
 800f70a:	f1bb 0f00 	cmp.w	fp, #0
 800f70e:	bfcc      	ite	gt
 800f710:	465e      	movgt	r6, fp
 800f712:	2601      	movle	r6, #1
 800f714:	4456      	add	r6, sl
 800f716:	2700      	movs	r7, #0
 800f718:	9902      	ldr	r1, [sp, #8]
 800f71a:	9300      	str	r3, [sp, #0]
 800f71c:	2201      	movs	r2, #1
 800f71e:	4648      	mov	r0, r9
 800f720:	f000 fae4 	bl	800fcec <__lshift>
 800f724:	4621      	mov	r1, r4
 800f726:	9002      	str	r0, [sp, #8]
 800f728:	f000 fb4c 	bl	800fdc4 <__mcmp>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	dcb4      	bgt.n	800f69a <_dtoa_r+0xa82>
 800f730:	d102      	bne.n	800f738 <_dtoa_r+0xb20>
 800f732:	9b00      	ldr	r3, [sp, #0]
 800f734:	07db      	lsls	r3, r3, #31
 800f736:	d4b0      	bmi.n	800f69a <_dtoa_r+0xa82>
 800f738:	4633      	mov	r3, r6
 800f73a:	461e      	mov	r6, r3
 800f73c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f740:	2a30      	cmp	r2, #48	@ 0x30
 800f742:	d0fa      	beq.n	800f73a <_dtoa_r+0xb22>
 800f744:	e4b5      	b.n	800f0b2 <_dtoa_r+0x49a>
 800f746:	459a      	cmp	sl, r3
 800f748:	d1a8      	bne.n	800f69c <_dtoa_r+0xa84>
 800f74a:	2331      	movs	r3, #49	@ 0x31
 800f74c:	f108 0801 	add.w	r8, r8, #1
 800f750:	f88a 3000 	strb.w	r3, [sl]
 800f754:	e4ad      	b.n	800f0b2 <_dtoa_r+0x49a>
 800f756:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f758:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f7b4 <_dtoa_r+0xb9c>
 800f75c:	b11b      	cbz	r3, 800f766 <_dtoa_r+0xb4e>
 800f75e:	f10a 0308 	add.w	r3, sl, #8
 800f762:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f764:	6013      	str	r3, [r2, #0]
 800f766:	4650      	mov	r0, sl
 800f768:	b017      	add	sp, #92	@ 0x5c
 800f76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f76e:	9b07      	ldr	r3, [sp, #28]
 800f770:	2b01      	cmp	r3, #1
 800f772:	f77f ae2e 	ble.w	800f3d2 <_dtoa_r+0x7ba>
 800f776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f778:	9308      	str	r3, [sp, #32]
 800f77a:	2001      	movs	r0, #1
 800f77c:	e64d      	b.n	800f41a <_dtoa_r+0x802>
 800f77e:	f1bb 0f00 	cmp.w	fp, #0
 800f782:	f77f aed9 	ble.w	800f538 <_dtoa_r+0x920>
 800f786:	4656      	mov	r6, sl
 800f788:	9802      	ldr	r0, [sp, #8]
 800f78a:	4621      	mov	r1, r4
 800f78c:	f7ff f9bc 	bl	800eb08 <quorem>
 800f790:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f794:	f806 3b01 	strb.w	r3, [r6], #1
 800f798:	eba6 020a 	sub.w	r2, r6, sl
 800f79c:	4593      	cmp	fp, r2
 800f79e:	ddb4      	ble.n	800f70a <_dtoa_r+0xaf2>
 800f7a0:	9902      	ldr	r1, [sp, #8]
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	220a      	movs	r2, #10
 800f7a6:	4648      	mov	r0, r9
 800f7a8:	f000 f8b2 	bl	800f910 <__multadd>
 800f7ac:	9002      	str	r0, [sp, #8]
 800f7ae:	e7eb      	b.n	800f788 <_dtoa_r+0xb70>
 800f7b0:	0803cdca 	.word	0x0803cdca
 800f7b4:	0803cd4e 	.word	0x0803cd4e

0800f7b8 <_free_r>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	2900      	cmp	r1, #0
 800f7be:	d041      	beq.n	800f844 <_free_r+0x8c>
 800f7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7c4:	1f0c      	subs	r4, r1, #4
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	bfb8      	it	lt
 800f7ca:	18e4      	addlt	r4, r4, r3
 800f7cc:	f7fe f862 	bl	800d894 <__malloc_lock>
 800f7d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f848 <_free_r+0x90>)
 800f7d2:	6813      	ldr	r3, [r2, #0]
 800f7d4:	b933      	cbnz	r3, 800f7e4 <_free_r+0x2c>
 800f7d6:	6063      	str	r3, [r4, #4]
 800f7d8:	6014      	str	r4, [r2, #0]
 800f7da:	4628      	mov	r0, r5
 800f7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7e0:	f7fe b85e 	b.w	800d8a0 <__malloc_unlock>
 800f7e4:	42a3      	cmp	r3, r4
 800f7e6:	d908      	bls.n	800f7fa <_free_r+0x42>
 800f7e8:	6820      	ldr	r0, [r4, #0]
 800f7ea:	1821      	adds	r1, r4, r0
 800f7ec:	428b      	cmp	r3, r1
 800f7ee:	bf01      	itttt	eq
 800f7f0:	6819      	ldreq	r1, [r3, #0]
 800f7f2:	685b      	ldreq	r3, [r3, #4]
 800f7f4:	1809      	addeq	r1, r1, r0
 800f7f6:	6021      	streq	r1, [r4, #0]
 800f7f8:	e7ed      	b.n	800f7d6 <_free_r+0x1e>
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	b10b      	cbz	r3, 800f804 <_free_r+0x4c>
 800f800:	42a3      	cmp	r3, r4
 800f802:	d9fa      	bls.n	800f7fa <_free_r+0x42>
 800f804:	6811      	ldr	r1, [r2, #0]
 800f806:	1850      	adds	r0, r2, r1
 800f808:	42a0      	cmp	r0, r4
 800f80a:	d10b      	bne.n	800f824 <_free_r+0x6c>
 800f80c:	6820      	ldr	r0, [r4, #0]
 800f80e:	4401      	add	r1, r0
 800f810:	1850      	adds	r0, r2, r1
 800f812:	4283      	cmp	r3, r0
 800f814:	6011      	str	r1, [r2, #0]
 800f816:	d1e0      	bne.n	800f7da <_free_r+0x22>
 800f818:	6818      	ldr	r0, [r3, #0]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	6053      	str	r3, [r2, #4]
 800f81e:	4408      	add	r0, r1
 800f820:	6010      	str	r0, [r2, #0]
 800f822:	e7da      	b.n	800f7da <_free_r+0x22>
 800f824:	d902      	bls.n	800f82c <_free_r+0x74>
 800f826:	230c      	movs	r3, #12
 800f828:	602b      	str	r3, [r5, #0]
 800f82a:	e7d6      	b.n	800f7da <_free_r+0x22>
 800f82c:	6820      	ldr	r0, [r4, #0]
 800f82e:	1821      	adds	r1, r4, r0
 800f830:	428b      	cmp	r3, r1
 800f832:	bf04      	itt	eq
 800f834:	6819      	ldreq	r1, [r3, #0]
 800f836:	685b      	ldreq	r3, [r3, #4]
 800f838:	6063      	str	r3, [r4, #4]
 800f83a:	bf04      	itt	eq
 800f83c:	1809      	addeq	r1, r1, r0
 800f83e:	6021      	streq	r1, [r4, #0]
 800f840:	6054      	str	r4, [r2, #4]
 800f842:	e7ca      	b.n	800f7da <_free_r+0x22>
 800f844:	bd38      	pop	{r3, r4, r5, pc}
 800f846:	bf00      	nop
 800f848:	2000100c 	.word	0x2000100c

0800f84c <_Balloc>:
 800f84c:	b570      	push	{r4, r5, r6, lr}
 800f84e:	69c6      	ldr	r6, [r0, #28]
 800f850:	4604      	mov	r4, r0
 800f852:	460d      	mov	r5, r1
 800f854:	b976      	cbnz	r6, 800f874 <_Balloc+0x28>
 800f856:	2010      	movs	r0, #16
 800f858:	f7fd ff6a 	bl	800d730 <malloc>
 800f85c:	4602      	mov	r2, r0
 800f85e:	61e0      	str	r0, [r4, #28]
 800f860:	b920      	cbnz	r0, 800f86c <_Balloc+0x20>
 800f862:	4b18      	ldr	r3, [pc, #96]	@ (800f8c4 <_Balloc+0x78>)
 800f864:	4818      	ldr	r0, [pc, #96]	@ (800f8c8 <_Balloc+0x7c>)
 800f866:	216b      	movs	r1, #107	@ 0x6b
 800f868:	f001 fcb2 	bl	80111d0 <__assert_func>
 800f86c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f870:	6006      	str	r6, [r0, #0]
 800f872:	60c6      	str	r6, [r0, #12]
 800f874:	69e6      	ldr	r6, [r4, #28]
 800f876:	68f3      	ldr	r3, [r6, #12]
 800f878:	b183      	cbz	r3, 800f89c <_Balloc+0x50>
 800f87a:	69e3      	ldr	r3, [r4, #28]
 800f87c:	68db      	ldr	r3, [r3, #12]
 800f87e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f882:	b9b8      	cbnz	r0, 800f8b4 <_Balloc+0x68>
 800f884:	2101      	movs	r1, #1
 800f886:	fa01 f605 	lsl.w	r6, r1, r5
 800f88a:	1d72      	adds	r2, r6, #5
 800f88c:	0092      	lsls	r2, r2, #2
 800f88e:	4620      	mov	r0, r4
 800f890:	f001 fcbc 	bl	801120c <_calloc_r>
 800f894:	b160      	cbz	r0, 800f8b0 <_Balloc+0x64>
 800f896:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f89a:	e00e      	b.n	800f8ba <_Balloc+0x6e>
 800f89c:	2221      	movs	r2, #33	@ 0x21
 800f89e:	2104      	movs	r1, #4
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f001 fcb3 	bl	801120c <_calloc_r>
 800f8a6:	69e3      	ldr	r3, [r4, #28]
 800f8a8:	60f0      	str	r0, [r6, #12]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d1e4      	bne.n	800f87a <_Balloc+0x2e>
 800f8b0:	2000      	movs	r0, #0
 800f8b2:	bd70      	pop	{r4, r5, r6, pc}
 800f8b4:	6802      	ldr	r2, [r0, #0]
 800f8b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8c0:	e7f7      	b.n	800f8b2 <_Balloc+0x66>
 800f8c2:	bf00      	nop
 800f8c4:	0803cd5b 	.word	0x0803cd5b
 800f8c8:	0803cddb 	.word	0x0803cddb

0800f8cc <_Bfree>:
 800f8cc:	b570      	push	{r4, r5, r6, lr}
 800f8ce:	69c6      	ldr	r6, [r0, #28]
 800f8d0:	4605      	mov	r5, r0
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	b976      	cbnz	r6, 800f8f4 <_Bfree+0x28>
 800f8d6:	2010      	movs	r0, #16
 800f8d8:	f7fd ff2a 	bl	800d730 <malloc>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	61e8      	str	r0, [r5, #28]
 800f8e0:	b920      	cbnz	r0, 800f8ec <_Bfree+0x20>
 800f8e2:	4b09      	ldr	r3, [pc, #36]	@ (800f908 <_Bfree+0x3c>)
 800f8e4:	4809      	ldr	r0, [pc, #36]	@ (800f90c <_Bfree+0x40>)
 800f8e6:	218f      	movs	r1, #143	@ 0x8f
 800f8e8:	f001 fc72 	bl	80111d0 <__assert_func>
 800f8ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8f0:	6006      	str	r6, [r0, #0]
 800f8f2:	60c6      	str	r6, [r0, #12]
 800f8f4:	b13c      	cbz	r4, 800f906 <_Bfree+0x3a>
 800f8f6:	69eb      	ldr	r3, [r5, #28]
 800f8f8:	6862      	ldr	r2, [r4, #4]
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f900:	6021      	str	r1, [r4, #0]
 800f902:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f906:	bd70      	pop	{r4, r5, r6, pc}
 800f908:	0803cd5b 	.word	0x0803cd5b
 800f90c:	0803cddb 	.word	0x0803cddb

0800f910 <__multadd>:
 800f910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f914:	690d      	ldr	r5, [r1, #16]
 800f916:	4607      	mov	r7, r0
 800f918:	460c      	mov	r4, r1
 800f91a:	461e      	mov	r6, r3
 800f91c:	f101 0c14 	add.w	ip, r1, #20
 800f920:	2000      	movs	r0, #0
 800f922:	f8dc 3000 	ldr.w	r3, [ip]
 800f926:	b299      	uxth	r1, r3
 800f928:	fb02 6101 	mla	r1, r2, r1, r6
 800f92c:	0c1e      	lsrs	r6, r3, #16
 800f92e:	0c0b      	lsrs	r3, r1, #16
 800f930:	fb02 3306 	mla	r3, r2, r6, r3
 800f934:	b289      	uxth	r1, r1
 800f936:	3001      	adds	r0, #1
 800f938:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f93c:	4285      	cmp	r5, r0
 800f93e:	f84c 1b04 	str.w	r1, [ip], #4
 800f942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f946:	dcec      	bgt.n	800f922 <__multadd+0x12>
 800f948:	b30e      	cbz	r6, 800f98e <__multadd+0x7e>
 800f94a:	68a3      	ldr	r3, [r4, #8]
 800f94c:	42ab      	cmp	r3, r5
 800f94e:	dc19      	bgt.n	800f984 <__multadd+0x74>
 800f950:	6861      	ldr	r1, [r4, #4]
 800f952:	4638      	mov	r0, r7
 800f954:	3101      	adds	r1, #1
 800f956:	f7ff ff79 	bl	800f84c <_Balloc>
 800f95a:	4680      	mov	r8, r0
 800f95c:	b928      	cbnz	r0, 800f96a <__multadd+0x5a>
 800f95e:	4602      	mov	r2, r0
 800f960:	4b0c      	ldr	r3, [pc, #48]	@ (800f994 <__multadd+0x84>)
 800f962:	480d      	ldr	r0, [pc, #52]	@ (800f998 <__multadd+0x88>)
 800f964:	21ba      	movs	r1, #186	@ 0xba
 800f966:	f001 fc33 	bl	80111d0 <__assert_func>
 800f96a:	6922      	ldr	r2, [r4, #16]
 800f96c:	3202      	adds	r2, #2
 800f96e:	f104 010c 	add.w	r1, r4, #12
 800f972:	0092      	lsls	r2, r2, #2
 800f974:	300c      	adds	r0, #12
 800f976:	f7ff f8b2 	bl	800eade <memcpy>
 800f97a:	4621      	mov	r1, r4
 800f97c:	4638      	mov	r0, r7
 800f97e:	f7ff ffa5 	bl	800f8cc <_Bfree>
 800f982:	4644      	mov	r4, r8
 800f984:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f988:	3501      	adds	r5, #1
 800f98a:	615e      	str	r6, [r3, #20]
 800f98c:	6125      	str	r5, [r4, #16]
 800f98e:	4620      	mov	r0, r4
 800f990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f994:	0803cdca 	.word	0x0803cdca
 800f998:	0803cddb 	.word	0x0803cddb

0800f99c <__s2b>:
 800f99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9a0:	460c      	mov	r4, r1
 800f9a2:	4615      	mov	r5, r2
 800f9a4:	461f      	mov	r7, r3
 800f9a6:	2209      	movs	r2, #9
 800f9a8:	3308      	adds	r3, #8
 800f9aa:	4606      	mov	r6, r0
 800f9ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	db09      	blt.n	800f9cc <__s2b+0x30>
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	f7ff ff47 	bl	800f84c <_Balloc>
 800f9be:	b940      	cbnz	r0, 800f9d2 <__s2b+0x36>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	4b19      	ldr	r3, [pc, #100]	@ (800fa28 <__s2b+0x8c>)
 800f9c4:	4819      	ldr	r0, [pc, #100]	@ (800fa2c <__s2b+0x90>)
 800f9c6:	21d3      	movs	r1, #211	@ 0xd3
 800f9c8:	f001 fc02 	bl	80111d0 <__assert_func>
 800f9cc:	0052      	lsls	r2, r2, #1
 800f9ce:	3101      	adds	r1, #1
 800f9d0:	e7f0      	b.n	800f9b4 <__s2b+0x18>
 800f9d2:	9b08      	ldr	r3, [sp, #32]
 800f9d4:	6143      	str	r3, [r0, #20]
 800f9d6:	2d09      	cmp	r5, #9
 800f9d8:	f04f 0301 	mov.w	r3, #1
 800f9dc:	6103      	str	r3, [r0, #16]
 800f9de:	dd16      	ble.n	800fa0e <__s2b+0x72>
 800f9e0:	f104 0909 	add.w	r9, r4, #9
 800f9e4:	46c8      	mov	r8, r9
 800f9e6:	442c      	add	r4, r5
 800f9e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f9ec:	4601      	mov	r1, r0
 800f9ee:	3b30      	subs	r3, #48	@ 0x30
 800f9f0:	220a      	movs	r2, #10
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	f7ff ff8c 	bl	800f910 <__multadd>
 800f9f8:	45a0      	cmp	r8, r4
 800f9fa:	d1f5      	bne.n	800f9e8 <__s2b+0x4c>
 800f9fc:	f1a5 0408 	sub.w	r4, r5, #8
 800fa00:	444c      	add	r4, r9
 800fa02:	1b2d      	subs	r5, r5, r4
 800fa04:	1963      	adds	r3, r4, r5
 800fa06:	42bb      	cmp	r3, r7
 800fa08:	db04      	blt.n	800fa14 <__s2b+0x78>
 800fa0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa0e:	340a      	adds	r4, #10
 800fa10:	2509      	movs	r5, #9
 800fa12:	e7f6      	b.n	800fa02 <__s2b+0x66>
 800fa14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa18:	4601      	mov	r1, r0
 800fa1a:	3b30      	subs	r3, #48	@ 0x30
 800fa1c:	220a      	movs	r2, #10
 800fa1e:	4630      	mov	r0, r6
 800fa20:	f7ff ff76 	bl	800f910 <__multadd>
 800fa24:	e7ee      	b.n	800fa04 <__s2b+0x68>
 800fa26:	bf00      	nop
 800fa28:	0803cdca 	.word	0x0803cdca
 800fa2c:	0803cddb 	.word	0x0803cddb

0800fa30 <__hi0bits>:
 800fa30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fa34:	4603      	mov	r3, r0
 800fa36:	bf36      	itet	cc
 800fa38:	0403      	lslcc	r3, r0, #16
 800fa3a:	2000      	movcs	r0, #0
 800fa3c:	2010      	movcc	r0, #16
 800fa3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa42:	bf3c      	itt	cc
 800fa44:	021b      	lslcc	r3, r3, #8
 800fa46:	3008      	addcc	r0, #8
 800fa48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa4c:	bf3c      	itt	cc
 800fa4e:	011b      	lslcc	r3, r3, #4
 800fa50:	3004      	addcc	r0, #4
 800fa52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa56:	bf3c      	itt	cc
 800fa58:	009b      	lslcc	r3, r3, #2
 800fa5a:	3002      	addcc	r0, #2
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	db05      	blt.n	800fa6c <__hi0bits+0x3c>
 800fa60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fa64:	f100 0001 	add.w	r0, r0, #1
 800fa68:	bf08      	it	eq
 800fa6a:	2020      	moveq	r0, #32
 800fa6c:	4770      	bx	lr

0800fa6e <__lo0bits>:
 800fa6e:	6803      	ldr	r3, [r0, #0]
 800fa70:	4602      	mov	r2, r0
 800fa72:	f013 0007 	ands.w	r0, r3, #7
 800fa76:	d00b      	beq.n	800fa90 <__lo0bits+0x22>
 800fa78:	07d9      	lsls	r1, r3, #31
 800fa7a:	d421      	bmi.n	800fac0 <__lo0bits+0x52>
 800fa7c:	0798      	lsls	r0, r3, #30
 800fa7e:	bf49      	itett	mi
 800fa80:	085b      	lsrmi	r3, r3, #1
 800fa82:	089b      	lsrpl	r3, r3, #2
 800fa84:	2001      	movmi	r0, #1
 800fa86:	6013      	strmi	r3, [r2, #0]
 800fa88:	bf5c      	itt	pl
 800fa8a:	6013      	strpl	r3, [r2, #0]
 800fa8c:	2002      	movpl	r0, #2
 800fa8e:	4770      	bx	lr
 800fa90:	b299      	uxth	r1, r3
 800fa92:	b909      	cbnz	r1, 800fa98 <__lo0bits+0x2a>
 800fa94:	0c1b      	lsrs	r3, r3, #16
 800fa96:	2010      	movs	r0, #16
 800fa98:	b2d9      	uxtb	r1, r3
 800fa9a:	b909      	cbnz	r1, 800faa0 <__lo0bits+0x32>
 800fa9c:	3008      	adds	r0, #8
 800fa9e:	0a1b      	lsrs	r3, r3, #8
 800faa0:	0719      	lsls	r1, r3, #28
 800faa2:	bf04      	itt	eq
 800faa4:	091b      	lsreq	r3, r3, #4
 800faa6:	3004      	addeq	r0, #4
 800faa8:	0799      	lsls	r1, r3, #30
 800faaa:	bf04      	itt	eq
 800faac:	089b      	lsreq	r3, r3, #2
 800faae:	3002      	addeq	r0, #2
 800fab0:	07d9      	lsls	r1, r3, #31
 800fab2:	d403      	bmi.n	800fabc <__lo0bits+0x4e>
 800fab4:	085b      	lsrs	r3, r3, #1
 800fab6:	f100 0001 	add.w	r0, r0, #1
 800faba:	d003      	beq.n	800fac4 <__lo0bits+0x56>
 800fabc:	6013      	str	r3, [r2, #0]
 800fabe:	4770      	bx	lr
 800fac0:	2000      	movs	r0, #0
 800fac2:	4770      	bx	lr
 800fac4:	2020      	movs	r0, #32
 800fac6:	4770      	bx	lr

0800fac8 <__i2b>:
 800fac8:	b510      	push	{r4, lr}
 800faca:	460c      	mov	r4, r1
 800facc:	2101      	movs	r1, #1
 800face:	f7ff febd 	bl	800f84c <_Balloc>
 800fad2:	4602      	mov	r2, r0
 800fad4:	b928      	cbnz	r0, 800fae2 <__i2b+0x1a>
 800fad6:	4b05      	ldr	r3, [pc, #20]	@ (800faec <__i2b+0x24>)
 800fad8:	4805      	ldr	r0, [pc, #20]	@ (800faf0 <__i2b+0x28>)
 800fada:	f240 1145 	movw	r1, #325	@ 0x145
 800fade:	f001 fb77 	bl	80111d0 <__assert_func>
 800fae2:	2301      	movs	r3, #1
 800fae4:	6144      	str	r4, [r0, #20]
 800fae6:	6103      	str	r3, [r0, #16]
 800fae8:	bd10      	pop	{r4, pc}
 800faea:	bf00      	nop
 800faec:	0803cdca 	.word	0x0803cdca
 800faf0:	0803cddb 	.word	0x0803cddb

0800faf4 <__multiply>:
 800faf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf8:	4617      	mov	r7, r2
 800fafa:	690a      	ldr	r2, [r1, #16]
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	bfa8      	it	ge
 800fb02:	463b      	movge	r3, r7
 800fb04:	4689      	mov	r9, r1
 800fb06:	bfa4      	itt	ge
 800fb08:	460f      	movge	r7, r1
 800fb0a:	4699      	movge	r9, r3
 800fb0c:	693d      	ldr	r5, [r7, #16]
 800fb0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	eb05 060a 	add.w	r6, r5, sl
 800fb1a:	42b3      	cmp	r3, r6
 800fb1c:	b085      	sub	sp, #20
 800fb1e:	bfb8      	it	lt
 800fb20:	3101      	addlt	r1, #1
 800fb22:	f7ff fe93 	bl	800f84c <_Balloc>
 800fb26:	b930      	cbnz	r0, 800fb36 <__multiply+0x42>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	4b41      	ldr	r3, [pc, #260]	@ (800fc30 <__multiply+0x13c>)
 800fb2c:	4841      	ldr	r0, [pc, #260]	@ (800fc34 <__multiply+0x140>)
 800fb2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fb32:	f001 fb4d 	bl	80111d0 <__assert_func>
 800fb36:	f100 0414 	add.w	r4, r0, #20
 800fb3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fb3e:	4623      	mov	r3, r4
 800fb40:	2200      	movs	r2, #0
 800fb42:	4573      	cmp	r3, lr
 800fb44:	d320      	bcc.n	800fb88 <__multiply+0x94>
 800fb46:	f107 0814 	add.w	r8, r7, #20
 800fb4a:	f109 0114 	add.w	r1, r9, #20
 800fb4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fb52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fb56:	9302      	str	r3, [sp, #8]
 800fb58:	1beb      	subs	r3, r5, r7
 800fb5a:	3b15      	subs	r3, #21
 800fb5c:	f023 0303 	bic.w	r3, r3, #3
 800fb60:	3304      	adds	r3, #4
 800fb62:	3715      	adds	r7, #21
 800fb64:	42bd      	cmp	r5, r7
 800fb66:	bf38      	it	cc
 800fb68:	2304      	movcc	r3, #4
 800fb6a:	9301      	str	r3, [sp, #4]
 800fb6c:	9b02      	ldr	r3, [sp, #8]
 800fb6e:	9103      	str	r1, [sp, #12]
 800fb70:	428b      	cmp	r3, r1
 800fb72:	d80c      	bhi.n	800fb8e <__multiply+0x9a>
 800fb74:	2e00      	cmp	r6, #0
 800fb76:	dd03      	ble.n	800fb80 <__multiply+0x8c>
 800fb78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d055      	beq.n	800fc2c <__multiply+0x138>
 800fb80:	6106      	str	r6, [r0, #16]
 800fb82:	b005      	add	sp, #20
 800fb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb88:	f843 2b04 	str.w	r2, [r3], #4
 800fb8c:	e7d9      	b.n	800fb42 <__multiply+0x4e>
 800fb8e:	f8b1 a000 	ldrh.w	sl, [r1]
 800fb92:	f1ba 0f00 	cmp.w	sl, #0
 800fb96:	d01f      	beq.n	800fbd8 <__multiply+0xe4>
 800fb98:	46c4      	mov	ip, r8
 800fb9a:	46a1      	mov	r9, r4
 800fb9c:	2700      	movs	r7, #0
 800fb9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fba2:	f8d9 3000 	ldr.w	r3, [r9]
 800fba6:	fa1f fb82 	uxth.w	fp, r2
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	fb0a 330b 	mla	r3, sl, fp, r3
 800fbb0:	443b      	add	r3, r7
 800fbb2:	f8d9 7000 	ldr.w	r7, [r9]
 800fbb6:	0c12      	lsrs	r2, r2, #16
 800fbb8:	0c3f      	lsrs	r7, r7, #16
 800fbba:	fb0a 7202 	mla	r2, sl, r2, r7
 800fbbe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbc8:	4565      	cmp	r5, ip
 800fbca:	f849 3b04 	str.w	r3, [r9], #4
 800fbce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fbd2:	d8e4      	bhi.n	800fb9e <__multiply+0xaa>
 800fbd4:	9b01      	ldr	r3, [sp, #4]
 800fbd6:	50e7      	str	r7, [r4, r3]
 800fbd8:	9b03      	ldr	r3, [sp, #12]
 800fbda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fbde:	3104      	adds	r1, #4
 800fbe0:	f1b9 0f00 	cmp.w	r9, #0
 800fbe4:	d020      	beq.n	800fc28 <__multiply+0x134>
 800fbe6:	6823      	ldr	r3, [r4, #0]
 800fbe8:	4647      	mov	r7, r8
 800fbea:	46a4      	mov	ip, r4
 800fbec:	f04f 0a00 	mov.w	sl, #0
 800fbf0:	f8b7 b000 	ldrh.w	fp, [r7]
 800fbf4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fbf8:	fb09 220b 	mla	r2, r9, fp, r2
 800fbfc:	4452      	add	r2, sl
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc04:	f84c 3b04 	str.w	r3, [ip], #4
 800fc08:	f857 3b04 	ldr.w	r3, [r7], #4
 800fc0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc10:	f8bc 3000 	ldrh.w	r3, [ip]
 800fc14:	fb09 330a 	mla	r3, r9, sl, r3
 800fc18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fc1c:	42bd      	cmp	r5, r7
 800fc1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc22:	d8e5      	bhi.n	800fbf0 <__multiply+0xfc>
 800fc24:	9a01      	ldr	r2, [sp, #4]
 800fc26:	50a3      	str	r3, [r4, r2]
 800fc28:	3404      	adds	r4, #4
 800fc2a:	e79f      	b.n	800fb6c <__multiply+0x78>
 800fc2c:	3e01      	subs	r6, #1
 800fc2e:	e7a1      	b.n	800fb74 <__multiply+0x80>
 800fc30:	0803cdca 	.word	0x0803cdca
 800fc34:	0803cddb 	.word	0x0803cddb

0800fc38 <__pow5mult>:
 800fc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc3c:	4615      	mov	r5, r2
 800fc3e:	f012 0203 	ands.w	r2, r2, #3
 800fc42:	4607      	mov	r7, r0
 800fc44:	460e      	mov	r6, r1
 800fc46:	d007      	beq.n	800fc58 <__pow5mult+0x20>
 800fc48:	4c25      	ldr	r4, [pc, #148]	@ (800fce0 <__pow5mult+0xa8>)
 800fc4a:	3a01      	subs	r2, #1
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc52:	f7ff fe5d 	bl	800f910 <__multadd>
 800fc56:	4606      	mov	r6, r0
 800fc58:	10ad      	asrs	r5, r5, #2
 800fc5a:	d03d      	beq.n	800fcd8 <__pow5mult+0xa0>
 800fc5c:	69fc      	ldr	r4, [r7, #28]
 800fc5e:	b97c      	cbnz	r4, 800fc80 <__pow5mult+0x48>
 800fc60:	2010      	movs	r0, #16
 800fc62:	f7fd fd65 	bl	800d730 <malloc>
 800fc66:	4602      	mov	r2, r0
 800fc68:	61f8      	str	r0, [r7, #28]
 800fc6a:	b928      	cbnz	r0, 800fc78 <__pow5mult+0x40>
 800fc6c:	4b1d      	ldr	r3, [pc, #116]	@ (800fce4 <__pow5mult+0xac>)
 800fc6e:	481e      	ldr	r0, [pc, #120]	@ (800fce8 <__pow5mult+0xb0>)
 800fc70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fc74:	f001 faac 	bl	80111d0 <__assert_func>
 800fc78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc7c:	6004      	str	r4, [r0, #0]
 800fc7e:	60c4      	str	r4, [r0, #12]
 800fc80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fc84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc88:	b94c      	cbnz	r4, 800fc9e <__pow5mult+0x66>
 800fc8a:	f240 2171 	movw	r1, #625	@ 0x271
 800fc8e:	4638      	mov	r0, r7
 800fc90:	f7ff ff1a 	bl	800fac8 <__i2b>
 800fc94:	2300      	movs	r3, #0
 800fc96:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	6003      	str	r3, [r0, #0]
 800fc9e:	f04f 0900 	mov.w	r9, #0
 800fca2:	07eb      	lsls	r3, r5, #31
 800fca4:	d50a      	bpl.n	800fcbc <__pow5mult+0x84>
 800fca6:	4631      	mov	r1, r6
 800fca8:	4622      	mov	r2, r4
 800fcaa:	4638      	mov	r0, r7
 800fcac:	f7ff ff22 	bl	800faf4 <__multiply>
 800fcb0:	4631      	mov	r1, r6
 800fcb2:	4680      	mov	r8, r0
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	f7ff fe09 	bl	800f8cc <_Bfree>
 800fcba:	4646      	mov	r6, r8
 800fcbc:	106d      	asrs	r5, r5, #1
 800fcbe:	d00b      	beq.n	800fcd8 <__pow5mult+0xa0>
 800fcc0:	6820      	ldr	r0, [r4, #0]
 800fcc2:	b938      	cbnz	r0, 800fcd4 <__pow5mult+0x9c>
 800fcc4:	4622      	mov	r2, r4
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	4638      	mov	r0, r7
 800fcca:	f7ff ff13 	bl	800faf4 <__multiply>
 800fcce:	6020      	str	r0, [r4, #0]
 800fcd0:	f8c0 9000 	str.w	r9, [r0]
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	e7e4      	b.n	800fca2 <__pow5mult+0x6a>
 800fcd8:	4630      	mov	r0, r6
 800fcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcde:	bf00      	nop
 800fce0:	0803ceec 	.word	0x0803ceec
 800fce4:	0803cd5b 	.word	0x0803cd5b
 800fce8:	0803cddb 	.word	0x0803cddb

0800fcec <__lshift>:
 800fcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcf0:	460c      	mov	r4, r1
 800fcf2:	6849      	ldr	r1, [r1, #4]
 800fcf4:	6923      	ldr	r3, [r4, #16]
 800fcf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcfa:	68a3      	ldr	r3, [r4, #8]
 800fcfc:	4607      	mov	r7, r0
 800fcfe:	4691      	mov	r9, r2
 800fd00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd04:	f108 0601 	add.w	r6, r8, #1
 800fd08:	42b3      	cmp	r3, r6
 800fd0a:	db0b      	blt.n	800fd24 <__lshift+0x38>
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	f7ff fd9d 	bl	800f84c <_Balloc>
 800fd12:	4605      	mov	r5, r0
 800fd14:	b948      	cbnz	r0, 800fd2a <__lshift+0x3e>
 800fd16:	4602      	mov	r2, r0
 800fd18:	4b28      	ldr	r3, [pc, #160]	@ (800fdbc <__lshift+0xd0>)
 800fd1a:	4829      	ldr	r0, [pc, #164]	@ (800fdc0 <__lshift+0xd4>)
 800fd1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fd20:	f001 fa56 	bl	80111d0 <__assert_func>
 800fd24:	3101      	adds	r1, #1
 800fd26:	005b      	lsls	r3, r3, #1
 800fd28:	e7ee      	b.n	800fd08 <__lshift+0x1c>
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f100 0114 	add.w	r1, r0, #20
 800fd30:	f100 0210 	add.w	r2, r0, #16
 800fd34:	4618      	mov	r0, r3
 800fd36:	4553      	cmp	r3, sl
 800fd38:	db33      	blt.n	800fda2 <__lshift+0xb6>
 800fd3a:	6920      	ldr	r0, [r4, #16]
 800fd3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd40:	f104 0314 	add.w	r3, r4, #20
 800fd44:	f019 091f 	ands.w	r9, r9, #31
 800fd48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd50:	d02b      	beq.n	800fdaa <__lshift+0xbe>
 800fd52:	f1c9 0e20 	rsb	lr, r9, #32
 800fd56:	468a      	mov	sl, r1
 800fd58:	2200      	movs	r2, #0
 800fd5a:	6818      	ldr	r0, [r3, #0]
 800fd5c:	fa00 f009 	lsl.w	r0, r0, r9
 800fd60:	4310      	orrs	r0, r2
 800fd62:	f84a 0b04 	str.w	r0, [sl], #4
 800fd66:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd6a:	459c      	cmp	ip, r3
 800fd6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd70:	d8f3      	bhi.n	800fd5a <__lshift+0x6e>
 800fd72:	ebac 0304 	sub.w	r3, ip, r4
 800fd76:	3b15      	subs	r3, #21
 800fd78:	f023 0303 	bic.w	r3, r3, #3
 800fd7c:	3304      	adds	r3, #4
 800fd7e:	f104 0015 	add.w	r0, r4, #21
 800fd82:	4560      	cmp	r0, ip
 800fd84:	bf88      	it	hi
 800fd86:	2304      	movhi	r3, #4
 800fd88:	50ca      	str	r2, [r1, r3]
 800fd8a:	b10a      	cbz	r2, 800fd90 <__lshift+0xa4>
 800fd8c:	f108 0602 	add.w	r6, r8, #2
 800fd90:	3e01      	subs	r6, #1
 800fd92:	4638      	mov	r0, r7
 800fd94:	612e      	str	r6, [r5, #16]
 800fd96:	4621      	mov	r1, r4
 800fd98:	f7ff fd98 	bl	800f8cc <_Bfree>
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fda6:	3301      	adds	r3, #1
 800fda8:	e7c5      	b.n	800fd36 <__lshift+0x4a>
 800fdaa:	3904      	subs	r1, #4
 800fdac:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdb4:	459c      	cmp	ip, r3
 800fdb6:	d8f9      	bhi.n	800fdac <__lshift+0xc0>
 800fdb8:	e7ea      	b.n	800fd90 <__lshift+0xa4>
 800fdba:	bf00      	nop
 800fdbc:	0803cdca 	.word	0x0803cdca
 800fdc0:	0803cddb 	.word	0x0803cddb

0800fdc4 <__mcmp>:
 800fdc4:	690a      	ldr	r2, [r1, #16]
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	6900      	ldr	r0, [r0, #16]
 800fdca:	1a80      	subs	r0, r0, r2
 800fdcc:	b530      	push	{r4, r5, lr}
 800fdce:	d10e      	bne.n	800fdee <__mcmp+0x2a>
 800fdd0:	3314      	adds	r3, #20
 800fdd2:	3114      	adds	r1, #20
 800fdd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fdd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fde0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fde4:	4295      	cmp	r5, r2
 800fde6:	d003      	beq.n	800fdf0 <__mcmp+0x2c>
 800fde8:	d205      	bcs.n	800fdf6 <__mcmp+0x32>
 800fdea:	f04f 30ff 	mov.w	r0, #4294967295
 800fdee:	bd30      	pop	{r4, r5, pc}
 800fdf0:	42a3      	cmp	r3, r4
 800fdf2:	d3f3      	bcc.n	800fddc <__mcmp+0x18>
 800fdf4:	e7fb      	b.n	800fdee <__mcmp+0x2a>
 800fdf6:	2001      	movs	r0, #1
 800fdf8:	e7f9      	b.n	800fdee <__mcmp+0x2a>
	...

0800fdfc <__mdiff>:
 800fdfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe00:	4689      	mov	r9, r1
 800fe02:	4606      	mov	r6, r0
 800fe04:	4611      	mov	r1, r2
 800fe06:	4648      	mov	r0, r9
 800fe08:	4614      	mov	r4, r2
 800fe0a:	f7ff ffdb 	bl	800fdc4 <__mcmp>
 800fe0e:	1e05      	subs	r5, r0, #0
 800fe10:	d112      	bne.n	800fe38 <__mdiff+0x3c>
 800fe12:	4629      	mov	r1, r5
 800fe14:	4630      	mov	r0, r6
 800fe16:	f7ff fd19 	bl	800f84c <_Balloc>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	b928      	cbnz	r0, 800fe2a <__mdiff+0x2e>
 800fe1e:	4b3f      	ldr	r3, [pc, #252]	@ (800ff1c <__mdiff+0x120>)
 800fe20:	f240 2137 	movw	r1, #567	@ 0x237
 800fe24:	483e      	ldr	r0, [pc, #248]	@ (800ff20 <__mdiff+0x124>)
 800fe26:	f001 f9d3 	bl	80111d0 <__assert_func>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe30:	4610      	mov	r0, r2
 800fe32:	b003      	add	sp, #12
 800fe34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe38:	bfbc      	itt	lt
 800fe3a:	464b      	movlt	r3, r9
 800fe3c:	46a1      	movlt	r9, r4
 800fe3e:	4630      	mov	r0, r6
 800fe40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fe44:	bfba      	itte	lt
 800fe46:	461c      	movlt	r4, r3
 800fe48:	2501      	movlt	r5, #1
 800fe4a:	2500      	movge	r5, #0
 800fe4c:	f7ff fcfe 	bl	800f84c <_Balloc>
 800fe50:	4602      	mov	r2, r0
 800fe52:	b918      	cbnz	r0, 800fe5c <__mdiff+0x60>
 800fe54:	4b31      	ldr	r3, [pc, #196]	@ (800ff1c <__mdiff+0x120>)
 800fe56:	f240 2145 	movw	r1, #581	@ 0x245
 800fe5a:	e7e3      	b.n	800fe24 <__mdiff+0x28>
 800fe5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fe60:	6926      	ldr	r6, [r4, #16]
 800fe62:	60c5      	str	r5, [r0, #12]
 800fe64:	f109 0310 	add.w	r3, r9, #16
 800fe68:	f109 0514 	add.w	r5, r9, #20
 800fe6c:	f104 0e14 	add.w	lr, r4, #20
 800fe70:	f100 0b14 	add.w	fp, r0, #20
 800fe74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fe78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fe7c:	9301      	str	r3, [sp, #4]
 800fe7e:	46d9      	mov	r9, fp
 800fe80:	f04f 0c00 	mov.w	ip, #0
 800fe84:	9b01      	ldr	r3, [sp, #4]
 800fe86:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fe8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fe8e:	9301      	str	r3, [sp, #4]
 800fe90:	fa1f f38a 	uxth.w	r3, sl
 800fe94:	4619      	mov	r1, r3
 800fe96:	b283      	uxth	r3, r0
 800fe98:	1acb      	subs	r3, r1, r3
 800fe9a:	0c00      	lsrs	r0, r0, #16
 800fe9c:	4463      	add	r3, ip
 800fe9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fea2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800feac:	4576      	cmp	r6, lr
 800feae:	f849 3b04 	str.w	r3, [r9], #4
 800feb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800feb6:	d8e5      	bhi.n	800fe84 <__mdiff+0x88>
 800feb8:	1b33      	subs	r3, r6, r4
 800feba:	3b15      	subs	r3, #21
 800febc:	f023 0303 	bic.w	r3, r3, #3
 800fec0:	3415      	adds	r4, #21
 800fec2:	3304      	adds	r3, #4
 800fec4:	42a6      	cmp	r6, r4
 800fec6:	bf38      	it	cc
 800fec8:	2304      	movcc	r3, #4
 800feca:	441d      	add	r5, r3
 800fecc:	445b      	add	r3, fp
 800fece:	461e      	mov	r6, r3
 800fed0:	462c      	mov	r4, r5
 800fed2:	4544      	cmp	r4, r8
 800fed4:	d30e      	bcc.n	800fef4 <__mdiff+0xf8>
 800fed6:	f108 0103 	add.w	r1, r8, #3
 800feda:	1b49      	subs	r1, r1, r5
 800fedc:	f021 0103 	bic.w	r1, r1, #3
 800fee0:	3d03      	subs	r5, #3
 800fee2:	45a8      	cmp	r8, r5
 800fee4:	bf38      	it	cc
 800fee6:	2100      	movcc	r1, #0
 800fee8:	440b      	add	r3, r1
 800feea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800feee:	b191      	cbz	r1, 800ff16 <__mdiff+0x11a>
 800fef0:	6117      	str	r7, [r2, #16]
 800fef2:	e79d      	b.n	800fe30 <__mdiff+0x34>
 800fef4:	f854 1b04 	ldr.w	r1, [r4], #4
 800fef8:	46e6      	mov	lr, ip
 800fefa:	0c08      	lsrs	r0, r1, #16
 800fefc:	fa1c fc81 	uxtah	ip, ip, r1
 800ff00:	4471      	add	r1, lr
 800ff02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ff06:	b289      	uxth	r1, r1
 800ff08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ff0c:	f846 1b04 	str.w	r1, [r6], #4
 800ff10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff14:	e7dd      	b.n	800fed2 <__mdiff+0xd6>
 800ff16:	3f01      	subs	r7, #1
 800ff18:	e7e7      	b.n	800feea <__mdiff+0xee>
 800ff1a:	bf00      	nop
 800ff1c:	0803cdca 	.word	0x0803cdca
 800ff20:	0803cddb 	.word	0x0803cddb

0800ff24 <__ulp>:
 800ff24:	b082      	sub	sp, #8
 800ff26:	ed8d 0b00 	vstr	d0, [sp]
 800ff2a:	9a01      	ldr	r2, [sp, #4]
 800ff2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ff6c <__ulp+0x48>)
 800ff2e:	4013      	ands	r3, r2
 800ff30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	dc08      	bgt.n	800ff4a <__ulp+0x26>
 800ff38:	425b      	negs	r3, r3
 800ff3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ff3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff42:	da04      	bge.n	800ff4e <__ulp+0x2a>
 800ff44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ff48:	4113      	asrs	r3, r2
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	e008      	b.n	800ff60 <__ulp+0x3c>
 800ff4e:	f1a2 0314 	sub.w	r3, r2, #20
 800ff52:	2b1e      	cmp	r3, #30
 800ff54:	bfda      	itte	le
 800ff56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ff5a:	40da      	lsrle	r2, r3
 800ff5c:	2201      	movgt	r2, #1
 800ff5e:	2300      	movs	r3, #0
 800ff60:	4619      	mov	r1, r3
 800ff62:	4610      	mov	r0, r2
 800ff64:	ec41 0b10 	vmov	d0, r0, r1
 800ff68:	b002      	add	sp, #8
 800ff6a:	4770      	bx	lr
 800ff6c:	7ff00000 	.word	0x7ff00000

0800ff70 <__b2d>:
 800ff70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff74:	6906      	ldr	r6, [r0, #16]
 800ff76:	f100 0814 	add.w	r8, r0, #20
 800ff7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ff7e:	1f37      	subs	r7, r6, #4
 800ff80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff84:	4610      	mov	r0, r2
 800ff86:	f7ff fd53 	bl	800fa30 <__hi0bits>
 800ff8a:	f1c0 0320 	rsb	r3, r0, #32
 800ff8e:	280a      	cmp	r0, #10
 800ff90:	600b      	str	r3, [r1, #0]
 800ff92:	491b      	ldr	r1, [pc, #108]	@ (8010000 <__b2d+0x90>)
 800ff94:	dc15      	bgt.n	800ffc2 <__b2d+0x52>
 800ff96:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff9a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ff9e:	45b8      	cmp	r8, r7
 800ffa0:	ea43 0501 	orr.w	r5, r3, r1
 800ffa4:	bf34      	ite	cc
 800ffa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ffaa:	2300      	movcs	r3, #0
 800ffac:	3015      	adds	r0, #21
 800ffae:	fa02 f000 	lsl.w	r0, r2, r0
 800ffb2:	fa23 f30c 	lsr.w	r3, r3, ip
 800ffb6:	4303      	orrs	r3, r0
 800ffb8:	461c      	mov	r4, r3
 800ffba:	ec45 4b10 	vmov	d0, r4, r5
 800ffbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc2:	45b8      	cmp	r8, r7
 800ffc4:	bf3a      	itte	cc
 800ffc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ffca:	f1a6 0708 	subcc.w	r7, r6, #8
 800ffce:	2300      	movcs	r3, #0
 800ffd0:	380b      	subs	r0, #11
 800ffd2:	d012      	beq.n	800fffa <__b2d+0x8a>
 800ffd4:	f1c0 0120 	rsb	r1, r0, #32
 800ffd8:	fa23 f401 	lsr.w	r4, r3, r1
 800ffdc:	4082      	lsls	r2, r0
 800ffde:	4322      	orrs	r2, r4
 800ffe0:	4547      	cmp	r7, r8
 800ffe2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ffe6:	bf8c      	ite	hi
 800ffe8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ffec:	2200      	movls	r2, #0
 800ffee:	4083      	lsls	r3, r0
 800fff0:	40ca      	lsrs	r2, r1
 800fff2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fff6:	4313      	orrs	r3, r2
 800fff8:	e7de      	b.n	800ffb8 <__b2d+0x48>
 800fffa:	ea42 0501 	orr.w	r5, r2, r1
 800fffe:	e7db      	b.n	800ffb8 <__b2d+0x48>
 8010000:	3ff00000 	.word	0x3ff00000

08010004 <__d2b>:
 8010004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010008:	460f      	mov	r7, r1
 801000a:	2101      	movs	r1, #1
 801000c:	ec59 8b10 	vmov	r8, r9, d0
 8010010:	4616      	mov	r6, r2
 8010012:	f7ff fc1b 	bl	800f84c <_Balloc>
 8010016:	4604      	mov	r4, r0
 8010018:	b930      	cbnz	r0, 8010028 <__d2b+0x24>
 801001a:	4602      	mov	r2, r0
 801001c:	4b23      	ldr	r3, [pc, #140]	@ (80100ac <__d2b+0xa8>)
 801001e:	4824      	ldr	r0, [pc, #144]	@ (80100b0 <__d2b+0xac>)
 8010020:	f240 310f 	movw	r1, #783	@ 0x30f
 8010024:	f001 f8d4 	bl	80111d0 <__assert_func>
 8010028:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801002c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010030:	b10d      	cbz	r5, 8010036 <__d2b+0x32>
 8010032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010036:	9301      	str	r3, [sp, #4]
 8010038:	f1b8 0300 	subs.w	r3, r8, #0
 801003c:	d023      	beq.n	8010086 <__d2b+0x82>
 801003e:	4668      	mov	r0, sp
 8010040:	9300      	str	r3, [sp, #0]
 8010042:	f7ff fd14 	bl	800fa6e <__lo0bits>
 8010046:	e9dd 1200 	ldrd	r1, r2, [sp]
 801004a:	b1d0      	cbz	r0, 8010082 <__d2b+0x7e>
 801004c:	f1c0 0320 	rsb	r3, r0, #32
 8010050:	fa02 f303 	lsl.w	r3, r2, r3
 8010054:	430b      	orrs	r3, r1
 8010056:	40c2      	lsrs	r2, r0
 8010058:	6163      	str	r3, [r4, #20]
 801005a:	9201      	str	r2, [sp, #4]
 801005c:	9b01      	ldr	r3, [sp, #4]
 801005e:	61a3      	str	r3, [r4, #24]
 8010060:	2b00      	cmp	r3, #0
 8010062:	bf0c      	ite	eq
 8010064:	2201      	moveq	r2, #1
 8010066:	2202      	movne	r2, #2
 8010068:	6122      	str	r2, [r4, #16]
 801006a:	b1a5      	cbz	r5, 8010096 <__d2b+0x92>
 801006c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010070:	4405      	add	r5, r0
 8010072:	603d      	str	r5, [r7, #0]
 8010074:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010078:	6030      	str	r0, [r6, #0]
 801007a:	4620      	mov	r0, r4
 801007c:	b003      	add	sp, #12
 801007e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010082:	6161      	str	r1, [r4, #20]
 8010084:	e7ea      	b.n	801005c <__d2b+0x58>
 8010086:	a801      	add	r0, sp, #4
 8010088:	f7ff fcf1 	bl	800fa6e <__lo0bits>
 801008c:	9b01      	ldr	r3, [sp, #4]
 801008e:	6163      	str	r3, [r4, #20]
 8010090:	3020      	adds	r0, #32
 8010092:	2201      	movs	r2, #1
 8010094:	e7e8      	b.n	8010068 <__d2b+0x64>
 8010096:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801009a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801009e:	6038      	str	r0, [r7, #0]
 80100a0:	6918      	ldr	r0, [r3, #16]
 80100a2:	f7ff fcc5 	bl	800fa30 <__hi0bits>
 80100a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100aa:	e7e5      	b.n	8010078 <__d2b+0x74>
 80100ac:	0803cdca 	.word	0x0803cdca
 80100b0:	0803cddb 	.word	0x0803cddb

080100b4 <__ratio>:
 80100b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b8:	b085      	sub	sp, #20
 80100ba:	e9cd 1000 	strd	r1, r0, [sp]
 80100be:	a902      	add	r1, sp, #8
 80100c0:	f7ff ff56 	bl	800ff70 <__b2d>
 80100c4:	9800      	ldr	r0, [sp, #0]
 80100c6:	a903      	add	r1, sp, #12
 80100c8:	ec55 4b10 	vmov	r4, r5, d0
 80100cc:	f7ff ff50 	bl	800ff70 <__b2d>
 80100d0:	9b01      	ldr	r3, [sp, #4]
 80100d2:	6919      	ldr	r1, [r3, #16]
 80100d4:	9b00      	ldr	r3, [sp, #0]
 80100d6:	691b      	ldr	r3, [r3, #16]
 80100d8:	1ac9      	subs	r1, r1, r3
 80100da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80100de:	1a9b      	subs	r3, r3, r2
 80100e0:	ec5b ab10 	vmov	sl, fp, d0
 80100e4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	bfce      	itee	gt
 80100ec:	462a      	movgt	r2, r5
 80100ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80100f2:	465a      	movle	r2, fp
 80100f4:	462f      	mov	r7, r5
 80100f6:	46d9      	mov	r9, fp
 80100f8:	bfcc      	ite	gt
 80100fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80100fe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010102:	464b      	mov	r3, r9
 8010104:	4652      	mov	r2, sl
 8010106:	4620      	mov	r0, r4
 8010108:	4639      	mov	r1, r7
 801010a:	f7f0 fbaf 	bl	800086c <__aeabi_ddiv>
 801010e:	ec41 0b10 	vmov	d0, r0, r1
 8010112:	b005      	add	sp, #20
 8010114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010118 <__copybits>:
 8010118:	3901      	subs	r1, #1
 801011a:	b570      	push	{r4, r5, r6, lr}
 801011c:	1149      	asrs	r1, r1, #5
 801011e:	6914      	ldr	r4, [r2, #16]
 8010120:	3101      	adds	r1, #1
 8010122:	f102 0314 	add.w	r3, r2, #20
 8010126:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801012a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801012e:	1f05      	subs	r5, r0, #4
 8010130:	42a3      	cmp	r3, r4
 8010132:	d30c      	bcc.n	801014e <__copybits+0x36>
 8010134:	1aa3      	subs	r3, r4, r2
 8010136:	3b11      	subs	r3, #17
 8010138:	f023 0303 	bic.w	r3, r3, #3
 801013c:	3211      	adds	r2, #17
 801013e:	42a2      	cmp	r2, r4
 8010140:	bf88      	it	hi
 8010142:	2300      	movhi	r3, #0
 8010144:	4418      	add	r0, r3
 8010146:	2300      	movs	r3, #0
 8010148:	4288      	cmp	r0, r1
 801014a:	d305      	bcc.n	8010158 <__copybits+0x40>
 801014c:	bd70      	pop	{r4, r5, r6, pc}
 801014e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010152:	f845 6f04 	str.w	r6, [r5, #4]!
 8010156:	e7eb      	b.n	8010130 <__copybits+0x18>
 8010158:	f840 3b04 	str.w	r3, [r0], #4
 801015c:	e7f4      	b.n	8010148 <__copybits+0x30>

0801015e <__any_on>:
 801015e:	f100 0214 	add.w	r2, r0, #20
 8010162:	6900      	ldr	r0, [r0, #16]
 8010164:	114b      	asrs	r3, r1, #5
 8010166:	4298      	cmp	r0, r3
 8010168:	b510      	push	{r4, lr}
 801016a:	db11      	blt.n	8010190 <__any_on+0x32>
 801016c:	dd0a      	ble.n	8010184 <__any_on+0x26>
 801016e:	f011 011f 	ands.w	r1, r1, #31
 8010172:	d007      	beq.n	8010184 <__any_on+0x26>
 8010174:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010178:	fa24 f001 	lsr.w	r0, r4, r1
 801017c:	fa00 f101 	lsl.w	r1, r0, r1
 8010180:	428c      	cmp	r4, r1
 8010182:	d10b      	bne.n	801019c <__any_on+0x3e>
 8010184:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010188:	4293      	cmp	r3, r2
 801018a:	d803      	bhi.n	8010194 <__any_on+0x36>
 801018c:	2000      	movs	r0, #0
 801018e:	bd10      	pop	{r4, pc}
 8010190:	4603      	mov	r3, r0
 8010192:	e7f7      	b.n	8010184 <__any_on+0x26>
 8010194:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010198:	2900      	cmp	r1, #0
 801019a:	d0f5      	beq.n	8010188 <__any_on+0x2a>
 801019c:	2001      	movs	r0, #1
 801019e:	e7f6      	b.n	801018e <__any_on+0x30>

080101a0 <sulp>:
 80101a0:	b570      	push	{r4, r5, r6, lr}
 80101a2:	4604      	mov	r4, r0
 80101a4:	460d      	mov	r5, r1
 80101a6:	ec45 4b10 	vmov	d0, r4, r5
 80101aa:	4616      	mov	r6, r2
 80101ac:	f7ff feba 	bl	800ff24 <__ulp>
 80101b0:	ec51 0b10 	vmov	r0, r1, d0
 80101b4:	b17e      	cbz	r6, 80101d6 <sulp+0x36>
 80101b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80101ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80101be:	2b00      	cmp	r3, #0
 80101c0:	dd09      	ble.n	80101d6 <sulp+0x36>
 80101c2:	051b      	lsls	r3, r3, #20
 80101c4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80101c8:	2400      	movs	r4, #0
 80101ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80101ce:	4622      	mov	r2, r4
 80101d0:	462b      	mov	r3, r5
 80101d2:	f7f0 fa21 	bl	8000618 <__aeabi_dmul>
 80101d6:	ec41 0b10 	vmov	d0, r0, r1
 80101da:	bd70      	pop	{r4, r5, r6, pc}
 80101dc:	0000      	movs	r0, r0
	...

080101e0 <_strtod_l>:
 80101e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e4:	b09f      	sub	sp, #124	@ 0x7c
 80101e6:	460c      	mov	r4, r1
 80101e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80101ea:	2200      	movs	r2, #0
 80101ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80101ee:	9005      	str	r0, [sp, #20]
 80101f0:	f04f 0a00 	mov.w	sl, #0
 80101f4:	f04f 0b00 	mov.w	fp, #0
 80101f8:	460a      	mov	r2, r1
 80101fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80101fc:	7811      	ldrb	r1, [r2, #0]
 80101fe:	292b      	cmp	r1, #43	@ 0x2b
 8010200:	d04a      	beq.n	8010298 <_strtod_l+0xb8>
 8010202:	d838      	bhi.n	8010276 <_strtod_l+0x96>
 8010204:	290d      	cmp	r1, #13
 8010206:	d832      	bhi.n	801026e <_strtod_l+0x8e>
 8010208:	2908      	cmp	r1, #8
 801020a:	d832      	bhi.n	8010272 <_strtod_l+0x92>
 801020c:	2900      	cmp	r1, #0
 801020e:	d03b      	beq.n	8010288 <_strtod_l+0xa8>
 8010210:	2200      	movs	r2, #0
 8010212:	920e      	str	r2, [sp, #56]	@ 0x38
 8010214:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010216:	782a      	ldrb	r2, [r5, #0]
 8010218:	2a30      	cmp	r2, #48	@ 0x30
 801021a:	f040 80b2 	bne.w	8010382 <_strtod_l+0x1a2>
 801021e:	786a      	ldrb	r2, [r5, #1]
 8010220:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010224:	2a58      	cmp	r2, #88	@ 0x58
 8010226:	d16e      	bne.n	8010306 <_strtod_l+0x126>
 8010228:	9302      	str	r3, [sp, #8]
 801022a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010230:	9300      	str	r3, [sp, #0]
 8010232:	4a8f      	ldr	r2, [pc, #572]	@ (8010470 <_strtod_l+0x290>)
 8010234:	9805      	ldr	r0, [sp, #20]
 8010236:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010238:	a919      	add	r1, sp, #100	@ 0x64
 801023a:	f001 f863 	bl	8011304 <__gethex>
 801023e:	f010 060f 	ands.w	r6, r0, #15
 8010242:	4604      	mov	r4, r0
 8010244:	d005      	beq.n	8010252 <_strtod_l+0x72>
 8010246:	2e06      	cmp	r6, #6
 8010248:	d128      	bne.n	801029c <_strtod_l+0xbc>
 801024a:	3501      	adds	r5, #1
 801024c:	2300      	movs	r3, #0
 801024e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010250:	930e      	str	r3, [sp, #56]	@ 0x38
 8010252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010254:	2b00      	cmp	r3, #0
 8010256:	f040 858e 	bne.w	8010d76 <_strtod_l+0xb96>
 801025a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801025c:	b1cb      	cbz	r3, 8010292 <_strtod_l+0xb2>
 801025e:	4652      	mov	r2, sl
 8010260:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010264:	ec43 2b10 	vmov	d0, r2, r3
 8010268:	b01f      	add	sp, #124	@ 0x7c
 801026a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801026e:	2920      	cmp	r1, #32
 8010270:	d1ce      	bne.n	8010210 <_strtod_l+0x30>
 8010272:	3201      	adds	r2, #1
 8010274:	e7c1      	b.n	80101fa <_strtod_l+0x1a>
 8010276:	292d      	cmp	r1, #45	@ 0x2d
 8010278:	d1ca      	bne.n	8010210 <_strtod_l+0x30>
 801027a:	2101      	movs	r1, #1
 801027c:	910e      	str	r1, [sp, #56]	@ 0x38
 801027e:	1c51      	adds	r1, r2, #1
 8010280:	9119      	str	r1, [sp, #100]	@ 0x64
 8010282:	7852      	ldrb	r2, [r2, #1]
 8010284:	2a00      	cmp	r2, #0
 8010286:	d1c5      	bne.n	8010214 <_strtod_l+0x34>
 8010288:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801028a:	9419      	str	r4, [sp, #100]	@ 0x64
 801028c:	2b00      	cmp	r3, #0
 801028e:	f040 8570 	bne.w	8010d72 <_strtod_l+0xb92>
 8010292:	4652      	mov	r2, sl
 8010294:	465b      	mov	r3, fp
 8010296:	e7e5      	b.n	8010264 <_strtod_l+0x84>
 8010298:	2100      	movs	r1, #0
 801029a:	e7ef      	b.n	801027c <_strtod_l+0x9c>
 801029c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801029e:	b13a      	cbz	r2, 80102b0 <_strtod_l+0xd0>
 80102a0:	2135      	movs	r1, #53	@ 0x35
 80102a2:	a81c      	add	r0, sp, #112	@ 0x70
 80102a4:	f7ff ff38 	bl	8010118 <__copybits>
 80102a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80102aa:	9805      	ldr	r0, [sp, #20]
 80102ac:	f7ff fb0e 	bl	800f8cc <_Bfree>
 80102b0:	3e01      	subs	r6, #1
 80102b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80102b4:	2e04      	cmp	r6, #4
 80102b6:	d806      	bhi.n	80102c6 <_strtod_l+0xe6>
 80102b8:	e8df f006 	tbb	[pc, r6]
 80102bc:	201d0314 	.word	0x201d0314
 80102c0:	14          	.byte	0x14
 80102c1:	00          	.byte	0x00
 80102c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80102c6:	05e1      	lsls	r1, r4, #23
 80102c8:	bf48      	it	mi
 80102ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80102ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80102d2:	0d1b      	lsrs	r3, r3, #20
 80102d4:	051b      	lsls	r3, r3, #20
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d1bb      	bne.n	8010252 <_strtod_l+0x72>
 80102da:	f7fe fbd3 	bl	800ea84 <__errno>
 80102de:	2322      	movs	r3, #34	@ 0x22
 80102e0:	6003      	str	r3, [r0, #0]
 80102e2:	e7b6      	b.n	8010252 <_strtod_l+0x72>
 80102e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80102e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80102ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80102f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80102f4:	e7e7      	b.n	80102c6 <_strtod_l+0xe6>
 80102f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010478 <_strtod_l+0x298>
 80102fa:	e7e4      	b.n	80102c6 <_strtod_l+0xe6>
 80102fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010300:	f04f 3aff 	mov.w	sl, #4294967295
 8010304:	e7df      	b.n	80102c6 <_strtod_l+0xe6>
 8010306:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010308:	1c5a      	adds	r2, r3, #1
 801030a:	9219      	str	r2, [sp, #100]	@ 0x64
 801030c:	785b      	ldrb	r3, [r3, #1]
 801030e:	2b30      	cmp	r3, #48	@ 0x30
 8010310:	d0f9      	beq.n	8010306 <_strtod_l+0x126>
 8010312:	2b00      	cmp	r3, #0
 8010314:	d09d      	beq.n	8010252 <_strtod_l+0x72>
 8010316:	2301      	movs	r3, #1
 8010318:	2700      	movs	r7, #0
 801031a:	9308      	str	r3, [sp, #32]
 801031c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801031e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010320:	970b      	str	r7, [sp, #44]	@ 0x2c
 8010322:	46b9      	mov	r9, r7
 8010324:	220a      	movs	r2, #10
 8010326:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010328:	7805      	ldrb	r5, [r0, #0]
 801032a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801032e:	b2d9      	uxtb	r1, r3
 8010330:	2909      	cmp	r1, #9
 8010332:	d928      	bls.n	8010386 <_strtod_l+0x1a6>
 8010334:	494f      	ldr	r1, [pc, #316]	@ (8010474 <_strtod_l+0x294>)
 8010336:	2201      	movs	r2, #1
 8010338:	f7fe fb21 	bl	800e97e <strncmp>
 801033c:	2800      	cmp	r0, #0
 801033e:	d032      	beq.n	80103a6 <_strtod_l+0x1c6>
 8010340:	2000      	movs	r0, #0
 8010342:	462a      	mov	r2, r5
 8010344:	900a      	str	r0, [sp, #40]	@ 0x28
 8010346:	464d      	mov	r5, r9
 8010348:	4603      	mov	r3, r0
 801034a:	2a65      	cmp	r2, #101	@ 0x65
 801034c:	d001      	beq.n	8010352 <_strtod_l+0x172>
 801034e:	2a45      	cmp	r2, #69	@ 0x45
 8010350:	d114      	bne.n	801037c <_strtod_l+0x19c>
 8010352:	b91d      	cbnz	r5, 801035c <_strtod_l+0x17c>
 8010354:	9a08      	ldr	r2, [sp, #32]
 8010356:	4302      	orrs	r2, r0
 8010358:	d096      	beq.n	8010288 <_strtod_l+0xa8>
 801035a:	2500      	movs	r5, #0
 801035c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801035e:	1c62      	adds	r2, r4, #1
 8010360:	9219      	str	r2, [sp, #100]	@ 0x64
 8010362:	7862      	ldrb	r2, [r4, #1]
 8010364:	2a2b      	cmp	r2, #43	@ 0x2b
 8010366:	d07a      	beq.n	801045e <_strtod_l+0x27e>
 8010368:	2a2d      	cmp	r2, #45	@ 0x2d
 801036a:	d07e      	beq.n	801046a <_strtod_l+0x28a>
 801036c:	f04f 0c00 	mov.w	ip, #0
 8010370:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010374:	2909      	cmp	r1, #9
 8010376:	f240 8085 	bls.w	8010484 <_strtod_l+0x2a4>
 801037a:	9419      	str	r4, [sp, #100]	@ 0x64
 801037c:	f04f 0800 	mov.w	r8, #0
 8010380:	e0a5      	b.n	80104ce <_strtod_l+0x2ee>
 8010382:	2300      	movs	r3, #0
 8010384:	e7c8      	b.n	8010318 <_strtod_l+0x138>
 8010386:	f1b9 0f08 	cmp.w	r9, #8
 801038a:	bfd8      	it	le
 801038c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801038e:	f100 0001 	add.w	r0, r0, #1
 8010392:	bfda      	itte	le
 8010394:	fb02 3301 	mlale	r3, r2, r1, r3
 8010398:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801039a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801039e:	f109 0901 	add.w	r9, r9, #1
 80103a2:	9019      	str	r0, [sp, #100]	@ 0x64
 80103a4:	e7bf      	b.n	8010326 <_strtod_l+0x146>
 80103a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80103a8:	1c5a      	adds	r2, r3, #1
 80103aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80103ac:	785a      	ldrb	r2, [r3, #1]
 80103ae:	f1b9 0f00 	cmp.w	r9, #0
 80103b2:	d03b      	beq.n	801042c <_strtod_l+0x24c>
 80103b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80103b6:	464d      	mov	r5, r9
 80103b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80103bc:	2b09      	cmp	r3, #9
 80103be:	d912      	bls.n	80103e6 <_strtod_l+0x206>
 80103c0:	2301      	movs	r3, #1
 80103c2:	e7c2      	b.n	801034a <_strtod_l+0x16a>
 80103c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80103c6:	1c5a      	adds	r2, r3, #1
 80103c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80103ca:	785a      	ldrb	r2, [r3, #1]
 80103cc:	3001      	adds	r0, #1
 80103ce:	2a30      	cmp	r2, #48	@ 0x30
 80103d0:	d0f8      	beq.n	80103c4 <_strtod_l+0x1e4>
 80103d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80103d6:	2b08      	cmp	r3, #8
 80103d8:	f200 84d2 	bhi.w	8010d80 <_strtod_l+0xba0>
 80103dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80103de:	900a      	str	r0, [sp, #40]	@ 0x28
 80103e0:	2000      	movs	r0, #0
 80103e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80103e4:	4605      	mov	r5, r0
 80103e6:	3a30      	subs	r2, #48	@ 0x30
 80103e8:	f100 0301 	add.w	r3, r0, #1
 80103ec:	d018      	beq.n	8010420 <_strtod_l+0x240>
 80103ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80103f0:	4419      	add	r1, r3
 80103f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80103f4:	462e      	mov	r6, r5
 80103f6:	f04f 0e0a 	mov.w	lr, #10
 80103fa:	1c71      	adds	r1, r6, #1
 80103fc:	eba1 0c05 	sub.w	ip, r1, r5
 8010400:	4563      	cmp	r3, ip
 8010402:	dc15      	bgt.n	8010430 <_strtod_l+0x250>
 8010404:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010408:	182b      	adds	r3, r5, r0
 801040a:	2b08      	cmp	r3, #8
 801040c:	f105 0501 	add.w	r5, r5, #1
 8010410:	4405      	add	r5, r0
 8010412:	dc1a      	bgt.n	801044a <_strtod_l+0x26a>
 8010414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010416:	230a      	movs	r3, #10
 8010418:	fb03 2301 	mla	r3, r3, r1, r2
 801041c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801041e:	2300      	movs	r3, #0
 8010420:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010422:	1c51      	adds	r1, r2, #1
 8010424:	9119      	str	r1, [sp, #100]	@ 0x64
 8010426:	7852      	ldrb	r2, [r2, #1]
 8010428:	4618      	mov	r0, r3
 801042a:	e7c5      	b.n	80103b8 <_strtod_l+0x1d8>
 801042c:	4648      	mov	r0, r9
 801042e:	e7ce      	b.n	80103ce <_strtod_l+0x1ee>
 8010430:	2e08      	cmp	r6, #8
 8010432:	dc05      	bgt.n	8010440 <_strtod_l+0x260>
 8010434:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010436:	fb0e f606 	mul.w	r6, lr, r6
 801043a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801043c:	460e      	mov	r6, r1
 801043e:	e7dc      	b.n	80103fa <_strtod_l+0x21a>
 8010440:	2910      	cmp	r1, #16
 8010442:	bfd8      	it	le
 8010444:	fb0e f707 	mulle.w	r7, lr, r7
 8010448:	e7f8      	b.n	801043c <_strtod_l+0x25c>
 801044a:	2b0f      	cmp	r3, #15
 801044c:	bfdc      	itt	le
 801044e:	230a      	movle	r3, #10
 8010450:	fb03 2707 	mlale	r7, r3, r7, r2
 8010454:	e7e3      	b.n	801041e <_strtod_l+0x23e>
 8010456:	2300      	movs	r3, #0
 8010458:	930a      	str	r3, [sp, #40]	@ 0x28
 801045a:	2301      	movs	r3, #1
 801045c:	e77a      	b.n	8010354 <_strtod_l+0x174>
 801045e:	f04f 0c00 	mov.w	ip, #0
 8010462:	1ca2      	adds	r2, r4, #2
 8010464:	9219      	str	r2, [sp, #100]	@ 0x64
 8010466:	78a2      	ldrb	r2, [r4, #2]
 8010468:	e782      	b.n	8010370 <_strtod_l+0x190>
 801046a:	f04f 0c01 	mov.w	ip, #1
 801046e:	e7f8      	b.n	8010462 <_strtod_l+0x282>
 8010470:	0803cffc 	.word	0x0803cffc
 8010474:	0803ce34 	.word	0x0803ce34
 8010478:	7ff00000 	.word	0x7ff00000
 801047c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801047e:	1c51      	adds	r1, r2, #1
 8010480:	9119      	str	r1, [sp, #100]	@ 0x64
 8010482:	7852      	ldrb	r2, [r2, #1]
 8010484:	2a30      	cmp	r2, #48	@ 0x30
 8010486:	d0f9      	beq.n	801047c <_strtod_l+0x29c>
 8010488:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801048c:	2908      	cmp	r1, #8
 801048e:	f63f af75 	bhi.w	801037c <_strtod_l+0x19c>
 8010492:	3a30      	subs	r2, #48	@ 0x30
 8010494:	9209      	str	r2, [sp, #36]	@ 0x24
 8010496:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010498:	920f      	str	r2, [sp, #60]	@ 0x3c
 801049a:	f04f 080a 	mov.w	r8, #10
 801049e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80104a0:	1c56      	adds	r6, r2, #1
 80104a2:	9619      	str	r6, [sp, #100]	@ 0x64
 80104a4:	7852      	ldrb	r2, [r2, #1]
 80104a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80104aa:	f1be 0f09 	cmp.w	lr, #9
 80104ae:	d939      	bls.n	8010524 <_strtod_l+0x344>
 80104b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80104b2:	1a76      	subs	r6, r6, r1
 80104b4:	2e08      	cmp	r6, #8
 80104b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80104ba:	dc03      	bgt.n	80104c4 <_strtod_l+0x2e4>
 80104bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80104be:	4588      	cmp	r8, r1
 80104c0:	bfa8      	it	ge
 80104c2:	4688      	movge	r8, r1
 80104c4:	f1bc 0f00 	cmp.w	ip, #0
 80104c8:	d001      	beq.n	80104ce <_strtod_l+0x2ee>
 80104ca:	f1c8 0800 	rsb	r8, r8, #0
 80104ce:	2d00      	cmp	r5, #0
 80104d0:	d14e      	bne.n	8010570 <_strtod_l+0x390>
 80104d2:	9908      	ldr	r1, [sp, #32]
 80104d4:	4308      	orrs	r0, r1
 80104d6:	f47f aebc 	bne.w	8010252 <_strtod_l+0x72>
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f47f aed4 	bne.w	8010288 <_strtod_l+0xa8>
 80104e0:	2a69      	cmp	r2, #105	@ 0x69
 80104e2:	d028      	beq.n	8010536 <_strtod_l+0x356>
 80104e4:	dc25      	bgt.n	8010532 <_strtod_l+0x352>
 80104e6:	2a49      	cmp	r2, #73	@ 0x49
 80104e8:	d025      	beq.n	8010536 <_strtod_l+0x356>
 80104ea:	2a4e      	cmp	r2, #78	@ 0x4e
 80104ec:	f47f aecc 	bne.w	8010288 <_strtod_l+0xa8>
 80104f0:	499a      	ldr	r1, [pc, #616]	@ (801075c <_strtod_l+0x57c>)
 80104f2:	a819      	add	r0, sp, #100	@ 0x64
 80104f4:	f001 f928 	bl	8011748 <__match>
 80104f8:	2800      	cmp	r0, #0
 80104fa:	f43f aec5 	beq.w	8010288 <_strtod_l+0xa8>
 80104fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	2b28      	cmp	r3, #40	@ 0x28
 8010504:	d12e      	bne.n	8010564 <_strtod_l+0x384>
 8010506:	4996      	ldr	r1, [pc, #600]	@ (8010760 <_strtod_l+0x580>)
 8010508:	aa1c      	add	r2, sp, #112	@ 0x70
 801050a:	a819      	add	r0, sp, #100	@ 0x64
 801050c:	f001 f930 	bl	8011770 <__hexnan>
 8010510:	2805      	cmp	r0, #5
 8010512:	d127      	bne.n	8010564 <_strtod_l+0x384>
 8010514:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010516:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801051a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801051e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010522:	e696      	b.n	8010252 <_strtod_l+0x72>
 8010524:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010526:	fb08 2101 	mla	r1, r8, r1, r2
 801052a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801052e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010530:	e7b5      	b.n	801049e <_strtod_l+0x2be>
 8010532:	2a6e      	cmp	r2, #110	@ 0x6e
 8010534:	e7da      	b.n	80104ec <_strtod_l+0x30c>
 8010536:	498b      	ldr	r1, [pc, #556]	@ (8010764 <_strtod_l+0x584>)
 8010538:	a819      	add	r0, sp, #100	@ 0x64
 801053a:	f001 f905 	bl	8011748 <__match>
 801053e:	2800      	cmp	r0, #0
 8010540:	f43f aea2 	beq.w	8010288 <_strtod_l+0xa8>
 8010544:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010546:	4988      	ldr	r1, [pc, #544]	@ (8010768 <_strtod_l+0x588>)
 8010548:	3b01      	subs	r3, #1
 801054a:	a819      	add	r0, sp, #100	@ 0x64
 801054c:	9319      	str	r3, [sp, #100]	@ 0x64
 801054e:	f001 f8fb 	bl	8011748 <__match>
 8010552:	b910      	cbnz	r0, 801055a <_strtod_l+0x37a>
 8010554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010556:	3301      	adds	r3, #1
 8010558:	9319      	str	r3, [sp, #100]	@ 0x64
 801055a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8010778 <_strtod_l+0x598>
 801055e:	f04f 0a00 	mov.w	sl, #0
 8010562:	e676      	b.n	8010252 <_strtod_l+0x72>
 8010564:	4881      	ldr	r0, [pc, #516]	@ (801076c <_strtod_l+0x58c>)
 8010566:	f000 fe2b 	bl	80111c0 <nan>
 801056a:	ec5b ab10 	vmov	sl, fp, d0
 801056e:	e670      	b.n	8010252 <_strtod_l+0x72>
 8010570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010572:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010574:	eba8 0303 	sub.w	r3, r8, r3
 8010578:	f1b9 0f00 	cmp.w	r9, #0
 801057c:	bf08      	it	eq
 801057e:	46a9      	moveq	r9, r5
 8010580:	2d10      	cmp	r5, #16
 8010582:	9309      	str	r3, [sp, #36]	@ 0x24
 8010584:	462c      	mov	r4, r5
 8010586:	bfa8      	it	ge
 8010588:	2410      	movge	r4, #16
 801058a:	f7ef ffcb 	bl	8000524 <__aeabi_ui2d>
 801058e:	2d09      	cmp	r5, #9
 8010590:	4682      	mov	sl, r0
 8010592:	468b      	mov	fp, r1
 8010594:	dc13      	bgt.n	80105be <_strtod_l+0x3de>
 8010596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010598:	2b00      	cmp	r3, #0
 801059a:	f43f ae5a 	beq.w	8010252 <_strtod_l+0x72>
 801059e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105a0:	dd78      	ble.n	8010694 <_strtod_l+0x4b4>
 80105a2:	2b16      	cmp	r3, #22
 80105a4:	dc5f      	bgt.n	8010666 <_strtod_l+0x486>
 80105a6:	4972      	ldr	r1, [pc, #456]	@ (8010770 <_strtod_l+0x590>)
 80105a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80105ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105b0:	4652      	mov	r2, sl
 80105b2:	465b      	mov	r3, fp
 80105b4:	f7f0 f830 	bl	8000618 <__aeabi_dmul>
 80105b8:	4682      	mov	sl, r0
 80105ba:	468b      	mov	fp, r1
 80105bc:	e649      	b.n	8010252 <_strtod_l+0x72>
 80105be:	4b6c      	ldr	r3, [pc, #432]	@ (8010770 <_strtod_l+0x590>)
 80105c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80105c8:	f7f0 f826 	bl	8000618 <__aeabi_dmul>
 80105cc:	4682      	mov	sl, r0
 80105ce:	4638      	mov	r0, r7
 80105d0:	468b      	mov	fp, r1
 80105d2:	f7ef ffa7 	bl	8000524 <__aeabi_ui2d>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	4650      	mov	r0, sl
 80105dc:	4659      	mov	r1, fp
 80105de:	f7ef fe65 	bl	80002ac <__adddf3>
 80105e2:	2d0f      	cmp	r5, #15
 80105e4:	4682      	mov	sl, r0
 80105e6:	468b      	mov	fp, r1
 80105e8:	ddd5      	ble.n	8010596 <_strtod_l+0x3b6>
 80105ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105ec:	1b2c      	subs	r4, r5, r4
 80105ee:	441c      	add	r4, r3
 80105f0:	2c00      	cmp	r4, #0
 80105f2:	f340 8093 	ble.w	801071c <_strtod_l+0x53c>
 80105f6:	f014 030f 	ands.w	r3, r4, #15
 80105fa:	d00a      	beq.n	8010612 <_strtod_l+0x432>
 80105fc:	495c      	ldr	r1, [pc, #368]	@ (8010770 <_strtod_l+0x590>)
 80105fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010602:	4652      	mov	r2, sl
 8010604:	465b      	mov	r3, fp
 8010606:	e9d1 0100 	ldrd	r0, r1, [r1]
 801060a:	f7f0 f805 	bl	8000618 <__aeabi_dmul>
 801060e:	4682      	mov	sl, r0
 8010610:	468b      	mov	fp, r1
 8010612:	f034 040f 	bics.w	r4, r4, #15
 8010616:	d073      	beq.n	8010700 <_strtod_l+0x520>
 8010618:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801061c:	dd49      	ble.n	80106b2 <_strtod_l+0x4d2>
 801061e:	2400      	movs	r4, #0
 8010620:	46a0      	mov	r8, r4
 8010622:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010624:	46a1      	mov	r9, r4
 8010626:	9a05      	ldr	r2, [sp, #20]
 8010628:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8010778 <_strtod_l+0x598>
 801062c:	2322      	movs	r3, #34	@ 0x22
 801062e:	6013      	str	r3, [r2, #0]
 8010630:	f04f 0a00 	mov.w	sl, #0
 8010634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010636:	2b00      	cmp	r3, #0
 8010638:	f43f ae0b 	beq.w	8010252 <_strtod_l+0x72>
 801063c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801063e:	9805      	ldr	r0, [sp, #20]
 8010640:	f7ff f944 	bl	800f8cc <_Bfree>
 8010644:	9805      	ldr	r0, [sp, #20]
 8010646:	4649      	mov	r1, r9
 8010648:	f7ff f940 	bl	800f8cc <_Bfree>
 801064c:	9805      	ldr	r0, [sp, #20]
 801064e:	4641      	mov	r1, r8
 8010650:	f7ff f93c 	bl	800f8cc <_Bfree>
 8010654:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010656:	9805      	ldr	r0, [sp, #20]
 8010658:	f7ff f938 	bl	800f8cc <_Bfree>
 801065c:	9805      	ldr	r0, [sp, #20]
 801065e:	4621      	mov	r1, r4
 8010660:	f7ff f934 	bl	800f8cc <_Bfree>
 8010664:	e5f5      	b.n	8010252 <_strtod_l+0x72>
 8010666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010668:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801066c:	4293      	cmp	r3, r2
 801066e:	dbbc      	blt.n	80105ea <_strtod_l+0x40a>
 8010670:	4c3f      	ldr	r4, [pc, #252]	@ (8010770 <_strtod_l+0x590>)
 8010672:	f1c5 050f 	rsb	r5, r5, #15
 8010676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801067a:	4652      	mov	r2, sl
 801067c:	465b      	mov	r3, fp
 801067e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010682:	f7ef ffc9 	bl	8000618 <__aeabi_dmul>
 8010686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010688:	1b5d      	subs	r5, r3, r5
 801068a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801068e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010692:	e78f      	b.n	80105b4 <_strtod_l+0x3d4>
 8010694:	3316      	adds	r3, #22
 8010696:	dba8      	blt.n	80105ea <_strtod_l+0x40a>
 8010698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801069a:	eba3 0808 	sub.w	r8, r3, r8
 801069e:	4b34      	ldr	r3, [pc, #208]	@ (8010770 <_strtod_l+0x590>)
 80106a0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80106a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80106a8:	4650      	mov	r0, sl
 80106aa:	4659      	mov	r1, fp
 80106ac:	f7f0 f8de 	bl	800086c <__aeabi_ddiv>
 80106b0:	e782      	b.n	80105b8 <_strtod_l+0x3d8>
 80106b2:	2300      	movs	r3, #0
 80106b4:	4f2f      	ldr	r7, [pc, #188]	@ (8010774 <_strtod_l+0x594>)
 80106b6:	1124      	asrs	r4, r4, #4
 80106b8:	4650      	mov	r0, sl
 80106ba:	4659      	mov	r1, fp
 80106bc:	461e      	mov	r6, r3
 80106be:	2c01      	cmp	r4, #1
 80106c0:	dc21      	bgt.n	8010706 <_strtod_l+0x526>
 80106c2:	b10b      	cbz	r3, 80106c8 <_strtod_l+0x4e8>
 80106c4:	4682      	mov	sl, r0
 80106c6:	468b      	mov	fp, r1
 80106c8:	492a      	ldr	r1, [pc, #168]	@ (8010774 <_strtod_l+0x594>)
 80106ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80106ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80106d2:	4652      	mov	r2, sl
 80106d4:	465b      	mov	r3, fp
 80106d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106da:	f7ef ff9d 	bl	8000618 <__aeabi_dmul>
 80106de:	4b26      	ldr	r3, [pc, #152]	@ (8010778 <_strtod_l+0x598>)
 80106e0:	460a      	mov	r2, r1
 80106e2:	400b      	ands	r3, r1
 80106e4:	4925      	ldr	r1, [pc, #148]	@ (801077c <_strtod_l+0x59c>)
 80106e6:	428b      	cmp	r3, r1
 80106e8:	4682      	mov	sl, r0
 80106ea:	d898      	bhi.n	801061e <_strtod_l+0x43e>
 80106ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80106f0:	428b      	cmp	r3, r1
 80106f2:	bf86      	itte	hi
 80106f4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8010780 <_strtod_l+0x5a0>
 80106f8:	f04f 3aff 	movhi.w	sl, #4294967295
 80106fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010700:	2300      	movs	r3, #0
 8010702:	9308      	str	r3, [sp, #32]
 8010704:	e076      	b.n	80107f4 <_strtod_l+0x614>
 8010706:	07e2      	lsls	r2, r4, #31
 8010708:	d504      	bpl.n	8010714 <_strtod_l+0x534>
 801070a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801070e:	f7ef ff83 	bl	8000618 <__aeabi_dmul>
 8010712:	2301      	movs	r3, #1
 8010714:	3601      	adds	r6, #1
 8010716:	1064      	asrs	r4, r4, #1
 8010718:	3708      	adds	r7, #8
 801071a:	e7d0      	b.n	80106be <_strtod_l+0x4de>
 801071c:	d0f0      	beq.n	8010700 <_strtod_l+0x520>
 801071e:	4264      	negs	r4, r4
 8010720:	f014 020f 	ands.w	r2, r4, #15
 8010724:	d00a      	beq.n	801073c <_strtod_l+0x55c>
 8010726:	4b12      	ldr	r3, [pc, #72]	@ (8010770 <_strtod_l+0x590>)
 8010728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801072c:	4650      	mov	r0, sl
 801072e:	4659      	mov	r1, fp
 8010730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010734:	f7f0 f89a 	bl	800086c <__aeabi_ddiv>
 8010738:	4682      	mov	sl, r0
 801073a:	468b      	mov	fp, r1
 801073c:	1124      	asrs	r4, r4, #4
 801073e:	d0df      	beq.n	8010700 <_strtod_l+0x520>
 8010740:	2c1f      	cmp	r4, #31
 8010742:	dd1f      	ble.n	8010784 <_strtod_l+0x5a4>
 8010744:	2400      	movs	r4, #0
 8010746:	46a0      	mov	r8, r4
 8010748:	940b      	str	r4, [sp, #44]	@ 0x2c
 801074a:	46a1      	mov	r9, r4
 801074c:	9a05      	ldr	r2, [sp, #20]
 801074e:	2322      	movs	r3, #34	@ 0x22
 8010750:	f04f 0a00 	mov.w	sl, #0
 8010754:	f04f 0b00 	mov.w	fp, #0
 8010758:	6013      	str	r3, [r2, #0]
 801075a:	e76b      	b.n	8010634 <_strtod_l+0x454>
 801075c:	0803cd22 	.word	0x0803cd22
 8010760:	0803cfe8 	.word	0x0803cfe8
 8010764:	0803cd1a 	.word	0x0803cd1a
 8010768:	0803cd51 	.word	0x0803cd51
 801076c:	0803ce8a 	.word	0x0803ce8a
 8010770:	0803cf20 	.word	0x0803cf20
 8010774:	0803cef8 	.word	0x0803cef8
 8010778:	7ff00000 	.word	0x7ff00000
 801077c:	7ca00000 	.word	0x7ca00000
 8010780:	7fefffff 	.word	0x7fefffff
 8010784:	f014 0310 	ands.w	r3, r4, #16
 8010788:	bf18      	it	ne
 801078a:	236a      	movne	r3, #106	@ 0x6a
 801078c:	4ea9      	ldr	r6, [pc, #676]	@ (8010a34 <_strtod_l+0x854>)
 801078e:	9308      	str	r3, [sp, #32]
 8010790:	4650      	mov	r0, sl
 8010792:	4659      	mov	r1, fp
 8010794:	2300      	movs	r3, #0
 8010796:	07e7      	lsls	r7, r4, #31
 8010798:	d504      	bpl.n	80107a4 <_strtod_l+0x5c4>
 801079a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801079e:	f7ef ff3b 	bl	8000618 <__aeabi_dmul>
 80107a2:	2301      	movs	r3, #1
 80107a4:	1064      	asrs	r4, r4, #1
 80107a6:	f106 0608 	add.w	r6, r6, #8
 80107aa:	d1f4      	bne.n	8010796 <_strtod_l+0x5b6>
 80107ac:	b10b      	cbz	r3, 80107b2 <_strtod_l+0x5d2>
 80107ae:	4682      	mov	sl, r0
 80107b0:	468b      	mov	fp, r1
 80107b2:	9b08      	ldr	r3, [sp, #32]
 80107b4:	b1b3      	cbz	r3, 80107e4 <_strtod_l+0x604>
 80107b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80107ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80107be:	2b00      	cmp	r3, #0
 80107c0:	4659      	mov	r1, fp
 80107c2:	dd0f      	ble.n	80107e4 <_strtod_l+0x604>
 80107c4:	2b1f      	cmp	r3, #31
 80107c6:	dd56      	ble.n	8010876 <_strtod_l+0x696>
 80107c8:	2b34      	cmp	r3, #52	@ 0x34
 80107ca:	bfde      	ittt	le
 80107cc:	f04f 33ff 	movle.w	r3, #4294967295
 80107d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80107d4:	4093      	lslle	r3, r2
 80107d6:	f04f 0a00 	mov.w	sl, #0
 80107da:	bfcc      	ite	gt
 80107dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80107e0:	ea03 0b01 	andle.w	fp, r3, r1
 80107e4:	2200      	movs	r2, #0
 80107e6:	2300      	movs	r3, #0
 80107e8:	4650      	mov	r0, sl
 80107ea:	4659      	mov	r1, fp
 80107ec:	f7f0 f97c 	bl	8000ae8 <__aeabi_dcmpeq>
 80107f0:	2800      	cmp	r0, #0
 80107f2:	d1a7      	bne.n	8010744 <_strtod_l+0x564>
 80107f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80107fa:	9805      	ldr	r0, [sp, #20]
 80107fc:	462b      	mov	r3, r5
 80107fe:	464a      	mov	r2, r9
 8010800:	f7ff f8cc 	bl	800f99c <__s2b>
 8010804:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010806:	2800      	cmp	r0, #0
 8010808:	f43f af09 	beq.w	801061e <_strtod_l+0x43e>
 801080c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801080e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010810:	2a00      	cmp	r2, #0
 8010812:	eba3 0308 	sub.w	r3, r3, r8
 8010816:	bfa8      	it	ge
 8010818:	2300      	movge	r3, #0
 801081a:	9312      	str	r3, [sp, #72]	@ 0x48
 801081c:	2400      	movs	r4, #0
 801081e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010822:	9316      	str	r3, [sp, #88]	@ 0x58
 8010824:	46a0      	mov	r8, r4
 8010826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010828:	9805      	ldr	r0, [sp, #20]
 801082a:	6859      	ldr	r1, [r3, #4]
 801082c:	f7ff f80e 	bl	800f84c <_Balloc>
 8010830:	4681      	mov	r9, r0
 8010832:	2800      	cmp	r0, #0
 8010834:	f43f aef7 	beq.w	8010626 <_strtod_l+0x446>
 8010838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801083a:	691a      	ldr	r2, [r3, #16]
 801083c:	3202      	adds	r2, #2
 801083e:	f103 010c 	add.w	r1, r3, #12
 8010842:	0092      	lsls	r2, r2, #2
 8010844:	300c      	adds	r0, #12
 8010846:	f7fe f94a 	bl	800eade <memcpy>
 801084a:	ec4b ab10 	vmov	d0, sl, fp
 801084e:	9805      	ldr	r0, [sp, #20]
 8010850:	aa1c      	add	r2, sp, #112	@ 0x70
 8010852:	a91b      	add	r1, sp, #108	@ 0x6c
 8010854:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010858:	f7ff fbd4 	bl	8010004 <__d2b>
 801085c:	901a      	str	r0, [sp, #104]	@ 0x68
 801085e:	2800      	cmp	r0, #0
 8010860:	f43f aee1 	beq.w	8010626 <_strtod_l+0x446>
 8010864:	9805      	ldr	r0, [sp, #20]
 8010866:	2101      	movs	r1, #1
 8010868:	f7ff f92e 	bl	800fac8 <__i2b>
 801086c:	4680      	mov	r8, r0
 801086e:	b948      	cbnz	r0, 8010884 <_strtod_l+0x6a4>
 8010870:	f04f 0800 	mov.w	r8, #0
 8010874:	e6d7      	b.n	8010626 <_strtod_l+0x446>
 8010876:	f04f 32ff 	mov.w	r2, #4294967295
 801087a:	fa02 f303 	lsl.w	r3, r2, r3
 801087e:	ea03 0a0a 	and.w	sl, r3, sl
 8010882:	e7af      	b.n	80107e4 <_strtod_l+0x604>
 8010884:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010886:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010888:	2d00      	cmp	r5, #0
 801088a:	bfab      	itete	ge
 801088c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801088e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010890:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010892:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010894:	bfac      	ite	ge
 8010896:	18ef      	addge	r7, r5, r3
 8010898:	1b5e      	sublt	r6, r3, r5
 801089a:	9b08      	ldr	r3, [sp, #32]
 801089c:	1aed      	subs	r5, r5, r3
 801089e:	4415      	add	r5, r2
 80108a0:	4b65      	ldr	r3, [pc, #404]	@ (8010a38 <_strtod_l+0x858>)
 80108a2:	3d01      	subs	r5, #1
 80108a4:	429d      	cmp	r5, r3
 80108a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80108aa:	da50      	bge.n	801094e <_strtod_l+0x76e>
 80108ac:	1b5b      	subs	r3, r3, r5
 80108ae:	2b1f      	cmp	r3, #31
 80108b0:	eba2 0203 	sub.w	r2, r2, r3
 80108b4:	f04f 0101 	mov.w	r1, #1
 80108b8:	dc3d      	bgt.n	8010936 <_strtod_l+0x756>
 80108ba:	fa01 f303 	lsl.w	r3, r1, r3
 80108be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80108c0:	2300      	movs	r3, #0
 80108c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80108c4:	18bd      	adds	r5, r7, r2
 80108c6:	9b08      	ldr	r3, [sp, #32]
 80108c8:	42af      	cmp	r7, r5
 80108ca:	4416      	add	r6, r2
 80108cc:	441e      	add	r6, r3
 80108ce:	463b      	mov	r3, r7
 80108d0:	bfa8      	it	ge
 80108d2:	462b      	movge	r3, r5
 80108d4:	42b3      	cmp	r3, r6
 80108d6:	bfa8      	it	ge
 80108d8:	4633      	movge	r3, r6
 80108da:	2b00      	cmp	r3, #0
 80108dc:	bfc2      	ittt	gt
 80108de:	1aed      	subgt	r5, r5, r3
 80108e0:	1af6      	subgt	r6, r6, r3
 80108e2:	1aff      	subgt	r7, r7, r3
 80108e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	dd16      	ble.n	8010918 <_strtod_l+0x738>
 80108ea:	4641      	mov	r1, r8
 80108ec:	9805      	ldr	r0, [sp, #20]
 80108ee:	461a      	mov	r2, r3
 80108f0:	f7ff f9a2 	bl	800fc38 <__pow5mult>
 80108f4:	4680      	mov	r8, r0
 80108f6:	2800      	cmp	r0, #0
 80108f8:	d0ba      	beq.n	8010870 <_strtod_l+0x690>
 80108fa:	4601      	mov	r1, r0
 80108fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80108fe:	9805      	ldr	r0, [sp, #20]
 8010900:	f7ff f8f8 	bl	800faf4 <__multiply>
 8010904:	900a      	str	r0, [sp, #40]	@ 0x28
 8010906:	2800      	cmp	r0, #0
 8010908:	f43f ae8d 	beq.w	8010626 <_strtod_l+0x446>
 801090c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801090e:	9805      	ldr	r0, [sp, #20]
 8010910:	f7fe ffdc 	bl	800f8cc <_Bfree>
 8010914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010916:	931a      	str	r3, [sp, #104]	@ 0x68
 8010918:	2d00      	cmp	r5, #0
 801091a:	dc1d      	bgt.n	8010958 <_strtod_l+0x778>
 801091c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801091e:	2b00      	cmp	r3, #0
 8010920:	dd23      	ble.n	801096a <_strtod_l+0x78a>
 8010922:	4649      	mov	r1, r9
 8010924:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010926:	9805      	ldr	r0, [sp, #20]
 8010928:	f7ff f986 	bl	800fc38 <__pow5mult>
 801092c:	4681      	mov	r9, r0
 801092e:	b9e0      	cbnz	r0, 801096a <_strtod_l+0x78a>
 8010930:	f04f 0900 	mov.w	r9, #0
 8010934:	e677      	b.n	8010626 <_strtod_l+0x446>
 8010936:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801093a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801093e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010942:	35e2      	adds	r5, #226	@ 0xe2
 8010944:	fa01 f305 	lsl.w	r3, r1, r5
 8010948:	9310      	str	r3, [sp, #64]	@ 0x40
 801094a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801094c:	e7ba      	b.n	80108c4 <_strtod_l+0x6e4>
 801094e:	2300      	movs	r3, #0
 8010950:	9310      	str	r3, [sp, #64]	@ 0x40
 8010952:	2301      	movs	r3, #1
 8010954:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010956:	e7b5      	b.n	80108c4 <_strtod_l+0x6e4>
 8010958:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801095a:	9805      	ldr	r0, [sp, #20]
 801095c:	462a      	mov	r2, r5
 801095e:	f7ff f9c5 	bl	800fcec <__lshift>
 8010962:	901a      	str	r0, [sp, #104]	@ 0x68
 8010964:	2800      	cmp	r0, #0
 8010966:	d1d9      	bne.n	801091c <_strtod_l+0x73c>
 8010968:	e65d      	b.n	8010626 <_strtod_l+0x446>
 801096a:	2e00      	cmp	r6, #0
 801096c:	dd07      	ble.n	801097e <_strtod_l+0x79e>
 801096e:	4649      	mov	r1, r9
 8010970:	9805      	ldr	r0, [sp, #20]
 8010972:	4632      	mov	r2, r6
 8010974:	f7ff f9ba 	bl	800fcec <__lshift>
 8010978:	4681      	mov	r9, r0
 801097a:	2800      	cmp	r0, #0
 801097c:	d0d8      	beq.n	8010930 <_strtod_l+0x750>
 801097e:	2f00      	cmp	r7, #0
 8010980:	dd08      	ble.n	8010994 <_strtod_l+0x7b4>
 8010982:	4641      	mov	r1, r8
 8010984:	9805      	ldr	r0, [sp, #20]
 8010986:	463a      	mov	r2, r7
 8010988:	f7ff f9b0 	bl	800fcec <__lshift>
 801098c:	4680      	mov	r8, r0
 801098e:	2800      	cmp	r0, #0
 8010990:	f43f ae49 	beq.w	8010626 <_strtod_l+0x446>
 8010994:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010996:	9805      	ldr	r0, [sp, #20]
 8010998:	464a      	mov	r2, r9
 801099a:	f7ff fa2f 	bl	800fdfc <__mdiff>
 801099e:	4604      	mov	r4, r0
 80109a0:	2800      	cmp	r0, #0
 80109a2:	f43f ae40 	beq.w	8010626 <_strtod_l+0x446>
 80109a6:	68c3      	ldr	r3, [r0, #12]
 80109a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80109aa:	2300      	movs	r3, #0
 80109ac:	60c3      	str	r3, [r0, #12]
 80109ae:	4641      	mov	r1, r8
 80109b0:	f7ff fa08 	bl	800fdc4 <__mcmp>
 80109b4:	2800      	cmp	r0, #0
 80109b6:	da45      	bge.n	8010a44 <_strtod_l+0x864>
 80109b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ba:	ea53 030a 	orrs.w	r3, r3, sl
 80109be:	d16b      	bne.n	8010a98 <_strtod_l+0x8b8>
 80109c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d167      	bne.n	8010a98 <_strtod_l+0x8b8>
 80109c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80109cc:	0d1b      	lsrs	r3, r3, #20
 80109ce:	051b      	lsls	r3, r3, #20
 80109d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80109d4:	d960      	bls.n	8010a98 <_strtod_l+0x8b8>
 80109d6:	6963      	ldr	r3, [r4, #20]
 80109d8:	b913      	cbnz	r3, 80109e0 <_strtod_l+0x800>
 80109da:	6923      	ldr	r3, [r4, #16]
 80109dc:	2b01      	cmp	r3, #1
 80109de:	dd5b      	ble.n	8010a98 <_strtod_l+0x8b8>
 80109e0:	4621      	mov	r1, r4
 80109e2:	2201      	movs	r2, #1
 80109e4:	9805      	ldr	r0, [sp, #20]
 80109e6:	f7ff f981 	bl	800fcec <__lshift>
 80109ea:	4641      	mov	r1, r8
 80109ec:	4604      	mov	r4, r0
 80109ee:	f7ff f9e9 	bl	800fdc4 <__mcmp>
 80109f2:	2800      	cmp	r0, #0
 80109f4:	dd50      	ble.n	8010a98 <_strtod_l+0x8b8>
 80109f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80109fa:	9a08      	ldr	r2, [sp, #32]
 80109fc:	0d1b      	lsrs	r3, r3, #20
 80109fe:	051b      	lsls	r3, r3, #20
 8010a00:	2a00      	cmp	r2, #0
 8010a02:	d06a      	beq.n	8010ada <_strtod_l+0x8fa>
 8010a04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010a08:	d867      	bhi.n	8010ada <_strtod_l+0x8fa>
 8010a0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010a0e:	f67f ae9d 	bls.w	801074c <_strtod_l+0x56c>
 8010a12:	4b0a      	ldr	r3, [pc, #40]	@ (8010a3c <_strtod_l+0x85c>)
 8010a14:	4650      	mov	r0, sl
 8010a16:	4659      	mov	r1, fp
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f7ef fdfd 	bl	8000618 <__aeabi_dmul>
 8010a1e:	4b08      	ldr	r3, [pc, #32]	@ (8010a40 <_strtod_l+0x860>)
 8010a20:	400b      	ands	r3, r1
 8010a22:	4682      	mov	sl, r0
 8010a24:	468b      	mov	fp, r1
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f47f ae08 	bne.w	801063c <_strtod_l+0x45c>
 8010a2c:	9a05      	ldr	r2, [sp, #20]
 8010a2e:	2322      	movs	r3, #34	@ 0x22
 8010a30:	6013      	str	r3, [r2, #0]
 8010a32:	e603      	b.n	801063c <_strtod_l+0x45c>
 8010a34:	0803d010 	.word	0x0803d010
 8010a38:	fffffc02 	.word	0xfffffc02
 8010a3c:	39500000 	.word	0x39500000
 8010a40:	7ff00000 	.word	0x7ff00000
 8010a44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010a48:	d165      	bne.n	8010b16 <_strtod_l+0x936>
 8010a4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a50:	b35a      	cbz	r2, 8010aaa <_strtod_l+0x8ca>
 8010a52:	4a9f      	ldr	r2, [pc, #636]	@ (8010cd0 <_strtod_l+0xaf0>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d12b      	bne.n	8010ab0 <_strtod_l+0x8d0>
 8010a58:	9b08      	ldr	r3, [sp, #32]
 8010a5a:	4651      	mov	r1, sl
 8010a5c:	b303      	cbz	r3, 8010aa0 <_strtod_l+0x8c0>
 8010a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8010cd4 <_strtod_l+0xaf4>)
 8010a60:	465a      	mov	r2, fp
 8010a62:	4013      	ands	r3, r2
 8010a64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010a68:	f04f 32ff 	mov.w	r2, #4294967295
 8010a6c:	d81b      	bhi.n	8010aa6 <_strtod_l+0x8c6>
 8010a6e:	0d1b      	lsrs	r3, r3, #20
 8010a70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010a74:	fa02 f303 	lsl.w	r3, r2, r3
 8010a78:	4299      	cmp	r1, r3
 8010a7a:	d119      	bne.n	8010ab0 <_strtod_l+0x8d0>
 8010a7c:	4b96      	ldr	r3, [pc, #600]	@ (8010cd8 <_strtod_l+0xaf8>)
 8010a7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d102      	bne.n	8010a8a <_strtod_l+0x8aa>
 8010a84:	3101      	adds	r1, #1
 8010a86:	f43f adce 	beq.w	8010626 <_strtod_l+0x446>
 8010a8a:	4b92      	ldr	r3, [pc, #584]	@ (8010cd4 <_strtod_l+0xaf4>)
 8010a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a8e:	401a      	ands	r2, r3
 8010a90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010a94:	f04f 0a00 	mov.w	sl, #0
 8010a98:	9b08      	ldr	r3, [sp, #32]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d1b9      	bne.n	8010a12 <_strtod_l+0x832>
 8010a9e:	e5cd      	b.n	801063c <_strtod_l+0x45c>
 8010aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa4:	e7e8      	b.n	8010a78 <_strtod_l+0x898>
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	e7e6      	b.n	8010a78 <_strtod_l+0x898>
 8010aaa:	ea53 030a 	orrs.w	r3, r3, sl
 8010aae:	d0a2      	beq.n	80109f6 <_strtod_l+0x816>
 8010ab0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ab2:	b1db      	cbz	r3, 8010aec <_strtod_l+0x90c>
 8010ab4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010ab6:	4213      	tst	r3, r2
 8010ab8:	d0ee      	beq.n	8010a98 <_strtod_l+0x8b8>
 8010aba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010abc:	9a08      	ldr	r2, [sp, #32]
 8010abe:	4650      	mov	r0, sl
 8010ac0:	4659      	mov	r1, fp
 8010ac2:	b1bb      	cbz	r3, 8010af4 <_strtod_l+0x914>
 8010ac4:	f7ff fb6c 	bl	80101a0 <sulp>
 8010ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010acc:	ec53 2b10 	vmov	r2, r3, d0
 8010ad0:	f7ef fbec 	bl	80002ac <__adddf3>
 8010ad4:	4682      	mov	sl, r0
 8010ad6:	468b      	mov	fp, r1
 8010ad8:	e7de      	b.n	8010a98 <_strtod_l+0x8b8>
 8010ada:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010ade:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010ae2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010ae6:	f04f 3aff 	mov.w	sl, #4294967295
 8010aea:	e7d5      	b.n	8010a98 <_strtod_l+0x8b8>
 8010aec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010aee:	ea13 0f0a 	tst.w	r3, sl
 8010af2:	e7e1      	b.n	8010ab8 <_strtod_l+0x8d8>
 8010af4:	f7ff fb54 	bl	80101a0 <sulp>
 8010af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010afc:	ec53 2b10 	vmov	r2, r3, d0
 8010b00:	f7ef fbd2 	bl	80002a8 <__aeabi_dsub>
 8010b04:	2200      	movs	r2, #0
 8010b06:	2300      	movs	r3, #0
 8010b08:	4682      	mov	sl, r0
 8010b0a:	468b      	mov	fp, r1
 8010b0c:	f7ef ffec 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b10:	2800      	cmp	r0, #0
 8010b12:	d0c1      	beq.n	8010a98 <_strtod_l+0x8b8>
 8010b14:	e61a      	b.n	801074c <_strtod_l+0x56c>
 8010b16:	4641      	mov	r1, r8
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f7ff facb 	bl	80100b4 <__ratio>
 8010b1e:	ec57 6b10 	vmov	r6, r7, d0
 8010b22:	2200      	movs	r2, #0
 8010b24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010b28:	4630      	mov	r0, r6
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	f7ef fff0 	bl	8000b10 <__aeabi_dcmple>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	d06f      	beq.n	8010c14 <_strtod_l+0xa34>
 8010b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d17a      	bne.n	8010c30 <_strtod_l+0xa50>
 8010b3a:	f1ba 0f00 	cmp.w	sl, #0
 8010b3e:	d158      	bne.n	8010bf2 <_strtod_l+0xa12>
 8010b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d15a      	bne.n	8010c00 <_strtod_l+0xa20>
 8010b4a:	4b64      	ldr	r3, [pc, #400]	@ (8010cdc <_strtod_l+0xafc>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	4630      	mov	r0, r6
 8010b50:	4639      	mov	r1, r7
 8010b52:	f7ef ffd3 	bl	8000afc <__aeabi_dcmplt>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d159      	bne.n	8010c0e <_strtod_l+0xa2e>
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	4b60      	ldr	r3, [pc, #384]	@ (8010ce0 <_strtod_l+0xb00>)
 8010b60:	2200      	movs	r2, #0
 8010b62:	f7ef fd59 	bl	8000618 <__aeabi_dmul>
 8010b66:	4606      	mov	r6, r0
 8010b68:	460f      	mov	r7, r1
 8010b6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010b6e:	9606      	str	r6, [sp, #24]
 8010b70:	9307      	str	r3, [sp, #28]
 8010b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b76:	4d57      	ldr	r5, [pc, #348]	@ (8010cd4 <_strtod_l+0xaf4>)
 8010b78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b7e:	401d      	ands	r5, r3
 8010b80:	4b58      	ldr	r3, [pc, #352]	@ (8010ce4 <_strtod_l+0xb04>)
 8010b82:	429d      	cmp	r5, r3
 8010b84:	f040 80b2 	bne.w	8010cec <_strtod_l+0xb0c>
 8010b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010b8e:	ec4b ab10 	vmov	d0, sl, fp
 8010b92:	f7ff f9c7 	bl	800ff24 <__ulp>
 8010b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b9a:	ec51 0b10 	vmov	r0, r1, d0
 8010b9e:	f7ef fd3b 	bl	8000618 <__aeabi_dmul>
 8010ba2:	4652      	mov	r2, sl
 8010ba4:	465b      	mov	r3, fp
 8010ba6:	f7ef fb81 	bl	80002ac <__adddf3>
 8010baa:	460b      	mov	r3, r1
 8010bac:	4949      	ldr	r1, [pc, #292]	@ (8010cd4 <_strtod_l+0xaf4>)
 8010bae:	4a4e      	ldr	r2, [pc, #312]	@ (8010ce8 <_strtod_l+0xb08>)
 8010bb0:	4019      	ands	r1, r3
 8010bb2:	4291      	cmp	r1, r2
 8010bb4:	4682      	mov	sl, r0
 8010bb6:	d942      	bls.n	8010c3e <_strtod_l+0xa5e>
 8010bb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010bba:	4b47      	ldr	r3, [pc, #284]	@ (8010cd8 <_strtod_l+0xaf8>)
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d103      	bne.n	8010bc8 <_strtod_l+0x9e8>
 8010bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	f43f ad2f 	beq.w	8010626 <_strtod_l+0x446>
 8010bc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010cd8 <_strtod_l+0xaf8>
 8010bcc:	f04f 3aff 	mov.w	sl, #4294967295
 8010bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010bd2:	9805      	ldr	r0, [sp, #20]
 8010bd4:	f7fe fe7a 	bl	800f8cc <_Bfree>
 8010bd8:	9805      	ldr	r0, [sp, #20]
 8010bda:	4649      	mov	r1, r9
 8010bdc:	f7fe fe76 	bl	800f8cc <_Bfree>
 8010be0:	9805      	ldr	r0, [sp, #20]
 8010be2:	4641      	mov	r1, r8
 8010be4:	f7fe fe72 	bl	800f8cc <_Bfree>
 8010be8:	9805      	ldr	r0, [sp, #20]
 8010bea:	4621      	mov	r1, r4
 8010bec:	f7fe fe6e 	bl	800f8cc <_Bfree>
 8010bf0:	e619      	b.n	8010826 <_strtod_l+0x646>
 8010bf2:	f1ba 0f01 	cmp.w	sl, #1
 8010bf6:	d103      	bne.n	8010c00 <_strtod_l+0xa20>
 8010bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f43f ada6 	beq.w	801074c <_strtod_l+0x56c>
 8010c00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010cb0 <_strtod_l+0xad0>
 8010c04:	4f35      	ldr	r7, [pc, #212]	@ (8010cdc <_strtod_l+0xafc>)
 8010c06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010c0a:	2600      	movs	r6, #0
 8010c0c:	e7b1      	b.n	8010b72 <_strtod_l+0x992>
 8010c0e:	4f34      	ldr	r7, [pc, #208]	@ (8010ce0 <_strtod_l+0xb00>)
 8010c10:	2600      	movs	r6, #0
 8010c12:	e7aa      	b.n	8010b6a <_strtod_l+0x98a>
 8010c14:	4b32      	ldr	r3, [pc, #200]	@ (8010ce0 <_strtod_l+0xb00>)
 8010c16:	4630      	mov	r0, r6
 8010c18:	4639      	mov	r1, r7
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f7ef fcfc 	bl	8000618 <__aeabi_dmul>
 8010c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c22:	4606      	mov	r6, r0
 8010c24:	460f      	mov	r7, r1
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d09f      	beq.n	8010b6a <_strtod_l+0x98a>
 8010c2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010c2e:	e7a0      	b.n	8010b72 <_strtod_l+0x992>
 8010c30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010cb8 <_strtod_l+0xad8>
 8010c34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010c38:	ec57 6b17 	vmov	r6, r7, d7
 8010c3c:	e799      	b.n	8010b72 <_strtod_l+0x992>
 8010c3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010c42:	9b08      	ldr	r3, [sp, #32]
 8010c44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d1c1      	bne.n	8010bd0 <_strtod_l+0x9f0>
 8010c4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c50:	0d1b      	lsrs	r3, r3, #20
 8010c52:	051b      	lsls	r3, r3, #20
 8010c54:	429d      	cmp	r5, r3
 8010c56:	d1bb      	bne.n	8010bd0 <_strtod_l+0x9f0>
 8010c58:	4630      	mov	r0, r6
 8010c5a:	4639      	mov	r1, r7
 8010c5c:	f7f0 f83c 	bl	8000cd8 <__aeabi_d2lz>
 8010c60:	f7ef fcac 	bl	80005bc <__aeabi_l2d>
 8010c64:	4602      	mov	r2, r0
 8010c66:	460b      	mov	r3, r1
 8010c68:	4630      	mov	r0, r6
 8010c6a:	4639      	mov	r1, r7
 8010c6c:	f7ef fb1c 	bl	80002a8 <__aeabi_dsub>
 8010c70:	460b      	mov	r3, r1
 8010c72:	4602      	mov	r2, r0
 8010c74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010c78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c7e:	ea46 060a 	orr.w	r6, r6, sl
 8010c82:	431e      	orrs	r6, r3
 8010c84:	d06f      	beq.n	8010d66 <_strtod_l+0xb86>
 8010c86:	a30e      	add	r3, pc, #56	@ (adr r3, 8010cc0 <_strtod_l+0xae0>)
 8010c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8c:	f7ef ff36 	bl	8000afc <__aeabi_dcmplt>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	f47f acd3 	bne.w	801063c <_strtod_l+0x45c>
 8010c96:	a30c      	add	r3, pc, #48	@ (adr r3, 8010cc8 <_strtod_l+0xae8>)
 8010c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ca0:	f7ef ff4a 	bl	8000b38 <__aeabi_dcmpgt>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d093      	beq.n	8010bd0 <_strtod_l+0x9f0>
 8010ca8:	e4c8      	b.n	801063c <_strtod_l+0x45c>
 8010caa:	bf00      	nop
 8010cac:	f3af 8000 	nop.w
 8010cb0:	00000000 	.word	0x00000000
 8010cb4:	bff00000 	.word	0xbff00000
 8010cb8:	00000000 	.word	0x00000000
 8010cbc:	3ff00000 	.word	0x3ff00000
 8010cc0:	94a03595 	.word	0x94a03595
 8010cc4:	3fdfffff 	.word	0x3fdfffff
 8010cc8:	35afe535 	.word	0x35afe535
 8010ccc:	3fe00000 	.word	0x3fe00000
 8010cd0:	000fffff 	.word	0x000fffff
 8010cd4:	7ff00000 	.word	0x7ff00000
 8010cd8:	7fefffff 	.word	0x7fefffff
 8010cdc:	3ff00000 	.word	0x3ff00000
 8010ce0:	3fe00000 	.word	0x3fe00000
 8010ce4:	7fe00000 	.word	0x7fe00000
 8010ce8:	7c9fffff 	.word	0x7c9fffff
 8010cec:	9b08      	ldr	r3, [sp, #32]
 8010cee:	b323      	cbz	r3, 8010d3a <_strtod_l+0xb5a>
 8010cf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010cf4:	d821      	bhi.n	8010d3a <_strtod_l+0xb5a>
 8010cf6:	a328      	add	r3, pc, #160	@ (adr r3, 8010d98 <_strtod_l+0xbb8>)
 8010cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	4639      	mov	r1, r7
 8010d00:	f7ef ff06 	bl	8000b10 <__aeabi_dcmple>
 8010d04:	b1a0      	cbz	r0, 8010d30 <_strtod_l+0xb50>
 8010d06:	4639      	mov	r1, r7
 8010d08:	4630      	mov	r0, r6
 8010d0a:	f7ef ff5d 	bl	8000bc8 <__aeabi_d2uiz>
 8010d0e:	2801      	cmp	r0, #1
 8010d10:	bf38      	it	cc
 8010d12:	2001      	movcc	r0, #1
 8010d14:	f7ef fc06 	bl	8000524 <__aeabi_ui2d>
 8010d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d1a:	4606      	mov	r6, r0
 8010d1c:	460f      	mov	r7, r1
 8010d1e:	b9fb      	cbnz	r3, 8010d60 <_strtod_l+0xb80>
 8010d20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d24:	9014      	str	r0, [sp, #80]	@ 0x50
 8010d26:	9315      	str	r3, [sp, #84]	@ 0x54
 8010d28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010d2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010d30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010d32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010d36:	1b5b      	subs	r3, r3, r5
 8010d38:	9311      	str	r3, [sp, #68]	@ 0x44
 8010d3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010d3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010d42:	f7ff f8ef 	bl	800ff24 <__ulp>
 8010d46:	4650      	mov	r0, sl
 8010d48:	ec53 2b10 	vmov	r2, r3, d0
 8010d4c:	4659      	mov	r1, fp
 8010d4e:	f7ef fc63 	bl	8000618 <__aeabi_dmul>
 8010d52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010d56:	f7ef faa9 	bl	80002ac <__adddf3>
 8010d5a:	4682      	mov	sl, r0
 8010d5c:	468b      	mov	fp, r1
 8010d5e:	e770      	b.n	8010c42 <_strtod_l+0xa62>
 8010d60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010d64:	e7e0      	b.n	8010d28 <_strtod_l+0xb48>
 8010d66:	a30e      	add	r3, pc, #56	@ (adr r3, 8010da0 <_strtod_l+0xbc0>)
 8010d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6c:	f7ef fec6 	bl	8000afc <__aeabi_dcmplt>
 8010d70:	e798      	b.n	8010ca4 <_strtod_l+0xac4>
 8010d72:	2300      	movs	r3, #0
 8010d74:	930e      	str	r3, [sp, #56]	@ 0x38
 8010d76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010d78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d7a:	6013      	str	r3, [r2, #0]
 8010d7c:	f7ff ba6d 	b.w	801025a <_strtod_l+0x7a>
 8010d80:	2a65      	cmp	r2, #101	@ 0x65
 8010d82:	f43f ab68 	beq.w	8010456 <_strtod_l+0x276>
 8010d86:	2a45      	cmp	r2, #69	@ 0x45
 8010d88:	f43f ab65 	beq.w	8010456 <_strtod_l+0x276>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	f7ff bba0 	b.w	80104d2 <_strtod_l+0x2f2>
 8010d92:	bf00      	nop
 8010d94:	f3af 8000 	nop.w
 8010d98:	ffc00000 	.word	0xffc00000
 8010d9c:	41dfffff 	.word	0x41dfffff
 8010da0:	94a03595 	.word	0x94a03595
 8010da4:	3fcfffff 	.word	0x3fcfffff

08010da8 <_strtod_r>:
 8010da8:	4b01      	ldr	r3, [pc, #4]	@ (8010db0 <_strtod_r+0x8>)
 8010daa:	f7ff ba19 	b.w	80101e0 <_strtod_l>
 8010dae:	bf00      	nop
 8010db0:	200000b0 	.word	0x200000b0

08010db4 <__ssputs_r>:
 8010db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010db8:	688e      	ldr	r6, [r1, #8]
 8010dba:	461f      	mov	r7, r3
 8010dbc:	42be      	cmp	r6, r7
 8010dbe:	680b      	ldr	r3, [r1, #0]
 8010dc0:	4682      	mov	sl, r0
 8010dc2:	460c      	mov	r4, r1
 8010dc4:	4690      	mov	r8, r2
 8010dc6:	d82d      	bhi.n	8010e24 <__ssputs_r+0x70>
 8010dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010dd0:	d026      	beq.n	8010e20 <__ssputs_r+0x6c>
 8010dd2:	6965      	ldr	r5, [r4, #20]
 8010dd4:	6909      	ldr	r1, [r1, #16]
 8010dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dda:	eba3 0901 	sub.w	r9, r3, r1
 8010dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010de2:	1c7b      	adds	r3, r7, #1
 8010de4:	444b      	add	r3, r9
 8010de6:	106d      	asrs	r5, r5, #1
 8010de8:	429d      	cmp	r5, r3
 8010dea:	bf38      	it	cc
 8010dec:	461d      	movcc	r5, r3
 8010dee:	0553      	lsls	r3, r2, #21
 8010df0:	d527      	bpl.n	8010e42 <__ssputs_r+0x8e>
 8010df2:	4629      	mov	r1, r5
 8010df4:	f7fc fcce 	bl	800d794 <_malloc_r>
 8010df8:	4606      	mov	r6, r0
 8010dfa:	b360      	cbz	r0, 8010e56 <__ssputs_r+0xa2>
 8010dfc:	6921      	ldr	r1, [r4, #16]
 8010dfe:	464a      	mov	r2, r9
 8010e00:	f7fd fe6d 	bl	800eade <memcpy>
 8010e04:	89a3      	ldrh	r3, [r4, #12]
 8010e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e0e:	81a3      	strh	r3, [r4, #12]
 8010e10:	6126      	str	r6, [r4, #16]
 8010e12:	6165      	str	r5, [r4, #20]
 8010e14:	444e      	add	r6, r9
 8010e16:	eba5 0509 	sub.w	r5, r5, r9
 8010e1a:	6026      	str	r6, [r4, #0]
 8010e1c:	60a5      	str	r5, [r4, #8]
 8010e1e:	463e      	mov	r6, r7
 8010e20:	42be      	cmp	r6, r7
 8010e22:	d900      	bls.n	8010e26 <__ssputs_r+0x72>
 8010e24:	463e      	mov	r6, r7
 8010e26:	6820      	ldr	r0, [r4, #0]
 8010e28:	4632      	mov	r2, r6
 8010e2a:	4641      	mov	r1, r8
 8010e2c:	f7fd fd85 	bl	800e93a <memmove>
 8010e30:	68a3      	ldr	r3, [r4, #8]
 8010e32:	1b9b      	subs	r3, r3, r6
 8010e34:	60a3      	str	r3, [r4, #8]
 8010e36:	6823      	ldr	r3, [r4, #0]
 8010e38:	4433      	add	r3, r6
 8010e3a:	6023      	str	r3, [r4, #0]
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e42:	462a      	mov	r2, r5
 8010e44:	f000 fd41 	bl	80118ca <_realloc_r>
 8010e48:	4606      	mov	r6, r0
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d1e0      	bne.n	8010e10 <__ssputs_r+0x5c>
 8010e4e:	6921      	ldr	r1, [r4, #16]
 8010e50:	4650      	mov	r0, sl
 8010e52:	f7fe fcb1 	bl	800f7b8 <_free_r>
 8010e56:	230c      	movs	r3, #12
 8010e58:	f8ca 3000 	str.w	r3, [sl]
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e62:	81a3      	strh	r3, [r4, #12]
 8010e64:	f04f 30ff 	mov.w	r0, #4294967295
 8010e68:	e7e9      	b.n	8010e3e <__ssputs_r+0x8a>
	...

08010e6c <_svfiprintf_r>:
 8010e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e70:	4698      	mov	r8, r3
 8010e72:	898b      	ldrh	r3, [r1, #12]
 8010e74:	061b      	lsls	r3, r3, #24
 8010e76:	b09d      	sub	sp, #116	@ 0x74
 8010e78:	4607      	mov	r7, r0
 8010e7a:	460d      	mov	r5, r1
 8010e7c:	4614      	mov	r4, r2
 8010e7e:	d510      	bpl.n	8010ea2 <_svfiprintf_r+0x36>
 8010e80:	690b      	ldr	r3, [r1, #16]
 8010e82:	b973      	cbnz	r3, 8010ea2 <_svfiprintf_r+0x36>
 8010e84:	2140      	movs	r1, #64	@ 0x40
 8010e86:	f7fc fc85 	bl	800d794 <_malloc_r>
 8010e8a:	6028      	str	r0, [r5, #0]
 8010e8c:	6128      	str	r0, [r5, #16]
 8010e8e:	b930      	cbnz	r0, 8010e9e <_svfiprintf_r+0x32>
 8010e90:	230c      	movs	r3, #12
 8010e92:	603b      	str	r3, [r7, #0]
 8010e94:	f04f 30ff 	mov.w	r0, #4294967295
 8010e98:	b01d      	add	sp, #116	@ 0x74
 8010e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e9e:	2340      	movs	r3, #64	@ 0x40
 8010ea0:	616b      	str	r3, [r5, #20]
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ea6:	2320      	movs	r3, #32
 8010ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8010eb0:	2330      	movs	r3, #48	@ 0x30
 8010eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011050 <_svfiprintf_r+0x1e4>
 8010eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010eba:	f04f 0901 	mov.w	r9, #1
 8010ebe:	4623      	mov	r3, r4
 8010ec0:	469a      	mov	sl, r3
 8010ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ec6:	b10a      	cbz	r2, 8010ecc <_svfiprintf_r+0x60>
 8010ec8:	2a25      	cmp	r2, #37	@ 0x25
 8010eca:	d1f9      	bne.n	8010ec0 <_svfiprintf_r+0x54>
 8010ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8010ed0:	d00b      	beq.n	8010eea <_svfiprintf_r+0x7e>
 8010ed2:	465b      	mov	r3, fp
 8010ed4:	4622      	mov	r2, r4
 8010ed6:	4629      	mov	r1, r5
 8010ed8:	4638      	mov	r0, r7
 8010eda:	f7ff ff6b 	bl	8010db4 <__ssputs_r>
 8010ede:	3001      	adds	r0, #1
 8010ee0:	f000 80a7 	beq.w	8011032 <_svfiprintf_r+0x1c6>
 8010ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ee6:	445a      	add	r2, fp
 8010ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010eea:	f89a 3000 	ldrb.w	r3, [sl]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f000 809f 	beq.w	8011032 <_svfiprintf_r+0x1c6>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8010efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010efe:	f10a 0a01 	add.w	sl, sl, #1
 8010f02:	9304      	str	r3, [sp, #16]
 8010f04:	9307      	str	r3, [sp, #28]
 8010f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f0c:	4654      	mov	r4, sl
 8010f0e:	2205      	movs	r2, #5
 8010f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f14:	484e      	ldr	r0, [pc, #312]	@ (8011050 <_svfiprintf_r+0x1e4>)
 8010f16:	f7ef f96b 	bl	80001f0 <memchr>
 8010f1a:	9a04      	ldr	r2, [sp, #16]
 8010f1c:	b9d8      	cbnz	r0, 8010f56 <_svfiprintf_r+0xea>
 8010f1e:	06d0      	lsls	r0, r2, #27
 8010f20:	bf44      	itt	mi
 8010f22:	2320      	movmi	r3, #32
 8010f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f28:	0711      	lsls	r1, r2, #28
 8010f2a:	bf44      	itt	mi
 8010f2c:	232b      	movmi	r3, #43	@ 0x2b
 8010f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f32:	f89a 3000 	ldrb.w	r3, [sl]
 8010f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f38:	d015      	beq.n	8010f66 <_svfiprintf_r+0xfa>
 8010f3a:	9a07      	ldr	r2, [sp, #28]
 8010f3c:	4654      	mov	r4, sl
 8010f3e:	2000      	movs	r0, #0
 8010f40:	f04f 0c0a 	mov.w	ip, #10
 8010f44:	4621      	mov	r1, r4
 8010f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f4a:	3b30      	subs	r3, #48	@ 0x30
 8010f4c:	2b09      	cmp	r3, #9
 8010f4e:	d94b      	bls.n	8010fe8 <_svfiprintf_r+0x17c>
 8010f50:	b1b0      	cbz	r0, 8010f80 <_svfiprintf_r+0x114>
 8010f52:	9207      	str	r2, [sp, #28]
 8010f54:	e014      	b.n	8010f80 <_svfiprintf_r+0x114>
 8010f56:	eba0 0308 	sub.w	r3, r0, r8
 8010f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8010f5e:	4313      	orrs	r3, r2
 8010f60:	9304      	str	r3, [sp, #16]
 8010f62:	46a2      	mov	sl, r4
 8010f64:	e7d2      	b.n	8010f0c <_svfiprintf_r+0xa0>
 8010f66:	9b03      	ldr	r3, [sp, #12]
 8010f68:	1d19      	adds	r1, r3, #4
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	9103      	str	r1, [sp, #12]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	bfbb      	ittet	lt
 8010f72:	425b      	neglt	r3, r3
 8010f74:	f042 0202 	orrlt.w	r2, r2, #2
 8010f78:	9307      	strge	r3, [sp, #28]
 8010f7a:	9307      	strlt	r3, [sp, #28]
 8010f7c:	bfb8      	it	lt
 8010f7e:	9204      	strlt	r2, [sp, #16]
 8010f80:	7823      	ldrb	r3, [r4, #0]
 8010f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f84:	d10a      	bne.n	8010f9c <_svfiprintf_r+0x130>
 8010f86:	7863      	ldrb	r3, [r4, #1]
 8010f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f8a:	d132      	bne.n	8010ff2 <_svfiprintf_r+0x186>
 8010f8c:	9b03      	ldr	r3, [sp, #12]
 8010f8e:	1d1a      	adds	r2, r3, #4
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	9203      	str	r2, [sp, #12]
 8010f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f98:	3402      	adds	r4, #2
 8010f9a:	9305      	str	r3, [sp, #20]
 8010f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011060 <_svfiprintf_r+0x1f4>
 8010fa0:	7821      	ldrb	r1, [r4, #0]
 8010fa2:	2203      	movs	r2, #3
 8010fa4:	4650      	mov	r0, sl
 8010fa6:	f7ef f923 	bl	80001f0 <memchr>
 8010faa:	b138      	cbz	r0, 8010fbc <_svfiprintf_r+0x150>
 8010fac:	9b04      	ldr	r3, [sp, #16]
 8010fae:	eba0 000a 	sub.w	r0, r0, sl
 8010fb2:	2240      	movs	r2, #64	@ 0x40
 8010fb4:	4082      	lsls	r2, r0
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	3401      	adds	r4, #1
 8010fba:	9304      	str	r3, [sp, #16]
 8010fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc0:	4824      	ldr	r0, [pc, #144]	@ (8011054 <_svfiprintf_r+0x1e8>)
 8010fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010fc6:	2206      	movs	r2, #6
 8010fc8:	f7ef f912 	bl	80001f0 <memchr>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	d036      	beq.n	801103e <_svfiprintf_r+0x1d2>
 8010fd0:	4b21      	ldr	r3, [pc, #132]	@ (8011058 <_svfiprintf_r+0x1ec>)
 8010fd2:	bb1b      	cbnz	r3, 801101c <_svfiprintf_r+0x1b0>
 8010fd4:	9b03      	ldr	r3, [sp, #12]
 8010fd6:	3307      	adds	r3, #7
 8010fd8:	f023 0307 	bic.w	r3, r3, #7
 8010fdc:	3308      	adds	r3, #8
 8010fde:	9303      	str	r3, [sp, #12]
 8010fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fe2:	4433      	add	r3, r6
 8010fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fe6:	e76a      	b.n	8010ebe <_svfiprintf_r+0x52>
 8010fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fec:	460c      	mov	r4, r1
 8010fee:	2001      	movs	r0, #1
 8010ff0:	e7a8      	b.n	8010f44 <_svfiprintf_r+0xd8>
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	3401      	adds	r4, #1
 8010ff6:	9305      	str	r3, [sp, #20]
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	f04f 0c0a 	mov.w	ip, #10
 8010ffe:	4620      	mov	r0, r4
 8011000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011004:	3a30      	subs	r2, #48	@ 0x30
 8011006:	2a09      	cmp	r2, #9
 8011008:	d903      	bls.n	8011012 <_svfiprintf_r+0x1a6>
 801100a:	2b00      	cmp	r3, #0
 801100c:	d0c6      	beq.n	8010f9c <_svfiprintf_r+0x130>
 801100e:	9105      	str	r1, [sp, #20]
 8011010:	e7c4      	b.n	8010f9c <_svfiprintf_r+0x130>
 8011012:	fb0c 2101 	mla	r1, ip, r1, r2
 8011016:	4604      	mov	r4, r0
 8011018:	2301      	movs	r3, #1
 801101a:	e7f0      	b.n	8010ffe <_svfiprintf_r+0x192>
 801101c:	ab03      	add	r3, sp, #12
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	462a      	mov	r2, r5
 8011022:	4b0e      	ldr	r3, [pc, #56]	@ (801105c <_svfiprintf_r+0x1f0>)
 8011024:	a904      	add	r1, sp, #16
 8011026:	4638      	mov	r0, r7
 8011028:	f7fc fd66 	bl	800daf8 <_printf_float>
 801102c:	1c42      	adds	r2, r0, #1
 801102e:	4606      	mov	r6, r0
 8011030:	d1d6      	bne.n	8010fe0 <_svfiprintf_r+0x174>
 8011032:	89ab      	ldrh	r3, [r5, #12]
 8011034:	065b      	lsls	r3, r3, #25
 8011036:	f53f af2d 	bmi.w	8010e94 <_svfiprintf_r+0x28>
 801103a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801103c:	e72c      	b.n	8010e98 <_svfiprintf_r+0x2c>
 801103e:	ab03      	add	r3, sp, #12
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	462a      	mov	r2, r5
 8011044:	4b05      	ldr	r3, [pc, #20]	@ (801105c <_svfiprintf_r+0x1f0>)
 8011046:	a904      	add	r1, sp, #16
 8011048:	4638      	mov	r0, r7
 801104a:	f7fc ffed 	bl	800e028 <_printf_i>
 801104e:	e7ed      	b.n	801102c <_svfiprintf_r+0x1c0>
 8011050:	0803ce36 	.word	0x0803ce36
 8011054:	0803ce40 	.word	0x0803ce40
 8011058:	0800daf9 	.word	0x0800daf9
 801105c:	08010db5 	.word	0x08010db5
 8011060:	0803ce3c 	.word	0x0803ce3c

08011064 <__sflush_r>:
 8011064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801106c:	0716      	lsls	r6, r2, #28
 801106e:	4605      	mov	r5, r0
 8011070:	460c      	mov	r4, r1
 8011072:	d454      	bmi.n	801111e <__sflush_r+0xba>
 8011074:	684b      	ldr	r3, [r1, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	dc02      	bgt.n	8011080 <__sflush_r+0x1c>
 801107a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801107c:	2b00      	cmp	r3, #0
 801107e:	dd48      	ble.n	8011112 <__sflush_r+0xae>
 8011080:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011082:	2e00      	cmp	r6, #0
 8011084:	d045      	beq.n	8011112 <__sflush_r+0xae>
 8011086:	2300      	movs	r3, #0
 8011088:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801108c:	682f      	ldr	r7, [r5, #0]
 801108e:	6a21      	ldr	r1, [r4, #32]
 8011090:	602b      	str	r3, [r5, #0]
 8011092:	d030      	beq.n	80110f6 <__sflush_r+0x92>
 8011094:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011096:	89a3      	ldrh	r3, [r4, #12]
 8011098:	0759      	lsls	r1, r3, #29
 801109a:	d505      	bpl.n	80110a8 <__sflush_r+0x44>
 801109c:	6863      	ldr	r3, [r4, #4]
 801109e:	1ad2      	subs	r2, r2, r3
 80110a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110a2:	b10b      	cbz	r3, 80110a8 <__sflush_r+0x44>
 80110a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80110a6:	1ad2      	subs	r2, r2, r3
 80110a8:	2300      	movs	r3, #0
 80110aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110ac:	6a21      	ldr	r1, [r4, #32]
 80110ae:	4628      	mov	r0, r5
 80110b0:	47b0      	blx	r6
 80110b2:	1c43      	adds	r3, r0, #1
 80110b4:	89a3      	ldrh	r3, [r4, #12]
 80110b6:	d106      	bne.n	80110c6 <__sflush_r+0x62>
 80110b8:	6829      	ldr	r1, [r5, #0]
 80110ba:	291d      	cmp	r1, #29
 80110bc:	d82b      	bhi.n	8011116 <__sflush_r+0xb2>
 80110be:	4a2a      	ldr	r2, [pc, #168]	@ (8011168 <__sflush_r+0x104>)
 80110c0:	40ca      	lsrs	r2, r1
 80110c2:	07d6      	lsls	r6, r2, #31
 80110c4:	d527      	bpl.n	8011116 <__sflush_r+0xb2>
 80110c6:	2200      	movs	r2, #0
 80110c8:	6062      	str	r2, [r4, #4]
 80110ca:	04d9      	lsls	r1, r3, #19
 80110cc:	6922      	ldr	r2, [r4, #16]
 80110ce:	6022      	str	r2, [r4, #0]
 80110d0:	d504      	bpl.n	80110dc <__sflush_r+0x78>
 80110d2:	1c42      	adds	r2, r0, #1
 80110d4:	d101      	bne.n	80110da <__sflush_r+0x76>
 80110d6:	682b      	ldr	r3, [r5, #0]
 80110d8:	b903      	cbnz	r3, 80110dc <__sflush_r+0x78>
 80110da:	6560      	str	r0, [r4, #84]	@ 0x54
 80110dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110de:	602f      	str	r7, [r5, #0]
 80110e0:	b1b9      	cbz	r1, 8011112 <__sflush_r+0xae>
 80110e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110e6:	4299      	cmp	r1, r3
 80110e8:	d002      	beq.n	80110f0 <__sflush_r+0x8c>
 80110ea:	4628      	mov	r0, r5
 80110ec:	f7fe fb64 	bl	800f7b8 <_free_r>
 80110f0:	2300      	movs	r3, #0
 80110f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80110f4:	e00d      	b.n	8011112 <__sflush_r+0xae>
 80110f6:	2301      	movs	r3, #1
 80110f8:	4628      	mov	r0, r5
 80110fa:	47b0      	blx	r6
 80110fc:	4602      	mov	r2, r0
 80110fe:	1c50      	adds	r0, r2, #1
 8011100:	d1c9      	bne.n	8011096 <__sflush_r+0x32>
 8011102:	682b      	ldr	r3, [r5, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d0c6      	beq.n	8011096 <__sflush_r+0x32>
 8011108:	2b1d      	cmp	r3, #29
 801110a:	d001      	beq.n	8011110 <__sflush_r+0xac>
 801110c:	2b16      	cmp	r3, #22
 801110e:	d11e      	bne.n	801114e <__sflush_r+0xea>
 8011110:	602f      	str	r7, [r5, #0]
 8011112:	2000      	movs	r0, #0
 8011114:	e022      	b.n	801115c <__sflush_r+0xf8>
 8011116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801111a:	b21b      	sxth	r3, r3
 801111c:	e01b      	b.n	8011156 <__sflush_r+0xf2>
 801111e:	690f      	ldr	r7, [r1, #16]
 8011120:	2f00      	cmp	r7, #0
 8011122:	d0f6      	beq.n	8011112 <__sflush_r+0xae>
 8011124:	0793      	lsls	r3, r2, #30
 8011126:	680e      	ldr	r6, [r1, #0]
 8011128:	bf08      	it	eq
 801112a:	694b      	ldreq	r3, [r1, #20]
 801112c:	600f      	str	r7, [r1, #0]
 801112e:	bf18      	it	ne
 8011130:	2300      	movne	r3, #0
 8011132:	eba6 0807 	sub.w	r8, r6, r7
 8011136:	608b      	str	r3, [r1, #8]
 8011138:	f1b8 0f00 	cmp.w	r8, #0
 801113c:	dde9      	ble.n	8011112 <__sflush_r+0xae>
 801113e:	6a21      	ldr	r1, [r4, #32]
 8011140:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011142:	4643      	mov	r3, r8
 8011144:	463a      	mov	r2, r7
 8011146:	4628      	mov	r0, r5
 8011148:	47b0      	blx	r6
 801114a:	2800      	cmp	r0, #0
 801114c:	dc08      	bgt.n	8011160 <__sflush_r+0xfc>
 801114e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011156:	81a3      	strh	r3, [r4, #12]
 8011158:	f04f 30ff 	mov.w	r0, #4294967295
 801115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011160:	4407      	add	r7, r0
 8011162:	eba8 0800 	sub.w	r8, r8, r0
 8011166:	e7e7      	b.n	8011138 <__sflush_r+0xd4>
 8011168:	20400001 	.word	0x20400001

0801116c <_fflush_r>:
 801116c:	b538      	push	{r3, r4, r5, lr}
 801116e:	690b      	ldr	r3, [r1, #16]
 8011170:	4605      	mov	r5, r0
 8011172:	460c      	mov	r4, r1
 8011174:	b913      	cbnz	r3, 801117c <_fflush_r+0x10>
 8011176:	2500      	movs	r5, #0
 8011178:	4628      	mov	r0, r5
 801117a:	bd38      	pop	{r3, r4, r5, pc}
 801117c:	b118      	cbz	r0, 8011186 <_fflush_r+0x1a>
 801117e:	6a03      	ldr	r3, [r0, #32]
 8011180:	b90b      	cbnz	r3, 8011186 <_fflush_r+0x1a>
 8011182:	f7fd fb09 	bl	800e798 <__sinit>
 8011186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d0f3      	beq.n	8011176 <_fflush_r+0xa>
 801118e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011190:	07d0      	lsls	r0, r2, #31
 8011192:	d404      	bmi.n	801119e <_fflush_r+0x32>
 8011194:	0599      	lsls	r1, r3, #22
 8011196:	d402      	bmi.n	801119e <_fflush_r+0x32>
 8011198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801119a:	f7fd fc9e 	bl	800eada <__retarget_lock_acquire_recursive>
 801119e:	4628      	mov	r0, r5
 80111a0:	4621      	mov	r1, r4
 80111a2:	f7ff ff5f 	bl	8011064 <__sflush_r>
 80111a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111a8:	07da      	lsls	r2, r3, #31
 80111aa:	4605      	mov	r5, r0
 80111ac:	d4e4      	bmi.n	8011178 <_fflush_r+0xc>
 80111ae:	89a3      	ldrh	r3, [r4, #12]
 80111b0:	059b      	lsls	r3, r3, #22
 80111b2:	d4e1      	bmi.n	8011178 <_fflush_r+0xc>
 80111b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111b6:	f7fd fc91 	bl	800eadc <__retarget_lock_release_recursive>
 80111ba:	e7dd      	b.n	8011178 <_fflush_r+0xc>
 80111bc:	0000      	movs	r0, r0
	...

080111c0 <nan>:
 80111c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80111c8 <nan+0x8>
 80111c4:	4770      	bx	lr
 80111c6:	bf00      	nop
 80111c8:	00000000 	.word	0x00000000
 80111cc:	7ff80000 	.word	0x7ff80000

080111d0 <__assert_func>:
 80111d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111d2:	4614      	mov	r4, r2
 80111d4:	461a      	mov	r2, r3
 80111d6:	4b09      	ldr	r3, [pc, #36]	@ (80111fc <__assert_func+0x2c>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4605      	mov	r5, r0
 80111dc:	68d8      	ldr	r0, [r3, #12]
 80111de:	b14c      	cbz	r4, 80111f4 <__assert_func+0x24>
 80111e0:	4b07      	ldr	r3, [pc, #28]	@ (8011200 <__assert_func+0x30>)
 80111e2:	9100      	str	r1, [sp, #0]
 80111e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111e8:	4906      	ldr	r1, [pc, #24]	@ (8011204 <__assert_func+0x34>)
 80111ea:	462b      	mov	r3, r5
 80111ec:	f000 fba8 	bl	8011940 <fiprintf>
 80111f0:	f000 fbb8 	bl	8011964 <abort>
 80111f4:	4b04      	ldr	r3, [pc, #16]	@ (8011208 <__assert_func+0x38>)
 80111f6:	461c      	mov	r4, r3
 80111f8:	e7f3      	b.n	80111e2 <__assert_func+0x12>
 80111fa:	bf00      	nop
 80111fc:	20000060 	.word	0x20000060
 8011200:	0803ce4f 	.word	0x0803ce4f
 8011204:	0803ce5c 	.word	0x0803ce5c
 8011208:	0803ce8a 	.word	0x0803ce8a

0801120c <_calloc_r>:
 801120c:	b570      	push	{r4, r5, r6, lr}
 801120e:	fba1 5402 	umull	r5, r4, r1, r2
 8011212:	b934      	cbnz	r4, 8011222 <_calloc_r+0x16>
 8011214:	4629      	mov	r1, r5
 8011216:	f7fc fabd 	bl	800d794 <_malloc_r>
 801121a:	4606      	mov	r6, r0
 801121c:	b928      	cbnz	r0, 801122a <_calloc_r+0x1e>
 801121e:	4630      	mov	r0, r6
 8011220:	bd70      	pop	{r4, r5, r6, pc}
 8011222:	220c      	movs	r2, #12
 8011224:	6002      	str	r2, [r0, #0]
 8011226:	2600      	movs	r6, #0
 8011228:	e7f9      	b.n	801121e <_calloc_r+0x12>
 801122a:	462a      	mov	r2, r5
 801122c:	4621      	mov	r1, r4
 801122e:	f7fd fb9e 	bl	800e96e <memset>
 8011232:	e7f4      	b.n	801121e <_calloc_r+0x12>

08011234 <rshift>:
 8011234:	6903      	ldr	r3, [r0, #16]
 8011236:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801123a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801123e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011242:	f100 0414 	add.w	r4, r0, #20
 8011246:	dd45      	ble.n	80112d4 <rshift+0xa0>
 8011248:	f011 011f 	ands.w	r1, r1, #31
 801124c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011250:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011254:	d10c      	bne.n	8011270 <rshift+0x3c>
 8011256:	f100 0710 	add.w	r7, r0, #16
 801125a:	4629      	mov	r1, r5
 801125c:	42b1      	cmp	r1, r6
 801125e:	d334      	bcc.n	80112ca <rshift+0x96>
 8011260:	1a9b      	subs	r3, r3, r2
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	1eea      	subs	r2, r5, #3
 8011266:	4296      	cmp	r6, r2
 8011268:	bf38      	it	cc
 801126a:	2300      	movcc	r3, #0
 801126c:	4423      	add	r3, r4
 801126e:	e015      	b.n	801129c <rshift+0x68>
 8011270:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011274:	f1c1 0820 	rsb	r8, r1, #32
 8011278:	40cf      	lsrs	r7, r1
 801127a:	f105 0e04 	add.w	lr, r5, #4
 801127e:	46a1      	mov	r9, r4
 8011280:	4576      	cmp	r6, lr
 8011282:	46f4      	mov	ip, lr
 8011284:	d815      	bhi.n	80112b2 <rshift+0x7e>
 8011286:	1a9a      	subs	r2, r3, r2
 8011288:	0092      	lsls	r2, r2, #2
 801128a:	3a04      	subs	r2, #4
 801128c:	3501      	adds	r5, #1
 801128e:	42ae      	cmp	r6, r5
 8011290:	bf38      	it	cc
 8011292:	2200      	movcc	r2, #0
 8011294:	18a3      	adds	r3, r4, r2
 8011296:	50a7      	str	r7, [r4, r2]
 8011298:	b107      	cbz	r7, 801129c <rshift+0x68>
 801129a:	3304      	adds	r3, #4
 801129c:	1b1a      	subs	r2, r3, r4
 801129e:	42a3      	cmp	r3, r4
 80112a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80112a4:	bf08      	it	eq
 80112a6:	2300      	moveq	r3, #0
 80112a8:	6102      	str	r2, [r0, #16]
 80112aa:	bf08      	it	eq
 80112ac:	6143      	streq	r3, [r0, #20]
 80112ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112b2:	f8dc c000 	ldr.w	ip, [ip]
 80112b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80112ba:	ea4c 0707 	orr.w	r7, ip, r7
 80112be:	f849 7b04 	str.w	r7, [r9], #4
 80112c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80112c6:	40cf      	lsrs	r7, r1
 80112c8:	e7da      	b.n	8011280 <rshift+0x4c>
 80112ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80112ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80112d2:	e7c3      	b.n	801125c <rshift+0x28>
 80112d4:	4623      	mov	r3, r4
 80112d6:	e7e1      	b.n	801129c <rshift+0x68>

080112d8 <__hexdig_fun>:
 80112d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80112dc:	2b09      	cmp	r3, #9
 80112de:	d802      	bhi.n	80112e6 <__hexdig_fun+0xe>
 80112e0:	3820      	subs	r0, #32
 80112e2:	b2c0      	uxtb	r0, r0
 80112e4:	4770      	bx	lr
 80112e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80112ea:	2b05      	cmp	r3, #5
 80112ec:	d801      	bhi.n	80112f2 <__hexdig_fun+0x1a>
 80112ee:	3847      	subs	r0, #71	@ 0x47
 80112f0:	e7f7      	b.n	80112e2 <__hexdig_fun+0xa>
 80112f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80112f6:	2b05      	cmp	r3, #5
 80112f8:	d801      	bhi.n	80112fe <__hexdig_fun+0x26>
 80112fa:	3827      	subs	r0, #39	@ 0x27
 80112fc:	e7f1      	b.n	80112e2 <__hexdig_fun+0xa>
 80112fe:	2000      	movs	r0, #0
 8011300:	4770      	bx	lr
	...

08011304 <__gethex>:
 8011304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011308:	b085      	sub	sp, #20
 801130a:	468a      	mov	sl, r1
 801130c:	9302      	str	r3, [sp, #8]
 801130e:	680b      	ldr	r3, [r1, #0]
 8011310:	9001      	str	r0, [sp, #4]
 8011312:	4690      	mov	r8, r2
 8011314:	1c9c      	adds	r4, r3, #2
 8011316:	46a1      	mov	r9, r4
 8011318:	f814 0b01 	ldrb.w	r0, [r4], #1
 801131c:	2830      	cmp	r0, #48	@ 0x30
 801131e:	d0fa      	beq.n	8011316 <__gethex+0x12>
 8011320:	eba9 0303 	sub.w	r3, r9, r3
 8011324:	f1a3 0b02 	sub.w	fp, r3, #2
 8011328:	f7ff ffd6 	bl	80112d8 <__hexdig_fun>
 801132c:	4605      	mov	r5, r0
 801132e:	2800      	cmp	r0, #0
 8011330:	d168      	bne.n	8011404 <__gethex+0x100>
 8011332:	49a0      	ldr	r1, [pc, #640]	@ (80115b4 <__gethex+0x2b0>)
 8011334:	2201      	movs	r2, #1
 8011336:	4648      	mov	r0, r9
 8011338:	f7fd fb21 	bl	800e97e <strncmp>
 801133c:	4607      	mov	r7, r0
 801133e:	2800      	cmp	r0, #0
 8011340:	d167      	bne.n	8011412 <__gethex+0x10e>
 8011342:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011346:	4626      	mov	r6, r4
 8011348:	f7ff ffc6 	bl	80112d8 <__hexdig_fun>
 801134c:	2800      	cmp	r0, #0
 801134e:	d062      	beq.n	8011416 <__gethex+0x112>
 8011350:	4623      	mov	r3, r4
 8011352:	7818      	ldrb	r0, [r3, #0]
 8011354:	2830      	cmp	r0, #48	@ 0x30
 8011356:	4699      	mov	r9, r3
 8011358:	f103 0301 	add.w	r3, r3, #1
 801135c:	d0f9      	beq.n	8011352 <__gethex+0x4e>
 801135e:	f7ff ffbb 	bl	80112d8 <__hexdig_fun>
 8011362:	fab0 f580 	clz	r5, r0
 8011366:	096d      	lsrs	r5, r5, #5
 8011368:	f04f 0b01 	mov.w	fp, #1
 801136c:	464a      	mov	r2, r9
 801136e:	4616      	mov	r6, r2
 8011370:	3201      	adds	r2, #1
 8011372:	7830      	ldrb	r0, [r6, #0]
 8011374:	f7ff ffb0 	bl	80112d8 <__hexdig_fun>
 8011378:	2800      	cmp	r0, #0
 801137a:	d1f8      	bne.n	801136e <__gethex+0x6a>
 801137c:	498d      	ldr	r1, [pc, #564]	@ (80115b4 <__gethex+0x2b0>)
 801137e:	2201      	movs	r2, #1
 8011380:	4630      	mov	r0, r6
 8011382:	f7fd fafc 	bl	800e97e <strncmp>
 8011386:	2800      	cmp	r0, #0
 8011388:	d13f      	bne.n	801140a <__gethex+0x106>
 801138a:	b944      	cbnz	r4, 801139e <__gethex+0x9a>
 801138c:	1c74      	adds	r4, r6, #1
 801138e:	4622      	mov	r2, r4
 8011390:	4616      	mov	r6, r2
 8011392:	3201      	adds	r2, #1
 8011394:	7830      	ldrb	r0, [r6, #0]
 8011396:	f7ff ff9f 	bl	80112d8 <__hexdig_fun>
 801139a:	2800      	cmp	r0, #0
 801139c:	d1f8      	bne.n	8011390 <__gethex+0x8c>
 801139e:	1ba4      	subs	r4, r4, r6
 80113a0:	00a7      	lsls	r7, r4, #2
 80113a2:	7833      	ldrb	r3, [r6, #0]
 80113a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80113a8:	2b50      	cmp	r3, #80	@ 0x50
 80113aa:	d13e      	bne.n	801142a <__gethex+0x126>
 80113ac:	7873      	ldrb	r3, [r6, #1]
 80113ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80113b0:	d033      	beq.n	801141a <__gethex+0x116>
 80113b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80113b4:	d034      	beq.n	8011420 <__gethex+0x11c>
 80113b6:	1c71      	adds	r1, r6, #1
 80113b8:	2400      	movs	r4, #0
 80113ba:	7808      	ldrb	r0, [r1, #0]
 80113bc:	f7ff ff8c 	bl	80112d8 <__hexdig_fun>
 80113c0:	1e43      	subs	r3, r0, #1
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	2b18      	cmp	r3, #24
 80113c6:	d830      	bhi.n	801142a <__gethex+0x126>
 80113c8:	f1a0 0210 	sub.w	r2, r0, #16
 80113cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80113d0:	f7ff ff82 	bl	80112d8 <__hexdig_fun>
 80113d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80113d8:	fa5f fc8c 	uxtb.w	ip, ip
 80113dc:	f1bc 0f18 	cmp.w	ip, #24
 80113e0:	f04f 030a 	mov.w	r3, #10
 80113e4:	d91e      	bls.n	8011424 <__gethex+0x120>
 80113e6:	b104      	cbz	r4, 80113ea <__gethex+0xe6>
 80113e8:	4252      	negs	r2, r2
 80113ea:	4417      	add	r7, r2
 80113ec:	f8ca 1000 	str.w	r1, [sl]
 80113f0:	b1ed      	cbz	r5, 801142e <__gethex+0x12a>
 80113f2:	f1bb 0f00 	cmp.w	fp, #0
 80113f6:	bf0c      	ite	eq
 80113f8:	2506      	moveq	r5, #6
 80113fa:	2500      	movne	r5, #0
 80113fc:	4628      	mov	r0, r5
 80113fe:	b005      	add	sp, #20
 8011400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011404:	2500      	movs	r5, #0
 8011406:	462c      	mov	r4, r5
 8011408:	e7b0      	b.n	801136c <__gethex+0x68>
 801140a:	2c00      	cmp	r4, #0
 801140c:	d1c7      	bne.n	801139e <__gethex+0x9a>
 801140e:	4627      	mov	r7, r4
 8011410:	e7c7      	b.n	80113a2 <__gethex+0x9e>
 8011412:	464e      	mov	r6, r9
 8011414:	462f      	mov	r7, r5
 8011416:	2501      	movs	r5, #1
 8011418:	e7c3      	b.n	80113a2 <__gethex+0x9e>
 801141a:	2400      	movs	r4, #0
 801141c:	1cb1      	adds	r1, r6, #2
 801141e:	e7cc      	b.n	80113ba <__gethex+0xb6>
 8011420:	2401      	movs	r4, #1
 8011422:	e7fb      	b.n	801141c <__gethex+0x118>
 8011424:	fb03 0002 	mla	r0, r3, r2, r0
 8011428:	e7ce      	b.n	80113c8 <__gethex+0xc4>
 801142a:	4631      	mov	r1, r6
 801142c:	e7de      	b.n	80113ec <__gethex+0xe8>
 801142e:	eba6 0309 	sub.w	r3, r6, r9
 8011432:	3b01      	subs	r3, #1
 8011434:	4629      	mov	r1, r5
 8011436:	2b07      	cmp	r3, #7
 8011438:	dc0a      	bgt.n	8011450 <__gethex+0x14c>
 801143a:	9801      	ldr	r0, [sp, #4]
 801143c:	f7fe fa06 	bl	800f84c <_Balloc>
 8011440:	4604      	mov	r4, r0
 8011442:	b940      	cbnz	r0, 8011456 <__gethex+0x152>
 8011444:	4b5c      	ldr	r3, [pc, #368]	@ (80115b8 <__gethex+0x2b4>)
 8011446:	4602      	mov	r2, r0
 8011448:	21e4      	movs	r1, #228	@ 0xe4
 801144a:	485c      	ldr	r0, [pc, #368]	@ (80115bc <__gethex+0x2b8>)
 801144c:	f7ff fec0 	bl	80111d0 <__assert_func>
 8011450:	3101      	adds	r1, #1
 8011452:	105b      	asrs	r3, r3, #1
 8011454:	e7ef      	b.n	8011436 <__gethex+0x132>
 8011456:	f100 0a14 	add.w	sl, r0, #20
 801145a:	2300      	movs	r3, #0
 801145c:	4655      	mov	r5, sl
 801145e:	469b      	mov	fp, r3
 8011460:	45b1      	cmp	r9, r6
 8011462:	d337      	bcc.n	80114d4 <__gethex+0x1d0>
 8011464:	f845 bb04 	str.w	fp, [r5], #4
 8011468:	eba5 050a 	sub.w	r5, r5, sl
 801146c:	10ad      	asrs	r5, r5, #2
 801146e:	6125      	str	r5, [r4, #16]
 8011470:	4658      	mov	r0, fp
 8011472:	f7fe fadd 	bl	800fa30 <__hi0bits>
 8011476:	016d      	lsls	r5, r5, #5
 8011478:	f8d8 6000 	ldr.w	r6, [r8]
 801147c:	1a2d      	subs	r5, r5, r0
 801147e:	42b5      	cmp	r5, r6
 8011480:	dd54      	ble.n	801152c <__gethex+0x228>
 8011482:	1bad      	subs	r5, r5, r6
 8011484:	4629      	mov	r1, r5
 8011486:	4620      	mov	r0, r4
 8011488:	f7fe fe69 	bl	801015e <__any_on>
 801148c:	4681      	mov	r9, r0
 801148e:	b178      	cbz	r0, 80114b0 <__gethex+0x1ac>
 8011490:	1e6b      	subs	r3, r5, #1
 8011492:	1159      	asrs	r1, r3, #5
 8011494:	f003 021f 	and.w	r2, r3, #31
 8011498:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801149c:	f04f 0901 	mov.w	r9, #1
 80114a0:	fa09 f202 	lsl.w	r2, r9, r2
 80114a4:	420a      	tst	r2, r1
 80114a6:	d003      	beq.n	80114b0 <__gethex+0x1ac>
 80114a8:	454b      	cmp	r3, r9
 80114aa:	dc36      	bgt.n	801151a <__gethex+0x216>
 80114ac:	f04f 0902 	mov.w	r9, #2
 80114b0:	4629      	mov	r1, r5
 80114b2:	4620      	mov	r0, r4
 80114b4:	f7ff febe 	bl	8011234 <rshift>
 80114b8:	442f      	add	r7, r5
 80114ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80114be:	42bb      	cmp	r3, r7
 80114c0:	da42      	bge.n	8011548 <__gethex+0x244>
 80114c2:	9801      	ldr	r0, [sp, #4]
 80114c4:	4621      	mov	r1, r4
 80114c6:	f7fe fa01 	bl	800f8cc <_Bfree>
 80114ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114cc:	2300      	movs	r3, #0
 80114ce:	6013      	str	r3, [r2, #0]
 80114d0:	25a3      	movs	r5, #163	@ 0xa3
 80114d2:	e793      	b.n	80113fc <__gethex+0xf8>
 80114d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80114d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80114da:	d012      	beq.n	8011502 <__gethex+0x1fe>
 80114dc:	2b20      	cmp	r3, #32
 80114de:	d104      	bne.n	80114ea <__gethex+0x1e6>
 80114e0:	f845 bb04 	str.w	fp, [r5], #4
 80114e4:	f04f 0b00 	mov.w	fp, #0
 80114e8:	465b      	mov	r3, fp
 80114ea:	7830      	ldrb	r0, [r6, #0]
 80114ec:	9303      	str	r3, [sp, #12]
 80114ee:	f7ff fef3 	bl	80112d8 <__hexdig_fun>
 80114f2:	9b03      	ldr	r3, [sp, #12]
 80114f4:	f000 000f 	and.w	r0, r0, #15
 80114f8:	4098      	lsls	r0, r3
 80114fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80114fe:	3304      	adds	r3, #4
 8011500:	e7ae      	b.n	8011460 <__gethex+0x15c>
 8011502:	45b1      	cmp	r9, r6
 8011504:	d8ea      	bhi.n	80114dc <__gethex+0x1d8>
 8011506:	492b      	ldr	r1, [pc, #172]	@ (80115b4 <__gethex+0x2b0>)
 8011508:	9303      	str	r3, [sp, #12]
 801150a:	2201      	movs	r2, #1
 801150c:	4630      	mov	r0, r6
 801150e:	f7fd fa36 	bl	800e97e <strncmp>
 8011512:	9b03      	ldr	r3, [sp, #12]
 8011514:	2800      	cmp	r0, #0
 8011516:	d1e1      	bne.n	80114dc <__gethex+0x1d8>
 8011518:	e7a2      	b.n	8011460 <__gethex+0x15c>
 801151a:	1ea9      	subs	r1, r5, #2
 801151c:	4620      	mov	r0, r4
 801151e:	f7fe fe1e 	bl	801015e <__any_on>
 8011522:	2800      	cmp	r0, #0
 8011524:	d0c2      	beq.n	80114ac <__gethex+0x1a8>
 8011526:	f04f 0903 	mov.w	r9, #3
 801152a:	e7c1      	b.n	80114b0 <__gethex+0x1ac>
 801152c:	da09      	bge.n	8011542 <__gethex+0x23e>
 801152e:	1b75      	subs	r5, r6, r5
 8011530:	4621      	mov	r1, r4
 8011532:	9801      	ldr	r0, [sp, #4]
 8011534:	462a      	mov	r2, r5
 8011536:	f7fe fbd9 	bl	800fcec <__lshift>
 801153a:	1b7f      	subs	r7, r7, r5
 801153c:	4604      	mov	r4, r0
 801153e:	f100 0a14 	add.w	sl, r0, #20
 8011542:	f04f 0900 	mov.w	r9, #0
 8011546:	e7b8      	b.n	80114ba <__gethex+0x1b6>
 8011548:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801154c:	42bd      	cmp	r5, r7
 801154e:	dd6f      	ble.n	8011630 <__gethex+0x32c>
 8011550:	1bed      	subs	r5, r5, r7
 8011552:	42ae      	cmp	r6, r5
 8011554:	dc34      	bgt.n	80115c0 <__gethex+0x2bc>
 8011556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801155a:	2b02      	cmp	r3, #2
 801155c:	d022      	beq.n	80115a4 <__gethex+0x2a0>
 801155e:	2b03      	cmp	r3, #3
 8011560:	d024      	beq.n	80115ac <__gethex+0x2a8>
 8011562:	2b01      	cmp	r3, #1
 8011564:	d115      	bne.n	8011592 <__gethex+0x28e>
 8011566:	42ae      	cmp	r6, r5
 8011568:	d113      	bne.n	8011592 <__gethex+0x28e>
 801156a:	2e01      	cmp	r6, #1
 801156c:	d10b      	bne.n	8011586 <__gethex+0x282>
 801156e:	9a02      	ldr	r2, [sp, #8]
 8011570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011574:	6013      	str	r3, [r2, #0]
 8011576:	2301      	movs	r3, #1
 8011578:	6123      	str	r3, [r4, #16]
 801157a:	f8ca 3000 	str.w	r3, [sl]
 801157e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011580:	2562      	movs	r5, #98	@ 0x62
 8011582:	601c      	str	r4, [r3, #0]
 8011584:	e73a      	b.n	80113fc <__gethex+0xf8>
 8011586:	1e71      	subs	r1, r6, #1
 8011588:	4620      	mov	r0, r4
 801158a:	f7fe fde8 	bl	801015e <__any_on>
 801158e:	2800      	cmp	r0, #0
 8011590:	d1ed      	bne.n	801156e <__gethex+0x26a>
 8011592:	9801      	ldr	r0, [sp, #4]
 8011594:	4621      	mov	r1, r4
 8011596:	f7fe f999 	bl	800f8cc <_Bfree>
 801159a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801159c:	2300      	movs	r3, #0
 801159e:	6013      	str	r3, [r2, #0]
 80115a0:	2550      	movs	r5, #80	@ 0x50
 80115a2:	e72b      	b.n	80113fc <__gethex+0xf8>
 80115a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d1f3      	bne.n	8011592 <__gethex+0x28e>
 80115aa:	e7e0      	b.n	801156e <__gethex+0x26a>
 80115ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d1dd      	bne.n	801156e <__gethex+0x26a>
 80115b2:	e7ee      	b.n	8011592 <__gethex+0x28e>
 80115b4:	0803ce34 	.word	0x0803ce34
 80115b8:	0803cdca 	.word	0x0803cdca
 80115bc:	0803ce8b 	.word	0x0803ce8b
 80115c0:	1e6f      	subs	r7, r5, #1
 80115c2:	f1b9 0f00 	cmp.w	r9, #0
 80115c6:	d130      	bne.n	801162a <__gethex+0x326>
 80115c8:	b127      	cbz	r7, 80115d4 <__gethex+0x2d0>
 80115ca:	4639      	mov	r1, r7
 80115cc:	4620      	mov	r0, r4
 80115ce:	f7fe fdc6 	bl	801015e <__any_on>
 80115d2:	4681      	mov	r9, r0
 80115d4:	117a      	asrs	r2, r7, #5
 80115d6:	2301      	movs	r3, #1
 80115d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80115dc:	f007 071f 	and.w	r7, r7, #31
 80115e0:	40bb      	lsls	r3, r7
 80115e2:	4213      	tst	r3, r2
 80115e4:	4629      	mov	r1, r5
 80115e6:	4620      	mov	r0, r4
 80115e8:	bf18      	it	ne
 80115ea:	f049 0902 	orrne.w	r9, r9, #2
 80115ee:	f7ff fe21 	bl	8011234 <rshift>
 80115f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80115f6:	1b76      	subs	r6, r6, r5
 80115f8:	2502      	movs	r5, #2
 80115fa:	f1b9 0f00 	cmp.w	r9, #0
 80115fe:	d047      	beq.n	8011690 <__gethex+0x38c>
 8011600:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011604:	2b02      	cmp	r3, #2
 8011606:	d015      	beq.n	8011634 <__gethex+0x330>
 8011608:	2b03      	cmp	r3, #3
 801160a:	d017      	beq.n	801163c <__gethex+0x338>
 801160c:	2b01      	cmp	r3, #1
 801160e:	d109      	bne.n	8011624 <__gethex+0x320>
 8011610:	f019 0f02 	tst.w	r9, #2
 8011614:	d006      	beq.n	8011624 <__gethex+0x320>
 8011616:	f8da 3000 	ldr.w	r3, [sl]
 801161a:	ea49 0903 	orr.w	r9, r9, r3
 801161e:	f019 0f01 	tst.w	r9, #1
 8011622:	d10e      	bne.n	8011642 <__gethex+0x33e>
 8011624:	f045 0510 	orr.w	r5, r5, #16
 8011628:	e032      	b.n	8011690 <__gethex+0x38c>
 801162a:	f04f 0901 	mov.w	r9, #1
 801162e:	e7d1      	b.n	80115d4 <__gethex+0x2d0>
 8011630:	2501      	movs	r5, #1
 8011632:	e7e2      	b.n	80115fa <__gethex+0x2f6>
 8011634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011636:	f1c3 0301 	rsb	r3, r3, #1
 801163a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801163c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801163e:	2b00      	cmp	r3, #0
 8011640:	d0f0      	beq.n	8011624 <__gethex+0x320>
 8011642:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011646:	f104 0314 	add.w	r3, r4, #20
 801164a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801164e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011652:	f04f 0c00 	mov.w	ip, #0
 8011656:	4618      	mov	r0, r3
 8011658:	f853 2b04 	ldr.w	r2, [r3], #4
 801165c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011660:	d01b      	beq.n	801169a <__gethex+0x396>
 8011662:	3201      	adds	r2, #1
 8011664:	6002      	str	r2, [r0, #0]
 8011666:	2d02      	cmp	r5, #2
 8011668:	f104 0314 	add.w	r3, r4, #20
 801166c:	d13c      	bne.n	80116e8 <__gethex+0x3e4>
 801166e:	f8d8 2000 	ldr.w	r2, [r8]
 8011672:	3a01      	subs	r2, #1
 8011674:	42b2      	cmp	r2, r6
 8011676:	d109      	bne.n	801168c <__gethex+0x388>
 8011678:	1171      	asrs	r1, r6, #5
 801167a:	2201      	movs	r2, #1
 801167c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011680:	f006 061f 	and.w	r6, r6, #31
 8011684:	fa02 f606 	lsl.w	r6, r2, r6
 8011688:	421e      	tst	r6, r3
 801168a:	d13a      	bne.n	8011702 <__gethex+0x3fe>
 801168c:	f045 0520 	orr.w	r5, r5, #32
 8011690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011692:	601c      	str	r4, [r3, #0]
 8011694:	9b02      	ldr	r3, [sp, #8]
 8011696:	601f      	str	r7, [r3, #0]
 8011698:	e6b0      	b.n	80113fc <__gethex+0xf8>
 801169a:	4299      	cmp	r1, r3
 801169c:	f843 cc04 	str.w	ip, [r3, #-4]
 80116a0:	d8d9      	bhi.n	8011656 <__gethex+0x352>
 80116a2:	68a3      	ldr	r3, [r4, #8]
 80116a4:	459b      	cmp	fp, r3
 80116a6:	db17      	blt.n	80116d8 <__gethex+0x3d4>
 80116a8:	6861      	ldr	r1, [r4, #4]
 80116aa:	9801      	ldr	r0, [sp, #4]
 80116ac:	3101      	adds	r1, #1
 80116ae:	f7fe f8cd 	bl	800f84c <_Balloc>
 80116b2:	4681      	mov	r9, r0
 80116b4:	b918      	cbnz	r0, 80116be <__gethex+0x3ba>
 80116b6:	4b1a      	ldr	r3, [pc, #104]	@ (8011720 <__gethex+0x41c>)
 80116b8:	4602      	mov	r2, r0
 80116ba:	2184      	movs	r1, #132	@ 0x84
 80116bc:	e6c5      	b.n	801144a <__gethex+0x146>
 80116be:	6922      	ldr	r2, [r4, #16]
 80116c0:	3202      	adds	r2, #2
 80116c2:	f104 010c 	add.w	r1, r4, #12
 80116c6:	0092      	lsls	r2, r2, #2
 80116c8:	300c      	adds	r0, #12
 80116ca:	f7fd fa08 	bl	800eade <memcpy>
 80116ce:	4621      	mov	r1, r4
 80116d0:	9801      	ldr	r0, [sp, #4]
 80116d2:	f7fe f8fb 	bl	800f8cc <_Bfree>
 80116d6:	464c      	mov	r4, r9
 80116d8:	6923      	ldr	r3, [r4, #16]
 80116da:	1c5a      	adds	r2, r3, #1
 80116dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80116e0:	6122      	str	r2, [r4, #16]
 80116e2:	2201      	movs	r2, #1
 80116e4:	615a      	str	r2, [r3, #20]
 80116e6:	e7be      	b.n	8011666 <__gethex+0x362>
 80116e8:	6922      	ldr	r2, [r4, #16]
 80116ea:	455a      	cmp	r2, fp
 80116ec:	dd0b      	ble.n	8011706 <__gethex+0x402>
 80116ee:	2101      	movs	r1, #1
 80116f0:	4620      	mov	r0, r4
 80116f2:	f7ff fd9f 	bl	8011234 <rshift>
 80116f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116fa:	3701      	adds	r7, #1
 80116fc:	42bb      	cmp	r3, r7
 80116fe:	f6ff aee0 	blt.w	80114c2 <__gethex+0x1be>
 8011702:	2501      	movs	r5, #1
 8011704:	e7c2      	b.n	801168c <__gethex+0x388>
 8011706:	f016 061f 	ands.w	r6, r6, #31
 801170a:	d0fa      	beq.n	8011702 <__gethex+0x3fe>
 801170c:	4453      	add	r3, sl
 801170e:	f1c6 0620 	rsb	r6, r6, #32
 8011712:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011716:	f7fe f98b 	bl	800fa30 <__hi0bits>
 801171a:	42b0      	cmp	r0, r6
 801171c:	dbe7      	blt.n	80116ee <__gethex+0x3ea>
 801171e:	e7f0      	b.n	8011702 <__gethex+0x3fe>
 8011720:	0803cdca 	.word	0x0803cdca

08011724 <L_shift>:
 8011724:	f1c2 0208 	rsb	r2, r2, #8
 8011728:	0092      	lsls	r2, r2, #2
 801172a:	b570      	push	{r4, r5, r6, lr}
 801172c:	f1c2 0620 	rsb	r6, r2, #32
 8011730:	6843      	ldr	r3, [r0, #4]
 8011732:	6804      	ldr	r4, [r0, #0]
 8011734:	fa03 f506 	lsl.w	r5, r3, r6
 8011738:	432c      	orrs	r4, r5
 801173a:	40d3      	lsrs	r3, r2
 801173c:	6004      	str	r4, [r0, #0]
 801173e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011742:	4288      	cmp	r0, r1
 8011744:	d3f4      	bcc.n	8011730 <L_shift+0xc>
 8011746:	bd70      	pop	{r4, r5, r6, pc}

08011748 <__match>:
 8011748:	b530      	push	{r4, r5, lr}
 801174a:	6803      	ldr	r3, [r0, #0]
 801174c:	3301      	adds	r3, #1
 801174e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011752:	b914      	cbnz	r4, 801175a <__match+0x12>
 8011754:	6003      	str	r3, [r0, #0]
 8011756:	2001      	movs	r0, #1
 8011758:	bd30      	pop	{r4, r5, pc}
 801175a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801175e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011762:	2d19      	cmp	r5, #25
 8011764:	bf98      	it	ls
 8011766:	3220      	addls	r2, #32
 8011768:	42a2      	cmp	r2, r4
 801176a:	d0f0      	beq.n	801174e <__match+0x6>
 801176c:	2000      	movs	r0, #0
 801176e:	e7f3      	b.n	8011758 <__match+0x10>

08011770 <__hexnan>:
 8011770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011774:	680b      	ldr	r3, [r1, #0]
 8011776:	6801      	ldr	r1, [r0, #0]
 8011778:	115e      	asrs	r6, r3, #5
 801177a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801177e:	f013 031f 	ands.w	r3, r3, #31
 8011782:	b087      	sub	sp, #28
 8011784:	bf18      	it	ne
 8011786:	3604      	addne	r6, #4
 8011788:	2500      	movs	r5, #0
 801178a:	1f37      	subs	r7, r6, #4
 801178c:	4682      	mov	sl, r0
 801178e:	4690      	mov	r8, r2
 8011790:	9301      	str	r3, [sp, #4]
 8011792:	f846 5c04 	str.w	r5, [r6, #-4]
 8011796:	46b9      	mov	r9, r7
 8011798:	463c      	mov	r4, r7
 801179a:	9502      	str	r5, [sp, #8]
 801179c:	46ab      	mov	fp, r5
 801179e:	784a      	ldrb	r2, [r1, #1]
 80117a0:	1c4b      	adds	r3, r1, #1
 80117a2:	9303      	str	r3, [sp, #12]
 80117a4:	b342      	cbz	r2, 80117f8 <__hexnan+0x88>
 80117a6:	4610      	mov	r0, r2
 80117a8:	9105      	str	r1, [sp, #20]
 80117aa:	9204      	str	r2, [sp, #16]
 80117ac:	f7ff fd94 	bl	80112d8 <__hexdig_fun>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	d151      	bne.n	8011858 <__hexnan+0xe8>
 80117b4:	9a04      	ldr	r2, [sp, #16]
 80117b6:	9905      	ldr	r1, [sp, #20]
 80117b8:	2a20      	cmp	r2, #32
 80117ba:	d818      	bhi.n	80117ee <__hexnan+0x7e>
 80117bc:	9b02      	ldr	r3, [sp, #8]
 80117be:	459b      	cmp	fp, r3
 80117c0:	dd13      	ble.n	80117ea <__hexnan+0x7a>
 80117c2:	454c      	cmp	r4, r9
 80117c4:	d206      	bcs.n	80117d4 <__hexnan+0x64>
 80117c6:	2d07      	cmp	r5, #7
 80117c8:	dc04      	bgt.n	80117d4 <__hexnan+0x64>
 80117ca:	462a      	mov	r2, r5
 80117cc:	4649      	mov	r1, r9
 80117ce:	4620      	mov	r0, r4
 80117d0:	f7ff ffa8 	bl	8011724 <L_shift>
 80117d4:	4544      	cmp	r4, r8
 80117d6:	d952      	bls.n	801187e <__hexnan+0x10e>
 80117d8:	2300      	movs	r3, #0
 80117da:	f1a4 0904 	sub.w	r9, r4, #4
 80117de:	f844 3c04 	str.w	r3, [r4, #-4]
 80117e2:	f8cd b008 	str.w	fp, [sp, #8]
 80117e6:	464c      	mov	r4, r9
 80117e8:	461d      	mov	r5, r3
 80117ea:	9903      	ldr	r1, [sp, #12]
 80117ec:	e7d7      	b.n	801179e <__hexnan+0x2e>
 80117ee:	2a29      	cmp	r2, #41	@ 0x29
 80117f0:	d157      	bne.n	80118a2 <__hexnan+0x132>
 80117f2:	3102      	adds	r1, #2
 80117f4:	f8ca 1000 	str.w	r1, [sl]
 80117f8:	f1bb 0f00 	cmp.w	fp, #0
 80117fc:	d051      	beq.n	80118a2 <__hexnan+0x132>
 80117fe:	454c      	cmp	r4, r9
 8011800:	d206      	bcs.n	8011810 <__hexnan+0xa0>
 8011802:	2d07      	cmp	r5, #7
 8011804:	dc04      	bgt.n	8011810 <__hexnan+0xa0>
 8011806:	462a      	mov	r2, r5
 8011808:	4649      	mov	r1, r9
 801180a:	4620      	mov	r0, r4
 801180c:	f7ff ff8a 	bl	8011724 <L_shift>
 8011810:	4544      	cmp	r4, r8
 8011812:	d936      	bls.n	8011882 <__hexnan+0x112>
 8011814:	f1a8 0204 	sub.w	r2, r8, #4
 8011818:	4623      	mov	r3, r4
 801181a:	f853 1b04 	ldr.w	r1, [r3], #4
 801181e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011822:	429f      	cmp	r7, r3
 8011824:	d2f9      	bcs.n	801181a <__hexnan+0xaa>
 8011826:	1b3b      	subs	r3, r7, r4
 8011828:	f023 0303 	bic.w	r3, r3, #3
 801182c:	3304      	adds	r3, #4
 801182e:	3401      	adds	r4, #1
 8011830:	3e03      	subs	r6, #3
 8011832:	42b4      	cmp	r4, r6
 8011834:	bf88      	it	hi
 8011836:	2304      	movhi	r3, #4
 8011838:	4443      	add	r3, r8
 801183a:	2200      	movs	r2, #0
 801183c:	f843 2b04 	str.w	r2, [r3], #4
 8011840:	429f      	cmp	r7, r3
 8011842:	d2fb      	bcs.n	801183c <__hexnan+0xcc>
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	b91b      	cbnz	r3, 8011850 <__hexnan+0xe0>
 8011848:	4547      	cmp	r7, r8
 801184a:	d128      	bne.n	801189e <__hexnan+0x12e>
 801184c:	2301      	movs	r3, #1
 801184e:	603b      	str	r3, [r7, #0]
 8011850:	2005      	movs	r0, #5
 8011852:	b007      	add	sp, #28
 8011854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011858:	3501      	adds	r5, #1
 801185a:	2d08      	cmp	r5, #8
 801185c:	f10b 0b01 	add.w	fp, fp, #1
 8011860:	dd06      	ble.n	8011870 <__hexnan+0x100>
 8011862:	4544      	cmp	r4, r8
 8011864:	d9c1      	bls.n	80117ea <__hexnan+0x7a>
 8011866:	2300      	movs	r3, #0
 8011868:	f844 3c04 	str.w	r3, [r4, #-4]
 801186c:	2501      	movs	r5, #1
 801186e:	3c04      	subs	r4, #4
 8011870:	6822      	ldr	r2, [r4, #0]
 8011872:	f000 000f 	and.w	r0, r0, #15
 8011876:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801187a:	6020      	str	r0, [r4, #0]
 801187c:	e7b5      	b.n	80117ea <__hexnan+0x7a>
 801187e:	2508      	movs	r5, #8
 8011880:	e7b3      	b.n	80117ea <__hexnan+0x7a>
 8011882:	9b01      	ldr	r3, [sp, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d0dd      	beq.n	8011844 <__hexnan+0xd4>
 8011888:	f1c3 0320 	rsb	r3, r3, #32
 801188c:	f04f 32ff 	mov.w	r2, #4294967295
 8011890:	40da      	lsrs	r2, r3
 8011892:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011896:	4013      	ands	r3, r2
 8011898:	f846 3c04 	str.w	r3, [r6, #-4]
 801189c:	e7d2      	b.n	8011844 <__hexnan+0xd4>
 801189e:	3f04      	subs	r7, #4
 80118a0:	e7d0      	b.n	8011844 <__hexnan+0xd4>
 80118a2:	2004      	movs	r0, #4
 80118a4:	e7d5      	b.n	8011852 <__hexnan+0xe2>

080118a6 <__ascii_mbtowc>:
 80118a6:	b082      	sub	sp, #8
 80118a8:	b901      	cbnz	r1, 80118ac <__ascii_mbtowc+0x6>
 80118aa:	a901      	add	r1, sp, #4
 80118ac:	b142      	cbz	r2, 80118c0 <__ascii_mbtowc+0x1a>
 80118ae:	b14b      	cbz	r3, 80118c4 <__ascii_mbtowc+0x1e>
 80118b0:	7813      	ldrb	r3, [r2, #0]
 80118b2:	600b      	str	r3, [r1, #0]
 80118b4:	7812      	ldrb	r2, [r2, #0]
 80118b6:	1e10      	subs	r0, r2, #0
 80118b8:	bf18      	it	ne
 80118ba:	2001      	movne	r0, #1
 80118bc:	b002      	add	sp, #8
 80118be:	4770      	bx	lr
 80118c0:	4610      	mov	r0, r2
 80118c2:	e7fb      	b.n	80118bc <__ascii_mbtowc+0x16>
 80118c4:	f06f 0001 	mvn.w	r0, #1
 80118c8:	e7f8      	b.n	80118bc <__ascii_mbtowc+0x16>

080118ca <_realloc_r>:
 80118ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ce:	4607      	mov	r7, r0
 80118d0:	4614      	mov	r4, r2
 80118d2:	460d      	mov	r5, r1
 80118d4:	b921      	cbnz	r1, 80118e0 <_realloc_r+0x16>
 80118d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118da:	4611      	mov	r1, r2
 80118dc:	f7fb bf5a 	b.w	800d794 <_malloc_r>
 80118e0:	b92a      	cbnz	r2, 80118ee <_realloc_r+0x24>
 80118e2:	f7fd ff69 	bl	800f7b8 <_free_r>
 80118e6:	4625      	mov	r5, r4
 80118e8:	4628      	mov	r0, r5
 80118ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ee:	f000 f840 	bl	8011972 <_malloc_usable_size_r>
 80118f2:	4284      	cmp	r4, r0
 80118f4:	4606      	mov	r6, r0
 80118f6:	d802      	bhi.n	80118fe <_realloc_r+0x34>
 80118f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80118fc:	d8f4      	bhi.n	80118e8 <_realloc_r+0x1e>
 80118fe:	4621      	mov	r1, r4
 8011900:	4638      	mov	r0, r7
 8011902:	f7fb ff47 	bl	800d794 <_malloc_r>
 8011906:	4680      	mov	r8, r0
 8011908:	b908      	cbnz	r0, 801190e <_realloc_r+0x44>
 801190a:	4645      	mov	r5, r8
 801190c:	e7ec      	b.n	80118e8 <_realloc_r+0x1e>
 801190e:	42b4      	cmp	r4, r6
 8011910:	4622      	mov	r2, r4
 8011912:	4629      	mov	r1, r5
 8011914:	bf28      	it	cs
 8011916:	4632      	movcs	r2, r6
 8011918:	f7fd f8e1 	bl	800eade <memcpy>
 801191c:	4629      	mov	r1, r5
 801191e:	4638      	mov	r0, r7
 8011920:	f7fd ff4a 	bl	800f7b8 <_free_r>
 8011924:	e7f1      	b.n	801190a <_realloc_r+0x40>

08011926 <__ascii_wctomb>:
 8011926:	4603      	mov	r3, r0
 8011928:	4608      	mov	r0, r1
 801192a:	b141      	cbz	r1, 801193e <__ascii_wctomb+0x18>
 801192c:	2aff      	cmp	r2, #255	@ 0xff
 801192e:	d904      	bls.n	801193a <__ascii_wctomb+0x14>
 8011930:	228a      	movs	r2, #138	@ 0x8a
 8011932:	601a      	str	r2, [r3, #0]
 8011934:	f04f 30ff 	mov.w	r0, #4294967295
 8011938:	4770      	bx	lr
 801193a:	700a      	strb	r2, [r1, #0]
 801193c:	2001      	movs	r0, #1
 801193e:	4770      	bx	lr

08011940 <fiprintf>:
 8011940:	b40e      	push	{r1, r2, r3}
 8011942:	b503      	push	{r0, r1, lr}
 8011944:	4601      	mov	r1, r0
 8011946:	ab03      	add	r3, sp, #12
 8011948:	4805      	ldr	r0, [pc, #20]	@ (8011960 <fiprintf+0x20>)
 801194a:	f853 2b04 	ldr.w	r2, [r3], #4
 801194e:	6800      	ldr	r0, [r0, #0]
 8011950:	9301      	str	r3, [sp, #4]
 8011952:	f000 f83f 	bl	80119d4 <_vfiprintf_r>
 8011956:	b002      	add	sp, #8
 8011958:	f85d eb04 	ldr.w	lr, [sp], #4
 801195c:	b003      	add	sp, #12
 801195e:	4770      	bx	lr
 8011960:	20000060 	.word	0x20000060

08011964 <abort>:
 8011964:	b508      	push	{r3, lr}
 8011966:	2006      	movs	r0, #6
 8011968:	f000 fa08 	bl	8011d7c <raise>
 801196c:	2001      	movs	r0, #1
 801196e:	f7f0 fe7f 	bl	8002670 <_exit>

08011972 <_malloc_usable_size_r>:
 8011972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011976:	1f18      	subs	r0, r3, #4
 8011978:	2b00      	cmp	r3, #0
 801197a:	bfbc      	itt	lt
 801197c:	580b      	ldrlt	r3, [r1, r0]
 801197e:	18c0      	addlt	r0, r0, r3
 8011980:	4770      	bx	lr

08011982 <__sfputc_r>:
 8011982:	6893      	ldr	r3, [r2, #8]
 8011984:	3b01      	subs	r3, #1
 8011986:	2b00      	cmp	r3, #0
 8011988:	b410      	push	{r4}
 801198a:	6093      	str	r3, [r2, #8]
 801198c:	da08      	bge.n	80119a0 <__sfputc_r+0x1e>
 801198e:	6994      	ldr	r4, [r2, #24]
 8011990:	42a3      	cmp	r3, r4
 8011992:	db01      	blt.n	8011998 <__sfputc_r+0x16>
 8011994:	290a      	cmp	r1, #10
 8011996:	d103      	bne.n	80119a0 <__sfputc_r+0x1e>
 8011998:	f85d 4b04 	ldr.w	r4, [sp], #4
 801199c:	f000 b932 	b.w	8011c04 <__swbuf_r>
 80119a0:	6813      	ldr	r3, [r2, #0]
 80119a2:	1c58      	adds	r0, r3, #1
 80119a4:	6010      	str	r0, [r2, #0]
 80119a6:	7019      	strb	r1, [r3, #0]
 80119a8:	4608      	mov	r0, r1
 80119aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119ae:	4770      	bx	lr

080119b0 <__sfputs_r>:
 80119b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119b2:	4606      	mov	r6, r0
 80119b4:	460f      	mov	r7, r1
 80119b6:	4614      	mov	r4, r2
 80119b8:	18d5      	adds	r5, r2, r3
 80119ba:	42ac      	cmp	r4, r5
 80119bc:	d101      	bne.n	80119c2 <__sfputs_r+0x12>
 80119be:	2000      	movs	r0, #0
 80119c0:	e007      	b.n	80119d2 <__sfputs_r+0x22>
 80119c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119c6:	463a      	mov	r2, r7
 80119c8:	4630      	mov	r0, r6
 80119ca:	f7ff ffda 	bl	8011982 <__sfputc_r>
 80119ce:	1c43      	adds	r3, r0, #1
 80119d0:	d1f3      	bne.n	80119ba <__sfputs_r+0xa>
 80119d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119d4 <_vfiprintf_r>:
 80119d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d8:	460d      	mov	r5, r1
 80119da:	b09d      	sub	sp, #116	@ 0x74
 80119dc:	4614      	mov	r4, r2
 80119de:	4698      	mov	r8, r3
 80119e0:	4606      	mov	r6, r0
 80119e2:	b118      	cbz	r0, 80119ec <_vfiprintf_r+0x18>
 80119e4:	6a03      	ldr	r3, [r0, #32]
 80119e6:	b90b      	cbnz	r3, 80119ec <_vfiprintf_r+0x18>
 80119e8:	f7fc fed6 	bl	800e798 <__sinit>
 80119ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119ee:	07d9      	lsls	r1, r3, #31
 80119f0:	d405      	bmi.n	80119fe <_vfiprintf_r+0x2a>
 80119f2:	89ab      	ldrh	r3, [r5, #12]
 80119f4:	059a      	lsls	r2, r3, #22
 80119f6:	d402      	bmi.n	80119fe <_vfiprintf_r+0x2a>
 80119f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80119fa:	f7fd f86e 	bl	800eada <__retarget_lock_acquire_recursive>
 80119fe:	89ab      	ldrh	r3, [r5, #12]
 8011a00:	071b      	lsls	r3, r3, #28
 8011a02:	d501      	bpl.n	8011a08 <_vfiprintf_r+0x34>
 8011a04:	692b      	ldr	r3, [r5, #16]
 8011a06:	b99b      	cbnz	r3, 8011a30 <_vfiprintf_r+0x5c>
 8011a08:	4629      	mov	r1, r5
 8011a0a:	4630      	mov	r0, r6
 8011a0c:	f000 f938 	bl	8011c80 <__swsetup_r>
 8011a10:	b170      	cbz	r0, 8011a30 <_vfiprintf_r+0x5c>
 8011a12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a14:	07dc      	lsls	r4, r3, #31
 8011a16:	d504      	bpl.n	8011a22 <_vfiprintf_r+0x4e>
 8011a18:	f04f 30ff 	mov.w	r0, #4294967295
 8011a1c:	b01d      	add	sp, #116	@ 0x74
 8011a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a22:	89ab      	ldrh	r3, [r5, #12]
 8011a24:	0598      	lsls	r0, r3, #22
 8011a26:	d4f7      	bmi.n	8011a18 <_vfiprintf_r+0x44>
 8011a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a2a:	f7fd f857 	bl	800eadc <__retarget_lock_release_recursive>
 8011a2e:	e7f3      	b.n	8011a18 <_vfiprintf_r+0x44>
 8011a30:	2300      	movs	r3, #0
 8011a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a34:	2320      	movs	r3, #32
 8011a36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a3e:	2330      	movs	r3, #48	@ 0x30
 8011a40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011bf0 <_vfiprintf_r+0x21c>
 8011a44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a48:	f04f 0901 	mov.w	r9, #1
 8011a4c:	4623      	mov	r3, r4
 8011a4e:	469a      	mov	sl, r3
 8011a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a54:	b10a      	cbz	r2, 8011a5a <_vfiprintf_r+0x86>
 8011a56:	2a25      	cmp	r2, #37	@ 0x25
 8011a58:	d1f9      	bne.n	8011a4e <_vfiprintf_r+0x7a>
 8011a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8011a5e:	d00b      	beq.n	8011a78 <_vfiprintf_r+0xa4>
 8011a60:	465b      	mov	r3, fp
 8011a62:	4622      	mov	r2, r4
 8011a64:	4629      	mov	r1, r5
 8011a66:	4630      	mov	r0, r6
 8011a68:	f7ff ffa2 	bl	80119b0 <__sfputs_r>
 8011a6c:	3001      	adds	r0, #1
 8011a6e:	f000 80a7 	beq.w	8011bc0 <_vfiprintf_r+0x1ec>
 8011a72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a74:	445a      	add	r2, fp
 8011a76:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a78:	f89a 3000 	ldrb.w	r3, [sl]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f000 809f 	beq.w	8011bc0 <_vfiprintf_r+0x1ec>
 8011a82:	2300      	movs	r3, #0
 8011a84:	f04f 32ff 	mov.w	r2, #4294967295
 8011a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a8c:	f10a 0a01 	add.w	sl, sl, #1
 8011a90:	9304      	str	r3, [sp, #16]
 8011a92:	9307      	str	r3, [sp, #28]
 8011a94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a98:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a9a:	4654      	mov	r4, sl
 8011a9c:	2205      	movs	r2, #5
 8011a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aa2:	4853      	ldr	r0, [pc, #332]	@ (8011bf0 <_vfiprintf_r+0x21c>)
 8011aa4:	f7ee fba4 	bl	80001f0 <memchr>
 8011aa8:	9a04      	ldr	r2, [sp, #16]
 8011aaa:	b9d8      	cbnz	r0, 8011ae4 <_vfiprintf_r+0x110>
 8011aac:	06d1      	lsls	r1, r2, #27
 8011aae:	bf44      	itt	mi
 8011ab0:	2320      	movmi	r3, #32
 8011ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ab6:	0713      	lsls	r3, r2, #28
 8011ab8:	bf44      	itt	mi
 8011aba:	232b      	movmi	r3, #43	@ 0x2b
 8011abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ac4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ac6:	d015      	beq.n	8011af4 <_vfiprintf_r+0x120>
 8011ac8:	9a07      	ldr	r2, [sp, #28]
 8011aca:	4654      	mov	r4, sl
 8011acc:	2000      	movs	r0, #0
 8011ace:	f04f 0c0a 	mov.w	ip, #10
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ad8:	3b30      	subs	r3, #48	@ 0x30
 8011ada:	2b09      	cmp	r3, #9
 8011adc:	d94b      	bls.n	8011b76 <_vfiprintf_r+0x1a2>
 8011ade:	b1b0      	cbz	r0, 8011b0e <_vfiprintf_r+0x13a>
 8011ae0:	9207      	str	r2, [sp, #28]
 8011ae2:	e014      	b.n	8011b0e <_vfiprintf_r+0x13a>
 8011ae4:	eba0 0308 	sub.w	r3, r0, r8
 8011ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8011aec:	4313      	orrs	r3, r2
 8011aee:	9304      	str	r3, [sp, #16]
 8011af0:	46a2      	mov	sl, r4
 8011af2:	e7d2      	b.n	8011a9a <_vfiprintf_r+0xc6>
 8011af4:	9b03      	ldr	r3, [sp, #12]
 8011af6:	1d19      	adds	r1, r3, #4
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	9103      	str	r1, [sp, #12]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	bfbb      	ittet	lt
 8011b00:	425b      	neglt	r3, r3
 8011b02:	f042 0202 	orrlt.w	r2, r2, #2
 8011b06:	9307      	strge	r3, [sp, #28]
 8011b08:	9307      	strlt	r3, [sp, #28]
 8011b0a:	bfb8      	it	lt
 8011b0c:	9204      	strlt	r2, [sp, #16]
 8011b0e:	7823      	ldrb	r3, [r4, #0]
 8011b10:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b12:	d10a      	bne.n	8011b2a <_vfiprintf_r+0x156>
 8011b14:	7863      	ldrb	r3, [r4, #1]
 8011b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b18:	d132      	bne.n	8011b80 <_vfiprintf_r+0x1ac>
 8011b1a:	9b03      	ldr	r3, [sp, #12]
 8011b1c:	1d1a      	adds	r2, r3, #4
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	9203      	str	r2, [sp, #12]
 8011b22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b26:	3402      	adds	r4, #2
 8011b28:	9305      	str	r3, [sp, #20]
 8011b2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c00 <_vfiprintf_r+0x22c>
 8011b2e:	7821      	ldrb	r1, [r4, #0]
 8011b30:	2203      	movs	r2, #3
 8011b32:	4650      	mov	r0, sl
 8011b34:	f7ee fb5c 	bl	80001f0 <memchr>
 8011b38:	b138      	cbz	r0, 8011b4a <_vfiprintf_r+0x176>
 8011b3a:	9b04      	ldr	r3, [sp, #16]
 8011b3c:	eba0 000a 	sub.w	r0, r0, sl
 8011b40:	2240      	movs	r2, #64	@ 0x40
 8011b42:	4082      	lsls	r2, r0
 8011b44:	4313      	orrs	r3, r2
 8011b46:	3401      	adds	r4, #1
 8011b48:	9304      	str	r3, [sp, #16]
 8011b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b4e:	4829      	ldr	r0, [pc, #164]	@ (8011bf4 <_vfiprintf_r+0x220>)
 8011b50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b54:	2206      	movs	r2, #6
 8011b56:	f7ee fb4b 	bl	80001f0 <memchr>
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	d03f      	beq.n	8011bde <_vfiprintf_r+0x20a>
 8011b5e:	4b26      	ldr	r3, [pc, #152]	@ (8011bf8 <_vfiprintf_r+0x224>)
 8011b60:	bb1b      	cbnz	r3, 8011baa <_vfiprintf_r+0x1d6>
 8011b62:	9b03      	ldr	r3, [sp, #12]
 8011b64:	3307      	adds	r3, #7
 8011b66:	f023 0307 	bic.w	r3, r3, #7
 8011b6a:	3308      	adds	r3, #8
 8011b6c:	9303      	str	r3, [sp, #12]
 8011b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b70:	443b      	add	r3, r7
 8011b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b74:	e76a      	b.n	8011a4c <_vfiprintf_r+0x78>
 8011b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	2001      	movs	r0, #1
 8011b7e:	e7a8      	b.n	8011ad2 <_vfiprintf_r+0xfe>
 8011b80:	2300      	movs	r3, #0
 8011b82:	3401      	adds	r4, #1
 8011b84:	9305      	str	r3, [sp, #20]
 8011b86:	4619      	mov	r1, r3
 8011b88:	f04f 0c0a 	mov.w	ip, #10
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b92:	3a30      	subs	r2, #48	@ 0x30
 8011b94:	2a09      	cmp	r2, #9
 8011b96:	d903      	bls.n	8011ba0 <_vfiprintf_r+0x1cc>
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d0c6      	beq.n	8011b2a <_vfiprintf_r+0x156>
 8011b9c:	9105      	str	r1, [sp, #20]
 8011b9e:	e7c4      	b.n	8011b2a <_vfiprintf_r+0x156>
 8011ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	e7f0      	b.n	8011b8c <_vfiprintf_r+0x1b8>
 8011baa:	ab03      	add	r3, sp, #12
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	462a      	mov	r2, r5
 8011bb0:	4b12      	ldr	r3, [pc, #72]	@ (8011bfc <_vfiprintf_r+0x228>)
 8011bb2:	a904      	add	r1, sp, #16
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	f7fb ff9f 	bl	800daf8 <_printf_float>
 8011bba:	4607      	mov	r7, r0
 8011bbc:	1c78      	adds	r0, r7, #1
 8011bbe:	d1d6      	bne.n	8011b6e <_vfiprintf_r+0x19a>
 8011bc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bc2:	07d9      	lsls	r1, r3, #31
 8011bc4:	d405      	bmi.n	8011bd2 <_vfiprintf_r+0x1fe>
 8011bc6:	89ab      	ldrh	r3, [r5, #12]
 8011bc8:	059a      	lsls	r2, r3, #22
 8011bca:	d402      	bmi.n	8011bd2 <_vfiprintf_r+0x1fe>
 8011bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bce:	f7fc ff85 	bl	800eadc <__retarget_lock_release_recursive>
 8011bd2:	89ab      	ldrh	r3, [r5, #12]
 8011bd4:	065b      	lsls	r3, r3, #25
 8011bd6:	f53f af1f 	bmi.w	8011a18 <_vfiprintf_r+0x44>
 8011bda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bdc:	e71e      	b.n	8011a1c <_vfiprintf_r+0x48>
 8011bde:	ab03      	add	r3, sp, #12
 8011be0:	9300      	str	r3, [sp, #0]
 8011be2:	462a      	mov	r2, r5
 8011be4:	4b05      	ldr	r3, [pc, #20]	@ (8011bfc <_vfiprintf_r+0x228>)
 8011be6:	a904      	add	r1, sp, #16
 8011be8:	4630      	mov	r0, r6
 8011bea:	f7fc fa1d 	bl	800e028 <_printf_i>
 8011bee:	e7e4      	b.n	8011bba <_vfiprintf_r+0x1e6>
 8011bf0:	0803ce36 	.word	0x0803ce36
 8011bf4:	0803ce40 	.word	0x0803ce40
 8011bf8:	0800daf9 	.word	0x0800daf9
 8011bfc:	080119b1 	.word	0x080119b1
 8011c00:	0803ce3c 	.word	0x0803ce3c

08011c04 <__swbuf_r>:
 8011c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c06:	460e      	mov	r6, r1
 8011c08:	4614      	mov	r4, r2
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	b118      	cbz	r0, 8011c16 <__swbuf_r+0x12>
 8011c0e:	6a03      	ldr	r3, [r0, #32]
 8011c10:	b90b      	cbnz	r3, 8011c16 <__swbuf_r+0x12>
 8011c12:	f7fc fdc1 	bl	800e798 <__sinit>
 8011c16:	69a3      	ldr	r3, [r4, #24]
 8011c18:	60a3      	str	r3, [r4, #8]
 8011c1a:	89a3      	ldrh	r3, [r4, #12]
 8011c1c:	071a      	lsls	r2, r3, #28
 8011c1e:	d501      	bpl.n	8011c24 <__swbuf_r+0x20>
 8011c20:	6923      	ldr	r3, [r4, #16]
 8011c22:	b943      	cbnz	r3, 8011c36 <__swbuf_r+0x32>
 8011c24:	4621      	mov	r1, r4
 8011c26:	4628      	mov	r0, r5
 8011c28:	f000 f82a 	bl	8011c80 <__swsetup_r>
 8011c2c:	b118      	cbz	r0, 8011c36 <__swbuf_r+0x32>
 8011c2e:	f04f 37ff 	mov.w	r7, #4294967295
 8011c32:	4638      	mov	r0, r7
 8011c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c36:	6823      	ldr	r3, [r4, #0]
 8011c38:	6922      	ldr	r2, [r4, #16]
 8011c3a:	1a98      	subs	r0, r3, r2
 8011c3c:	6963      	ldr	r3, [r4, #20]
 8011c3e:	b2f6      	uxtb	r6, r6
 8011c40:	4283      	cmp	r3, r0
 8011c42:	4637      	mov	r7, r6
 8011c44:	dc05      	bgt.n	8011c52 <__swbuf_r+0x4e>
 8011c46:	4621      	mov	r1, r4
 8011c48:	4628      	mov	r0, r5
 8011c4a:	f7ff fa8f 	bl	801116c <_fflush_r>
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	d1ed      	bne.n	8011c2e <__swbuf_r+0x2a>
 8011c52:	68a3      	ldr	r3, [r4, #8]
 8011c54:	3b01      	subs	r3, #1
 8011c56:	60a3      	str	r3, [r4, #8]
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	1c5a      	adds	r2, r3, #1
 8011c5c:	6022      	str	r2, [r4, #0]
 8011c5e:	701e      	strb	r6, [r3, #0]
 8011c60:	6962      	ldr	r2, [r4, #20]
 8011c62:	1c43      	adds	r3, r0, #1
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d004      	beq.n	8011c72 <__swbuf_r+0x6e>
 8011c68:	89a3      	ldrh	r3, [r4, #12]
 8011c6a:	07db      	lsls	r3, r3, #31
 8011c6c:	d5e1      	bpl.n	8011c32 <__swbuf_r+0x2e>
 8011c6e:	2e0a      	cmp	r6, #10
 8011c70:	d1df      	bne.n	8011c32 <__swbuf_r+0x2e>
 8011c72:	4621      	mov	r1, r4
 8011c74:	4628      	mov	r0, r5
 8011c76:	f7ff fa79 	bl	801116c <_fflush_r>
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d0d9      	beq.n	8011c32 <__swbuf_r+0x2e>
 8011c7e:	e7d6      	b.n	8011c2e <__swbuf_r+0x2a>

08011c80 <__swsetup_r>:
 8011c80:	b538      	push	{r3, r4, r5, lr}
 8011c82:	4b29      	ldr	r3, [pc, #164]	@ (8011d28 <__swsetup_r+0xa8>)
 8011c84:	4605      	mov	r5, r0
 8011c86:	6818      	ldr	r0, [r3, #0]
 8011c88:	460c      	mov	r4, r1
 8011c8a:	b118      	cbz	r0, 8011c94 <__swsetup_r+0x14>
 8011c8c:	6a03      	ldr	r3, [r0, #32]
 8011c8e:	b90b      	cbnz	r3, 8011c94 <__swsetup_r+0x14>
 8011c90:	f7fc fd82 	bl	800e798 <__sinit>
 8011c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c98:	0719      	lsls	r1, r3, #28
 8011c9a:	d422      	bmi.n	8011ce2 <__swsetup_r+0x62>
 8011c9c:	06da      	lsls	r2, r3, #27
 8011c9e:	d407      	bmi.n	8011cb0 <__swsetup_r+0x30>
 8011ca0:	2209      	movs	r2, #9
 8011ca2:	602a      	str	r2, [r5, #0]
 8011ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ca8:	81a3      	strh	r3, [r4, #12]
 8011caa:	f04f 30ff 	mov.w	r0, #4294967295
 8011cae:	e033      	b.n	8011d18 <__swsetup_r+0x98>
 8011cb0:	0758      	lsls	r0, r3, #29
 8011cb2:	d512      	bpl.n	8011cda <__swsetup_r+0x5a>
 8011cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cb6:	b141      	cbz	r1, 8011cca <__swsetup_r+0x4a>
 8011cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011cbc:	4299      	cmp	r1, r3
 8011cbe:	d002      	beq.n	8011cc6 <__swsetup_r+0x46>
 8011cc0:	4628      	mov	r0, r5
 8011cc2:	f7fd fd79 	bl	800f7b8 <_free_r>
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cca:	89a3      	ldrh	r3, [r4, #12]
 8011ccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011cd0:	81a3      	strh	r3, [r4, #12]
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	6063      	str	r3, [r4, #4]
 8011cd6:	6923      	ldr	r3, [r4, #16]
 8011cd8:	6023      	str	r3, [r4, #0]
 8011cda:	89a3      	ldrh	r3, [r4, #12]
 8011cdc:	f043 0308 	orr.w	r3, r3, #8
 8011ce0:	81a3      	strh	r3, [r4, #12]
 8011ce2:	6923      	ldr	r3, [r4, #16]
 8011ce4:	b94b      	cbnz	r3, 8011cfa <__swsetup_r+0x7a>
 8011ce6:	89a3      	ldrh	r3, [r4, #12]
 8011ce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cf0:	d003      	beq.n	8011cfa <__swsetup_r+0x7a>
 8011cf2:	4621      	mov	r1, r4
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	f000 f883 	bl	8011e00 <__smakebuf_r>
 8011cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cfe:	f013 0201 	ands.w	r2, r3, #1
 8011d02:	d00a      	beq.n	8011d1a <__swsetup_r+0x9a>
 8011d04:	2200      	movs	r2, #0
 8011d06:	60a2      	str	r2, [r4, #8]
 8011d08:	6962      	ldr	r2, [r4, #20]
 8011d0a:	4252      	negs	r2, r2
 8011d0c:	61a2      	str	r2, [r4, #24]
 8011d0e:	6922      	ldr	r2, [r4, #16]
 8011d10:	b942      	cbnz	r2, 8011d24 <__swsetup_r+0xa4>
 8011d12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d16:	d1c5      	bne.n	8011ca4 <__swsetup_r+0x24>
 8011d18:	bd38      	pop	{r3, r4, r5, pc}
 8011d1a:	0799      	lsls	r1, r3, #30
 8011d1c:	bf58      	it	pl
 8011d1e:	6962      	ldrpl	r2, [r4, #20]
 8011d20:	60a2      	str	r2, [r4, #8]
 8011d22:	e7f4      	b.n	8011d0e <__swsetup_r+0x8e>
 8011d24:	2000      	movs	r0, #0
 8011d26:	e7f7      	b.n	8011d18 <__swsetup_r+0x98>
 8011d28:	20000060 	.word	0x20000060

08011d2c <_raise_r>:
 8011d2c:	291f      	cmp	r1, #31
 8011d2e:	b538      	push	{r3, r4, r5, lr}
 8011d30:	4605      	mov	r5, r0
 8011d32:	460c      	mov	r4, r1
 8011d34:	d904      	bls.n	8011d40 <_raise_r+0x14>
 8011d36:	2316      	movs	r3, #22
 8011d38:	6003      	str	r3, [r0, #0]
 8011d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d3e:	bd38      	pop	{r3, r4, r5, pc}
 8011d40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011d42:	b112      	cbz	r2, 8011d4a <_raise_r+0x1e>
 8011d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d48:	b94b      	cbnz	r3, 8011d5e <_raise_r+0x32>
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	f000 f830 	bl	8011db0 <_getpid_r>
 8011d50:	4622      	mov	r2, r4
 8011d52:	4601      	mov	r1, r0
 8011d54:	4628      	mov	r0, r5
 8011d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d5a:	f000 b817 	b.w	8011d8c <_kill_r>
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d00a      	beq.n	8011d78 <_raise_r+0x4c>
 8011d62:	1c59      	adds	r1, r3, #1
 8011d64:	d103      	bne.n	8011d6e <_raise_r+0x42>
 8011d66:	2316      	movs	r3, #22
 8011d68:	6003      	str	r3, [r0, #0]
 8011d6a:	2001      	movs	r0, #1
 8011d6c:	e7e7      	b.n	8011d3e <_raise_r+0x12>
 8011d6e:	2100      	movs	r1, #0
 8011d70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011d74:	4620      	mov	r0, r4
 8011d76:	4798      	blx	r3
 8011d78:	2000      	movs	r0, #0
 8011d7a:	e7e0      	b.n	8011d3e <_raise_r+0x12>

08011d7c <raise>:
 8011d7c:	4b02      	ldr	r3, [pc, #8]	@ (8011d88 <raise+0xc>)
 8011d7e:	4601      	mov	r1, r0
 8011d80:	6818      	ldr	r0, [r3, #0]
 8011d82:	f7ff bfd3 	b.w	8011d2c <_raise_r>
 8011d86:	bf00      	nop
 8011d88:	20000060 	.word	0x20000060

08011d8c <_kill_r>:
 8011d8c:	b538      	push	{r3, r4, r5, lr}
 8011d8e:	4d07      	ldr	r5, [pc, #28]	@ (8011dac <_kill_r+0x20>)
 8011d90:	2300      	movs	r3, #0
 8011d92:	4604      	mov	r4, r0
 8011d94:	4608      	mov	r0, r1
 8011d96:	4611      	mov	r1, r2
 8011d98:	602b      	str	r3, [r5, #0]
 8011d9a:	f7f0 fc59 	bl	8002650 <_kill>
 8011d9e:	1c43      	adds	r3, r0, #1
 8011da0:	d102      	bne.n	8011da8 <_kill_r+0x1c>
 8011da2:	682b      	ldr	r3, [r5, #0]
 8011da4:	b103      	cbz	r3, 8011da8 <_kill_r+0x1c>
 8011da6:	6023      	str	r3, [r4, #0]
 8011da8:	bd38      	pop	{r3, r4, r5, pc}
 8011daa:	bf00      	nop
 8011dac:	2000114c 	.word	0x2000114c

08011db0 <_getpid_r>:
 8011db0:	f7f0 bc46 	b.w	8002640 <_getpid>

08011db4 <__swhatbuf_r>:
 8011db4:	b570      	push	{r4, r5, r6, lr}
 8011db6:	460c      	mov	r4, r1
 8011db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbc:	2900      	cmp	r1, #0
 8011dbe:	b096      	sub	sp, #88	@ 0x58
 8011dc0:	4615      	mov	r5, r2
 8011dc2:	461e      	mov	r6, r3
 8011dc4:	da0d      	bge.n	8011de2 <__swhatbuf_r+0x2e>
 8011dc6:	89a3      	ldrh	r3, [r4, #12]
 8011dc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011dcc:	f04f 0100 	mov.w	r1, #0
 8011dd0:	bf14      	ite	ne
 8011dd2:	2340      	movne	r3, #64	@ 0x40
 8011dd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011dd8:	2000      	movs	r0, #0
 8011dda:	6031      	str	r1, [r6, #0]
 8011ddc:	602b      	str	r3, [r5, #0]
 8011dde:	b016      	add	sp, #88	@ 0x58
 8011de0:	bd70      	pop	{r4, r5, r6, pc}
 8011de2:	466a      	mov	r2, sp
 8011de4:	f000 f848 	bl	8011e78 <_fstat_r>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	dbec      	blt.n	8011dc6 <__swhatbuf_r+0x12>
 8011dec:	9901      	ldr	r1, [sp, #4]
 8011dee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011df2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011df6:	4259      	negs	r1, r3
 8011df8:	4159      	adcs	r1, r3
 8011dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011dfe:	e7eb      	b.n	8011dd8 <__swhatbuf_r+0x24>

08011e00 <__smakebuf_r>:
 8011e00:	898b      	ldrh	r3, [r1, #12]
 8011e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e04:	079d      	lsls	r5, r3, #30
 8011e06:	4606      	mov	r6, r0
 8011e08:	460c      	mov	r4, r1
 8011e0a:	d507      	bpl.n	8011e1c <__smakebuf_r+0x1c>
 8011e0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e10:	6023      	str	r3, [r4, #0]
 8011e12:	6123      	str	r3, [r4, #16]
 8011e14:	2301      	movs	r3, #1
 8011e16:	6163      	str	r3, [r4, #20]
 8011e18:	b003      	add	sp, #12
 8011e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e1c:	ab01      	add	r3, sp, #4
 8011e1e:	466a      	mov	r2, sp
 8011e20:	f7ff ffc8 	bl	8011db4 <__swhatbuf_r>
 8011e24:	9f00      	ldr	r7, [sp, #0]
 8011e26:	4605      	mov	r5, r0
 8011e28:	4639      	mov	r1, r7
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	f7fb fcb2 	bl	800d794 <_malloc_r>
 8011e30:	b948      	cbnz	r0, 8011e46 <__smakebuf_r+0x46>
 8011e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e36:	059a      	lsls	r2, r3, #22
 8011e38:	d4ee      	bmi.n	8011e18 <__smakebuf_r+0x18>
 8011e3a:	f023 0303 	bic.w	r3, r3, #3
 8011e3e:	f043 0302 	orr.w	r3, r3, #2
 8011e42:	81a3      	strh	r3, [r4, #12]
 8011e44:	e7e2      	b.n	8011e0c <__smakebuf_r+0xc>
 8011e46:	89a3      	ldrh	r3, [r4, #12]
 8011e48:	6020      	str	r0, [r4, #0]
 8011e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e4e:	81a3      	strh	r3, [r4, #12]
 8011e50:	9b01      	ldr	r3, [sp, #4]
 8011e52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e56:	b15b      	cbz	r3, 8011e70 <__smakebuf_r+0x70>
 8011e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f000 f81d 	bl	8011e9c <_isatty_r>
 8011e62:	b128      	cbz	r0, 8011e70 <__smakebuf_r+0x70>
 8011e64:	89a3      	ldrh	r3, [r4, #12]
 8011e66:	f023 0303 	bic.w	r3, r3, #3
 8011e6a:	f043 0301 	orr.w	r3, r3, #1
 8011e6e:	81a3      	strh	r3, [r4, #12]
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	431d      	orrs	r5, r3
 8011e74:	81a5      	strh	r5, [r4, #12]
 8011e76:	e7cf      	b.n	8011e18 <__smakebuf_r+0x18>

08011e78 <_fstat_r>:
 8011e78:	b538      	push	{r3, r4, r5, lr}
 8011e7a:	4d07      	ldr	r5, [pc, #28]	@ (8011e98 <_fstat_r+0x20>)
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	4604      	mov	r4, r0
 8011e80:	4608      	mov	r0, r1
 8011e82:	4611      	mov	r1, r2
 8011e84:	602b      	str	r3, [r5, #0]
 8011e86:	f7f0 fc27 	bl	80026d8 <_fstat>
 8011e8a:	1c43      	adds	r3, r0, #1
 8011e8c:	d102      	bne.n	8011e94 <_fstat_r+0x1c>
 8011e8e:	682b      	ldr	r3, [r5, #0]
 8011e90:	b103      	cbz	r3, 8011e94 <_fstat_r+0x1c>
 8011e92:	6023      	str	r3, [r4, #0]
 8011e94:	bd38      	pop	{r3, r4, r5, pc}
 8011e96:	bf00      	nop
 8011e98:	2000114c 	.word	0x2000114c

08011e9c <_isatty_r>:
 8011e9c:	b538      	push	{r3, r4, r5, lr}
 8011e9e:	4d06      	ldr	r5, [pc, #24]	@ (8011eb8 <_isatty_r+0x1c>)
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	4608      	mov	r0, r1
 8011ea6:	602b      	str	r3, [r5, #0]
 8011ea8:	f7f0 fc26 	bl	80026f8 <_isatty>
 8011eac:	1c43      	adds	r3, r0, #1
 8011eae:	d102      	bne.n	8011eb6 <_isatty_r+0x1a>
 8011eb0:	682b      	ldr	r3, [r5, #0]
 8011eb2:	b103      	cbz	r3, 8011eb6 <_isatty_r+0x1a>
 8011eb4:	6023      	str	r3, [r4, #0]
 8011eb6:	bd38      	pop	{r3, r4, r5, pc}
 8011eb8:	2000114c 	.word	0x2000114c

08011ebc <_init>:
 8011ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ebe:	bf00      	nop
 8011ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ec2:	bc08      	pop	{r3}
 8011ec4:	469e      	mov	lr, r3
 8011ec6:	4770      	bx	lr

08011ec8 <_fini>:
 8011ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eca:	bf00      	nop
 8011ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ece:	bc08      	pop	{r3}
 8011ed0:	469e      	mov	lr, r3
 8011ed2:	4770      	bx	lr
