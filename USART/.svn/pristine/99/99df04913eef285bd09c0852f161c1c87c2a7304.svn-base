#include "main.h"
#include "dma.h"
#include "spi.h"
#include "usart.h"
#include "fatfs.h"
#include "gpio.h"
#include "sdcard.h"
#include "user_spi.h"
#include "sdconfig.h"
#include "user_usart.h"

void SystemClock_Config(void);
static BYTE work[_MAX_SS];
uint8_t rx_buffer[256];
uint8_t tx_buffer[256];
volatile uint16_t rx_length = 0;
volatile uint16_t tx_length = 0;
volatile uint16_t data_ready = 0;
FATFS fs;
FIL fil;
UINT bw;
uint8_t res = 0;
uint8_t open = 0;
SD_Config current_config;

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_SPI2_Init();
  MX_FATFS_Init();
  MX_SPI1_Init();
  /*if(SD_Init() == SD_OK)
  {
	res=f_mount(&fs,"0:",1);
	if(res != FR_OK)
	{
		res = f_mkfs("", FM_FAT32, 0, work, sizeof(work));
		res = f_mount(NULL,"0:",1);
		res = f_mount(&fs,"0:",1);
		if(res != FR_OK)
			Error_Handler();
	}
  }
  if(file_exists(CONFIG_FILE) != FR_OK)
	  create_default_config();
  int log_num = get_next_log_number();
  snprintf(current_log_file, sizeof(current_log_file), "%s%05d.txt", LOG_PREFIX, log_num);
  if(f_open(&fil, current_log_file, FA_OPEN_APPEND | FA_WRITE) == FR_OK)
  {
	  open = 1;
  }
  current_config = load_and_apply_config();*/
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)rx_buffer, sizeof(rx_buffer));
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
  ON_R();

  while (1)
  {
	  if(data_ready)
	  {
		  if(CMD_Judge() == CMD_OK)
			   CMD_Execute();
		  else
			  printf("retry\n");
	  }
  }
}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
	  printf("Error\n");
	  HAL_Delay(1000);
  }
}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif
